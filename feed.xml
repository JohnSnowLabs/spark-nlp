<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-09-25T20:53:56+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">English 2d_oomv2_800 BertForSequenceClassification from abbassix</title><link href="/2024/09/25/2d_oomv2_800_en.html" rel="alternate" type="text/html" title="English 2d_oomv2_800 BertForSequenceClassification from abbassix" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/2d_oomv2_800_en</id><content type="html" xml:base="/2024/09/25/2d_oomv2_800_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`2d_oomv2_800` is a English model originally trained by abbassix.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/2d_oomv2_800_en_5.5.0_3.0_1727288371864.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/2d_oomv2_800_en_5.5.0_3.0_1727288371864.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;2d_oomv2_800&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;2d_oomv2_800&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|2d_oomv2_800|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|409.4 MB|

## References

https://huggingface.co/abbassix/2d_oomv2_800</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.2d_oomv2_800 is a English model originally trained by abbassix. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;2d_oomv2_800&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;2d_oomv2_800&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: 2d_oomv2_800 Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 409.4 MB References https://huggingface.co/abbassix/2d_oomv2_800</summary></entry><entry><title type="html">English 2d_psn_1600 BertForSequenceClassification from abbassix</title><link href="/2024/09/25/2d_psn_1600_en.html" rel="alternate" type="text/html" title="English 2d_psn_1600 BertForSequenceClassification from abbassix" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/2d_psn_1600_en</id><content type="html" xml:base="/2024/09/25/2d_psn_1600_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`2d_psn_1600` is a English model originally trained by abbassix.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/2d_psn_1600_en_5.5.0_3.0_1727276200209.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/2d_psn_1600_en_5.5.0_3.0_1727276200209.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;2d_psn_1600&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;2d_psn_1600&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|2d_psn_1600|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|409.4 MB|

## References

https://huggingface.co/abbassix/2d_psn_1600</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.2d_psn_1600 is a English model originally trained by abbassix. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;2d_psn_1600&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;2d_psn_1600&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: 2d_psn_1600 Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 409.4 MB References https://huggingface.co/abbassix/2d_psn_1600</summary></entry><entry><title type="html">English acronyms_baseline_vert_correct_clinicalbert BertForSequenceClassification from Wiggily</title><link href="/2024/09/25/acronyms_baseline_vert_correct_clinicalbert_en.html" rel="alternate" type="text/html" title="English acronyms_baseline_vert_correct_clinicalbert BertForSequenceClassification from Wiggily" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/acronyms_baseline_vert_correct_clinicalbert_en</id><content type="html" xml:base="/2024/09/25/acronyms_baseline_vert_correct_clinicalbert_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`acronyms_baseline_vert_correct_clinicalbert` is a English model originally trained by Wiggily.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/acronyms_baseline_vert_correct_clinicalbert_en_5.5.0_3.0_1727245392430.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/acronyms_baseline_vert_correct_clinicalbert_en_5.5.0_3.0_1727245392430.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;acronyms_baseline_vert_correct_clinicalbert&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;acronyms_baseline_vert_correct_clinicalbert&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|acronyms_baseline_vert_correct_clinicalbert|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|405.5 MB|

## References

https://huggingface.co/Wiggily/acronyms_baseline_vert_correct_clinicalbert</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.acronyms_baseline_vert_correct_clinicalbert is a English model originally trained by Wiggily. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;acronyms_baseline_vert_correct_clinicalbert&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;acronyms_baseline_vert_correct_clinicalbert&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: acronyms_baseline_vert_correct_clinicalbert Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 405.5 MB References https://huggingface.co/Wiggily/acronyms_baseline_vert_correct_clinicalbert</summary></entry><entry><title type="html">English adrv2024_markadamsmsba24 BertForSequenceClassification from MarkAdamsMSBA24</title><link href="/2024/09/25/adrv2024_markadamsmsba24_en.html" rel="alternate" type="text/html" title="English adrv2024_markadamsmsba24 BertForSequenceClassification from MarkAdamsMSBA24" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/adrv2024_markadamsmsba24_en</id><content type="html" xml:base="/2024/09/25/adrv2024_markadamsmsba24_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`adrv2024_markadamsmsba24` is a English model originally trained by MarkAdamsMSBA24.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/adrv2024_markadamsmsba24_en_5.5.0_3.0_1727267305241.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/adrv2024_markadamsmsba24_en_5.5.0_3.0_1727267305241.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;adrv2024_markadamsmsba24&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;adrv2024_markadamsmsba24&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|adrv2024_markadamsmsba24|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|409.4 MB|

## References

https://huggingface.co/MarkAdamsMSBA24/ADRv2024</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.adrv2024_markadamsmsba24 is a English model originally trained by MarkAdamsMSBA24. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;adrv2024_markadamsmsba24&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;adrv2024_markadamsmsba24&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: adrv2024_markadamsmsba24 Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 409.4 MB References https://huggingface.co/MarkAdamsMSBA24/ADRv2024</summary></entry><entry><title type="html">English adrv2024_paragon_analytics BertForSequenceClassification from paragon-analytics</title><link href="/2024/09/25/adrv2024_paragon_analytics_en.html" rel="alternate" type="text/html" title="English adrv2024_paragon_analytics BertForSequenceClassification from paragon-analytics" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/adrv2024_paragon_analytics_en</id><content type="html" xml:base="/2024/09/25/adrv2024_paragon_analytics_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`adrv2024_paragon_analytics` is a English model originally trained by paragon-analytics.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/adrv2024_paragon_analytics_en_5.5.0_3.0_1727268598866.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/adrv2024_paragon_analytics_en_5.5.0_3.0_1727268598866.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;adrv2024_paragon_analytics&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;adrv2024_paragon_analytics&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|adrv2024_paragon_analytics|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|405.9 MB|

## References

https://huggingface.co/paragon-analytics/ADRv2024</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.adrv2024_paragon_analytics is a English model originally trained by paragon-analytics. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;adrv2024_paragon_analytics&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;adrv2024_paragon_analytics&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: adrv2024_paragon_analytics Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 405.9 MB References https://huggingface.co/paragon-analytics/ADRv2024</summary></entry><entry><title type="html">English adrv2024_paragon_analytics_pipeline pipeline BertForSequenceClassification from paragon-analytics</title><link href="/2024/09/25/adrv2024_paragon_analytics_pipeline_en.html" rel="alternate" type="text/html" title="English adrv2024_paragon_analytics_pipeline pipeline BertForSequenceClassification from paragon-analytics" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/adrv2024_paragon_analytics_pipeline_en</id><content type="html" xml:base="/2024/09/25/adrv2024_paragon_analytics_pipeline_en.html">## Description

Pretrained BertForSequenceClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`adrv2024_paragon_analytics_pipeline` is a English model originally trained by paragon-analytics.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/adrv2024_paragon_analytics_pipeline_en_5.5.0_3.0_1727268620346.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/adrv2024_paragon_analytics_pipeline_en_5.5.0_3.0_1727268620346.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;adrv2024_paragon_analytics_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;adrv2024_paragon_analytics_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|adrv2024_paragon_analytics_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|405.9 MB|

## References

https://huggingface.co/paragon-analytics/ADRv2024

## Included Models

- DocumentAssembler
- TokenizerModel
- BertForSequenceClassification</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BertForSequenceClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.adrv2024_paragon_analytics_pipeline is a English model originally trained by paragon-analytics. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;adrv2024_paragon_analytics_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;adrv2024_paragon_analytics_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: adrv2024_paragon_analytics_pipeline Type: pipeline Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Language: en Size: 405.9 MB References https://huggingface.co/paragon-analytics/ADRv2024 Included Models DocumentAssembler TokenizerModel BertForSequenceClassification</summary></entry><entry><title type="html">English advance_bert_classification_pipeline pipeline BertForSequenceClassification from Kurkur99</title><link href="/2024/09/25/advance_bert_classification_pipeline_en.html" rel="alternate" type="text/html" title="English advance_bert_classification_pipeline pipeline BertForSequenceClassification from Kurkur99" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/advance_bert_classification_pipeline_en</id><content type="html" xml:base="/2024/09/25/advance_bert_classification_pipeline_en.html">## Description

Pretrained BertForSequenceClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`advance_bert_classification_pipeline` is a English model originally trained by Kurkur99.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/advance_bert_classification_pipeline_en_5.5.0_3.0_1727269957471.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/advance_bert_classification_pipeline_en_5.5.0_3.0_1727269957471.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;advance_bert_classification_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;advance_bert_classification_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|advance_bert_classification_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|414.1 MB|

## References

https://huggingface.co/Kurkur99/Advance_Bert_Classification

## Included Models

- DocumentAssembler
- TokenizerModel
- BertForSequenceClassification</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BertForSequenceClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.advance_bert_classification_pipeline is a English model originally trained by Kurkur99. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;advance_bert_classification_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;advance_bert_classification_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: advance_bert_classification_pipeline Type: pipeline Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Language: en Size: 414.1 MB References https://huggingface.co/Kurkur99/Advance_Bert_Classification Included Models DocumentAssembler TokenizerModel BertForSequenceClassification</summary></entry><entry><title type="html">English aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline pipeline BertForSequenceClassification from ys7yoo</title><link href="/2024/09/25/aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline_en.html" rel="alternate" type="text/html" title="English aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline pipeline BertForSequenceClassification from ys7yoo" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline_en</id><content type="html" xml:base="/2024/09/25/aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline_en.html">## Description

Pretrained BertForSequenceClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline` is a English model originally trained by ys7yoo.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline_en_5.5.0_3.0_1727287956799.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline_en_5.5.0_3.0_1727287956799.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|414.6 MB|

## References

https://huggingface.co/ys7yoo/aes_bert-base_sp90_lr1e-05_wr1e-01_wd1e-02_ep15_elsa

## Included Models

- DocumentAssembler
- TokenizerModel
- BertForSequenceClassification</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BertForSequenceClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline is a English model originally trained by ys7yoo. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: aes_bert_base_sp90_lr1e_05_wr1e_01_wd1e_02_ep15_elsa_pipeline Type: pipeline Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Language: en Size: 414.6 MB References https://huggingface.co/ys7yoo/aes_bert-base_sp90_lr1e-05_wr1e-01_wd1e-02_ep15_elsa Included Models DocumentAssembler TokenizerModel BertForSequenceClassification</summary></entry><entry><title type="html">English aes_enem_models_sourcea_regression_from_bertimbau_large_c5 BertForSequenceClassification from kamel-usp</title><link href="/2024/09/25/aes_enem_models_sourcea_regression_from_bertimbau_large_c5_en.html" rel="alternate" type="text/html" title="English aes_enem_models_sourcea_regression_from_bertimbau_large_c5 BertForSequenceClassification from kamel-usp" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/aes_enem_models_sourcea_regression_from_bertimbau_large_c5_en</id><content type="html" xml:base="/2024/09/25/aes_enem_models_sourcea_regression_from_bertimbau_large_c5_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`aes_enem_models_sourcea_regression_from_bertimbau_large_c5` is a English model originally trained by kamel-usp.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/aes_enem_models_sourcea_regression_from_bertimbau_large_c5_en_5.5.0_3.0_1727261656934.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/aes_enem_models_sourcea_regression_from_bertimbau_large_c5_en_5.5.0_3.0_1727261656934.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;aes_enem_models_sourcea_regression_from_bertimbau_large_c5&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;aes_enem_models_sourcea_regression_from_bertimbau_large_c5&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|aes_enem_models_sourcea_regression_from_bertimbau_large_c5|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|1.3 GB|

## References

https://huggingface.co/kamel-usp/aes_enem_models-sourceA-regression-from-bertimbau-large-C5</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.aes_enem_models_sourcea_regression_from_bertimbau_large_c5 is a English model originally trained by kamel-usp. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;aes_enem_models_sourcea_regression_from_bertimbau_large_c5&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;aes_enem_models_sourcea_regression_from_bertimbau_large_c5&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: aes_enem_models_sourcea_regression_from_bertimbau_large_c5 Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 1.3 GB References https://huggingface.co/kamel-usp/aes_enem_models-sourceA-regression-from-bertimbau-large-C5</summary></entry><entry><title type="html">English ag_news_38400_bert_base_uncased BertForSequenceClassification from Kyle1668</title><link href="/2024/09/25/ag_news_38400_bert_base_uncased_en.html" rel="alternate" type="text/html" title="English ag_news_38400_bert_base_uncased BertForSequenceClassification from Kyle1668" /><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>/2024/09/25/ag_news_38400_bert_base_uncased_en</id><content type="html" xml:base="/2024/09/25/ag_news_38400_bert_base_uncased_en.html">## Description

Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`ag_news_38400_bert_base_uncased` is a English model originally trained by Kyle1668.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/ag_news_38400_bert_base_uncased_en_5.5.0_3.0_1727222427253.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/ag_news_38400_bert_base_uncased_en_5.5.0_3.0_1727222427253.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
     
documentAssembler = DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')
    
tokenizer = Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier  = BertForSequenceClassification.pretrained(&quot;ag_news_38400_bert_base_uncased&quot;,&quot;en&quot;) \
     .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \
     .setOutputCol(&quot;class&quot;)

pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCols(&quot;text&quot;)
    .setOutputCols(&quot;document&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;ag_news_38400_bert_base_uncased&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) 
    .setOutputCol(&quot;class&quot;) 
    
val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier))
val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ag_news_38400_bert_base_uncased|
|Compatibility:|Spark NLP 5.5.0+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|409.4 MB|

## References

https://huggingface.co/Kyle1668/ag-news-38400-bert-base-uncased</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="sequence_classification" /><category term="bert" /><summary type="html">Description Pretrained BertForSequenceClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.ag_news_38400_bert_base_uncased is a English model originally trained by Kyle1668. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = BertForSequenceClassification.pretrained(&quot;ag_news_38400_bert_base_uncased&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;,&quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, sequenceClassifier]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCols(&quot;text&quot;) .setOutputCols(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val sequenceClassifier = BertForSequenceClassification.pretrained(&quot;ag_news_38400_bert_base_uncased&quot;, &quot;en&quot;) .setInputCols(Array(&quot;documents&quot;,&quot;token&quot;)) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, sequenceClassifier)) val data = Seq(&quot;I love spark-nlp&quot;).toDS.toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: ag_news_38400_bert_base_uncased Compatibility: Spark NLP 5.5.0+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 409.4 MB References https://huggingface.co/Kyle1668/ag-news-38400-bert-base-uncased</summary></entry></feed>