<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-12-18T16:45:31+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">English ai_vs_real_image_detection_dima806 ViTForImageClassification from dima806</title><link href="/2024/12/17/ai_vs_real_image_detection_dima806_en.html" rel="alternate" type="text/html" title="English ai_vs_real_image_detection_dima806 ViTForImageClassification from dima806" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/ai_vs_real_image_detection_dima806_en</id><content type="html" xml:base="/2024/12/17/ai_vs_real_image_detection_dima806_en.html">## Description

Pretrained ViTForImageClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`ai_vs_real_image_detection_dima806` is a English model originally trained by dima806.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/ai_vs_real_image_detection_dima806_en_5.5.1_3.0_1734421205658.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/ai_vs_real_image_detection_dima806_en_5.5.1_3.0_1734421205658.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

		
		

image_assembler = ImageAssembler()\
  .setInputCol(&quot;image&quot;)\
  .setOutputCol(&quot;image_assembler&quot;)

imageClassifier = ViTForImageClassification.pretrained(&quot;&quot;ai_vs_real_image_detection_dima806&quot;,&quot;en&quot;)\
  .setInputCols(&quot;image_assembler&quot;)\
  .setOutputCol(&quot;class&quot;)

pipeline = Pipeline(stages=[
  image_assembler,
  imageClassifier,
])

pipelineModel = pipeline.fit(imageDF)

pipelineDF = pipelineModel.transform(imageDF)

```
```scala

val imageAssembler = new ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)

val imageClassifier =  ViTForImageClassification.pretrained(&quot;ai_vs_real_image_detection_dima806&quot;,&quot;en&quot;) 
    .setInputCols(&quot;image_assembler&quot;) 
    .setOutputCol(&quot;class&quot;) 

val pipeline = new Pipeline().setStages(Array(imageAssembler, imageClassifier))

val pipelineModel = pipeline.fit(imageDF)

val pipelineDF = pipelineModel.transform(imageDF)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ai_vs_real_image_detection_dima806|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[image_assembler]|
|Output Labels:|[label]|
|Language:|en|
|Size:|321.3 MB|

## References

https://huggingface.co/dima806/ai_vs_real_image_detection</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="image_classification" /><category term="vit" /><summary type="html">Description Pretrained ViTForImageClassification model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.ai_vs_real_image_detection_dima806 is a English model originally trained by dima806. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU image_assembler = ImageAssembler()\ .setInputCol(&quot;image&quot;)\ .setOutputCol(&quot;image_assembler&quot;) imageClassifier = ViTForImageClassification.pretrained(&quot;&quot;ai_vs_real_image_detection_dima806&quot;,&quot;en&quot;)\ .setInputCols(&quot;image_assembler&quot;)\ .setOutputCol(&quot;class&quot;) pipeline = Pipeline(stages=[ image_assembler, imageClassifier, ]) pipelineModel = pipeline.fit(imageDF) pipelineDF = pipelineModel.transform(imageDF) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val imageClassifier = ViTForImageClassification.pretrained(&quot;ai_vs_real_image_detection_dima806&quot;,&quot;en&quot;) .setInputCols(&quot;image_assembler&quot;) .setOutputCol(&quot;class&quot;) val pipeline = new Pipeline().setStages(Array(imageAssembler, imageClassifier)) val pipelineModel = pipeline.fit(imageDF) val pipelineDF = pipelineModel.transform(imageDF) Model Information Model Name: ai_vs_real_image_detection_dima806 Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Input Labels: [image_assembler] Output Labels: [label] Language: en Size: 321.3 MB References https://huggingface.co/dima806/ai_vs_real_image_detection</summary></entry><entry><title type="html">English ai_vs_real_image_detection_dima806_pipeline pipeline ViTForImageClassification from dima806</title><link href="/2024/12/17/ai_vs_real_image_detection_dima806_pipeline_en.html" rel="alternate" type="text/html" title="English ai_vs_real_image_detection_dima806_pipeline pipeline ViTForImageClassification from dima806" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/ai_vs_real_image_detection_dima806_pipeline_en</id><content type="html" xml:base="/2024/12/17/ai_vs_real_image_detection_dima806_pipeline_en.html">## Description

Pretrained ViTForImageClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`ai_vs_real_image_detection_dima806_pipeline` is a English model originally trained by dima806.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/ai_vs_real_image_detection_dima806_pipeline_en_5.5.1_3.0_1734421221657.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/ai_vs_real_image_detection_dima806_pipeline_en_5.5.1_3.0_1734421221657.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;ai_vs_real_image_detection_dima806_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;ai_vs_real_image_detection_dima806_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ai_vs_real_image_detection_dima806_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|321.3 MB|

## References

https://huggingface.co/dima806/ai_vs_real_image_detection

## Included Models

- ImageAssembler
- ViTForImageClassification</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained ViTForImageClassification, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.ai_vs_real_image_detection_dima806_pipeline is a English model originally trained by dima806. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;ai_vs_real_image_detection_dima806_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;ai_vs_real_image_detection_dima806_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: ai_vs_real_image_detection_dima806_pipeline Type: pipeline Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Language: en Size: 321.3 MB References https://huggingface.co/dima806/ai_vs_real_image_detection Included Models ImageAssembler ViTForImageClassification</summary></entry><entry><title type="html">Arabic ancient_semitic_bert BertEmbeddings from mehdie</title><link href="/2024/12/17/ancient_semitic_bert_ar.html" rel="alternate" type="text/html" title="Arabic ancient_semitic_bert BertEmbeddings from mehdie" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/ancient_semitic_bert_ar</id><content type="html" xml:base="/2024/12/17/ancient_semitic_bert_ar.html">## Description

Pretrained BertEmbeddings model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`ancient_semitic_bert` is a Arabic model originally trained by mehdie.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/ancient_semitic_bert_ar_5.5.1_3.0_1734416535364.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/ancient_semitic_bert_ar_5.5.1_3.0_1734416535364.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
 
documentAssembler = DocumentAssembler() \
      .setInputCol(&quot;text&quot;) \
      .setOutputCol(&quot;document&quot;)
    
tokenizer = Tokenizer() \ 
      .setInputCols(&quot;document&quot;) \ 
      .setOutputCol(&quot;token&quot;)

embeddings = BertEmbeddings.pretrained(&quot;ancient_semitic_bert&quot;,&quot;ar&quot;) \
      .setInputCols([&quot;document&quot;, &quot;token&quot;]) \
      .setOutputCol(&quot;embeddings&quot;)       
        
pipeline = Pipeline().setStages([documentAssembler, tokenizer, embeddings])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)
    
val tokenizer = new Tokenizer() 
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val embeddings = BertEmbeddings.pretrained(&quot;ancient_semitic_bert&quot;,&quot;ar&quot;) 
    .setInputCols(Array(&quot;document&quot;, &quot;token&quot;)) 
    .setOutputCol(&quot;embeddings&quot;)

val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, embeddings))
val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ancient_semitic_bert|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[bert]|
|Language:|ar|
|Size:|469.9 MB|

## References

https://huggingface.co/mehdie/ancient_semitic_bert</content><author><name>John Snow Labs</name></author><category term="ar" /><category term="open_source" /><category term="onnx" /><category term="embeddings" /><category term="bert" /><summary type="html">Description Pretrained BertEmbeddings model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.ancient_semitic_bert is a Arabic model originally trained by mehdie. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) tokenizer = Tokenizer() \ .setInputCols(&quot;document&quot;) \ .setOutputCol(&quot;token&quot;) embeddings = BertEmbeddings.pretrained(&quot;ancient_semitic_bert&quot;,&quot;ar&quot;) \ .setInputCols([&quot;document&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) pipeline = Pipeline().setStages([documentAssembler, tokenizer, embeddings]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val embeddings = BertEmbeddings.pretrained(&quot;ancient_semitic_bert&quot;,&quot;ar&quot;) .setInputCols(Array(&quot;document&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, tokenizer, embeddings)) val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: ancient_semitic_bert Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Input Labels: [document, token] Output Labels: [bert] Language: ar Size: 469.9 MB References https://huggingface.co/mehdie/ancient_semitic_bert</summary></entry><entry><title type="html">Arabic ancient_semitic_bert_pipeline pipeline BertEmbeddings from mehdie</title><link href="/2024/12/17/ancient_semitic_bert_pipeline_ar.html" rel="alternate" type="text/html" title="Arabic ancient_semitic_bert_pipeline pipeline BertEmbeddings from mehdie" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/ancient_semitic_bert_pipeline_ar</id><content type="html" xml:base="/2024/12/17/ancient_semitic_bert_pipeline_ar.html">## Description

Pretrained BertEmbeddings, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`ancient_semitic_bert_pipeline` is a Arabic model originally trained by mehdie.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/ancient_semitic_bert_pipeline_ar_5.5.1_3.0_1734416560173.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/ancient_semitic_bert_pipeline_ar_5.5.1_3.0_1734416560173.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;ancient_semitic_bert_pipeline&quot;, lang = &quot;ar&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;ancient_semitic_bert_pipeline&quot;, lang = &quot;ar&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ancient_semitic_bert_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Language:|ar|
|Size:|469.9 MB|

## References

https://huggingface.co/mehdie/ancient_semitic_bert

## Included Models

- DocumentAssembler
- TokenizerModel
- BertEmbeddings</content><author><name>John Snow Labs</name></author><category term="ar" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BertEmbeddings, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.ancient_semitic_bert_pipeline is a Arabic model originally trained by mehdie. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;ancient_semitic_bert_pipeline&quot;, lang = &quot;ar&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;ancient_semitic_bert_pipeline&quot;, lang = &quot;ar&quot;) val annotations = pipeline.transform(df) Model Information Model Name: ancient_semitic_bert_pipeline Type: pipeline Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Language: ar Size: 469.9 MB References https://huggingface.co/mehdie/ancient_semitic_bert Included Models DocumentAssembler TokenizerModel BertEmbeddings</summary></entry><entry><title type="html">English bart_base_multi_news BartTransformer from Ssarion</title><link href="/2024/12/17/bart_base_multi_news_en.html" rel="alternate" type="text/html" title="English bart_base_multi_news BartTransformer from Ssarion" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/bart_base_multi_news_en</id><content type="html" xml:base="/2024/12/17/bart_base_multi_news_en.html">## Description

Pretrained BartTransformer model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`bart_base_multi_news` is a English model originally trained by Ssarion.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/bart_base_multi_news_en_5.5.1_3.0_1734410936081.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/bart_base_multi_news_en_5.5.1_3.0_1734410936081.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
 
documentAssembler = DocumentAssembler() \
      .setInputCol(&quot;text&quot;) \
      .setOutputCol(&quot;document&quot;)

seq2seq = BartTransformer.pretrained(&quot;bart_base_multi_news&quot;,&quot;en&quot;) \
      .setInputCols([&quot;documents&quot;]) \
      .setOutputCol(&quot;generation&quot;)       
        
pipeline = Pipeline().setStages([documentAssembler, seq2seq])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)
    
val seq2seq = BartTransformer.pretrained(&quot;bart_base_multi_news&quot;,&quot;en&quot;) 
    .setInputCols(Array(&quot;documents&quot;)) 
    .setOutputCol(&quot;generation&quot;)

val pipeline = new Pipeline().setStages(Array(documentAssembler, seq2seq))
val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bart_base_multi_news|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[output]|
|Language:|en|
|Size:|810.2 MB|

## References

https://huggingface.co/Ssarion/bart-base-multi-news</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="text_generation" /><category term="bart" /><summary type="html">Description Pretrained BartTransformer model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.bart_base_multi_news is a English model originally trained by Ssarion. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) seq2seq = BartTransformer.pretrained(&quot;bart_base_multi_news&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;]) \ .setOutputCol(&quot;generation&quot;) pipeline = Pipeline().setStages([documentAssembler, seq2seq]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val seq2seq = BartTransformer.pretrained(&quot;bart_base_multi_news&quot;,&quot;en&quot;) .setInputCols(Array(&quot;documents&quot;)) .setOutputCol(&quot;generation&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, seq2seq)) val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: bart_base_multi_news Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Input Labels: [document] Output Labels: [output] Language: en Size: 810.2 MB References https://huggingface.co/Ssarion/bart-base-multi-news</summary></entry><entry><title type="html">English bart_base_multi_news_pipeline pipeline BartTransformer from Ssarion</title><link href="/2024/12/17/bart_base_multi_news_pipeline_en.html" rel="alternate" type="text/html" title="English bart_base_multi_news_pipeline pipeline BartTransformer from Ssarion" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/bart_base_multi_news_pipeline_en</id><content type="html" xml:base="/2024/12/17/bart_base_multi_news_pipeline_en.html">## Description

Pretrained BartTransformer, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`bart_base_multi_news_pipeline` is a English model originally trained by Ssarion.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/bart_base_multi_news_pipeline_en_5.5.1_3.0_1734410977550.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/bart_base_multi_news_pipeline_en_5.5.1_3.0_1734410977550.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;bart_base_multi_news_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;bart_base_multi_news_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bart_base_multi_news_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|810.2 MB|

## References

https://huggingface.co/Ssarion/bart-base-multi-news

## Included Models

- DocumentAssembler
- BartTransformer</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BartTransformer, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.bart_base_multi_news_pipeline is a English model originally trained by Ssarion. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;bart_base_multi_news_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;bart_base_multi_news_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: bart_base_multi_news_pipeline Type: pipeline Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Language: en Size: 810.2 MB References https://huggingface.co/Ssarion/bart-base-multi-news Included Models DocumentAssembler BartTransformer</summary></entry><entry><title type="html">English bart_eli5 BartTransformer from yjernite</title><link href="/2024/12/17/bart_eli5_en.html" rel="alternate" type="text/html" title="English bart_eli5 BartTransformer from yjernite" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/bart_eli5_en</id><content type="html" xml:base="/2024/12/17/bart_eli5_en.html">## Description

Pretrained BartTransformer model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`bart_eli5` is a English model originally trained by yjernite.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/bart_eli5_en_5.5.1_3.0_1734410855365.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/bart_eli5_en_5.5.1_3.0_1734410855365.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
 
documentAssembler = DocumentAssembler() \
      .setInputCol(&quot;text&quot;) \
      .setOutputCol(&quot;document&quot;)

seq2seq = BartTransformer.pretrained(&quot;bart_eli5&quot;,&quot;en&quot;) \
      .setInputCols([&quot;documents&quot;]) \
      .setOutputCol(&quot;generation&quot;)       
        
pipeline = Pipeline().setStages([documentAssembler, seq2seq])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)
    
val seq2seq = BartTransformer.pretrained(&quot;bart_eli5&quot;,&quot;en&quot;) 
    .setInputCols(Array(&quot;documents&quot;)) 
    .setOutputCol(&quot;generation&quot;)

val pipeline = new Pipeline().setStages(Array(documentAssembler, seq2seq))
val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bart_eli5|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[output]|
|Language:|en|
|Size:|1.9 GB|

## References

https://huggingface.co/yjernite/bart_eli5</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="text_generation" /><category term="bart" /><summary type="html">Description Pretrained BartTransformer model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.bart_eli5 is a English model originally trained by yjernite. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) seq2seq = BartTransformer.pretrained(&quot;bart_eli5&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;]) \ .setOutputCol(&quot;generation&quot;) pipeline = Pipeline().setStages([documentAssembler, seq2seq]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val seq2seq = BartTransformer.pretrained(&quot;bart_eli5&quot;,&quot;en&quot;) .setInputCols(Array(&quot;documents&quot;)) .setOutputCol(&quot;generation&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, seq2seq)) val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: bart_eli5 Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Input Labels: [document] Output Labels: [output] Language: en Size: 1.9 GB References https://huggingface.co/yjernite/bart_eli5</summary></entry><entry><title type="html">English bart_eli5_pipeline pipeline BartTransformer from yjernite</title><link href="/2024/12/17/bart_eli5_pipeline_en.html" rel="alternate" type="text/html" title="English bart_eli5_pipeline pipeline BartTransformer from yjernite" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/bart_eli5_pipeline_en</id><content type="html" xml:base="/2024/12/17/bart_eli5_pipeline_en.html">## Description

Pretrained BartTransformer, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`bart_eli5_pipeline` is a English model originally trained by yjernite.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/bart_eli5_pipeline_en_5.5.1_3.0_1734410945588.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/bart_eli5_pipeline_en_5.5.1_3.0_1734410945588.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;bart_eli5_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;bart_eli5_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bart_eli5_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|1.9 GB|

## References

https://huggingface.co/yjernite/bart_eli5

## Included Models

- DocumentAssembler
- BartTransformer</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BartTransformer, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.bart_eli5_pipeline is a English model originally trained by yjernite. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;bart_eli5_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;bart_eli5_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: bart_eli5_pipeline Type: pipeline Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Language: en Size: 1.9 GB References https://huggingface.co/yjernite/bart_eli5 Included Models DocumentAssembler BartTransformer</summary></entry><entry><title type="html">English bart_paraphrase BartTransformer from eugenesiow</title><link href="/2024/12/17/bart_paraphrase_en.html" rel="alternate" type="text/html" title="English bart_paraphrase BartTransformer from eugenesiow" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/bart_paraphrase_en</id><content type="html" xml:base="/2024/12/17/bart_paraphrase_en.html">## Description

Pretrained BartTransformer model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`bart_paraphrase` is a English model originally trained by eugenesiow.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/bart_paraphrase_en_5.5.1_3.0_1734411766884.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/bart_paraphrase_en_5.5.1_3.0_1734411766884.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
 
documentAssembler = DocumentAssembler() \
      .setInputCol(&quot;text&quot;) \
      .setOutputCol(&quot;document&quot;)

seq2seq = BartTransformer.pretrained(&quot;bart_paraphrase&quot;,&quot;en&quot;) \
      .setInputCols([&quot;documents&quot;]) \
      .setOutputCol(&quot;generation&quot;)       
        
pipeline = Pipeline().setStages([documentAssembler, seq2seq])
data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;)
pipelineModel = pipeline.fit(data)
pipelineDF = pipelineModel.transform(data)

```
```scala

val documentAssembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)
    
val seq2seq = BartTransformer.pretrained(&quot;bart_paraphrase&quot;,&quot;en&quot;) 
    .setInputCols(Array(&quot;documents&quot;)) 
    .setOutputCol(&quot;generation&quot;)

val pipeline = new Pipeline().setStages(Array(documentAssembler, seq2seq))
val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;)
val pipelineModel = pipeline.fit(data)
val pipelineDF = pipelineModel.transform(data)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bart_paraphrase|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[output]|
|Language:|en|
|Size:|1.9 GB|

## References

https://huggingface.co/eugenesiow/bart-paraphrase</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="onnx" /><category term="text_generation" /><category term="bart" /><summary type="html">Description Pretrained BartTransformer model, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.bart_paraphrase is a English model originally trained by eugenesiow. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) seq2seq = BartTransformer.pretrained(&quot;bart_paraphrase&quot;,&quot;en&quot;) \ .setInputCols([&quot;documents&quot;]) \ .setOutputCol(&quot;generation&quot;) pipeline = Pipeline().setStages([documentAssembler, seq2seq]) data = spark.createDataFrame([[&quot;I love spark-nlp&quot;]]).toDF(&quot;text&quot;) pipelineModel = pipeline.fit(data) pipelineDF = pipelineModel.transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val seq2seq = BartTransformer.pretrained(&quot;bart_paraphrase&quot;,&quot;en&quot;) .setInputCols(Array(&quot;documents&quot;)) .setOutputCol(&quot;generation&quot;) val pipeline = new Pipeline().setStages(Array(documentAssembler, seq2seq)) val data = Seq(&quot;I love spark-nlp&quot;).toDF(&quot;text&quot;) val pipelineModel = pipeline.fit(data) val pipelineDF = pipelineModel.transform(data) Model Information Model Name: bart_paraphrase Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Input Labels: [document] Output Labels: [output] Language: en Size: 1.9 GB References https://huggingface.co/eugenesiow/bart-paraphrase</summary></entry><entry><title type="html">English bart_paraphrase_pipeline pipeline BartTransformer from eugenesiow</title><link href="/2024/12/17/bart_paraphrase_pipeline_en.html" rel="alternate" type="text/html" title="English bart_paraphrase_pipeline pipeline BartTransformer from eugenesiow" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>/2024/12/17/bart_paraphrase_pipeline_en</id><content type="html" xml:base="/2024/12/17/bart_paraphrase_pipeline_en.html">## Description

Pretrained BartTransformer, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.`bart_paraphrase_pipeline` is a English model originally trained by eugenesiow.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/public/models/bart_paraphrase_pipeline_en_5.5.1_3.0_1734411859119.zip){:.button.button-orange.button-orange-trans.arr.button-icon}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/public/models/bart_paraphrase_pipeline_en_5.5.1_3.0_1734411859119.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

pipeline = PretrainedPipeline(&quot;bart_paraphrase_pipeline&quot;, lang = &quot;en&quot;)
annotations =  pipeline.transform(df)   

```
```scala

val pipeline = new PretrainedPipeline(&quot;bart_paraphrase_pipeline&quot;, lang = &quot;en&quot;)
val annotations = pipeline.transform(df)

```
&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bart_paraphrase_pipeline|
|Type:|pipeline|
|Compatibility:|Spark NLP 5.5.1+|
|License:|Open Source|
|Edition:|Official|
|Language:|en|
|Size:|1.9 GB|

## References

https://huggingface.co/eugenesiow/bart-paraphrase

## Included Models

- DocumentAssembler
- BartTransformer</content><author><name>John Snow Labs</name></author><category term="en" /><category term="open_source" /><category term="pipeline" /><category term="onnx" /><summary type="html">Description Pretrained BartTransformer, adapted from Hugging Face and curated to provide scalability and production-readiness using Spark NLP.bart_paraphrase_pipeline is a English model originally trained by eugenesiow. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU pipeline = PretrainedPipeline(&quot;bart_paraphrase_pipeline&quot;, lang = &quot;en&quot;) annotations = pipeline.transform(df) val pipeline = new PretrainedPipeline(&quot;bart_paraphrase_pipeline&quot;, lang = &quot;en&quot;) val annotations = pipeline.transform(df) Model Information Model Name: bart_paraphrase_pipeline Type: pipeline Compatibility: Spark NLP 5.5.1+ License: Open Source Edition: Official Language: en Size: 1.9 GB References https://huggingface.co/eugenesiow/bart-paraphrase Included Models DocumentAssembler BartTransformer</summary></entry></feed>