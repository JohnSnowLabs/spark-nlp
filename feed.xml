<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-20T19:31:12+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Extract relations between NIHSS entities</title><link href="/2023/01/15/redl_nihss_biobert_en.html" rel="alternate" type="text/html" title="Extract relations between NIHSS entities" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_nihss_biobert_en</id><content type="html" xml:base="/2023/01/15/redl_nihss_biobert_en.html">## Description

Relate scale items and their measurements according to NIHSS guidelines.

## Predicted Entities

`Has_Value`, `0`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_NIHSS/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/10.Clinical_Relation_Extraction.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_nihss_biobert_en_4.2.4_3.0_1673762755276.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_nihss_biobert_en_4.2.4_3.0_1673762755276.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
documenter = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentencer = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentences&quot;)

tokenizer = sparknlp.annotators.Tokenizer()\
    .setInputCols([&quot;sentences&quot;])\
    .setOutputCol(&quot;tokens&quot;)

pos_tagger = PerceptronModel().pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;])\
    .setOutputCol(&quot;pos_tags&quot;)

words_embedder = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)

ner_tagger = MedicalNerModel.pretrained(&quot;ner_nihss&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;)\
    .setOutputCol(&quot;ner_tags&quot;) 

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;]) \
    .setOutputCol(&quot;ner_chunks&quot;)

dependency_parser = DependencyParserModel().pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

# Set a filter on pairs of named entities which will be treated as relation candidates
re_ner_chunk_filter = RENerChunksFilter() \
    .setInputCols([&quot;ner_chunks&quot;, &quot;dependencies&quot;])\
    .setMaxSyntacticDistance(10)\
    .setOutputCol(&quot;re_ner_chunks&quot;)

re_model = RelationExtractionDLModel().pretrained('redl_nihss_biobert', 'en', &quot;clinical/models&quot;) \
    .setPredictionThreshold(0.5)\
    .setInputCols([&quot;re_ner_chunks&quot;, &quot;sentences&quot;]) \
    .setOutputCol(&quot;relations&quot;)

pipeline = Pipeline(stages=[documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model])

text= &quot;There , her initial NIHSS score was 4 , as recorded by the ED physicians . This included 2 for weakness in her left leg and 2 for what they felt was subtle ataxia in her left arm and leg .&quot;

p_model = pipeline.fit(spark.createDataFrame([[text]]).toDF(&quot;text&quot;))

result = p_model.transform(spark.createDataFrame(pd.DataFrame({'text': [text]})))
```
```scala
val documenter = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentencer = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentences&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentences&quot;)
    .setOutputCol(&quot;tokens&quot;)

val pos_tagger = PerceptronModel().pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;))
    .setOutputCol(&quot;pos_tags&quot;)

val words_embedder = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_tagger = MedicalNerModel.pretrained(&quot;ner_nihss&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner_tags&quot;) 

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;))
    .setOutputCol(&quot;ner_chunks&quot;)

val dependency_parser = DependencyParserModel().pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;))
    .setOutputCol(&quot;dependencies&quot;)

// Set a filter on pairs of named entities which will be treated as relation candidates
val re_ner_chunk_filter = new RENerChunksFilter()
    .setInputCols(Array(&quot;ner_chunks&quot;, &quot;dependencies&quot;))
    .setMaxSyntacticDistance(10)
    .setOutputCol(&quot;re_ner_chunks&quot;)

val re_model = RelationExtractionDLModel().pretrained(&quot;redl_nihss_biobert&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setPredictionThreshold(0.5)
    .setInputCols(Array(&quot;re_ner_chunks&quot;, &quot;sentences&quot;))
    .setOutputCol(&quot;relations&quot;)

val pipeline = new Pipeline().setStages(Array(documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model))

val data = Seq(&quot;&quot;&quot;There , her initial NIHSS score was 4 , as recorded by the ED physicians . This included 2 for weakness in her left leg and 2 for what they felt was subtle ataxia in her left arm and leg .&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------+-----------+-------------+-----------+-----------+------------+-------------+-----------+--------------------+----------+
| relation|    entity1|entity1_begin|entity1_end|     chunk1|     entity2|entity2_begin|entity2_end|              chunk2|confidence|
+---------+-----------+-------------+-----------+-----------+------------+-------------+-----------+--------------------+----------+
|Has_Value|      NIHSS|           20|         30|NIHSS score| Measurement|           36|         36|                   4| 0.9998851|
|Has_Value|Measurement|           89|         89|          2|  6a_LeftLeg|          111|        118|            left leg| 0.9987311|
|        0|Measurement|           89|         89|          2| Measurement|          124|        124|                   2|0.97510725|
|        0|Measurement|           89|         89|          2|7_LimbAtaxia|          156|        185|ataxia in her lef...|  0.999889|
|        0| 6a_LeftLeg|          111|        118|   left leg| Measurement|          124|        124|                   2|0.99989617|
|        0| 6a_LeftLeg|          111|        118|   left leg|7_LimbAtaxia|          156|        185|ataxia in her lef...| 0.9999521|
|Has_Value|Measurement|          124|        124|          2|7_LimbAtaxia|          156|        185|ataxia in her lef...| 0.9896319|
+---------+-----------+-------------+-----------+-----------+------------+-------------+-----------+--------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_nihss_biobert|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

@article{wangnational, title={National Institutes of Health Stroke Scale (NIHSS) Annotations for the MIMIC-III Database}, author={Wang, Jiayang and Huang, Xiaoshuo and Yang, Lin and Li, Jiao} }

## Benchmarking

```bash
label              Recall Precision        F1   Support
0                   0.989     0.976     0.982       611
Has_Value           0.983     0.992     0.988       889
Avg.                0.986     0.984     0.985		     -
Weighted-Avg.       0.985     0.985     0.985		     -
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="clinical" /><category term="relation_extraction" /><category term="tensorflow" /><summary type="html">Description Relate scale items and their measurements according to NIHSS guidelines. Predicted Entities Has_Value, 0 Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documenter = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentencer = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentences&quot;) tokenizer = sparknlp.annotators.Tokenizer()\ .setInputCols([&quot;sentences&quot;])\ .setOutputCol(&quot;tokens&quot;) pos_tagger = PerceptronModel().pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;])\ .setOutputCol(&quot;pos_tags&quot;) words_embedder = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner_tagger = MedicalNerModel.pretrained(&quot;ner_nihss&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;)\ .setOutputCol(&quot;ner_tags&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;]) \ .setOutputCol(&quot;ner_chunks&quot;) dependency_parser = DependencyParserModel().pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;]) \ .setOutputCol(&quot;dependencies&quot;) # Set a filter on pairs of named entities which will be treated as relation candidates re_ner_chunk_filter = RENerChunksFilter() \ .setInputCols([&quot;ner_chunks&quot;, &quot;dependencies&quot;])\ .setMaxSyntacticDistance(10)\ .setOutputCol(&quot;re_ner_chunks&quot;) re_model = RelationExtractionDLModel().pretrained('redl_nihss_biobert', 'en', &quot;clinical/models&quot;) \ .setPredictionThreshold(0.5)\ .setInputCols([&quot;re_ner_chunks&quot;, &quot;sentences&quot;]) \ .setOutputCol(&quot;relations&quot;) pipeline = Pipeline(stages=[documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model]) text= &quot;There , her initial NIHSS score was 4 , as recorded by the ED physicians . This included 2 for weakness in her left leg and 2 for what they felt was subtle ataxia in her left arm and leg .&quot; p_model = pipeline.fit(spark.createDataFrame([[text]]).toDF(&quot;text&quot;)) result = p_model.transform(spark.createDataFrame(pd.DataFrame({'text': [text]}))) val documenter = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentencer = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentences&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentences&quot;) .setOutputCol(&quot;tokens&quot;) val pos_tagger = PerceptronModel().pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;)) .setOutputCol(&quot;pos_tags&quot;) val words_embedder = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_tagger = MedicalNerModel.pretrained(&quot;ner_nihss&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner_tags&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;)) .setOutputCol(&quot;ner_chunks&quot;) val dependency_parser = DependencyParserModel().pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;)) .setOutputCol(&quot;dependencies&quot;) // Set a filter on pairs of named entities which will be treated as relation candidates val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunks&quot;, &quot;dependencies&quot;)) .setMaxSyntacticDistance(10) .setOutputCol(&quot;re_ner_chunks&quot;) val re_model = RelationExtractionDLModel().pretrained(&quot;redl_nihss_biobert&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5) .setInputCols(Array(&quot;re_ner_chunks&quot;, &quot;sentences&quot;)) .setOutputCol(&quot;relations&quot;) val pipeline = new Pipeline().setStages(Array(documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;&quot;&quot;There , her initial NIHSS score was 4 , as recorded by the ED physicians . This included 2 for weakness in her left leg and 2 for what they felt was subtle ataxia in her left arm and leg .&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +---------+-----------+-------------+-----------+-----------+------------+-------------+-----------+--------------------+----------+ | relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +---------+-----------+-------------+-----------+-----------+------------+-------------+-----------+--------------------+----------+ |Has_Value| NIHSS| 20| 30|NIHSS score| Measurement| 36| 36| 4| 0.9998851| |Has_Value|Measurement| 89| 89| 2| 6a_LeftLeg| 111| 118| left leg| 0.9987311| | 0|Measurement| 89| 89| 2| Measurement| 124| 124| 2|0.97510725| | 0|Measurement| 89| 89| 2|7_LimbAtaxia| 156| 185|ataxia in her lef...| 0.999889| | 0| 6a_LeftLeg| 111| 118| left leg| Measurement| 124| 124| 2|0.99989617| | 0| 6a_LeftLeg| 111| 118| left leg|7_LimbAtaxia| 156| 185|ataxia in her lef...| 0.9999521| |Has_Value|Measurement| 124| 124| 2|7_LimbAtaxia| 156| 185|ataxia in her lef...| 0.9896319| +---------+-----------+-------------+-----------+-----------+------------+-------------+-----------+--------------------+----------+ Model Information Model Name: redl_nihss_biobert Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References @article{wangnational, title={National Institutes of Health Stroke Scale (NIHSS) Annotations for the MIMIC-III Database}, author={Wang, Jiayang and Huang, Xiaoshuo and Yang, Lin and Li, Jiao} } Benchmarking label Recall Precision F1 Support 0 0.989 0.976 0.982 611 Has_Value 0.983 0.992 0.988 889 Avg. 0.986 0.984 0.985 - Weighted-Avg. 0.985 0.985 0.985 -</summary></entry><entry><title type="html">Relation Extraction between different oncological entity types (ReDL)</title><link href="/2023/01/15/redl_oncology_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between different oncological entity types (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_biobert_wip_en.html">## Description

This relation extraction model identifies relations between dates and other clinical entities, between tumor mentions and their size, between anatomical entities and other clinical entities, and between tests and their results. In contrast to re_oncology_granular, all these relation types are labeled as is_related_to. The different types of relations can be identified considering the pairs of entities that are linked.

## Predicted Entities

`is_related_to`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_biobert_wip_en_4.2.4_3.0_1673763869198.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_biobert_wip_en_4.2.4_3.0_1673763869198.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
     
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;A mastectomy was performed two months ago, and a 3 cm mass was extracted.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
     .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
     .setOutputCol(&quot;re_ner_chunk&quot;)
     .setMaxSyntacticDistance(10)
     .setRelationPairs(Array(&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setPredictionThreshold(0.5f)
      .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
      .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;A mastectomy was performed two months ago, and a 3 cm mass was extracted.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+
|     relation|       entity1|entity1_begin|entity1_end|    chunk1|      entity2|entity2_begin|entity2_end|        chunk2|confidence|
+-------------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+
|is_related_to|Cancer_Surgery|            2|         11|mastectomy|Relative_Date|           27|         40|two months ago|0.91422147|
|is_related_to|    Tumor_Size|           49|         52|      3 cm|Tumor_Finding|           54|         57|          mass|0.90398973|
+-------------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
        label  recall  precision   f1  
            O    0.82       0.89 0.86   
is_related_to    0.90       0.84 0.87   
    macro-avg    0.86       0.87 0.86  
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="temporal" /><category term="test" /><category term="biomarker" /><category term="anatomy" /><category term="tensorflow" /><summary type="html">Description This relation extraction model identifies relations between dates and other clinical entities, between tumor mentions and their size, between anatomical entities and other clinical entities, and between tests and their results. In contrast to re_oncology_granular, all these relation types are labeled as is_related_to. The different types of relations can be identified considering the pairs of entities that are linked. Predicted Entities is_related_to Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;A mastectomy was performed two months ago, and a 3 cm mass was extracted.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5f) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;A mastectomy was performed two months ago, and a 3 cm mass was extracted.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+ | relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +-------------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+ |is_related_to|Cancer_Surgery| 2| 11|mastectomy|Relative_Date| 27| 40|two months ago|0.91422147| |is_related_to| Tumor_Size| 49| 52| 3 cm|Tumor_Finding| 54| 57| mass|0.90398973| +-------------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+ Model Information Model Name: redl_oncology_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 O 0.82 0.89 0.86 is_related_to 0.90 0.84 0.87 macro-avg 0.86 0.87 0.86</summary></entry><entry><title type="html">Relation Extraction between Biomarkers and Results (ReDL)</title><link href="/2023/01/15/redl_oncology_biomarker_result_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between Biomarkers and Results (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_biomarker_result_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_biomarker_result_biobert_wip_en.html">## Description

This relation extraction model links Biomarker and Oncogene extractions to their corresponding Biomarker_Result extractions.

## Predicted Entities

`is_finding_of`, `O`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_biomarker_result_biobert_wip_en_4.2.4_3.0_1673766618517.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_biomarker_result_biobert_wip_en_4.2.4_3.0_1673766618517.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

Use relation pairs to include only the combinations of entities that are relevant in your case.

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biomarker_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
        
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;Immunohistochemistry was negative for thyroid transcription factor-1 and napsin A. The test was positive for ER and PR, and negative for HER2.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
    .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
    .setOutputCol(&quot;re_ner_chunk&quot;)
    .setMaxSyntacticDistance(10)
    .setRelationPairs(Array(&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biomarker_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
    .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;Immunohistochemistry was negative for thyroid transcription factor-1 and napsin A. The test was positive for ER and PR, and negative for HER2.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------+----------------+-------------+-----------+--------+----------------+-------------+-----------+--------------------+----------+
|     relation|         entity1|entity1_begin|entity1_end|  chunk1|         entity2|entity2_begin|entity2_end|              chunk2|confidence|
+-------------+----------------+-------------+-----------+--------+----------------+-------------+-----------+--------------------+----------+
|is_finding_of|Biomarker_Result|           25|         32|negative|       Biomarker|           38|         67|thyroid transcrip...|0.99808085|
|is_finding_of|Biomarker_Result|           25|         32|negative|       Biomarker|           73|         78|              napsin|0.99637383|
|is_finding_of|Biomarker_Result|           96|        103|positive|       Biomarker|          109|        110|                  ER|0.99221414|
|is_finding_of|Biomarker_Result|           96|        103|positive|       Biomarker|          116|        117|                  PR| 0.9893672|
|            O|Biomarker_Result|           96|        103|positive|        Oncogene|          137|        140|                HER2| 0.9986272|
|            O|       Biomarker|          109|        110|      ER|Biomarker_Result|          124|        131|            negative| 0.9999089|
|            O|       Biomarker|          116|        117|      PR|Biomarker_Result|          124|        131|            negative| 0.9998932|
|is_finding_of|Biomarker_Result|          124|        131|negative|        Oncogene|          137|        140|                HER2|0.98810333|
+-------------+----------------+-------------+-----------+--------+----------------+-------------+-----------+--------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_biomarker_result_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
        label  recall  precision   f1  
            O    0.93       0.97 0.95   
is_finding_of    0.97       0.93 0.95    
    macro-avg    0.95       0.95 0.95
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="test" /><category term="biomarker" /><category term="tensorflow" /><summary type="html">Description This relation extraction model links Biomarker and Oncogene extractions to their corresponding Biomarker_Result extractions. Predicted Entities is_finding_of, O Live Demo Open in Colab Download Copy S3 URI How to use Use relation pairs to include only the combinations of entities that are relevant in your case. PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biomarker_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;Immunohistochemistry was negative for thyroid transcription factor-1 and napsin A. The test was positive for ER and PR, and negative for HER2.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_biomarker_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;Immunohistochemistry was negative for thyroid transcription factor-1 and napsin A. The test was positive for ER and PR, and negative for HER2.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------+----------------+-------------+-----------+--------+----------------+-------------+-----------+--------------------+----------+ | relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +-------------+----------------+-------------+-----------+--------+----------------+-------------+-----------+--------------------+----------+ |is_finding_of|Biomarker_Result| 25| 32|negative| Biomarker| 38| 67|thyroid transcrip...|0.99808085| |is_finding_of|Biomarker_Result| 25| 32|negative| Biomarker| 73| 78| napsin|0.99637383| |is_finding_of|Biomarker_Result| 96| 103|positive| Biomarker| 109| 110| ER|0.99221414| |is_finding_of|Biomarker_Result| 96| 103|positive| Biomarker| 116| 117| PR| 0.9893672| | O|Biomarker_Result| 96| 103|positive| Oncogene| 137| 140| HER2| 0.9986272| | O| Biomarker| 109| 110| ER|Biomarker_Result| 124| 131| negative| 0.9999089| | O| Biomarker| 116| 117| PR|Biomarker_Result| 124| 131| negative| 0.9998932| |is_finding_of|Biomarker_Result| 124| 131|negative| Oncogene| 137| 140| HER2|0.98810333| +-------------+----------------+-------------+-----------+--------+----------------+-------------+-----------+--------------------+----------+ Model Information Model Name: redl_oncology_biomarker_result_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 O 0.93 0.97 0.95 is_finding_of 0.97 0.93 0.95 macro-avg 0.95 0.95 0.95</summary></entry><entry><title type="html">Relation Extraction between different oncological entity types using granular classes (ReDL)</title><link href="/2023/01/15/redl_oncology_granular_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between different oncological entity types using granular classes (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_granular_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_granular_biobert_wip_en.html">## Description

Using this relation extraction model, four relation types can be identified: is_date_of (between date entities and other clinical entities), is_size_of (between Tumor_Finding and Tumor_Size), is_location_of (between anatomical entities and other entities) and is_finding_of (between test entities and their results).

## Predicted Entities

`is_date_of`, `is_finding_of`, `is_location_of`, `is_size_of`, `O`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_granular_biobert_wip_en_4.2.4_3.0_1673768709402.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_granular_biobert_wip_en_4.2.4_3.0_1673768709402.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

Use relation pairs to include only the combinations of entities that are relevant in your case.

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_granular_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
        
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;A mastectomy was performed two months ago, and a 3 cm mass was extracted.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
     .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
     .setOutputCol(&quot;re_ner_chunk&quot;)
     .setMaxSyntacticDistance(10)
     .setRelationPairs(Array(&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_granular_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setPredictionThreshold(0.5f)
      .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
      .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;A mastectomy was performed two months ago.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+
|  relation|       entity1|entity1_begin|entity1_end|    chunk1|      entity2|entity2_begin|entity2_end|        chunk2|confidence|
+----------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+
|is_date_of|Cancer_Surgery|            2|         11|mastectomy|Relative_Date|           27|         40|two months ago| 0.9652523|
|is_size_of|    Tumor_Size|           49|         52|      3 cm|Tumor_Finding|           54|         57|          mass|0.81723577|
+----------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_granular_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
         label  recall  precision   f1  
             O    0.83       0.91 0.87   
    is_date_of    0.82       0.80 0.81    
 is_finding_of    0.92       0.85 0.88   
is_location_of    0.95       0.85 0.90    
    is_size_of    0.91       0.80 0.85    
     macro-avg    0.89       0.84 0.86
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="temporal" /><category term="test" /><category term="biomarker" /><category term="anatomy" /><category term="tensorflow" /><summary type="html">Description Using this relation extraction model, four relation types can be identified: is_date_of (between date entities and other clinical entities), is_size_of (between Tumor_Finding and Tumor_Size), is_location_of (between anatomical entities and other entities) and is_finding_of (between test entities and their results). Predicted Entities is_date_of, is_finding_of, is_location_of, is_size_of, O Live Demo Open in Colab Download Copy S3 URI How to use Use relation pairs to include only the combinations of entities that are relevant in your case. PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_granular_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;A mastectomy was performed two months ago, and a 3 cm mass was extracted.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_granular_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5f) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;A mastectomy was performed two months ago.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+ | relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +----------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+ |is_date_of|Cancer_Surgery| 2| 11|mastectomy|Relative_Date| 27| 40|two months ago| 0.9652523| |is_size_of| Tumor_Size| 49| 52| 3 cm|Tumor_Finding| 54| 57| mass|0.81723577| +----------+--------------+-------------+-----------+----------+-------------+-------------+-----------+--------------+----------+ Model Information Model Name: redl_oncology_granular_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 O 0.83 0.91 0.87 is_date_of 0.82 0.80 0.81 is_finding_of 0.92 0.85 0.88 is_location_of 0.95 0.85 0.90 is_size_of 0.91 0.80 0.85 macro-avg 0.89 0.84 0.86</summary></entry><entry><title type="html">Relation Extraction between anatomical entities and other clinical entities (ReDL)</title><link href="/2023/01/15/redl_oncology_location_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between anatomical entities and other clinical entities (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_location_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_location_biobert_wip_en.html">## Description

This relation extraction model links extractions from anatomical entities (such as Site_Breast or Site_Lung) to other clinical entities (such as Tumor_Finding or Cancer_Surgery).

## Predicted Entities

`is_location_of`, `O`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_location_biobert_wip_en_4.2.4_3.0_1673770597615.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_location_biobert_wip_en_4.2.4_3.0_1673770597615.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

Use relation pairs to include only the combinations of entities that are relevant in your case.

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Tumor_Finding-Site_Breast&quot;, &quot;Site_Breast-Tumor_Finding&quot;, &quot;Tumor_Finding-Anatomical_Site&quot;, &quot;Anatomical_Site-Tumor_Finding&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_location_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
        
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;In April 2011, she first noticed a lump in her right breast.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
     .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
     .setOutputCol(&quot;re_ner_chunk&quot;)
     .setMaxSyntacticDistance(10)
     .setRelationPairs(Array(&quot;Tumor_Finding-Site_Breast&quot;, &quot;Site_Breast-Tumor_Finding&quot;,&quot;Tumor_Finding-Anatomical_Site&quot;, &quot;Anatomical_Site-Tumor_Finding&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_location_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setPredictionThreshold(0.5f)
      .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
      .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;&quot;&quot;In April 2011, she first noticed a lump in her right breast.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------+-------------+-------------+-----------+------+-----------+-------------+-----------+------+----------+
|      relation|      entity1|entity1_begin|entity1_end|chunk1|    entity2|entity2_begin|entity2_end|chunk2|confidence|
+--------------+-------------+-------------+-----------+------+-----------+-------------+-----------+------+----------+
|is_location_of|Tumor_Finding|           35|         38|  lump|Site_Breast|           53|         58|breast| 0.9628376|
+--------------+-------------+-------------+-----------+------+-----------+-------------+-----------+------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_location_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
         label  recall  precision   f1  
             O    0.90       0.94 0.92    
is_location_of    0.94       0.90 0.92    
     macro-avg    0.92       0.92 0.92   
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="anatomy" /><category term="tensorflow" /><summary type="html">Description This relation extraction model links extractions from anatomical entities (such as Site_Breast or Site_Lung) to other clinical entities (such as Tumor_Finding or Cancer_Surgery). Predicted Entities is_location_of, O Live Demo Open in Colab Download Copy S3 URI How to use Use relation pairs to include only the combinations of entities that are relevant in your case. PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Tumor_Finding-Site_Breast&quot;, &quot;Site_Breast-Tumor_Finding&quot;, &quot;Tumor_Finding-Anatomical_Site&quot;, &quot;Anatomical_Site-Tumor_Finding&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_location_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;In April 2011, she first noticed a lump in her right breast.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Tumor_Finding-Site_Breast&quot;, &quot;Site_Breast-Tumor_Finding&quot;,&quot;Tumor_Finding-Anatomical_Site&quot;, &quot;Anatomical_Site-Tumor_Finding&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_location_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5f) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;&quot;&quot;In April 2011, she first noticed a lump in her right breast.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------------+-------------+-------------+-----------+------+-----------+-------------+-----------+------+----------+ | relation| entity1|entity1_begin|entity1_end|chunk1| entity2|entity2_begin|entity2_end|chunk2|confidence| +--------------+-------------+-------------+-----------+------+-----------+-------------+-----------+------+----------+ |is_location_of|Tumor_Finding| 35| 38| lump|Site_Breast| 53| 58|breast| 0.9628376| +--------------+-------------+-------------+-----------+------+-----------+-------------+-----------+------+----------+ Model Information Model Name: redl_oncology_location_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 O 0.90 0.94 0.92 is_location_of 0.94 0.90 0.92 macro-avg 0.92 0.92 0.92</summary></entry><entry><title type="html">Relation Extraction between Tumors and Sizes (ReDL)</title><link href="/2023/01/15/redl_oncology_size_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between Tumors and Sizes (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_size_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_size_biobert_wip_en.html">## Description

This relation extraction model links Tumor_Size extractions to their corresponding Tumor_Finding extractions.

## Predicted Entities

`is_size_of`, `O`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_size_biobert_wip_en_4.2.4_3.0_1673772352847.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_size_biobert_wip_en_4.2.4_3.0_1673772352847.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

Tumor_Finding and Tumor_Size should be included in the relation pairs.

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_size_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
        
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;The patient presented a 2 cm mass in her left breast, and the tumor in her other breast was 3 cm long.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
     .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
     .setOutputCol(&quot;re_ner_chunk&quot;)
     .setMaxSyntacticDistance(10)
     .setRelationPairs(Array(&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_size_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setPredictionThreshold(0.5f)
      .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
      .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;The patient presented a 2 cm mass in her left breast, and the tumor in her other breast was 3 cm long.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------+-------------+-------------+-----------+------+-------------+-------------+-----------+------+----------+
|  relation|      entity1|entity1_begin|entity1_end|chunk1|      entity2|entity2_begin|entity2_end|chunk2|confidence|
+----------+-------------+-------------+-----------+------+-------------+-------------+-----------+------+----------+
|is_size_of|   Tumor_Size|           24|         27|  2 cm|Tumor_Finding|           29|         32|  mass| 0.9604708|
|is_size_of|Tumor_Finding|           62|         66| tumor|   Tumor_Size|           92|         95|  3 cm|0.99731797|
+----------+-------------+-------------+-----------+------+-------------+-------------+-----------+------+----------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_size_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
     label  recall  precision   f1    support
         O    0.87       0.84 0.86      143.0
is_size_of    0.85       0.88 0.86      157.0
 macro-avg    0.86       0.86 0.86        -
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="tensorflow" /><summary type="html">Description This relation extraction model links Tumor_Size extractions to their corresponding Tumor_Finding extractions. Predicted Entities is_size_of, O Live Demo Open in Colab Download Copy S3 URI How to use Tumor_Finding and Tumor_Size should be included in the relation pairs. PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_size_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;The patient presented a 2 cm mass in her left breast, and the tumor in her other breast was 3 cm long.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Tumor_Finding-Tumor_Size&quot;, &quot;Tumor_Size-Tumor_Finding&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_size_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5f) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;The patient presented a 2 cm mass in her left breast, and the tumor in her other breast was 3 cm long.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------+-------------+-------------+-----------+------+-------------+-------------+-----------+------+----------+ | relation| entity1|entity1_begin|entity1_end|chunk1| entity2|entity2_begin|entity2_end|chunk2|confidence| +----------+-------------+-------------+-----------+------+-------------+-------------+-----------+------+----------+ |is_size_of| Tumor_Size| 24| 27| 2 cm|Tumor_Finding| 29| 32| mass| 0.9604708| |is_size_of|Tumor_Finding| 62| 66| tumor| Tumor_Size| 92| 95| 3 cm|0.99731797| +----------+-------------+-------------+-----------+------+-------------+-------------+-----------+------+----------+ Model Information Model Name: redl_oncology_size_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 support O 0.87 0.84 0.86 143.0 is_size_of 0.85 0.88 0.86 157.0 macro-avg 0.86 0.86 0.86 -</summary></entry><entry><title type="html">Relation Extraction between dates and other entities (ReDL)</title><link href="/2023/01/15/redl_oncology_temporal_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between dates and other entities (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_temporal_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_temporal_biobert_wip_en.html">## Description

This relation extraction model links Date and Relative_Date extractions to clinical entities such as Test or Cancer_Dx.

## Predicted Entities

`is_date_of`, `O`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_temporal_biobert_wip_en_4.2.4_3.0_1673774363542.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_temporal_biobert_wip_en_4.2.4_3.0_1673774363542.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

Each relevant relation pair in the pipeline should include one date entity (Date or Relative_Date) and a clinical entity (such as Pathology_Test, Cancer_Dx or Chemotherapy).

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Cancer_Dx-Date&quot;, &quot;Date-Cancer_Dx&quot;, &quot;Relative_Date-Cancer_Dx&quot;, &quot;Cancer_Dx-Relative_Date&quot;, &quot;Cancer_Surgery-Date&quot;, &quot;Date-Cancer_Surgery&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_temporal_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
        
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;Her breast cancer was diagnosed last year.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
     .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
     .setOutputCol(&quot;re_ner_chunk&quot;)
     .setMaxSyntacticDistance(10)
     .setRelationPairs(Array(&quot;Cancer_Dx-Date&quot;, &quot;Date-Cancer_Dx&quot;, &quot;Relative_Date-Cancer_Dx&quot;, &quot;Cancer_Dx-Relative_Date&quot;, &quot;Cancer_Surgery-Date&quot;, &quot;Date-Cancer_Surgery&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_temporal_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setPredictionThreshold(0.5f)
      .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
      .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;Her breast cancer was diagnosed last year.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+----------+---------+-------------+-----------+-------------+-------------+-------------+-----------+---------+----------+
|  relation|  entity1|entity1_begin|entity1_end|       chunk1|      entity2|entity2_begin|entity2_end|   chunk2|confidence|
+----------+---------+-------------+-----------+-------------+-------------+-------------+-----------+---------+----------+
|is_date_of|Cancer_Dx|            4|         16|breast cancer|Relative_Date|           32|         40|last year| 0.9999256|
+----------+---------+-------------+-----------+-------------+-------------+-------------+-----------+---------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_temporal_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
     label  recall  precision   f1  support
         O    0.77       0.81 0.79    302.0
is_date_of    0.82       0.78 0.80    298.0
 macro-avg    0.79       0.79 0.79      -
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="temporal" /><category term="tensorflow" /><summary type="html">Description This relation extraction model links Date and Relative_Date extractions to clinical entities such as Test or Cancer_Dx. Predicted Entities is_date_of, O Live Demo Open in Colab Download Copy S3 URI How to use Each relevant relation pair in the pipeline should include one date entity (Date or Relative_Date) and a clinical entity (such as Pathology_Test, Cancer_Dx or Chemotherapy). PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Cancer_Dx-Date&quot;, &quot;Date-Cancer_Dx&quot;, &quot;Relative_Date-Cancer_Dx&quot;, &quot;Cancer_Dx-Relative_Date&quot;, &quot;Cancer_Surgery-Date&quot;, &quot;Date-Cancer_Surgery&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_temporal_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;Her breast cancer was diagnosed last year.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Cancer_Dx-Date&quot;, &quot;Date-Cancer_Dx&quot;, &quot;Relative_Date-Cancer_Dx&quot;, &quot;Cancer_Dx-Relative_Date&quot;, &quot;Cancer_Surgery-Date&quot;, &quot;Date-Cancer_Surgery&quot;, &quot;Cancer_Surgery-Relative_Date&quot;, &quot;Relative_Date-Cancer_Surgery&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_temporal_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5f) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;Her breast cancer was diagnosed last year.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------+---------+-------------+-----------+-------------+-------------+-------------+-----------+---------+----------+ | relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +----------+---------+-------------+-----------+-------------+-------------+-------------+-----------+---------+----------+ |is_date_of|Cancer_Dx| 4| 16|breast cancer|Relative_Date| 32| 40|last year| 0.9999256| +----------+---------+-------------+-----------+-------------+-------------+-------------+-----------+---------+----------+ Model Information Model Name: redl_oncology_temporal_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 support O 0.77 0.81 0.79 302.0 is_date_of 0.82 0.78 0.80 298.0 macro-avg 0.79 0.79 0.79 -</summary></entry><entry><title type="html">Relation Extraction between Test and Results (ReDL)</title><link href="/2023/01/15/redl_oncology_test_result_biobert_wip_en.html" rel="alternate" type="text/html" title="Relation Extraction between Test and Results (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_oncology_test_result_biobert_wip_en</id><content type="html" xml:base="/2023/01/15/redl_oncology_test_result_biobert_wip_en.html">## Description

This relation extraction model links test extractions to their corresponding results.

## Predicted Entities

`is_finding_of`, `O`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_ONCOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/27.Oncology_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_oncology_test_result_biobert_wip_en_4.2.4_3.0_1673776756086.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_oncology_test_result_biobert_wip_en_4.2.4_3.0_1673776756086.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

Each relevant relation pair in the pipeline should include one test entity (such as Biomarker, Imaging_Test, Pathology_Test or Oncogene) and one result entity (such as Biomarker_Result, Pathology_Result or Tumor_Finding).

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)
          
pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;pos_tags&quot;)

dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter()\
    .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\
    .setOutputCol(&quot;re_ner_chunk&quot;)\
    .setMaxSyntacticDistance(10)\
    .setRelationPairs([&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;, &quot;Pathology_Test-Pathology_Result&quot;, &quot;Pathology_Result-Pathology_Test&quot;])

re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_test_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\
    .setOutputCol(&quot;relation_extraction&quot;)
        
pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model])

data = spark.createDataFrame([[&quot;Pathology showed tumor cells, which were positive for estrogen and progesterone receptors.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;pos_tags&quot;)
    
val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;))
    .setOutputCol(&quot;dependencies&quot;)

val re_ner_chunk_filter = new RENerChunksFilter()
     .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;))
     .setOutputCol(&quot;re_ner_chunk&quot;)
     .setMaxSyntacticDistance(10)
     .setRelationPairs(Array(&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;, &quot;Pathology_Test-Pathology_Result&quot;, &quot;Pathology_Result-Pathology_Test&quot;))

val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_test_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setPredictionThreshold(0.5f)
      .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;))
      .setOutputCol(&quot;relation_extraction&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            pos_tagger,
                            dependency_parser,
                            re_ner_chunk_filter,
                            re_model))

val data = Seq(&quot;Pathology showed tumor cells, which were positive for estrogen and progesterone receptors.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------+----------------+-------------+-----------+---------+----------------+-------------+-----------+--------------------+----------+
|     relation|         entity1|entity1_begin|entity1_end|   chunk1|         entity2|entity2_begin|entity2_end|              chunk2|confidence|
+-------------+----------------+-------------+-----------+---------+----------------+-------------+-----------+--------------------+----------+
|is_finding_of|  Pathology_Test|            0|          8|Pathology|Pathology_Result|           17|         27|         tumor cells| 0.8494344|
|is_finding_of|Biomarker_Result|           41|         48| positive|       Biomarker|           54|         61|            estrogen|0.99451536|
|is_finding_of|Biomarker_Result|           41|         48| positive|       Biomarker|           67|         88|progesterone rece...|0.99218905|
+-------------+----------------+-------------+-----------+---------+----------------+-------------+-----------+--------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_oncology_test_result_biobert_wip|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
        label  recall  precision  f1  
            O    0.87       0.92 0.9   
is_finding_of    0.93       0.88 0.9   
    macro-avg    0.90       0.90 0.9 
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="en" /><category term="relation_extraction" /><category term="test" /><category term="tensorflow" /><summary type="html">Description This relation extraction model links test extractions to their corresponding results. Predicted Entities is_finding_of, O Live Demo Open in Colab Download Copy S3 URI How to use Each relevant relation pair in the pipeline should include one test entity (such as Biomarker, Imaging_Test, Pathology_Test or Oncogene) and one result entity (such as Biomarker_Result, Pathology_Result or Tumor_Finding). PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;pos_tags&quot;) dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter()\ .setInputCols([&quot;ner_chunk&quot;, &quot;dependencies&quot;])\ .setOutputCol(&quot;re_ner_chunk&quot;)\ .setMaxSyntacticDistance(10)\ .setRelationPairs([&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;, &quot;Pathology_Test-Pathology_Result&quot;, &quot;Pathology_Result-Pathology_Test&quot;]) re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_test_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;re_ner_chunk&quot;, &quot;sentence&quot;])\ .setOutputCol(&quot;relation_extraction&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model]) data = spark.createDataFrame([[&quot;Pathology showed tumor cells, which were positive for estrogen and progesterone receptors.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pos_tagger = PerceptronModel.pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;pos_tags&quot;) val dependency_parser = DependencyParserModel.pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;pos_tags&quot;, &quot;token&quot;)) .setOutputCol(&quot;dependencies&quot;) val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunk&quot;, &quot;dependencies&quot;)) .setOutputCol(&quot;re_ner_chunk&quot;) .setMaxSyntacticDistance(10) .setRelationPairs(Array(&quot;Biomarker-Biomarker_Result&quot;, &quot;Biomarker_Result-Biomarker&quot;, &quot;Oncogene-Biomarker_Result&quot;, &quot;Biomarker_Result-Oncogene&quot;, &quot;Pathology_Test-Pathology_Result&quot;, &quot;Pathology_Result-Pathology_Test&quot;)) val re_model = RelationExtractionDLModel.pretrained(&quot;redl_oncology_test_result_biobert_wip&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5f) .setInputCols(Array(&quot;re_ner_chunk&quot;, &quot;sentence&quot;)) .setOutputCol(&quot;relation_extraction&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, pos_tagger, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;Pathology showed tumor cells, which were positive for estrogen and progesterone receptors.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------+----------------+-------------+-----------+---------+----------------+-------------+-----------+--------------------+----------+ | relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +-------------+----------------+-------------+-----------+---------+----------------+-------------+-----------+--------------------+----------+ |is_finding_of| Pathology_Test| 0| 8|Pathology|Pathology_Result| 17| 27| tumor cells| 0.8494344| |is_finding_of|Biomarker_Result| 41| 48| positive| Biomarker| 54| 61| estrogen|0.99451536| |is_finding_of|Biomarker_Result| 41| 48| positive| Biomarker| 67| 88|progesterone rece...|0.99218905| +-------------+----------------+-------------+-----------+---------+----------------+-------------+-----------+--------------------+----------+ Model Information Model Name: redl_oncology_test_result_biobert_wip Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References In-house annotated oncology case reports. Benchmarking label recall precision f1 O 0.87 0.92 0.9 is_finding_of 0.93 0.88 0.9 macro-avg 0.90 0.90 0.9</summary></entry><entry><title type="html">Extract temporal relations among clinical events (ReDL)</title><link href="/2023/01/15/redl_temporal_events_biobert_en.html" rel="alternate" type="text/html" title="Extract temporal relations among clinical events (ReDL)" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>/2023/01/15/redl_temporal_events_biobert_en</id><content type="html" xml:base="/2023/01/15/redl_temporal_events_biobert_en.html">## Description

Extract relations between clinical events in terms of time. If an event occurred before, after, or overlaps another event.

## Predicted Entities

`AFTER`, `BEFORE`, `OVERLAP`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/RE_CLINICAL_EVENTS/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/10.Clinical_Relation_Extraction.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/redl_temporal_events_biobert_en_4.2.4_3.0_1673778147598.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/redl_temporal_events_biobert_en_4.2.4_3.0_1673778147598.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
documenter = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentencer = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentences&quot;)

tokenizer = sparknlp.annotators.Tokenizer()\
    .setInputCols([&quot;sentences&quot;])\
    .setOutputCol(&quot;tokens&quot;)

pos_tagger = PerceptronModel()\
    .pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;])\
    .setOutputCol(&quot;pos_tags&quot;)

words_embedder = WordEmbeddingsModel() \
    .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)

ner_tagger = MedicalNerModel.pretrained(&quot;ner_events_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;)\
    .setOutputCol(&quot;ner_tags&quot;) 

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;]) \
    .setOutputCol(&quot;ner_chunks&quot;)

dependency_parser = DependencyParserModel() \
    .pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \
    .setInputCols([&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;]) \
    .setOutputCol(&quot;dependencies&quot;)

re_ner_chunk_filter = RENerChunksFilter() \
    .setInputCols([&quot;ner_chunks&quot;, &quot;dependencies&quot;])\
    .setMaxSyntacticDistance(10)\
    .setOutputCol(&quot;re_ner_chunks&quot;)

re_model = RelationExtractionDLModel()\
    .pretrained(&quot;redl_temporal_events_biobert&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setPredictionThreshold(0.5)\
    .setInputCols([&quot;re_ner_chunks&quot;, &quot;sentences&quot;]) \
    .setOutputCol(&quot;relations&quot;)

pipeline = Pipeline(stages=[documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model])

text = &quot;She is diagnosed with cancer in 1991. Then she was admitted to Mayo Clinic in May 2000 and discharged in October 2001&quot;

data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

p_model = pipeline.fit(data)

result = p_model.transform(data)
```
```scala
val documenter = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentencer = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentences&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentences&quot;)
    .setOutputCol(&quot;tokens&quot;)

val pos_tagger = PerceptronModel()
    .pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;))
    .setOutputCol(&quot;pos_tags&quot;)

val words_embedder = WordEmbeddingsModel()
    .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_tagger = MedicalNerModel.pretrained(&quot;ner_events_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner_tags&quot;) 

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;))
    .setOutputCol(&quot;ner_chunks&quot;)

val dependency_parser = DependencyParserModel()
    .pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;)
    .setInputCols(Array(&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;))
    .setOutputCol(&quot;dependencies&quot;)

// Set a filter on pairs of named entities which will be treated as relation candidates
val re_ner_chunk_filter = new RENerChunksFilter()
    .setInputCols(Array(&quot;ner_chunks&quot;, &quot;dependencies&quot;))
    .setMaxSyntacticDistance(10)
    .setOutputCol(&quot;re_ner_chunks&quot;)

// The dataset this model is trained to is sentence-wise. 
// This model can also be trained on document-level relations - in which case, while predicting, use &quot;document&quot; instead of &quot;sentence&quot; as input.
val re_model = RelationExtractionDLModel()
    .pretrained(&quot;redl_temporal_events_biobert&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setPredictionThreshold(0.5)
    .setInputCols(Array(&quot;re_ner_chunks&quot;, &quot;sentences&quot;))
    .setOutputCol(&quot;relations&quot;)

val pipeline = new Pipeline().setStages(Array(documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model))

val data = Seq(&quot;&quot;&quot;She is diagnosed with cancer in 1991. Then she was admitted to Mayo Clinic in May 2000 and discharged in October 2001&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------+-------------+-------------+-----------+-----------+-------------+-------------+-----------+------------+----------+
|relation|      entity1|entity1_begin|entity1_end|     chunk1|      entity2|entity2_begin|entity2_end|      chunk2|confidence|
+--------+-------------+-------------+-----------+-----------+-------------+-------------+-----------+------------+----------+
|  BEFORE|   OCCURRENCE|            7|         15|  diagnosed|      PROBLEM|           22|         27|      cancer|0.78168863|
| OVERLAP|      PROBLEM|           22|         27|     cancer|         DATE|           32|         35|        1991| 0.8492274|
|   AFTER|   OCCURRENCE|           51|         58|   admitted|CLINICAL_DEPT|           63|         73| Mayo Clinic|0.85629463|
|  BEFORE|   OCCURRENCE|           51|         58|   admitted|   OCCURRENCE|           91|        100|  discharged| 0.6843513|
| OVERLAP|CLINICAL_DEPT|           63|         73|Mayo Clinic|         DATE|           78|         85|    May 2000| 0.7844673|
|  BEFORE|CLINICAL_DEPT|           63|         73|Mayo Clinic|   OCCURRENCE|           91|        100|  discharged|0.60411876|
| OVERLAP|CLINICAL_DEPT|           63|         73|Mayo Clinic|         DATE|          105|        116|October 2001|  0.540761|
|  BEFORE|         DATE|           78|         85|   May 2000|   OCCURRENCE|           91|        100|  discharged| 0.6042761|
| OVERLAP|         DATE|           78|         85|   May 2000|         DATE|          105|        116|October 2001|0.64867175|
|  BEFORE|   OCCURRENCE|           91|        100| discharged|         DATE|          105|        116|October 2001| 0.5302478|
+--------+-------------+-------------+-----------+-----------+-------------+-------------+-----------+------------+----------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|redl_temporal_events_biobert|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|401.7 MB|

## References

Trained on temporal clinical events benchmark dataset.

## Benchmarking

```bash
label              Recall Precision        F1   Support
AFTER               0.332     0.655     0.440      2123
BEFORE              0.868     0.908     0.887     13817
OVERLAP             0.887     0.733     0.802      7860
Avg.                0.695     0.765     0.710		     -
```</content><author><name>John Snow Labs</name></author><category term="relation_extraction" /><category term="en" /><category term="clinical" /><category term="licensed" /><category term="tensorflow" /><summary type="html">Description Extract relations between clinical events in terms of time. If an event occurred before, after, or overlaps another event. Predicted Entities AFTER, BEFORE, OVERLAP Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documenter = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentencer = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentences&quot;) tokenizer = sparknlp.annotators.Tokenizer()\ .setInputCols([&quot;sentences&quot;])\ .setOutputCol(&quot;tokens&quot;) pos_tagger = PerceptronModel()\ .pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;])\ .setOutputCol(&quot;pos_tags&quot;) words_embedder = WordEmbeddingsModel() \ .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner_tagger = MedicalNerModel.pretrained(&quot;ner_events_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;)\ .setOutputCol(&quot;ner_tags&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;]) \ .setOutputCol(&quot;ner_chunks&quot;) dependency_parser = DependencyParserModel() \ .pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) \ .setInputCols([&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;]) \ .setOutputCol(&quot;dependencies&quot;) re_ner_chunk_filter = RENerChunksFilter() \ .setInputCols([&quot;ner_chunks&quot;, &quot;dependencies&quot;])\ .setMaxSyntacticDistance(10)\ .setOutputCol(&quot;re_ner_chunks&quot;) re_model = RelationExtractionDLModel()\ .pretrained(&quot;redl_temporal_events_biobert&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setPredictionThreshold(0.5)\ .setInputCols([&quot;re_ner_chunks&quot;, &quot;sentences&quot;]) \ .setOutputCol(&quot;relations&quot;) pipeline = Pipeline(stages=[documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model]) text = &quot;She is diagnosed with cancer in 1991. Then she was admitted to Mayo Clinic in May 2000 and discharged in October 2001&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) p_model = pipeline.fit(data) result = p_model.transform(data) val documenter = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentencer = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentences&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentences&quot;) .setOutputCol(&quot;tokens&quot;) val pos_tagger = PerceptronModel() .pretrained(&quot;pos_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;)) .setOutputCol(&quot;pos_tags&quot;) val words_embedder = WordEmbeddingsModel() .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_tagger = MedicalNerModel.pretrained(&quot;ner_events_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner_tags&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentences&quot;, &quot;tokens&quot;, &quot;ner_tags&quot;)) .setOutputCol(&quot;ner_chunks&quot;) val dependency_parser = DependencyParserModel() .pretrained(&quot;dependency_conllu&quot;, &quot;en&quot;) .setInputCols(Array(&quot;sentences&quot;, &quot;pos_tags&quot;, &quot;tokens&quot;)) .setOutputCol(&quot;dependencies&quot;) // Set a filter on pairs of named entities which will be treated as relation candidates val re_ner_chunk_filter = new RENerChunksFilter() .setInputCols(Array(&quot;ner_chunks&quot;, &quot;dependencies&quot;)) .setMaxSyntacticDistance(10) .setOutputCol(&quot;re_ner_chunks&quot;) // The dataset this model is trained to is sentence-wise. // This model can also be trained on document-level relations - in which case, while predicting, use &quot;document&quot; instead of &quot;sentence&quot; as input. val re_model = RelationExtractionDLModel() .pretrained(&quot;redl_temporal_events_biobert&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setPredictionThreshold(0.5) .setInputCols(Array(&quot;re_ner_chunks&quot;, &quot;sentences&quot;)) .setOutputCol(&quot;relations&quot;) val pipeline = new Pipeline().setStages(Array(documenter, sentencer, tokenizer, pos_tagger, words_embedder, ner_tagger, ner_converter, dependency_parser, re_ner_chunk_filter, re_model)) val data = Seq(&quot;&quot;&quot;She is diagnosed with cancer in 1991. Then she was admitted to Mayo Clinic in May 2000 and discharged in October 2001&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------+-------------+-------------+-----------+-----------+-------------+-------------+-----------+------------+----------+ |relation| entity1|entity1_begin|entity1_end| chunk1| entity2|entity2_begin|entity2_end| chunk2|confidence| +--------+-------------+-------------+-----------+-----------+-------------+-------------+-----------+------------+----------+ | BEFORE| OCCURRENCE| 7| 15| diagnosed| PROBLEM| 22| 27| cancer|0.78168863| | OVERLAP| PROBLEM| 22| 27| cancer| DATE| 32| 35| 1991| 0.8492274| | AFTER| OCCURRENCE| 51| 58| admitted|CLINICAL_DEPT| 63| 73| Mayo Clinic|0.85629463| | BEFORE| OCCURRENCE| 51| 58| admitted| OCCURRENCE| 91| 100| discharged| 0.6843513| | OVERLAP|CLINICAL_DEPT| 63| 73|Mayo Clinic| DATE| 78| 85| May 2000| 0.7844673| | BEFORE|CLINICAL_DEPT| 63| 73|Mayo Clinic| OCCURRENCE| 91| 100| discharged|0.60411876| | OVERLAP|CLINICAL_DEPT| 63| 73|Mayo Clinic| DATE| 105| 116|October 2001| 0.540761| | BEFORE| DATE| 78| 85| May 2000| OCCURRENCE| 91| 100| discharged| 0.6042761| | OVERLAP| DATE| 78| 85| May 2000| DATE| 105| 116|October 2001|0.64867175| | BEFORE| OCCURRENCE| 91| 100| discharged| DATE| 105| 116|October 2001| 0.5302478| +--------+-------------+-------------+-----------+-----------+-------------+-------------+-----------+------------+----------+ Model Information Model Name: redl_temporal_events_biobert Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Language: en Size: 401.7 MB References Trained on temporal clinical events benchmark dataset. Benchmarking label Recall Precision F1 Support AFTER 0.332 0.655 0.440 2123 BEFORE 0.868 0.908 0.887 13817 OVERLAP 0.887 0.733 0.802 7860 Avg. 0.695 0.765 0.710 -</summary></entry><entry><title type="html">SDOH Alcohol Usege For Binary Classification</title><link href="/2023/01/14/genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli_en.html" rel="alternate" type="text/html" title="SDOH Alcohol Usege For Binary Classification" /><published>2023-01-14T00:00:00+00:00</published><updated>2023-01-14T00:00:00+00:00</updated><id>/2023/01/14/genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli_en</id><content type="html" xml:base="/2023/01/14/genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli_en.html">## Description

This Generic Classifier model is intended for detecting alcohol use in clinical notes and trained by using GenericClassifierApproach annotator. `Present:` if the patient was a current consumer of alcohol or the patient was a consumer in the past and had quit. `Never:` if the patient had never consumed alcohol. `None: ` if there was no related text.

## Predicted Entities

`Present`, `Never`, `None`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli_en_4.2.4_3.0_1673699002618.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli_en_4.2.4_3.0_1673699002618.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)
        
sentence_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, 'en','clinical/models')\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence_embeddings&quot;)

features_asm = FeaturesAssembler()\
    .setInputCols([&quot;sentence_embeddings&quot;])\
    .setOutputCol(&quot;features&quot;)

generic_classifier = GenericClassifierModel.pretrained(&quot;genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli&quot;, 'en', 'clinical/models')\
    .setInputCols([&quot;features&quot;])\
    .setOutputCol(&quot;class&quot;)

pipeline = Pipeline(stages=[
    document_assembler,
    sentence_embeddings,
    features_asm,
    generic_classifier    
])

text_list = [&quot;Retired schoolteacher, now substitutes. Lives with wife in location 1439. Has a 27 yo son and a 25 yo daughter. He uses alcohol and cigarettes&quot;,
             &quot;Employee in neuro departmentin at the Center Hospital 18. Widower since 2001. Current smoker since 20 years. No EtOH or illicits.&quot;,
             &quot;Patient smoked 4 ppd x 37 years, quitting 22 years ago. He is widowed, lives alone, has three children.&quot;]
         
df = spark.createDataFrame(text_list, StringType()).toDF(&quot;text&quot;)

result = pipeline.fit(df).transform(df)

result.select(&quot;text&quot;, &quot;class.result&quot;).show(truncate=100)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
        
val sentence_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence_embeddings&quot;)

val features_asm = new FeaturesAssembler()
    .setInputCols(&quot;sentence_embeddings&quot;)
    .setOutputCol(&quot;features&quot;)

val generic_classifier = GenericClassifierModel.pretrained(&quot;genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;features&quot;)
    .setOutputCol(&quot;class&quot;)

val pipeline = new PipelineModel().setStages(Array(
    document_assembler,
    sentence_embeddings,
    features_asm,
    generic_classifier))

val data = Seq(&quot;Retired schoolteacher, now substitutes. Lives with wife in location 1439. Has a 27 yo son and a 25 yo daughter. He uses alcohol and cigarettes.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------------------------------------------------------------------------------------+---------+
|                                                                                                text|   result|
+----------------------------------------------------------------------------------------------------+---------+
|Retired schoolteacher, now substitutes. Lives with wife in location 1439. Has a 27 yo son and a 2...|[Present]|
|Employee in neuro departmentin at the Center Hospital 18. Widower since 2001. Current smoker sinc...|  [Never]|
|Patient smoked 4 ppd x 37 years, quitting 22 years ago. He is widowed, lives alone, has three chi...|   [None]|
+----------------------------------------------------------------------------------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli|
|Compatibility:|Healthcare NLP 4.2.4+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[features]|
|Output Labels:|[prediction]|
|Language:|en|
|Size:|3.4 MB|

## Benchmarking

```bash
       label  precision    recall  f1-score   support
       Never       0.85      0.86      0.85       523
        None       0.81      0.82      0.81       341
     Present       0.88      0.86      0.87       516
    accuracy        -         -        0.85      1380
   macro-avg       0.85      0.85      0.85      1380
weighted-avg       0.85      0.85      0.85      1380
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="generic_classifier" /><category term="sdoh" /><category term="alcohol" /><category term="clinical" /><summary type="html">Description This Generic Classifier model is intended for detecting alcohol use in clinical notes and trained by using GenericClassifierApproach annotator. Present: if the patient was a current consumer of alcohol or the patient was a consumer in the past and had quit. Never: if the patient had never consumed alcohol. None: if there was no related text. Predicted Entities Present, Never, None Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, 'en','clinical/models')\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence_embeddings&quot;) features_asm = FeaturesAssembler()\ .setInputCols([&quot;sentence_embeddings&quot;])\ .setOutputCol(&quot;features&quot;) generic_classifier = GenericClassifierModel.pretrained(&quot;genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli&quot;, 'en', 'clinical/models')\ .setInputCols([&quot;features&quot;])\ .setOutputCol(&quot;class&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_embeddings, features_asm, generic_classifier ]) text_list = [&quot;Retired schoolteacher, now substitutes. Lives with wife in location 1439. Has a 27 yo son and a 25 yo daughter. He uses alcohol and cigarettes&quot;, &quot;Employee in neuro departmentin at the Center Hospital 18. Widower since 2001. Current smoker since 20 years. No EtOH or illicits.&quot;, &quot;Patient smoked 4 ppd x 37 years, quitting 22 years ago. He is widowed, lives alone, has three children.&quot;] df = spark.createDataFrame(text_list, StringType()).toDF(&quot;text&quot;) result = pipeline.fit(df).transform(df) result.select(&quot;text&quot;, &quot;class.result&quot;).show(truncate=100) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence_embeddings&quot;) val features_asm = new FeaturesAssembler() .setInputCols(&quot;sentence_embeddings&quot;) .setOutputCol(&quot;features&quot;) val generic_classifier = GenericClassifierModel.pretrained(&quot;genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;features&quot;) .setOutputCol(&quot;class&quot;) val pipeline = new PipelineModel().setStages(Array( document_assembler, sentence_embeddings, features_asm, generic_classifier)) val data = Seq(&quot;Retired schoolteacher, now substitutes. Lives with wife in location 1439. Has a 27 yo son and a 25 yo daughter. He uses alcohol and cigarettes.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------------------------------------------------------------------------------------------+---------+ | text| result| +----------------------------------------------------------------------------------------------------+---------+ |Retired schoolteacher, now substitutes. Lives with wife in location 1439. Has a 27 yo son and a 2...|[Present]| |Employee in neuro departmentin at the Center Hospital 18. Widower since 2001. Current smoker sinc...| [Never]| |Patient smoked 4 ppd x 37 years, quitting 22 years ago. He is widowed, lives alone, has three chi...| [None]| +----------------------------------------------------------------------------------------------------+---------+ Model Information Model Name: genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli Compatibility: Healthcare NLP 4.2.4+ License: Licensed Edition: Official Input Labels: [features] Output Labels: [prediction] Language: en Size: 3.4 MB Benchmarking label precision recall f1-score support Never 0.85 0.86 0.85 523 None 0.81 0.82 0.81 341 Present 0.88 0.86 0.87 516 accuracy - - 0.85 1380 macro-avg 0.85 0.85 0.85 1380 weighted-avg 0.85 0.85 0.85 1380</summary></entry></feed>