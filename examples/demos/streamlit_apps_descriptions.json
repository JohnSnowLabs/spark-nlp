[
  {
    "app": "SPELL_CHECKER_EN",
    "model_name": "spellcheck_dl",
    "title": "Spell check your text documents",
    "build": "2.5.0",
    "description": "Spark NLP contextual spellchecker allows the quick identification of typos or spelling issues within any text document."
  },
  {
    "app": "NER",
    "model_name": "ner_healthcare",
    "title": "Detect symptoms, treatments and other NERs",
    "build": "5.0.2",
    "description": "Automatically identify entities such as symptoms, diagnoses, procedures, body parts or medication clinical text using the pretrained Spark NLP clinical model ner_healthcare."
  },
  {
    "app": "NER",
    "model_name": "ner_radiology",
    "title": "Detect Radiological Terminology ",
    "build": "5.0.2",
    "description": "This model detects terminology related to radiology reports, as Symptom, Test name, Body Parts, and ten other classes."
  },
  {
    "app": "NER",
    "model_name": "ner_clinical_large",
    "title": "Detect clinical events",
    "build": "5.0.2",
    "description": "Automatically identify a variety of clinical events such as Problems, Tests, Treatments, Admissions or Discharges, in clinical documents using two of our pretrained Spark NLP models."
  },
  {
    "app": "NER",
    "model_name": "ner_chemicals",
    "title": "Detect chemical compounds",
    "build": "5.0.2",
    "description": "Automatically detect all types of chemical compounds using our pretrained Spark NLP for Healthcare model."
  },
  {
    "app": "NER",
    "model_name": "ner_ade_clinical",
    "title": "Detect Adverse Drug Events",
    "build": "5.0.2",
    "description": "Detect adverse reactions of drugs in reviews, tweets, and medical text using pretrained NER model."
  },
  {
    "app": "NER",
    "model_name": "ner_bionlp",
    "title": "Detect oncological & biological concepts",
    "build": "5.0.2",
    "description": "Automatically identify biological entities such as Amino_acids, Anatomical systems, Cancer, Cells, Cellular components, Developing anatomical structures, Genes and gene products, Immaterial anatomical entities, Multi-tissue structures, Organs, Organisms, Organism subdivisions, Simple chemicals, Tissues from clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER",
    "model_name": "ner_chexpert",
    "title": "Detect Anatomical and Observation Entities in Chest Radiology Reports",
    "build": "5.0.2",
    "description": "This model detects anatomical and observation terminology in chest radiology reports, as Anatomical and Observation."
  },
  {
    "app": "NER",
    "model_name": "ner_drugs",
    "title": "Detect Drug Chemicals",
    "build": "5.0.2",
    "description": "Automatically identify drug chemicals in clinical documents using the pretrained Spark NLP clinical models."
  },
  {
    "app": "NER",
    "model_name": "ner_posology_small",
    "title": "Detect drugs and prescriptions",
    "build": "5.0.2",
    "description": "Automatically identify Drug, Dosage, Duration, Form, Frequency, Route, and Strength details in clinical documents using three of our pretrained Spark NLP clinical models."
  },
  {
    "app": "NER",
    "model_name": "ner_risk_factors",
    "title": "Detect risk factors",
    "build": "5.0.2",
    "description": "Automatically identify risk factors such as Coronary artery disease, Diabetes, Family history, Hyperlipidemia, Hypertension, Medications, Obesity, and Smoking habits in clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER",
    "model_name": "ner_cellular",
    "title": "Detect Cell Structure, DNA, RNA and Protein",
    "build": "5.0.2",
    "description": "Automatically detect cell type, cell line, DNA and RNA information using our pretrained Spark NLP for Healthcare model."
  },
  {
    "app": "NER",
    "model_name": "ner_chemprot_clinical",
    "title": "Detect chemical compounds and genes",
    "build": "5.0.2",
    "description": "Automatically detect all chemical compounds and gene mentions using our pretrained chemprot model included in Spark NLP for Healthcare."
  },
  {
    "app": "NER",
    "model_name": "ner_biomarker",
    "title": "Extraction of biomarker information",
    "build": "5.0.2",
    "description": "This model is trained to extract biomarkers, therapies, oncological, and other general concepts from text."
  },
  {
    "app": "NER",
    "model_name": "ner_anatomy",
    "title": "Detect Anatomical Regions",
    "build": "5.0.2",
    "description": "Automatically identify Anatomical System, Cell, Cellular Component, Anatomical Structure, Immaterial Anatomical Entity, Multi-tissue Structure, Organ, Organism Subdivision, Organism Substance, Pathological Formation in clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER",
    "model_name": "ner_living_species",
    "title": "Detect Living Species",
    "build": "5.0.2",
    "description": "This pipeline extract living species from clinical texts which is critical to scientific disciplines like medicine, biology, ecology/biodiversity, nutrition and agriculture."
  },
  {
    "app": "NER",
    "model_name": "ner_vop",
    "title": "Extract Clinical Entities from Voice of the Patient Documents",
    "build": "5.0.2",
    "description": "This model extracts healthcare-related terms from the documents transferred from the patient’s own sentences."
  },
  {
    "app": "NER",
    "model_name": "ner_nihss",
    "title": "Extract neurologic deficits related to Stroke Scale (NIHSS)",
    "build": "5.0.2",
    "description": "The National Institutes of Health Stroke Scale (NIHSS) is a 15-item neurologic examination stroke scale. It quantifies the physical manifestations of neurological deficits and provides crucial support for clinical decision making and early-stage emergency triage."
  },
  {
    "app": "NER",
    "model_name": "ner_pathogen",
    "title": "Detect Pathogen Concepts",
    "build": "5.0.2",
    "description": "Automatically identify pathogen concepts from clinical text"
  },
  {
    "app": "NER",
    "model_name": "ner_oncology",
    "title": "Detect Oncological Concepts",
    "build": "5.0.2",
    "description": "Automatically identify oncological concepts from clinical text"
  },
  {
    "app": "NER",
    "model_name": "ner_jsl",
    "title": "Extract Chunk Key Phrases using the model: ner_jsl ",
    "build": "5.0.2",
    "description": "Clinical entities by the importance of them with respect to document or sentence that they live in are illustrated in a table."
  },
  {
    "app": "NER",
    "model_name": "ner_sdoh",
    "title": "Social Determinants of Health",
    "build": "5.0.2",
    "description": "This model extracts terminology related to Social Determinants of Health from various kinds of biomedical documents"
  },
  {
    "app": "NER_EN_18",
    "model_name": "onto_100",
    "title": "Recognize 18 Entities in Text",
    "build": "2.4.0",
    "description": "Recognize over 18 entities such as Countries, People, Organizations, Products, Events, etc. using an out of the box pretrained NerDLApproach trained on the OntoNotes corpus."
  },
  {
    "app": "NER_EN_18",
    "model_name": "ner_dl",
    "title": "Recognize Entities in Text",
    "build": "2.4.3",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using out of the box pretrained Deep Learning models based on GloVe (glove_100d) word embeddings."
  },
  {
    "app": "NER_EN_18",
    "model_name": "ner_dl_bert",
    "title": "Recognize Entities in Text",
    "build": "2.4.3",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using out of the box pretrained Deep Learning models based on BERT (ner_dl_bert) word embeddings."
  },
  {
    "app": "NER_EN",
    "model_name": "ner_dl",
    "title": "Recognize entities in text",
    "build": "2.4.3",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using out of the box pretrained Deep Learning models based on GloVe (glove_100d) word embeddings."
  },
  {
    "app": "NER_EN",
    "model_name": "ner_dl_bert",
    "title": "Recognize entities in text",
    "build": "2.4.3",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using out of the box pretrained Deep Learning models based on BERT (ner_dl_bert) word embeddings."
  },
  {
    "app": "NER_JA",
    "model_name": "ner_ud_gsd_glove_840B_300",
    "title": "Recognize entities in text",
    "build": "2.7.0",
    "description": "Recognize 22 entities using out of the box pretrained Spark NLP models."
  },
  {
    "app": "NER_BTC",
    "model_name": "bert_token_classifier_ner_btc",
    "title": "Detect Entities in Tweets",
    "build": "3.2.2",
    "description": "This model detects persons, locations and organizations in tweets."
  },
  {
    "app": "NER_HINDI_ENGLISH",
    "model_name": "bert_token_classifier_hi_en_ner",
    "title": "NER Model for Hindi+English",
    "build": "3.2.0",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition with mixed Hindi-English texts, provided by the LinCE repository."
  },
  {
    "app": "NER_COVID_TRIALS",
    "model_name": "ner_covid_trials",
    "title": "Identify Covid-related clinical terminology",
    "build": "3.3.2",
    "description": "This model was created to extract covid-related clinical terminology from covid trials."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Amharic",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Hausa",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Igbo",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Kinyarwanda",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Luganda",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Nigerian",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Pidgin",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Swahilu",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Wolof",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "Ner_masakhaner",
    "model_name": "Yorùbá",
    "title": "NER Model for 10 African Languages",
    "build": "3.3.2",
    "description": "This model carries out Name Entity Recognition on 10 African languages (Amharic, Hausa, Igbo, Kinyarwanda, Luganda, Nigerian, Pidgin, Swahilu, Wolof, and Yorùbá)."
  },
  {
    "app": "NER_SCANDINAVIAN",
    "model_name": "bert_token_classifier_scandi_ner",
    "language": "Danish",
    "title": "NER Model for Scandinavian Languages",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition for 6 different Scandinavian languages (Danish, Norwegian-Bokmål, Norwegian-Nynorsk, Swedish, Icelandic, Faroese)."
  },
  {
    "app": "NER_SCANDINAVIAN",
    "model_name": "bert_token_classifier_scandi_ner",
    "language": "Norwegian-Bokmål",
    "title": "NER Model for Scandinavian Languages",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition for 6 different Scandinavian languages (Danish, Norwegian-Bokmål, Norwegian-Nynorsk, Swedish, Icelandic, Faroese)."
  },
  {
    "app": "NER_SCANDINAVIAN",
    "model_name": "bert_token_classifier_scandi_ner",
    "language": "Norwegian-Nynorsk",
    "title": "NER Model for Scandinavian Languages",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition for 6 different Scandinavian languages (Danish, Norwegian-Bokmål, Norwegian-Nynorsk, Swedish, Icelandic, Faroese)."
  },
  {
    "app": "NER_SCANDINAVIAN",
    "model_name": "bert_token_classifier_scandi_ner",
    "language": "Swedish",
    "title": "NER Model for Scandinavian Languages",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition for 6 different Scandinavian languages (Danish, Norwegian-Bokmål, Norwegian-Nynorsk, Swedish, Icelandic, Faroese)."
  },
  {
    "app": "NER_SCANDINAVIAN",
    "model_name": "bert_token_classifier_scandi_ner",
    "language": "Icelandic",
    "title": "NER Model for Scandinavian Languages",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition for 6 different Scandinavian languages (Danish, Norwegian-Bokmål, Norwegian-Nynorsk, Swedish, Icelandic, Faroese)."
  },
  {
    "app": "NER_SCANDINAVIAN",
    "model_name": "bert_token_classifier_scandi_ner",
    "language": "Faroese",
    "title": "NER Model for Scandinavian Languages",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face to carry out Name Entity Recognition for 6 different Scandinavian languages (Danish, Norwegian-Bokmål, Norwegian-Nynorsk, Swedish, Icelandic, Faroese)."
  },
  {
    "app": "NER_RESTAURANT",
    "model_name": "nerdl_restaurant_100d",
    "language": "English",
    "title": "Detect Restaurant Terminology",
    "build": "3.3.4",
    "description": "This model detects restaurant-related terminology in texts."
  },
  {
    "app": "NER_TIMEX_SEMEVAL",
    "model_name": "roberta_token_classifier_timex_semeval",
    "language": "English",
    "title": "Detect Time-related Terminology",
    "build": "3.3.4",
    "description": "This model detects time-related terminology in texts."
  },
  {
    "app": "NER_TICKER",
    "model_name": "finner_ticket",
    "language": "English",
    "title": "Detect Ticker Alias in Financial texts",
    "build": "3.3.4",
    "description": "This model detects ticker alias in financial texts."
  },
  {
    "app": "ASPECT_BASED_SENTIMENT",
    "model_name": "finner_aspect_based_sentiment_md",
    "title": "Financial NER on Aspect-Based Sentiment Analysis",
    "build": "5.1.4",
    "description": "This NER model identifies entities that can be associated with a financial sentiment. The model is designed to be used with the associated Assertion Status model that classifies the entities into a sentiment category."
  },
  {
    "app": "NEGATION_DETECTION_IN_FINANCIAL_TEXTS",
    "model_name": "finassertion_negation",
    "language": "English",
    "title": "Financial Assertion Status (Negation)",
    "build": "3.4.1",
    "description": "This is a Financial Negation model, aimed to identify if an NER entity is mentioned in the context to be negated or not."
  },
  {
    "app": "NEGATION_DETECTION_IN_FINANCIAL_TEXTS",
    "model_name": "legassertion_negation",
    "language": "English",
    "title": "Legal Assertion Status (Negation)",
    "build": "3.4.1",
    "description": "This is a Legal Negation model, aimed to identify if an NER entity is mentioned in the context to be negated or not."
  },
  {
    "app": "ASSERTION_VOP",
    "model_name": "assertion_vop_clinical",
    "title": "Assertion Status for Voice of the Patients",
    "build": "5.0.2",
    "description": "Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent)."
  },
  {
    "app": "ASSERTION_VOP",
    "model_name": "assertion_vop_clinical_medium",
    "title": "Assertion Status for Voice of the Patients",
    "build": "5.0.2",
    "description": "Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent)."
  },
  {
    "app": "ASSERTION_VOP",
    "model_name": "assertion_vop_clinical_large",
    "title": "Assertion Status for Voice of the Patients",
    "build": "5.0.2",
    "description": "Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent)."
  },
  {
    "app": "ASSERTION_SDOH",
    "model_name": "assertion_sdoh_wip",
    "title": "Detect Assertion Status from Social Determinants of Health (SDOH) Entities",
    "build": "5.0.2",
    "description": "This model specializes in classifying assertions in text into six distinct entities: ‘Absent’, ‘Present’, ‘Someone_Else’, ‘Past’, ‘Hypothetical’, and ‘Possible’. Each entity represents a unique type of assertion, such as denoting absence, indicating presence, referring to someone else, discussing past events, speculating hypothetically, or suggesting potential conditions."
  },
  {
    "app": "ER_EDGAR",
    "model_name": "er_edgar_company_name_USE",
    "title": "Financial Entity Resolver for Edgar ",
    "build": "3.5.1",
    "description": "'Resolution' is the normalized name in U.S. Exchange and Commision Edgar Company Filings, and the IRS number is the  'Internal Revenue Service' number."
  },
  {
    "app": "ER_EDGAR",
    "model_name": "finel_edgar_companynames",
    "title": "Financial Entity Resolver for Edgar",
    "build": "3.5.1",
    "description": "'Resolution' is the normalized name in U.S. Exchange and Commision Edgar Company Filings, and the IRS number is the  'Internal Revenue Service' number."
  },
  {
    "app": "NER_SEC",
    "model_name": "finner_sec_conll",
    "title": "Extract Organizations, People, Locations or Miscellaneous Entities from Financial Texts.",
    "build": "4.0.0",
    "description": "This demos shows how you can extract the standard four entities (ORG - Organization, PER - Person, LOC - Location, MISC - Miscellaneous) from financial documents, more specifically, using texts from SEC database. If you are looking for more fine-grain entities, check our other demos in the Finance and Legal Section - Entity Recognition subsection."
  },
  {
    "app": "Ner_HRL",
    "model_name": "Arabic",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "Chinese",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "Dutch",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "English",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "French",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "German",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "Italian",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "Latvian",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "Portuguese",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "Ner_HRL",
    "model_name": "Spanish",
    "title": "NER Model for 10 High Resourced Languages",
    "build": "3.3.4",
    "description": "This model carries out Named Entity Recognition on 10 languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese)"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology",
    "title": "Detect Oncology-Specific Entities",
    "build": "4.2.0",
    "description": "Automatically identify more than 40 oncology-related entities from clinical texts"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_diagnosis",
    "title": "Detect Entities Related to Cancer Diagnosis",
    "build": "4.2.0",
    "description": "Automatically identify entities related to cancer diagnosis, such as Metastasis, Histological_Type or Tumor_Size  from clinical texts"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_therapy",
    "title": "Detect Entities Related to Cancer Therapies",
    "build": "4.2.0",
    "description": "Automatically identify entities related to oncology therapies using granular labels, including mentions of treatments, posology information and line of therapy"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_tnm",
    "title": "Extract Entities Related to TNM Staging",
    "build": "4.2.0",
    "description": "Automatically identify staging information and mentions related to tumors, lymph nodes and metastases"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_anatomy_general",
    "title": "Extract Anatomical Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extracts anatomical entities using an unspecific label from clinical texts"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_demographics",
    "title": "Extract Demographic Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extracts demographic information from oncology texts, including age, gender and smoking status from oncology texts ."
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_test",
    "title": "Extract Oncology Tests",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of tests from oncology texts, including pathology tests and imaging tests."
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_unspecific_posology",
    "title": "Extract Cancer Therapies and Posology Information",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of treatments and posology information using general labels (low granularity) from clinical texts"
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_anatomy_granular",
    "title": "Extract Granular Anatomical Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extractions mentions of anatomical entities using granular labels."
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_response_to_treatment",
    "title": "Extract Mentions of Response to Cancer Treatment",
    "build": "4.2.0",
    "description": "Automatically extracts entities related to the patient”s response to the oncology treatment, including clinical response and changes in tumor size."
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_biomarker",
    "title": "Extract Biomarkers and their Results",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of biomarkers and biomarker results from oncology texts."
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_posology",
    "title": "Extract Cancer Therapies and Granular Posology Information",
    "build": "4.2.0",
    "description": "Automatically extracts cancer therapies (Cancer_Surgery, Radiotherapy and Cancer_Therapy) and posology information at a granular level."
  },
  {
    "app": "ONCOLOGY",
    "task": "Name_Entitiy_Recognation",
    "model_name": "ner_oncology_custom",
    "title": "Detect Oncology-Specific Entities",
    "build": "4.2.0",
    "description": "Automatically identify oncology-specific entities from clinical texts"
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology",
    "title": "Detect Relation Extraction between different Oncological entity types (unspecific version)",
    "build": "4.2.0",
    "description": "This relation extraction model identifies relations between dates and other clinical entities, between tumor mentions and their size, between anatomical entities and other clinical entities, and between tests and their results."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_granular",
    "title": "Detect Relation Extraction between different Oncological entity types (granular version)",
    "build": "4.2.0",
    "description": "Using this relation extraction model, four relation types can be identified: is_date_of (between date entities and other clinical entities), is_size_of (between Tumor_Finding and Tumor_Size), is_location_of (between anatomical entities and other entities) and is_finding_of (between test entities and their results)."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_biomarker_result",
    "title": "Detect Relation Extraction between Biomarkers and Results",
    "build": "4.2.0",
    "description": "This relation extraction model links Biomarker and Oncogene extractions to their corresponding Biomarker_Result extractions."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_location",
    "title": "Detect Relation Extraction between anatomical entities and other clinical entities",
    "build": "4.2.0",
    "description": "This relation extraction model links extractions from anatomical entities (such as Site_Breast or Site_Lung) to other clinical entities (such as Tumor_Finding or Cancer_Surgery)."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_size",
    "title": "Detect Relation Extraction between Tumors and Sizes",
    "build": "4.2.0",
    "description": "This relation extraction model links Tumor_Size extractions to their corresponding Tumor_Finding extractions."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_temporal",
    "title": "Detect Relation Extraction between dates and other entities",
    "build": "4.2.0",
    "description": "This relation extraction model links Date and Relative_Date extractions to clinical entities such as Test or Cancer_Dx."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_test_result",
    "title": "Detect Relation Extraction between Test and Results",
    "build": "4.2.0",
    "description": "This relation extraction model links test extractions to their corresponding results."
  },
  {
    "app": "ONCOLOGY",
    "task": "Relation",
    "model_name": "re_oncology_custom",
    "title": "Detect Relations between Biomarkers and their Results",
    "build": "4.2.0",
    "description": "This relation extraction model identifies relations between biomarkers and other clinical entities."
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology",
    "title": "Detect Assertion Status from Oncology Entities",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to oncology (including diagnoses, therapies and tests)."
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_problem",
    "title": "Detect Assertion Status from Entities Related to Cancer Diagnosis",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to cancer diagnosis (including Metastasis, Cancer_Dx and Tumor_Finding, among others)."
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_treatment_binary",
    "title": "Detect Assertion Status from Oncology Treatments",
    "build": "4.2.0",
    "description": "This model detects the assertion status of oncology treatment entities. "
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_test_binary",
    "title": "Detect Assertion Status from Oncology Tests",
    "build": "4.2.0",
    "description": "This model detects the assertion status of oncology tests, such as Pathology_Test or Imaging_Test"
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_smoking_status",
    "title": "Detect Assertion Status from Smoking Status Entity",
    "build": "4.2.0",
    "description": "This model detects the assertion status of the Smoking_Status entity. It classifies extractions as Present, Past or Absent."
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_response_to_treatment",
    "title": "Detect Assertion Status from Response to Treatment",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to response to treatment. "
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_family_history",
    "title": "Detect Family History Status from Oncology Entities",
    "build": "4.2.0",
    "description": "This model detects entities refering to the family history."
  },
  {
    "app": "ONCOLOGY",
    "task": "Assertion",
    "model_name": "assertion_oncology_demographic_binary",
    "title": "Detect Assertion Status from Demographic Entities",
    "build": "4.2.0",
    "description": "This model detects if a demographic entity refers to the patient or to someone else."
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_wip",
    "title": "Detect Oncology-Specific Entities",
    "build": "4.2.0",
    "description": "Automatically identify more than 40 oncology-related entities from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_diagnosis_wip",
    "title": "Detect Entities Related to Cancer Diagnosis",
    "build": "4.2.0",
    "description": "Automatically identify entities related to cancer diagnosis, such as Metastasis, Histological_Type or Tumor_Size  from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_tnm_wip",
    "title": "Extract Entities Related to TNM Staging",
    "build": "4.2.0",
    "description": "Automatically identify staging information and mentions related to tumors, lymph nodes and metastases"
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_therapy_wip",
    "title": "Detect Entities Related to Cancer Therapies",
    "build": "4.2.0",
    "description": "Automatically identify entities related to oncology therapies using granular labels, including mentions of treatments, posology information and line of therapy"
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_unspecific_posology_wip",
    "title": "Extract Cancer Therapies and Posology Information",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of treatments and posology information using general labels (low granularity) from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_response_to_treatment_wip",
    "title": "Extract Mentions of Response to Cancer Treatment",
    "build": "4.2.0",
    "description": "Automatically extracts entities related to the patient”s response to the oncology treatment, including clinical response and changes in tumor size."
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_posology_wip",
    "title": "Extract Cancer Therapies and Granular Posology Information",
    "build": "4.2.0",
    "description": "Automatically extracts cancer therapies (Cancer_Surgery, Radiotherapy and Cancer_Therapy) and posology information at a granular level."
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_anatomy_general_wip",
    "title": "Extract Anatomical Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extracts anatomical entities using an unspecific label from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_oncology_anatomy_granular_wip",
    "title": "Extract Granular Anatomical Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extractions mentions of anatomical entities using granular labels."
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_bionlp",
    "title": "Detect oncological & biological concepts",
    "build": "2.4.2",
    "description": "Automatically identify biological entities such as Amino_acids, Anatomical systems, Cancer, Cells, Cellular components, Developing anatomical structures, Genes and gene products, Immaterial anatomical entities, Multi-tissue structures, Organs, Organisms, Organism subdivisions, Simple chemicals, Tissues from clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_ONCOLOGY_CLINICAL",
    "model_name": "ner_bionlp_biobert",
    "title": "Detect oncological & biological concepts (biobert)",
    "build": "3.1.2",
    "description": "Automatically identify general biological entities such as tissue_structure, Amino_acid, Simple_chemical, Organism_substance, Developing_anatomical_structure, Cell, Cancer, Cellular_component, Gene_or_gene_product, Immaterial_anatomical_entity, Organ, Organism, Pathological_formation, Organism_subdivision, Anatomical_system, Tissue from clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_ONCOLOGY_DIAGNOSIS",
    "model_name": "ner_oncology_wip",
    "title": "Detect Oncology-Specific Entities",
    "build": "4.2.0",
    "description": "Automatically identify more than 40 oncology-related entities from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_DIAGNOSIS",
    "model_name": "ner_oncology_diagnosis_wip",
    "title": "Detect Entities Related to Cancer Diagnosis",
    "build": "4.2.0",
    "description": "Automatically identify entities related to cancer diagnosis, such as Metastasis, Histological_Type or Tumor_Size  from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_DIAGNOSIS",
    "model_name": "ner_oncology_tnm_wip",
    "title": "Extract Entities Related to TNM Staging",
    "build": "4.2.0",
    "description": "Automatically identify staging information and mentions related to tumors, lymph nodes and metastases"
  },
  {
    "app": "NER_ONCOLOGY_TREATMENT",
    "model_name": "ner_oncology_therapy_wip",
    "title": "Detect Entities Related to Cancer Therapies",
    "build": "4.2.0",
    "description": "Automatically identify entities related to oncology therapies using granular labels, including mentions of treatments, posology information and line of therapy"
  },
  {
    "app": "NER_ONCOLOGY_TREATMENT",
    "model_name": "ner_oncology_unspecific_posology_wip",
    "title": "Extract Cancer Therapies and Posology Information",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of treatments and posology information using general labels (low granularity) from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_TREATMENT",
    "model_name": "ner_oncology_response_to_treatment_wip",
    "title": "Extract Mentions of Response to Cancer Treatment",
    "build": "4.2.0",
    "description": "Automatically extracts entities related to the patient”s response to the oncology treatment, including clinical response and changes in tumor size."
  },
  {
    "app": "NER_ONCOLOGY_TREATMENT",
    "model_name": "ner_oncology_posology_wip",
    "title": "Extract Cancer Therapies and Granular Posology Information",
    "build": "4.2.0",
    "description": "Automatically extracts cancer therapies (Cancer_Surgery, Radiotherapy and Cancer_Therapy) and posology information at a granular level."
  },
  {
    "app": "NER_ONCOLOGY_ANATOMY",
    "model_name": "ner_oncology_anatomy_general_wip",
    "title": "Extract Anatomical Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extracts anatomical entities using an unspecific label from clinical texts"
  },
  {
    "app": "NER_ONCOLOGY_ANATOMY",
    "model_name": "ner_oncology_anatomy_granular_wip",
    "title": "Extract Granular Anatomical Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extractions mentions of anatomical entities using granular labels."
  },
  {
    "app": "NER_ONCOLOGY_DEMOGRAPHICS",
    "model_name": "ner_oncology_demographics_wip",
    "title": "Extract Demographic Entities from Oncology Texts",
    "build": "4.2.0",
    "description": "Automatically extracts demographic information from oncology texts, including age, gender and smoking status from oncology texts ."
  },
  {
    "app": "NER_ONCOLOGY_TESTS",
    "model_name": "ner_oncology_test_wip",
    "title": "Extract Oncology Tests",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of tests from oncology texts, including pathology tests and imaging tests."
  },
  {
    "app": "NER_ONCOLOGY_TESTS",
    "model_name": "ner_oncology_biomarker_wip",
    "title": "Extract Biomarkers and their Results",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of biomarkers and biomarker results from oncology texts."
  },
  {
    "app": "CLASSIFICATION_HOC",
    "model_name": "multiclassifierdl_hoc",
    "title": "Multilabel Classification For Hallmarks of Cancer",
    "build": "5.0.2",
    "description": "The model determines whether the article is associated with any of the 10 cancer hallmarks"
  },
  {
    "app": "CLASSIFICATION_EN_TREC",
    "model_name": "classifierdl_use_trec6",
    "title": "Classify documents",
    "build": "2.5.0",
    "description": "Classify open-domain, fact-based questions into one of the following broad semantic categories: Abbreviation, Description, Entities, Human Beings, Locations or Numeric Values."
  },
  {
    "app": "CLASSIFICATION_EN_TREC",
    "model_name": "classifierdl_use_trec50",
    "title": "Classify documents",
    "build": "2.5.0",
    "description": "Classify open-domain, fact-based questions into 50 different broad semantic categories."
  },
  {
    "app": "CLASSIFICATION_EN_TREC",
    "model_name": "bert_sequence_classifier_trec_coarse",
    "title": "Classify documents",
    "build": "3.4.1",
    "description": "Classify open-domain, fact-based questions into one of the following broad semantic categories: Abbreviation, Description, Entities, Human Beings, Locations or Numeric Values. It's been trained with SOTA approach."
  },
  {
    "app": "CLASSIFICATION_MULTILABEL",
    "model_name": "USE_multilabel_clsf",
    "title": "Multilabel Document Classification",
    "build": "4.0.0",
    "description": "This model classifies multilabel documents for financial news categories."
  },
  {
    "app": "CLASSIFICATION_LITCOVID",
    "model_name": "multiclassifierdl_litcovid",
    "title": "Multilabel Document Classification",
    "build": "5.0.2",
    "description": "This model determines the relevant COVID-19 topics of the article based on its abstract."
  },
  {
    "app": "CLASSIFICATION_RESPIRATORY",
    "model_name": "multiclassifierdl_respiratory_disease",
    "title": "Multilabel Text Classification For Respiratory Disease",
    "build": "5.1.1",
    "description": "The PHS-BERT Respiratory Disease Classifier Model is a specialized text classification system, engineered to accurately identify and categorize textual mentions of four prominent respiratory diseases: Asthma, Chronic Obstructive Pulmonary Disease (COPD), Emphysema, and Chronic bronchitis"
  },
  {
    "app": "CLASSIFICATION_MENTAL_DISORDER",
    "model_name": "multiclassifierdl_mental_disorder",
    "title": "Text Classification For Mental Disorder",
    "build": "5.1.1",
    "description": "The PHS-BERT Mental Disorder Classifier Model classifies text based on the following mental disorders. (Schizophrenia, Depression, Bipolar disorder, Anxiety disorder)."
  },
  {
    "app": "CLASSIFICATION_PATIENT_COMPLAINT_AND_URGENCY",
    "model_name": "few_shot_classifier_patient_complaint_sbiobert_cased_mli",
    "title": "Patient Complaint Classification",
    "build": "5.0.2",
    "description": "This Few Shot Classifier model classifies texts into Complaint or No_Complaint."
  },
  {
    "app": "CLASSIFICATION_PATIENT_COMPLAINT_AND_URGENCY",
    "model_name": "bert_sequence_classifier_patient_urgency",
    "title": "Patient Urgency Classification",
    "build": "5.0.2",
    "description": "This model classifies texts into High, Medium or Low."
  },
  {
    "app": "VOP_CLASSIFICATION_SIDE_EFFECT",
    "model_name": "bert_sequence_classifier_vop_side_effect",
    "title": "Side Effect Classifier(VOP)",
    "build": "4.4.4",
    "description": "This model classifies texts written by patients as True if side effects from treatments or procedures are mentioned."
  },
  {
    "app": "VOP_CLASSIFICATION_SIDE_EFFECT",
    "model_name": "bert_sequence_classifier_vop_adverse_event",
    "title": "Adverse Event Classifier (BioBERT)",
    "build": "5.1.1",
    "description": "This model is a BioBERT-based Adverse Event Text Classifier and it is trained for analyzing the adverse events of drugs mentioned in health documents. "
  },
  {
    "app": "LEGGEN_CONTRACT_NLI",
    "model_name": "leggen_contract_nli",
    "title": "Legal Contract NLI",
    "build": "5.1.4",
    "description": "This is a text-to-text generation model (encode-decoder architecture) that has undergone fine-tuning on contract for Natural Language Inference on in-house curated dataset, aiming to streamline and expedite the contract review process. The objective of this task is to provide a system with a set of hypotheses, like “Some obligations of Agreement may survive termination,” along with a contract, and task it with classifying whether each hypothesis is entailed, contradicted, or not mentioned (neutral) by the contract."
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_ti_allowance_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_amendments_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_compensation_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_currency_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_duration_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_fiscal_year_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_guarantee_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_employment_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_loans_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_management_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "CLASSIFY_LEGAL_CLAUSES",
    "model_name": "legclf_salary_clause",
    "title": "Understand the Topic of Different Legal Text Clauses",
    "build": "4.0.0"
  },
  {
    "app": "COMPLAINT_CLASSIFICATION",
    "model_name": "finclf_bank_complaints",
    "title": "Classify Complaints about Bank Products",
    "build": "4.0.0",
    "description": "This model detects the topic/class of a complaint about a bank-related product. This model includes 7 classes that can be used to carry out, for example, classification of emails in a customer support account."
  },
  {
    "app": "CLASSIFICATION_LAW_EXCHANGE",
    "model_name": "legclf_law_stack_exchange",
    "title": "Classify Law Stack Exchange Questions",
    "build": "5.0.0",
    "description": "This demo classifies a wide variety of legal issues. The model demonstrates remarkable proficiency in predicting `business`, `constitutional-law`, `contract-law`, `copyright`, `criminal-law`, `employment`, `liability`, `privacy`, `tax-law`, and `trademark`."
  },
  {
    "app": "FIN_NER_RUSSIAN_GOV",
    "model_name": "finner_bert_rufacts",
    "title": " Extract economical and social entities/objects from government documents",
    "build": "4.0.0",
    "description": "This model extracts entities such as ECO (economics), SOC (social) for economic and social entities, institutions of events, and also quantifiers (QUA), metrics (MET), etc. from Government documents in Russian."
  },
  {
    "app": "FINANCE_NLP_WITH_WIKIDATA",
    "model_name": "Name_Entity_Recognition",
    "title": "Name Entity Recognition on Wikidata",
    "build": "4.2.8",
    "description": "This demo shows how you can apply NER models to extract the FROMER_NAME, NATIONALITY, FOUNDING_DATE, STOCK_EXCHANGE, LISTING_DATE, SECTOR entities from Wikidata."
  },
  {
    "app": "FINANCE_NLP_WITH_WIKIDATA",
    "model_name": "Chunk_Mapper_Company",
    "title": "Augment Organization Names with Wikipedia Information",
    "build": "4.2.8",
    "description": "This demo shows how you can augment your NER extraction of the company name with information from Wikipedia."
  },
  {
    "app": "FINANCE_NLP_WITH_WIKIDATA",
    "model_name": "Chunk_Mapper_Ticker",
    "title": "Augment Trading Symbol with Wikipedia Information",
    "build": "4.2.8",
    "description": "This demo shows how you can augment your NER extraction of the trading symbol with information from Wikipedia."
  },
  {
    "app": "FINANCE_NLP_WITH_WIKIDATA",
    "model_name": "Entity_Resolution_Company",
    "title": "Normalize Parent Companies Names using Wikidata",
    "build": "4.3.0",
    "description": "This demo shows how you can retrieve the Normalized Company name and TICKER using a previously detected ORG entity with the NER model."
  },
  {
    "app": "FINANCE_NLP_WITH_WIKIDATA",
    "model_name": "Entity_Resolution_Ticker",
    "title": "Resolve Company Names to Tickers using Wikidata",
    "build": "4.3.0",
    "description": "This demo shows how you can retrieve the TICKER and  Normalized Company name using a previously detected ORG entity with the NER model."
  },
  {
    "app": "FINANCE_NLP_WITH_WIKIDATA",
    "model_name": "Assertion_Status",
    "title": "Understand Acquisitions in Context",
    "build": "4.3.0",
    "description": "This demo shows how you can understand if there is a mention of an acquisition in a text. If so, the assertion model will analyze the context and return either TOTAL_ACQUISITION or PARTIAL_ACQUISITION. If the ORG entities are not mentioned in any acquisition context, the model will return OTHER."
  },
  {
    "app": "FINNER_FINANCE_CHINESE",
    "model_name": "finner_financial_chinese_sm",
    "title": "Extract financial entities in Chinese text",
    "build": "4.2.0",
    "description": "This demo uses Name Entity Recognition to extract information like company names, holding shares, trading prices, dates, etc. from Chinese texts."
  },
  {
    "app": "FINNER_SEC10K_FIRSTPAGE",
    "model_name": "finner_10k_summary",
    "title": "Extract public companies key data from 10-K filings",
    "build": "4.0.0",
    "description": "This demo uses Name Entity Recognition to extract information like Company Name, Trading symbols, Stock markets, Addresses, Phones, Stock types and values, IRS, CFN, etc. from the first page of 10-K filings"
  },
  {
    "app": "FINNER_FINANCIAL_10K",
    "model_name": "finner_financial_small",
    "title": "Name Entity Recognition on Financial Information",
    "build": "4.0.0",
    "description": "This demo showcases how you can apply NER models to extract financial entities from annual reports, as Expenses, Loses, Profit declines or increases, etc."
  },
  {
    "app": "FINNER_RESPONSIBILITY_REPORTS",
    "model_name": "finner_responsibility_reports",
    "title": "Name Entity Recognition on Responsibility and ESG Reports",
    "build": "4.3.0",
    "description": "This demo shows how to extract up to 20 quantifiable entities, including KPI, from the Responsibility and ESG Reports of companies."
  },
  {
    "app": "FINRE_ACQUISITIONS",
    "model_name": "finre_acquisitions_subsidiaries_wip",
    "title": "Extract Acquisition and Subsidiary Relationships",
    "build": "4.0.2",
    "description": "This demo shows how to extract Acquisition and Subsidiary relations from ORG (Companies), ALIAS (Aliases of companies in an agreement) and PRODUCT (Products)."
  },
  {
    "app": "FINRE_10k_FILINGS",
    "model_name": "finre_financial_small",
    "title": "Financial Relation Extraction on 10K filings",
    "build": "4.0.2",
    "description": "This model extracts relations between amounts, counts, percentages, dates and the financial entities extracted with `finner_financial` models."
  },
  {
    "app": "LEGMULTICLF_LEDGAR",
    "model_name": "legmulticlf_ledgar",
    "title": "Classify texts into 15 type of legal clause",
    "build": "4.0.0",
    "description": "Using Multilabel Document Classification, where several classes can be assigned to a text, this model will analyse and provide the best class or classes given an input text. This model can be used to detect relevant clauses in a legal text."
  },
  {
    "app": "LEG_JUDGEMETNS_CLF",
    "model_name": "legclf_bert_judgements_agent",
    "title": "Identify Actors(Agents) in Judgement Clauses",
    "build": "4.0.2",
    "description": "This demo shows how you can identify if an argument has been started by the ECHR, Commision/Chamber, the State, Third Parties, etc."
  },
  {
    "app": "LEG_JUDGEMETNS_CLF",
    "model_name": "legclf_bert_judgements_argtype",
    "title": "Identify Argument Types in Judgement Clauses",
    "build": "4.0.2",
    "description": "This model analyzes and identifies if a clause is a decision, talks about a legal basis, a legitimate purpose, etc."
  },
  {
    "app": "LEGCLF_SWISS_JUDGEMENTS",
    "model_name": "legclf_bert_swiss_judgements_en",
    "title": "Classify Swiss Judgement Documents(English) by Their Case Area",
    "description": "This model can be used to classify Swiss Judgement Documents in English into the Civil Law, Insurance Law, Public Law, Social Law, Penal Law or Other classes according to their case area. It has been trained with SOTA approach",
    "build": "1.0.0"
  },
  {
    "app": "LEGCLF_SWISS_JUDGEMENTS",
    "model_name": "legclf_bert_swiss_judgements_de",
    "title": "Classify Swiss Judgement Documents(German) by Their Case Area",
    "description": "This model can be used to classify Swiss Judgement Documents in German into the Civil Law, Insurance Law, Public Law, Social Law, Penal Law or Other classes according to their case area. It has been trained with SOTA approach",
    "build": "1.0.0"
  },
  {
    "app": "LEGCLF_SWISS_JUDGEMENTS",
    "model_name": "legclf_bert_swiss_judgements_fr",
    "title": "Classify Swiss Judgement Documents(French) by Their Case Area",
    "description": "This model can be used to classify Swiss Judgement Documents in French into the Civil Law, Insurance Law, Public Law, Social Law, Penal Law or Other classes according to their case area. It has been trained with SOTA approach",
    "build": "1.0.0"
  },
  {
    "app": "LEGCLF_SWISS_JUDGEMENTS",
    "model_name": "legclf_bert_swiss_judgements_it",
    "title": "Classify Swiss Judgement Documents(Italian) by Their Case Area",
    "description": "This model can be used to classify Swiss Judgement Documents in Italian into the Civil Law, Insurance Law, Public Law, Social Law, Penal Law or Other classes according to their case area. It has been trained with SOTA approach",
    "build": "1.0.0"
  },
  {
    "app": "CLASSIFICATION_MULTILABEL_TOXIC",
    "model_name": "classification_multilabel_toxic",
    "title": "Detect toxic content in comments",
    "build": "2.6.0",
    "description": "Automatically detect identity hate, insult, obscene, severe toxic, threat or toxic content in SM comments using our out-of-the-box Spark NLP Multiclassifier DL."
  },
  {
    "app": "CLASSIFICATION_GENDER",
    "model_name": "classifierdl_gender_sbert",
    "title": "Detects the gender of the patient in the clinical document",
    "build": "2.6.5",
    "description": "This model classifies the medical document as Female, Male or Unknown in accordance with the gender of the patient."
  },
  {
    "app": "CLASSIFICATION_GENDER",
    "model_name": "classifierdl_gender_biobert",
    "title": "Detects the gender of the patient in the clinical document",
    "build": "2.6.5",
    "description": "This model classifies the medical document as Female, Male or Unknown in accordance with the gender of the patient."
  },
  {
    "app": "CLASSIFICATION_GENDER",
    "model_name": "bert_sequence_classifier_gender_biobert",
    "title": "Detects the gender of the patient in the clinical document",
    "build": "3.4.1",
    "description": "This model classifies the medical document as Female, Male or Unknown in accordance with the gender of the patient. It's been trained with SOTA approach."
  },
  {
    "app": "CLASSIFICATION_TR_NEWS",
    "model_name": "classifierdl_bert_news",
    "title": "Classify Turkish News.",
    "build": "3.0.2",
    "description": "Automatically classifies any Turkish news as Ekonomi, Spor, Kultur, Siyaset, Teknoloji or Saglik in documents using our out-of-the-box Spark NLP Classifier DL Model."
  },
  {
    "app": "CLASSIFICATION_DE_SENTIMENT",
    "model_name": "classifierdl_bert_sentiment",
    "title": "Sentiment Analysis of German texts",
    "build": "3.2.0",
    "description": "This model identifies the sentiments (positive or negative) in German texts."
  },
  {
    "app": "CLASSIFICATION_FR_SENTIMENT",
    "model_name": "classifierdl_bert_sentiment",
    "title": "Sentiment Analysis of French texts",
    "build": "3.2.0",
    "description": "This model identifies the sentiments (positive or negative) in French texts."
  },
  {
    "app": "CLASSIFICATION_ANTISEMITISM",
    "model_name": "bert_sequence_classifier_antisemitism",
    "title": "Identify Antisemitic Texts",
    "build": "3.4.1",
    "description": "This model identifies if the text contains antisemitic content or not."
  },
  {
    "app": "CLASSIFICATION_HATEXPLAIN",
    "model_name": "bert_sequence_classifier_hatexplain",
    "title": "Identify Hate Speech Texts",
    "build": "3.4.1",
    "description": "This model identifies if the text contains Hate speech, Offensive, Normal contents."
  },
  {
    "app": "CLASSIFICATION_EMOTION",
    "model_name": "bert_sequence_classifier_emotion",
    "title": "Identify Emotions in Texts",
    "build": "3.4.1",
    "description": "This model classifies texts as one of these emotion categories : Surprise, Joy, Anger, Love, Fear, Sadness."
  },
  {
    "app": "CLASSIFICATION_BANKING",
    "model_name": "finclf_bert_banking77",
    "title": "Classify Banking-related Texts as one of the 77 Categories",
    "build": "3.4.1",
    "description": "This model classifies texts into 77 banking-related classes"
  },
  {
    "app": "SENTIMENT_SW",
    "model_name": "classifierdl_xlm_roberta_sentiment",
    "title": "Sentiment Analysis of Swahili texts",
    "build": "3.3.4",
    "description": "This model identifies positive or negative sentiments in Swahili texts."
  },
  {
    "app": "SENTIMENT_EN",
    "model_name": "sentimentdl_use_imdb",
    "title": "Analyze sentiment in movie reviews and tweets",
    "build": "2.5.0",
    "description": "Detect the general sentiment expressed in a movie review or tweet by using our pretrained Spark NLP DL classifier."
  },
  {
    "app": "SENTIMENT_EN",
    "model_name": "sentimentdl_use_twitter",
    "title": "Analyze sentiment in movie reviews and tweets",
    "build": "2.5.0",
    "description": "Detect the general sentiment expressed in a movie review or tweet by using our pretrained Spark NLP DL classifier."
  },
  {
    "app": "SENTIMENT_EN",
    "model_name": "t5_base",
    "title": "Analyze sentiment in movie reviews and tweets",
    "build": "2.7.3",
    "description": "Detect the general sentiment expressed in a movie review or tweet by using our pretrained Spark NLP DL classifier."
  },
  {
    "app": "SENTIMENT_EN",
    "model_name": "t5_small",
    "title": "Analyze sentiment in movie reviews and tweets",
    "build": "2.7.3",
    "description": "Detect the general sentiment expressed in a movie review or tweet by using our pretrained Spark NLP DL classifier."
  },
  {
    "app": "SENTIMENT_TR",
    "model_name": "classifierdl_use_sentiment",
    "title": "Turkish Sentiment Analysis",
    "build": "3.3.0",
    "description": "This model identifies positive or negative sentiments in Turkish texts"
  },
  {
    "app": "SENTIMENT_DA",
    "model_name": "bert_sequence_classifier_sentiment",
    "title": "Danish Sentiment Analysis",
    "build": "3.4.1",
    "description": "This model identifies positive, negative or neutral sentiments in Danish texts."
  },
  {
    "app": "SENTIMENT_VI",
    "model_name": "classifierdl_distilbert_sentiment",
    "title": "Analyze sentiment in Vietnamese texts",
    "build": "3.4.1",
    "description": "This model identifies Positive or Negative sentiments in Vietnamese texts."
  },
  {
    "app": "SENTIMENT_EN_FINANCE",
    "model_name": "finclf_sentiment_analysis",
    "title": "Sentiment Analysis of Financial news",
    "build": "3.3.0",
    "description": "This model identifies positive, negative or neutral sentiments in financial news."
  },
  {
    "app": "SENTIMENT_EN_FINANCE",
    "model_name": "finclf_bert_sentiment_analysis_fintone",
    "title": "Sentiment Analysis of Financial news",
    "build": "3.3.2",
    "description": "This model was imported from Hugging Face and identifies positive, negative or neutral sentiments in financial news."
  },
  {
    "app": "TEXT_FINDER",
    "model_name": "TextMatcher",
    "title": "Find text in a document",
    "build": "2.5.0",
    "description": "Finds a text in document either by keyword or by regex expression."
  },
  {
    "app": "TEXT_FINDER",
    "model_name": "RegexMatcher",
    "title": "Find text in a document",
    "build": "2.5.0",
    "description": "Finds a text in document either by keyword or by regex expression."
  },
  {
    "app": "TEXT_PREPROCESSING",
    "model_name": "SentenceDetector|Tokenizer|Stemmer|Lemmatizer|Normalizer|Stop Words Remover",
    "title": "Split and clean text",
    "build": "2.5.0",
    "description": "Spark NLP pretrained annotators allow an easy and straightforward processing of any type of text documents. This demo showcases our Sentence Detector, Tokenizer, Stemmer, Lemmatizer, Normalizer and Stop Words Removal."
  },
  {
    "app": "LEMMATIZER_EAST_ASIAN",
    "model_name": "Indonesian",
    "title": "Lemmatizer for Indonesian",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Indonesian"
  },
  {
    "app": "LEMMATIZER_EAST_ASIAN",
    "model_name": "Japanese",
    "title": "Lemmatizer for Japanese",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Japanese"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "Danish",
    "title": "Lemmatizer for Danish",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of Danish"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "French",
    "title": "Lemmatizer for French",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of French"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "German",
    "title": "Lemmatizer for German",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of German"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "Italian",
    "title": "Lemmatizer for Italian",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of Italian"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "Portuguese",
    "title": "Lemmatizer for Portuguese",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of Portuguese"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "Romanian",
    "title": "Lemmatizer for Romanian",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of Romanian"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "Spanish",
    "title": "Lemmatizer for Spanish",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of Spanish"
  },
  {
    "app": "LEMMATIZER_EUROPEAN",
    "model_name": "Swedish",
    "title": "Lemmatizer for Swedish",
    "build": "3.4.2",
    "description": "This model lemmatizes the documents of Swedish"
  },
  {
    "app": "LEMMATIZER_MIDDLE_EAST",
    "model_name": "Turkish",
    "title": "Lemmatizer for Turkish",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Turkish."
  },
  {
    "app": "LEMMATIZER_MIDDLE_EAST",
    "model_name": "Hebrew",
    "title": "Lemmatizer for Hebrew",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Hebrew."
  },
  {
    "app": "LEMMATIZER_MIDDLE_EAST",
    "model_name": "Persian",
    "title": "Lemmatizer for Persian",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Persian."
  },
  {
    "app": "LEMMATIZER_MIDDLE_EAST",
    "model_name": "Arabic",
    "title": "Lemmatizer for Arabic",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Arabic."
  },
  {
    "app": "LEMMATIZER_MIDDLE_EAST",
    "model_name": "Urdu",
    "title": "Lemmatizer for Urdu",
    "build": "3.4.1",
    "description": "This model lemmatizes the document of Urdu."
  },
  {
    "app": "LEMMATIZER_INDIAN",
    "model_name": "Tamil",
    "title": "Lemmatizer for Tamil",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Tamil."
  },
  {
    "app": "LEMMATIZER_INDIAN",
    "model_name": "Marathi",
    "title": "Lemmatizer for Marathi",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Marathi."
  },
  {
    "app": "LEMMATIZER_INDIAN",
    "model_name": "Bengali",
    "title": "Lemmatizer for Bengali",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Bengali."
  },
  {
    "app": "LEMMATIZER_INDIAN",
    "model_name": "Hindi",
    "title": "Lemmatizer for Hindi",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Hindi."
  },
  {
    "app": "LEMMATIZER_AFRICAN",
    "model_name": "Afrikaans",
    "title": "Lemmatizer for Afrikaans",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Afrikaans."
  },
  {
    "app": "LEMMATIZER_AFRICAN",
    "model_name": "Amharic",
    "title": "Lemmatizer for Amharic",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Amharic."
  },
  {
    "app": "LEMMATIZER_AFRICAN",
    "model_name": "Yorùbá",
    "title": "Lemmatizer for Yorùbá",
    "build": "3.4.1",
    "description": "This model lemmatizes the documents of Yorùbá."
  },
  {
    "app": "STOPWORDS_EAST_ASIAN",
    "model_name": "Indonesian",
    "title": "Stopwords Remover for Indonesian",
    "build": "3.4.1",
    "description": "This model removes stopwords from Indonesian documents."
  },
  {
    "app": "STOPWORDS_EAST_ASIAN",
    "model_name": "Japanese",
    "title": "Stopwords Remover for Japanese",
    "build": "3.4.1",
    "description": "This model removes stopwords from Japanese documents."
  },
  {
    "app": "STOPWORDS_EAST_ASIAN",
    "model_name": "Korean",
    "title": "Stopwords Remover for Korean",
    "build": "3.4.1",
    "description": "This model removes stopwords from Korean documents."
  },
  {
    "app": "STOPWORDS_EAST_ASIAN",
    "model_name": "Tagalog",
    "title": "Stopwords Remover for Tagalog",
    "build": "3.4.1",
    "description": "This model removes stopwords from Tagalog documents."
  },
  {
    "app": "STOPWORDS_EAST_ASIAN",
    "model_name": "Vietnamese",
    "title": "Stopwords Remover for Vietnamese",
    "build": "3.4.1",
    "description": "This model removes stopwords from Vietnamese documents."
  },
  {
    "app": "STOPWORDS_EAST_ASIAN",
    "model_name": "Chinese",
    "title": "Stopwords Remover for Chinese",
    "build": "3.4.1",
    "description": "This model removes stopwords from Chinese documents."
  },
  {
    "app": "STOPWORDS_INDIAN",
    "model_name": "Tamil",
    "title": "Stopwords Remover for Tamil",
    "build": "3.4.2",
    "description": "This model removes stopwords from Tamil documents."
  },
  {
    "app": "STOPWORDS_INDIAN",
    "model_name": "Marathi",
    "title": "Stopwords Remover for Marathi",
    "build": "3.4.2",
    "description": "This model removes stopwords from Marathi documents."
  },
  {
    "app": "STOPWORDS_INDIAN",
    "model_name": "Bengali",
    "title": "Stopwords Remover for Bengali",
    "build": "3.4.2",
    "description": "This model removes stopwords from Bengali documents."
  },
  {
    "app": "STOPWORDS_INDIAN",
    "model_name": "Hindi",
    "title": "Stopwords Remover for Hindi",
    "build": "3.4.2",
    "description": "This model removes stopwords from Hindi documents."
  },
  {
    "app": "STOPWORDS_MIDDLE_EASTERN",
    "model_name": "Turkish",
    "title": "Stopwords Remover for Turkish",
    "build": "3.4.1",
    "description": "This model removes stopwords from Turkish documents."
  },
  {
    "app": "STOPWORDS_MIDDLE_EASTERN",
    "model_name": "Hebrew",
    "title": "Stopwords Remover for Hebrew",
    "build": "3.4.1",
    "description": "This model removes stopwords from Hebrew documents."
  },
  {
    "app": "STOPWORDS_MIDDLE_EASTERN",
    "model_name": "Persian",
    "title": "Stopwords Remover for Persian",
    "build": "3.4.1",
    "description": "This model removes stopwords from Persian documents."
  },
  {
    "app": "STOPWORDS_MIDDLE_EASTERN",
    "model_name": "Arabic",
    "title": "Stopwords Remover for Arabic",
    "build": "3.4.1",
    "description": "This model removes stopwords from Arabic documents."
  },
  {
    "app": "STOPWORDS_MIDDLE_EASTERN",
    "model_name": "Urdu",
    "title": "Stopwords Remover for Urdu",
    "build": "3.4.1",
    "description": "This model removes stopwords from Urdu documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "Danish",
    "title": "Stopwords Remover for Danish",
    "build": "3.4.2",
    "description": "This model removes stopwords from Danish documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "French",
    "title": "Stopwords Remover for French",
    "build": "3.4.2",
    "description": "This model removes stopwords from French documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "German",
    "title": "Stopwords Remover for German",
    "build": "3.4.1",
    "description": "This model removes stopwords from German documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "Italian",
    "title": "Stopwords Remover for Italian",
    "build": "3.4.1",
    "description": "This model removes stopwords from Italian documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "Portuguese",
    "title": "Stopwords Remover for Portuguese",
    "build": "3.4.1",
    "description": "This model removes stopwords from Portuguese documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "Romanian",
    "title": "Stopwords Remover for Romanian",
    "build": "3.4.1",
    "description": "This model removes stopwords from Romanian documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "Spanish",
    "title": "Stopwords Remover for Spanish",
    "build": "3.4.1",
    "description": "This model removes stopwords from Spanish documents."
  },
  {
    "app": "STOPWORDS_EUROPEAN",
    "model_name": "Swedish",
    "title": "Stopwords Remover for Swedish",
    "build": "3.4.1",
    "description": "This model removes stopwords from Swedish documents."
  },
  {
    "app": "STOPWORDS_AFRICAN",
    "model_name": "Afrikaans",
    "title": "Stopwords Remover for Afrikaans",
    "build": "3.4.1",
    "description": "This model removes stopwords from Afrikaans documents."
  },
  {
    "app": "STOPWORDS_AFRICAN",
    "model_name": "Amharic",
    "title": "Stopwords Remover for Amharic",
    "build": "3.4.1",
    "description": "This model removes stopwords from Amharic documents."
  },
  {
    "app": "STOPWORDS_AFRICAN",
    "model_name": "Hausa",
    "title": "Stopwords Remover for Hausa",
    "build": "3.4.1",
    "description": "This model removes stopwords from Hausa documents."
  },
  {
    "app": "STOPWORDS_AFRICAN",
    "model_name": "Swahili",
    "title": "Stopwords Remover for Swahili",
    "build": "3.4.1",
    "description": "This model removes stopwords from Swahili documents."
  },
  {
    "app": "STOPWORDS_AFRICAN",
    "model_name": "Yoruba",
    "title": "Stopwords Remover for Yoruba",
    "build": "3.4.1",
    "description": "This model removes stopwords from Yoruba documents."
  },
  {
    "app": "SENTENCE_SIMILARITY",
    "model_name": "tfhub_use",
    "title": "Detect similar sentences",
    "build": "2.5.3",
    "description": "Automatically compute the similarity between two sentences using Spark NLP Universal Sentence Embeddings or T5 Transformer."
  },
  {
    "app": "SENTENCE_SIMILARITY",
    "model_name": "tfhub_use_lg",
    "title": "Detect similar sentences",
    "build": "2.5.3",
    "description": "Automatically compute the similarity between two sentences using Spark NLP Universal Sentence Embeddings or T5 Transformer."
  },
  {
    "app": "SENTENCE_SIMILARITY",
    "model_name": "t5_small",
    "title": "Detect similar sentences",
    "build": "2.7.0",
    "description": "Automatically compute the similarity between two sentences using Spark NLP Universal Sentence Embeddings or T5 Transformer."
  },
  {
    "app": "SENTENCE_SIMILARITY",
    "model_name": "t5_base",
    "title": "Detect similar sentences",
    "build": "2.7.0",
    "description": "Automatically compute the similarity between two sentences using Spark NLP Universal Sentence Embeddings or T5 Transformer."
  },
  {
    "app": "SENTENCE_COMPARISON",
    "model_name": "t5_base",
    "title": "Compare sentences",
    "build": "2.7.0",
    "description": "Decide if two sentences have the same meaning."
  },
  {
    "app": "SENTENCE_COMPARISON",
    "model_name": "t5_small",
    "title": "Compare sentences",
    "build": "2.7.0",
    "description": "Decide if two sentences have the same meaning."
  },
  {
    "app": "GRAMMAR_EN",
    "model_name": "dependency_typed_conllu",
    "title": "Grammar analysis & Dependency Parsing",
    "build": "2.5.0",
    "description": "Visualize the syntactic structure of a sentence as a directed labeled graph where nodes are labeled with the part of speech tags and arrows contain the dependency tags."
  },
  {
    "app": "SENTIMENT_EN_EMOTION",
    "model_name": "classifierdl_use_emotion",
    "title": "Detect emotions in tweets",
    "build": "2.5.0",
    "description": "Automatically identify Joy, Surprise, Fear, Sadness in Tweets using out pretrained Spark NLP DL classifier."
  },
  {
    "app": "SENTIMENT_EN_CYBERBULLYING",
    "model_name": "classifierdl_use_cyberbullying",
    "title": "Detect cyberbullying in tweets",
    "build": "2.5.0",
    "description": "Identify Racism, Sexism or Neutral tweets using our pretrained emotions detector."
  },
  {
    "app": "SENTIMENT_EN_TOXIC",
    "model_name": "classifierdl_bert_toxic",
    "title": "Detect toxic comments",
    "build": "2.5.0",
    "description": "Classify comments and tweets into Toxic, Insults, Hate, Obscene, Threat."
  },
  {
    "app": "SENTIMENT_EN_SARCASM",
    "model_name": "classifierdl_use_sarcasm",
    "title": "Detect sarcastic tweets",
    "build": "2.5.0",
    "description": "Checkout our sarcasm detection pretrained Spark NLP model. It is able to tell apart normal content from sarcastic content."
  },
  {
    "app": "SENTIMENT_UR",
    "model_name": "sentimentdl_urduvec_imdb",
    "title": "Analyze sentiment in Urdu movie reviews and tweets",
    "build": "2.7.1",
    "description": "Detect the general sentiment expressed in a movie review or tweet by using our pretrained Spark NLP sentiment analysis model."
  },
  {
    "app": "ABSA_RESTAURANT",
    "model_name": "ner_aspect_based_sentiment",
    "title": "Aspect based sentiment analysis for restaurants",
    "build": "2.6.0",
    "description": "Automatically detect positive, negative and neutral aspects about restaurants from the written feedback given by reviewers."
  },
  {
    "app": "CLASSIFICATION_EN_SPAM",
    "model_name": "classifierdl_use_spam",
    "title": "Detect Spam messages",
    "build": "2.5.0",
    "description": "Automatically identify messages as being regular messages or Spam."
  },
  {
    "app": "CLASSIFICATION_EN_FAKENEWS",
    "model_name": "classifierdl_use_fakenews",
    "title": "Detect fake news",
    "build": "2.5.0",
    "description": "Determine if news articles are Real or Fake."
  },
  {
    "app": "CLASSIFICATION_EN_NEWS",
    "model_name": "bert_sequence_classifier_age_news",
    "title": "Classify English News",
    "build": "3.4.1",
    "description": "This model classifies any English news into one of these categories: World, Sports, Business or Sci/Tech. It's been trained with SOTA approach."
  },
  {
    "app": "CLASSIFICATION_UR_FAKENEWS",
    "model_name": "classifierdl_urduvec_fakenews",
    "title": "Detect fake news in Urdu",
    "build": "3.3.1",
    "description": "Determine if news articles are Real or Fake."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_20",
    "title": "Detect language",
    "build": "2.5.2",
    "description": "Spark NLP Language Detector offers support for 20 different languages: Bulgarian, Czech, German, Greek, English, Spanish, Finnish, French, Croatian, Hungarian, Italy, Norwegian, Polish, Portuguese, Romanian, Russian, Slovak, Swedish, Turkish, and Ukrainian"
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_7",
    "title": "Detect language",
    "build": "2.5.2",
    "description": "Spark NLP Language Detector offers support for 7 different languages: Czech, German, English, Spanish, French, Italy, and Slovak"
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_tatoeba_bigru_21",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 21 different languages: Bulgarian, Czech, Danish, German, Greek, English, Estonian, Finnish, French, Hungarian, Italian, Lithuanian, Latvian, Dutch, Polish, Portuguese, Romanian, Slovak, Slovenian, Spanish, and Swedish."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_tatoeba_cnn_99",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 99 different languages: Afrikaans, Arabic, Algerian Arabic, Assamese, Kotava, Azerbaijani, Belarusian, Bengali, Berber, Breton, Bulgarian, Catalan, Chavacano, Cebuano, Czech, Chuvash, Mandarin Chinese, Cornish, Danish, German, Central Dusun, Modern Greek (1453-), English, Esperanto, Estonian, Basque, Finnish, French, Guadeloupean Creole French, Irish, Galician, Gronings, Guarani, Hebrew, Hindi, Croatian, Hungarian, Armenian, Ido, Interlingue, Ilocano, Interlingua, Indonesian, Icelandic, Italian, Lojban, Japanese, Kabyle, Georgian, Kazakh, Khasi, Khmer, Korean, Coastal Kadazan, Latin, Lingua Franca Nova, Lithuanian, Latvian, Literary Chinese, Marathi, Meadow Mari, Macedonian, Low German (Low Saxon), Dutch, Norwegian Nynorsk, Norwegian Bokmål, Occitan, Ottoman Turkish, Kapampangan, Picard, Persian, Polish, Portuguese, Romanian, Kirundi, Russian, Slovak, Spanish, Albanian, Serbian, Swedish, Swabian, Tatar, Tagalog, Thai, Klingon, Toki Pona, Turkmen, Turkish, Uyghur, Ukrainian, Urdu, Vietnamese, Volapük, Waray, Shanghainese, Yiddish, Cantonese, and Malay."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_cnn_231",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 231 different languages: Achinese, Afrikaans, Tosk Albanian, Amharic, Aragonese, Old English, Arabic, Egyptian Arabic, Assamese, Asturian, Avaric, Aymara, Azerbaijani, South Azerbaijani, Bashkir, Bavarian, bat-smg, Central Bikol, Belarusian, Bulgarian, bh, Banjar, Bengali, Tibetan, Bishnupriya, Breton, Bosnian, Russia Buriat, Catalan, cbk-zam, Min Dong Chinese, Chechen, Cebuano, Central Kurdish (Soranî), Corsican, Crimean Tatar, Czech, Kashubian, Chuvash, Welsh, Danish, German, Dimli (individual language), Lower Sorbian, dty, Dhivehi, Greek, eml, English, Esperanto, Spanish, Estonian, Extremaduran, Persian, Finnish, fiu-vro, Faroese, French, Arpitan, Friulian, Frisian, Irish, Gagauz, Scottish Gaelic, Galician, Gilaki, Guarani, Konkani (Goan), Gujarati, Manx, Hausa, Hakka Chinese, Hebrew, Hindi, Fiji Hindi, Croatian, Upper Sorbian, Haitian Creole, Hungarian, Armenian, Interlingua, Indonesian, Interlingue, Igbo, Ilocano, Ido, Icelandic, Italian, Japanese, Jamaican Patois, Lojban, Javanese, Georgian, Karakalpak, Kabyle, Kabardian, Kazakh, Khmer, Kannada, Korean, Komi-Permyak, Karachay-Balkar, Kölsch, Kurdish, Komi, Cornish, Kyrgyz, Latin, Ladino, Luxembourgish, Lezghian, Luganda, Limburgan, Ligurian, Lombard, Lingala, Lao, Northern Luri, Lithuanian, Latgalian, Latvian, Maithili, map-bms, Moksha, Malagasy, Meadow Mari, Maori, Minangkabau, Macedonian, Malayalam, Mongolian, Marathi, Hill Mari, Malay, Maltese, Mirandese, Burmese, Erzya, Mazanderani, Nahuatl, Neapolitan, Low German (Low Saxon), nds-nl, Nepali, Newari, Dutch, Norwegian Nynorsk, Norwegian, Narom, Pedi, Navajo, Occitan, Livvi, Oromo, Odia (Oriya), Ossetian, Punjabi (Eastern), Pangasinan, Kapampangan, Papiamento, Picard, Pennsylvania German, Palatine German, Polish, Punjabi (Western), Pashto, Portuguese, Quechua, Romansh, Romanian, roa-rup, roa-tara, Russian, Rusyn, Kinyarwanda, Sanskrit, Yakut, Sardinian, Sicilian, Sindhi, Northern Sami, Serbo-Croatian, Sinhala, Slovak, Slovenian, Shona, Somali, Albanian, Serbian, Sranan Tongo, Saterland Frisian, Sundanese, Swedish, Swahili, Silesian, Tamil, Tulu, Telugu, Tetun, Tajik, Thai, Turkmen, Tagalog, Setswana, Tongan, Turkish, Tatar, Tuvinian, Udmurt, Uyghur, Ukrainian, Urdu, Uzbek, Venetian, Veps, Vietnamese, Vlaams, Volapük, Walloon, Waray, Wolof, Shanghainese, Xhosa, Mingrelian, Yiddish, Yoruba, Zeeuws, Chinese, zh-classical, zh-min-nan, and zh-yue."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_tatoeba_cnn_21",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 21 different languages: Bulgarian, Czech, Danish, German, Greek, English, Estonian, Finnish, French, Hungarian, Italian, Lithuanian, Latvian, Dutch, Polish, Portuguese, Romanian, Slovak, Slovenian, Spanish, and Swedish."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_tatoeba_cnn_220",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 220 different languages: Achinese, Afrikaans, Tosk Albanian, Amharic, Aragonese, Old English, Arabic, Egyptian Arabic, Assamese, Asturian, Avaric, Aymara, Azerbaijani, South Azerbaijani, Bashkir, Bavarian, bat-smg, Central Bikol, Belarusian, Bulgarian, bh, Bengali, Tibetan, Bishnupriya, Breton, Russia Buriat, Catalan, Min Dong Chinese, Chechen, Cebuano, Central Kurdish (Soranî), Corsican, Crimean Tatar, Czech, Kashubian, Chuvash, Welsh, Danish, German, Dimli (individual language), Lower Sorbian, Dhivehi, Greek, eml, English, Esperanto, Spanish, Estonian, Basque, Extremaduran, Persian, Finnish, fiu-vro, Faroese, French, Arpitan, Friulian, Frisian, Irish, Gagauz, Scottish Gaelic, Galician, Guarani, Konkani (Goan), Gujarati, Manx, Hausa, Hakka Chinese, Hebrew, Hindi, Fiji Hindi, Upper Sorbian, Haitian Creole, Hungarian, Armenian, Interlingua, Indonesian, Interlingue, Igbo, Ilocano, Ido, Icelandic, Italian, Japanese, Jamaican Patois, Lojban, Javanese, Georgian, Karakalpak, Kabyle, Kabardian, Kazakh, Khmer, Kannada, Korean, Komi-Permyak, Karachay-Balkar, Kölsch, Kurdish, Komi, Cornish, Kyrgyz, Latin, Ladino, Luxembourgish, Lezghian, Luganda, Limburgan, Ligurian, Lombard, Lingala, Lao, Northern Luri, Lithuanian, Latvian, Maithili, map-bms, Malagasy, Meadow Mari, Maori, Minangkabau, Macedonian, Malayalam, Mongolian, Marathi, Hill Mari, Maltese, Mirandese, Burmese, Erzya, Mazanderani, Nahuatl, Neapolitan, Low German (Low Saxon), nds-nl, Nepali, Newari, Dutch, Norwegian Nynorsk, Norwegian, Narom, Pedi, Navajo, Occitan, Livvi, Oromo, Odia (Oriya), Ossetian, Punjabi (Eastern), Pangasinan, Kapampangan, Papiamento, Picard, Palatine German, Polish, Punjabi (Western), Pashto, Portuguese, Quechua, Romansh, Romanian, roa-tara, Russian, Rusyn, Kinyarwanda, Sanskrit, Yakut, Sardinian, Sicilian, Scots, Sindhi, Northern Sami, Sinhala, Slovak, Slovenian, Shona, Somali, Albanian, Serbian, Saterland Frisian, Sundanese, Swedish, Swahili, Silesian, Tamil, Tulu, Telugu, Tetun, Tajik, Thai, Turkmen, Tagalog, Setswana, Tongan, Turkish, Tatar, Tuvinian, Udmurt, Uyghur, Ukrainian, Urdu, Uzbek, Venetian, Veps, Vietnamese, Vlaams, Volapük, Walloon, Waray, Wolof, Shanghainese, Xhosa, Mingrelian, Yiddish, Yoruba, Zeeuws, Chinese, zh-classical, zh-min-nan, and zh-yue."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_tatoeba_cnn_375",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 375 different languages: Abkhaz, Iraqi Arabic, Adyghe, Afrikaans, Gulf Arabic, Afrihili, Assyrian Neo-Aramaic, Ainu, Aklanon, Gheg Albanian, Amharic, Aragonese, Old English, Uab Meto, North Levantine Arabic, Arabic, Algerian Arabic, Moroccan Arabic, Egyptian Arabic, Assamese, Asturian, Kotava, Awadhi, Aymara, Azerbaijani, Bashkir, Baluchi, Balinese, Bavarian, Central Bikol, Belarusian, Berber, Bulgarian, Bhojpuri, Bislama, Banjar, Bambara, Bengali, Tibetan, Breton, Bodo, Bosnian, Buryat, Baybayanon, Brithenig, Catalan, Cayuga, Chavacano, Chechen, Cebuano, Chamorro, Chagatai, Chinook Jargon, Choctaw, Cherokee, Jin Chinese, Chukchi, Central Mnong, Corsican, Chinese Pidgin English, Crimean Tatar, Seychellois Creole, Czech, Kashubian, Chuvash, Welsh, CycL, Cuyonon, Danish, German, Dungan, Drents, Lower Sorbian, Central Dusun, Dhivehi, Dutton World Speedwords, Ewe, Emilian, Greek, Erromintxela, English, Middle English, Esperanto, Spanish, Estonian, Basque, Evenki, Extremaduran, Persian, Finnish, Fijian, Kven Finnish, Faroese, French, Middle French, Old French, North Frisian, Pulaar, Friulian, Nigerian Fulfulde, Frisian, Irish, Ga, Gagauz, Gan Chinese, Garhwali, Guadeloupean Creole French, Scottish Gaelic, Gilbertese, Galician, Guarani, Konkani (Goan), Gronings, Gothic, Ancient Greek, Swiss German, Gujarati, Manx, Hausa, Hakka Chinese, Hawaiian, Ancient Hebrew, Hebrew, Hindi, Fiji Hindi, Hiligaynon, Hmong Njua (Green), Ho, Croatian, Hunsrik, Upper Sorbian, Xiang Chinese, Haitian Creole, Hungarian, Armenian, Interlingua, Iban, Indonesian, Interlingue, Igbo, Nuosu, Inuktitut, Ilocano, Ido, Icelandic, Italian, Ingrian, Japanese, Jamaican Patois, Lojban, Juhuri (Judeo-Tat), Jewish Palestinian Aramaic, Javanese, Georgian, Karakalpak, Kabyle, Kamba, Kekchi (Q'eqchi'), Khasi, Khakas, Kazakh, Greenlandic, Khmer, Kannada, Korean, Komi-Permyak, Komi-Zyrian, Karachay-Balkar, Karelian, Kashmiri, Kölsch, Kurdish, Kumyk, Cornish, Keningau Murut, Kyrgyz, Coastal Kadazan, Latin, Southern Subanen, Ladino, Luxembourgish, Láadan, Lingua Franca Nova, Luganda, Ligurian, Livonian, Lakota, Ladin, Lombard, Lingala, Lao, Louisiana Creole, Lithuanian, Latgalian, Latvian, Latvian, Literary Chinese, Laz, Madurese, Maithili, North Moluccan Malay, Moksha, Morisyen, Malagasy, Mambae, Marshallese, Meadow Mari, Maori, Mi'kmaq, Minangkabau, Macedonian, Malayalam, Mongolian, Manchu, Mon, Mohawk, Marathi, Hill Mari, Malay, Maltese, Tagal Murut, Mirandese, Hmong Daw (White), Burmese, Erzya, Nauruan, Nahuatl, Norwegian Bokmål, Central Huasteca Nahuatl, Low German (Low Saxon), Nepali, Newari, Ngeq, Guerrero Nahuatl, Niuean, Dutch, Orizaba Nahuatl, Norwegian Nynorsk, Norwegian, Nogai, Old Norse, Novial, Nepali, Naga (Tangshang), Navajo, Chinyanja, Nyungar, Old Aramaic, Occitan, Ojibwe, Odia (Oriya), Old East Slavic, Ossetian, Old Spanish, Old Saxon, Ottoman Turkish, Old Turkish, Punjabi (Eastern), Pangasinan, Kapampangan, Papiamento, Palauan, Picard, Pennsylvania German, Palatine German, Phoenician, Pali, Polish, Piedmontese, Punjabi (Western), Pipil, Old Prussian, Pashto, Portuguese, Quechua, K'iche', Quenya, Rapa Nui, Rendille, Tarifit, Romansh, Kirundi, Romanian, Romani, Russian, Rusyn, Kinyarwanda, Okinawan, Sanskrit, Yakut, Sardinian, Sicilian, Scots, Sindhi, Northern Sami, Sango, Samogitian, Shuswap, Tachawit, Sinhala, Sindarin, Slovak, Slovenian, Samoan, Southern Sami, Shona, Somali, Albanian, Serbian, Swazi, Southern Sotho, Saterland Frisian, Sundanese, Sumerian, Swedish, Swahili, Swabian, Swahili, Syriac, Tamil, Telugu, Tetun, Tajik, Thai, Tahaggart Tamahaq, Tigrinya, Tigre, Turkmen, Tokelauan, Tagalog, Klingon, Talysh, Jewish Babylonian Aramaic, Temuan, Setswana, Tongan, Tonga (Zambezi), Toki Pona, Tok Pisin, Old Tupi, Turkish, Tsonga, Tatar, Isan, Tuvaluan, Tahitian, Tuvinian, Talossan, Udmurt, Uyghur, Ukrainian, Umbundu, Urdu, Urhobo, Uzbek, Venetian, Veps, Vietnamese, Volapük, Võro, Walloon, Waray, Wolof, Shanghainese, Kalmyk, Xhosa, Mingrelian, Yiddish, Yoruba, Cantonese, Chinese, Malay (Vernacular), Malay, Zulu, and Zaza."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_tatoeba_cnn_43",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 43 different languages: Arabic, Belarusian, Bulgarian, Czech, Danish, German, Greek, English, Esperanto, Spanish, Estonian, Persian, Finnish, French, Hebrew, Hindi, Hungarian, Interlingua, Indonesian, Icelandic, Italian, Japanese, Korean, Latin, Lithuanian, Latvian, Macedonian, Marathi, Dutch, Polish, Portuguese, Romanian, Russian, Slovak, Slovenian, Serbian, Swedish, Tagalog, Turkish, Tatar, Ukrainian, Vietnamese, and Chinese."
  },
  {
    "app": "LANGUAGE_DETECTOR",
    "model_name": "ld_wiki_tatoeba_cnn_95",
    "title": "Detect language",
    "build": "2.7.0",
    "description": "Spark NLP Language Detector offers support for 95 different languages: Afrikaans, Amharic, Aragonese, Arabic, Assamese, Azerbaijani, Belarusian, Bulgarian, Bengali, Breton, Bosnian, Catalan, Czech, Welsh, Danish, German, Greek, English, Esperanto, Spanish, Estonian, Basque, Persian, Finnish, Faroese, French, Irish, Galician, Gujarati, Hebrew, Hindi, Croatian, Haitian Creole, Hungarian, Armenian, Interlingua, Indonesian, Icelandic, Italian, Japanese, Javanese, Georgian, Kazakh, Khmer, Kannada, Korean, Kurdish, Kyrgyz, Latin, Luxembourgish, Lao, Lithuanian, Latvian, Malagasy, Macedonian, Malayalam, Mongolian, Marathi, Malay, Maltese, Nepali, Dutch, Norwegian Nynorsk, Norwegian, Occitan, Odia (Oriya), Punjabi (Eastern), Polish, Pashto, Portuguese, Quechua, Romanian, Russian, Northern Sami, Sinhala, Slovak, Slovenian, Albanian, Serbian, Swedish, Swahili, Tamil, Telugu, Thai, Tagalog, Turkish, Tatar, Uyghur, Ukrainian, Urdu, Vietnamese, Volapük, Walloon, Xhosa, and Chinese."
  },
  {
    "app": "SENTENCE_DETECTOR",
    "model_name": "sentence_detector_dl",
    "title": "Detect sentences in text",
    "build": "2.6.2",
    "description": "Detect sentences from general purpose text documents using a deep learning model capable of understanding noisy sentence structures."
  },
  {
    "app": "KEYPHRASE_EXTRACTION",
    "model_name": "yake_model",
    "title": "Detect Key Phrases",
    "build": "2.5.4rc3",
    "description": "Automatically detect key phrases in your text documents using out-of-the-box Spark NLP models."
  },
  {
    "app": "DATE_MATCHER",
    "model_name": "date_matcher",
    "title": "Detect and normalize dates",
    "build": "2.5.4rc3",
    "description": "Automatically detect phrases expressing dates and normalize them with respect to a reference date."
  },
  {
    "app": "GRAPH_RE",
    "model_name": "graph_re",
    "title": "Extract Graph Entities and Relationships from Free Text",
    "build": "3.3.0",
    "description": "Extract Graphs from a given text and display them in a tabular format. For detailed information about relation_types, please visit: <a href='https://universaldependencies.org/en/dep/'>https://universaldependencies.org/en/dep/</a>"
  },
  {
    "app": "T5TRANSFORMER",
    "model_name": "t5_small",
    "title": "Performs 18 different NLP tasks",
    "build": "2.7.1",
    "description": "Automatically perform text summarization, question answering, detect grammatically correct sentences and 15 other NLP tasks using the pretrained T5 Transformer model."
  },
  {
    "app": "T5TRANSFORMER",
    "model_name": "t5_base",
    "title": "Performs 18 different NLP tasks",
    "build": "2.7.1",
    "description": "Automatically perform text summarization, question answering, detect grammatically correct sentences and 15 other NLP tasks using the pretrained T5 Transformer model."
  },
  {
    "app": "T5TRANSFORMER",
    "model_name": "google_t5_small_ssm_nq",
    "title": "Natural Questions Answering",
    "build": "2.7.1",
    "description": "The model was pre-trained using T5’s denoising objective on <a href=https://huggingface.co/datasets/c4>C4</a>, subsequently additionally pre-trained using REALM’s salient span masking objective on Wikipedia, and finally fine-tuned on <a href=https://huggingface.co/datasets/natural_questions>Natural Questions (NQ)</a>"
  },
  {
    "app": "T5_LINGUISTIC",
    "model_name": "t5_grammar_error_corrector",
    "title": "T5 for grammar error correction",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to correct grammatical errors in texts."
  },
  {
    "app": "T5_LINGUISTIC",
    "model_name": "t5_informal_to_formal_styletransfer",
    "title": "T5 for Informal to Formal Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate formal sentence from informal style texts."
  },
  {
    "app": "T5_LINGUISTIC",
    "model_name": "t5_passive_to_active_styletransfer",
    "title": "T5 for Passive to Active Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate active sentence from passively written texts."
  },
  {
    "app": "T5_LINGUISTIC",
    "model_name": "t5_active_to_passive_styletransfer",
    "title": "T5 for Active to Passive Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate passive sentence from actively written texts."
  },
  {
    "app": "T5_LINGUISTIC",
    "model_name": "t5_formal_to_informal_styletransfer",
    "title": "T5 for Formal to Informal Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate informal sentence from formal style texts."
  },
  {
    "app": "T5_SQL",
    "model_name": "t5_small_wikiSQL",
    "title": "T5 for SQL Query generation",
    "build": "3.4.0",
    "description": "This is text-to-sql T5 model which is fine-tuned to generate SQL code from natural language input."
  },
  {
    "app": "T5_ACTIVE_PASSIVE",
    "model_name": "t5_active_to_passive_styletransfer",
    "title": "T5 for Active to Passive Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate passive sentence from actively written texts."
  },
  {
    "app": "T5_ACTIVE_PASSIVE",
    "model_name": "t5_passive_to_active_styletransfer",
    "title": "T5 for Passive to Active Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate active sentence from passively written texts."
  },
  {
    "app": "T5_FORMAL_INFORMAL",
    "model_name": "t5_informal_to_formal_styletransfer",
    "title": "T5 for Informal to Formal Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate formal sentence from informal style texts."
  },
  {
    "app": "T5_FORMAL_INFORMAL",
    "model_name": "t5_formal_to_informal_styletransfer",
    "title": "T5 for Formal to Informal Style Transfer",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to generate informal sentence from formal style texts."
  },
  {
    "app": "T5_GRAMMAR",
    "model_name": "t5_grammar_error_corrector",
    "title": "T5 for grammar error correction",
    "build": "3.4.0",
    "description": "This is text-to-text T5 model which is fine-tuned to correct grammatical errors in texts."
  },
  {
    "app": "GPT2_TRANSFORMER",
    "model_name": "gpt2",
    "title": "GPT2 text-to-text Transformer",
    "build": "3.4.0",
    "description": "GPT-2 generates text in accordance with input context."
  },
  {
    "app": "GPT2_TRANSFORMER",
    "model_name": "gpt_large",
    "title": "GPT2 text-to-text Transformer",
    "build": "3.4.0",
    "description": "GPT-2 generates text in accordance with input context. This is a large version which has too many parameters and requires much more computational resources to run than default GPT2."
  },
  {
    "app": "GPT2_TRANSFORMER",
    "model_name": "gpt2_medium",
    "title": "GPT2 text-to-text Transformer",
    "build": "3.4.0",
    "description": "GPT-2 generates text in accordance with input context. This is a medium version which has many parameters and requires more computational resources to run than default GPT2."
  },
  {
    "app": "GPT2_TRANSFORMER",
    "model_name": "gpt2_distilled",
    "title": "GPT2 text-to-text Transformer",
    "build": "3.4.0",
    "description": "GPT-2 generates text in accordance with input context. This is a distilled version which has fewer parameters and requires less computational resources to run."
  },
  {
    "app": "MEDICAL_TEXT_SUMMARIZATION",
    "model_name": "t5_base_pubmedqa",
    "title": "Clinical Summarization/QA",
    "build": "4.2.2",
    "description": "This model is specifically trained on medical data for text summarization and question answering."
  },
  {
    "app": "MEDICAL_QUESTION_ANSWERING",
    "model_name": "roberta_qa_nlpunibo_roberta",
    "title": "Medical Question Answering",
    "build": "4.2.3",
    "description": "Automatically generate answers to questions with context in clinical documents"
  },
  {
    "app": "MEDICAL_QUESTION_ANSWERING",
    "model_name": "distilbert_qa_transformers_qa",
    "title": "Medical Question Answering",
    "build": "4.2.3",
    "description": "Automatically generate answers to questions with context in clinical documents"
  },
  {
    "app": "MEDICAL_QUESTION_ANSWERING",
    "model_name": "bert_qa_spanbert_recruit_qa",
    "title": "Medical Question Answering",
    "build": "4.2.3",
    "description": "Automatically generate answers to questions with context in clinical documents"
  },
  {
    "app": "BIOGPT_MEDICAL_QUESTION_ANSWERING",
    "model_name": "medical_qa_biogpt",
    "title": "Medical Question Answering (BioGPT)",
    "build": "4.3.1",
    "description": "Automatically generate answers to questions with context in clinical documents. Types of questions are supported: 'short' (producing yes/no/maybe) answers and 'long' (long answers)."
  },
  {
    "app": "QUESTION_ANSWERING",
    "model_name": "google_t5_small_ssm_nq",
    "title": "Automatically Answer Questions",
    "build": "2.7.1",
    "description": "Automatically generate answers to questions with & without context"
  },
  {
    "app": "QUESTION_ANSWERING",
    "model_name": "t5_small",
    "title": "Automatically Answer Questions",
    "build": "2.7.1",
    "description": "Automatically generate answers to questions with & without context."
  },
  {
    "app": "QUESTION_ANSWERING",
    "model_name": "t5_base",
    "title": "Automatically Answer Questions",
    "build": "2.7.1",
    "description": "Automatically generate answers to questions with & without context."
  },
  {
    "app": "QUESTION_ANSWERING",
    "model_name": "bert_qa_callmenicky_finetuned_squad",
    "title": "Automatically Answer Questions",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with & without context."
  },
  {
    "app": "QUESTION_ANSWERING",
    "model_name": "albert_qa_xxlarge_tweetqa",
    "title": "Automatically Answer Questions",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with & without context."
  },
  {
    "app": "QUESTION_ANSWERING",
    "model_name": "roberta_qa_CV_Merge_DS",
    "title": "Automatically Answer Questions",
    "build": "4.0.0",
    "description": "Automatically generate answers to questions with & without context."
  },
  {
    "app": "QUESTION_ANSWERING_CLOSED_BOOK",
    "model_name": "google_t5_small_ssm_nq",
    "title": "Automatically Answer Questions (Closed Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions without context"
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "t5_small",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "t5_base",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "albert_qa_xxlarge_tweetqa",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "bert_qa_callmenicky_finetuned_squad",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "deberta_v3_xsmall_qa_squad2",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "distilbert_base_cased_qa_squad2",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "longformer_qa_large_4096_finetuned_triviaqa",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "roberta_qa_roberta_base_squad2_covid",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "roberta_qa_CV_Merge_DS",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "QUESTION_ANSWERING_OPEN_BOOK",
    "model_name": "xlm_roberta_base_qa_squad2",
    "title": "Automatically Answer Questions (Open Book)",
    "build": "4.0.2",
    "description": "Automatically generate answers to questions with context."
  },
  {
    "app": "COREFERENCE_RESOLUTION",
    "model_name": "spanbert_base_coref",
    "title": "Coreference Resolution",
    "build": "4.1.0",
    "description": "This  coreference resolution  model uses to identifies expressions which refer to the same entity in a text."
  },
  {
    "app": "CONTEXTUAL_WORD_MEANING",
    "model_name": "t5_small",
    "title": "Infer Word Meaning from Context",
    "build": "2.7.1",
    "description": "Compare the meaning of words in two different sentences."
  },
  {
    "app": "CONTEXTUAL_WORD_MEANING",
    "model_name": "t5_base",
    "title": "Infer Word Meaning from Context",
    "build": "2.7.1",
    "description": "Compare the meaning of words in two different sentences."
  },
  {
    "app": "TEXT_SUMMARIZATION",
    "model_name": "t5_small",
    "title": "Summarize Text",
    "build": "2.7.1",
    "description": "Summarize text to make it shorter while retaining meaning."
  },
  {
    "app": "TEXT_SUMMARIZATION",
    "model_name": "t5_base",
    "title": "Summarize Text",
    "build": "2.7.1",
    "description": "Summarize text to make it shorter while retaining meaning."
  },
  {
    "app": "TEXT_SUMMARIZATION_WITH_BART",
    "model_name": "distilbart_xsum_12_6",
    "title": "Summarize Text",
    "build": "5.2.2",
    "description": "Summarize text to make it shorter while retaining meaning."
  },
  {
    "app": "MEDICAL_TEXT_SUMMARIZATION",
    "model_name": "t5_base_pubmedqa",
    "title": "Clinical Summarization/QA",
    "build": "4.2.2",
    "description": "This model is specifically trained on medical data for text summarization and question answering."
  },
  {
    "app": "TEXT_GENERATION_WITH_OPENAICOMPLETION",
    "model_name": "gpt-3.5-turbo-instruct",
    "title": "Text Generation with OpenAICompletion",
    "build": "5.1.0",
    "description": "OpenAI's text generation models (often called generative pre-trained transformers or large language models) have been trained to understand natural language, code, and images. The models provide text outputs in response to their inputs."
  },
  {
    "app": "TEXT_GENERATION_T5",
    "model_name": "t5_question_generation_small",
    "title": "Question Generation with T5",
    "build": "3.1.2",
    "description": "This model is a question generator which takes an answer and context as an input, and generates a question as an output."
  },
  {
    "app": "SENTENCE_GRAMMAR",
    "model_name": "t5_small",
    "title": "Evaluate Sentence Grammar",
    "build": "2.7.1",
    "description": "Classify a sentence as grammatically correct or incorrect."
  },
  {
    "app": "SENTENCE_GRAMMAR",
    "model_name": "t5_base",
    "title": "Evaluate Sentence Grammar",
    "build": "2.7.1",
    "description": "Classify a sentence as grammatically correct or incorrect."
  },
  {
    "app": "SENTENCE_RELATIONS",
    "model_name": "t5_small",
    "title": "Assess Relationship Between Two Sentences",
    "build": "2.7.1",
    "description": "Evaluate the relationship between two sentences or text fragments to identify things such as contradictions, entailments and premises & hypotheses."
  },
  {
    "app": "SENTENCE_RELATIONS",
    "model_name": "t5_base",
    "title": "Assess Relationship Between Two Sentences",
    "build": "2.7.1",
    "description": "Evaluate the relationship between two sentences or text fragments to identify things such as contradictions, entailments and premises & hypotheses."
  },
  {
    "app": "NER_IT",
    "model_name": "wikiner_840B_300",
    "title": "Identificare entità generali nel testo italiano",
    "build": "2.4.0",
    "description": "Riconoscere persone, luoghi, organizzazioni e varie entità utilizzando un modello di apprendimento profondo preconfigurato predefinito e incorporamenti di parole GloVe (glove_300d)."
  },
  {
    "app": "NER_DE",
    "model_name": "wikiner_840B_300",
    "title": "Erkennen Sie Personen, Standorte, Organisationen und verschiedene Entitäten",
    "build": "2.4.0",
    "description": "Von NerDLApproach Annotator mit Char CNNs - BiLSTM - CRF- und GloVe-Einbettungen im WikiNER-Korpus geschult und unterstützt die Identifizierung von PER-, LOC-, ORG- und MISC-Entitäten"
  },
  {
    "app": "NER_FR",
    "model_name": "wikiner_840B_300",
    "title": "Reconnaître les personnes, lieux, organisations et entités diverses",
    "build": "2.0.2",
    "description": "Formé par NerDLApproach Annotator avec Char CNNs - BiLSTM - CRF et GloVe Embeddings dans le corpus WikiNER et prend en charge l'identification des entités PER, LOC, ORG et MISC"
  },
  {
    "app": "NER_ES",
    "model_name": "wikiner_840B_300",
    "title": "Reconocer personas, ubicaciones, organizaciones y entidades misceláneas",
    "build": "2.4.0",
    "description": "Entrenado por NerDLApproach annotator con Char CNNs - BiLSTM - CRF y GloVe Embeddings en el corpus WikiNER y admite la identificación de entidades PER, LOC, ORG y MISC"
  },
  {
    "app": "NER_ES",
    "model_name": "wikiner_6B_300",
    "title": "Reconocer personas, ubicaciones, organizaciones y entidades misceláneas",
    "build": "2.4.0",
    "description": "Entrenado por NerDLApproach annotator con Char CNNs - BiLSTM - CRF y GloVe Embeddings en el corpus WikiNER y admite la identificación de entidades PER, LOC, ORG y MISC"
  },
  {
    "app": "NER_ES",
    "model_name": "wikiner_6B_100",
    "title": "Reconocer personas, ubicaciones, organizaciones y entidades misceláneas",
    "build": "2.4.0",
    "description": "Entrenado por NerDLApproach annotator con Char CNNs - BiLSTM - CRF y GloVe Embeddings en el corpus WikiNER y admite la identificación de entidades PER, LOC, ORG y MISC"
  },
  {
    "app": "NER_NO",
    "model_name": "norne_840B_300",
    "title": "Gjenkjenne personer, steder, organisasjoner og andre enheter",
    "build": "2.5.0",
    "description": "Trent av NerDLApproach-annotator med Char CNNs - BiLSTM - CRF og GloVe Embeddings på WikiNER-korpuset og støtter identifisering av PER-, LOC-, ORG- og MISC-enheter"
  },
  {
    "app": "NER_NO",
    "model_name": "norne_6B_300",
    "title": "Gjenkjenne personer, steder, organisasjoner og andre enheter",
    "build": "2.5.0",
    "description": "Trent av NerDLApproach-annotator med Char CNNs - BiLSTM - CRF og GloVe Embeddings på WikiNER-korpuset og støtter identifisering av PER-, LOC-, ORG- og MISC-enheter"
  },
  {
    "app": "NER_NO",
    "model_name": "norne_6B_100",
    "title": "Gjenkjenne personer, steder, organisasjoner og andre enheter",
    "build": "2.5.0",
    "description": "Trent av NerDLApproach-annotator med Char CNNs - BiLSTM - CRF og GloVe Embeddings på WikiNER-korpuset og støtter identifisering av PER-, LOC-, ORG- og MISC-enheter"
  },
  {
    "app": "NER_PT",
    "model_name": "wikiner_6B_100",
    "title": "Reconhecer pessoas, lugares, organizações e outras entidades",
    "build": "2.5.0",
    "description": "Modelo treinado usando no conjunto de dados WikiNER com suporte a identificação das seguintes entidades: PER, LOC, ORG, MISC"
  },
  {
    "app": "NER_PT",
    "model_name": "wikiner_6B_300",
    "title": "Reconhecer pessoas, lugares, organizações e outras entidades",
    "build": "2.5.0",
    "description": "Modelo treinado usando no conjunto de dados WikiNER com suporte a identificação das seguintes entidades: PER, LOC, ORG, MISC"
  },
  {
    "app": "NER_PT",
    "model_name": "wikiner_840B_300",
    "title": "Reconhecer pessoas, lugares, organizações e outras entidades",
    "build": "2.5.0",
    "description": "Modelo treinado usando no conjunto de dados WikiNER com suporte a identificação das seguintes entidades: PER, LOC, ORG, MISC"
  },
  {
    "app": "NER_LENER",
    "model_name": "ner_lener",
    "title": "Named Entity Recognition for (Brazilian) Portuguese Legal Texts",
    "build": "2.7.3",
    "description": "Modelo de reconhecimento de Entidades legais, Jurisprudência, Pessoas, Localidades e Tempo em textos jurídicos em Português brasileiro usando um modelo previamente treinado no Spark NLP usando Bert embeddings."
  },
  {
    "app": "NER_LENER",
    "model_name": "lener_bert_base",
    "title": "Named Entity Recognition for (Brazilian) Portuguese Legal Texts",
    "build": "2.7.3",
    "description": "Modelo de reconhecimento de Entidades legais, Jurisprudência, Pessoas, Localidades e Tempo em textos jurídicos em Português brasileiro usando um modelo previamente treinado no Spark NLP usando Bert embeddings."
  },
  {
    "app": "NER_LENER",
    "model_name": "lener_bert_large",
    "title": "Named Entity Recognition for (Brazilian) Portuguese Legal Texts",
    "build": "2.7.3",
    "description": "Modelo de reconhecimento de Entidades legais, Jurisprudência, Pessoas, Localidades e Tempo em textos jurídicos em Português brasileiro usando um modelo previamente treinado no Spark NLP usando Bert embeddings."
  },
  {
    "app": "NER_PL",
    "model_name": "wikiner_6B_100",
    "title": "Rozpoznawanie osób, lokalizacji, organizacji i różnych podmiotów",
    "build": "2.5.0",
    "description": "Przeszkolony przez adnotatora NerDLApproach z Char CNN - BiLSTM - CRF i GloVe Embeddings w korpusie WikiNER i obsługuje identyfikację jednostek PER, LOC, ORG i MISC"
  },
  {
    "app": "NER_PL",
    "model_name": "wikiner_6B_300",
    "title": "Rozpoznawanie osób, lokalizacji, organizacji i różnych podmiotów",
    "build": "2.5.0",
    "description": "Przeszkolony przez adnotatora NerDLApproach z Char CNN - BiLSTM - CRF i GloVe Embeddings w korpusie WikiNER i obsługuje identyfikację jednostek PER, LOC, ORG i MISC"
  },
  {
    "app": "NER_PL",
    "model_name": "wikiner_840B_300",
    "title": "Rozpoznawanie osób, lokalizacji, organizacji i różnych podmiotów",
    "build": "2.5.0",
    "description": "Przeszkolony przez adnotatora NerDLApproach z Char CNN - BiLSTM - CRF i GloVe Embeddings w korpusie WikiNER i obsługuje identyfikację jednostek PER, LOC, ORG i MISC"
  },
  {
    "app": "NER_RU",
    "model_name": "wikiner_6B_100",
    "title": "Распознавать лиц, местоположения, организации и прочие объекты",
    "build": "2.5.0",
    "description": "Обучен в аннотаторе NerDLApproach с встраиваемыми символами CNN - BiLSTM - CRF и GloVe в корпус WikiNER и поддерживает идентификацию объектов PER, LOC, ORG и MISC"
  },
  {
    "app": "NER_RU",
    "model_name": "wikiner_6B_300",
    "title": "Распознавать лиц, местоположения, организации и прочие объекты",
    "build": "2.5.0",
    "description": "Обучен в аннотаторе NerDLApproach с встраиваемыми символами CNN - BiLSTM - CRF и GloVe в корпус WikiNER и поддерживает идентификацию объектов PER, LOC, ORG и MISC"
  },
  {
    "app": "NER_RU",
    "model_name": "wikiner_840B_300",
    "title": "Распознавать лиц, местоположения, организации и прочие объекты",
    "build": "2.5.0",
    "description": "Обучен в аннотаторе NerDLApproach с встраиваемыми символами CNN - BiLSTM - CRF и GloVe в корпус WikiNER и поддерживает идентификацию объектов PER, LOC, ORG и MISC"
  },
  {
    "app": "NER_DA",
    "model_name": "dane_ner_6B_100",
    "title": "Recognize entities in Danish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_100d)"
  },
  {
    "app": "NER_DA",
    "model_name": "dane_ner_6B_300",
    "title": "Recognize entities in Danish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_300d)"
  },
  {
    "app": "NER_DA",
    "model_name": "dane_ner_840B_300",
    "title": "Recognize entities in Danish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_840b_300d)"
  },
  {
    "app": "NER_SV",
    "model_name": "swedish_ner_6B_100",
    "title": "Recognize entities in Swedish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_100d)"
  },
  {
    "app": "NER_SV",
    "model_name": "swedish_ner_6B_300",
    "title": "Recognize entities in Swedish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_300d)"
  },
  {
    "app": "NER_SV",
    "model_name": "swedish_ner_840B_300",
    "title": "Recognize entities in Swedish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_840b_300d)"
  },
  {
    "app": "NER_FI",
    "model_name": "finnish_ner_6B_100",
    "title": "Recognize entities in Finnish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_100d)"
  },
  {
    "app": "NER_FI",
    "model_name": "finnish_ner_6B_300",
    "title": "Recognize entities in Finnish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_300d)"
  },
  {
    "app": "NER_FI",
    "model_name": "finnish_ner_840B_300",
    "title": "Recognize entities in Finnish text",
    "build": "2.5.0",
    "description": "Recognize Persons, Locations, Organizations and Misc entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_840b_300d)"
  },
  {
    "app": "NER_TR",
    "model_name": "turkish_ner_bert",
    "title": "Recognize entities in Turkish text",
    "build": "2.6.3",
    "description": "Recognize Persons, Locations and Organization entities using an out of the box pretrained Deep Learning model and multi-lingual Bert word embeddings (bert_multi_cased)"
  },
  {
    "app": "NER_TR",
    "model_name": "turkish_ner_840B_300",
    "title": "Recognize entities in Turkish text",
    "build": "2.6.3",
    "description": "Recognize Persons, Locations an Organization entities using an out of the box pretrained Deep Learning model and GloVe word embeddings (glove_840b_300d)"
  },
  {
    "app": "NER_BN",
    "model_name": "bengaliner_cc_300d",
    "title": "Recognize entities in Bengali text",
    "build": "2.7.3",
    "description": "Recognize Persons, Locations, Organization, and Time entities in Bengali text using Deep Learning Model"
  },
  {
    "app": "NER_AR",
    "model_name": "aner_cc_300d",
    "title": "Recognize entities in Arabic text",
    "build": "2.6.3",
    "description": "Recognize Persons, Locations an Organization entities using an out of the box pretrained Deep Learning model."
  },
  {
    "app": "NER_FA",
    "model_name": "personer_cc_300d",
    "title": "Recognize entities in Persian text",
    "build": "2.6.3",
    "description": "Recognize Persons, Locations an Organization entities using an out of the box pretrained Deep Learning model."
  },
  {
    "app": "NER_HE",
    "model_name": "hebrewner_cc_300d",
    "title": "Recognize entities in Hebrew text",
    "build": "2.6.3",
    "description": "Recognize Persons, Locations an Organization entities using an out of the box pretrained Deep Learning model."
  },
  {
    "app": "NER_UR",
    "model_name": "uner_mk_140M_300d",
    "title": "Recognize entities in Urdu text",
    "build": "2.6.3",
    "description": "Recognize Persons, Locations an Organization entities using an out of the box pretrained Deep Learning model."
  },
  {
    "app": "NER_KO",
    "model_name": "ner_kmou_glove_840B_300d",
    "title": "Recognize entities in Korean text",
    "build": "2.7.0",
    "description": "Recognize `DT` (date), `LC` (location), `OG` (organization), `PS` (person), `TI` (time), and `O` (other) using out of the box pretrained Spark NLP models."
  },
  {
    "app": "NER_ZH",
    "model_name": "ner_msra_bert_768d",
    "title": "Recognize entities in Chinese text",
    "build": "2.7.0",
    "description": "Recognize Persons, Locations, Organizations and Other entities using out of the box pretrained Deep Learning models based on BERT (bert_base_chinese) word embeddings."
  },
  {
    "app": "NER_ZH",
    "model_name": "ner_weibo_bert_768d",
    "title": "Recognize entities in Chinese text",
    "build": "2.7.0",
    "description": "Recognize Persons, Locations, Organizations and Other entities using out of the box pretrained Deep Learning models based on BERT (bert_base_chinese) word embeddings."
  },
  {
    "app": "NER_CLS_ATIS",
    "model_name": "nerdl_atis_840b_300d",
    "title": "Automate Question Answering of Airline Traffic Information Systems",
    "build": "2.7.1",
    "description": "Understand user questions related to Airline Traffic, classfiy them into broad categories, find relevant entities and tag them to get a structured representation of questions for automation."
  },
  {
    "app": "NER_CLS_SNIPS",
    "model_name": "nerdl_snips_100d",
    "title": "Understand intent and actions in general commands",
    "build": "2.7.3",
    "description": "Extract intents in general commands related to music, restaurants, movies. "
  },
  {
    "app": "NER_DRUG_PROT",
    "model_name": "ner_drugprot_clinical",
    "title": "Detect Drugs and Proteins",
    "build": "3.4.0",
    "description": "This model detects Chemical Compounds/Drugs and Genes/Proteins."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_en_fr",
    "title": "Translate text from English to French",
    "build": "2.7.1",
    "description": "Translate text from English to French using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_en_it",
    "title": "Translate text from English to Italian",
    "build": "2.7.1",
    "description": "Translate text from English to Italian using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_en_es",
    "title": "Translate text from English to Spanish",
    "build": "2.7.1",
    "description": "Translate text from English to Spanish using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_en_de",
    "title": "Translate text from English to German",
    "build": "2.7.1",
    "description": "Translate text from English to German using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_en_cpp",
    "title": "Translate text from English to Portuguese",
    "build": "2.7.1",
    "description": "Translate text from Arabic to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_fr_en",
    "title": "Translate text from French to English",
    "build": "2.7.1",
    "description": "Translate text from French to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_it_en",
    "title": "Translate text from Italian to English",
    "build": "2.7.1",
    "description": "Translate text from Italian to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_es_en",
    "title": "Translate text from Spanish to English",
    "build": "2.7.1",
    "description": "Translate text from Spanish to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_de_en",
    "title": "Translate text from German to English",
    "build": "2.7.1",
    "description": "Translate text from German to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_cpp_en",
    "title": "Translate text from Portuguese to English",
    "build": "2.7.1",
    "description": "Translate text from Chinese to English using a pretrained Deep Learning model."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_DA",
    "model_name": "explain_document_sm",
    "title": "Prebuilt pipeline for entity recognition in Danish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Danish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_DA",
    "model_name": "explain_document_md",
    "title": "Prebuilt pipeline for entity recognition in Danish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Danish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_DA",
    "model_name": "explain_document_lg",
    "title": "Prebuilt pipeline for entity recognition in Danish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Danish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_FI",
    "model_name": "explain_document_sm",
    "title": "Prebuilt pipeline for entity recognition in Finnish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Finnish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_FI",
    "model_name": "explain_document_md",
    "title": "Prebuilt pipeline for entity recognition in Finnish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Finnish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_FI",
    "model_name": "explain_document_lg",
    "title": "Prebuilt pipeline for entity recognition in Finnish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Finnish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_SV",
    "model_name": "explain_document_sm",
    "title": "Prebuilt pipeline for entity recognition in Swedish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Swedish text."
  },
  {
    "app": "PP_EXPLAIN_DOCUMENT_SV",
    "model_name": "explain_document_md",
    "title": "Prebuilt pipeline for entity recognition in Swedish",
    "build": "2.5.1",
    "description": "This SparkNLP out-of-the-box pipeline returns tokens, lemmas, pos, embeddings and NERs in one line of code. It automatically recognizes Persons, Locations, Organizations and Misc entities in Swedish text."
  },
  {
    "app": "PP_ADE",
    "model_name": "explain_clinical_doc_ade",
    "title": "Adverse drug events tagger",
    "build": "2.6.2",
    "description": "Automatic pipeline that tags documents as containing or not containing adverse events description, then identifies those events."
  },
  {
    "app": "PP_ADE",
    "model_name": "bert_token_classifier_ner_ade",
    "title": "Detect ADE-related entities",
    "build": "3.2.2",
    "description": "This model detects Adverse Drugs Events related entities in medical texts. It's been trained with SOTA approach."
  },
  {
    "app": "NER_LEGAL_DE",
    "model_name": "ner_legal",
    "title": "Detect legal entities German",
    "build": "2.6.0",
    "description": "Automatically identify entities such as persons, judges, lawyers, countries, cities, landscapes, organizations, courts, trademark laws, contracts, etc. in German legal text using the pretrained Spark NLP models ner_legal."
  },
  {
    "app": "TEXT2SQL",
    "model_name": "text2sql_mimicsql",
    "title": "SQL Query generation",
    "build": "5.0.2",
    "description": "This demo can generate SQL queries from natural questions. It is based on a small-size LLM."
  },
  {
    "app": "TEXT2SQL",
    "model_name": "text2sql_with_schema_single_table",
    "title": "SQL Query generation with schema",
    "build": "5.1.0",
    "description": "This demo can generate SQL queries from natural questions and custom database schemas with a single table."
  },
  {
    "app": "TEXT2SQL",
    "model_name": "text2sql_with_schema_single_table_augmented",
    "title": "SQL Query generation with schema augmented",
    "build": "5.1.0",
    "description": "This demo can generate SQL queries from natural questions and custom database schemas with a single table  finetuned by John Snow Labs on an augmented dataset."
  },
  {
    "app": "NER_SIGN_SYMP",
    "model_name": "ner_jsl",
    "title": "Detect signs and symptoms",
    "build": "2.4.2",
    "description": "Automatically identify Signs and Symptoms in clinical documents using two of our pretrained Spark NLP clinical models."
  },
  {
    "app": "NER_SIGN_SYMP",
    "model_name": "ner_clinical",
    "title": "Detect signs and symptoms",
    "build": "2.4.0",
    "description": "Automatically identify Signs and Symptoms in clinical documents using two of our pretrained Spark NLP clinical models."
  },
  {
    "app": "NER_SUPPLEMENT_CLINICAL",
    "model_name": "ner_supplement_clinical",
    "title": "Extract conditions and benefits from drug reviews",
    "build": "3.4.1",
    "description": "This model extracts conditions and benefits from drug reviews."
  },
  {
    "app": "NER_SUPPLEMENT_CLINICAL",
    "model_name": "bert_token_classifier_ner_supplement",
    "title": "Extract conditions and benefits from drug reviews",
    "build": "3.4.1",
    "description": "This model extracts conditions and benefits from drug reviews. It's been trained with SOTA approach."
  },
  {
    "app": "NER_DIAG_PROC",
    "model_name": "ner_diseases",
    "title": "Detect diagnosis and procedures",
    "build": "4.0.2",
    "description": "Automatically identify diagnoses and procedures in clinical documents using the pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_DIAG_PROC",
    "model_name": "ner_diseases_large",
    "title": "Detect diagnosis and procedures",
    "build": "4.0.2",
    "description": "Automatically identify diagnoses and procedures in clinical documents using the pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_DIAG_PROC",
    "model_name": "ner_jsl",
    "title": "Detect diagnosis and procedures",
    "build": "4.0.2",
    "description": "Automatically identify diagnoses and procedures in clinical documents using the pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_jsl",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically identify up to 77 entities, including Test, Oncological, Procedure, Symptom, Treatments,  Diabetes, Drug, Dosage,  Date, Imagine_Finding, etc. This is a model trained with in-house JSL annotations."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_jsl_greedy",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically identify 76 Entities, including Clinical and Demographics entities (Test Result, Age, Total_Cholesterol, etc). This model is the official version of jsl_ner_wip_greedy_clinical model."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_jsl_slim",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "This is a smaller version of 'ner_jsl', with only 24 entities out of the 77 of the original one, including  Test, Procedure, Treatment, Symptom, Drug, Date, Oncological, etc. This is a model trained with in-house JSL annotations."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_jsl_enriched",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically detect up to 86 entities, including not only clinical (Diagnosis, Dose, Lab Results...) but also demographics information (Gender, Age, Weight, etc). This is a model trained with in-house JSL annotations."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_events_clinical",
    "title": "Detect Clinical Events",
    "build": "2.5.5",
    "description": "Automatically identify the entities of Date, Time, Problem, Test, Treatment, Onset, Clinical Department, Evidence, Frequency, Admission, and Discharge in medical texts."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_healthcare",
    "title": "Detect Clinical Events",
    "build": "2.4.4",
    "description": "Automatically identify the entities of Problem, Test, and Treatment in medical texts."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "bert_token_classifier_ner_jsl",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically identify up to 77 entities, including Admission/Discharge, Death, Section Headers, Clinical Departments, Substances, Symptom, Treatments, Strenght of drugs, etc. "
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "bert_token_classifier_ner_jsl_slim",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "This is a smaller version of 'ner_jsl', with only 24 entities out of the 77 of the original one, including Test, Procedure, Treatment, Oncological, Alergen, Symptom, Drug, etc."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_clinical_large",
    "title": "Detect Clinical Events",
    "build": "2.5.0",
    "description": "This model is a larger version of 'ner_clinical', capable of automatically identifying the entities of Problem, Test, and Treatment in medical texts."
  },
  {
    "app": "NER_CLINICAL",
    "model_name": "ner_clinical",
    "title": "Detect Clinical Events",
    "build": "2.4.0",
    "description": "Automatically identify the entities of Problem, Test, and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_en",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_da",
    "title": "Detect Clinical Events",
    "build": "5.1.0",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_es",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
{
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_fi",
    "title": "Detect Clinical Events",
    "build": "5.1.1",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_fr",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
{
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_he",
    "title": "Detect Clinical Events",
    "build": "5.1.1",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_it",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
{
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_ja",
    "title": "Detect Clinical Events",
    "build": "5.1.0",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_nl",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
 {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_no",
    "title": "Detect Clinical Events",
    "build": "5.1.0",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_pl",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_pt",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
 {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_sv",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
{
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_tr",
    "title": "Detect Clinical Events",
    "build": "5.0.2",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
   {
    "app": "NER_CLINICAL_MULTI",
    "model_name": "ner_clinical_vi",
    "title": "Detect Clinical Events",
    "build": "5.1.0",
    "description": "Automatically identify the entities of Problem, Test and Treatment Entities in medical texts."
  },
  {
    "app": "NER_JSL",
    "model_name": "ner_jsl",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically identify up to 77 entities, including Test, Oncological, Procedure, Symptom, Treatments,  Diabetes, Drug, Dosage,  Date, Imagine_Finding, etc. This is a model trained with in-house JSL annotations."
  },
  {
    "app": "NER_JSL",
    "model_name": "ner_jsl_slim",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "This is a smaller version of 'ner_jsl', with only 24 entities out of the 77 of the original one, including  Test, Procedure, Treatment, Symptom, Drug, Date, Oncological, etc. This is a model trained with in-house JSL annotations."
  },
  {
    "app": "NER_JSL",
    "model_name": "ner_jsl_enriched",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically detect up to 86 entities, including not only clinical (Diagnosis, Dose, Lab Results...) but also demographics information (Gender, Age, Weight, etc). This is a model trained with in-house JSL annotations."
  },
  {
    "app": "NER_JSL",
    "model_name": "ner_jsl_greedy",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically identify 76 Entities, including Clinical and Demographics entities (Test Result, Age, Total_Cholesterol, etc). This model is the official version of jsl_ner_wip_greedy_clinical model."
  },
  {
    "app": "NER_JSL",
    "model_name": "bert_token_classifier_ner_jsl",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "Automatically identify up to 77 entities, including Admission/Discharge, Death, Section Headers, Clinical Departments, Substances, Symptom, Treatments, Strenght of drugs, etc. "
  },
  {
    "app": "NER_JSL",
    "model_name": "bert_token_classifier_ner_jsl_slim",
    "title": "Detect Clinical Entities",
    "build": "4.0.2",
    "description": "This is a smaller version of 'ner_jsl', with only 24 entities out of the 77 of the original one, including Test, Procedure, Treatment, Oncological, Alergen, Symptom, Drug, etc."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_posology",
    "title": "Detect drugs and prescriptions",
    "build": "2.4.4",
    "description": "Automatically identify Drug, Dosage, Duration, Form, Frequency, Route, and Strength details in clinical documents using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_posology_small",
    "title": "Detect drugs and prescriptions",
    "build": "2.4.2",
    "description": "Automatically identify Drug, Dosage, Duration, Form, Frequency, Route, and Strength details in clinical documents using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_posology_large",
    "title": "Detect drugs and prescriptions",
    "build": "2.4.2",
    "description": "Automatically identify Drug, Dosage, Duration, Form, Frequency, Route, and Strength details in clinical documents using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_posology_greedy",
    "title": "Detect drugs and prescriptions",
    "build": "2.7.2",
    "description": "Automatically identify Drug, Dosage, Duration, Form, Frequency, Route, and Strength details in clinical documents using our pretrained Spark NLP clinical model. It differs from ner_posology in the sense that it chunks together drugs, dosage, form, strength, duration, and route when they appear together, resulting in a bigger chunk."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_posology_experimental",
    "title": "Detect drugs and prescriptions",
    "build": "2.5.5",
    "description": "Automatically identify Drug, Dosage, Duration, Form, Frequency, Route, and Strength details in clinical documents using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_drugs_large",
    "title": "Detect drugs and prescriptions",
    "build": "2.6.0",
    "description": "Automatically identify Drug entity as a combination of Dosage, Form, Route and Strength using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_drugs_greedy",
    "title": "Detect drugs and prescriptions",
    "build": "2.7.2",
    "description": "Automatically identify Drug entity as a combination of Dosage, Form, Route and Strength using our pretrained Spark NLP clinical model ."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_jsl",
    "title": "Detect drugs and prescriptions",
    "build": "2.4.2",
    "description": "Automatically identify Drug, Drug Ingredient, Dosage, Frequency, Strength and Route details in clinical documents using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_jsl_enriched",
    "title": "Detect drugs and prescriptions",
    "build": "2.4.2",
    "description": "Automatically identify Treatment, Drug Brandname, Drug Ingredient, Dosage, Frequency, Route and Form details in clinical documents using our pretrained Spark NLP clinical model."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_clinical",
    "title": "Detect drugs and prescriptions",
    "build": "2.4.0",
    "description": "Automatically identify clinical events in clinical documents using our pretrained Spark NLP clinical model. For the posology demonstrations, we filter the identification of TREATMENT."
  },
  {
    "app": "NER_POSOLOGY",
    "model_name": "ner_clinical_large",
    "title": "Detect drugs and prescriptions",
    "build": "2.5.0",
    "description": "Automatically identify clinical events in clinical documents using our pretrained Spark NLP clinical model. For the posology demonstrations, we filter the identification of TREATMENT."
  },
  {
    "app": "NER_RADIOLOGY",
    "model_name": "ner_radiology",
    "title": "Detect Radiological Terminology ",
    "build": "2.7.3",
    "description": "This model detects terminology related to radiology reports, as Symptom, Test name, Body Parts, and ten other classes."
  },
  {
    "app": "NER_ABBREVIATION",
    "model_name": "ner_abbreviation_clinical",
    "title": "Recognize Clinical Abbreviations and Acronyms",
    "build": "3.5.2",
    "description": " This model is trained to extract clinical abbreviations and acronyms in medical texts."
  },
  {
    "app": "ABBREVIATION_MAPPER",
    "model_name": "ner_abbreviation_clinical",
    "mappers":[{"mapper_name": "abbreviation_mapper",
               "description": " This model is trained to extract clinical abbreviations and acronyms in medical texts and map to the definition",
                 "mapper_title": "Recognize and Map  Clinical Abbreviations and Acronyms to Definition"},
                 {"mapper_name": "abbreviation_mapper_augmented",
              "description": " This model is trained to extract clinical abbreviations and acronyms in medical texts and map to the definition",
                "mapper_title": "Recognize and Map Clinical Abbreviations and Acronyms to Definition- Augmented"},
             {"mapper_name": "abbreviation_category_mapper",
             "description": " This model is trained to extract clinical abbreviations and acronyms in medical texts and map to the definition and Category",
              "mapper_title": "Recognize and Maps abbreviations and acronyms with their definition and Category"}
            ],
    "title": "Recognize Clinical Abbreviations and Acronyms",
    "build": "3.5.2",
    "description": " This model is trained to extract clinical abbreviations and acronyms in medical texts."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts healthcare-related terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_anatomy",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts anatomical terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_clinical_dept",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts medical devices and clinical department mentions terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_demographic",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts demographic terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_problem",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts clinical problems from the documents transferred from the patient's own sentences using a granular taxonomy."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_problem_reduced",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts clinical problems from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_temporal",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts temporal references from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_test",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts test mentions from the documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_vop_treatment",
    "title": "Voice of Patients",
    "build": "4.4.3",
    "description": "This model extracts treatments mentioned in documents transferred from the patient's own sentences."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "bert_sequence_classifier_ade_augmented",
    "title": "Detect ADE-Related Tweets",
    "build": "4.0.2",
    "description": "This model classifies tweets as containing or not containing adverse drug events description."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "bert_sequence_classifier_drug_reviews_webmd",
    "title": "Drug Reviews Classifier",
    "build": "4.0.2",
    "description": "This model classifies change drug treatment information from WebMD.com."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "bert_sequence_classifier_health_mentions",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "bert_sequence_classifier_treatment_changes_sentiment_tweet",
    "title": "Self Treatment Changes Classifier in Tweets",
    "build": "4.0.2",
    "description": "This model classifies patients non-adherent to their treatments and their reasons on Twitter."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "bert_sequence_classifier_vop_side_effect",
    "title": "Voice of Patients",
    "build": "4.2.0",
    "description": "This model classifies texts written by patients as True if side effects from treatments or procedures are mentioned."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "bert_token_classifier_ade_tweet_binary",
    "title": "Detect Adverse Drug Events in Tweets",
    "build": "4.0.2",
    "description": "This model detects identify adverse drug events (ADE) in tweets."
  },
  {
    "app": "VOP",
    "task": "Classification",
    "model_name": "classifierdl_health_mentions",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "VOP",
    "task": "Assertion",
    "model_name": "assertion_vop_clinical",
    "title": "Assertion Status for Voice of the Patients",
    "build": "5.0.2",
    "description": "Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent)."
  },
  {
    "app": "VOP",
    "task": "Assertion",
    "model_name": "assertion_vop_clinical_medium",
    "title": "Assertion Status for Voice of the Patients",
    "build": "5.0.2",
    "description": "Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent)."
  },
  {
    "app": "VOP",
    "task": "Assertion",
    "model_name": "assertion_vop_clinical_large",
    "title": "Assertion Status for Voice of the Patients",
    "build": "5.0.2",
    "description": "Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent)."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh",
    "title": "Social Determinants of Health",
    "build": "5.0.2",
    "description": "This model extracts terminology related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_access_to_healthcare",
    "title": "Extract Access to Healthcare Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "SDOH NER model is designed to detect and label social determinants of health (SDOH) access to healthcare entities within text data. "
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_community_condition",
    "title": "Extract Community Condition Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "DOH NER model is designed to detect and label social determinants of health (SDOH) community condition-related entities within text data."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_demographics",
    "title": "Extract Demographic Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This SDOH NER model is designed to detect and label social determinants of health (SDOH) demographic entities within text data."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_health_behaviours_problems",
    "title": "Extract Health Behaviors and Problems Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "SDOH NER model is designed to detect and label social determinants of health (SDOH) health behavior and problem related entities within text data."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_income_social_status",
    "title": "Extract Income and Social Status Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "SDOH NER model is designed to detect and label social determinants of health (SDOH) income and social status-related entities within text data."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_mentions",
    "title": "Detect Social Determinants of Health Mentions",
    "build": "5.0.2",
    "description": "This Named Entity Recognition model is intended for detecting Social Determinants of Health mentions in clinical notes and trained by using MedicalNerApproach annotator that allows to train generic NER models based on Neural Networks."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_slim_wip",
    "title": "Social Determinants of Health",
    "build": "5.0.2",
    "description": "This model extracts terminology related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_social_environment",
    "title": "Extract Social Environment Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "SDOH NER model is designed to detect and label social determinants of health (SDOH) social environment entities within text data."
  },
  {
    "app": "SDOH",
    "task": "Name_Entity_Recognition",
    "model_name": "ner_sdoh_substance_usage",
    "title": "Extract Substance Usage Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "SDOH NER model is designed to detect and label social determinants of health (SDOH) substance use related entities within text data."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli",
    "title": "SDOH Alcohol Usage For Binary Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting alcohol use in clinical notes and trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_alcohol_usage_sbiobert_cased_mli",
    "title": "SDOH Alcohol Usage For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting alcohol use in clinical notes and trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_insurance_coverage_sbiobert_cased_mli",
    "title": "SDOH Insurance Coverage For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting insurance coverage. In this classifier, we know/assume that the patient has insurance."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_insurance_status_sbiobert_cased_mli",
    "title": "SDOH Insurance Status For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting whether the patient has insurance or not. If the patient’s insurance status is not mentioned or is unknown, it is regarded as “Unknown”. The model is trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_insurance_type_sbiobert_cased_mli",
    "title": "SDOH Insurance Type For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting insurance type. In this classifier, we know/assume that the patient has insurance."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_mental_health_clinical",
    "title": "SDOH Mental Health For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting if the patient has mental health problems in clinical notes. This model is trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_substance_usage_binary_sbiobert_cased_mli",
    "title": "SDOH Substance Usage For Binary Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting substance use in clinical notes and trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_tobacco_usage_sbiobert_cased_mli",
    "title": "SDOH Tobacco Usage For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting tobacco use in clinical notes and trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_under_treatment_sbiobert_cased_mli",
    "title": "SDOH Under Treatment For Classification",
    "build": "5.0.2",
    "description": "This Generic Classifier model is intended for detecting if the patient is under treatment or not. If under treatment is not mentioned in the text, it is regarded as “Not_Under_Treatment_Or_Not_Mentioned”. The model is trained by using GenericClassifierApproach annotator."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_financial_insecurity_mpnet",
    "title": "SDOH Financial Insecurity For Classification",
    "build": "5.1.0",
    "description": "This model classifies related to financial status in the clinical documents."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_food_insecurity_mpnet",
    "title": "SDOH Food Insecurity For Classification",
    "build": "5.1.0",
    "description": "This model classifies related to food status in the clinical documents."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli",
    "title": "SDOH Housing Insecurity For Classification",
    "build": "4.4.3",
    "description": "This Generic Classifier model is intended for detecting whether the patient has housing insecurity."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_economics_binary_sbiobert_cased_mli",
    "title": "SDOH Economics Status For Binary Classification",
    "build": "4.2.8",
    "description": "This model classifies related to social economics status in the clinical documents."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "genericclassifier_sdoh_transportation_insecurity_sbiobert_cased_mli",
    "title": "SDOH Transportation Insecurity For Classification",
    "build": "5.1.0",
    "description": "This model classifies transportation-related insecurity within the provided text."
  },
 {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "bert_sequence_classifier_sdoh_community_absent_status",
    "title": "SDOH Community Absent Binary Classification",
    "build": "4.2.4",
    "description": "This model classifies related to the loss of social support such as a family member or friend in the clinical documents."
  },
  {
    "app": "SDOH",
    "task": "Text_Classification",
    "model_name": "bert_sequence_classifier_sdoh_community_present_status",
    "title": "SDOH Community Present Binary Classification",
    "build": "4.2.4",
    "description": "This model classifies related to social support such as a family member or friend in the clinical documents."
  },
  {
    "app": "SDOH",
    "task": "Assertion",
    "model_name": "assertion_sdoh_wip",
    "title": "Detect Assertion Status from Social Determinants of Health (SDOH) Entities",
    "build": "5.0.2",
    "description": "This model specializes in classifying assertions in text into six distinct entities: ‘Absent’, ‘Present’, ‘Someone_Else’, ‘Past’, ‘Hypothetical’, and ‘Possible’."
  },
  {
    "app": "MAPPER_MULTI",
    "model_name": "icd10cm_multi_mapper_pipeline",
    "title": "ICD-10-CM Code Mapping Pipeline",
    "build": "5.1.1",
    "description": "This pretrained pipeline maps ICD-10-CM codes to their corresponding billable mappings, hcc codes, cause mappings, claim mappings, SNOMED codes, UMLS codes and ICD-9 codes without using any text data. You’ll just feed white space-delimited ICD-10-CM codes and get the result."
  },
  {
    "app": "MAPPER_MULTI",
    "model_name": "rxnorm_multi_mapper_pipeline",
    "title": "RxNorm Code Mapping Pipeline",
    "build": "5.1.1",
    "description": "This pretrained pipeline maps RxNorm codes to their corresponding drug brand names, rxnorm extension brand names, action mappings, treatment mappings, UMLS codes, NDC product codes and NDC package codes. You’ll just feed white space-delimited RxNorm codes and get the result."
  },
  {
    "app": "MAPPER_MULTI",
    "model_name": "snomed_multi_mapper_pipeline",
    "title": "SNOMED Code Mapping Pipeline",
    "build": "5.1.1",
    "description": "This pretrained pipeline maps SNOMED codes to their corresponding ICD-10, ICD-O, and UMLS codes. You’ll just feed white space-delimited SNOMED codes and get the result."
  },
  {
    "app": "NER_DEID_DE",
    "model_name": "ner_deid_generic",
    "title": "Detect PHI for Deidentification in German",
    "build": "3.3.4",
    "description": " This model detects protected health information that may need to be deidentified in German. It can detect up to 7 different classes."
  },
  {
    "app": "NER_DEID_DE",
    "model_name": "ner_deid_subentity",
    "title": "Detect PHI for Deidentification in German",
    "build": "3.3.4",
    "description": " This model detects protected health information that may need to be deidentified in German. It can detect up to 12 different classes."
  },
  {
    "app": "NER_DEID_ES",
    "model_name": "ner_deid_subentity_augmented",
    "title": "Detect PHI for Deidentification in Spanish",
    "build": "3.4.1",
    "description": "This model detects protected health information that may need to be deidentified in Spanish."
  },
  {
    "app": "NER_NIHSS",
    "model_name": "ner_nihss",
    "title": "Extract neurologic deficits related to Stroke Scale (NIHSS)",
    "build": "3.5.2",
    "description": "The National Institutes of Health Stroke Scale (NIHSS) is a 15-item neurologic examination stroke scale. It quantifies the physical manifestations of neurological deficits and provides crucial support for clinical decision making and early-stage emergency triage."
  },
  {
    "app": "NER_BIOMARKER",
    "model_name": "ner_oncology_test_wip",
    "title": "Extract Oncology Tests",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of tests from oncology texts, including pathology tests and imaging tests."
  },
  {
    "app": "NER_BIOMARKER",
    "model_name": "ner_oncology_biomarker_wip",
    "title": "Extract Biomarkers and their Results",
    "build": "4.2.0",
    "description": "Automatically extracts mentions of biomarkers and biomarker results from oncology texts."
  },
  {
    "app": "NER_BIOMARKER",
    "model_name": "ner_biomarker",
    "title": "Extraction of biomarker information",
    "build": "3.3.3",
    "description": "This model is trained to extract biomarkers, therapies, oncological, and other general concepts from text."
  },
  {
    "app": "NER_CHEMD",
    "model_name": "ner_chemd_clinical",
    "title": "Extract Drug and Chemical terminology",
    "build": "3.3.0",
    "description": "This model will help you to extract the names of chemical compounds and drugs in medical texts."
  },
  {
    "app": "NER_CHEXPERT",
    "model_name": "ner_chexpert",
    "title": "Detect Anatomical and Observation Entities in Chest Radiology Reports",
    "build": "3.3.0",
    "description": "This model detects anatomical and observation terminology in chest radiology reports, as Anatomical and Observation."
  },
  {
    "app": "NER_RISK_FACTORS",
    "model_name": "ner_risk_factors",
    "title": "Detect risk factors",
    "build": "2.4.2",
    "description": "Automatically identify risk factors such as Coronary artery disease, Diabetes, Family history, Hyperlipidemia, Hypertension, Medications, Obesity, and Smoking habits in clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_ANATOMY",
    "model_name": "ner_anatomy",
    "title": "Detect anatomical references",
    "build": "2.4.2",
    "description": "Automatically identify Anatomical System, Cell, Cellular Component, Anatomical Structure, Immaterial Anatomical Entity, Multi-tissue Structure, Organ, Organism Subdivision, Organism Substance, Pathological Formation in clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_ANATOMY",
    "model_name": "ner_anatomy_coarse",
    "title": "Detect anatomical references with one label",
    "build": "2.6.1",
    "description": "Automatically identify all types of anatomical references in clinical documents and tag them as ANATOMY using our pretrained Spark NLP model."
  },
  {
    "app": "NER_ANATOMY",
    "model_name": "bert_token_classifier_ner_anatomy",
    "title": "Detect Anatomical References",
    "build": "3.2.2",
    "description": "Automatically identify Anatomical System, Cell, Cellular Component, Anatomical Structure, Immaterial Anatomical Entity, Multi-tissue Structure, Organ, Organism Subdivision, Organism Substance, Pathological Formation in clinical documents."
  },
  {
    "app": "NER_DEMOGRAPHICS",
    "model_name": "ner_deid_subentity_augmented",
    "title": "Detect PHI for Deidentification ",
    "build": "4.3.0",
    "description": "Automatically identify protected health information up to 23 entities including Patient, Doctor, Hospital, MedicalRecord, IDNum , Location, Profession etc in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS",
    "model_name": "ner_deid_generic_augmented",
    "title": "Detect PHI for Deidentification",
    "build": "4.3.0",
    "description": "Automatically identify protected health information such as Name, Age, Date, Contact, ID , Location and Profession in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS",
    "model_name": "ner_deid_large",
    "title": "Detect PHI for Deidentification",
    "build": "4.3.0",
    "description": "Automatically identify protected health information such as Name, Age, Date, Contact, ID , Location, Profession, HealthPlan and URL in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS",
    "model_name": "ner_deid_generic_glove",
    "title": "Detect PHI for Deidentification",
    "build": "4.3.0",
    "description": "Automatically identify protected health information such as Name, Age, Date, Contact, ID , Location and Profession in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS",
    "model_name": "ner_deid_subentity_glove",
    "title": "Detect PHI for Deidentification",
    "build": "4.3.0",
    "description": "Automatically identify protected health information up to 23 entities including Patient, Doctor, Hospital, MedicalRecord, ID Number , Location and Profession, etc in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS",
    "model_name": "ner_deid_subentity_augmented_i2b2",
    "title": "Detect PHI for Deidentification",
    "build": "4.3.0",
    "description": "Automatically identify protected health information up to 23 entities including Patient, Doctor, Hospital, MedicalRecord, ID Number , Location, Profession, etc in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS_AR",
    "model_name": "ner_deid_subentity",
    "title": "Detect PHI for Deidentification (Arabic)",
    "build": "4.4.2",
    "description": "Automatically identify protected health information up to 17 entities including Patient, Doctor, Hospital, MedicalRecord, IDNUM , Location, Profession etc in arabic clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS_AR",
    "model_name": "ner_deid_generic",
    "title": "Detect PHI for Deidentification (Arabic)",
    "build": "4.4.2",
    "description": "Automatically identify protected health information up to 8 entities including Name, Date, ID , Age, Location etc in arabic clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS_AR",
    "model_name": "ner_deid_generic_arabert",
    "title": "Detect Generic PHI for Deidentification (AraBERT, Arabic)",
    "build": "5.1.0",
    "description": "Automatically identify protected health information up to 8 entities including Name, Date, ID , Age, Location etc in arabic clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS_AR",
    "model_name": "ner_deid_subentity_arabert",
    "title": "Detect Subentity PHI for Deidentification (AraBERT, Arabic)",
    "build": "5.1.0",
    "description": "Automatically identify protected health information up to 17 entities including Patient, Doctor, Hospital, MedicalRecord, IDNUM , Location, Profession etc in arabic clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS_AR",
    "model_name": "ner_deid_generic_camelbert",
    "title": "Detect Generic PHI for Deidentification (CamelBERT, Arabic)",
    "build": "5.1.0",
    "description": "Automatically identify protected health information up to 8 entities including Name, Date, ID , Age, Location etc in arabic clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DEMOGRAPHICS_AR",
    "model_name": "ner_deid_subentity_camelbert",
    "title": "Detect Subentity PHI for Deidentification (CamelBERT, Arabic)",
    "build": "5.1.0",
    "description": "Automatically identify protected health information up to 17 entities including Name, Date, ID , Age, Location etc in arabic clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "NER_DRUGS",
    "model_name": "ner_drugs",
    "title": "Detect Drug Chemicals",
    "build": "3.2.0",
    "description": "Automatically identify drug chemicals in clinical documents using the pretrained Spark NLP clinical models."
  },
  {
    "app": "NER_DRUGS",
    "model_name": "bert_token_classifier_ner_drugs",
    "title": "Detect Drug Chemicals",
    "build": "3.2.0",
    "description": "Automatically identify drug chemicals in clinical documents using the pretrained Spark NLP clinical models."
  },
  {
    "app": "NER_DRUGS_DEVELOPMENT_TRIALS",
    "model_name": "bert_token_classifier_drug_development_trials",
    "title": "Detect concepts in drug development trials",
    "build": "3.4.0",
    "description": "It is a NER model to identify concepts related to drug development including Trial Groups , End Points, Hazard Ratio, and other terminology in medical texts. This model has been trained with SOTA approach."
  },
  {
    "app": "NER_EVENTS_CLINICAL",
    "model_name": "ner_events_clinical",
    "title": "Detect clinical events",
    "build": "2.4.2",
    "description": "Automatically identify a variety of clinical events such as Problems, Tests, Treatments, Admissions or Discharges, in clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_EVENTS_CLINICAL",
    "model_name": "ner_clinical_large",
    "title": "Detect clinical events",
    "build": "2.4.2",
    "description": "Automatically identify a variety of clinical events such as Problems, Tests and Treatments in clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_LAB",
    "model_name": "ner_jsl",
    "title": "Detect lab results",
    "build": "2.4.2",
    "description": "Automatically identify Lab test names and Lab results from clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_TUMOR",
    "model_name": "ner_bionlp",
    "title": "Detect oncological & biological concepts",
    "build": "2.4.2",
    "description": "Automatically identify biological entities such as Amino_acids, Anatomical systems, Cancer, Cells, Cellular components, Developing anatomical structures, Genes and gene products, Immaterial anatomical entities, Multi-tissue structures, Organs, Organisms, Organism subdivisions, Simple chemicals, Tissues from clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_TUMOR",
    "model_name": "ner_bionlp_biobert",
    "title": "Detect oncological & biological concepts (biobert)",
    "build": "3.1.2",
    "description": "Automatically identify general biological entities such as tissue_structure, Amino_acid, Simple_chemical, Organism_substance, Developing_anatomical_structure, Cell, Cancer, Cellular_component, Gene_or_gene_product, Immaterial_anatomical_entity, Organ, Organism, Pathological_formation, Organism_subdivision, Anatomical_system, Tissue from clinical documents using our pretrained Spark NLP model."
  },
  {
    "app": "NER_TUMOR_ES",
    "model_name": "cantemist_scielowiki",
    "title": "Detect tumor characteristics in Spanish texts",
    "build": "3.1.2",
    "description": "Automatically identify tumor characteristics (morphology) from clinical documents in Spanish using our pretrained Spark NLP for Healthcare model."
  },
  {
    "app": "NER_PROFESSIONS_ES",
    "model_name": "meddoprof_scielowiki",
    "title": "Detect professions and occupations in Spanish texts",
    "build": "3.1.2",
    "description": "Automatically identify professions and occupations entities in Spanish texts using our pretrained Spark NLP for Healthcare model."
  },
  {
    "app": "NER_HUMAN_PHENOTYPE_GO_CLINICAL",
    "model_name": "ner_human_phenotype_go_clinical",
    "title": "Detect normalized genes and human phenotypes",
    "build": "2.6.0",
    "description": "Automatically detect normalized mentions of genes (go) and human phenotypes (hp) in medical text using Spark NLP for Healthcare pretrained models."
  },
  {
    "app": "NER_HUMAN_PHENOTYPE_GENE_CLINICAL",
    "model_name": "ner_human_phenotype_gene_clinical",
    "title": "Detect genes and human phenotypes",
    "build": "3.5.1",
    "description": "This model detects mentions of genes and human phenotypes (hp) in medical texts."
  },
  {
    "app": "NER_CHEMPROT_CLINICAL",
    "model_name": "ner_chemprot_biobert",
    "title": "Detect Chemical Compounds And Genes (BioBert)",
    "build": "3.0.0",
    "description": "Automatically detect all chemical compounds and gene mentions using our pretrained chemprot model included in Spark NLP for Healthcare."
  },
  {
    "app": "NER_CHEMPROT_CLINICAL",
    "model_name": "ner_chemprot_clinical",
    "title": "Detect chemical compounds and genes",
    "build": "2.6.0",
    "description": "Automatically detect all chemical compounds and gene mentions using our pretrained chemprot model included in Spark NLP for Healthcare."
  },
  {
    "app": "NER_CHEMPROT_CLINICAL",
    "model_name": "bert_token_classifier_ner_chemprot",
    "title": "Detect chemical compounds and genes",
    "build": "3.3.0",
    "description": "Automatically detect all types of chemical compounds using our pretrained Spark NLP for Healthcare model. This model has been trained with a SOTA approach, compared to the previous `ner_chemprot` model"
  },
  {
    "app": "NER_CELLULAR",
    "model_name": "ner_cellular",
    "title": "Detect Cell Structure, DNA, RNA and Protein",
    "build": "2.6.0",
    "description": "Automatically detect cell type, cell line, DNA and RNA information using our pretrained Spark NLP for Healthcare model."
  },
  {
    "app": "NER_CELLULAR",
    "model_name": "ner_cellular_biobert",
    "title": "Detect Cell Structure, DNA, RNA and Protein (Biobert)",
    "build": "3.0.0",
    "description": "Automatically detect cell type, cell line, DNA and RNA information using our pretrained Spark NLP for Healthcare model with Biobert"
  },
  {
    "app": "NER_HEALTHCARE_DE",
    "model_name": "ner_healthcare",
    "title": "Detect symptoms, treatments and other NERs in German",
    "build": "2.6.0",
    "description": "Automatically identify entities such as symptoms, diagnoses, procedures, body parts or medication in German clinical text using the pretrained Spark NLP clinical model ner_healthcare."
  },
  {
    "app": "NER_HEALTHCARE_DE",
    "model_name": "ner_healthcare_slim",
    "title": "Detect symptoms, treatments and other NERs in German",
    "build": "2.6.0",
    "description": "Automatically identify entities such as symptoms, diagnoses, procedures, body parts or medication in German clinical text using the pretrained Spark NLP clinical model ner_healthcare."
  },
  {
    "app": "NER_TRAFFIC_DE",
    "model_name": "ner_traffic",
    "title": "Detect traffic information in German text",
    "build": "2.6.0",
    "description": "Automatically extract geographical locations, postal codes, and traffic routes in German text using our pretrained Spark NLP model."
  },
  {
    "app": "NER_DISAMBIGUATION",
    "model_name": "ner_disambiguation",
    "title": "Link entities to Wikipedia pages",
    "build": "2.6.0",
    "description": "Automatically disambiguate people’s names based on their context and link them to corresponding Wikipedia pages using out of the box Spark NLP pretrained models."
  },
  {
    "app": "NER_CHEMICALS",
    "model_name": "ner_chemicals",
    "title": "Detect chemical compounds",
    "build": "2.6.3",
    "description": "Automatically detect all types of chemical compounds using our pretrained Spark NLP for Healthcare model."
  },
  {
    "app": "NER_CHEMICALS",
    "model_name": "bert_token_classifier_ner_chemicals",
    "title": "Detect chemical compounds",
    "build": "3.3.0",
    "description": "Automatically detect all types of chemical compounds using our pretrained Spark NLP for Healthcare model. This model is trained with 'Bert embeddings' using PyTorch."
  },
  {
    "app": "NER_BACTERIAL_SPECIES",
    "model_name": "ner_bacterial_species",
    "title": "Detect different types of species of bacteria",
    "build": "2.5.2",
    "description": "Automatically detect bacteria, plants, animals, and other species using the pretrained  Spark NLP clinical model."
  },
  {
    "app": "NER_BACTERIAL_SPECIES",
    "model_name": "bert_token_classifier_ner_bacteria",
    "title": "Detect bacteria, plants, animals and other species",
    "build": "3.2.2",
    "description": "Automatically detect bacteria, plants, animals, and other species using our pretrained Spark NLP for Healthcare model. This model has been trained with a SOTA approach, compared to the previous `ner_bacteria_species` model."
  },
  {
    "app": "NER_MEDMENTIONS_COARSE",
    "model_name": "ner_medmentions_coarse",
    "title": "Detect mentions of general medical terms (coarse)",
    "build": "4.0.0",
    "description": "Extract general medical terms in text like body parts, cells, genes, symptoms, etc in text."
  },
  {
    "app": "NER_CLINICAL_TRIALS_ABSTRACT",
    "model_name": "ner_clinical_trials_abstracts",
    "title": "Extract Entities in Clinical Trial Abstracts",
    "build": "4.1.0",
    "description": "This model extracts to trial design, diseases, drugs, population, statistics, publication etc. relevant entities from clinical trial abstracts."
  },
  {
    "app": "CONTEXTUAL_SPELL_CHECKER",
    "model_name": "spellcheck_clinical",
    "title": "Spell checking for clinical documents",
    "build": "2.5.0",
    "description": "Automatically identify and fix typos and misspelled words in clinical documents using our Spark NLP out of the box clinical spell checker."
  },
  {
    "app": "CONTEXTUAL_PARSER",
    "model_name": "contextual_parser",
    "title": "Detect demographics and vital signs using rules",
    "build": "2.4.2",
    "description": "Automatically detect demographic information as well as vital signs using our out-of-the-box Spark NLP Contextual Rules. Custom rules are very easy to define and run on your own data."
  },
  {
    "app": "SENTENCE_DETECTOR_HC",
    "model_name": "sentence_detector_dl_healthcare",
    "title": "Detect sentences in healthcare documents",
    "build": "2.6.2",
    "description": "Automatically detect sentences in noisy healthcare documents with our pretrained Sentence Splitter DL model."
  },
  {
    "app": "DEID_PHI_TEXT",
    "model_name": "deidentify_large",
    "title": "Deidentify free text documents",
    "build": "2.5.2",
    "description": "Deidentify free text documents by either masking or obfuscating PHI information using out of the box Spark NLP models that enforce GDPR and HIPPA compliance."
  },
  {
    "app": "DEID_PHI_TEXT",
    "model_name": "clinical_deidentification",
    "title": "Clinical Deidentification",
    "build": "3.0.3",
    "description": "This pipeline can be used to deidentify PHI information from medical texts. The PHI information will be masked and obfuscated in the resulting text. This pipeline can additionally extract the following entities compared to the previous one:"
  },
  {
    "app": "DEID_PHI_TEXT_ES",
    "model_name": "clinical_deidentification_augmented_es",
    "title": "Clinical Deidentification in Spanish",
    "build": "3.4.1",
    "description": "This pipeline can be used to deidentify PHI information from Spanish medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_DE",
    "model_name": "clinical_deidentification",
    "title": "Clinical Deidentification German",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from German medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "English",
    "title": "Clinical Deidentification English",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from English medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "French",
    "title": "Clinical Deidentification French",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from French medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "German",
    "title": "Clinical Deidentification German",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from German medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "Italian",
    "title": "Clinical Deidentification Italian",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from Italian medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "Spanish",
    "title": "Clinical Deidentification Spanish",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from Spanish medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "Portuguese",
    "title": "Clinical Deidentification Portuguese",
    "build": "3.4.0",
    "description": "This pipeline can be used to deidentify PHI information from Portuguese medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_PHI_TEXT_MULTI",
    "model_name": "Romanian",
    "title": "Clinical Deidentification Romanian",
    "build": "4.0.2",
    "description": "This pipeline can be used to deidentify PHI information from Romanian medical texts. The PHI information will be masked and obfuscated in the resulting text."
  },
  {
    "app": "DEID_EHR_DATA",
    "model_name": "deidentify_large",
    "title": "Deidentify structured data",
    "build": "2.5.2",
    "description": "Deidentify PHI information from structured datasets using out of the box Spark NLP functionality that enforces GDPR and HIPPA compliance, while maintaining linkage of clinical data across files."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Day Shifting",
    "model_name": "according to id",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Day Shifting",
    "model_name": "according to specified values",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Date Normalizer",
    "model_name": "according to specified values",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Date Normalizer",
    "model_name": "according to specified values",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Date Normalizer",
    "date_mode": "Default Date",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Date Normalizer",
    "date_mode": "EU Date",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "DATE_SHIFTING_AND_NORMALIZATION",
    "task": "Date Normalizer",
    "date_mode": "US Date",
    "title": "How to Perform Day Shifting and Normalization for Testing Data",
    "build": "5.1.0",
    "description": "This demo demonstrates to you through the straightforward process of normalizing and shifting dates with ease."
  },
  {
    "app": "LEG_DEIDENTIFICATION",
    "model_name": "legpipe_deid",
    "title": "Legal Deidentification",
    "build": "4.0.2",
    "description": "This pipeline can be used to deidentify legal information. The sensitive legal information will be masked in the resulting text."
  },
  {
    "app": "FINANCIAL_QUESTION_ANSWERING",
    "model_name": "finqa_bert",
    "title": "Financial Question Answering",
    "build": "4.2.3",
    "description": "Automatically generate answers to questions with context in financial documents"
  },
  {
    "app": "FINANCIAL_TABLE_QUESTION_ANSWERING",
    "model_name": "table_qa_tapas_base_finetuned_wtq",
    "title": "Financial Table Question Answering",
    "build": "4.2.3",
    "description": "Automatically generate answers to questions with context in financial Tables."
  },
  {
    "app": "LEGAL_QUESTION_ANSWERING",
    "model_name": "legqa_bert_large",
    "title": "Legal Question Answering",
    "build": "4.2.3",
    "description": "Automatically generate answers to questions with context in Legal documents"
  },
  {
    "app": "FIN_DEIDENTIFICATION",
    "model_name": "finpipe_deid",
    "title": "Financial Deidentification",
    "build": "4.0.2",
    "description": "This pipeline can be used to deidentify financial information. The sensitive financial information will be masked in the resulting text."
  },
  {
    "app": "RE_POSOLOGY",
    "model_name": "posology_re",
    "title": "Detect posology relations",
    "build": "2.5.5",
    "description": "Automatically identify relations between drugs, dosage, duration, frequency and strength using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_CLINICAL_EVENTS",
    "model_name": "re_temporal_events_clinical",
    "title": "Detect temporal relations for clinical events",
    "build": "2.5.5",
    "description": "Automatically identify three types of relations between clinical events: After, Before and Overlap using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_CLINICAL_EVENTS",
    "model_name": "re_temporal_events_enriched_clinical",
    "title": "Detect temporal relations for clinical events",
    "build": "2.6.0",
    "description": "Automatically identify seven types of relations between clinical events: After, Before, Simultaneous, Begun_by, Ended_by, Druing and Before_Overlap using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_CLINICAL",
    "model_name": "re_clinical",
    "title": "Detect causality between symptoms and treatment",
    "build": "2.5.5",
    "description": "Automatically identify relations between symptoms and treatment using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_CLINICAL",
    "model_name": "redl_clinical_biobert",
    "title": "Detect causality between problem, treatment and test entities (Biobert)",
    "build": "3.1.3",
    "description": "Automatically identify relations problem, treatment and test entities using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_CLINICAL_DATE",
    "model_name": "redl_date_clinical_biobert",
    "title": "Detect clinical events and date relations",
    "build": "3.0.3",
    "description": "Automatically identify relations between dates and clinical events using our pretrained clinical Relation Extraction DL (ReDL) model."
  },
  {
    "app": "RE_CLINICAL_DATE",
    "model_name": "re_test_result_date",
    "title": "Detect test, result and date relations",
    "build": "3.0.3",
    "description": "Automatically identify relations between dates, tests and test results using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_BODYPART_ENT",
    "model_name": "re_bodypart_problem",
    "title": "Detect relations between body parts and symptoms/diagnosis",
    "build": "2.7.3",
    "description": "Automatically identify relations between body parts and symptoms/diagnosis using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_BODYPART_ENT",
    "model_name": "re_bodypart_proceduretest",
    "title": "Detect relations between body parts and procedures/test",
    "build": "2.7.3",
    "description": "Automatically identify relations between body parts and procedures/tests using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_BODYPART_ENT",
    "model_name": "re_bodypart_directions",
    "title": "Identify sub-areas of organs and body parts.",
    "build": "2.7.3",
    "description": "Automatically identify relations between body parts and laterality using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_RADIOLOGY",
    "model_name": "re_test_problem_finding",
    "title": "Identify relations between problems, tests and findings.",
    "build": "2.7.1",
    "description": "Automatically identify relations between problem, tests, and findings in radiology reports using our pretrained clinical Relation Extraction (RE) model."
  },
  {
    "app": "RE_NIHSS",
    "model_name": "redl_nihss_biobert",
    "title": "Relate scale items and their measurements according to NIHSS guidelines.",
    "build": "3.3.4",
    "description": "NIH Stroke Scale (NIHSS) is a tool used by healthcare providers to objectively quantify the impairment caused by a stroke. If relation has Has_Value measurement is related to the entity, otherwise measurement is not related to the entity"
  },
  {
    "app": "RE_ADE",
    "model_name": "re_ade_biobert",
    "title": "Detect relations between Drugs and ADE",
    "build": "3.4.0",
    "description": "This model detects relations between drugs and adverse reactions caused by them. It has been trained with SOTA approach."
  },
  {
    "app": "RE_ADE",
    "model_name": "redl_ade_biobert",
    "title": "Detect relations between Drugs and ADE",
    "build": "3.4.0",
    "description": "This model detects relations between drugs and adverse reactions caused by them. It has been trained with deep learning-based SOTA approach."
  },
  {
    "app": "RE_ADE",
    "model_name": "re_ade_clinical",
    "title": "Detect relations between Drugs and ADE",
    "build": "3.4.0",
    "description": "This model detects relations between drugs and adverse reactions caused by them."
  },
  {
    "app": "RE_DRUG_PROT",
    "model_name": "redl_drugprot_biobert",
    "title": "Extract relations between drugs and proteins",
    "build": "3.4.1",
    "description": "Detect interactions between chemical compounds/drugs and genes/proteins with a SOTA approach."
  },
  {
    "app": "RE_ZERO_SHOT",
    "model_name": "posology",
    "title": "Detect Posology Relations using Zero Shot RE Model",
    "build": "3.5.0",
    "description": "To be able to use Zero Shot RE model, you need to specify 'Relation Labels' and corresponding 'Synthetic Sentences'. This demo allows you to identify posology relations between drugs, dosage, frequency and strength using Zero Shot RE Model."
  },
  {
    "app": "RE_ZERO_SHOT",
    "model_name": "bodypart",
    "title": "Detect Bodypart Relations using Zero Shot RE Model",
    "build": "3.5.0",
    "description": "To be able to use Zero Shot RE model, you need to specify 'Relation Labels' and corresponding 'Synthetic Sentences'. This demo allows you to identify body part relations between body parts, procedures, symptoms and directions using Zero Shot RE Model."
  },
  {
    "app": "ER_ICD10_PCS",
    "model_name": "chunkresolve_icd10pcs_clinical",
    "title": "ICD10-PCS coding",
    "build": "2.5.1",
    "description": "Automatically detect the procedures mentioned in your discharge record and link them to the corresponding ICD10-PCS code using Spark NLP for Healthcare out of the box."
  },
  {
    "app": "RE_ONCOLOGY_GRANULAR",
    "model_name": "re_oncology_wip",
    "title": "Detect Relation Extraction between different Oncological entity types (unspecific version)",
    "build": "4.2.0",
    "description": "This relation extraction model identifies relations between dates and other clinical entities, between tumor mentions and their size, between anatomical entities and other clinical entities, and between tests and their results."
  },
  {
    "app": "RE_ONCOLOGY_GRANULAR",
    "model_name": "re_oncology_granular_wip",
    "title": "Detect Relation Extraction between different Oncological entity types (granular version)",
    "build": "4.2.0",
    "description": "Using this relation extraction model, four relation types can be identified: is_date_of (between date entities and other clinical entities), is_size_of (between Tumor_Finding and Tumor_Size), is_location_of (between anatomical entities and other entities) and is_finding_of (between test entities and their results)."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_wip",
    "title": "Detect Relation Extraction between different Oncological entity types (unspecific version)",
    "build": "4.2.0",
    "description": "This relation extraction model identifies relations between dates and other clinical entities, between tumor mentions and their size, between anatomical entities and other clinical entities, and between tests and their results."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_granular_wip",
    "title": "Detect Relation Extraction between different Oncological entity types (granular version)",
    "build": "4.2.0",
    "description": "Using this relation extraction model, four relation types can be identified: is_date_of (between date entities and other clinical entities), is_size_of (between Tumor_Finding and Tumor_Size), is_location_of (between anatomical entities and other entities) and is_finding_of (between test entities and their results)."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_biomarker_result_wip",
    "title": "Detect Relation Extraction between Biomarkers and Results",
    "build": "4.2.0",
    "description": "This relation extraction model links Biomarker and Oncogene extractions to their corresponding Biomarker_Result extractions."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_location_wip",
    "title": "Detect Relation Extraction between anatomical entities and other clinical entities",
    "build": "4.2.0",
    "description": "This relation extraction model links extractions from anatomical entities (such as Site_Breast or Site_Lung) to other clinical entities (such as Tumor_Finding or Cancer_Surgery)."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_size_wip",
    "title": "Detect Relation Extraction between Tumors and Sizes",
    "build": "4.2.0",
    "description": "This relation extraction model links Tumor_Size extractions to their corresponding Tumor_Finding extractions."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_temporal_wip",
    "title": "Detect Relation Extraction between dates and other entities",
    "build": "4.2.0",
    "description": "This relation extraction model links Date and Relative_Date extractions to clinical entities such as Test or Cancer_Dx."
  },
  {
    "app": "RE_ONCOLOGY",
    "model_name": "re_oncology_test_result_wip",
    "title": "Detect Relation Extraction between Test and Results",
    "build": "4.2.0",
    "description": "This relation extraction model links test extractions to their corresponding results."
  },
  {
    "app": "ASSERTION",
    "model_name": "assertion_jsl",
    "title": "Identify assertion status for diagnosis and symptoms",
    "build": "4.2.0",
    "description": "Automatically detect if a diagnosis or a symptom is present, absent, possible, planned, past, none, hypotetical, related to a family member, or realted to someone else."
  },
  {
    "app": "ASSERTION",
    "model_name": "assertion_jsl_large",
    "title": "Identify assertion status for diagnosis and symptoms",
    "build": "4.2.0",
    "description": "Automatically detect if a diagnosis or a symptom is present, absent, possible, planned, past, or related to someone else (e.g. family members)."
  },
  {
    "app": "ASSERTION",
    "model_name": "assertion_dl",
    "title": "Identify assertion status for diagnosis and symptoms",
    "build": "4.2.0",
    "description": "Automatically detect if a diagnosis or a symptom is present, absent, uncertain or associated to other persons (e.g. family members)."
  },
  {
    "app": "ASSERTION",
    "model_name": "assertion_dl_biobert",
    "title": "Identify assertion status for diagnosis and symptoms",
    "build": "4.2.0",
    "description": "Automatically detect if a diagnosis or a symptom is present, absent, possible, planned, past, none, hypotetical, related to a family member, or realted to someone else."
  },
  {
    "app": "ASSERTION",
    "model_name": "assertion_dl_healthcare",
    "title": "Identify assertion status for diagnosis and symptoms",
    "build": "4.2.0",
    "description": "Automatically detect if a diagnosis or a symptom is present, absent, possible, planned, past, none, hypotetical, related to a family member, or realted to someone else."
  },
  {
    "app": "ASSERTION_RADIOLOGY",
    "model_name": "assertion_dl_radiology",
    "title": "Assign assertion status (confirmed, suspected or negative) to Image Findings",
    "build": "2.7.4",
    "description": "Automatically detect if an Image Finding is confirmed, suspected or negative."
  },
  {
    "app": "ASSERTION_RADIOLOGY",
    "model_name": "assertion_dl_radiology",
    "title": "Assign assertion status (confirmed, suspected or negative) to Image Findings",
    "build": "2.7.4",
    "description": "Automatically detect if an Image Finding is confirmed, suspected or negative."
  },
  {
    "app": "ASSERTION_ONCOLOGY_CLINICS",
    "model_name": "assertion_oncology_wip",
    "title": "Detect Assertion Status from Clinics Entities",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to oncology (including diagnoses, therapies and tests)."
  },
  {
    "app": "ASSERTION_ONCOLOGY_CLINICS",
    "model_name": "assertion_oncology_problem_wip",
    "title": "Detect Assertion Status from Entities Related to Cancer Diagnosis",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to cancer diagnosis (including Metastasis, Cancer_Dx and Tumor_Finding, among others)."
  },
  {
    "app": "ASSERTION_ONCOLOGY_CLINICS",
    "model_name": "assertion_oncology_treatment_binary_wip",
    "title": "Detect Assertion Status from Oncology Treatments",
    "build": "4.2.0",
    "description": "This model detects the assertion status of oncology treatment entities. "
  },
  {
    "app": "ASSERTION_ONCOLOGY_CLINICS",
    "model_name": "assertion_oncology_test_binary_wip",
    "title": "Detect Assertion Status from Oncology Tests",
    "build": "4.2.0",
    "description": "This model detects the assertion status of oncology tests, such as Pathology_Test or Imaging_Test"
  },
  {
    "app": "ASSERTION_ONCOLOGY_DEMOGRAPHIC",
    "model_name": "assertion_oncology_smoking_status_wip",
    "title": "Detect Assertion Status from Smoking Status Entity",
    "build": "4.2.0",
    "description": "This model detects the assertion status of the Smoking_Status entity. It classifies extractions as Present, Past or Absent."
  },
  {
    "app": "ASSERTION_ONCOLOGY_DEMOGRAPHIC",
    "model_name": "assertion_oncology_response_to_treatment_wip",
    "title": "Detect Assertion Status from Response to Treatment",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to response to treatment. "
  },
  {
    "app": "ASSERTION_ONCOLOGY_DEMOGRAPHIC",
    "model_name": "assertion_oncology_family_history_wip",
    "title": "Detect Family History Status from Oncology Entities",
    "build": "4.2.0",
    "description": "This model detects entities refering to the family history."
  },
  {
    "app": "ASSERTION_ONCOLOGY_DEMOGRAPHIC",
    "model_name": "assertion_oncology_demographic_binary_wip",
    "title": "Detect Assertion Status from Demographic Entities",
    "build": "4.2.0",
    "description": "This model detects if a demographic entity refers to the patient or to someone else."
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_wip",
    "title": "Detect Assertion Status from Clinics Entities",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to oncology (including diagnoses, therapies and tests)."
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_problem_wip",
    "title": "Detect Assertion Status from Entities Related to Cancer Diagnosis",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to cancer diagnosis (including Metastasis, Cancer_Dx and Tumor_Finding, among others)."
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_treatment_binary_wip",
    "title": "Detect Assertion Status from Oncology Treatments",
    "build": "4.2.0",
    "description": "This model detects the assertion status of oncology treatment entities. "
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_test_binary_wip",
    "title": "Detect Assertion Status from Oncology Tests",
    "build": "4.2.0",
    "description": "This model detects the assertion status of oncology tests, such as Pathology_Test or Imaging_Test"
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_response_to_treatment_wip",
    "title": "Detect Assertion Status from Response to Treatment",
    "build": "4.2.0",
    "description": "This model detects the assertion status of entities related to response to treatment. "
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_family_history_wip",
    "title": "Detect Family History Status from Oncology Entities",
    "build": "4.2.0",
    "description": "This model detects entities refering to the family history."
  },
  {
    "app": "ASSERTION_ONCOLOGY",
    "model_name": "assertion_oncology_demographic_binary_wip",
    "title": "Detect Assertion Status from Demographic Entities",
    "build": "4.2.0",
    "description": "This model detects if a demographic entity refers to the patient or to someone else."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "ner_oncology",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "ner_oncology_demographics",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "ner_jsl_enriched",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "ner_jsl",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "jsl_rd_ner_wip_greedy_clinical",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "jsl_ner_wip_clinical",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "SMOKING_STATUS",
    "model_name": "jsl_ner_wip_modifier_clinical",
    "title": "Detect Smoking Status Entities",
    "build": "4.2.3",
    "description": "This model detects the NER and assertion status of the related entities."
  },
  {
    "app": "CLASSIFICATION_PICO",
    "model_name": "classifierdl_pico_biobert",
    "title": "Classify medical text according to PICO framework",
    "build": "2.6.3",
    "description": "This model classifies medical texts in accordance with PICO (Participants/Problem, Intervention, Comparison, and Outcome) components."
  },
  {
    "app": "CLASSIFICATION_PICO",
    "model_name": "bert_sequence_classifier_pico_biobert",
    "title": "Classify medical text according to the PICO framework",
    "build": "3.4.1",
    "description": "This model classifies medical texts in accordance with PICO (Participants/Problem, Intervention, Comparison, and Outcome) components. It's been trained with SOTA approach."
  },
  {
    "app": "CLASSIFICATION_RCT",
    "model_name": "bert_sequence_classifier_rct_biobert",
    "title": "Classify Randomized Clinical Trial (RCT)",
    "build": "4.0.2",
    "description": "This model is  classifier that can classify the sections within the abstracts of scientific articles regarding randomized clinical trials (RCT) into 5 classes."
  },
  {
    "app": "CLASSIFICATION_RCT",
    "model_name": "rct_binary_classifier_use",
    "title": "Classify Randomized Clinical Trial (RCT)",
    "build": "4.0.2",
    "description": "This model is a classifier that can classify whether an article is a randomized clinical trial (RCT)."
  },
  {
    "app": "CLASSIFICATION_RCT",
    "model_name": "rct_binary_classifier_biobert",
    "title": "Classify Randomized Clinical Trial (RCT)",
    "build": "4.0.2",
    "description": "This model is a classifier that can classify whether an article is a randomized clinical trial (RCT)."
  },
  {
    "app": "CLASSIFICATION_RCT",
    "model_name": "bert_sequence_classifier_binary_rct_biobert",
    "title": "Classify Randomized Clinical Trial (RCT)",
    "build": "4.0.2",
    "description": "This model is a classifier that can classify whether an article is a randomized clinical trial (RCT)."
  },
  {
    "app": "CLASSIFICATION_ADE",
    "model_name": "bert_sequence_classifier_ade",
    "title": "Detect ADE-related texts",
    "build": "3.4.1",
    "description": "This model classifies texts as containing or not containing adverse drug events description. It's been trained with SOTA approach."
  },
  {
    "app": "CLASSIFICATION_ADE",
    "model_name": "distilbert_sequence_classifier_ade",
    "title": "Detect ADE-related texts",
    "build": "3.4.1",
    "description": "This model classifies texts as containing or not containing adverse drug events description. It's been trained with SOTA approach."
  },
  {
    "app": "CLASSIFICATION_ADE",
    "model_name": "classifierdl_ade_biobert",
    "title": "Detect ADE-related texts",
    "build": "3.4.1",
    "description": "This model classifies texts as containing or not containing adverse drug events description. It's been trained with SOTA approach."
  },
  {
    "app": "PUBLIC_HEALTH_AGE",
    "model_name": "bert_sequence_classifier_age_group",
    "title": "Age Group Classifier",
    "build": "5.0.2",
    "description": "This model is a Age Group Text Classifier and it is trained for analyzing the age group of a person mentioned in health documents."
  },
  {
    "app": "PUBLIC_HEALTH_AGE",
    "model_name": "bert_sequence_classifier_self_reported_age_tweet",
    "title": "Classify Self Report Age - Tweet",
    "build": "4.0.2",
    "description": "This model classify self-report the exact age into social media data."
  },
  {
    "app": "PUBLIC_HEALTH_ADE",
    "model_name": "bert_token_classifier_ade_tweet_binary",
    "title": "Detect Adverse Drug Events in Tweets",
    "build": "4.0.2",
    "description": "This model detects identify adverse drug events (ADE) in tweets."
  },
  {
    "app": "PUBLIC_HEALTH_ADE",
    "model_name": "bert_sequence_classifier_ade_augmented",
    "title": "Detect ADE-Related Tweets",
    "build": "4.0.2",
    "description": "This model classifies tweets as containing or not containing adverse drug events description."
  },
  {
    "app": "PUBLIC_HEALTH_CHANGE_DRUG_TREATMENT",
    "model_name": "bert_sequence_classifier_treatment_changes_sentiment_tweet",
    "title": "Self Treatment Changes Classifier in Tweets",
    "build": "4.0.2",
    "description": "This model classifies patients non-adherent to their treatments and their reasons on Twitter."
  },
  {
    "app": "PUBLIC_HEALTH_CHANGE_DRUG_TREATMENT",
    "model_name": "bert_sequence_classifier_drug_reviews_webmd",
    "title": "Drug Reviews Classifier",
    "build": "4.0.2",
    "description": "This model classifies change drug treatment information from WebMD.com."
  },
  {
    "app": "PUBLIC_HEALTH_COVID_SYMPTOMS",
    "model_name": "bert_sequence_classifier_self_reported_symptoms_tweet",
    "title": "Classify Self-Reported Covid-19 Symptoms - Tweet",
    "build": "4.0.2",
    "description": "This model classifies self-reported Covid-19 symptoms in Spanish tweets."
  },
  {
    "app": "PUBLIC_HEALTH_NER_DISEASE_ES",
    "model_name": "bert_token_classifier_disease_mentions_tweet",
    "title": "Detection of disease mentions in Spanish tweets.",
    "build": "4.2.0",
    "description": "This model extracts disease entities in Spanish tweets."
  },
  {
    "app": "PUBLIC_HEALTH_NER_DISEASE_ES",
    "model_name": "disease_mentions_tweet",
    "title": "Detection of disease mentions in Spanish tweets.",
    "build": "4.2.0",
    "description": "This model extracts disease entities in Spanish tweets."
  },
  {
    "app": "PUBLIC_HEALTH_STRESS",
    "model_name": "bert_sequence_classifier_self_reported_stress_tweet",
    "title": "Classify Self Reported Stress - Tweet",
    "build": "4.0.2",
    "description": "This model can identify stress in social media (Twitter) posts in the self-disclosure category. The model finds whether a person claims he/she is stressed or not."
  },
  {
    "app": "PUBLIC_HEALTH_STRESS",
    "model_name": "bert_sequence_classifier_stress",
    "title": "Emotional Stress Classifier",
    "build": "4.0.2",
    "description": "This model can classify whether the content of a text expresses emotional stress."
  },
  {
    "app": "PUBLIC_HEALTH_SOURCE_OF_STRESS",
    "model_name": "bert_sequence_classifier_stressor",
    "title": "Emotional Stressor Classifier",
    "build": "4.0.2",
    "description": "This model can classify source of emotional stress in text."
  },
  {
    "app": "PUBLIC_HEALTH_PARTNER_VIOLENCE",
    "model_name": "bert_sequence_classifier_self_reported_partner_violence_tweet",
    "title": "Classify Intimate Partner Violence - Tweet",
    "build": "4.0.2",
    "description": "This model involves the detection the potential IPV victims on social media platforms (in English tweets)."
  },
  {
    "app": "PUBLIC_HEALTH_VACCINE_STATUS",
    "model_name": "bert_sequence_classifier_self_reported_vaccine_status_tweet",
    "title": "Classify Self Report Vaccination Status - Tweet",
    "build": "4.0.2",
    "description": "This model involves the identification of self-reported COVID-19 vaccination status in English tweets."
  },
  {
    "app": "PUBLIC_HEALTH_VACCINE_STATUS",
    "model_name": "bert_sequence_classifier_vaccine_sentiment",
    "title": "Classify Self Report Vaccination Status - Tweet",
    "build": "4.1.0",
    "description": "This model involves the identification of self-reported COVID-19 vaccination status in English tweets."
  },
  {
    "app": "PUBLIC_HEALTH_VACCINE_STATUS",
    "model_name": "classifierdl_vaccine_sentiment",
    "title": "Classify Self Report Vaccination Status - Tweet",
    "build": "4.1.0",
    "description": "This model involves the identification of self-reported COVID-19 vaccination status in English tweets."
  },
  {
    "app": "PUBLIC_HEALTH_MANDATES",
    "model_name": "bert_sequence_classifier_health_mandates_stance_tweet",
    "title": "Classify Stances About Health Mandates in Tweets",
    "build": "4.0.2",
    "description": "This model classifies stance about health mandates in tweets."
  },
  {
    "app": "PUBLIC_HEALTH_MANDATES",
    "model_name": "bert_sequence_classifier_health_mandates_premise_tweet",
    "title": "Classify Premises About Health Mandates in Tweets",
    "build": "4.0.2",
    "description": "This model classifies premise about health mandates in tweets."
  },
  {
    "app": "PUBLIC_HEALTH_MENTIONS",
    "model_name": "bert_sequence_classifier_health_mentions",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "PUBLIC_HEALTH_MENTIONS",
    "model_name": "classifierdl_health_mentions",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "PUBLIC_HEALTH_MENTIONS_DE",
    "model_name": "bert_sequence_classifier_health_mentions_bert",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "PUBLIC_HEALTH_MENTIONS_DE",
    "model_name": "bert_sequence_classifier_health_mentions_gbert",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "PUBLIC_HEALTH_MENTIONS_DE",
    "model_name": "bert_sequence_classifier_health_mentions_gbert_large",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "PUBLIC_HEALTH_MENTIONS_DE",
    "model_name": "bert_sequence_classifier_health_mentions_medbert",
    "title": "Classify Public Health Mentions",
    "build": "4.0.2",
    "description": "This model classify public health mentions in social media text."
  },
  {
    "app": "MENTAL_HEALTH_DEPRESSION",
    "model_name": "bert_sequence_classifier_depression_twitter",
    "title": "Depression Classifier (PHS-BERT) for Tweets",
    "build": "4.2.0",
    "description": "This model is a PHS-BERT based tweet classification model that can classify whether tweets contain depressive text."
  },
  {
    "app": "MENTAL_HEALTH_DEPRESSION",
    "model_name": "bert_sequence_classifier_depression_binary",
    "title": "Depression Binary Classifier (PHS-BERT)",
    "build": "4.2.0",
    "description": "This model is a PHS-BERT based text classification model that can classify whether a social media text expresses depression or not."
  },
  {
    "app": "MENTAL_HEALTH_DEPRESSION",
    "model_name": "bert_sequence_classifier_depression",
    "title": "Depression Classifier (PHS-BERT)",
    "build": "4.2.0",
    "description": "This model is a PHS-BERT based text classification model that can classify depression level of social media text into three levels: no-depression, minimum, high-depression."
  },
  {
    "app": "NATURAL_SCENE",
    "model_name": "JSL_OCR",
    "title": "Recognize text in natural scenes",
    "build": "2.5.2",
    "description": "By using image segmentation and preprocessing techniques Spark OCR recognizes and extracts text from natural scenes."
  },
  {
    "app": "PDF_TO_TEXT",
    "model_name": "JSL_OCR",
    "title": "PDF to Text",
    "build": "2.5.2",
    "description": "Extract text from generated/selectable PDF documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "PPTX_TO_TEXT",
    "model_name": "JSL_OCR",
    "title": "PPTX to Text",
    "build": "3.8.0",
    "description": "Extract text from generated/selectable PPTX presentations by using our out-of-the-box Spark OCR library. PPTX files are converted to jpegs to display."
  },
  {
    "app": "PPTX_TABLE",
    "model_name": "JSL_OCR",
    "title": "PPTX to Table",
    "build": "3.8.0",
    "description": "Extract table from generated/selectable PPTX presentations by using our out-of-the-box Spark OCR library. PPTX files are converted to jpegs to display."
  },
  {
    "app": "BRAND_EXTRACTION",
    "model_name": "JSL_OCR",
    "title": "Brand Detection",
    "build": "3.8.0",
    "description": "Extracting brands from image."
  },
  {
    "app": "DOCX_TO_TEXT",
    "model_name": "JSL_OCR",
    "title": "DOCX to Text",
    "build": "2.5.2",
    "description": "Extract text from DOCX documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "ENHANCE_OLD_FAXES",
    "model_name": "JSL_OCR",
    "title": "Enhance Faxes or Scanned Documents",
    "build": "3.1.0",
    "description": "Improve quality of low quality faxes/scanned documents using Spark OCR."
  },
  {
    "app": "ENHANCE_DOC_PHOTO",
    "model_name": "JSL_OCR",
    "title": "Enhance Photos of Documents",
    "build": "3.1.0",
    "description": "Improve quality of documents in image format using Spark OCR."
  },
  {
    "app": "DETECT_SIGNATURES",
    "model_name": "image_handwritten_detector_gsa0628",
    "title": "Detect Handwritten Signatures in Document Images",
    "build": "3.6.0",
    "description": "Detect signatures in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "DETECT_HANDWRITTEN",
    "model_name": "image_handwritten_detector_gsa0628",
    "title": "Detect Handwritten information in Document Images",
    "build": "3.6.0",
    "description": "Detect signatures, names, dates, titles, addresses, and others in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "RECOGNIZE_HANDWRITTEN",
    "model_name": "ocr_handwritten",
    "title": "Recognize Handwritten information in Document Images",
    "build": "4.2.4",
    "description": "This model recognizes handwritten information in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "RECOGNIZE_PRINTED",
    "model_name": "ocr_printed",
    "title": "Recognize Printed information in Document Images",
    "build": "4.2.4",
    "description": "This model recognizes printed information in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "TEXT_DETECTION",
    "model_name": "image_text_detector_v2",
    "title": "Detect Text in Document Images",
    "build": "4.1.0",
    "description": "This model detects text in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "TEXT_DETECTION_DIT",
    "model_name": "image_text_detector_dit",
    "title": "Detect Text in Document Images",
    "build": "5.1.0",
    "description": "This model detects text in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "PP_MIXED_SCANNED_DIGITAL_PDF",
    "model_name": "mixed_scanned_digital_pdf",
    "title": "Pretrained pipeline for reading on mixed scanned and digital PDF documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, for conducting Optical Character Recognition (OCR) on mixed scanned and digital PDF documents. It ensures precise and efficient text extraction from PDFs of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "PP_MIXED_SCANNED_DIGITAL_PDF_SKEW_CORRECTION",
    "model_name": "mixed_scanned_digital_pdf_skew_correction",
    "title": "Pretrained pipeline for reading and skewing correction on mixed scanned and digital PDF documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, for conducting Optical Character Recognition (OCR) on mixed scanned and digital PDF documents with page rotation correction. It ensures precise and efficient text extraction from PDFs of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "PP_IMAGE_HANDWRITTEN_TRANSFORMER_EXTRACTION",
    "model_name": "image_handwritten_transformer_extraction",
    "title": "Pretrained pipeline for reading on handwritten documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, pipeline for doing transformer based OCR on handwritten texts. It ensures precise and efficient text extraction from handwritten images of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "PP_MIXED_SCANNED_DIGITAL_PDF_IMAGE_CLEANER",
    "model_name": "mixed_scanned_digital_pdf_image_cleaner",
    "title": "Pretrained pipeline for reading and removing noise on mixed scanned and digital PDF documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, for conducting Optical Character Recognition (OCR) on mixed scanned and digital PDF documents with image cleaning for removing background noise. It ensures precise and efficient text extraction from PDFs of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "PP_IMAGE_PRINTED_TRANSFORMER_EXTRACTION",
    "model_name": "image_printed_transformer_extraction",
    "title": "Pretrained pipeline for reading on printed documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, pipeline for doing transformer based OCR on printed texts. It ensures precise and efficient text extraction from printed images of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "PP_PDF_HANDWRITTEN_TRANSFORMER_EXTRACTION",
    "model_name": "pdf_handwritten_transformer_extraction",
    "title": "Pretrained pipeline for reading on handwritten documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, pipeline for doing transformer based OCR on handwritten texts. It ensures precise and efficient text extraction from handwritten pdfs of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "PP_PDF_PRINTED_TRANSFORMER_EXTRACTION",
    "model_name": "pdf_printed_transformer_extraction",
    "title": "Pretrained pipeline for reading on printed documents",
    "build": "5.0.2",
    "description": "Pretrained pipeline based on our pre-trained Spark OCR models, pipeline for doing transformer based OCR on printed texts. It ensures precise and efficient text extraction from printed pdfs of various origins and formats, improving the overall OCR accuracy."
  },
  {
    "app": "IMAGE_CLASSIFIER",
    "model_name": [
      "dit_base_finetuned_rvlcdip",
      "lilt_rvl_cdip_296K"
    ],
    "title": "Image Classifier in Document Images",
    "build": "5.0.0",
    "description": "This model classifies document images using our pre-trained Spark OCR model."
  },
  {
    "app": "IMAGE_TABLE_FORM_DETECTION",
    "model_name": "tabform_v1",
    "title": "Table and Form detection in Document Images",
    "build": "4.3.3",
    "description": "This model detects tables and forms in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "IMAGE_TABLE_RECOGNITION_HOCR",
    "model_name": "hocr",
    "title": "HOCR Table Structure Recognition in Document Images",
    "build": "4.3.0",
    "description": "This model obtain the table structure of documents images using our HOCR pre-trained Spark OCR model."
  },
  {
    "app": "PDF_TABLE_RECOGNITION_HOCR",
    "model_name": "hocr",
    "title": "HOCR Table Structure Recognition in Document PDFs",
    "build": "4.3.0",
    "description": "This model obtain the table structure of documents PDFs using our pre-trained Spark OCR model."
  },
  {
    "app": "IMAGE_CLEANER",
    "model_name": "text_cleaner_v1",
    "title": "Image Cleaner to Improve Quality of Document Images",
    "build": "4.1.0",
    "description": "This model improve the quality of document images using our pre-trained Spark OCR model."
  },
  {
    "app": "IMAGE_PROCESSING",
    "model_name": "image_processing",
    "title": "Image Processing to Improve Quality of Document Images",
    "build": "4.1.0",
    "description": "This model improve the quality of documents using different image processing algorithms from our pre-trained Spark OCR model."
  },
  {
    "app": "PRETRAINED_PIPELINES",
    "model_name": [
      "image_handwritten_transformer_extraction",
      "pdf_handwritten_transformer_extraction",
      "image_printed_transformer_extraction",
      "pdf_printed_transformer_extraction",
      "mixed_scanned_digital_pdf",
      "mixed_scanned_digital_pdf_skew_correction",
      "mixed_scanned_digital_pdf_image_cleaner"
    ],
    "title": "Pretrained Pipelines to Process Document Images",
    "build": "4.4.0rc1",
    "description": "These pretrained pipelines process documents images and pdfs to obtain the data and improve their quality. It is based on our pre-trained Spark OCR models."
  },
  {
    "app": "FORM_RECOGNITION",
    "model_name": "layoutlmv2_key_value_pairs",
    "title": "Form Recognition",
    "build": "3.11.0",
    "description": "This model perceives data in Forms as key-value pairs."
  },
  {
    "app": "VISUAL_DOCUMENT_KEYVALUES_NER",
    "model_name": [
      "visualner_10kfilings",
      "visualner_keyvalue_10kfilings"
    ],
    "title": "Visual NER Key-Values",
    "build": "4.2.4",
    "description": "This model extract the main document key points using our pre-trained Spark OCR model."
  },
  {
    "app": "VISUAL_DOCUMENT_KEYVALUES_NER_LILT",
    "model_name": "lilt_roberta_funsd_v1",
    "title": "Visual NER Key-Values v2",
    "build": "5.0.0",
    "description": "This model extract the main document key points using our pre-trained Spark OCR model."
  },
  {
    "app": "IMAGE_TO_TEXT",
    "model_name": "JSL_OCR",
    "title": "Image to Text",
    "build": "2.5.2",
    "description": "Recognize text in images and scanned PDF documents by using our out-of-the-box Spark OCR library. "
  },
  {
    "app": "FOUNDATIONONE_REPORT_PARSING",
    "model_name": "JSL_OCR",
    "title": "Parsing of Foundation One Reports",
    "build": "3.1.0",
    "description": "Extract information from Foundation One reports in a structured format."
  },
  {
    "app": "BG_NOISE_REMOVER",
    "model_name": "JSL_OCR",
    "title": "Remove background noise from scanned documents",
    "build": "2.5.2",
    "description": "Removing the background noise in a scanned document will highly improve the results of the OCR. Spark OCR is the only library that allows you to finetune the image preprocessing for excellent OCR results."
  },
  {
    "app": "DICOM_TO_TEXT",
    "model_name": "JSL_OCR",
    "title": "DICOM to Text",
    "build": "2.5.2",
    "description": "Recognize text from DICOM format documents. This feature explores both the text on the image and the text from the metadata file."
  },
  {
    "app": "SKEW_CORRECTION",
    "model_name": "JSL_OCR",
    "title": "Correct skewness in scanned documents",
    "build": "2.5.2",
    "description": "Correct the skewness of your scanned documents will highly improve the results of the OCR. Spark OCR is the only library that allows you to finetune the image preprocessing for excellent OCR results."
  },
  {
    "app": "PDF_TEXT_NER",
    "model_name": "JSL_OCR",
    "title": "Recognize entities in scanned PDFs",
    "build": "2.5.2",
    "description": "End-to-end example of regular NER pipeline: import scanned images from cloud storage, preprocess them for improving their quality, recognize text using Spark OCR, correct the spelling mistakes for improving OCR results and finally run NER for extracting entities."
  },
  {
    "app": "PDF_TEXT_TABLE",
    "model_name": "JSL_OCR",
    "title": "Extract tables",
    "build": "2.5.2",
    "description": "Extract tables from selectable PDF and Word documents with out of the box features offered by Spark OCR."
  },
  {
    "app": "DEID_DICOM_IMAGE",
    "model_name": "JSL_OCR",
    "title": "Deidentify DICOM documents",
    "build": "2.5.2",
    "description": "Deidentify DICOM documents by masking PHI information on the image and by either masking or obfuscating PHI from the metadata."
  },
  {
    "app": "DEID_IMAGE",
    "model_name": "JSL_OCR",
    "title": "Deidentify Images",
    "build": "2.5.2",
    "description": "Deidentify images by masking sensitive information on the image and by either masking or obfuscating."
  },
  {
    "app": "DEID_PDF_HIPAA",
    "model_name": "JSL_OCR",
    "title": "De-identify PDF documents - HIPAA Compliance",
    "build": "2.5.2",
    "description": "Deidentify PDF documents using HIPAA guidelines by masking PHI information using out of the box Spark NLP models."
  },
  {
    "app": "DEID_PDF_GDPR",
    "model_name": "JSL_OCR",
    "title": "De-identify PDF documents - GDPR Compliance",
    "build": "2.5.2",
    "description": "Deidentify PDF documents using GDPR guidelines by anonymizing PHI information using out of the box Spark NLP models."
  },
  {
    "app": "IMAGE_TABLE_DETECTION",
    "model_name": "JSL_OCR",
    "title": "Detect tables and extract text",
    "build": "3.5.0",
    "description": "Detect tables and extract table content from scanned documents & images with out-of-the-box features offered by Spark OCR."
  },
  {
    "app": "IMAGE_TABLE_DETECTION_ONLY",
    "model_name": "JSL_OCR",
    "title": "Detect tables",
    "build": "4.1.0",
    "description": "Detect tables from scanned documents & images by using pretrained Spark OCR models."
  },
  {
    "app": "IMAGE_CLASSIFY",
    "model_name": "JSL_OCR",
    "title": "Classify visual documents",
    "build": "3.5.0",
    "description": "Classify documents using text and layout data with the new features offered by Spark OCR."
  },
  {
    "app": "VISUAL_DOCUMENT_NER",
    "model_name": "JSL_OCR",
    "title": "Extract entities from scanned documents and images",
    "build": "3.5.0",
    "description": "Extract entities from PDF documents or images by using pretrained Spark OCR models."
  },
  {
    "app": "VISUAL_DOCUMENT_HANDWRITTEN_NER",
    "model_name": "JSL_OCR",
    "title": " Detect Handwritten information in Scanned Document and Images.",
    "build": "3.5.0",
    "description": "Detect signatures, names, dates, titles, addresses, and others in documents using our pre-trained Spark OCR model."
  },
  {
    "app": "VISUAL_DOCUMENT_CLASSIFICATION_V3",
    "model_name": "JSL_OCR",
    "title": "Classify Visual Finance Documents",
    "build": "4.0.0",
    "description": "Classify finance documents using text and layout data with the new features offered by Spark OCR."
  },
  {
    "app": "VISUAL_QUESTION_ANSWERING",
    "model_name": ["docvqa_donut_base", "docvqa_donut_base_opt", "docvqa_pix2struct_jsl"],
    "title": "Visual Question Answering",
    "build": "5.1.0",
    "description": "Infer the answer from a given image and a text-based question by using our pre-trained Spark OCR models."
  },
  {
    "app": "LAYOUT_ANALYSIS",
    "model_name": "publaynet_dit_base_mrcnn_jsl",
    "title": "Document Layout Analysis",
    "build": "5.1.0",
    "description": "Identify and structure the visual elements in a document by using our pre-trained Spark OCR models."
  },
  {
    "app": "RECEIPT_BINARY_CLASSIFICATION",
    "model_name": "finvisualclf_tickets",
    "title": "Identify Receipts in Pictures",
    "build": "4.1.0",
    "description": "This demo shows how you can use Financial Image Tranformers (ViT) in Spark NLP to detect Receipts in both scanned and mobile images. You can use this model to retrieve all the images which are receipts and then process then using VisualNER, OCR, etc."
  },
  {
    "app": "DRUG_NORMALIZATION",
    "model_name": "drug_normalizer",
    "title": "Normalize drug names and dosage units",
    "build": "2.5.2",
    "description": "Automatically unabbreviate clinical entities' names and standardize dosage units using the pre-trained Spark NLP model."
  },
  {
    "app": "AFRICAN_TRANSLATION_HAUSA",
    "model_name": "opus_mt_ha_en",
    "title": "Translate text from Hausa to English",
    "build": "2.7.0",
    "description": "Translate text from Hausa to English using a pretrained Deep Learning model."
  },
  {
    "app": "AFRICAN_TRANSLATION_HAUSA",
    "model_name": "opus_mt_en_ha",
    "title": "Translate text from English to Hausa",
    "build": "2.7.0",
    "description": "Translate text from English to Hausa using a pretrained Deep Learning model."
  },
  {
    "app": "AFRICAN_TRANSLATION_SWAHILI",
    "model_name": "opus_mt_sw_en",
    "title": "Translate text from Swahili to English",
    "build": "2.7.0",
    "description": "Translate text from Swahili to English using a pretrained Deep Learning model."
  },
  {
    "app": "AFRICAN_TRANSLATION_SWAHILI",
    "model_name": "opus_mt_en_sw",
    "title": "Translate text from English to Swahili",
    "build": "2.7.0",
    "description": "Translate text from English to Swahili using a pretrained Deep Learning model."
  },
  {
    "app": "AFRICAN_TRANSLATION_AFRIKAANS",
    "model_name": "opus_mt_af_en",
    "title": "Translate text from Afrikaans to English",
    "build": "2.7.0",
    "description": "Translate text from Afrikaans to English using a pretrained Deep Learning model."
  },
  {
    "app": "AFRICAN_TRANSLATION_AFRIKAANS",
    "model_name": "opus_mt_en_af",
    "title": "Translate text from English to Afrikaans",
    "build": "2.7.0",
    "description": "Translate text from English to Afrikaans using a pretrained Deep Learning model."
  },
  {
    "app": "NER_DIAG_PROC_ES",
    "model_name": "ner_diag_proc",
    "title": "Detect Diagnoses And Procedures In Spanish",
    "build": "3.0.0",
    "description": "Identifique automáticamente diagnósticos y procedimientos en documentos clínicos en español."
  },
  {
    "app": "NER_DIAG_PROC_ES",
    "model_name": "roberta_ner_diag_proc",
    "title": "Detect Diagnoses And Procedures In Spanish",
    "build": "3.3.0",
    "description": "Identifique automáticamente diagnósticos y procedimientos en documentos clínicos en español. Esta versión utiliza un modelo 'Estado del Arte' más actual que su predecesor, `ner_diag_proc`."
  },
  {
    "app": "ER_LOINC",
    "model_name": "sbiobertresolve_loinc",
    "title": "Resolve Laboratory Observations using the LOINC taxonomy ",
    "build": "3.0.2",
    "description": "This model maps laboratory observations to LOINC codes using Entity Resolvers."
  },
  {
    "app": "ER_LOINC",
    "model_name": "sbiobertresolve_loinc_numeric",
    "title": "Resolve Laboratory Observations using the LOINC taxonomy ",
    "build": "5.0.0",
    "description": "This model maps laboratory observations to LOINC codes using Entity Resolvers."
  },
  {
    "app": "ER_LOINC",
    "model_name": "sbiobertresolve_loinc_augmented",
    "title": "Resolve Laboratory Observations using the LOINC taxonomy ",
    "build": "5.0.0",
    "description": "This model maps laboratory observations to LOINC codes using Entity Resolvers."
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "icd10cm_snomed_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps ICD-10-CM codes to SNOMED codes without using any text data.",
    "subheader": "Mapping ICD-10-CM to SCTID:",
    "sample_code": "ICD10CM Code"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "snomed_icd10cm_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps SCTID to ICD-10-CM codes without using any text data.",
    "subheader": "Mapping SCTID to ICD-10-CM Code:",
    "sample_code": "SNOMED CT ID"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "icd10cm_umls_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps ICD-10-CM codes to UMLS codes without using any text data.",
    "subheader": "Mapping ICD-10-CM to UMLS Code:",
    "sample_code": "ICD-10-CM Code"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "snomed_umls_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps SNOMED to UMLS codes without using any text data.",
    "subheader": "Mapping SNOMED to UMLS Code:",
    "sample_code": "SNOMED CT ID"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "rxnorm_umls_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps RxNorm to UMLS codes without using any text data.",
    "subheader": "Mapping RxNorm to UMLS Code:",
    "sample_code": "RxNorm Code"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "mesh_umls_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps MeSH to UMLS codes without using any text data.",
    "subheader": "Mapping MeSH to UMLS Code:",
    "sample_code": "MeSH Code"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "rxnorm_mesh_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.0.2",
    "description": "This pretrained pipeline maps RxNorm to MeSH codes without using any text data.",
    "subheader": "Mapping RxNorm to MeSH Code:",
    "sample_code": "RxNorm Code"
  },
  {
    "app": "ER_CODE_MAPPING",
    "model_name": "icd10_icd9_mapping",
    "title": "Healthcare Code Mapping",
    "build": "3.4.0",
    "description": "This pretrained pipeline maps ICD10 codes to ICD9 codes without using any text data.",
    "subheader": "Mapping ICD10 to ICD9 Code:",
    "sample_code": "ICD10 Code"
  },
  {
    "app": "ER_CPT",
    "model_name": "sbiobertresolve_cpt_procedures_measurements_augmented",
    "title": "Resolve Medical Procedures using the CPT Taxonomy",
    "build": "3.5.0",
    "description": "This model maps medical procedures to CPT codes using Entity Resolvers."
  },
  {
    "app": "ER_UMLS_CUI",
    "model_name": "sbiobertresolve_umls_findings",
    "title": "Resolve Clinical Findings using the UMLS CUI taxonomy",
    "build": "3.3.2",
    "description": "This model maps clinical findings to their corresponding UMLS Concept Unique Identifier (CUI) codes using Entity Resolvers. ",
    "subheader": "Map clinical NER entities to Concept Unique Identifier (CUI)"
  },
  {
    "app": "ER_UMLS_CUI_DRUG_SUBSTANCE",
    "model_name": "sbiobertresolve_umls_drug_substance",
    "title": "Resolve Drug & Substance using the UMLS CUI taxonomy",
    "build": "3.4.0",
    "description": "This model maps Drug & Substance to their corresponding UMLS CUI taxonomy"
  },
  {
    "app": "ER_MSH",
    "model_name": "sbiobertresolve_mesh",
    "title": "Resolve Clinical Health Information using the MeSH taxonomy",
    "build": "3.3.2",
    "description": "This model maps biomedical and health-related information to MeSH codes using Entity Resolvers."
  },
  {
    "app": "ER_HPO",
    "model_name": "sbiobertresolve_HPO",
    "title": "Resolve Clinical Health Information using the HPO taxonomy",
    "build": "3.3.2",
    "description": "This model maps phenotypic abnormalities encountered in human diseases to Human Phenotype Ontology (HPO) codes.",
    "subheader": "Associated HPO codes for Phenotypic Abnormalities"
  },
  {
    "app": "ER_NDC",
    "model_name": "sbiobertresolve_ndc",
    "title": "Resolve Clinical Health Information using the NDC taxonomy",
    "build": "3.3.4",
    "description": "This model maps clinical entities and concepts (like drugs/ingredients) to National Drug Codes (NDC) using Entity Resolvers",
    "subheader": "Associated NDC for posology entities."
  },
  {
    "app": "ER_DRUG",
    "task": "Drug_Brandname",
    "model_name": "rxnorm_drug_brandname_mapper",
    "title": "Mapping RxNorm and RxNorm Extension Codes with Corresponding Drug Brand Names",
    "build": "5.1.3",
    "description": "This pretrained model maps RxNorm and RxNorm Extension codes with their corresponding drug brand names. It returns 2 types of brand names for the corresponding RxNorm or RxNorm Extension code."
  },
  {
    "app": "ER_DRUG",
    "task": "Drug_Brandname",
    "model_name": "drug_brandname_ndc_mapper",
    "title": "Mapping Drug Brand Names with Corresponding National Drug Codes",
    "build": "5.1.3",
    "description": "This pretrained model maps drug brand names to corresponding National Drug Codes (NDC). Product NDCs for each strength are returned in result and metadata."
  },
  {
    "app": "ER_DRUG",
    "task": "Drug_Brandname",
    "model_name": "ndc_drug_brandname_mapper",
    "title": "Mapping National Drug Codes (NDC) Codes with Corresponding Drug Brand Names",
    "build": "5.1.3",
    "description": "This pretrained model maps National Drug Codes (NDC) codes with their corresponding drug brand names."
  },
  {
    "app": "ER_DRUG",
    "task": "RxNORM_Action_Treatment",
    "model_name": "rxnorm_action_treatment_mapper",
    "title": "Mapping RxNorm Codes with Corresponding Actions and Treatments",
    "build": "5.1.3",
    "description": "This pretrained model maps RxNorm and RxNorm Extension codes with their corresponding action and treatment. Action refers to the function of the drug in various body systems; treatment refers to which disease the drug is used to treat."
  },
  {
    "app": "PDF_TO_TEXT_MUL",
    "model_name": "JSL_OCR_ENG",
    "title": "English PDF to Text",
    "build": "3.0.0",
    "description": "Extract text from generated/selectable English PDF documents and keep the original structure of the document by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "PDF_TO_TEXT_MUL",
    "model_name": "JSL_OCR_FRA",
    "title": "French PDF to Text",
    "build": "3.0.0",
    "description": "Extract text from generated/selectable French PDF documents and keep the original structure of the document by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "PDF_TO_TEXT_MUL",
    "model_name": "JSL_OCR_SPA",
    "title": "Spanish PDF to Text",
    "build": "3.0.0",
    "description": "Extract text from generated/selectable Spanish PDF documents and keep the original structure of the document by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "PDF_TO_TEXT_MUL",
    "model_name": "JSL_OCR_DEU",
    "title": "German PDF to Text",
    "build": "3.0.0",
    "description": "Extract text from generated/selectable German PDF documents and keep the original structure of the document by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "IMAGE_TO_TEXT_MUL",
    "model_name": "JSL_OCR_FRA",
    "title": "Image to Text",
    "build": "3.0.0",
    "description": "Recognize French Text in Images and scanned PDF documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "IMAGE_TO_TEXT_MUL",
    "model_name": "JSL_OCR_ENG",
    "title": "Image to Text",
    "build": "3.0.0",
    "description": "Recognize English Text in Images and scanned PDF documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "IMAGE_TO_TEXT_MUL",
    "model_name": "JSL_OCR_SPA",
    "title": "Image to Text",
    "build": "3.0.0",
    "description": "Recognize Spanish Text in Images and scanned PDF documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "IMAGE_TO_TEXT_MUL",
    "model_name": "JSL_OCR_DEU",
    "title": "Image to Text",
    "build": "3.0.0",
    "description": "Recognize German Text in Images and scanned PDF documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "DOCX_TO_TEXT_MUL",
    "model_name": "JSL_OCR_FRA",
    "title": "DOCX to Text",
    "build": "3.0.0",
    "description": "Extract text from French DOCX documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "DOCX_TO_TEXT_MUL",
    "model_name": "JSL_OCR_SPA",
    "title": "DOCX to Text",
    "build": "3.0.0",
    "description": "Extract text from Spanish DOCX documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "DOCX_TO_TEXT_MUL",
    "model_name": "JSL_OCR_DEU",
    "title": "DOCX to Text",
    "build": "3.0.0",
    "description": "Extract text from German DOCX documents by using our out-of-the-box Spark OCR library."
  },
  {
    "app": "INDIAN_TRANSLATION_MARATHI",
    "model_name": "translate_en_mr",
    "title": "Translate text from English to Marathi",
    "build": "2.7.0",
    "description": "Translate text from English to Marathi using pretrained Deep Learning pipeline."
  },
  {
    "app": "INDIAN_TRANSLATION_MARATHI",
    "model_name": "translate_mr_en",
    "title": "Translate text from Marathi to English",
    "build": "2.7.0",
    "description": "Translate text from Marathi to English using pretrained Deep Learning pipeline."
  },
  {
    "app": "INDIAN_TRANSLATION_PUNJABI",
    "model_name": "translate_pa_en",
    "title": "Translate text from Punjabi to English",
    "build": "2.7.0",
    "description": "Translate text from Punjabi to English using pretrained Deep Learning pipeline."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_hi_ur",
    "title": "Translate text from Hindi to Urdu",
    "build": "3.1.0",
    "description": "Translate text from Hindi to Urdu using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_it_is",
    "title": "Translate text from Italian to Icelandic",
    "build": "3.1.0",
    "description": "Translate text from Italian to Icelandic using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_it_uk",
    "title": "Translate text from Italian to Ukrainian",
    "build": "3.1.0",
    "description": "Translate text from Italian to Ukrainian using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_uk_en",
    "title": "Translate text from Ukrainian to English",
    "build": "3.1.0",
    "description": "Translate text from Ukrainian to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_yo_en",
    "title": "Translate text from Yoruba to English",
    "build": "3.1.0",
    "description": "Translate text from Yoruba to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_zh_en",
    "title": "Translate text from Chinese to English",
    "build": "3.1.0",
    "description": "Translate text from Chinese to English using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_zh_fi",
    "title": "Translate text from Chinese to Finnish",
    "build": "3.1.0",
    "description": "Translate text from Chinese to Finnish using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_zh_it",
    "title": "Translate text from Chinese to Italian",
    "build": "3.1.0",
    "description": "Translate text from Chinese to Italian using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_zh_nl",
    "title": "Translate text from Chinese to Dutch",
    "build": "3.1.0",
    "description": "Translate text from Chinese to Dutch using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_zh_uk",
    "title": "Translate text from Chinese to Ukrainian",
    "build": "3.1.0",
    "description": "Translate text from Chinese to Ukrainian using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_zh_vi",
    "title": "Translate text from Chinese to Vietnamese",
    "build": "3.1.0",
    "description": "Translate text from Chinese to Vietnamese using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_fr_yap",
    "title": "Translate text from French to Yapese",
    "build": "3.1.0",
    "description": "Translate text from French to Yapese using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_yap_fr",
    "title": "Translate text from Yapese to French",
    "build": "3.1.0",
    "description": "Translate text from Yapese to French using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_es_war",
    "title": "Translate text from Spanish to Waray",
    "build": "3.1.0",
    "description": "Translate text from Spanish to Waray using a pretrained Deep Learning model."
  },
  {
    "app": "TRANSLATION_MARIAN",
    "model_name": "opus_mt_war_es",
    "title": "Translate text from Waray to Spanish",
    "build": "3.1.0",
    "description": "Translate text from Waray to Spanish using a pretrained Deep Learning model."
  },
  {
    "app": "ER_SNOMED",
    "model_name": "sbiobertresolve_clinical_snomed_procedures_measurements",
    "title": "Resolve Clinical Health Information using the SNOMED taxonomy",
    "build": "3.4.0",
    "description": "This model maps healthcare information about procedures and measurements to SNOMED codes using Entity Resolvers."
  },
  {
    "app": "ER_SNOMED",
    "model_name": "sbiobertresolve_snomed_drug",
    "title": "Resolve Drugs using the SNOMED taxonomy",
    "build": "3.4.0",
    "description": "This model maps Drugs to SNOMED codes using Entity Resolvers."
  },
  {
    "app": "ER_SNOMED_PROCEDURE_MEASUREMENT",
    "model_name": "sbiobertresolve_clinical_snomed_procedures_measurements",
    "title": "Resolve Clinical Health Information using the SNOMED taxonomy",
    "build": "3.3.4",
    "description": "This model maps healthcare information about procedures and measurements to SNOMED codes using Entity Resolvers."
  },
  {
    "app": "ER_SNOMED_ES",
    "model_name": "robertaresolve_snomed",
    "title": "Resolve Clinical Health Information using the SNOMED taxonomy (Spanish)",
    "build": "3.4.0",
    "description": "This model maps healthcare information about diagnosis and procedures in Spanish to SNOMED codes using Entity Resolvers."
  },
  {
    "app": "ER_SNOMED_DE",
    "model_name": "sbertresolve_snomed",
    "title": "Resolve Clinical Health Information using the SNOMED taxonomy (GERMAN)",
    "build": "3.3.4",
    "description": "This model maps healthcare information about diagnosis and procedures in German to SNOMED codes using Entity Resolvers."
  },
  {
    "app": "ER_RXNORM",
    "model_name": "sbiobertresolve_rxnorm",
    "title": "Resolve Drugs using the RxNorm taxonomy",
    "build": "3.0.4",
    "description": "This model maps drugs to RxNorm codes using Entity Resolvers."
  },
  {
    "app": "ER_RXNORM",
    "model_name": "sbiobertresolve_rxnorm_disposition",
    "title": "Resolve Drugs using the RxNorm and Related Dispositions taxonomies",
    "build": "3.2.1",
    "description": "This model maps drugs to RxNorm codes using Entity Resolvers. The main difference between this model and RxNorm default one is that for this model, the “disposition” codes are also returned. "
  },
  {
    "app": "ER_RXNORM",
    "model_name": "sbiobertresolve_rxnorm_augmented_re",
    "title": "Resolve Drugs using the RxNorm taxonomy",
    "build": "3.4.1",
    "description": "This model maps drugs to RxNorm codes using Entity Resolvers. The main difference between this model and RxNorm default one is that for this model, you can set the weights of the drug terminology based on their priority"
  },
  {
    "app": "ER_RXNORM_DISPOSITION",
    "model_name": "sbiobertresolve_rxnorm_disposition",
    "title": "Resolve Drugs using the RxNorm and Related Drug Class taxonomies",
    "build": "3.4.0",
    "description": "This model maps drugs to RxNorm codes and related Rxnorm Drug Class using Entity Resolvers."
  },
  {
    "app": "ER_RXNORM_DRUG_CLASS",
    "model_name": "sbiobertresolve_rxnorm_disposition",
    "title": "Resolve Drugs using the RxNorm and Related Drug Class taxonomies",
    "build": "3.4.1",
    "description": "This model maps drugs to RxNorm codes and related Rxnorm Drug Class using Entity Resolvers."
  },
  {
    "app": "ER_CLINICAL_ABBREVIATION_ACRONYM",
    "model_name": "sbiobertresolve_clinical_abbreviation_acronym",
    "title": "Resolve Clinical Abbreviations and Acronyms",
    "build": "3.4.0",
    "description": "This model maps clinical abbreviations and acronyms to their meanings."
  },
  {
    "app": "ER_ICD10_CM",
    "model_name": "sbiobertresolve_icd10cm_augmented",
    "title": "Resolve Clinical Findings using the ICD-10-CM taxonomy",
    "build": "3.0.4",
    "description": "This model maps clinical findings to ICD-10-CM codes using Entity Resolvers. It is augmented with synonyms, which results in having a four times richer vocabulary than the non-augmented version. Additional columns as all_k_codes and all_k_resolutions are provided. To check their meaning, click on 'Explain Columns' on the left panel."
  },
  {
    "app": "ER_ICD10_CM",
    "model_name": "sbiobertresolve_icd10cm_augmented_billable_hcc",
    "title": "Resolve Clinical Findings using the ICD-10-CM taxonomy",
    "build": "3.0.4",
    "description": "This model maps clinical findings to ICD-10-CM codes, it is augmented with synonyms, what results in having a four times richer vocabulary than non-augmented version. It returns 7-digit codes from ICD-10-CM. In addition to that, three columns called all_k_codes, all_k_resolution and billable_hcc_score are provided. To check their meaning, click on 'Explain Columns' on the left panel. "
  },
  {
    "app": "ER_ICD10_CM",
    "model_name": "sbiobertresolve_icd10cm_generalised",
    "title": "Resolve Clinical Findings using the ICD-10-CM  taxonomy",
    "build": "3.2.1",
    "description": "This model maps clinical findings to ICD-10-CM codes. It predicts ICD-10-CM 3-character codes what, according to ICD-10-CM code structure, represents the general type of the injury or disease. Additional columns as all_k_codes and all_k_resolutions are provided. To check their meaning, click on 'Explain Columns' on the left panel."
  },
  {
    "app": "ER_ICD10_CM",
    "model_name": "sbiobertresolve_icd10cm_slim_billable_hcc",
    "title": "Resolve Clinical Findings using the ICD-10-CM taxonomy",
    "build": "3.0.4",
    "description": "This model maps clinical findings to ICD-10-CM codes .  It returns the official resolution text within the brackets. In addition to that, three columns column called all_k_codes, all_k_resolution and billable_hcc_score are provided. To check their meaning, click on 'Explain Columns' on the left panel."
  },
  {
    "app": "ER_ICD10_CM",
    "model_name": "sbiobertresolve_icd10cm_slim_normalized",
    "title": "Resolve Clinical Findings using the ICD-10-CM taxonomy",
    "build": "3.0.4",
    "description": "This model maps clinical findings to ICD-10-CM codes . In this model, synonyms having low similarity are dropped, what results in a smaller and more performant model. It also returns the official resolution text within the brackets inside the metadata. Additional columns as all_k_codes and all_k_resolutions are provided. To check their meaning, click on 'Explain Columns' on the left panel."
  },
  {
    "app": "HCC_RISK_SCORE",
    "model_name": "hcc_profile",
    "title": "Calculate Medicare Risk Score",
    "build": "3.2.1",
    "description": "You can calculate medical risk adjustment scores by using the Spark NLP Healthcare module based on the Centers for Medicare & Medicaid Service (CMS) risk adjustment model. The primary input to this model is ICD codes of the diseases. A risk score can be calculated in Spark environment after getting ICD codes of diseases by Spark NLP Healthcare ICD resolvers."
  },
  {
    "app": "ER_ICD10_GM_DE",
    "model_name": "sbertresolve_icd10gm",
    "title": "Resolve Clinical Findings using the ICD-10-GM taxonomy",
    "build": "3.2.2",
    "description": "This model maps clinical findings to their corresponding ICD-10-GM code in healthcare records using Entity Resolvers."
  },
  {
    "app": "ER_EDGAR_LEGAL",
    "model_name": "legel_edgar_companynames",
    "title": "Legal Entity Resolver for Edgar ",
    "build": "3.5.1",
    "description": "'Resolution' is the normalized name in U.S. Exchange and Commision Edgar Company Filings, and the IRS number is the  'Internal Revenue Service' number."
  },
  {
    "app": "VISIT_NORMALIZATION",
    "model_name": "ner_jsl_slim",
    "title": "Normalize Visit Summary",
    "build": "3.2.3",
    "description": "Unstructured Clinical visit data can be normalized and you can adopt it in the documents which have Clinical Document Architecture standards."
  },
  {
    "app": "NORMALIZED_SECTION_HEADER_MAPPER",
    "model_name": "normalized_section_header_mapper",
    "title": "Normalize Section Headers of the Visit Summary",
    "build": "5.0.0",
    "description": "Unstructured Clinical visit data can be normalized and you can adopt it in the documents which have Clinical Document Architecture standards. This demo maps Section Headers of the clinical visit data to their normalized versions."
  },
  {
    "app": "NORMALIZED_SECTION_HEADER_MAPPER",
    "model_name": "ner_section_header_diagnosis",
    "title": "Extract Section Headers and Diagnoses from Clinical Documents",
    "build": "5.0.0",
    "description": "This NER model extracts valuable information from clinical documents, concentrating on various medical conditions and crucial sections of patient records. This demo maps Section Headers and Diagnoses from Clinical Documents."
  },
  {
    "app": "ER_ICDO",
    "model_name": "sbiobertresolve_icdo_augmented",
    "title": "Resolve Oncology terminology using the ICD-O taxonomy",
    "build": "3.5.2",
    "description": "This model maps oncology terminology to ICD-O codes using Entity Resolvers."
  },
  {
    "app": "ER_HPO_ES",
    "model_name": "sbiobertresolve_HPO",
    "title": "Sentence Resolver: Spanish HPO coding",
    "build": "3.0.4",
    "description": "This model returns Human Phenotype Ontology (HPO) codes for phenotypic abnormalities encountered in human diseases. It also returns associated codes from the following vocabularies for each HPO code: - MeSH (Medical Subject Headings)- SNOMED- UMLS (Unified Medical Language System ) - ORPHA (international reference resource for information on rare diseases and orphan drugs) - OMIM (Online Mendelian Inheritance in Man)"
  },
  {
    "app": "ER_HCPCS",
    "model_name": "sbiobertresolve_hcpcs",
    "title": "Resolve Clinical Findings using HCPCS taxonomy",
    "build": "3.3.0",
    "description": "This model maps clinical findings to their corresponding HCPCS codes using Entity Resolvers."
  },
  {
    "app": "NER_GEN_VAR",
    "model_name": "ner_genetic_variants",
    "title": "Detect Genomic Variant Information",
    "build": "3.1.0",
    "description": "This model extracts genetic variant information from the medical text. The Predicted Entities are:"
  },
  {
    "app": "CLASSIFICATION_DE_NEWS",
    "model_name": "classifierdl_bert_news",
    "title": "Classify German News",
    "build": "3.1.1",
    "description": "Automatically classifies any German news in documents using our out-of-the-box Spark NLP Classifier DL Model. The Classes are:"
  },
  {
    "app": "CLASSIFICATION_UR_NEWS",
    "model_name": "classifierdl_bert_news",
    "title": "Classify Urdu News",
    "build": "3.3.0",
    "description": "Automatically classifies Urdu news in documents into the following classes:"
  },
  {
    "app": "CLASSIFICATION_RU_TOXIC",
    "model_name": "bert_sequence_classifier_toxicity",
    "title": "Toxic content classifier for Russian",
    "build": "3.3.4",
    "description": "This model identifies if a Russian text contains toxic content or not. The classes are :"
  },
  {
    "app": "NER_FEW_NERD",
    "model_name": "nerdl_fewnerd_subentity_100d",
    "title": "Detect 60+ General Entities",
    "build": "3.1.1",
    "description": "This model is trained on Few-NERD/inter public dataset and it extracts 66 entities that are in general scope."
  },
  {
    "app": "NER_FEW_NERD",
    "model_name": "nerdl_fewnerd_100d",
    "title": "Detect 8 General Entities",
    "build": "3.1.1",
    "description": "This model is trained on Few-NERD/inter public dataset and it extracts 8 entities that are in general scope. The Predicted Entities are:"
  },
  {
    "app": "NER_MODEL_FINDER",
    "model_name": "ner_model_finder",
    "title": "Find the best NER model to use with your entities",
    "build": "3.3.4",
    "description": "This pretrained pipeline suggests what models to use given an entity name."
  },
  {
    "app": "NER_ONCOLOGY",
    "model_name": "ner_oncology",
    "title": "Detect Oncological Concepts",
    "build": "4.0.0",
    "description": "Automatically identify oncological concepts from clinical text"
  },
  {
    "app": "NER_PATHOGEN",
    "model_name": "ner_pathogen",
    "title": "Detect Pathogen Concepts",
    "build": "4.1.0",
    "description": "Automatically identify pathogen concepts from clinical text"
  },
  {
    "app": "NER_PATHOGEN",
    "model_name": "bert_token_classifier_ner_pathogen",
    "title": "Detect Pathogen Concepts",
    "build": "4.1.0",
    "description": "Automatically identify pathogen concepts from clinical text"
  },
  {
    "app": "NER_PROFILING",
    "model_name": "ner_profiling_clinical",
    "title": "Detect Available Pretrained NER Models",
    "build": "4.1.0",
    "description": "This pipeline can be used to explore all the available pretrained NER models at once. When you run this pipeline over your text, you will end up with the predictions coming out of each pretrained clinical NER model."
  },
  {
    "app": "NER_PROFILING",
    "model_name": "ner_profiling_biobert",
    "title": "Detect Available Pretrained NER Models",
    "build": "4.1.0",
    "description": "This pipeline can be used to explore all the available pretrained NER models at once. When you run this pipeline over your text, you will end up with the predictions coming out of each pretrained clinical NER mode."
  },
  {
    "app": "CLASSIFICATION_TR_CYBERBULLYING",
    "model_name": "classifierdl_berturk_cyberbullying",
    "title": "Turkish Cyberbullying Detection",
    "build": "3.1.2",
    "description": "Identifies whether a Turkish text contains cyberbullying or not"
  },
  {
    "app": "CLASSIFICATION_QUESTIONPAIR",
    "model_name": "classifierdl_electra_questionpair_pipeline",
    "title": "Question Pair Detection",
    "build": "3.2.1",
    "description": "This model identifies whether the two question sentences are semantically repetitive or different."
  },
  {
    "app": "ViT_IMAGE_CLASSIFICATION",
    "model_name": "image_classifier_vit_base_cats_vs_dogs",
    "class_number": "2",
    "title": "ViT for Image Classification",
    "build": "4.3.1",
    "description": "This model identifies image classes using the vision transformer (ViT)."
  },
  {
    "app": "ViT_IMAGE_CLASSIFICATION",
    "model_name": "image_classifier_vit_base_patch16_224",
    "class_number": "999",
    "title": "ViT for Image Classification",
    "build": "4.3.1",
    "description": "This model identifies image classes using the vision transformer (ViT)."
  },
  {
    "app": "ViT_IMAGE_CLASSIFICATION",
    "model_name": "image_classifier_vit_CarViT",
    "class_number": "42",
    "title": "ViT for Image Classification",
    "build": "4.3.1",
    "description": "This model identifies image classes using the vision transformer (ViT)."
  },
  {
    "app": "ViT_IMAGE_CLASSIFICATION",
    "model_name": "image_classifier_vit_base_beans_demo",
    "class_number": "3",
    "title": "ViT for Image Classification",
    "build": "4.3.1",
    "description": "This model identifies image classes using the vision transformer (ViT)."
  },
  {
    "app": "ViT_IMAGE_CLASSIFICATION",
    "model_name": "image_classifier_vit_base_food101",
    "class_number": "101",
    "title": "ViT for Image Classification",
    "build": "4.3.1",
    "description": "This model identifies image classes using the vision transformer (ViT)."
  },
  {
    "app": "CLIPForZeroShotClassification",
    "model_name": "CLIPForZeroShotClassification",
    "title": "CLIPForZeroShotClassification for Zero Shot Classification",
    "build": "5.2.0",
    "description": "CLIP (Contrastive Language-Image Pre-Training) is a neural network that was trained on image and text pairs. It has the ability to predict images without training on any hard-coded labels"
  },
  {
    "app": "CLASSIFICATION_HEART_DISEASE",
    "model_name": "multiclassifierdl_heart_disease",
    "title": "Multilabel Text Classification for Heart Disease",
    "build": "5.1.0",
    "description": "The PHS-BERT Heart Disease Classifier Model is a specialized text classification system, engineered to accurately identify and categorize textual mentions of three prominent cardiovascular diseases: Hypertension, Coronary Artery Disease, and Myocardial Infarction."
  },
  {
    "app": "RE_DRUG_DRUG_INT",
    "model_name": "redl_drug_drug_interaction_biobert",
    "title": "Detect Interactions Between Drugs",
    "build": "3.0.3",
    "description": "Extract potential improvements or harmful effects of Drug-Drug interactions (DDIs) when two or more drugs are taken at the same time or at a certain interval."
  },
  {
    "app": "RE_CHEM_PROT",
    "model_name": "redl_chemprot_biobert",
    "title": "Detect Relations Between Chemicals and Proteins",
    "build": "3.5.2",
    "description": "Detect interactions between chemicals and proteins using BERT model by classifying whether a specified semantic relation holds between the chemical and protein entities within a sentence or document."
  },
  {
    "app": "CHUNK_KEYWORD_EXTRACTOR",
    "model_name": "ner_jsl",
    "title": "Extract Chunk Key Phrases using the model: ner_jsl ",
    "build": "3.5.2",
    "description": "Clinical entities by the importance of them with respect to document or sentence that they live in are illustrated in a table."
  },
  {
    "app": "CHUNK_KEYWORD_EXTRACTOR",
    "model_name": "ner_jsl+ngram",
    "title": "Extract Chunk Key Phrases using the models: ner_jsl+n_gram",
    "build": "3.5.2",
    "description": "Clinical entities by the importance of them with respect to document or sentence that they live in are illustrated in a table."
  },
  {
    "app": "CHUNK_KEYWORD_EXTRACTOR",
    "model_name": "n_gram",
    "title": "Extract Chunk Key Phrases using the models: n_gram",
    "build": "3.5.2",
    "description": "Clinical entities by the importance of them with respect to document or sentence that they live in are illustrated in a table."
  },
  {
    "app": "CHUNK_KEYWORD_EXTRACTOR",
    "model_name": "yake",
    "title": "Extract Chunk Key Phrases using the models: yake",
    "build": "3.5.2",
    "description": "Clinical entities by the importance of them with respect to document or sentence that they live in are illustrated in a table."
  },
  {
    "app": "TYPO_DETECTOR_EN",
    "model_name": "distilbert_token_classifier_typo_detector",
    "language": "English",
    "title": "English Typo Detector",
    "build": "3.4.1",
    "description": "This model detects typos in English."
  },
  {
    "app": "TYPO_DETECTOR_IS",
    "model_name": "distilbert_token_classifier_typo_detector",
    "language": "Icelandic",
    "title": "Typo Detector for Icelandic",
    "build": "3.4.1",
    "description": "This model detects typos in Icelandic."
  },
  {
    "app": "CLASSIFICATION_SUBPOENA",
    "model_name": "legclf_subpoena",
    "title": "Determine the category of a section within a subpoena.",
    "build": "5.1.1",
    "description": "This is a multiclass classification model designed to determine the category of a section within a subpoena. A subpoena is a formal document issued by a court, grand jury, legislative body or committee, or authorized administrative agency. It commands an individual to appear at a specific time and provide testimony, either orally or in writing, regarding the matter specified in the document."
  },
  {
    "app": "LEGALNER_SUBPOENA",
    "model_name": "legner_subpoena",
    "title": "Determine the entities of a section within a subpoena.",
    "build": "5.1.1",
    "description": "This is a legal NER mode trained on Subpoenas, which is aimed to extract the following entities from a Subpoena. "
  },
  {
    "app": "LEGALNER_SIGNERS",
    "model_name": "legalner_signers",
    "language": "English",
    "title": "Extract Signers, Roles and Companies",
    "build": "3.4.1",
    "description": "This model uses Name Entity Recognition to extract SIGNING_PERSON (People signing a document), SIGNING_TITLE (the roles of those people in the company) and PARTY (Organizations)."
  },
  {
    "app": "LEGALNER_PARTIES",
    "model_name": "legalner_parties",
    "language": "English",
    "title": "Extract Document Type, Parties, Aliases and Dates from Contracts",
    "build": "3.4.1",
    "description": "This model uses Name Entity Recognition to extract DOC (Document Type), PARTY (An Entity signing a contract), ALIAS (the way a company is named later on in the document) and EFFDATE (Effective Date of the contract)."
  },
  {
    "app": "LEGALNER_HEADERS",
    "model_name": "legalner_headers",
    "language": "English",
    "title": "Extract Headers and Subheaders from Legal Documents",
    "build": "3.4.1",
    "description": "This model uses Name Entity Recognition to detect HEADERS and SUBHEADERS with aims to detect the different sections of a legal document."
  },
  {
    "app": "LEGALNER_WHEREAS",
    "model_name": "legalner_whereas",
    "language": "English",
    "title": "Extract Entities from Whereas clauses",
    "build": "3.4.1",
    "description": "This model uses Name Entity Recognition detect \"Whereas\" clauses and extract, from them, the SUBJECT, the ACTION and the OBJECT."
  },
  {
    "app": "LEGALNER_LAW_MONEY",
    "model_name": "legner_law_money",
    "title": "Extract Law and Money from Spanish Legal Texts",
    "build": "4.1.0",
    "description": "This model detects laws and monetary amounts in Spanish legal texts."
  },
  {
    "app": "LEGALRE_PARTIES",
    "model_name": "legalre_parties",
    "language": "English",
    "title": "Extract Relations between Parties in an Agreement",
    "build": "3.4.1",
    "description": "This model uses Deep Learning Name Entity Recognition and a Relation Extraction models to extract the document type (DOC), the Effective Date (EFFDATE), the PARTIES in an agreement and their ALIAS (separate and collectively)"
  },
  {
    "app": "FINNER_ORGPROD",
    "model_name": "finner_orgs_prods_alias",
    "language": "English",
    "title": "Extract Organizations and Products",
    "build": "3.4.1",
    "description": "This model uses Name Entity Recognition to extract ORG (Organization names) and PRODUCT (Product names)."
  },
  {
    "app": "FINPIPE_ORG_PER_DATE_ROLES",
    "model_name": "finpipe_org_per_role_date",
    "language": "English",
    "title": "Extract People, Roles, Dates and Organisations",
    "build": "4.1.0",
    "description": "This model uses Name Entity Recognition to extract ORG (Organization names), PER (People's name), DATE (dates) and ROLE (roles / job positions of people in companies)."
  },
  {
    "app": "NEO4J",
    "model_name": "neo4j",
    "title": "Financial Graph Visualization",
    "build": "4.1.0",
    "description": "Use different models from Spark NLP for Finance, as NER, Relation Extraction, Entity Resolution and Chunk Mappers, to create your own Financial Graphs."
  },
  {
    "app": "TEXT_SPLITTING",
    "model_name": "Paragraph Splitting",
    "title": "Long Text Splitting",
    "build": "4.0.0",
    "description": "Select in the dropdown on the left Paragraph, Long Sentence or Section splitting, to check what our Text Splitting Annotators can do for you when working with long financial or legal documents."
  },
  {
    "app": "TEXT_SPLITTING",
    "model_name": "Long text Sentence Splitting",
    "title": "Long Text Splitting",
    "build": "4.0.0",
    "description": "Select in the dropdown on the left Paragraph, Long Sentence or Section splitting, to check what our Text Splitting Annotators can do for you when working with long financial or legal documents."
  },
  {
    "app": "TEXT_SPLITTING",
    "model_name": "Section Splitting",
    "title": "Long Text Splitting",
    "build": "4.0.0",
    "description": "Select in the dropdown on the left Paragraph, Long Sentence or Section splitting, to check what our Text Splitting Annotators can do for you when working with long financial or legal documents."
  },
  {
    "app": "ASSERTIONDL_COMPETITORS",
    "model_name": "finassertion_competitors",
    "language": "English",
    "title": "Identify Competitors in a text with Assertion Status",
    "build": "3.4.1",
    "description": "This model uses Assertion Status to identify if a PRODUCT or an ORG is mentioned to be a competitor."
  },
  {
    "app": "LEGALNER_ALIAS",
    "model_name": "legalner_alias",
    "language": "English",
    "title": "Identify Companies and their aliases in legal texts",
    "build": "3.4.1",
    "description": "This model uses Entity Recognition to identify ORG/PARTIES (Companies), their ALIAS (other names the company uses in the contract/agreement) and company PRODUCTS."
  },
  {
    "app": "FINNER_ALIAS",
    "model_name": "finner_orgs_prods_alias",
    "language": "English",
    "title": "Identify Companies and their aliases in financial texts",
    "build": "3.4.1",
    "description": "This model uses Entity Recognition to identify ORG (Companies), their ALIAS (other names the company uses in financial reports) and company PRODUCTS."
  },
  {
    "app": "FINRE_ALIAS",
    "model_name": "finre_org_prod_alias",
    "language": "English",
    "title": "Relation extraction between ORGS, PRODUCTS and their ALIASES",
    "build": "3.4.1",
    "description": "This model uses Entity Recognition to identify ORG (Companies), PRODUCT (Products) and their ALIAS in financial documents."
  },
  {
    "app": "FINCLF_EARNING_BROKER_10K",
    "model_name": "finclf_earning_broker_10k",
    "title": "Classify Earning Calls, Broker Reports and 10K",
    "build": "3.4.1",
    "description": "This is a Text Cassification model, which can help you identify if a model is an Earning Call, a Broker Report, a 10K filing or something else."
  },
  {
    "app": "FINCLF_ESG",
    "model_name": "finclf_esg",
    "title": "Classify ESG news into three classes",
    "build": "3.4.1",
    "description": "This model classifies ESG news into three classes: Environment, Social and Governance"
  },
  {
    "app": "FINCLF_ESG",
    "model_name": "finclf_augmented_esg",
    "title": "Classify ESG news into more than 25 classes",
    "build": "3.4.1",
    "description": "This model classifies ESG news into more than 25 fine-grain classes from the 3 ESG (Environment, Social and Governance) verticals."
  },
  {
    "app": "FINCLF_SEC_FILINGS",
    "model_name": "finclf_sec_filings",
    "title": "Classify Different SEC Filings",
    "build": "4.2.2",
    "description": "This demo showcases how to use pretrained Finance NLP models to classify documents. In this case, `finclf_sec_filings` allows you to differentiate between 10-K, 10-Q, 8-K, 3, 4 and S-8 filings."
  },
  {
    "app": "T5_FIN_SUMMARIZATION",
    "model_name": "finsum_news_headers_lg",
    "title": "Financial News Summarization (Headers, Large)",
    "build": "4.2.2",
    "description": "This demo shows how to extract headers from financial news. This is a large version of model."
  },
  {
    "app": "T5_FIN_SUMMARIZATION",
    "model_name": "finsum_news_headers_md",
    "title": "Financial News Summarization (Headers, Medium)",
    "build": "4.2.2",
    "description": "This demo shows how to extract headers from financial news. This is a medium version of model."
  },
  {
    "app": "T5_FIN_SUMMARIZATION",
    "model_name": "finsum_news_md",
    "title": "Financial News Summarization (Summarization, Medium)",
    "build": "4.2.2",
    "description": "This demo shows how to summarize financial news. It has been finetuned with a financial dataset (about 10K news)."
  },
  {
    "app": "T5_FIN_SUMMARIZATION",
    "model_name": "finsum_news_xs",
    "title": "Financial News Summarization (Summarization, X-Small)",
    "build": "4.2.2",
    "description": "This demo shows how to summarize financial news. It has been finetuned with a extra-small financial dataset. (about 4K news)."
  },
  {
    "app": "LEGALNER_OBLIGATIONS",
    "model_name": "legner_obligations",
    "title": "Extract Parties obligations in a Legal Agreement",
    "build": "3.4.1",
    "description": "This model extracts subject, action, object and indirect objects from the Parties obligations in legal agreements"
  },
  {
    "app": "LEGNER_INDIAN_COURT",
    "model_name": "legner_indian_court_preamble",
    "title": "Named Entity Recognition in English from Indian Court Preamble Documents",
    "build": "1.0.0",
    "description": "This model extracts COURT, JUDGE, PETITIONER, RESPONDENT and LAWYER entities from Indian Court Preamble Documents"
  },
  {
    "app": "LEGNER_INDIAN_COURT",
    "model_name": "legner_indian_court_judgement",
    "title": "Named Entity Recognition in English from Indian Court Judgement Documents",
    "build": "1.0.0",
    "description": "This model extracts COURT, JUDGE, PETITIONER, RESPONDENT, DATE, WITNESS, CASE_NUMBER and 6 more entities from Indian Court Judgement Documents"
  },
  {
    "app": "LEGNER_ROMANIAN_OFFICIAL",
    "model_name": "legner_romanian_official_lg",
    "title": "Named Entity Recognition in Romanian Official Documents",
    "build": "1.0.0",
    "description": "This is a large version of NER model that extracts ORG, PER, DATE, LOC, DECISION, DECREE, DIRECTIVE, EMERGENCY_ORDINANCE, LAW, ORDER, ORDINANCE, REGULATION, REPORT and TREATY entities from Romanian Official Documents."
  },
  {
    "app": "LEGNER_ROMANIAN_OFFICIAL",
    "model_name": "legner_romanian_official_md",
    "title": "Named Entity Recognition in Romanian Official Documents",
    "build": "1.0.0",
    "description": "This is a medium version of NER model that extracts PER(Person), LOC(Location), ORG(Organization), DATE and LEGAL entities from Romanian Official Documents. Different from small version, it labels all enttities related to legal domain as LEGAL."
  },
  {
    "app": "LEGNER_ROMANIAN_OFFICIAL",
    "model_name": "legner_romanian_official_sm",
    "title": "Named Entity Recognition in Romanian Official Documents",
    "build": "1.0.0",
    "description": "This is a small version of NER model that extracts only PER(Person), LOC(Location), ORG(Organization) and DATE entities from Romanian Official Documents."
  },
  {
    "app": "FIN_LEG_COMPANY_AUGMENTATION",
    "model_name": "finmapper_nasdaq_companyname",
    "title": "Augment Organization names with NASDAQ information",
    "build": "3.4.1",
    "description": "This model augments your NER extraction of companies with NASDAQ information"
  },
  {
    "app": "FIN_LEG_COMPANY_AUGMENTATION",
    "model_name": "finmapper_nasdaq_ticker",
    "title": "Augment Trading Symbols with NASDAQ information",
    "build": "3.4.1",
    "description": "This model augments your NER extraction of Tickers with NASDAQ information"
  },
  {
    "app": "FIN_LEG_COMPANY_AUGMENTATION",
    "model_name": "finmapper_edgar_companyname",
    "title": "Augment Organization names with EDGAR information",
    "build": "3.4.1",
    "description": "This model augments your NER extraction of company names with information in the SEC EDGAR database. This is the legal version of the same model available in the Financial library with the name `legmapper_edgar_companyname`"
  },
  {
    "app": "FIN_LEG_COMPANY_AUGMENTATION",
    "model_name": "legmapper_edgar_companyname",
    "title": "Augment Organization names with EDGAR information",
    "build": "3.4.1",
    "description": "This model augments your NER extraction of company names with information in the SEC EDGAR database. This is the legal version of the same model available in the Financial library with the name `finmapper_edgar_companyname`."
  },
  {
    "app": "FINCLF_FLS",
    "model_name": "finclf_bert_fls",
    "title": "Detect Forward-Looking Statements (FLS)",
    "build": "3.4.1",
    "description": "This model detects FLS (Forward-Looking Statements) in company reports, as Annual reports or 10-K filings."
  },
  {
    "app": "FINRE_ZEROSHOT",
    "model_name": "finre_zeroshot",
    "title": "Financial Zero-shot Relation Extraction",
    "build": "3.4.1",
    "description": "This model extracts relations on the fly, without needing to train any model, just with several examples."
  },
  {
    "app": "FINRE_EXPERIENCES",
    "model_name": "finre_experiences",
    "language": "English",
    "title": "Extract Relationships About People's Job Experiences",
    "build": "4.1.0",
    "description": "This demo shows how you can group together entities as PERSON, DATE, ORG (Organizations) and ROLE (job titles) to understand present and past job experiences of employees."
  },
  {
    "app": "LEGRE_ZEROSHOT",
    "model_name": "legre_zeroshot",
    "title": "Legal Zero-shot Relation Extraction",
    "build": "3.4.1",
    "description": "This model extracts relations on the fly, without needing to train any model, just with several examples."
  },
  {
    "app": "LEGRE_NOTICE_CLAUSE",
    "model_name": "legre_notice_clause_xs",
    "title": "Notice Clause Relation Extraction",
    "build": "4.2.3",
    "description": "This demo shows how to extract relations between entities as NOTICE_PARTY, NAME, TITLE, ADDRESS, EMAIL, etc. from notice clauses."
  },
  {
    "app": "LEGNER_ZEROSHOT",
    "model_name": "legner_zeroshot",
    "title": "Legal Zero-Shot Named Entity Recognition",
    "build": "4.1.0",
    "description": "This demo shows how you can use prompts in form of questions, to carry our Named Entity Recognition without any pretrained dataset. You will find a table with the example questions (prompts) used for the different labels on the side menu."
  },
  {
    "app": "FINNER_ZEROSHOT",
    "model_name": "finner_zeroshot",
    "title": "Financial Zero-Shot Named Entity Recognition",
    "build": "4.1.0",
    "description": "This demo shows how you can use prompts in form of questions, to carry our Named Entity Recognition without any pretrained dataset. You will find a table with the example questions (prompts) used for the different labels on the side menu."
  },
  {
    "app": "FINNER_ROLES",
    "model_name": "finner_roles",
    "title": "Extraction Roles, Job Positions and Titles",
    "build": "3.4.1",
    "description": "This model extracts information about a Role or Title in financial documents, Resumes, Wikipedia data, etc."
  },
  {
    "app": "LEGPIPE_RE",
    "model_name": "legpipe_obligations",
    "title": "Extract Legal Syntactic Relationships in Agreement clauses",
    "build": "3.4.1",
    "description": "This model extract syntactic relations between legal tokens in agreement clauses."
  },
  {
    "app": "FINNER_HEADERS",
    "model_name": "finner_headers",
    "title": "Split Financial Documents in sections",
    "build": "3.4.1",
    "description": "This model uses Name Entity Recognition to detect potential headers and subheaders in Financial Documents."
  },
  {
    "app": "ASSERTIONDL_PAST_ROLES",
    "model_name": "finassertiondl_past_roles",
    "language": "English",
    "title": "Identify Past Job Experiences of People in Organizations",
    "build": "3.4.1",
    "description": "This model uses Assertion Status to identify if a role, title, organization or date belongs to a past experience of a person."
  },
  {
    "app": "FINASSERTION_INCREASE_DECREASE",
    "model_name": "finassertion_increase_decrease_amounts",
    "language": "English",
    "title": "Understand Increased or Decreased Amounts and Percentages in Context",
    "build": "4.3.0",
    "description": "This demo shows how to use the Assertion Status model to identify if a mentioned amount or percentage is stated to be increased or decreased in context."
  },
  {
    "app": "FINASSERTION_TEMPORALITY",
    "model_name": "finassertion_temporality",
    "language": "English",
    "title": "Identify Temporality and Certainty in Financial texts",
    "build": "3.4.1",
    "description": "This model uses Assertion Status to identify if financial information extracted with Financial NER models is mentioned to happen in the past, present, future or are just possible facts."
  },
  {
    "app": "LEGASSERTION_TEMPORALITY",
    "model_name": "legassertion_temporality",
    "language": "English",
    "title": "Identify Temporality and Certainty in Legal texts",
    "build": "3.4.1",
    "description": "This model uses Assertion Status to identify if legal information extracted with Legal NER models is mentioned to happen in the past, present, future or are just possible facts."
  },
  {
    "app": "LEGALRE_INDEMNIFICATION",
    "model_name": "legre_indemnification",
    "language": "English",
    "title": "NER and Relation Extraction in Indemnification Clauses",
    "build": "3.4.1",
    "description": "This model showcases both NER and Relation Extraction on indemnification clauses, to extract the subject, the verb and the object.."
  },
  {
    "app": "CLASSIFY_LEGAL_DOCUMENTS",
    "model_name": "lawinsider",
    "language": "English",
    "title": "Classify Legal Documents into hundreds of types",
    "build": "3.4.1",
    "description": "This model shows how to use Longformers to classify documents into different types"
  },
  {
    "app": "ADE",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_ade_clinical",
    "title": "Detect Adverse Drug Events ",
    "build": "4.2.0",
    "description": "Detect adverse reactions of drugs in reviews, tweets, and medical text using pretrained NER model."
  },
  {
    "app": "ADE",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_ade_biobert",
    "title": "Detect Adverse Drug Events (biobert)",
    "build": "4.2.0",
    "description": "Detect adverse reactions of drugs in reviews, tweets, and medical text using pretrained NER model."
  },
  {
    "app": "ADE",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_ade_healthcare",
    "title": "Detect Adverse Drug Events (healthcare)",
    "build": "4.2.0",
    "description": "Detect adverse drug events in tweets, reviews, and medical text using pretrained NER model."
  },
  {
    "app": "ADE",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_ade_clinicalbert",
    "title": "Detect Adverse Drug Events (bert-clinical)",
    "build": "4.2.0",
    "description": "Detect adverse drug events in tweets, reviews, and medical text using pretrained NER model."
  },
  {
    "app": "ADE",
    "task": "Named_Entitiy_Recognition",
    "model_name": "bert_token_classifier_ner_ade",
    "title": "Detect Adverse Drug Events (BertForTokenClassification)",
    "build": "4.2.0",
    "description": "Detect adverse reactions of drugs in reviews, tweets, and medical text using the pretrained NER model."
  },
  {
    "app": "ADE",
    "task": "Named_Entitiy_Recognition",
    "model_name": "bert_token_classifier_ade_tweet_binary",
    "title": "Detect Adverse Drug Events (MedicalBertForTokenClassification)",
    "build": "4.2.0",
    "description": "Detect adverse reactions of drugs in texts excahnged over twitter. "
  },
  {
    "app": "ADE",
    "task": "Sequence_Classifier",
    "model_name": "classifierdl_ade_biobert",
    "title": "Classifier for Adverse Drug Events",
    "build": "4.2.0",
    "description": "Classify text/sentence in two categories: The sentence is talking about a possible ADE or The sentences doesn’t have any information about an ADE."
  },
  {
    "app": "ADE",
    "task": "Sequence_Classifier",
    "model_name": "classifierdl_ade_clinicalbert",
    "title": "Classifier for Adverse Drug Events using Clinical Bert",
    "build": "4.2.0",
    "description": "Classify text/sentence in two categories: The sentence is talking about a possible ADE or The sentences doesn’t have any information about an ADE."
  },
  {
    "app": "ADE",
    "task": "Sequence_Classifier",
    "model_name": "classifierdl_ade_conversational_biobert",
    "title": "Classifier for Adverse Drug Events in Small Conversations",
    "build": "4.2.0",
    "description": "Classify text/sentence in two categories: The sentence is talking about a possible ADE or The sentences doesn’t have any information about an ADE."
  },
  {
    "app": "ADE",
    "task": "Sequence_Classifier",
    "model_name": "bert_sequence_classifier_ade",
    "title": "Adverse Drug Events Classifier (BERT)",
    "build": "4.2.0",
    "description": "Classify text/sentence in two categories: The sentence is talking about a possible ADE or The sentences doesn’t have any information about an ADE."
  },
  {
    "app": "ADE",
    "task": "Sequence_Classifier",
    "model_name": "bert_sequence_classifier_ade_augmented",
    "title": "Adverse Drug Events Binary Classifier (BioBERT)",
    "build": "4.2.0",
    "description": "This model is a (BioBERT-based)  classifier that can classify tweets reporting ADEs (Adverse Drug Events)."
  },
  {
    "app": "ADE",
    "task": "Sequence_Classifier",
    "model_name": "distilbert_sequence_classifier_ade",
    "title": "Adverse Drug Events Classifier (DistilBERT)",
    "build": "4.2.0",
    "description": "Classify text/sentence in two categories: The sentence is talking about a possible ADE or The sentences doesn’t have any information about an ADE.(DistilBERT-based)"
  },
  {
    "app": "ADE",
    "task": "Assertion_Status",
    "model_name": "assertion_dl_large",
    "title": "Detect Assertion Status",
    "build": "4.2.0",
    "description": "Assign assertion status to clinical entities extracted by NER based on their context in the text."
  },
  {
    "app": "ADE",
    "task": "Assertion_Status",
    "model_name": "assertion_dl_healthcare",
    "title": "Detect Assertion Status",
    "build": "4.2.0",
    "description": "Assign assertion status to clinical entities extracted by NER based on their context in the text."
  },
  {
    "app": "ADE",
    "task": "Assertion_Status",
    "model_name": "assertion_jsl_augmented",
    "title": "Detect Assertion Status",
    "build": "4.2.0",
    "description": "This model classify the assertions made on given medical concepts as being present, absent, or possible in the patient, conditionally present in the patient under certain circumstances, hypothetically present in the patient at some future point, and mentioned in the patient report but associated with someoneelse "
  },
  {
    "app": "ADE",
    "task": "Assertion_Status",
    "model_name": "assertion_dl_biobert",
    "title": "Detect Assertion Status",
    "build": "4.2.0",
    "description": "This model assign assertion status to clinical entities extracted by NER based on their context in the text."
  },
  {
    "app": "ADE",
    "task": "Relation_Extraction",
    "model_name": "re_ade_clinical",
    "title": "Relation extraction between Drugs and ADE",
    "build": "4.2.0",
    "description": "This model is capable of Relating Drugs and adverse reactions caused by them; It predicts if an adverse event is caused by a drug or not."
  },
  {
    "app": "ADE",
    "task": "Relation_Extraction",
    "model_name": "re_ade_biobert",
    "title": "Relation extraction between Drugs and ADE (biobert)",
    "build": "4.2.0",
    "description": "This model is capable of Relating Drugs and adverse reactions caused by them; It predicts if an adverse event is caused by a drug or not."
  },
  {
    "app": "ADE",
    "task": "Relation_Extraction",
    "model_name": "redl_ade_biobert",
    "title": "Relation extraction between Drugs and ADE (ReDL)",
    "build": "4.2.0",
    "description": "This model is an end-to-end trained BioBERT model, capable of Relating Drugs and adverse reactions caused by them; It predicts if an adverse event is caused by a drug or not."
  },
  {
    "app": "FINNER_10Q_XLBR",
    "model_name": "finner_10q_xlbr",
    "language": "English",
    "title": "Extract 139 financial entities from 10-Q",
    "build": "3.4.1",
    "description": "This demo shows how to extract 139 financial entities on US Security Exchange Commission 10-Q filings"
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Name_Entitiy_Recognation",
    "model_name": "custom_ner_pipeline",
    "title": "Clinical Entity Recognition",
    "build": "4.2.3",
    "description": "Identify clinical entities relevant to pathology cases. Models used to extract entities include our [ner_jsl_enriched](lhttps://nlp.johnsnowlabs.com/2021/10/22/ner_jsl_enriched_en.html) and our [ner_oncology](https://nlp.johnsnowlabs.com/2022/10/25/ner_oncology_en.html). Candidate labels can be found in their corresponding model cards."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Assertion",
    "model_name": "assertion_dl",
    "title": "Assertion Status Detection",
    "build": "4.2.3",
    "description": "Assign an assertion status to extracted clinical entities, based on contextual information. Labels include: `ABSENT`, `PRESENT`, `CONDITIONAL`, `ASSOCIATED_WITH_SOMEONE_ELSE`, `HYPOTHETICAL`, `POSSIBLE`."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Resolver",
    "model_name": "sbiobertresolve_icdo_augmented",
    "title": "Clinical Entity Resolution",
    "build": "4.2.3",
    "description": "Map clinical findings to ICD-O-3 codes using Entity Resolvers."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Relation",
    "model_name": "re_oncology_wip",
    "title": "Relation Extraction",
    "build": "4.2.3",
    "description": "This relation extraction model identifies relations between dates and other clinical entities, between tumor mentions and their size, between anatomical entities and other clinical entities, and between tests and their results."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Relation",
    "model_name": "re_oncology_granular_wip",
    "title": "Relation Extraction",
    "build": "4.2.0",
    "description": "Using this relation extraction model, four relation types can be identified: is_date_of (between date entities and other clinical entities), is_size_of (between Tumor_Finding and Tumor_Size), is_location_of (between anatomical entities and other entities) and is_finding_of (between test entities and their results)."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Relation",
    "model_name": "re_oncology_biomarker_result_wip",
    "title": "Relation Extraction",
    "build": "4.2.3",
    "description": "This relation extraction model links Biomarker and Oncogene extractions to their corresponding Biomarker_Result extractions."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Relation",
    "model_name": "re_oncology_location_wip",
    "title": "Relation Extraction",
    "build": "4.2.3",
    "description": "This relation extraction model links extractions from anatomical entities (such as Site_Breast or Site_Lung) to other clinical entities (such as Tumor_Finding or Cancer_Surgery)."
  },
  {
    "app": "CLEVELAND_CLINIC",
    "task": "Deidentification",
    "model_name": "custom_deid_pipeline",
    "title": "De-identification",
    "build": "4.2.3",
    "description": "Deidentify free text documents by either masking or obfuscating PHI information using out of the box Spark NLP models that enforce GDPR and HIPPA compliance."
  },
  {
    "app": "SOCIAL_DETERMINANT",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_sdoh_mentions",
    "title": "Detect Social Determinants of Health Mentions",
    "build": "4.2.4",
    "description": "This model intended for detecting Social Determinants of Health mentions  from clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT",
    "task": "Named_Entitiy_Recognition",
    "model_name": "ner_sdoh_slim_wip",
    "title": "Detect Social Determinants of Health Mentions",
    "build": "4.2.4",
    "description": "This model intended for detecting Social Determinants of Health mentions  from clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT",
    "task": "Sequence_Classifier",
    "model_name": "bert_sequence_classifier_sdoh_community_absent_status",
    "title": "SDOH Community Absent Binary Classification",
    "build": "4.2.4",
    "description": "This model classifies related to the loss of social support such as a family member or friend in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT",
    "task": "Sequence_Classifier",
    "model_name": "bert_sequence_classifier_sdoh_community_present_status",
    "title": "SDOH Community Present Binary Classification",
    "build": "4.2.4",
    "description": "This model classifies related to social support such as a family member or friend in the clinical documents."
  },
  {
    "app": "FINNER_CAPITAL_CALLS",
    "model_name": "finner_capital_calls",
    "language": "English",
    "title": "Extract information from Capital Calls",
    "build": "3.4.1",
    "description": "This demo shows how to extract financial and contact entities from Capital Call Notices.\n\nNOTE: The documents have been deidentified, so you may see non-matching amounts or other detected entities.."
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh",
    "title": "Social Determinants of Health",
    "build": "5.0.2",
    "description": "This model extracts terminology related to Social Determinants of Health from various kinds of biomedical documents"
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_mentions",
    "title": "Detect Social Determinants of Health Mentions",
    "build": "5.0.2",
    "description": "This model intended for detecting Social Determinants of Health mentions from clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_income_social_status",
    "title": "Extract Income and Social Status Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This model extracts income and social status information related to Social Determinants of Health from various kinds of biomedical documents"
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_demographics",
    "title": "Extract Demographic Entities from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This model extracts demographic information related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_social_environment",
    "title": "Detect SDOH of Social Environment",
    "build": "5.0.2",
    "description": "This model extracts social environment information related to Social Determinants of Health from various kinds of documents"
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_access_to_healthcare",
    "title": "Extract entities related to access to healthcare from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This model extracts access to healthcare information related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_community_condition",
    "title": "Identify and extract entities associated with different community conditions from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This model identifies and extracts different community conditions information related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_substance_usage",
    "title": "Extract entities associated with substance usage from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This model extracts substance usage information related to Social Determinants of Health from various kinds of documents"
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_health_behaviours_problems",
    "title": "Extract entities associated with health behaviors and problems from Social Determinants of Health Texts",
    "build": "5.0.2",
    "description": "This model extracts health behaviors and problems information related to Social Determinants of Health from various kinds of documents"
  },
  {
    "app": "SOCIAL_DETERMINANT_NER",
    "model_name": "ner_sdoh_slim_wip",
    "title": "Detect Social Determinants of Health Mentions",
    "build": "5.0.2",
    "description": "This model intended for detecting Social Determinants of Health mentions from clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_transportation_insecurity_sbiobert_cased_mli",
    "title": "SDOH Transportation Insecurity For Classification",
    "build": "5.1.2",
    "description": "This model classifies transportation-related insecurity within the provided text."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_economics_binary_sbiobert_cased_mli",
    "title": "SDOH Economics Status For Binary Classification",
    "build": "5.1.2",
    "description": "This model classifies related to social economics status in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_alcohol_usage_binary_sbiobert_cased_mli",
    "title": "SDOH Alcohol Usage For Binary Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting alcohol use in clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_alcohol_usage_sbiobert_cased_mli",
    "title": "SDOH Alcohol Usage For Classification",
    "build": "5.1.2",
    "description": "This model is intended for detecting alcohol use in clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_substance_usage_binary_sbiobert_cased_mli",
    "title": "SDOH Substance Usage For Binary Classification",
    "build": "5.1.2",
    "description": "This model is intended for detecting substance use in clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_tobacco_usage_sbiobert_cased_mli",
    "title": "SDOH Tobacco Usage For Classification",
    "build": "5.1.2",
    "description": "This model is intended for detecting tobacco use in clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_mental_health_clinical",
    "title": "SDOH Mental Health For Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting if the patient has mental health problems in clinical notes. "
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli",
    "title": "SDOH Housing Insecurity For Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting whether the patient has housing insecurity."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_under_treatment_sbiobert_cased_mli",
    "title": "SDOH Under Treatment For Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting if the patient is under treatment or not."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_insurance_status_sbiobert_cased_mli",
    "title": "SDOH Insurance Status For Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting if the patient has mental health problems in clinical notes. "
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_insurance_coverage_sbiobert_cased_mli",
    "title": "SDOH Insurance Coverage For Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting whether the patient has housing insecurity."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_insurance_type_sbiobert_cased_mli",
    "title": "SDOH Under Treatment For Classification",
    "build": "5.1.2",
    "description": "This Generic Classifier model is intended for detecting if the patient is under treatment or not."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_financial_insecurity_mpnet",
    "title": "SDOH Financial Insecurity For Classification",
    "build": "5.1.2",
    "description": "This model classifies related to financial status in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "genericclassifier_sdoh_food_insecurity_mpnet",
    "title": "SDOH Food Insecurity For Classification",
    "build": "5.1.2",
    "description": "This model classifies related to food status in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "bert_sequence_classifier_sdoh_community_present_status",
    "title": "SDOH Community Present Binary Classification",
    "build": "5.1.2",
    "description": "This model classifies related to social support such as a family member or friend in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_CLASSIFICATION",
    "model_name": "bert_sequence_classifier_sdoh_community_absent_status",
    "title": "SDOH Community Absent Binary Classification",
    "build": "5.1.2",
    "description": "This model classifies related to the loss of social support such as a family member or friend in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_TOBACCO",
    "model_name": "genericclassifier_sdoh_tobacco_usage_sbiobert_cased_mli",
    "title": "SDOH Tobacco Usage For Classification",
    "build": "4.2.8",
    "description": "This model is intended for detecting tobacco use in clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_ALCOHOL",
    "model_name": "genericclassifier_sdoh_alcohol_usage_sbiobert_cased_mli",
    "title": "SDOH Alcohol Usage For Classification",
    "build": "4.2.8",
    "description": "This model is intended for detecting alcohol use in clinical notes."
  },
  {
    "app": "SOCIAL_DETERMINANT_SEQUENCE_CLASSIFICATION",
    "model_name": "bert_sequence_classifier_sdoh_frailty_vulnerability",
    "title": "Social Determinants of Healthcare for Frailty and Vulnerability Classifier",
    "build": "5.1.4",
    "description": "This model classifies related to frailty and vulnerability status in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_SEQUENCE_CLASSIFICATION",
    "model_name": "bert_sequence_classifier_sdoh_mental_health",
    "title": "Social Determinants of Healthcare for Mental Health Classifier",
    "build": "5.1.4",
    "description": "This model classifies related to mental health status in the clinical documents."
  },
  {
    "app": "SOCIAL_DETERMINANT_SEQUENCE_CLASSIFICATION",
    "model_name": "bert_sequence_classifier_sdoh_violence_abuse",
    "title": "Social Determinants of Healthcare for Violence and Abuse Classifier",
    "build": "5.1.4",
    "description": "This model classifies related to violence and abuse status in the clinical documents."
  },
  {
    "app": "SECTION_HEADER",
    "model_name": "bert_sequence_classifier_clinical_sections",
    "title": "Medical Document Section Headers",
    "build": "5.1.4",
    "description": "Classifies the text assuming that the section header can be part of the text."
  },
  {
    "app": "SECTION_HEADER",
    "model_name": "bert_sequence_classifier_clinical_sections_headless",
    "title": "Assigning titles to untitled medical texts",
    "build": "5.1.4",
    "description": "Classifies the text wihtout the section name in the text."
  },
  {
    "app": "VOICE_OF_THE_PATIENTS",
    "model_name": "ner_vop_slim_wip",
    "title": "Voice of the Patients",
    "build": "4.3.1",
    "description": "This model extracts healthcare-related terms from the documents transferred from the patient’s own sentences."
  },
  {
    "app": "NER_SDOH_HEALTH_BEHAVIOURS_PROBLEMS",
    "model_name": "ner_sdoh_health_behaviours_problems_wip",
    "title": "Extract Health and Behaviours Problems Entities from Social Determinants of Health Texts",
    "build": "4.3.1",
    "description": "This model extracts health and behaviours problems related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "NER_SDOH_ACCESS_TO_HEALTHCARE",
    "model_name": "ner_sdoh_access_to_healthcare_wip",
    "title": "Extract Access to Healthcare Entities from Social Determinants of Health Texts",
    "build": "4.3.1",
    "description": "This model extracts access to healthcare information related to Social Determinants of Health from various kinds of biomedical documents."
  },
  {
    "app": "NER_SDOH_COMMUNITY_CONDITION",
    "model_name": "ner_sdoh_community_condition_wip",
    "title": "Extract Community Condition Entities from Social Determinants of Health Texts",
    "build": "4.3.1",
    "description": "This model extracts community condition information related to Social Determinants of Health from various kinds of biomedical documents"
  },
  {
    "app": "SPEECH_RECOGNITION",
    "model_name": "asr_wav2vec2_base_960h",
    "title": "Speech Recognition",
    "build": "4.3.1",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION",
    "model_name": "asr_wav2vec2_base_100h_test",
    "title": "Speech Recognition",
    "build": "4.3.1",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION",
    "model_name": "asr_wav2vec2_base_100h_by_facebook",
    "title": "Speech Recognition",
    "build": "4.3.1",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION",
    "model_name": "asr_wav2vec2_base_100h_ngram",
    "title": "Speech Recognition",
    "build": "4.3.1",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION",
    "model_name": "asr_wav2vec2_base_100h_13K_steps",
    "title": "Speech Recognition",
    "build": "4.3.1",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION_WITH_WHISPER",
    "model_name": "asr_whisper_base",
    "title": "Speech Recognition with Whisper",
    "build": "5.1.4",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION_WITH_WHISPER",
    "model_name": "asr_whisper_tiny",
    "title": "Speech Recognition with Whisper",
    "build": "5.1.4",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "SPEECH_RECOGNITION_WITH_WHISPER",
    "model_name": "asr_whisper_small",
    "title": "Speech Recognition with Whisper",
    "build": "5.1.4",
    "description": "This demo transcribes audio files into texts using advanced speech recognition models."
  },
  {
    "app": "PDF_CHART_TO_TEXT",
    "model_name": "chart_to_text_v1",
    "title": "Chart to Text",
    "build": "4.4.0",
    "description": "Obtain a description of the charts in the input document by using our Spark OCR model."
  },
  {
    "app": "ICD10CM_MS_DRG_MAPPER",
    "model_name": "text",
    "resolver_name":"sbiobertresolve_icd10cm_augmented_billable_hcc",
    "title": "Mapping ICD-10-CM Codes with Corresponding Medicare Severity-Diagnosis Related Group",
    "build": "5.1.0",
    "description": "This pretrained model maps ICD-10-CM codes with their corresponding Medicare Severity-Diagnosis Related Group (MS-DRG)."
  }
  ,
  {
    "app": "ICD10CM_MS_DRG_MAPPER",
    "model_name": "code",
    "title": "Mapping ICD-10-CM Codes with Corresponding Medicare Severity-Diagnosis Related Group",
    "build": "5.1.0",
    "description": "This pretrained model maps ICD-10-CM codes with their corresponding Medicare Severity-Diagnosis Related Group (MS-DRG)."
  } 
  ,
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_bacterial_species_langtest",
    "subtitle": "Detect Bacterial Species",
    "test_type": "lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "81% 80% 74% 71% 76.04%",
    "after_pass_rate": "96% 83% 89% 89% 90.65%",
    "build": "5.1.3",
    "description": "This model detects different types of species of bacteria in clinical texts."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_biomarker_langtest",
    "subtitle": "Extraction of Biomarker Information",
    "test_type": "add_ocr_typo add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "61% 81% 48% 33% 7% 45.49%",
    "after_pass_rate": "84% 82% 84% 75% 70% 78.84%",
    "build": "5.1.3",
    "description": "This model is trained to extract biomarkers, therapies, oncological, and other general concepts from text."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_bionlp_langtest",
    "subtitle": "Detect Cancer Genetics",
    "test_type": "add_ocr_typo lowercase strip_all_punctuation titlecase uppercase weighted_avg",
    "before_pass_rate": "48% 63% 83% 44% 10% 49.56%",
    "after_pass_rate": "90% 76% 83% 71% 64% 76.70%",
    "build": "5.1.3",
    "description": "This model is trained to extract biology and genetics terms from text."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_cellular_langtest",
    "subtitle": "Detect Cellular/Molecular Biology Entities",
    "test_type": "add_ocr_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "37% 58% 30% 10% 33.74%",
    "after_pass_rate": "84% 78% 77% 71% 77.52%",
    "build": "5.1.3",
    "description": "This model is trained to extract molecular biology-related terms."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_chemprot_clinical_langtest",
    "subtitle": "Detect Chemical Compounds and Genes",
    "test_type": "add_ocr_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "58% 61% 55% 24% 49.53%",
    "after_pass_rate": "92% 78% 78% 78% 81.47%",
    "build": "5.1.3",
    "description": "This is a pre-trained model that can be used to automatically detect all chemical compounds and gene mentions from medical texts."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_clinical_langtest",
    "subtitle": "Detect Problems, Tests and Treatments",
    "test_type": "add_typo lowercase strip_punctuation titlecase uppercase weighted_avg",
    "before_pass_rate": "57% 88% 96% 71% 45% 71.72%",
    "after_pass_rate": "86% 90% 97% 79% 72% 84.75%",
    "build": "5.1.0",
    "description": "This model is capable of automatically identifying the entities of PROBLEM, TEST, and TREATMENT in medical texts."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_clinical_large_langtest",
    "subtitle": "Detect Problems, Tests and Treatments",
    "test_type": "add_ocr_typo titlecase uppercase weighted_avg",
    "before_pass_rate": "48% 63% 39% 50.66%",
    "after_pass_rate": "82% 76% 76% 77.64%",
    "build": "5.1.3",
    "description": "This model is capable of automatically identifying the entities of PROBLEM, TEST, and TREATMENT in medical texts."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_deid_enriched_langtest",
    "subtitle": "Detect PHI for Deidentification",
    "test_type": "lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "93% 90% 97% 95% 94.78%",
    "after_pass_rate": "98% 91% 99% 97% 97.48%",
    "build": "5.1.3",
    "description": "Automatically identify protected health information such as Name, Age, Date, Contact, ID, Location and Profession in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_deid_generic_augmented_langtest",
    "subtitle": "Detect PHI for Deidentification",
    "test_type": "add_ocr_typo lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "97% 94% 90% 97% 94% 95.09%",
    "after_pass_rate": "97% 98% 91% 98% 97% 97.13%",
    "build": "5.1.0",
    "description": "Automatically identify protected health information such as Name, Age, Date, Contact, ID , Location and Profession in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_deid_large_langtest",
    "subtitle": "Detect PHI for Deidentification",
    "test_type": "add_ocr_typo add_typo lowercase strip_all_punctuation titlecase uppercase weighted_avg",
    "before_pass_rate": "87% 96% 78% 89% 91% 81% 86.98%",
    "after_pass_rate": "95% 97% 96% 92% 97% 94% 95.22%",
    "build": "5.1.3",
    "description": "Automatically identify protected health information such as Name, Age, Date, Contact, ID, Location, Profession, HealthPlan and URL in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_deid_subentity_augmented_langtest",
    "subtitle": "Detect PHI for Deidentification",
    "test_type": "add_typo lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "97% 94% 91% 98% 94% 95.78%",
    "after_pass_rate": "99% 98% 92% 99% 97% 97.73%",
    "build": "5.1.0",
    "description": "Automatically identify protected health information up to 23 entities including Patient, Doctor, Hospital, MedicalRecord, IDNum , Location, Profession etc in clinical documents using our pretrained Spark NLP models."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_diseases_langtest",
    "subtitle": "Detect Diseases",
    "test_type": "add_ocr_typo lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "67% 81% 85% 61% 6% 60.01%%",
    "after_pass_rate": "93% 87% 85% 86% 79% 86.03%",
    "build": "5.1.3",
    "description": "This model extracts mentions of different types of disease from medical text."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_eu_clinical_condition_langtest",
    "subtitle": "Detect Clinical Conditions",
    "test_type": "add_abbreviation add_ocr_typo add_typo strip_all_punctuation swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "93% 86% 90% 95% 70% 76% 56% 81.49%",
    "after_pass_rate": "94% 88% 93% 96% 84% 84% 82% 89.11%",
    "build": "5.1.3",
    "description": "This model extracts clinical conditions entities from clinical texts."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_events_clinical_langtest",
    "subtitle": "Detect Clinical Events",
    "test_type": "add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "73% 83% 44% 30% 57.47%",
    "after_pass_rate": "74% 85% 68% 58% 71.41%",
    "build": "5.1.3",
    "description": "This model can be used to detect clinical events in medical text."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_human_phenotype_gene_clinical_langtest",
    "subtitle": "Detect Genes and Human Phenotypes",
    "test_type": "add_ocr_typo lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "78% 67% 83% 10% 9% 48.79%",
    "after_pass_rate": "85% 86% 85% 80% 78% 82.60%",
    "build": "5.1.3",
    "description": "This model detects mentions of genes and human phenotypes (hp) in medical text."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_living_species_langtest",
    "subtitle": "Detect Living Species",
    "test_type": "add_ocr_typo add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "35% 91% 87% 80% 49% 68.42%",
    "after_pass_rate": "95% 93% 94% 88% 85% 90.86%",
    "build": "5.1.3",
    "description": "Extract living species from clinical texts which is critical to scientific disciplines like medicine, biology, ecology/biodiversity, nutrition, and agriculture."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_anatomy_general_langtest",
    "subtitle": "Extract Anatomical Entities from Oncology Texts",
    "test_type": "add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "86% 93% 55% 9% 60.71%",
    "after_pass_rate": "89% 94% 83% 81% 86.69%",
    "build": "5.1.2",
    "description": "This model extracts anatomical entities using an unspecific label."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_anatomy_granular_langtest",
    "subtitle": "Extract Granular Anatomical Entities from Oncology Texts",
    "test_type": "add_typo swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "86% 79% 58% 6% 57.06%",
    "after_pass_rate": "88% 80% 79% 77% 81.13%",
    "build": "5.1.2",
    "description": "This model extracts mentions of anatomical entities using granular labels."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_demographics_langtest",
    "subtitle": "Extract Demographic Entities from Oncology Texts",
    "test_type": "add_ocr_typo add_typo titlecase uppercase weighted_avg",
    "before_pass_rate": "49% 94% 76% 0% 54.72%",
    "after_pass_rate": "73% 96% 97% 98% 91.04%",
    "build": "5.1.2",
    "description": "This model extracts demographic information from oncology texts, including age, gender, and smoking status."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_diagnosis_langtest",
    "subtitle": "Detect Entities Related to Cancer Diagnosis",
    "test_type": "titlecase uppercase weighted_avg",
    "before_pass_rate": "80% 61% 70.30%",
    "after_pass_rate": "81% 87% 84.03%",
    "build": "5.1.2",
    "description": "This model extracts entities related to cancer diagnosis, such as Metastasis, Histological_Type, or Invasion."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_langtest",
    "subtitle": "Detect Oncology-Specific Entities",
    "test_type": "add_ocr_typo swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "89% 77% 78% 71% 79.27%",
    "after_pass_rate": "90% 80% 92% 92% 90.31%",
    "build": "5.1.2",
    "description": "This model extracts more than 40 oncology-related entities, including therapies, tests, and staging"
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_posology_langtest",
    "subtitle": "Extract Cancer Therapies and Granular Posology Information",
    "test_type": "add_abbreviation add_ocr_typo add_punctuation add_slangs add_typo lowercase number_to_word strip_all_punctuation swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "72% 58% 94% 66% 88% 96% 94% 92% 80% 64% 29% 72.23%",
    "after_pass_rate": "76% 74% 100% 75% 90% 97% 95% 93% 81% 78% 79% 83.24%",
    "build": "5.1.2",
    "description": "This model extracts cancer therapies (Cancer_Surgery, Radiotherapy, and Cancer_Therapy) and posology information at a granular level."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_response_to_treatment_langtest",
    "subtitle": "Extract Mentions of Response to Cancer Treatment",
    "test_type": "add_ocr_typo add_slangs lowercase strip_punctuation titlecase uppercase weighted_avg",
    "before_pass_rate": "58% 97% 87% 97% 38% 7% 63.93%",
    "after_pass_rate": "81% 98% 93% 98% 83% 78% 88.54%",
    "build": "5.1.2",
    "description": "This model extracts entities related to the patient's response to the oncology treatment, including clinical response and changes in tumor size."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_test_langtest",
    "subtitle": "Extract Oncology Tests",
    "test_type": "add_ocr_typo swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "89% 77% 78% 71% 79.27%",
    "after_pass_rate": "90% 80% 92% 92% 90.31%%",
    "build": "5.1.2",
    "description": "This model extracts mentions of tests from oncology texts, including pathology tests and imaging tests."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_therapy_langtest",
    "subtitle": "Detect Entities Related to Cancer Therapies",
    "test_type": "add_ocr_typo add_typo lowercase strip_punctuation titlecase uppercase weighted_avg",
    "before_pass_rate": "46% 81% 84% 96% 44% 4% 58.88%",
    "after_pass_rate": "79% 88% 89% 97% 79% 83% 85.89%",
    "build": "5.1.2",
    "description": "This model extracts entities related to oncology therapies using granular labels, including mentions of treatments, posology information, and line of therapy."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_tnm_langtest",
    "subtitle": "Extract Entities Related to TNM Staging",
    "test_type": "add_typo lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "94% 94% 77% 78% 61% 81.22%",
    "after_pass_rate": "95% 95% 78% 84% 92% 90.33%",
    "build": "5.1.2",
    "description": "This model extracts staging information and mentions related to tumors, lymph nodes, and metastases."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_oncology_unspecific_posology_langtest",
    "subtitle": "Extract Cancer Therapies and Posology Information",
    "test_type": "add_ocr_typo add_slangs add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "49% 98% 87% 87% 53% 7% 63.69%",
    "after_pass_rate": "82% 99% 89% 91% 84% 79% 87.47%",
    "build": "5.1.2",
    "description": "This model extracts mentions of treatments and posology information using unspecific labels (low granularity)."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_anatomy_langtest",
    "subtitle": "Extract Anatomical Entities from Voice of the Patient Documents",
    "test_type": "add_abbreviation add_ocr_typo add_typo swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "81% 53% 92% 89% 83% 28% 79.87%",
    "after_pass_rate": "82% 75% 93% 91% 84% 89% 89.70%",
    "build": "5.1.2",
    "description": "This model extracts healthcare-related terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_clinical_dept_langtest",
    "subtitle": "Extract Clinical Department Entities from Voice of the Patient Documents",
    "test_type": "add_abbreviation add_ocr_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "64% 52% 94% 75% 18% 67.99%",
    "after_pass_rate": "70% 76% 95% 80% 83% 84.43%",
    "build": "5.1.2",
    "description": "This model extracts medical devices and clinical department mentions terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_demographic_langtest",
    "subtitle": "Extract Demographic Entities from Voice of the Patient Documents",
    "test_type": "add_abbreviation add_ocr_typo add_typo number_to_word swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "77% 59% 94% 81% 89% 85% 45% 74.84%",
    "after_pass_rate": "86% 100% 99% 93% 95% 100% 72% 91.34%",
    "build": "5.1.2",
    "description": "This model extracts demographic terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_langtest",
    "subtitle": "Extract Clinical Entities from Voice of the Patient Documents",
    "test_type": "add_ocr_typo add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "32% 76% 91% 50% 9% 50.74%",
    "after_pass_rate": "79% 79% 92% 72% 70% 78.21%",
    "build": "5.1.2",
    "description": "This model extracts healthcare-related terms from the documents transferred from the patient's own sentences."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_problem_langtest",
    "subtitle": "Extract Clinical Problem Entities from Voice of the Patient Documents",
    "test_type": "add_abbreviation add_ocr_typo add_typo titlecase uppercase weighted_avg",
    "before_pass_rate": "73% 54% 86% 58% 11% 56%",
    "after_pass_rate": "74% 77% 88% 79% 77% 79%",
    "build": "5.1.2",
    "description": "This model extracts clinical problems from the documents transferred from the patient's own sentences using a granular taxonomy."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_problem_reduced_langtest",
    "subtitle": "Extract Clinical Problem Entities (low granularity) from Voice of the Patient Documents",
    "test_type": "add_abbreviation add_ocr_typo add_punctuation add_slangs add_typo lowercase number_to_word strip_all_punctuation strip_punctuation swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "72% 58% 94% 66% 88% 96% 94% 92% 98% 80% 64% 29% 74.89%",
    "after_pass_rate": "76% 74% 100% 75% 90% 97% 95% 93% 98% 81% 78% 79% 84.75%",
    "build": "5.1.2",
    "description": "This model extracts clinical problems from the documents transferred from the patient's own sentences. The taxonomy is reduced (one label for all clinical problems)."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_temporal_langtest",
    "subtitle": "Extract Temporal Entities from Voice of the Patient Documents",
    "test_type": "add_ocr_typo add_typo lowercase swap_entities titlecase uppercase weighted_avg",
    "before_pass_rate": "40% 92% 98% 76% 75% 30% 67.76%",
    "after_pass_rate": "65% 94% 98% 76% 82% 88% 83.73%",
    "build": "5.1.2",
    "description": "This model extracts temporal references from the documents transferred from the patient's own sentences."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_test_langtest",
    "subtitle": "Extract Test Entities from Voice of the Patient Documents",
    "test_type": "add_abbreviation add_ocr_typo add_typo lowercase titlecase uppercase weighted_avg",
    "before_pass_rate": "67% 44% 87% 89% 67% 18% 61.47%",
    "after_pass_rate": "73% 76% 89% 90% 84% 79% 81.84%",
    "build": "5.1.2",
    "description": "This model extracts test mentions from the documents transferred from the patient's own sentences."
  },
  {
    "app": "LANGTEST_NER",
    "model_name": "ner_vop_treatment_langtest",
    "subtitle": "Extract Treatment Entities from Voice of the Patient Documents",
    "test_type": "add_ocr_typo add_typo titlecase uppercase weighted_avg",
    "before_pass_rate": "57% 90% 64% 29% 59.47%",
    "after_pass_rate": "71% 92% 84% 83% 82.60%",
    "build": "5.1.2",
    "description": "This model extracts treatments mentioned in documents transferred from the patient's own sentences."
  }
]