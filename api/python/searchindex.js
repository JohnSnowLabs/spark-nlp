Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/prompt_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/prompt_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.prompt_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 106, 107, 108, 111, 112, 113, 116, 117, 118, 119, 121, 123, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 164, 165, 166, 168, 169, 171, 172, 174, 177, 179, 180, 181, 182, 183, 184, 186, 187, 191, 192, 198, 199, 203, 204, 205, 208, 209, 214, 216, 220, 221, 224, 225, 226, 228, 229, 230], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 111, 116, 117, 118, 119, 120, 123, 124, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 166, 168, 171, 172, 180, 181, 182, 183, 192, 196, 205, 208, 209, 211, 212, 214, 221, 223, 225, 226, 228, 229, 230, 231], "quick": [0, 221, 226], "refer": [0, 1, 5, 8, 55, 57, 59, 61, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 91, 92, 93, 95, 96, 97, 103, 120, 123, 124, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 168, 170, 171, 180, 192, 225, 227, 228], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 63, 65, 66, 68, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 86, 87, 89, 91, 95, 97, 98, 100, 105, 106, 107, 111, 112, 116, 117, 118, 121, 123, 126, 131, 134, 136, 143, 156, 157, 164, 165, 168, 171, 174, 180, 181, 191, 193, 196, 198, 211, 212, 216, 221, 225, 230], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 186, 187, 192, 196, 198, 203, 204, 205, 209, 211, 221, 225, 228, 229], "up": [0, 1, 5, 8, 25, 41, 60, 69, 73, 78, 79, 83, 84, 89, 91, 93, 103, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192, 198, 221, 225, 228, 229], "your": [0, 1, 25, 41, 46, 63, 68, 77, 78, 87, 89, 93, 106, 107, 111, 112, 116, 117, 118, 121, 123, 124, 129, 134, 135, 136, 154, 156, 161, 163, 168, 172, 223, 225, 228, 229, 231], "environ": [0, 69, 222], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 74, 78, 93, 103, 143, 144, 168], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 67, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 111, 112, 117, 118, 120, 121, 123, 124, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 165, 168, 172, 173, 183, 198], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 103, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 177, 208, 209, 216, 225, 228], "shell": 0, "packag": [0, 70, 76, 136, 205, 222, 223], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 111, 112, 117, 118, 120, 121, 123, 124, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 165, 168, 183, 198], "nlp_2": [0, 198], "12": [0, 70, 95, 96, 97, 103, 108, 110, 116, 129, 154, 166, 179, 197, 198, 208, 214, 216, 224], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 177, 179, 180, 183, 184, 197, 198, 201, 204, 205, 208, 211, 212, 214, 215, 225, 226], "submit": [0, 205, 221], "extern": [0, 103, 106, 111, 112, 118, 154, 160, 182, 196, 211, 212, 214, 215], "jar": [0, 198], "after": [0, 62, 63, 65, 78, 87, 88, 93, 108, 110, 116, 123, 138, 145, 163, 184, 205, 224, 225], "compil": 0, "build": [0, 76, 77, 87, 88, 100, 103, 107, 139, 141, 143, 147, 150, 205, 221], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 196, 197, 198, 204, 205, 209, 211, 214, 215, 216, 221, 222, 224, 225, 226, 228, 229, 230, 231], "built": [0, 25, 41, 138, 180], "top": [0, 5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 57, 59, 60, 70, 103, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 180, 192], "apach": [0, 86, 180, 198], "x": [0, 41, 197, 211, 231], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 120, 121, 123, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 165, 168, 171, 172, 173, 180, 181, 184, 192, 205, 208, 209, 215, 221, 222, 224, 225, 226, 227, 228, 229], "you": [0, 14, 15, 20, 33, 45, 51, 63, 65, 66, 68, 69, 73, 75, 77, 79, 86, 87, 89, 100, 108, 119, 123, 142, 144, 147, 172, 174, 179, 181, 198, 205, 209, 214, 216, 221, 223, 225, 226, 229, 230, 231], "need": [0, 5, 7, 8, 10, 14, 63, 65, 69, 73, 77, 79, 86, 87, 94, 98, 100, 103, 108, 111, 117, 118, 121, 126, 129, 132, 135, 136, 139, 143, 146, 147, 154, 156, 157, 164, 165, 169, 177, 179, 181, 205, 209, 211, 212, 214, 221, 223, 225, 226, 229, 231], "java": [0, 105, 152, 185, 186, 194, 200, 201, 204, 209], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 57, 63, 65, 67, 70, 71, 72, 73, 74, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 108, 113, 118, 119, 123, 124, 126, 139, 148, 154, 166, 168, 211, 216], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 63, 65, 66, 69, 70, 71, 74, 76, 77, 80, 82, 83, 85, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 111, 113, 116, 118, 119, 120, 121, 123, 129, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 158, 160, 168, 172, 179, 181, 182, 183, 191, 192, 193, 197, 198, 205, 209, 215, 216, 221, 222, 223, 224, 225, 226, 229, 230, 231], "note": [0, 5, 7, 8, 14, 15, 20, 25, 33, 41, 45, 46, 51, 60, 68, 70, 73, 77, 79, 80, 84, 87, 89, 94, 95, 97, 103, 118, 123, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 179, 198, 230], "sinc": [0, 67, 69, 84, 103, 139, 141, 198, 225, 226, 230], "version": [0, 8, 67, 73, 77, 79, 84, 125, 126, 142, 148, 149, 160, 181, 187, 192, 198, 203, 204, 208, 209, 225, 230], "6": [0, 25, 46, 59, 71, 72, 76, 80, 103, 107, 112, 113, 119, 124, 129, 136, 137, 149, 156, 166, 198, 212, 216, 225], "deprec": [0, 198], "If": [0, 8, 12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 57, 59, 60, 61, 69, 89, 94, 98, 105, 108, 110, 116, 117, 118, 121, 126, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 160, 192, 198, 204, 205, 209, 221, 223, 225], "consid": [0, 66, 94, 100, 103, 123, 136, 142, 144, 154, 156, 157, 159, 163, 198, 209], "stick": [0, 198], "lower": [0, 67, 70, 103, 123, 152, 154, 170, 198], "7": [0, 9, 46, 59, 71, 72, 76, 108, 110, 124, 129, 139, 141, 145, 147, 148, 173, 214, 216, 224], "we": [0, 5, 7, 8, 25, 41, 57, 59, 61, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 91, 92, 93, 95, 96, 97, 103, 117, 118, 121, 123, 132, 136, 137, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 154, 156, 165, 179, 197, 221, 224, 225, 226, 229, 230, 231], "recommend": [0, 60, 80, 97, 123, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151], "4": [0, 5, 8, 71, 72, 73, 76, 79, 80, 82, 83, 84, 86, 94, 111, 117, 119, 123, 124, 129, 136, 137, 139, 143, 146, 148, 150, 160, 166, 212, 216], "It": [0, 8, 12, 14, 15, 18, 20, 24, 25, 27, 29, 31, 33, 36, 41, 43, 45, 46, 47, 49, 51, 52, 56, 57, 59, 60, 66, 67, 69, 71, 72, 74, 76, 77, 78, 83, 87, 88, 93, 95, 96, 98, 103, 113, 135, 136, 137, 138, 144, 147, 149, 152, 154, 156, 157, 163, 173, 179, 209, 224, 229], "have": [0, 5, 14, 15, 20, 25, 33, 41, 45, 46, 51, 68, 69, 70, 74, 77, 82, 87, 88, 94, 103, 111, 113, 116, 117, 118, 119, 123, 129, 131, 132, 138, 139, 141, 142, 146, 147, 148, 149, 157, 166, 184, 200, 225, 226, 229], "basic": [0, 59, 103, 131, 181, 224], "knowledg": [0, 77, 103, 147, 148, 149, 174], "framework": [0, 7, 69, 136, 137, 144, 151], "work": [0, 8, 57, 77, 82, 83, 91, 105, 123, 136, 137, 141, 143, 144, 147, 151, 161, 224, 226, 230], "befor": [0, 67, 69, 94, 108, 110, 137, 151, 152, 156, 164, 168, 186, 204, 221], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 105, 106, 107, 108, 111, 112, 117, 118, 121, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 161, 163, 168, 171, 180, 182, 209, 222, 223, 227, 230], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 60, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 179, 180, 181, 183, 184, 205, 208, 211, 212, 214, 216, 221, 225, 226, 228, 229, 230], "first": [0, 2, 76, 78, 79, 80, 82, 86, 93, 95, 96, 103, 111, 117, 118, 119, 131, 137, 144, 145, 146, 150, 151, 152, 154, 159, 164, 172, 181, 184, 191, 221, 225, 226, 230], "let": [0, 77, 123, 163, 225], "": [0, 1, 11, 14, 15, 17, 20, 21, 24, 26, 29, 30, 33, 35, 38, 42, 45, 48, 51, 57, 59, 60, 61, 67, 69, 70, 73, 74, 76, 77, 78, 79, 83, 86, 87, 88, 93, 95, 96, 98, 103, 111, 118, 121, 123, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 163, 164, 165, 168, 169, 173, 179, 185, 186, 192, 194, 197, 200, 204, 205, 221, 224, 225, 226, 229], "make": [0, 56, 57, 59, 67, 74, 83, 84, 95, 96, 103, 123, 124, 132, 135, 136, 137, 142, 145, 150, 156, 227, 231], "sure": [0, 135, 136], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 25, 41, 46, 68, 69, 71, 72, 78, 87, 90, 93, 94, 100, 118, 123, 124, 126, 129, 136, 143, 146, 161, 168, 179, 182, 197, 211, 212, 214, 215, 225, 226, 229, 231], "new": [0, 2, 3, 4, 9, 46, 55, 59, 62, 70, 71, 72, 76, 80, 82, 83, 94, 97, 119, 120, 123, 125, 126, 136, 137, 139, 142, 147, 151, 154, 160, 173, 187, 192, 203, 204, 224, 225], "manag": [0, 103, 209, 222], "all": [0, 2, 3, 4, 8, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 47, 49, 51, 52, 59, 60, 66, 67, 70, 71, 72, 74, 85, 89, 90, 91, 94, 97, 98, 101, 105, 108, 118, 121, 123, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 159, 164, 168, 172, 174, 191, 192, 205, 209, 220, 225, 230], "depend": [0, 2, 55, 74, 84, 89, 97, 98, 100, 101, 103, 105, 118, 144, 154, 168, 198], "Then": [0, 25, 41, 117, 118, 143, 146, 184, 205, 225], "sparknlp": [0, 221, 224, 225, 226, 227, 229, 230, 231], "n": [0, 96, 103, 113, 116, 117, 118, 123, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 163, 179, 183, 192, 197, 208], "y": [0, 41, 68], "activ": [0, 12, 14, 15, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 103, 149], "jupyt": [0, 152, 205, 221], "now": [0, 74, 132, 179, 226], "should": [0, 2, 3, 4, 10, 25, 41, 46, 57, 59, 60, 61, 66, 69, 73, 78, 79, 86, 93, 95, 103, 105, 112, 113, 117, 118, 123, 126, 131, 132, 136, 144, 152, 154, 164, 179, 181, 186, 187, 200, 204, 208, 211, 212], "readi": [0, 25, 208, 225], "notebook": [0, 136, 150, 152, 181, 205, 221], "run": [0, 69, 77, 103, 152, 205, 209, 222, 230], "also": [0, 25, 41, 46, 56, 57, 59, 60, 61, 67, 70, 80, 83, 94, 95, 96, 98, 100, 103, 108, 111, 116, 117, 118, 125, 126, 132, 135, 136, 137, 138, 148, 150, 159, 179, 183, 187, 192, 203, 221, 225, 226, 227, 228, 230], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 214, 215, 216, 222], "bin": 0, "A": [0, 5, 7, 46, 55, 57, 69, 70, 87, 88, 94, 98, 103, 106, 107, 111, 112, 113, 120, 121, 123, 124, 134, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 164, 165, 192, 205, 214, 223, 225, 231], "retriev": [0, 73, 79, 82, 90, 94, 106, 152, 156, 157, 158, 205, 208, 221, 225, 226], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 179, 180, 182, 183, 184, 197, 205, 208, 211, 212, 214, 215, 216, 221, 224, 225, 228, 229, 230, 231], "manual": [0, 224], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 107, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 198, 211, 212, 214, 215], "becaus": [0, 123, 134, 152, 186, 204], "other": [0, 5, 9, 41, 57, 60, 68, 74, 85, 86, 89, 90, 91, 92, 100, 103, 121, 134, 136, 137, 139, 143, 150, 151, 154, 161, 163, 172, 173, 225], "configur": [0, 57, 69, 89, 165, 198], "includ": [0, 59, 67, 69, 71, 72, 78, 80, 91, 93, 95, 96, 97, 100, 103, 108, 116, 117, 118, 123, 137, 139, 141, 148, 149, 150, 151, 152, 154, 173, 205, 215, 222, 224, 225, 226, 231], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 70, 71, 74, 76, 77, 83, 87, 95, 97, 98, 100, 103, 108, 111, 132, 142, 144, 150, 154, 159, 168, 182, 184, 225, 226], "builder": [0, 160, 198], "appnam": [0, 198], "master": [0, 198], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 103, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 159, 179, 198, 208, 229], "config": [0, 198, 222], "driver": [0, 198], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 70, 80, 94, 136, 198], "16g": [0, 198], "serial": [0, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 105, 118, 125, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 198], "org": [0, 116, 117, 118, 119, 136, 137, 168, 179, 197, 198, 208, 211, 222, 231], "kryoseri": [0, 198], "buffer": [0, 72, 94, 198], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 70, 71, 72, 73, 74, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 103, 152, 157, 198], "2000m": [0, 198], "maxresults": [0, 198], "0": [0, 5, 7, 8, 9, 10, 25, 41, 46, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 105, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 157, 160, 165, 166, 168, 171, 172, 173, 179, 180, 183, 184, 187, 192, 197, 198, 201, 203, 204, 205, 208, 209, 212, 214, 215, 216, 221, 224, 225, 230, 231], "getorcr": [0, 198], "main": [1, 98, 136, 152, 165, 224, 228, 231], "page": [1, 67, 139, 208, 220, 228, 230], "github": [1, 76, 82, 86, 87, 91, 144, 150, 208], "issu": [1, 91, 168], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 197, 205, 208, 209, 211, 212, 214, 215, 216, 221, 224, 225, 226, 228, 229, 230, 231], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 111, 112, 116, 117, 118, 120, 121, 123, 124, 126, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 163, 165, 168, 181, 186, 192, 198, 204, 205, 208, 209, 221, 222, 224, 228, 230, 231], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 105, 106, 117, 118, 129, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 168, 209], "welcom": [1, 5, 7, 8], "python": [1, 105, 198], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 219, 221, 224, 225], "inform": [1, 63, 65, 82, 84, 94, 95, 103, 108, 116, 136, 137, 154, 171, 180, 215, 221, 222, 223, 224, 225, 231], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 120, 123, 124, 126, 129, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 164, 165, 166, 168, 170, 171, 172, 173, 179, 180, 181, 182, 183, 184, 191, 192, 197, 198, 205, 208, 209, 211, 212, 214, 215, 222, 223, 224, 225, 226, 228], "librari": [1, 56, 57, 59, 60, 61, 105, 136, 170, 171, 172, 180, 184, 230], "get": [1, 8, 25, 41, 103, 115, 129, 136, 152, 154, 160, 165, 168, 169, 171, 172, 173, 177, 179, 180, 187, 192, 203, 221, 225, 230, 231], "start": [1, 5, 11, 17, 21, 26, 30, 35, 38, 42, 48, 83, 100, 103, 117, 118, 132, 136, 170, 198, 205, 221, 224, 226, 229, 230], "cheat": 1, "sheet": [1, 67], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 62, 63, 65, 69, 70, 72, 73, 76, 79, 80, 86, 92, 95, 96, 103, 118, 121, 135, 154, 166, 168, 170, 172, 184, 224, 225, 226], "instal": [1, 205, 223], "session": [1, 198, 211, 212, 214, 215], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 125, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 182, 183, 184, 186, 192, 197, 198, 201, 204, 205, 208, 209, 211, 212, 214, 215, 216, 221, 224, 225, 226, 229, 230, 231], "user": [1, 116, 117, 123, 124, 136, 138, 142, 145, 165, 181, 182, 198, 205, 221], "guid": [1, 222], "annot": [1, 3, 4, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 196, 197, 198, 199, 200, 202, 204, 205, 208, 209, 210, 214, 216, 221, 222, 227, 228, 229, 230, 231], "own": [1, 25, 41, 46, 63, 69, 78, 93, 106, 107, 111, 112, 117, 118, 121, 129, 134, 135, 154, 156, 161, 163, 168, 228, 229, 231], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 179, 180, 182, 183, 184, 198, 204, 205, 207, 208, 209, 210, 222, 224, 225, 228], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 105, 106, 107, 108, 111, 112, 117, 118, 119, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 165, 168, 172, 173, 179, 197, 198, 205, 221, 224, 228], "dataset": [1, 25, 41, 46, 63, 65, 74, 78, 79, 82, 83, 84, 87, 88, 91, 93, 94, 103, 105, 117, 118, 126, 132, 139, 142, 143, 146, 148, 150, 154, 168, 204, 208, 211, 212, 214, 215, 228], "train": [1, 5, 8, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 56, 57, 59, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 84, 86, 87, 88, 92, 93, 95, 96, 97, 103, 105, 106, 107, 111, 112, 115, 117, 118, 121, 125, 126, 129, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 157, 161, 163, 168, 170, 179, 198, 205, 208, 221, 225, 226, 228, 229], "light": [1, 5, 77, 97, 103, 179, 228, 230], "helper": [1, 129, 168, 174, 197, 214, 215, 216, 228, 231], "function": [1, 80, 91, 94, 136, 137, 151, 172, 209, 220, 228], "third": [1, 131, 159, 206, 211], "parti": [1, 206], "project": [1, 103, 136, 144, 150, 152, 205, 222], "log": [1, 25, 41, 46, 118, 123, 126, 132, 139, 198], "api": [1, 123, 124, 221, 225, 228], "modul": [1, 34, 64, 81, 99, 101, 102, 104, 109, 114, 122, 127, 128, 130, 133, 140, 155, 162, 167, 178, 190, 202, 207, 213], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 179, 180, 182, 183, 184, 197, 205, 208, 211, 212, 213, 214, 215, 222, 224, 225, 229, 230, 231], "format": [2, 3, 4, 8, 56, 57, 59, 60, 61, 63, 65, 98, 100, 106, 107, 108, 110, 111, 112, 117, 118, 121, 126, 134, 137, 148, 151, 156, 157, 165, 168, 169, 171, 173, 174, 177, 180, 183, 211, 212, 214, 215, 216, 222, 231], "annotatortyp": [2, 3, 4, 75, 113, 170, 171, 177, 180, 224], "begin": [2, 55, 116, 139, 163, 165, 170, 171, 180, 197, 224], "end": [2, 11, 17, 21, 26, 30, 35, 38, 42, 48, 55, 118, 123, 124, 132, 136, 137, 138, 151, 163, 165, 168, 171, 180, 181, 197, 205, 211, 221, 224, 226], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 183, 184, 197, 198, 205, 208, 211, 212, 216, 221, 222, 224, 225, 226, 229, 230], "metadata": [2, 3, 4, 47, 55, 62, 103, 112, 117, 118, 120, 129, 136, 171, 173, 177, 179, 180, 197, 205, 209, 224, 226], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 100, 101, 117, 118, 119, 124, 136, 138, 152, 171, 172, 173, 179, 180, 192, 197, 198, 204, 208, 224], "repres": [2, 3, 4, 63, 65, 70, 76, 82, 85, 90, 91, 97, 98, 100, 107, 112, 113, 123, 124, 138, 145, 165, 205, 208, 225], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 187, 192, 197, 198, 205, 214, 221, 224, 225, 226], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 182, 183, 184, 190, 193, 197, 198, 200, 201, 202, 205, 208, 209, 211, 212, 214, 215, 216, 220, 222, 223, 224, 225, 227, 228, 229, 231], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 67, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 105, 106, 107, 111, 112, 117, 118, 119, 120, 121, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 165, 168, 170, 171, 172, 173, 177, 178, 179, 180, 182, 183, 184, 190, 198, 202, 205, 208, 209, 211, 212, 214, 215, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231], "detail": [2, 3, 4, 8, 60, 95, 96, 103, 120, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 187, 192, 196, 197, 198, 203, 204, 205, 208, 209, 211, 212, 214, 215], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 187, 192, 196, 197, 198, 203, 205, 208, 209, 211, 212, 214, 215], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 164, 165, 168, 171, 173, 179, 180, 181, 183, 192, 197, 198, 205, 208, 209, 211, 212, 214, 215, 216, 221, 224, 225, 226, 228, 229, 231], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 197, 199, 208, 214, 224, 225, 228], "possibl": [2, 3, 4, 75, 77, 95, 96, 98, 131, 154, 157, 171, 180, 181, 191, 193, 205, 221], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 72, 75, 80, 82, 85, 90, 91, 92, 95, 98, 100, 103, 105, 106, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 159, 160, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 187, 191, 192, 193, 203, 205, 221, 231], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 60, 63, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 103, 106, 107, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 126, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 166, 168, 170, 172, 179, 182, 184, 192, 198, 208, 211, 215, 216, 225, 229, 230], "wordpiec": 2, "word_embed": [2, 70, 71, 74, 75, 76, 77, 80, 81, 83, 87, 89, 93, 95, 97, 101, 117, 118, 126], "sentence_embed": [2, 25, 41, 46, 72, 73, 78, 79, 81, 82, 84, 85, 86, 88, 90, 91, 92, 96, 101, 124, 152, 205, 221, 225], "categori": [2, 12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 56, 57, 59, 61, 205, 221, 225], "date": [2, 62, 108, 110, 111], "entiti": [2, 9, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 55, 59, 62, 74, 98, 99, 100, 107, 112, 114, 115, 116, 117, 118, 119, 120, 161, 166, 173, 179, 208], "sentiment": [2, 25, 41, 46, 80, 97, 101, 151, 198, 225, 226], "po": [2, 10, 12, 15, 18, 20, 22, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52, 63, 65, 100, 101, 117, 118, 163, 168, 179, 197, 198, 208, 211, 213, 224, 228, 229, 230], "chunk": [2, 9, 10, 11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 62, 66, 68, 75, 78, 93, 98, 103, 107, 111, 112, 113, 116, 136, 161, 166, 170, 173, 197, 205, 215, 221, 231], "named_ent": [2, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 100, 116, 117, 118, 119, 120, 126, 179, 208], "negex": 2, "labeled_depend": [2, 65], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 170, 180, 181, 184, 192, 209, 225], "keyword": [2, 102, 103, 134], "dummi": [2, 67], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 100, 103, 105, 108, 113, 115, 117, 118, 121, 123, 125, 126, 129, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 157, 160, 164, 165, 168, 192, 198, 205, 211], "index": [2, 85, 90, 91, 103, 107, 164, 198, 211], "charact": [2, 16, 67, 80, 83, 98, 105, 111, 113, 121, 131, 132, 154, 156, 157, 164, 165, 168, 173], "under": [2, 77, 84, 86, 97, 103, 150, 198], "last": [2, 85, 90, 91, 108, 110, 136, 161, 216, 229], "string": [2, 8, 16, 25, 41, 46, 55, 63, 67, 98, 111, 113, 119, 121, 132, 136, 151, 157, 159, 163, 170, 171, 173, 177, 179, 180, 181, 229], "dict": [2, 3, 4, 63, 65, 98, 106, 107, 111, 112, 117, 119, 120, 121, 123, 126, 134, 136, 154, 156, 157, 165, 179, 196, 198, 204, 205, 208], "associ": [2, 3, 4, 41, 92, 98, 111, 116, 123, 205], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 92, 95, 96, 97, 98, 100, 103, 105, 108, 111, 115, 116, 118, 119, 120, 121, 123, 125, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 159, 160, 163, 165, 172, 173, 179, 180, 187, 197, 204, 205, 208, 209, 216, 220, 225], "vector": [2, 41, 71, 72, 73, 75, 76, 78, 79, 80, 92, 93, 94, 152, 172, 173, 224], "where": [2, 41, 76, 80, 98, 103, 106, 107, 111, 112, 113, 123, 129, 132, 134, 136, 137, 139, 151, 152, 156, 157, 168, 170, 214], "applic": [2, 61, 91, 103, 137, 141, 142, 145, 147, 148, 149, 191, 205, 206, 221, 223], "copi": [2, 3, 4, 209], "differ": [2, 3, 4, 57, 59, 63, 65, 80, 82, 87, 88, 95, 97, 103, 108, 131, 132, 138, 146, 149, 154, 165, 168, 179, 205, 229], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 105, 106, 107, 112, 113, 115, 117, 118, 120, 123, 129, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 163, 165, 168, 170, 179, 192, 196, 197, 198, 199, 204, 208, 209, 211, 212, 214, 215], "newli": [2, 3, 4, 91], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 209, 225], "datatyp": [2, 197], "structtyp": 2, "schema": [2, 116, 205, 221], "look": [2, 69, 118, 147, 148, 149, 156, 224], "like": [2, 5, 11, 17, 21, 25, 26, 30, 35, 38, 42, 48, 55, 60, 67, 70, 73, 75, 77, 83, 89, 97, 100, 103, 111, 116, 123, 132, 135, 136, 138, 139, 143, 146, 154, 165, 168, 205, 221, 223, 224], "struct": [2, 171, 177, 180], "containsnul": [2, 41, 169, 171, 177, 180], "true": [2, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 107, 108, 110, 112, 116, 118, 121, 131, 132, 136, 143, 152, 154, 156, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 183, 205, 209, 211, 212, 215, 216, 221, 225, 226], "nullabl": [2, 41, 169, 171, 177, 180], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 179, 180, 183, 184, 197, 198, 205, 208, 211, 212, 214, 216, 221, 224, 225, 226, 231], "integ": [2, 57, 59, 60, 61, 85, 90, 91, 171, 177, 180], "map": [2, 10, 41, 73, 94, 98, 123, 125, 126, 129, 136, 154, 171, 177, 180, 187, 192, 197, 203, 204, 224], "kei": [2, 5, 57, 63, 65, 87, 88, 95, 96, 106, 120, 146, 171, 177, 179, 180, 205, 208, 221], "valuecontainsnul": [2, 171, 177, 180], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 105, 106, 113, 118, 125, 129, 131, 132, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 161, 163, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 197, 226, 229], "element": [2, 41, 113, 123, 152, 169, 171, 177, 180, 181], "float": [2, 3, 5, 7, 8, 25, 41, 46, 57, 60, 62, 105, 117, 118, 120, 123, 125, 126, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 168, 169, 171, 172, 179, 180, 192], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 107, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 179, 197, 204, 208, 211, 212, 214, 215], "arraytyp": [2, 170, 197], "fromrow": 2, "row": [2, 47, 66, 68, 94, 131, 132, 135, 171, 180, 181, 183, 197, 211], "column": [2, 9, 25, 41, 46, 67, 94, 106, 115, 117, 118, 125, 126, 129, 135, 152, 160, 165, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 184, 187, 197, 208, 211, 214, 225], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 183, 184, 192, 197, 200, 204, 205, 208, 221, 224, 225, 226, 229, 230, 231], "an": [2, 5, 7, 8, 10, 25, 41, 46, 47, 56, 57, 59, 60, 61, 63, 66, 67, 69, 74, 76, 80, 82, 83, 84, 85, 86, 90, 91, 97, 98, 103, 105, 107, 108, 110, 111, 112, 113, 117, 118, 120, 123, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 161, 165, 168, 170, 171, 172, 173, 174, 179, 180, 181, 184, 187, 192, 196, 197, 199, 203, 204, 205, 211, 212, 214, 215, 220, 222, 224, 225, 226, 228, 229], "annotationaudio": 3, "audio": [3, 169, 205], "alreadi": [3, 100, 103, 117, 118, 119, 165, 166, 179, 208, 229], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 61, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 96, 97, 100, 103, 105, 116, 117, 118, 126, 132, 136, 137, 139, 145, 148, 151, 152, 168, 169, 170, 171, 172, 173, 177, 180, 182, 184, 205, 221, 224, 225, 226, 227], "file": [3, 5, 7, 25, 41, 46, 63, 65, 67, 92, 94, 98, 106, 107, 111, 112, 117, 118, 121, 126, 132, 134, 154, 156, 157, 160, 165, 169, 183, 193, 198, 205, 211, 212, 214, 215, 221, 231], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 105, 118, 125, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 205], "annotationimag": [4, 179, 208], "origin": [4, 56, 57, 59, 60, 61, 70, 78, 83, 87, 93, 116, 132, 136, 137, 177], "height": [4, 57, 59, 60, 61, 177], "width": [4, 57, 59, 60, 61, 136, 177], "nchannel": [4, 177], "mode": [4, 25, 41, 46, 118, 126, 156, 171, 177, 180, 205], "imag": [4, 56, 57, 59, 60, 61, 148, 177, 179, 208], "uri": [4, 209], "pixel": [4, 59], "number": [4, 8, 14, 15, 20, 24, 25, 29, 33, 41, 45, 46, 51, 60, 63, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 113, 115, 117, 118, 123, 125, 129, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 160, 168, 192, 211, 212], "color": 4, "channel": [4, 57, 59, 60, 61, 154], "opencv": 4, "concern": [5, 7, 8, 12, 56, 57, 59, 60, 61, 62, 70], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 111, 112, 117, 118, 120, 121, 123, 124, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 165, 168, 183, 185, 186, 194, 200], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 111, 112, 117, 118, 120, 121, 123, 124, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 163, 165, 168, 176, 183, 186, 204], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 111, 112, 117, 118, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 181, 183, 186, 198, 204, 205, 208, 209, 226], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 55, 66, 70, 97, 116, 117, 118, 179, 197, 208, 225], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 52, 53, 56, 57, 59, 61, 70, 73, 79, 82, 92, 135, 137, 151, 225], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 15, 18, 19, 20, 25, 27, 28, 29, 31, 32, 33, 36, 37, 40, 43, 44, 45, 46, 49, 50, 51, 52, 53, 56, 57, 59, 66, 67, 68, 74, 76, 77, 83, 87, 88, 94, 95, 96, 103, 123, 124, 135, 137, 139, 141, 143, 145, 147, 150, 154, 208, 225, 226], "propos": [5, 7, 57, 59, 70, 74, 76, 77, 84, 87, 88, 91, 95, 96, 97, 146], "self": [5, 7, 59, 70, 83, 144, 192], "supervis": [5, 7, 8, 70, 79, 80, 86, 92, 103, 137, 139, 143, 148], "speech": [5, 7, 8, 10, 74, 128, 129, 168, 214, 231], "represent": [5, 7, 59, 70, 71, 72, 77, 78, 79, 80, 93, 94, 95, 96, 97, 116, 151, 152, 183, 196], "learn": [5, 7, 25, 41, 46, 62, 70, 77, 78, 80, 87, 88, 92, 93, 95, 96, 97, 103, 117, 118, 125, 132, 136, 137, 138, 139, 141, 142, 147, 148, 149, 151, 154, 205, 223], "mask": [5, 59, 76, 84, 95, 96, 97, 136, 137, 164], "predict": [5, 8, 56, 59, 76, 84, 118, 136, 139, 151, 205, 221], "hidden": [5, 11, 13, 17, 19, 21, 23, 26, 28, 30, 32, 35, 37, 38, 40, 42, 44, 48, 50, 53, 70, 80, 97, 160], "unit": [5, 139, 141, 160], "wei": [5, 59], "ning": 5, "hsu": 5, "benjamin": [5, 74], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 15, 20, 33, 45, 47, 51, 66, 68, 74, 84, 100, 112, 125, 126, 146, 156, 159, 165, 182, 187, 192, 203, 211, 224, 225, 229, 230], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 59, 60, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 180, 181, 183, 184, 191, 192, 193, 196, 197, 205, 211, 212, 214, 215, 221, 224, 225, 226, 230, 231], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 105, 106, 107, 108, 110, 111, 112, 117, 118, 121, 125, 126, 129, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 168, 179, 187, 192, 197, 199, 203, 208, 226], "pre": [5, 7, 8, 25, 41, 46, 56, 61, 71, 72, 76, 77, 79, 80, 84, 86, 92, 118, 126, 136, 137, 151, 171, 173, 180, 184, 212, 225], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 103, 107, 108, 110, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 179, 183, 187, 198, 224, 225, 226], "support": [5, 7, 8, 25, 41, 68, 70, 73, 79, 83, 84, 103, 118, 121, 132, 136, 143, 144, 146, 148, 149, 150, 159, 181, 183, 198, 222], "appl": [5, 7, 72, 88, 96, 198], "silicon": [5, 7, 198], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 70, 83, 91, 136, 137], "instruct": [5, 7, 82, 138, 142, 148], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 117, 118, 120, 129, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 168, 201], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 117, 118, 120, 123, 129, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 168, 191, 193, 200, 201, 205, 224, 225], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 183, 184, 187, 205, 221, 225, 226], "audio_assembl": [5, 7, 8, 178, 198], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 183, 184, 187, 205, 221, 225, 226], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 163, 164, 165, 168, 170, 171, 172, 173, 174, 179, 180, 183, 196, 197, 198, 205, 208, 209, 211, 212, 214, 215, 225], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 112, 114, 115, 117, 118, 120, 125, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 165, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 183, 184, 187, 197, 203, 205, 208, 209, 211, 214, 221, 225], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 101, 103, 105, 106, 108, 111, 117, 118, 129, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 168, 200, 208, 209, 221, 228], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 165, 168, 171, 172, 173, 174, 180, 181, 184, 192, 205, 208, 209, 215, 221, 222, 223, 228, 230, 231], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 70, 71, 74, 76, 77, 83, 87, 91, 95, 97, 103, 108, 111, 129, 131, 136, 137, 139, 151, 168, 174, 179, 182, 205, 221, 229], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 85, 87, 89, 90, 91, 92, 93, 95, 97, 100, 103, 108, 110, 111, 118, 120, 121, 123, 124, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 164, 168, 172, 179, 197, 209, 211, 212, 225, 226], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 70, 71, 74, 76, 77, 83, 87, 95, 97, 118, 172, 209], "5669": [5, 7, 8, 56, 57, 59, 60, 61, 74], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 67, 74, 77, 79, 80, 82, 89, 95, 96, 100, 103, 108, 113, 116, 120, 123, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 164, 165, 171, 172, 173, 180, 181, 184, 192, 205, 208, 215, 221, 222, 223, 225, 228, 231], "extend": [5, 7, 8, 10, 25, 41, 46, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 74, 75, 77, 80, 87, 89, 92, 94, 95, 97, 103, 105, 106, 108, 110, 111, 112, 113, 117, 118, 120, 121, 126, 129, 131, 132, 134, 135, 136, 137, 144, 151, 152, 154, 156, 158, 159, 163, 165, 168, 171, 172, 173, 180, 181, 184, 208], "hubertforctctestspec": 5, "paper": [5, 8, 57, 59, 60, 61, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 91, 92, 93, 95, 96, 97, 103, 132, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 168, 215, 231], "abstract": [5, 8, 57, 59, 61, 70, 71, 72, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 91, 92, 95, 96, 97, 103, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 160, 215, 231], "approach": [5, 8, 57, 59, 87, 88, 91, 97, 103, 115, 117, 118, 120, 132, 134, 136, 137, 139, 141, 142, 145, 147, 151, 154, 156, 157, 185, 228], "challeng": [5, 41, 59, 77, 80, 82, 87, 88, 91, 103, 145, 146, 147], "three": [5, 154, 166], "uniqu": [5, 123, 124, 137], "problem": [5, 14, 41, 70, 80, 84, 91, 137, 151, 154, 168], "multipl": [5, 8, 16, 41, 61, 74, 98, 103, 108, 131, 137, 142, 146, 149, 150, 152, 165, 197, 205, 211], "sound": [5, 66], "each": [5, 7, 14, 15, 20, 24, 25, 29, 33, 41, 45, 46, 51, 57, 59, 60, 61, 66, 73, 76, 78, 79, 84, 86, 89, 93, 94, 98, 100, 103, 106, 107, 108, 111, 112, 113, 115, 117, 118, 120, 121, 123, 124, 126, 129, 131, 132, 134, 137, 149, 152, 154, 156, 157, 164, 165, 168, 171, 180, 191, 197, 204, 214, 226], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 187, 197, 204, 208, 211, 212, 214, 215, 225, 226, 229, 231], "utter": 5, "lexicon": 5, "dure": [5, 25, 41, 46, 56, 77, 82, 117, 118, 126, 131, 136, 152, 154, 198, 205, 221], "phase": [5, 77, 137], "variabl": [5, 78, 93], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 60, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 96, 97, 113, 121, 123, 131, 132, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 164, 165, 192], "explicit": [5, 69, 131, 139], "segment": [5, 55, 57, 59, 77, 87, 167, 168], "deal": [5, 179, 229], "bert": [5, 12, 16, 17, 18, 19, 20, 22, 24, 27, 31, 32, 36, 39, 43, 47, 49, 52, 60, 70, 71, 72, 76, 77, 83, 84, 87, 88, 95, 96, 97, 118, 119, 120, 136, 137, 151], "util": [5, 75, 117, 120, 131, 132, 145, 157, 182, 189, 190, 193, 195, 198, 199, 203, 207], "offlin": [5, 205], "cluster": [5, 73, 79, 82, 92, 198], "step": [5, 25, 41, 46, 78, 93, 118, 126, 205, 221, 225], "align": [5, 148, 149], "target": [5, 92, 136, 137, 143, 144, 146, 165, 170, 179, 208], "label": [5, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 56, 57, 59, 61, 63, 65, 79, 91, 98, 105, 115, 116, 117, 118, 120, 125, 126, 134, 135, 151, 154, 160, 168, 205, 211, 221, 225], "loss": [5, 70, 77, 82, 118, 151, 221], "ingredi": 5, "our": [5, 70, 74, 77, 78, 79, 80, 82, 83, 87, 88, 92, 93, 95, 96, 103, 132, 137, 139, 141, 142, 143, 146, 147, 148, 150, 151, 197, 208, 230], "appli": [5, 9, 25, 41, 46, 57, 61, 66, 67, 98, 100, 118, 119, 126, 131, 136, 151, 154, 156, 173, 181, 197, 211], "over": [5, 66, 77, 84, 95, 96, 97, 136, 137, 141, 145, 146, 156, 165, 197, 205, 221], "region": 5, "onli": [5, 8, 57, 59, 60, 61, 63, 65, 66, 67, 73, 79, 80, 84, 92, 97, 108, 111, 121, 123, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 168, 182, 191, 192, 211], "forc": [5, 136], "combin": [5, 14, 15, 20, 24, 29, 33, 45, 51, 60, 77, 83, 94, 103, 137, 143, 146, 151, 154, 156, 168], "acoust": 5, "continu": [5, 116, 136, 139, 152, 174, 221], "reli": [5, 63, 65, 97, 103], "primarili": [5, 91], "consist": [5, 70, 76, 83, 111, 129, 135, 147, 168, 183, 214], "unsupervis": [5, 95, 96, 97, 103, 137, 139], "rather": [5, 57, 69, 136], "than": [5, 41, 46, 57, 69, 77, 78, 82, 93, 95, 96, 97, 103, 105, 113, 117, 123, 136, 138, 139, 141, 142, 143, 144, 147, 148, 150, 156, 157, 225], "intrins": [5, 57], "qualiti": [5, 59, 90, 91, 139, 142, 143, 146, 148, 150], "assign": [5, 41, 98, 119, 134], "simpl": [5, 71, 72, 98, 139, 226], "k": [5, 8, 60, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 172, 192], "mean": [5, 8, 10, 14, 15, 20, 24, 29, 33, 41, 45, 51, 57, 59, 60, 61, 85, 90, 91, 95, 103, 105, 108, 110, 123, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 164, 172, 179, 181, 192, 225, 226, 229], "teacher": 5, "100": [5, 25, 41, 47, 61, 78, 93, 95, 103, 123, 132, 143, 183], "two": [5, 41, 59, 63, 65, 70, 76, 78, 92, 93, 94, 95, 96, 100, 148, 166, 181, 211, 225], "iter": [5, 63, 65, 70, 78, 93, 129, 142, 168, 205, 221], "either": [5, 8, 25, 46, 61, 65, 74, 75, 89, 98, 103, 105, 111, 134, 135, 151, 168, 170, 179, 180, 183, 208, 226], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 57, 67, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 121, 129, 131, 136, 137, 139, 142, 150, 165, 168, 170, 181, 191, 224], "improv": [5, 70, 71, 72, 74, 76, 80, 82, 87, 88, 91, 95, 96, 117, 118, 139, 141, 142, 146, 147, 148, 149, 151, 152, 230], "upon": [5, 68, 103, 136, 150], "state": [5, 11, 13, 17, 19, 21, 23, 25, 26, 28, 30, 32, 35, 37, 38, 40, 41, 42, 44, 46, 48, 50, 53, 57, 59, 61, 70, 71, 72, 74, 79, 80, 82, 83, 84, 87, 88, 91, 97, 103, 118, 136, 137, 139, 141, 146, 147, 148, 151, 180, 222, 225], "art": [5, 25, 41, 57, 59, 61, 70, 71, 72, 74, 79, 80, 82, 83, 84, 87, 88, 91, 97, 103, 118, 136, 137, 139, 146, 147, 148, 151, 180], "wav2vec": [5, 7], "perform": [5, 57, 59, 61, 67, 70, 74, 76, 77, 79, 80, 82, 86, 87, 88, 90, 92, 94, 95, 96, 97, 118, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 156], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 77, 131, 142], "000h": 5, "benchmark": [5, 8, 61, 70, 76, 77, 79, 80, 95, 96, 137, 138, 141, 142, 145, 146, 147, 148, 150, 151], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 55, 71, 72, 77, 79, 84, 120, 136, 137, 141, 142, 147, 148, 151, 216], "tune": [5, 8, 55, 71, 72, 77, 79, 84, 120, 136, 137, 141, 142, 147, 148, 151], "subset": [5, 146], "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 180, 183, 184, 197, 209, 211, 212, 214, 215, 216, 221, 224, 225, 226, 230], "19": [5, 62, 73, 79, 86, 113, 214, 216], "13": [5, 9, 10, 55, 95, 96, 100, 129, 147, 150, 173, 216], "rel": [5, 74, 76, 95, 108, 110, 117, 138, 146, 154, 224], "wer": 5, "reduct": [5, 70, 156], "dev": [5, 59, 70, 80, 92], "test": [5, 25, 41, 46, 56, 57, 59, 60, 61, 63, 65, 69, 71, 72, 92, 94, 106, 107, 111, 112, 117, 118, 126, 129, 139, 141, 147, 148, 156, 157, 161, 168, 211, 212, 214, 215, 216, 225, 231], "evalu": [5, 25, 41, 46, 74, 79, 82, 83, 91, 95, 96, 126, 136, 137, 141, 143, 146, 147, 150, 187, 205], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 118, 137, 144, 154], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 66, 67, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 100, 103, 118, 125, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 192, 224, 229, 230], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 60, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 118, 125, 136, 137, 144, 154], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 185, 186, 187, 190, 194, 198, 200, 204, 205, 221, 225, 226, 229], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 123, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 177, 179, 180, 182, 183, 184, 205, 221, 225, 229], "audioassembl": [5, 7, 8, 169], "audio_cont": [5, 7, 8, 169], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 172, 183, 184, 225, 226], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 180, 183, 184, 197, 205, 221, 224, 225, 226, 230], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 177, 180, 183, 184, 197, 224, 225, 226, 230], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 170, 172, 179, 182, 183, 184, 204, 205, 221, 225, 226, 229], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 62, 75, 77, 94, 100, 103, 105, 117, 118, 120, 123, 124, 135, 136, 137, 138, 139, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 163, 168, 169, 171, 173, 174, 177, 180, 183, 184, 197, 205, 221, 226], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 67, 94, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 171, 173, 174, 180, 183, 184, 197, 214, 224, 225, 226], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 67], "apostl": [5, 7, 8], "OF": [5, 7, 70], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 211, 231], "hi": [5, 7, 8, 68, 120, 132, 143], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 92, 95, 96, 97, 105, 118, 125, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154], "b": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 92, 95, 96, 97, 105, 107, 112, 116, 117, 118, 119, 120, 125, 131, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 168, 179, 197, 208, 211, 215, 231], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 105, 118, 125, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 103, 105, 118, 125, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 118, 126, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 160, 209, 211], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 118, 126, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 198, 205, 221, 225], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 100, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 208, 209, 225, 230], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 100, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 208, 209, 212, 225, 230, 231], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 208, 209], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 100, 105, 106, 107, 112, 117, 118, 119, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 198, 208, 209, 224, 225, 228, 229], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 105, 106, 107, 111, 112, 117, 118, 120, 121, 126, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 165, 168, 169, 171, 175, 176, 179, 180, 196, 197, 198, 204, 205, 208, 209, 211, 212, 214, 215, 225], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 208, 209], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 105, 106, 107, 111, 112, 117, 118, 120, 121, 126, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 161, 165, 168, 182, 193, 196, 207, 209, 211, 212, 214, 215, 216, 225, 231], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 208, 222], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 112, 117, 118, 120, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 165, 168, 170, 192, 205], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 161], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 69, 100, 103, 120, 144, 156, 224, 225], "recognit": [8, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 57, 61, 74, 114, 117, 118, 120], "asr": 8, "system": [8, 103, 136, 137, 139, 142, 143, 146, 181], "680": 8, "000": [8, 47, 103, 139, 146, 168, 183], "hour": [8, 68, 108, 110], "multilingu": [8, 95, 96, 143, 146, 149, 168], "multitask": [8, 82, 139], "collect": [8, 91, 103, 141, 147, 205, 221], "web": [8, 55, 67, 74, 139, 148, 205, 221], "well": [8, 61, 63, 65, 66, 79, 92, 95, 96, 103, 123, 136, 137, 150, 183], "translat": [8, 136, 137, 139, 143, 144, 146, 151, 168], "those": [8, 74, 100, 119, 225, 226], "english": [8, 46, 74, 86, 103, 143, 145, 146, 156, 159, 168, 209], "moment": [8, 181], "greedi": [8, 60, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "search": [8, 60, 73, 108, 137, 142, 143, 146, 152, 156, 192], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 57, 59, 61, 70, 71, 72, 73, 74, 76, 77, 79, 82, 83, 84, 86, 91, 92, 95, 96, 97, 103, 120, 136, 137, 138, 139, 144, 145, 146, 150, 151, 182, 192], "setlanguag": 8, "settask": [8, 137, 139, 151, 192], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 82, 148], "via": [8, 12, 14, 15, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 92, 177, 198], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61, 66, 68, 70, 76, 77, 79, 80, 84, 91, 95, 96, 97, 103, 105, 107, 112, 118, 136, 137, 138, 139, 141, 142, 143, 147, 149, 150, 181], "scale": [8, 57, 59, 60, 61, 70, 77, 79, 83, 84, 95, 96, 136, 137, 138, 139, 141, 142, 143, 146, 147, 148, 151], "weak": [8, 79], "studi": [8, 77, 87, 88, 137, 151], "capabl": [8, 56, 59, 77, 97, 139, 142, 145, 148], "simpli": [8, 67, 82, 226], "amount": [8, 61, 92, 103, 112, 136, 139, 149, 168, 179, 229], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 15, 18, 20, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52, 57, 59, 60, 61, 66, 67, 69, 70, 79, 100, 108, 110, 113, 118, 123, 136, 137, 139, 143, 147, 148, 151, 154, 156, 159, 163, 168, 179, 211, 225, 226, 229], "gener": [8, 25, 41, 57, 59, 60, 70, 73, 75, 77, 79, 82, 83, 86, 89, 91, 97, 100, 103, 117, 118, 120, 123, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 173, 174, 181, 192, 205, 221, 224, 225, 226], "standard": [8, 57, 59, 60, 61, 67, 83, 108, 110, 136, 137, 146, 156, 157, 165], "often": [8, 70, 87, 88, 97], "competit": [8, 95, 96, 103, 143], "prior": [8, 57, 77, 82, 83, 123, 154], "fulli": [8, 86, 208], "zero": [8, 56, 79, 94, 120, 139], "shot": [8, 56, 79, 120, 139], "transfer": [8, 61, 77, 79, 92, 95, 96, 137, 139, 151], "without": [8, 56, 71, 72, 79, 82, 95, 96, 103, 139, 145, 168], "ani": [8, 14, 15, 20, 24, 29, 33, 45, 51, 56, 69, 73, 78, 79, 82, 92, 93, 98, 103, 118, 139, 143, 151, 154, 172, 173, 209, 222, 225, 226, 231], "compar": [8, 59, 61, 70, 76, 77, 80, 82, 84, 97, 103, 132, 136, 137, 138, 141, 150, 151, 154, 205, 221], "human": [8, 76, 103, 138, 141, 142, 146, 147], "accuraci": [8, 57, 59, 63, 65, 71, 72, 78, 92, 93, 95, 96, 117, 118, 129, 145, 156, 168, 221], "releas": [8, 67, 70, 74, 76, 86, 87, 88, 95, 96, 137, 141, 142, 147, 149, 150, 151, 198], "infer": [8, 14, 15, 20, 24, 29, 33, 45, 51, 56, 71, 72, 74, 77, 97, 136, 138, 141, 145], "code": [8, 55, 56, 69, 76, 78, 82, 83, 86, 87, 88, 93, 95, 96, 103, 105, 137, 138, 145, 148, 149, 150, 151, 222, 230], "serv": [8, 59, 222], "foundat": [8, 141, 142], "further": [8, 9, 70, 82, 103, 117, 118, 123, 148, 184], "e": [8, 10, 12, 13, 16, 18, 19, 22, 23, 27, 28, 31, 32, 36, 37, 39, 40, 43, 44, 49, 50, 52, 53, 57, 65, 67, 79, 80, 82, 83, 84, 98, 100, 117, 118, 137, 139, 143, 144, 148, 151, 152, 154, 159, 183, 192, 205, 221], "g": [8, 10, 12, 13, 16, 18, 19, 22, 23, 27, 28, 31, 32, 36, 37, 39, 40, 43, 44, 49, 50, 52, 53, 57, 65, 67, 79, 80, 82, 84, 100, 117, 118, 137, 139, 144, 148, 151, 154, 159, 183, 192, 205, 221], "check": [8, 73, 79, 86, 118, 131, 154, 155, 156, 157, 179, 184, 208, 225, 230], "descript": [8, 65, 82, 89, 103, 108, 141, 147, 156, 163, 191, 193], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 100, 107, 108, 110, 112, 113, 116, 117, 118, 121, 123, 126, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 159, 164, 165, 168, 170, 172, 173, 174, 179, 181, 183, 184, 187, 192, 198, 208, 211, 215, 226], "minoutputlength": [8, 60, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "minimum": [8, 41, 46, 60, 78, 93, 100, 103, 105, 115, 117, 118, 121, 131, 132, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 156, 157, 164, 165, 192, 211], "sequenc": [8, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 57, 59, 60, 61, 83, 85, 90, 91, 123, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 159, 181, 192], "maxoutputlength": [8, 60, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "maximum": [8, 25, 41, 46, 55, 60, 69, 78, 93, 100, 103, 115, 117, 118, 121, 123, 125, 131, 132, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 164, 165, 192], "dosampl": [8, 60, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "sampl": [8, 60, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "decod": [8, 60, 76, 83, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "temperatur": [8, 60, 123, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "next": [8, 39, 60, 87, 88, 103, 108, 110, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "probabl": [8, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 60, 103, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 192], "topk": [8, 60, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "highest": [8, 60, 123, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 192], "vocabulari": [8, 60, 78, 93, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 192], "keep": [8, 60, 61, 66, 103, 121, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "filter": [8, 57, 59, 60, 61, 95, 96, 103, 116, 117, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 159, 192, 197, 209], "topp": [8, 60, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "most": [8, 60, 66, 68, 74, 77, 83, 84, 103, 118, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "add": [8, 60, 94, 108, 110, 131, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 165, 181, 192, 225], "top_p": [8, 60, 123], "higher": [8, 60, 94, 103, 123, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "kept": [8, 60, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "repetitionpenalti": [8, 60, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "repetit": [8, 60, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "penalti": [8, 60, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "norepeatngrams": [8, 60, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "ngram": [8, 60, 75, 113, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "occur": [8, 60, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "onc": [8, 60, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "beamsiz": [8, 60, 137], "beam": [8, 60, 137, 142, 143, 146, 192], "mr": [8, 143], "middl": [8, 163, 168], "getlanguag": 8, "langaug": [8, 208], "getismultilingu": 8, "do": [8, 9, 68, 92, 103, 116, 159, 165, 179, 221, 225, 229], "xx": [8, 20, 51, 95, 96, 105, 143, 144, 146], "chunk2doc": [9, 170], "convert": [9, 60, 62, 67, 75, 84, 89, 94, 108, 110, 113, 116, 121, 123, 137, 151, 164, 166, 168, 170, 173, 174, 205, 221, 228], "back": [9, 68, 123, 136, 137], "try": [9, 154, 211], "re": [9, 73, 79, 86, 225], "analysi": [9, 25, 41, 46, 80, 82, 97, 133, 134, 151, 189, 226], "doc2chunk": [9, 170], "pretrainedpipelin": [9, 173, 179, 197, 208, 224, 229, 230], "locat": [9, 16, 98, 131, 198, 208, 225], "extract": [9, 10, 11, 17, 21, 26, 30, 35, 38, 42, 48, 57, 59, 60, 61, 63, 66, 68, 75, 94, 98, 99, 100, 102, 103, 107, 108, 110, 112, 116, 117, 118, 119, 131, 132, 134, 152, 154, 157, 161, 166, 172, 173, 174, 179, 198, 205, 208, 221], "york": [9, 120, 173], "jersei": [9, 173], "aren": [9, 173], "t": [9, 14, 15, 20, 24, 29, 33, 45, 51, 68, 77, 87, 106, 121, 132, 134, 136, 147, 165, 173], "far": [9, 123, 139, 173], "apart": [9, 63, 65, 173], "actual": [9, 113, 173, 184], "id": [9, 41, 67, 95, 98, 123, 124, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 170, 171, 173, 180, 184, 205, 211], "defin": [9, 10, 116, 117, 118, 154, 159, 163, 173, 197, 205, 208, 221, 225, 229], "amongst": [9, 173], "thing": [9, 142, 154, 173], "explain_document_dl": [9, 173, 179, 197, 208], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 173], "selectexpr": [9, 10, 25, 47, 55, 56, 57, 59, 60, 61, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 106, 107, 108, 110, 111, 112, 113, 116, 119, 120, 121, 129, 131, 132, 134, 144, 158, 159, 161, 164, 165, 166, 170, 172, 173, 197, 211, 212, 214, 224, 225, 230], "explod": [9, 10, 25, 47, 55, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 103, 107, 110, 111, 112, 113, 116, 119, 120, 129, 131, 132, 144, 166, 172, 173, 197, 211, 214, 224, 225, 230], "col": [9, 63, 65, 98, 107, 116, 119, 173, 197, 224], "loc": [9, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 100, 116, 117, 118, 173, 179, 197, 208, 211], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 124, 129, 135, 136, 137, 144, 151, 152, 154, 159, 161, 164, 166, 168, 171, 173, 179, 180, 183, 184, 198, 208, 211, 212, 214, 215, 216, 225, 229, 230], "22": [9, 173, 211, 224], "pattern": [10, 66, 67, 98, 108, 111, 121, 156, 157, 164, 165, 168, 181], "part": [10, 69, 74, 103, 106, 128, 129, 136, 141, 158, 168, 170, 214, 231], "tag": [10, 25, 41, 46, 67, 74, 115, 116, 117, 118, 119, 128, 129, 168, 197, 205, 211, 214, 215, 231], "order": [10, 66, 69, 82, 97, 98, 103, 108, 136, 137, 141, 147, 156, 157, 179, 184, 197, 225, 226, 229, 231], "meaning": [10, 158], "phrase": [10, 74, 78, 93, 107, 112], "onto": [10, 197, 226], "pars": [10, 63, 64, 65, 74, 98, 106, 108, 110, 154, 156, 157, 179, 181, 183, 208, 211, 214], "regular": [10, 66, 111, 117, 131], "express": [10, 46, 55, 66, 108, 111, 131], "wrap": [10, 152, 185, 186, 194, 200, 204], "angl": [10, 91], "bracket": 10, "easili": [10, 80, 129, 172, 221], "distinguish": 10, "itself": [10, 69, 103, 146, 151, 168, 182, 226], "form": [10, 25, 41, 46, 94, 98, 106, 107, 108, 111, 112, 132, 134, 156, 157, 168, 172, 205, 211, 212, 225], "peter": [10, 83, 106, 121, 129, 132, 156, 158, 211], "piper": [10, 106, 129, 158], "employe": [10, 106, 129, 158], "pick": [10, 106, 129, 158], "peck": [10, 106, 129, 158], "pickl": [10, 106, 129, 158], "pepper": [10, 106, 129, 158], "nnp": [10, 129, 179, 197, 211, 212, 214, 215, 224, 229, 230, 231], "nn": [10, 129, 211, 212, 214, 215, 231], "vbp": [10, 129, 179, 212, 224, 229, 230], "vbg": [10, 129], "IN": [10, 129, 179, 197, 212, 214, 215, 224, 229, 230], "jj": [10, 129, 179, 197, 211, 214, 224, 229, 230, 231], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 154, 168], "group": [10, 136, 141, 145, 149, 165], "so": [10, 14, 15, 20, 25, 33, 45, 46, 51, 68, 69, 103, 116, 123, 132, 143, 182, 205, 221], "here": [10, 106, 197, 225], "specif": [10, 47, 63, 65, 67, 71, 72, 77, 91, 92, 100, 103, 118, 137, 139, 142, 143, 146, 150, 160, 179, 182, 205, 229], "noun": [10, 212], "success": [10, 74, 84, 139], "grammar": [10, 136], "parser": [10, 63, 65, 100], "perceptronmodel": [10, 63, 65, 100, 117, 129, 211], "Of": [10, 70, 168], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 170, 171, 172, 180, 182, 183, 184, 205, 211, 221, 225], "sentencedetector": [10, 25, 47, 55, 63, 65, 72, 75, 88, 92, 96, 100, 103, 106, 111, 113, 117, 118, 119, 120, 129, 131, 132, 159, 161, 182, 184, 211, 225, 226], "postag": 10, "11": [10, 62, 95, 96, 108, 110, 113, 129, 216], "21": [10, 108, 110, 119, 129, 216], "35": [10, 129, 216], "39": [10, 119, 124, 129, 214, 216], "52": [10, 119, 129, 214], "58": [10, 59, 129], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 103, 172, 225], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 105, 118, 120, 156, 157], "albert": [11, 12, 13, 70], "span": [11, 17, 21, 26, 30, 35, 38, 42, 48, 136, 137, 150, 151], "question": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 63, 65, 71, 72, 80, 87, 88, 97, 120, 129, 136, 137, 139, 145, 151, 179], "answer": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 63, 65, 66, 71, 72, 80, 97, 120, 136, 137, 139, 145, 151, 179], "squad": [11, 17, 21, 26, 30, 35, 38, 42, 48, 70, 71, 72, 76, 84, 87, 88, 136, 137], "linear": [11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 59, 136, 139], "layer": [11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 70, 71, 72, 76, 80, 97, 136], "comput": [11, 17, 21, 26, 30, 35, 38, 42, 48, 57, 59, 61, 70, 76, 77, 82, 92, 139, 144, 145, 146, 152, 157, 168, 179, 229], "logit": [11, 12, 14, 15, 17, 18, 20, 21, 22, 24, 26, 29, 30, 31, 33, 35, 36, 38, 39, 42, 43, 45, 48, 49, 51, 52, 123, 136], "spanclassifi": [11, 16, 17, 21, 26, 30, 35, 38, 42, 48], "document_quest": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48], "document_context": [11, 16, 17, 21, 26, 30, 35, 38, 42, 48], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 59, 60, 80, 86, 92, 117, 118, 121, 131, 132, 137, 150, 164, 165, 182, 191], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 77, 80, 136, 156, 157], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 107, 112, 156, 159], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 107, 113, 116, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 159, 179], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 98, 105, 107, 112, 141, 147, 154, 156, 159, 165, 170, 211, 212, 225], "configprotobyt": [11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 105, 118, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 96, 97], "128": [11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 70, 71, 72, 74, 76, 77, 82, 87, 88, 95, 96, 97, 205, 221], "multidocumentassembl": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 180], "context": [11, 16, 17, 21, 26, 30, 35, 38, 42, 48, 71, 72, 78, 80, 86, 93, 97, 123, 135, 136, 141, 148, 149, 154, 165], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 75, 77, 83, 87, 95, 107, 112, 117, 156, 159, 172, 184], "what": [11, 17, 21, 26, 30, 35, 38, 42, 46, 48, 57, 63, 65, 103, 105, 120, 123, 144, 146, 154, 163, 212, 222], "my": [11, 13, 14, 17, 19, 21, 25, 26, 28, 30, 32, 35, 37, 38, 39, 40, 42, 44, 46, 48, 50, 53, 66, 67, 68, 111, 113, 120, 123, 131, 138, 139, 141, 143, 147, 148, 149, 159, 161, 164, 181, 225], "clara": [11, 17, 21, 26, 30, 35, 38, 42, 48, 120], "live": [11, 13, 17, 19, 21, 26, 28, 30, 32, 35, 37, 38, 40, 42, 44, 48, 50, 53, 120, 139, 141, 205, 221], "berkelei": [11, 17, 21, 26, 30, 35, 38, 42, 48, 147, 148, 149], "albertforsequenceclassif": [12, 27], "regress": [12, 18, 22, 27, 31, 36, 39, 43, 49, 52, 137, 151], "pool": [12, 16, 18, 22, 27, 31, 36, 39, 43, 49, 52, 75, 80, 85, 89, 90, 91, 136], "multi": [12, 18, 22, 25, 27, 31, 36, 39, 41, 43, 46, 49, 52, 70, 92, 95, 96, 103, 105, 144], "sequenceclassifi": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 105], "instead": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 72, 103, 105, 108, 110, 151, 172, 173, 179, 229], "per": [12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 73, 79, 86, 95, 96, 105, 108, 113, 115, 116, 117, 118, 123, 168, 179, 181, 197, 208, 211], "inputcol": [12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 89, 105, 169, 171, 172, 173, 174, 177, 180, 181], "averag": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 47, 49, 51, 52, 73, 75, 79, 82, 86, 89, 95, 96, 105, 118, 129, 152], "calcul": [12, 14, 15, 18, 20, 22, 24, 25, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 94, 113, 118, 126, 134, 152], "softmax": [12, 14, 15, 16, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 76, 78, 93, 154], "sigmoid": [12, 14, 15, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "love": [12, 15, 18, 20, 25, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 72, 88, 96, 132, 135, 225], "movi": [12, 15, 18, 20, 25, 27, 29, 31, 33, 36, 43, 45, 46, 49, 51, 52, 135, 138, 225], "child": [12, 15, 18, 20, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52], "pretti": [12, 15, 18, 20, 27, 29, 31, 33, 36, 41, 43, 45, 49, 51, 52, 103], "bore": [12, 15, 18, 20, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52], "neg": [12, 15, 18, 20, 22, 27, 29, 31, 33, 36, 43, 45, 46, 49, 51, 52, 134, 135, 152, 205, 221], "getclass": [12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 43, 44, 45, 49, 50, 51, 52, 53, 57, 59, 61, 120], "setcoalescesent": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 105], "limit": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 57, 59, 61, 68, 70, 74, 83, 84, 91, 94, 97, 103, 151, 156], "almost": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "512": [12, 14, 15, 16, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 47, 49, 51, 52, 68, 73, 79, 80, 84, 85, 86, 90, 91, 144], "help": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 63, 65, 66, 70, 123, 124, 136, 141, 142, 144, 147, 165, 181, 205, 221, 226, 230], "feed": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "entir": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 57, 85, 90, 91, 144, 148], "bool": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 66, 67, 68, 71, 72, 75, 79, 87, 92, 95, 98, 100, 105, 107, 108, 112, 113, 116, 117, 118, 121, 126, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 159, 164, 165, 168, 170, 172, 173, 174, 179, 181, 183, 187, 192, 198, 205, 208, 209, 211], "one": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 41, 43, 45, 49, 51, 52, 55, 57, 59, 60, 61, 63, 65, 67, 71, 72, 84, 89, 95, 96, 97, 103, 105, 108, 111, 116, 123, 132, 148, 156, 161, 181, 184, 221, 225], "albertfortokenclassif": [13, 70], "ner": [13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 95, 96, 100, 101, 161, 179, 197, 198, 205, 208, 221], "token_classifi": [13, 23, 37, 40, 44, 50, 53], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 70], "level": [13, 25, 41, 46, 71, 72, 83, 87, 88, 92, 94, 96, 98, 117, 118, 126, 154, 198, 211], "tokenclassifi": [13, 19, 23, 28, 32, 37, 40, 44, 50, 53], "john": [13, 19, 28, 32, 37, 40, 44, 50, 53, 55, 72, 88, 96, 98, 100, 119, 121, 132, 174, 216], "lenon": [13, 19, 28, 32, 37, 40, 44, 50, 53], "born": [13, 19, 28, 32, 37, 40, 44, 50, 53, 139, 141], "london": [13, 19, 28, 32, 37, 40, 44, 50, 53], "pari": [13, 19, 28, 32, 37, 40, 44, 50, 53, 120], "sarah": [13, 19, 28, 32, 37, 40, 44, 50, 53], "o": [13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 116, 117, 118, 119, 179, 197, 208, 211, 215, 231], "albertforzeroshotclassif": 14, "modelforsequenceclassif": [14, 15, 20, 24, 29, 33, 45, 51], "nli": [14, 15, 20, 24, 29, 33, 45, 51], "natur": [14, 15, 20, 24, 29, 33, 45, 46, 51, 61, 70, 71, 72, 74, 76, 77, 78, 84, 92, 93, 97, 105, 136, 137, 139, 145, 149, 151, 170, 180, 184], "equival": [14, 15, 20, 24, 29, 33, 45, 51, 179, 198, 229], "distilbertforsequenceclassif": [14, 31, 33], "don": [14, 15, 20, 24, 29, 33, 45, 51, 77, 87, 121], "hardcod": [14, 15, 20, 24, 29, 33, 45, 51], "potenti": [14, 15, 20, 24, 29, 33, 45, 51, 59, 138, 143, 148, 154], "thei": [14, 15, 20, 24, 29, 33, 45, 47, 51, 63, 65, 66, 118, 121, 123, 139, 182, 200, 212, 225], "chosen": [14, 15, 20, 24, 29, 33, 45, 51, 63, 65, 118, 123], "runtim": [14, 15, 20, 24, 29, 33, 45, 51], "usual": [14, 15, 20, 24, 29, 33, 45, 51, 61, 184, 209], "slower": [14, 15, 20, 24, 29, 33, 45, 51], "much": [14, 15, 20, 24, 25, 29, 33, 45, 47, 51, 70, 73, 79, 86, 87, 88, 121, 141, 143, 168, 198, 225], "flexibl": [14, 15, 20, 24, 29, 33, 45, 51, 56, 59], "loop": [14, 15, 20, 33, 45, 51], "through": [14, 15, 20, 33, 45, 51, 70, 84, 100, 103, 143, 146, 147, 174, 226], "longer": [14, 15, 20, 33, 45, 51, 70, 78, 83, 93, 105, 141, 144, 145, 230], "pass": [14, 15, 20, 24, 29, 33, 45, 51, 69, 123], "pose": [14, 15, 20, 24, 29, 33, 45, 51], "premis": [14, 15, 20, 24, 29, 33, 45, 51], "hypothesi": [14, 15, 20, 24, 29, 33, 45, 51], "pair": [14, 15, 20, 24, 29, 33, 45, 51, 56, 79, 86, 100, 143, 205], "albert_base_zero_shot_classifier_onnx": 14, "iphon": 14, "resolv": 14, "asap": 14, "urgent": 14, "bart": [14, 15, 136, 137], "albert_zero_shot_classifier_onnx": 14, "bartforzeroshotclassif": [14, 15], "bartforsequenceclassif": 15, "bart_large_zero_shot_classifier_mnli": 15, "setmaxsentencelength": [15, 44, 45, 51, 78, 93], "bertformultiplechoic": 16, "choic": [16, 87, 88, 111, 142, 145], "rocstori": 16, "swag": 16, "bert_base_uncased_multiple_choic": 16, "questionansw": [16, 17], "eiffel": 16, "tower": 16, "countri": [16, 154], "germani": 16, "franc": [16, 24, 144], "itali": 16, "setchoicesdelimit": 16, "delimit": [16, 94, 98, 100, 106, 111, 113, 117, 121, 134, 164, 183, 211, 214], "split": [16, 56, 57, 59, 60, 61, 66, 68, 131, 132, 136, 144, 161, 163, 164, 168], "bertforquestionansw": [16, 17, 47], "bert_base_cased_qa_squad2": 17, "bertforsequenceclassif": [18, 20], "bert_base_sequence_classifier_imdb": 18, "bertfortokenclassif": 19, "bert_base_token_classifier_conll03": 19, "bertforzeroshotclassif": 20, "bert_zero_shot_classifier_mnli": 20, "camembertforquestionansw": 21, "camembert": [21, 22, 23, 74], "camembert_base_qa_fquad": 21, "fr": [21, 22, 24, 74, 105, 143, 146], "camembertforsequenceclassif": [22, 24], "sequence_classifi": 22, "camembert_base_sequence_classifier_allocin": 22, "j": [22, 98], "ai": [22, 123, 124, 137, 142, 205, 221], "ador\u00e9": 22, "ce": 22, "film": 22, "lorsqu": 22, "\u00e9tai": 22, "enfant": 22, "je": 22, "d\u00e9test": 22, "\u00e7a": 22, "camembertfortokenclassif": 23, "camembert_base_token_classifier_wikin": 23, "georg": 23, "washington": 23, "est": [23, 74, 105, 144], "all\u00e9": 23, "\u00e0": 23, "camembertforzeroshotclassif": 24, "debertaforsequenceclassif": [24, 27, 29], "camembert_zero_shot_classifier_xnli_onnx": 24, "multi_class": 24, "setcandidatelabel": [24, 56], "sport": 24, "politiqu": 24, "scienc": [24, 82, 103, 150, 222], "l": 24, "\u00e9quip": 24, "de": [24, 61, 74, 103, 105, 143, 144], "joue": 24, "aujourd": 24, "hui": 24, "au": 24, "parc": 24, "princ": 24, "classifierdl": [25, 225], "classifierdlapproach": [25, 41, 225], "univers": [25, 63, 65, 91, 92, 138, 144, 146, 147, 148, 149], "encod": [25, 60, 67, 71, 72, 76, 82, 83, 86, 92, 120, 136, 137, 143, 144, 146, 205], "deep": [25, 71, 72, 80, 103, 117, 132, 154], "dnn": 25, "insid": [25, 41, 116, 129, 165, 211], "instanti": [25, 41, 46, 63, 65, 69, 78, 93, 94, 98, 106, 107, 111, 112, 117, 118, 121, 129, 132, 134, 135, 152, 154, 156, 157, 161, 163, 168, 211, 212], "classifierdlmodel": [25, 41, 225], "monitor": [25, 41, 46, 118, 123, 124, 205, 221], "metric": [25, 41, 46, 118, 157, 205], "done": [25, 41, 46, 87, 88, 117, 118, 226], "settestdataset": [25, 41, 46, 118, 126], "method": [25, 41, 46, 69, 70, 77, 78, 82, 84, 93, 97, 103, 118, 136, 152, 209, 220], "expect": [25, 41, 46, 73, 79, 86, 97, 118, 165, 181, 197], "path": [25, 41, 46, 63, 65, 78, 93, 94, 98, 100, 106, 107, 111, 112, 117, 118, 120, 121, 126, 132, 134, 136, 139, 154, 156, 157, 160, 165, 177, 179, 196, 205, 208, 211, 212, 214, 215, 221], "parquet": [25, 41, 46, 118, 126, 169], "datafram": [25, 41, 46, 78, 93, 94, 118, 126, 129, 152, 168, 179, 193, 197, 204, 205, 208, 211, 212, 214, 215, 221, 225, 229, 231], "ha": [25, 41, 46, 47, 56, 57, 59, 60, 61, 66, 67, 68, 70, 76, 77, 80, 87, 88, 91, 94, 103, 106, 111, 118, 126, 132, 134, 137, 143, 146, 148, 151, 156, 157, 168, 169, 170, 177, 179, 205, 209, 214, 221, 225, 226], "same": [25, 41, 46, 55, 70, 84, 87, 94, 95, 98, 100, 118, 123, 126, 138, 147, 148, 151, 152, 182, 205, 226], "follow": [25, 41, 46, 55, 62, 67, 80, 83, 94, 103, 108, 110, 111, 116, 118, 121, 131, 148, 166, 183, 221, 223, 226], "universalsentenceencod": [25, 41, 46, 92, 205, 221, 225], "preprocessingpipelin": [25, 41, 46, 118, 126], "randomsplit": [25, 41, 46, 118, 126], "write": [25, 41, 46, 94, 118, 126, 138, 150, 156, 157, 226], "overwrit": [25, 41, 46, 118, 119, 126, 205], "test_data": [25, 41, 46, 118, 126], "setlabelcolumn": [25, 41, 46, 115, 117, 118, 125, 160, 205, 221, 225], "usag": [25, 41, 46, 55, 63, 65, 66, 67, 68, 70, 71, 72, 74, 75, 77, 80, 87, 92, 94, 95, 97, 98, 103, 105, 106, 108, 110, 111, 112, 117, 118, 121, 129, 131, 132, 134, 135, 136, 137, 144, 151, 152, 154, 156, 158, 159, 163, 165, 168], "64": [25, 41, 46, 70, 118, 125, 225], "dropout": [25, 46, 118], "coeffici": [25, 46, 117, 118], "enableoutputlog": [25, 41, 46, 118], "stdout": [25, 41, 46, 118, 126], "addit": [25, 41, 46, 63, 65, 69, 71, 72, 98, 117, 118, 123, 126, 131, 139, 150, 165, 205, 224, 225], "evaluationlogextend": [25, 41, 46, 118], "valid": [25, 41, 46, 108, 118, 126, 132, 154, 221], "displai": [25, 41, 46, 126, 139, 205, 221], "time": [25, 41, 46, 70, 78, 93, 95, 96, 103, 108, 126, 135, 154, 168, 198, 224, 225, 229, 230], "labelcolumn": [25, 41, 46, 117, 118], "lr": [25, 41, 46, 118, 168], "rate": [25, 41, 46, 62, 78, 87, 88, 93, 94, 118, 125, 136, 152, 154], "005": [25, 46, 118, 125], "maxepoch": [25, 41, 46, 117, 118], "epoch": [25, 41, 46, 115, 117, 118, 125, 126, 132, 154, 205], "30": [25, 46, 103, 108, 110, 116, 125, 144, 179, 197, 208, 216, 224], "outputlogspath": [25, 41, 46, 118, 132], "randomse": [25, 41, 46, 117, 118], "random": [25, 41, 46, 78, 93, 115, 117, 118, 123, 125, 144, 152, 172], "seed": [25, 41, 46, 78, 93, 115, 117, 118, 125, 136, 144], "shuffl": [25, 41, 115, 125, 136, 137], "testdataset": [25, 41, 46, 118, 205, 221], "statist": [25, 41, 46, 94, 103, 118, 126], "validationsplit": [25, 41, 46, 118, 132], "choos": [25, 41, 46, 75, 89, 118, 123, 132, 156], "proport": [25, 41, 46, 118, 126, 132], "against": [25, 41, 46, 98, 103, 107, 112, 118, 126, 132, 147, 148, 182], "between": [25, 41, 46, 59, 63, 65, 66, 68, 84, 87, 88, 92, 95, 96, 97, 100, 118, 123, 126, 131, 132, 143, 145, 146, 154], "off": [25, 41, 46, 92, 95, 96, 118, 126, 132], "verbos": [25, 41, 46, 117, 118, 126], "multiclassifierdlapproach": [25, 41, 205, 221], "sentimentdlapproach": [25, 41, 46], "accept": [25, 41, 46, 123], "singl": [25, 41, 46, 69, 79, 82, 94, 100, 103, 136, 137, 143, 152, 161, 163, 165, 181, 211], "item": [25, 46, 94, 123, 205, 211, 221], "doubl": [25, 46, 169, 183], "sentenceembed": [25, 41, 46, 89, 94, 172], "In": [25, 41, 46, 57, 61, 68, 74, 76, 77, 83, 84, 86, 94, 97, 98, 103, 105, 106, 107, 111, 112, 131, 132, 134, 137, 139, 141, 143, 145, 146, 147, 149, 150, 151, 156, 157, 168, 205, 214, 221, 225, 226, 230, 231], "csv": [25, 46, 98, 126, 183, 225], "best": [25, 46, 70, 74, 79, 82, 87, 88, 103, 105, 118, 123, 136, 137, 138, 143, 150, 225], "wach": [25, 225], "ever": [25, 46, 67, 225], "opinion": [25, 46, 225], "win": [25, 46, 225], "award": [25, 46, 225], "terribl": [25, 46, 225], "act": [25, 46, 225], "bad": [25, 46, 134, 205, 221, 225], "realli": [25, 46, 123, 135, 225], "trane": 25, "smallcorpu": [25, 46, 225], "read": [25, 46, 56, 57, 59, 60, 61, 63, 65, 78, 93, 103, 106, 107, 108, 110, 111, 112, 117, 120, 121, 126, 132, 134, 139, 154, 156, 157, 165, 168, 169, 171, 177, 180, 193, 196, 198, 199, 205, 209, 211, 212, 214, 215, 221, 225, 231], "header": [25, 46, 47, 181, 183, 225], "src": [25, 46, 56, 57, 59, 60, 61, 63, 65, 94, 106, 107, 111, 112, 117, 118, 129, 156, 157, 161, 168, 211, 212, 214, 215, 216, 225, 231], "useembed": [25, 41, 46, 92, 225], "docclassifi": [25, 41, 46, 225], "setbatchs": [25, 41, 46, 80, 118, 125, 136, 154, 205, 221, 225], "setmaxepoch": [25, 41, 46, 115, 117, 118, 125, 205, 221, 225], "20": [25, 39, 47, 57, 66, 97, 116, 136, 137, 138, 139, 141, 143, 145, 146, 147, 148, 149, 150, 179, 183, 197, 208, 225], "setlr": [25, 41, 46, 118, 125, 205, 221, 225], "5e": [25, 46, 225], "setdropout": [25, 46, 118, 225], "pipelinemodel": [25, 39, 41, 46, 63, 65, 67, 78, 93, 117, 118, 135, 154, 156, 157, 168, 179, 182, 205, 209, 225, 228], "v": [25, 41, 46, 62, 76, 84, 94, 103, 105, 107, 118, 125, 126, 138, 157, 197], "classifierdl_use_trec6": [25, 225], "trec": 25, "multiclassifierdlmodel": [25, 41], "sentimentdlmodel": [25, 41, 46], "sarcasmdl": [25, 225], "classifierdl_use_sarcasm": [25, 225], "sarcasm": [25, 225], "m": [25, 68, 108, 110, 143, 216, 225], "could": [25, 77, 103, 111, 126, 154, 224, 225, 226], "put": [25, 197, 225], "word": [25, 59, 61, 63, 65, 70, 75, 76, 78, 80, 87, 89, 92, 93, 94, 97, 98, 100, 103, 106, 113, 116, 119, 120, 121, 129, 134, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 163, 165, 167, 168, 179, 197, 208, 214, 215, 224, 225], "wake": [25, 225], "am": [25, 66, 108, 110, 136, 138, 139, 141, 142, 143, 147, 148, 149, 161, 225], "mondai": [25, 225], "would": [25, 55, 66, 75, 89, 108, 132, 198, 225], "arrays_zip": [25, 63, 65, 103, 225], "out": [25, 73, 79, 86, 103, 106, 121, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 158, 159, 225], "normal": [25, 57, 59, 60, 61, 67, 101, 107, 132, 135, 159, 172, 182, 184, 198, 225, 226], "debertaforquestionansw": 26, "deberta": [26, 27, 28, 29, 76], "deberta_v3_xsmall_qa_squad2": 26, "v2": [27, 28, 71, 72, 76, 150], "v3": [27, 28], "deberta_v3_xsmall_sequence_classifier_imdb": 27, "deberta_base_sequence_classifier_imdb": 27, "debertafortokenclassif": 28, "deberta_v3_xsmall_token_classifier_conll03": 28, "debertaforzeroshotclassif": 29, "deberta_base_zero_shot_classifier_mnli_anli_v3": 29, "distilbertforquestionansw": 30, "distilbert": [30, 31, 33, 77], "distilbert_base_cased_qa_squad2": 30, "distilbert_base_sequence_classifier_imdb": 31, "distilbertfortokenclassif": 32, "distilbert_base_token_classifier_conll03": 32, "distilbertforzeroshotclassif": 33, "distilbert_base_zero_shot_classifier_uncased_mnli": 33, "albert_for_sequence_classif": [34, 101], "albert_for_token_classif": [34, 101], "albert_for_zero_shot_classif": [34, 101], "bart_for_zero_shot_classif": [34, 101], "bert_for_sequence_classif": [34, 101], "bert_for_token_classif": [34, 101], "bert_for_zero_shot_classif": [34, 101], "camembert_for_sequence_classif": [34, 101], "camembert_for_token_classif": [34, 101], "camembert_for_zero_shot_classif": [34, 101], "deberta_for_sequence_classif": [34, 101], "deberta_for_token_classif": [34, 101], "deberta_for_zero_shot_classif": [34, 101], "distil_bert_for_sequence_classif": [34, 101], "distil_bert_for_token_classif": [34, 101], "distil_bert_for_zero_shot_classif": [34, 101], "longformer_for_sequence_classif": [34, 101], "longformer_for_token_classif": [34, 101], "mpnet_for_sequence_classif": [34, 101], "mpnet_for_token_classif": [34, 101], "multi_classifier_dl": [34, 101], "roberta_for_sequence_classif": [34, 101], "roberta_for_token_classif": [34, 101], "roberta_for_zero_shot_classif": [34, 101], "sentiment_dl": [34, 101], "xlm_roberta_for_sequence_classif": [34, 101], "xlm_roberta_for_token_classif": [34, 101], "xlm_roberta_for_zero_shot_classif": [34, 101], "xlnet_for_sequence_classif": [34, 101], "xlnet_for_token_classif": [34, 101], "longformerforquestionansw": 35, "longform": [35, 36, 37, 83], "longformer_base_base_qa_squad2": 35, "longformerforsequenceclassif": 36, "longformer_base_sequence_classifier_imdb": 36, "4096": [36, 70, 83], "longformerfortokenclassif": 37, "xlnet_base_token_classifier_conll03": [37, 53], "longformer_base_token_classifier_conll03": 37, "mpnetforquestionansw": 38, "mpnet": [38, 39, 84], "mpnet_base_question_answering_squad2": 38, "mpnetforsequenceclassif": 39, "mpnet_sequence_classifier_ukr_messag": 39, "drive": 39, "car": 39, "bu": 39, "arriv": 39, "minut": [39, 41], "pineappl": 39, "pizza": 39, "worst": 39, "transport": 39, "movement": 39, "food": [39, 123, 124], "mpnet_base_sequence_classifier_imdb": 39, "mpnetfortokenclassif": 40, "xlm": [40, 48, 49, 50, 95, 96], "roberta": [40, 42, 43, 44, 45, 48, 49, 50, 60, 74, 76, 83, 84, 87, 88, 95, 96, 120, 136, 137], "mpnet_base_token_classifi": [40, 50], "xlmrobertafortokenclassif": [40, 50], "multiclassifierdl": 41, "bidirect": [41, 71, 72, 80, 97, 136, 137], "gru": 41, "convolut": [41, 57, 61], "machin": [41, 57, 66, 68, 78, 93, 103, 117, 136, 137, 139, 143, 144, 146, 151, 205, 223], "strongli": 41, "relat": [41, 63, 65, 100, 230], "variant": [41, 62, 83, 92, 148], "mai": [41, 68, 69, 123, 136, 141, 143, 147, 170, 224, 225, 226, 229, 230], "instanc": [41, 69, 120, 125, 126, 187, 192, 198, 199, 203], "multiclass": 41, "categor": [41, 209], "precis": [41, 63, 65, 68], "constraint": 41, "mani": [41, 69, 76, 87, 88, 103, 123, 136, 137, 138, 139, 141, 143, 144, 146, 151, 168], "formal": 41, "find": [41, 63, 65, 86, 87, 88, 91, 92, 98, 100, 106, 108, 136, 137, 139, 150], "binari": [41, 177, 193, 205], "bertsentenceembed": [41, 46, 72, 88, 96], "multiclassifi": [41, 205, 221], "001": [41, 62, 117, 118], "10": [41, 55, 63, 103, 108, 110, 119, 123, 143, 152, 156, 205, 216, 224], "44": [41, 78, 93, 129, 146], "shuffleperepoch": 41, "threshold": [41, 46, 78, 93, 103, 105, 117, 120, 136, 154, 168], "ed58abb40640f983": 41, "pn": 41, "newsyou": 41, "toxic": [41, 146, 147], "a1237f726b5f5d89": 41, "dude": 41, "place": [41, 61, 69], "obscen": 41, "insult": 41, "24b0d6c8733c2abe": 41, "thank": [41, 97, 103, 216], "8c4478fb239bcfc0": 41, "gee": 41, "traindataset": [41, 205, 221], "printschema": [41, 169, 171, 177, 180], "root": [41, 55, 63, 65, 100, 169, 171, 177, 180, 212], "setcleanupmod": [41, 171, 180], "shrink": [41, 171, 180], "1e": [41, 205, 221], "setthreshold": [41, 46, 103, 105, 205, 221], "setvalidationsplit": [41, 126, 132], "setverbos": [41, 117, 118, 126], "multiclassifierdl_use_tox": 41, "comment": [41, 103], "jigsaw": 41, "good": [41, 74, 77, 92, 135], "stuff": 41, "wtf": 41, "kind": [41, 103, 108, 110], "crap": 41, "robertaforquestionansw": [42, 120], "roberta_base_qa_squad2": [42, 120], "robertaforsequenceclassif": [43, 45], "roberta_base_sequence_classifier_imdb": 43, "robertafortokenclassif": 44, "roberta_base_token_classifier_conll03": 44, "robertaforzeroshotclassif": 45, "roberta_base_zero_shot_classifier_nli": 45, "sentimentdl": 46, "affect": [46, 165], "subject": [46, 63, 65], "view": 46, "common": [46, 91, 98, 108, 124, 147, 148, 150, 161, 170, 198, 228], "product": 46, "review": [46, 123, 201], "tweet": 46, "interpret": [46, 66, 98], "posit": [46, 76, 77, 84, 95, 96, 97, 103, 116, 123, 134, 135, 152, 164, 168, 184, 205, 221], "final": [46, 66, 83, 87, 88, 95, 96, 105, 118, 143, 154, 225], "otheriws": [46, 105], "neutral": [46, 105], "thresholdlabel": [46, 105], "score": [46, 71, 72, 95, 96, 103, 105, 117, 118, 120, 134, 135, 139], "less": [46, 77, 105, 108, 113, 117, 144, 147, 156], "watch": [46, 135, 138], "32": [46, 70, 80, 136, 216, 224, 230], "setthresholdlabel": [46, 105], "p": [46, 67, 78, 93, 105, 118, 126, 136, 143, 163], "sentimentdl_use_imdb": 46, "imdb": 46, "sentimentdl_use_twitt": 46, "wow": 46, "video": [46, 103], "awesom": 46, "bruh": 46, "damn": 46, "wast": [46, 135], "tapasforquestionansw": 47, "implement": [47, 69, 78, 93, 95, 120, 132, 152, 154, 175, 176, 185, 186, 194, 200, 204], "tapa": 47, "design": [47, 57, 59, 62, 71, 72, 87, 88, 91, 107, 137, 142, 144, 150, 205, 221], "about": [47, 63, 65, 87, 88, 94, 103, 120, 123, 131, 138, 157, 179, 182, 224, 226, 229, 230], "tabular": [47, 183], "tabl": [47, 152, 183], "tri": 47, "share": [47, 103, 226], "its": [47, 61, 76, 77, 83, 97, 103, 129, 134, 136, 137, 144, 145, 147, 148, 149, 150, 159, 205, 214], "table_qa_tapas_base_finetuned_wtq": 47, "document_assembl": [47, 120, 152, 178, 183, 198], "table_json": 47, "document_t": [47, 183], "sentence_detector": [47, 101, 120, 130], "table_assembl": [47, 178, 198], "tableassembl": [47, 183], "stage": [47, 152, 179, 182, 205, 221, 225, 226, 229], "json_data": 47, "monei": [47, 183], "ag": [47, 73, 79, 86, 183], "donald": [47, 183], "trump": [47, 183], "75": [47, 103, 148, 183], "elon": [47, 183], "musk": [47, 183], "55": [47, 119, 183, 216], "AS": [47, 55, 120], "who": [47, 66, 68, 142, 163, 225], "earn": 47, "count": [47, 123, 154], "old": [47, 55, 214], "xlmrobertaforquestionansw": 48, "xlm_roberta_base_qa_squad2": 48, "xlmrobertaforsequenceclassif": [49, 51], "xlm_roberta_base_sequence_classifier_imdb": 49, "xlmrobertaforzeroshotclassif": 51, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 51, "xlmroberta": 51, "xlnetforsequenceclassif": 52, "xlnet": [52, 53, 84, 97], "xlnet_base_sequence_classifier_imdb": 52, "xlnetfortokenclassif": 53, "spanbert_coref": 54, "spanbertcorefmodel": 55, "corefer": 55, "resolut": [55, 59], "spanbert": 55, "identifi": [55, 94, 103, 107, 111, 123, 124, 150, 164, 165, 205, 226], "given": [55, 57, 59, 60, 61, 66, 68, 82, 98, 103, 120, 136, 137, 139, 151, 154, 156, 157, 159, 191, 204, 205], "told": [55, 110], "mari": [55, 72, 88, 96, 132], "he": [55, 66, 68, 76, 110, 143, 163, 216], "borrow": 55, "book": [55, 67, 139, 154, 212], "her": [55, 120], "link": [55, 208], "ontonot": 55, "corefresolut": 55, "spanbert_base_coref": 55, "maxsegmentlength": 55, "textgenr": 55, "genr": 55, "One": [55, 82, 103, 163, 166], "bc": 55, "broadcast": 55, "convers": 55, "bn": [55, 143], "nw": 55, "wire": 55, "pt": [55, 143], "pivot": [55, 91], "testament": 55, "tc": 55, "telephon": 55, "wb": 55, "setmaxsegmentlength": 55, "settextgenr": 55, "clipforzeroshotclassif": 56, "clip": 56, "contrast": [56, 79, 82, 83, 86, 107, 151], "neural": [56, 61, 71, 72, 76, 118, 132, 136, 137, 144], "network": [56, 61, 71, 72, 80, 118, 132], "abil": [56, 91, 103, 137, 138, 139, 145], "hard": [56, 158], "veri": [56, 60, 61, 66, 74, 80, 95, 96, 97, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 179, 224, 226, 229, 230], "similar": [56, 70, 82, 91, 92, 103, 105, 150], "gpt": [56, 87, 123, 136, 137, 139, 148], "imageclassifi": [56, 57, 59, 60, 61], "image_assembl": [56, 57, 59, 60, 61, 178, 198], "zero_shot_classifier_clip_vit_base_patch32": 56, "huggingfac": [56, 57, 59, 60, 61, 74, 147, 148], "clipforzeroshotclassificationtestspec": 56, "candidatelabel": 56, "imagedf": [56, 57, 59, 60, 61], "dropinvalid": [56, 57, 59, 60, 61], "imageassembl": [56, 57, 59, 60, 61, 177], "photo": 56, "bird": [56, 60], "cat": [56, 57, 59, 60, 61], "dog": [56, 60], "hen": [56, 57, 59, 60, 61], "hippo": [56, 57, 59, 61], "room": [56, 60, 181], "tractor": [56, 57, 59, 60, 61], "ostrich": [56, 57, 59, 60, 61], "ox": [56, 57, 59, 60, 61], "pipelinedf": [56, 57, 59, 60, 61], "revers": [56, 57, 59, 60, 61], "image_nam": [56, 57, 59, 60, 61], "palac": [56, 57, 59, 60, 61], "jpeg": [56, 57, 59, 60, 61], "egyptian_cat": [56, 57, 59, 60, 61], "hippopotamu": [56, 57, 59, 60, 61], "junco": [56, 57, 59, 60, 61], "bluetick": [56, 57, 59, 60, 61], "jpg": [56, 57, 59, 60, 61], "chihuahua": [56, 57, 59, 60, 61], "getcandidatelabel": 56, "image_classifier_vit_base_patch16_224": [56, 61], "convnextforimageclassif": 57, "convnet": 57, "convnext": 57, "2020": [57, 103, 108, 110, 132], "zhuang": 57, "liu": [57, 59, 76, 87, 88], "hanzi": 57, "mao": 57, "chao": 57, "yuan": 57, "wu": 57, "christoph": 57, "feichtenhof": 57, "trevor": 57, "darrel": 57, "sain": 57, "xie": 57, "pure": [57, 61, 144], "inspir": [57, 135, 156, 157, 201], "vision": [57, 59, 60, 61, 148], "claim": 57, "outperform": [57, 79, 83, 84, 86, 91, 92, 95, 96, 97, 103, 138, 139, 141, 142, 147, 150], "convnextforimageclassificationtestspec": 57, "roar": 57, "visual": [57, 59, 205], "began": 57, "introduct": 57, "vit": [57, 60, 61], "quickli": [57, 123], "supersed": 57, "vanilla": 57, "hand": [57, 163], "face": [57, 91], "difficulti": 57, "detect": [57, 59, 92, 104, 105, 123, 124, 130, 131, 132], "semant": [57, 59, 73, 80, 82, 91, 92, 152, 168], "hierarch": [57, 59, 78, 93], "swin": [57, 59], "reintroduc": 57, "sever": [57, 150, 231], "practic": [57, 74, 137, 145, 151], "viabl": 57, "backbon": [57, 59, 97], "demonstr": [57, 59, 77, 83, 91, 103, 139, 142, 143, 144], "remark": [57, 142], "wide": [57, 67, 71, 72, 76, 77, 79, 95, 96, 137, 141, 150], "varieti": [57, 83, 84, 95, 96, 230], "howev": [57, 70, 84, 89, 91, 97, 103, 121, 141, 143, 146, 209, 224], "effect": [57, 59, 60, 61, 83, 91, 123, 131, 136, 137, 143, 145, 146, 151], "hybrid": 57, "still": [57, 139, 205], "credit": 57, "superior": [57, 142], "inher": 57, "induct": [57, 77], "bias": [57, 77, 147], "reexamin": 57, "space": [57, 78, 91, 93, 94, 113, 152, 184], "achiev": [57, 76, 79, 82, 83, 84, 87, 88, 95, 96, 97, 118, 136, 137, 138, 139, 141, 144, 146, 148, 151, 179, 229], "gradual": 57, "modern": [57, 146], "resnet": 57, "toward": [57, 139, 146], "discov": [57, 222], "compon": [57, 61, 91, 125, 126, 169, 177, 187, 192, 203, 229], "contribut": [57, 141, 147], "along": [57, 100], "wai": [57, 63, 65, 98, 100, 147, 148, 149, 182, 208], "outcom": 57, "explor": [57, 91, 137, 143, 147, 151], "famili": [57, 67, 79, 141, 142, 148], "dub": [57, 95, 96], "construct": [57, 69, 78, 93, 165, 208, 228], "compet": 57, "favor": 57, "term": [57, 103], "scalabl": 57, "87": [57, 59], "imagenet": [57, 59, 61], "coco": [57, 59], "ade20k": [57, 59], "while": [57, 59, 61, 70, 77, 82, 94, 103, 123, 126, 139, 143, 146, 205, 221, 226], "maintain": 57, "simplic": [57, 136, 137], "effici": [57, 59, 76, 78, 92, 93, 142, 144, 145, 150, 224], "dores": [57, 59, 60, 61], "resiz": [57, 59, 60, 61], "certain": [57, 59, 60, 61, 154], "donorm": [57, 59, 60, 61], "deviat": [57, 59, 60, 61], "featureextractortyp": [57, 59, 60, 61], "architectur": [57, 59, 60, 61, 70, 71, 72, 76, 87, 105, 118, 132, 136, 137, 146, 149, 151], "featur": [57, 59, 60, 61, 63, 78, 85, 90, 91, 93, 103, 113, 117, 126, 145, 152, 205, 228], "imagemean": [57, 59, 60, 61], "imagestd": [57, 59, 60, 61], "resampl": [57, 59, 60, 61], "pil": [57, 59, 60, 61], "nearest": [57, 59, 60, 61, 152], "bilinear": [57, 59, 60, 61], "bicub": [57, 59, 60, 61], "do_res": [57, 59, 60, 61], "tupl": [57, 59, 60, 61, 181, 204], "dorescal": [57, 59, 60], "rescal": [57, 59, 60], "rescalefactor": [57, 59, 60], "factor": [57, 59, 60, 95, 96, 97, 136, 137, 151, 154], "croppct": 57, "percentag": [57, 94, 154, 168], "crop": 57, "tabbi": [57, 59], "river": [57, 59, 61], "hors": [57, 59, 61], "amphibiu": [57, 59, 61], "snowbird": [57, 59, 61], "struthio": [57, 59, 61], "camelu": [57, 59, 61], "thresher": 57, "thrasher": 57, "thresh": 57, "setdorescal": 57, "boolean": [57, 108], "setrescalefactor": 57, "255": 57, "setcroppct": 57, "determin": [57, 69, 95, 181], "smaller": [57, 68, 77, 78, 93], "224": 57, "256": 57, "specifi": [57, 69, 119, 120, 123, 132, 136, 211, 212], "edg": [57, 77, 100, 138, 142], "afterward": 57, "image_classifier_convnext_tiny_224_loc": 57, "clip_for_zero_shot_classif": 58, "convnext_for_image_classif": 58, "swin_for_image_classif": 58, "vision_encoder_decoder_for_image_capt": 58, "vit_for_image_classif": 58, "swinforimageclassif": 59, "swinimageclassif": 59, "shift": 59, "window": [59, 60, 78, 83, 93, 103, 118, 145, 149, 154], "ze": 59, "yutong": 59, "lin": 59, "yue": [59, 146], "cao": 59, "han": 59, "hu": [59, 143], "yixuan": 59, "zheng": 59, "zhang": 59, "stephen": 59, "bain": 59, "guo": 59, "whose": [59, 69, 148], "scheme": [59, 87, 136, 137], "bring": [59, 143, 225], "greater": [59, 103, 123, 136], "attent": [59, 61, 76, 83, 123, 136, 141, 145, 149], "non": [59, 138, 143, 147, 165, 168], "overlap": [59, 66, 68, 107, 112], "cross": [59, 95, 96, 119], "connect": 59, "image_classifier_swin_base_patch4_window7_224": 59, "swinforimageclassificationtest": 59, "present": [59, 70, 79, 80, 83, 87, 88, 92, 95, 96, 100, 123, 126, 132, 136, 137, 144, 152], "call": [59, 69, 71, 72, 77, 79, 91, 103, 123, 139, 141, 147, 148, 204, 209, 211, 225, 231], "purpos": [59, 77, 79, 132], "adapt": [59, 149], "aris": 59, "domain": [59, 82, 91, 103, 139], "variat": 59, "high": [59, 90, 91, 92, 95, 96, 136, 137, 143, 144, 146, 148, 150], "variou": [59, 91, 97, 145, 147, 150, 219], "complex": [59, 80, 91, 92, 103, 145, 156, 157], "respect": [59, 69, 76, 94, 117, 118, 148, 214], "These": [59, 70, 87, 88, 91, 97, 103, 117, 139, 142, 181, 208, 223], "broad": [59, 66, 139], "rang": [59, 71, 72, 76, 77, 79, 82, 95, 96, 136, 137, 141, 142, 147], "1k": 59, "dens": [59, 71, 72, 73, 143, 148, 152], "box": [59, 143, 146], "ap": 59, "51": [59, 171, 180, 214], "53": [59, 107, 112], "miou": 59, "val": 59, "Its": [59, 65, 120, 137], "surpass": [59, 76, 86, 138, 145], "previou": [59, 82, 84, 95, 96, 139, 142, 146, 149, 225], "margin": [59, 84, 97], "prove": 59, "benefici": [59, 103], "mlp": 59, "visionencoderdecoderforimagecapt": 60, "visionencoderdecod": 60, "caption": 60, "auto": [60, 137, 160], "beit": 60, "deit": 60, "gpt2": [60, 139], "image_captioning_vit_gpt2": 60, "visionencoderdecodertestspec": 60, "nreturnsequ": 60, "computation": [60, 80, 87, 88, 97, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151], "expens": [60, 80, 87, 88, 97, 134, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 156], "especi": [60, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151], "larger": [60, 74, 77, 87, 88, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152], "acceler": [60, 80, 97, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 198], "gpu": [60, 70, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 198], "imagecapt": 60, "setbeams": [60, 137, 142, 143, 146, 192], "setdosampl": [60, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "fill": [60, 136, 137], "furnitur": 60, "lai": [60, 146], "couch": 60, "anoth": [60, 226], "brown": 60, "bear": 60, "bodi": 60, "water": 60, "flock": 60, "chicken": 60, "stand": [60, 71, 72, 145], "lush": 60, "green": 60, "field": [60, 78, 93, 94, 98, 112, 147, 148, 149], "small": [60, 61, 67, 70, 74, 77, 78, 86, 93, 106, 129, 136, 146, 147, 148, 150, 179, 214, 229], "wet": 60, "ground": 60, "wooden": 60, "floor": 60, "wear": 60, "blue": 60, "sweater": 60, "man": [60, 139, 141], "cow": 60, "vitforimageclassif": 61, "altern": [61, 103, 123, 134, 154, 156, 157, 179, 183, 225, 230], "vitimageclassificationtestspec": 61, "becom": [61, 70, 77, 103], "facto": [61, 103], "remain": [61, 67, 70, 77, 103], "conjunct": 61, "replac": [61, 67, 76, 83, 105, 106, 119, 132, 136, 137, 156, 157, 191, 225], "overal": [61, 94, 97, 138, 148], "structur": [61, 120, 184, 224], "relianc": [61, 91], "cnn": [61, 105, 118, 132], "necessari": [61, 69, 77, 221, 228], "directli": [61, 143, 146, 179, 205, 209, 221], "patch": 61, "mid": 61, "cifar": 61, "vtab": 61, "etc": [61, 75, 79, 82, 84, 138, 149, 172, 184, 221], "attain": 61, "excel": [61, 97, 145], "substanti": [61, 71, 72], "fewer": [61, 70, 82, 152], "worth": 61, "16x16": 61, "egyptian": [61, 146], "date2chunk": 62, "datematch": [62, 108], "multidatematch": [62, 108, 110], "entitynam": 62, "date_chunk": 62, "omicron": 62, "covid": 62, "world": [62, 66, 67, 68, 85, 90, 91, 145, 147, 148, 149, 161, 205, 216, 221], "health": 62, "organ": [62, 103, 144, 181], "nov": [62, 108, 110, 214], "26": [62, 116, 179, 197, 208, 216], "2021": [62, 108, 110], "118": [62, 183], "121": 62, "01": [62, 108, 110, 111], "setentitynam": 62, "dependencypars": [63, 65, 100], "dependencyparserapproach": [63, 212, 231], "unlabel": [63, 71, 72, 137, 139, 151], "grammat": [63, 65], "dependencyparsermodel": [63, 65, 100], "relationship": [63, 65, 92, 100], "tell": [63, 65, 103, 197], "verb": [63, 65, 212], "modifi": [63, 65, 87, 88, 116, 123, 132], "describ": [63, 65, 86, 100, 103, 144], "particular": [63, 65, 103, 209, 225], "treebank": 63, "penn": 63, "setdependencytreebank": 63, "conll": [63, 65, 117, 118, 198, 212, 213, 228], "u": [63, 65, 76, 77, 103, 110, 116, 117, 118, 179, 197, 208, 212, 223, 226, 231], "setconllu": [63, 65], "dependencytreebank": 63, "conllu": [63, 65, 106, 198, 213, 228], "numberofiter": [63, 65], "converg": [63, 65, 129, 168], "better": [63, 65, 70, 76, 84, 97, 103, 117, 129, 131, 132, 135, 136, 137, 138, 141, 168], "typeddependencyparserapproach": [63, 65], "postagg": [63, 65, 100, 117, 129], "dependency_treebank": 63, "emptydataset": [63, 65], "tree": [63, 100], "bank": 63, "setnumberofiter": [63, 65], "read_a": [63, 65, 98, 106, 107, 111, 112, 117, 121, 126, 134, 156, 157, 165, 190, 196, 198, 211, 212], "reada": [63, 65, 94, 98, 106, 107, 111, 112, 117, 121, 126, 134, 156, 157, 161, 165, 193, 196, 211, 212], "dep": 63, "dependency_conllu": [63, 100], "perceptron": [63, 101, 128], "typeddependencyparsermdoel": 63, "union": [63, 65], "worker": [63, 65], "turner": [63, 65], "newal": [63, 65], "sai": [63, 65, 103, 165], "disappoint": [63, 65], "talk": [63, 65, 123], "stricken": [63, 65], "parent": [63, 65], "firm": [63, 65], "feder": [63, 65], "mogul": [63, 65], "dependency_pars": [64, 101, 209, 230], "typed_dependency_pars": [64, 101], "typeddependencypars": [65, 100], "conll2009": 65, "typeddependencyparsermodel": [65, 100], "beforehand": 65, "2009": 65, "setconll2009": 65, "dependency_typ": [65, 100], "train_smal": 65, "txt": [65, 78, 93, 94, 106, 107, 111, 112, 129, 132, 134, 154, 156, 157, 161, 165, 214, 215, 231], "typdep": 65, "dependency_typed_conllu": [65, 100], "amod": 65, "flat": [65, 100, 174], "nsubj": [65, 100, 174, 212], "parataxi": 65, "documentnorm": [66, 67, 68], "documentcharactertextsplitt": 66, "roughli": 66, "separ": [66, 68, 77, 87, 111, 113, 131, 132, 156, 165, 168, 173, 197, 211, 223], "subtext": 66, "perfect": [66, 68], "reason": [66, 68, 123, 147, 148, 150], "observ": [66, 68, 92], "seen": [66, 68, 136, 137], "addition": [66, 68, 97, 118, 129, 145, 149, 171, 180, 208], "custom": [66, 94, 117, 118, 131, 132, 165, 198, 205], "setsplitpattern": [66, 165], "regex": [66, 67, 98, 108, 111, 121, 154, 156, 157, 164, 165, 168], "setpatternsareregex": 66, "setkeepsepar": 66, "trim": [66, 68], "whitespac": [66, 68, 164, 168, 170], "settrimwhitespac": [66, 68, 164], "individu": [66, 68, 69, 103, 154], "setexplodesplit": [66, 68], "documentcharactertextsplittertest": 66, "chunksiz": 66, "chunkoverlap": 66, "splitpattern": [66, 165], "decreas": [66, 123, 152], "prioriti": [66, 156, 165], "patternsareregex": 66, "keepsepar": 66, "explodesplit": [66, 68], "trimwhitespac": [66, 68, 164], "brioni": 66, "lodg": 66, "serpentin": 66, "aven": 66, "19798": 66, "39395": 66, "19597": 66, "did": [66, 103, 145, 149], "woman": 66, "think": 66, "39371": 66, "59242": 66, "19871": 66, "But": [66, 68, 73, 79, 86], "said": [66, 68], "million": [66, 86, 103, 119, 139], "red": 66, "men": 66, "59166": 66, "77833": 66, "18667": 66, "friend": 66, "enthusiast": 66, "musician": 66, "being": [66, 77, 118, 123, 126, 137, 141, 144, 148, 151, 152], "himself": 66, "capab": 66, "77835": 66, "97769": 66, "19934": 66, "And": 66, "yet": [66, 209], "convinc": 66, "come": [66, 103, 116, 123, 141], "li": [66, 148], "97771": 66, "117248": 66, "19477": 66, "she": [66, 163], "had": [66, 103, 123], "slate": 66, "colour": 66, "brim": 66, "straw": 66, "hat": 66, "feather": 66, "117250": 66, "137242": 66, "19992": 66, "That": [66, 103, 163, 205, 221, 226], "littl": [66, 132, 230], "paradox": 66, "profoundli": 66, "singulari": 66, "137244": 66, "157171": 66, "19927": 66, "setchunks": 66, "setchunkoverlap": 66, "raw": [67, 139, 163, 165, 168, 224, 226], "scrape": 67, "xml": 67, "remov": [67, 87, 88, 121, 135, 164, 172, 173, 174], "dirti": [67, 121], "want": [67, 68, 98, 119, 209, 226], "polici": 67, "__": [67, 136, 137, 172, 173], "action": 67, "clean": [67, 121, 137, 151, 184, 226], "lowercas": [67, 121, 164, 168, 170], "pretty_al": 67, "utf": 67, "cleanuppattern": [67, 121], "normalizeddocu": 67, "setact": 67, "setpattern": [67, 164, 168], "setreplac": 67, "setpolici": 67, "setlowercas": [67, 121, 170, 184], "div": 67, "theworldsgreatest": 67, "right": [67, 71, 72, 136, 137, 168], "hide": 67, "toptext": 67, "style": [67, 105, 151], "font": 67, "sego": 67, "ui": 67, "arial": 67, "san": [67, 103], "serif": 67, "largest": [67, 103, 139], "develop": [67, 103, 141, 142, 144, 146, 147, 150, 202], "site": [67, 103, 138], "h1": 67, "300": 67, "160": 67, "lorem": [67, 107, 112], "ipsum": [67, 107, 112], "print": [67, 69, 198, 209], "typeset": 67, "industri": 67, "been": [67, 74, 139, 141, 142, 147, 166, 184, 209], "1500": [67, 143], "unknown": [67, 68, 105], "printer": 67, "took": [67, 146], "gallei": 67, "scrambl": 67, "specimen": 67, "surviv": 67, "five": [67, 119], "centuri": [67, 145, 168], "leap": 67, "electron": 67, "essenti": [67, 139], "unchang": 67, "popularis": 67, "1960": 67, "letraset": 67, "passag": [67, 73, 79, 86], "recent": [67, 71, 72, 76, 87, 88, 103, 123, 136, 137], "desktop": 67, "publish": [67, 87, 88], "softwar": [67, 150], "aldu": 67, "pagemak": 67, "setencod": 67, "documenttokensplitt": 68, "measur": [68, 77, 87, 88, 136, 137, 148, 205], "futur": [68, 132, 137, 151], "techniqu": [68, 70, 76, 137, 139, 142, 146, 151, 152], "documenttokensplittertest": 68, "numtoken": 68, "tokenoverlap": 68, "immens": 68, "faculti": 68, "extraordinari": 68, "power": [68, 71, 72, 137, 151], "2950": 68, "5707": 68, "2757": 68, "chang": [68, 69, 82, 201], "cloth": 68, "imagin": 68, "deduc": 68, "As": [68, 70, 71, 72, 73, 77, 79, 86, 103, 123], "5659": 68, "8483": 68, "2824": 68, "quarter": 68, "receiv": [68, 214, 231], "Be": 68, "chamber": 68, "8427": 68, "11241": 68, "2814": 68, "piti": 68, "miss": [68, 108, 110, 170], "client": 68, "never": [68, 135, 225], "mind": [68, 146], "him": [68, 110], "11188": 68, "13970": 68, "2782": 68, "person": [68, 98, 212], "emploi": [68, 97], "me": [68, 110, 142], "wish": 68, "agent": 68, "conf": 68, "13918": 68, "16898": 68, "2980": 68, "letter": [68, 121, 139, 141, 154, 214, 231], "secret": 68, "marriag": 68, "16836": 68, "19744": 68, "2908": 68, "seven": 68, "hundr": [68, 95, 96], "holm": [68, 154], "scribbl": 68, "receipt": 68, "shee": 68, "19683": 68, "22551": 68, "2868": 68, "setnumtoken": 68, "settokenoverlap": 68, "documenttokensplittertestspec": 69, "methodnam": 69, "runtest": 69, "By": [69, 91, 134, 137, 151, 159, 164, 172, 198, 205, 221], "fixtur": 69, "testcas": 69, "subclass": [69, 152, 186, 200, 204], "constructor": 69, "argument": [69, 209], "execut": [69, 152, 179, 225, 229], "author": 69, "deconstruct": 69, "overrid": [69, 136, 204], "setup": 69, "teardown": 69, "__init__": 69, "must": [69, 78, 93, 106, 107, 111, 112, 123, 126, 134, 135, 136, 156, 157, 170, 197, 198, 205, 211], "alwai": [69, 103, 123, 142, 147, 148, 149, 151], "signatur": 69, "attribut": [69, 205], "failureexcept": 69, "except": [69, 74, 113, 118, 165], "rais": [69, 87, 88, 103, 113, 118, 205], "assert": 69, "fail": [69, 170], "deem": 69, "error": [69, 136, 154], "longmessag": 69, "long": [69, 72, 83, 86, 91, 97, 145, 148], "messag": [69, 181, 223], "repr": 69, "failur": 69, "maxdiff": 69, "diff": 69, "difflib": 69, "hook": 69, "exercis": 69, "lite": 70, "googl": [70, 71, 72, 76, 78, 80, 87, 88, 92, 93, 103, 151, 212], "research": [70, 71, 72, 76, 78, 93, 144, 146, 147, 151], "toyota": 70, "technolog": 70, "institut": 70, "chicago": 70, "offici": [70, 103, 116, 117, 118, 179, 197, 208, 222], "tf": [70, 92], "wrapper": [70, 201], "port": 70, "properti": [70, 148, 175, 176, 187, 190, 198], "albert_base_uncas": 70, "albert_bas": 70, "768": [70, 71, 72, 73, 74, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97], "emb": [70, 86, 90], "dim": [70, 136], "12m": 70, "albert_large_uncas": 70, "albert_larg": 70, "1024": [70, 80, 83, 97], "24": [70, 97, 107, 112, 116, 154, 179, 197, 208, 224], "16": [70, 97, 119, 214, 224], "18m": 70, "albert_xlarge_uncas": 70, "albert_xlarg": 70, "2048": 70, "60m": 70, "albert_xxlarge_uncas": 70, "albert_xxlarg": 70, "235m": 70, "sentencepiec": [70, 76, 92], "everi": [70, 71, 72, 73, 74, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 95, 96, 97, 118, 135, 144, 154, 171, 180, 182, 226], "dimens": [70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 192], "repeat": [70, 123, 136], "footprint": 70, "cost": [70, 145, 154, 156], "FOR": 70, "http": [70, 74, 76, 78, 80, 82, 86, 92, 93, 123, 124, 136, 137, 138, 147, 148, 168, 222], "tfhub": [70, 80, 92], "q": 70, "increas": [70, 73, 79, 86, 94, 103, 123, 136, 137, 139, 143, 152, 156], "downstream": [70, 74, 76, 80, 82, 83, 97, 137, 139, 151], "some": [70, 72, 95, 103, 118, 132, 136, 138, 139, 142, 148, 182, 205, 216, 224, 225, 229, 230], "point": [70, 71, 72, 131, 132, 171, 180, 211], "harder": 70, "tpu": 70, "consumpt": [70, 92, 94], "speed": [70, 117, 138, 144, 145], "devlin": [70, 87, 88], "et": [70, 87, 88, 105, 143], "al": [70, 87, 88], "2019": [70, 74, 76, 87, 88, 95, 96, 137], "comprehens": [70, 91, 136, 137, 138, 139, 142, 145, 149, 150], "empir": [70, 71, 72, 95, 96, 97], "evid": 70, "lead": [70, 74, 85, 90, 91, 95, 96, 142], "focus": [70, 90, 103, 123, 150], "inter": 70, "coher": [70, 139], "establish": 70, "glue": [70, 71, 72, 77, 84, 87, 88, 95, 96, 136, 137], "race": [70, 76, 87, 88], "embeddingsfinish": [70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 172], "finished_embed": [70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "setoutputasvector": [70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 172], "setcleanannot": [70, 76, 77, 80, 83, 87, 89, 92, 94, 95, 97, 172, 173, 174], "80": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 111, 172, 184], "1342473030090332": [70, 76], "3855540752410889": [70, 76], "9818322062492371": [70, 76], "784737348556518": [70, 76], "847029983997345": [70, 76], "047153353691101": [70, 76], "1520637571811676": [70, 76], "6245765686035156": [70, 76], "009860038757324219": [70, 76], "13450059294700623": [70, 76], "707749128341675": [70, 76], "2916892766952": [70, 76], "04192575812339783": [70, 76], "5764210224151611": [70, 76], "3196685314178467": [70, 76], "527840495109": [70, 76], "15583214163780212": [70, 76], "1614152491092682": [70, 76], "28423872590065": [70, 76], "135491415858268": [70, 76], "bertembed": [71, 75, 82, 89, 118, 172], "small_bert_l2_768": 71, "understand": [71, 72, 77, 84, 95, 97, 103, 137, 142, 147, 148, 150, 151, 168, 224], "introduc": [71, 72, 77, 80, 82, 83, 84, 91, 137, 141, 142, 145, 148, 150, 151], "unlik": [71, 72, 82, 95, 103, 163], "jointli": [71, 72], "condit": [71, 72, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "both": [71, 72, 79, 80, 86, 92, 100, 123, 136, 137, 142, 148, 149, 225, 226], "left": [71, 72, 136, 137, 146, 168], "just": [71, 72, 77, 87, 113, 118], "modif": [71, 72], "conceptu": [71, 72], "obtain": [71, 72, 74, 79, 92, 146], "eleven": [71, 72], "push": [71, 72], "absolut": [71, 72], "multinli": [71, 72], "86": [71, 72, 76], "v1": [71, 72, 86], "f1": [71, 72, 95, 96, 118, 139], "93": [71, 72], "83": [71, 72, 76, 214, 215, 231], "small_bert_l2_128": 71, "3497989177703857": [71, 82], "480538547039032": [71, 82], "3238905668258667": [71, 82], "612930893898010": [71, 82], "1357314586639404": 71, "32984697818756104": 71, "6032363176345825": 71, "6791689395904": 71, "8244884014129639": 71, "27088963985443115": 71, "059438943862915": 71, "9817547798156": 71, "1648050546646118": 71, "4725411534309387": 71, "5938255786895752": 71, "5780693292617": 71, "9125322699546814": 71, "4563939869403839": 71, "3975459933280945": 71, "81611204147338": 71, "use_openvino": [71, 72, 79, 86, 87, 95, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150], "openvino": [71, 72, 79, 87, 95], "backend": [71, 72, 79, 87, 95, 181], "sentence_bert_embed": 72, "sent_small_bert_l2_768": 72, "islong": 72, "sent_small_bert_l2_128": 72, "orang": [72, 88, 96], "8951074481010437": [72, 88, 96], "13753940165042877": [72, 88, 96], "3108254075050354": [72, 88, 96], "65693199634552": [72, 88, 96], "6180210709571838": [72, 88, 96], "12179657071828842": [72, 88, 96], "191165953874588": [72, 88, 96], "4497021436691": [72, 88, 96], "822715163230896": [72, 88, 96], "7568016648292542": [72, 88, 96], "1165061742067337": [72, 88, 96], "59048593044281": [72, 88, 96], "setislong": 72, "bgeembed": 73, "bge": 73, "baai": 73, "low": [73, 95, 96, 136, 146, 150, 154], "dimension": [73, 92], "bge_bas": 73, "queri": [73, 79, 86, 141, 145, 149, 152, 222], "protein": [73, 79, 86], "femal": [73, 79, 86], "eat": [73, 79, 86], "guidelin": [73, 79, 86], "cdc": [73, 79, 86], "women": [73, 79, 86], "70": [73, 79, 82, 86, 141, 142, 147], "46": [73, 79, 86, 216], "gram": [73, 78, 79, 86, 93, 103, 113, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "dai": [73, 79, 86, 108, 110, 154], "chart": [73, 79, 86, 205, 221], "ll": [73, 79, 86, 168], "marathon": [73, 79, 86], "below": [73, 79, 86, 100, 230], "0190285e": [73, 79, 86], "005974853": [73, 79, 86], "072875895": [73, 79, 86], "007944068": [73, 79, 86], "026059335": [73, 79, 86], "0080": [73, 79, 86], "050514214": [73, 79, 86], "010061974": [73, 79, 86], "04340176": [73, 79, 86], "020937217": [73, 79, 86], "05170225": [73, 79, 86], "01157857": [73, 79, 86], "camembertembed": 74, "tasti": 74, "french": [74, 103, 143, 144, 146, 159], "loui": 74, "martin": 74, "muller": 74, "pedro": 74, "javier": 74, "ortiz": 74, "su\u00e1rez": 74, "yoann": 74, "dupont": 74, "laurent": 74, "romari": 74, "\u00e9ric": 74, "villemont": 74, "la": [74, 123, 144], "clergeri": 74, "djam\u00e9": 74, "seddah": 74, "beno\u00eet": 74, "sagot": 74, "facebook": [74, 76, 95, 96, 137], "138gb": 74, "camembert_bas": 74, "camembertembeddingstestspec": 74, "co": [74, 103, 147, 148], "ubiquit": 74, "despit": [74, 136, 137, 148], "concaten": [74, 168], "investig": [74, 77, 92], "feasibl": 74, "monolingu": [74, 95, 96], "crawl": [74, 137, 151], "prefer": [74, 100, 148, 174], "wikipedia": [74, 105, 139], "surprisingli": [74, 92], "4gb": 74, "130": 74, "gb": 74, "reach": [74, 103, 139, 168], "four": [74, 132, 166, 168], "un": [74, 105], "08442357927560806": 74, "12863239645957947": 74, "03835778683423996": 74, "200479581952": 74, "048462312668561935": 74, "12637358903884888": 74, "27429091930389404": 74, "07516729831": 74, "02690504491329193": 74, "12104076147079468": 74, "012526623904705048": 74, "031543646007": 74, "05877285450696945": 74, "08773420006036758": 74, "06381352990865707": 74, "122621834278": 74, "chunkembed": [75, 172], "wordembed": [75, 89, 94, 118, 172, 198], "chunker": [75, 101, 198], "ngramgener": [75, 113], "nerconvert": [75, 116, 117, 118, 205, 221], "poolingstrategi": [75, 89], "aggreg": [75, 89, 152], "sum": [75, 80, 89], "skipoov": 75, "discard": [75, 120], "oov": 75, "setn": [75, 113], "wordembeddingsmodel": [75, 89, 94, 100, 117, 118, 119, 172], "setpoolingstrategi": [75, 85, 89, 90, 91], "55661": 75, "42829502": 75, "86661": 75, "409785": 75, "06316501": 75, "120775": 75, "0732005": 75, "40674996": 75, "22938299": 75, "50597": 75, "288195": 75, "555655": 75, "465145": 75, "140118": 75, "17417": 75, "095253006": 75, "0530925": 75, "218465": 75, "714395": 75, "79860497": 75, "0129999": 75, "139705": 75, "177955": 75, "1887775": 75, "45545": 75, "20030999": 75, "461557": 75, "07891501": 75, "strategi": [75, 85, 89, 90, 91, 108, 111, 131, 136, 154, 191], "setskipoov": 75, "debertaembed": 76, "enhanc": [76, 135, 137, 142, 145, 147], "disentangl": 76, "pengcheng": 76, "xiaodong": 76, "jianfeng": 76, "gao": 76, "weizhu": 76, "chen": [76, 87, 88], "2018": [76, 87, 88], "half": [76, 103], "deberta_v3_bas": 76, "microsoft": [76, 79, 84, 86, 144, 147, 148], "www": 76, "blog": 76, "superglu": 76, "progress": [76, 132, 164], "significantli": [76, 80, 87, 88, 95, 96, 103, 148, 150], "novel": [76, 84, 91, 97, 103, 136, 137, 146], "mechan": [76, 83], "weight": [76, 80, 86, 103, 117, 119, 150, 154], "among": [76, 84, 138, 147, 148], "matric": 76, "second": [76, 80, 111, 131, 159, 164, 181, 225], "mnli": 76, "9": [76, 95, 96, 113, 124, 136, 138, 143, 148, 224, 229, 230], "90": 76, "91": 76, "88": 76, "made": [76, 92, 221], "publicli": [76, 95, 96, 148], "distilbertembed": 77, "fast": [77, 135, 141, 144, 179, 229], "cheap": 77, "distil": 77, "40": [77, 79, 119, 136, 141, 142, 144, 146], "uncas": 77, "preserv": [77, 116, 164, 184], "95": 77, "distilbert_base_cas": 77, "doesn": [77, 87], "token_type_id": [77, 87], "indic": [77, 87, 164, 168], "belong": [77, 87, 148], "sep_token": [77, 87], "sep": 77, "position_id": 77, "ad": [77, 80, 123, 154, 181], "though": [77, 103], "know": [77, 144, 182], "cheaper": 77, "lighter": 77, "preval": 77, "oper": [77, 83, 154, 163, 224], "constrain": [77, 136], "budget": 77, "counterpart": 77, "leverag": [77, 84, 205, 221], "reduc": [77, 84, 145, 147, 156, 157, 184], "retain": 77, "97": [77, 108, 110, 168], "tripl": [77, 100], "cosin": [77, 91], "distanc": [77, 152, 154, 156, 157], "devic": 77, "proof": 77, "concept": [77, 226], "experi": [77, 91, 97, 123, 136, 137, 138, 145, 205, 222], "1127224713563919": 77, "1982710212469101": 77, "5360898375511169": 77, "272536993026733": 77, "35534414649009705": 77, "13215228915214539": 77, "40981462597846985": 77, "14036104083061": 77, "328085333108902": 77, "06269335001707077": 77, "017595693469047546": 77, "024373905733": 77, "15617232024669647": 77, "2967822253704071": 77, "22324979305267334": 77, "04568954557180": 77, "45411425828933716": 77, "01173491682857275": 77, "190129816532135": 77, "1178255230188369": 77, "doc2vecapproach": 78, "word2vec": [78, 81, 101], "corpu": [78, 80, 93, 103, 106, 129, 137, 151, 154, 214, 231], "algorithm": [78, 93, 103, 117, 135, 154, 156, 157], "skip": [78, 93, 100, 154], "doc2vecmodel": 78, "vectors": [78, 93], "windows": [78, 93, 103], "numpartit": [78, 93], "partit": [78, 93, 211], "mincount": [78, 93, 154], "appear": [78, 93, 123, 154], "divid": [78, 93], "1000": [78, 93, 100, 117], "stepsiz": [78, 93], "optim": [78, 87, 88, 90, 91, 93, 118, 120, 132, 136, 141, 142, 147, 148], "025": [78, 93], "maxit": [78, 93], "estim": [78, 93, 160, 175, 185, 194, 204, 225], "distribut": [78, 93, 136], "composition": [78, 93], "sherlockholm": [78, 93, 154, 231], "setvectors": [78, 93], "setwindows": [78, 93, 103], "setsteps": [78, 93], "initi": [78, 93, 136, 148, 154, 164, 182, 198, 211, 212, 214, 215, 221], "setnumpartit": [78, 93], "setmaxit": [78, 93], "numiter": [78, 93], "equal": [78, 93], "setse": [78, 93, 136], "setmincount": [78, 93, 154], "doc2vec_gigaword_300": 78, "06222493574023247": [78, 93], "011579325422644615": [78, 93], "009919632226228714": [78, 93], "109361454844": [78, 93], "doc2vec_wiki": 78, "getvector": [78, 93], "e5embed": [79, 84, 86, 152], "e5": 79, "weakli": [79, 86], "tailor": [79, 82, 146], "e5_smal": 79, "unilm": [79, 86], "manner": [79, 103], "signal": [79, 80], "curat": [79, 86], "ccpair": 79, "readili": 79, "strong": [79, 95, 96, 147, 148, 149], "conduct": [79, 91], "extens": [79, 91, 145, 150, 201], "56": [79, 214], "beir": 79, "mteb": 79, "bm25": 79, "baselin": [79, 92, 139], "beat": 79, "exist": [79, 80, 91, 123, 138, 143, 154, 172, 174, 205], "elmoembed": 80, "elmo": 80, "billion": [80, 139, 141, 142, 145, 147, 148, 150], "lookup": [80, 94, 97, 107, 136, 156, 157], "setpoolinglay": 80, "word_emb": 80, "shape": 80, "batch_siz": 80, "max_length": 80, "lstm_outputs1": 80, "lstm": [80, 118], "lstm_outputs2": 80, "trainabl": 80, "tensor": [80, 136], "poolinglay": 80, "contextu": [80, 137, 142, 146, 154], "characterist": 80, "syntax": 80, "vari": [80, 123], "across": [80, 136, 139, 141, 142, 145, 152], "linguist": [80, 168], "polysemi": 80, "intern": [80, 125, 126, 148, 151, 154, 165, 168, 183, 187, 192, 198], "bilm": 80, "six": [80, 156, 157], "textual": [80, 82, 91, 145], "entail": 80, "expos": 80, "crucial": [80, 91], "mix": [80, 136, 152, 186, 204], "semi": 80, "662458181381226e": 80, "2541114091873169": 80, "6275503039360046": 80, "5787073969841": 80, "19154725968837738": 80, "22998669743537903": 80, "2894386649131775": 80, "21524395048618": 80, "10400570929050446": 80, "12288510054349899": 80, "07056470215320587": 80, "246389418840": 80, "49932169914245605": 80, "12706467509269714": 80, "30969417095184326": 80, "2643227577209": 80, "8871506452560425": 80, "20039963722229004": 80, "0601330995559692": 80, "0348707810044": 80, "albert_embed": [81, 101], "bert_embed": [81, 101], "bert_sentence_embed": [81, 101], "bge_embed": [81, 101], "camembert_embed": [81, 101], "chunk_embed": [81, 101], "deberta_embed": [81, 101], "distil_bert_embed": [81, 101], "doc2vec": [81, 101], "e5_embed": [81, 101], "elmo_embed": [81, 101], "instructor_embed": [81, 101], "longformer_embed": [81, 101], "mpnet_embed": [81, 101], "mxbai_embed": [81, 101], "nomic_embed": [81, 101], "roberta_embed": [81, 101], "roberta_sentence_embed": [81, 101], "snowflake_embed": [81, 101], "uae_embed": [81, 101], "universal_sentence_encod": [81, 101], "xlm_roberta_embed": [81, 101], "xlm_roberta_sentence_embed": [81, 101], "xlnet_embed": [81, 101], "instructorembed": 82, "instructor": 82, "finetun": [82, 83, 97], "financ": 82, "sota": [82, 91, 97], "divers": [82, 92, 137, 139, 142, 150, 151, 222], "setinstruct": 82, "medicin": 82, "instructor_bas": 82, "summar": [82, 83, 103, 136, 137, 139, 144, 151, 192], "embedd": 82, "hkunlp": 82, "togeth": 82, "explain": [82, 205, 221, 228, 230], "special": [82, 154, 168, 199, 226], "330": 82, "mixtur": [82, 146, 149], "66": [82, 119], "unseen": 82, "magnitud": [82, 136, 156, 157], "suggest": [82, 139], "mitig": [82, 91], "url": 82, "io": 82, "dynam": [82, 136, 144], "scalar": 82, "degre": 82, "freedom": 82, "horava": 82, "lifshitz": 82, "graviti": 82, "longformerembed": 83, "iz": 83, "beltagi": 83, "matthew": 83, "arman": 83, "cohan": 83, "checkpoint": 83, "mlm": [83, 84], "096": 83, "longformer_base_4096": 83, "unabl": 83, "quadrat": 83, "linearli": 83, "easi": 83, "thousand": [83, 143, 146], "drop": [83, 159], "motiv": 83, "global": [83, 146], "text8": 83, "enwik8": 83, "wikihop": 83, "triviaqa": 83, "led": [83, 87, 88, 103], "arxiv": [83, 136, 137], "found": [83, 94, 103, 156, 163, 170, 211, 228], "18792399764060974": [83, 87], "14591649174690247": [83, 87], "20547787845134735": [83, 87], "1468472778797": [83, 87], "22845706343650818": [83, 87], "18073144555091858": [83, 87], "09725798666477203": [83, 87], "0417917296290": [83, 87], "07037967443466187": [83, 87], "14801117777824402": [83, 87], "03603338822722435": [83, 87], "17893412709": [83, 87], "08734266459941864": [83, 87], "2486150562763214": [83, 87], "009067727252840996": [83, 87], "24408400058": [83, 87], "22409197688102722": [83, 87], "4312366545200348": [83, 87], "1401449590921402": [83, 87], "356410235166549": [83, 87], "mpnetembed": 84, "adopt": [84, 145], "permut": [84, 97], "inherit": [84, 152, 186, 204], "advantag": [84, 182], "all_mpnet_base_v2": 84, "neglect": [84, 97], "plm": 84, "doe": [84, 95, 103, 116, 143, 144, 146, 179, 182, 209, 226, 229, 230], "full": [84, 86, 97, 149, 150, 225], "thu": [84, 103], "suffer": [84, 97], "discrep": [84, 97], "avoid": [84, 134, 136], "auxiliari": 84, "160gb": 84, "corpora": [84, 103, 107], "down": [84, 118, 225, 226], "stream": [84, 123, 136, 138], "experiment": [84, 103], "022502584": 84, "078291744": 84, "023030775": 84, "0051000593": 84, "080340415": 84, "039": 84, "041702367": 84, "0010974605": 84, "015534201": 84, "07092203": 84, "0017729357": 84, "04661": 84, "mxbaiembed": 85, "mxbai": 85, "mxbai_large_v1": 85, "hello": [85, 90, 91, 107, 112, 136, 161, 181, 216], "moon": [85, 90, 91], "50387806": [85, 90, 91], "5861606": [85, 90, 91], "35129607": [85, 90, 91], "76046336": [85, 90, 91], "32446072": [85, 90, 91], "117674336": [85, 90, 91], "6660665": [85, 90, 91], "961762": [85, 90, 91], "24854276": [85, 90, 91], "1018044": [85, 90, 91], "6569202": [85, 90, 91], "027635604": [85, 90, 91], "1915": [85, 90, 91], "cl": [85, 90, 91], "cls_avg": [85, 90, 91], "avg": [85, 90, 91], "nomicembed": 86, "nomic": 86, "8192": 86, "openai": [86, 101, 139, 198], "ada": [86, 124], "002": [86, 124], "short": [86, 91], "nomic_smal": 86, "technic": 86, "report": [86, 87, 88, 92, 136, 137, 205, 221], "reproduc": [86, 143, 205, 221, 222], "open": [86, 105, 138, 141, 142, 143, 147, 148, 150, 165, 170, 171, 172, 180, 184, 222], "opendata": 86, "licens": [86, 150], "loader": 86, "235": 86, "replic": [86, 87, 88, 136, 137], "embedtext": 86, "nomicai": 86, "contrastor": 86, "robertaembed": [87, 95], "robustli": [87, 88, 120], "yinhan": [87, 88], "myle": [87, 88, 95, 96], "ott": [87, 88, 95, 96], "naman": [87, 88, 95, 96], "goyal": [87, 88, 95, 96], "jingfei": [87, 88], "du": [87, 88, 105], "mandar": [87, 88], "joshi": [87, 88], "danqi": [87, 88], "omer": [87, 88], "levi": [87, 88], "mike": [87, 88], "lewi": [87, 88], "luke": [87, 88, 95, 96], "zettlemoy": [87, 88, 95, 96], "veselin": [87, 88, 95, 96], "stoyanov": [87, 88, 95, 96], "hyperparamet": [87, 88], "mini": [87, 88, 148], "roberta_bas": 87, "bpe": 87, "signific": [87, 88, 95, 96, 103, 106, 141, 149], "gain": [87, 88, 95, 96, 136, 137, 143], "care": [87, 88, 165], "comparison": [87, 88, 92, 149, 159], "privat": [87, 88, 199], "impact": [87, 88], "carefulli": [87, 88, 123, 150], "undertrain": [87, 88], "exce": [87, 88, 123], "highlight": [87, 88], "previous": [87, 88, 103], "overlook": [87, 88], "robertasentenceembed": 88, "sent_roberta_bas": 88, "embeddingssent": 89, "22093398869037628": 89, "25130119919776917": 89, "41810303926467896": 89, "380883991718": 89, "snowflakeembed": 90, "snowflak": 90, "arctic": 90, "suit": 90, "snowflake_artic_m": 90, "uaeembed": 91, "uae": 91, "llm": [91, 141, 142, 147, 150], "satur": 91, "uae_large_v1": 91, "st": 91, "vanish": 91, "gradient": [91, 117], "zone": 91, "core": 91, "idea": [91, 97], "advers": 91, "imped": 91, "hinder": 91, "furthermor": [91, 97], "examin": 91, "scenario": [91, 135], "were": [91, 94, 118, 205, 221], "uae_smal": 91, "tfhub_us": 92, "loadsp": 92, "op": 92, "lingual": [92, 95, 96, 103, 105, 144], "accur": [92, 135, 137, 156], "trade": [92, 95, 96], "tend": 92, "With": [92, 97, 103, 150], "minim": [92, 120, 144], "encourag": [92, 142], "weat": 92, "bia": [92, 123, 136, 149], "freeli": 92, "04616805538535118": 92, "022307956591248512": 92, "044395286589860916": 92, "0016493503": 92, "setloadsp": 92, "word2vecapproach": 93, "word2vecmodel": 93, "word2vec_gigaword_300": 93, "word2vec_wiki": 93, "dictionari": [94, 103, 106, 111, 117, 119, 120, 121, 134, 156, 157, 205], "setstoragepath": [94, 107], "line": [94, 98, 107, 112, 123, 132, 134, 154, 208, 211, 214], "39658191506190343": 94, "630968081620067": 94, "5393722253731201": 94, "8428180123359783": 94, "7535235923631415": 94, "9699218875629833": 94, "10397182122983872": 94, "11833962569383116": 94, "stress": 94, "0492683418305907": 94, "9415954572751959": 94, "47624463167525755": 94, "16790967216778263": 94, "induc": 94, "1535748762292387": 94, "33498936903209897": 94, "9235178224122094": 94, "1158772920395934": 94, "withcoveragecolumn": 94, "overallcoverag": 94, "writebuffers": 94, "dump": 94, "disk": [94, 225, 226], "storag": [94, 98, 107, 190, 198], "10000": 94, "readcaches": 94, "cach": [94, 136, 137, 151, 152, 209], "random_embeddings_dim4": 94, "abov": [94, 100, 214], "setstorageref": 94, "glove_4d": 94, "setdimens": [94, 192], "patient": 94, "diagnos": 94, "diabet": 94, "9439099431037903": 94, "4707513153553009": 94, "806300163269043": 94, "16176554560661316": 94, "7966810464859009": 94, "5551124811172485": 94, "8861005902290344": 94, "28284206986427307": 94, "025029370561242104": 94, "35177749395370483": 94, "052506182342767715": 94, "1887107789516449": 94, "08617766946554184": 94, "8399239182472229": 94, "5395117998123169": 94, "7864698767662048": 94, "6599600911140442": 94, "16109347343444824": 94, "6041093468666077": 94, "8913561105728149": 94, "5955275893211365": 94, "01899011991918087": 94, "4397728443145752": 94, "8911281824111938": 94, "9840458631515503": 94, "7599489092826843": 94, "9417727589607239": 94, "8624503016471863": 94, "setwritebuffers": 94, "setreadcaches": 94, "glove_100d": [94, 118], "There": [94, 98, 100, 163, 223, 225, 226, 231], "conveni": 94, "coverag": [94, 189], "stat": 94, "whole": [94, 208], "570580005645752": 94, "44183000922203064": 94, "7010200023651123": 94, "417129993438720": 94, "542639970779419": 94, "4147599935531616": 94, "0321999788284302": 94, "4024400115013122": 94, "2708599865436554": 94, "04400600120425224": 94, "020260000601410866": 94, "17395000159": 94, "6191999912261963": 94, "14650000631809235": 94, "08592499792575836": 94, "2629800140857": 94, "3397899866104126": 94, "20940999686717987": 94, "46347999572753906": 94, "6479200124740": 94, "embeddings_col": 94, "coverageresult": 94, "coverateresult": 94, "wordsoverallcoverag": 94, "resultdf": 94, "output_col": 94, "wordscoverag": 94, "cov_embed": 94, "loadstorag": [94, 107], "storage_ref": [94, 107], "xlmrobertaembed": 95, "alexi": [95, 96], "conneau": [95, 96], "kartikai": [95, 96], "khandelw": [95, 96], "vishrav": [95, 96], "chaudhari": [95, 96], "guillaum": [95, 96], "wenzek": [95, 96], "francisco": [95, 96, 103], "guzman": 95, "edouard": [95, 96], "grave": [95, 96], "5tb": [95, 96], "commoncrawl": [95, 96], "xlm_roberta_bas": 95, "abl": [95, 143, 151, 205, 224], "correct": [95, 136, 154, 156, 157, 168], "terabyt": [95, 96], "r": [95, 96, 103], "mbert": [95, 96], "xnli": [95, 96], "mlqa": [95, 96], "particularli": [95, 96, 136, 137], "swahili": [95, 96, 143, 146], "urdu": [95, 96, 143, 146], "capac": [95, 96, 139, 143], "dilut": [95, 96], "sacrif": [95, 96], "ri": [95, 96], "05969233065843582": 95, "030789051204919815": 95, "04443822056055069": 95, "09564960747": 95, "038839809596538544": 95, "011712731793522835": 95, "019954433664679527": 95, "0667808502": 95, "03952755779027939": 95, "03455188870429993": 95, "019103847444057465": 95, "04311436787": 95, "09579929709434509": 95, "02494969218969345": 95, "014753809198737144": 95, "10259044915": 95, "004710011184215546": 95, "022148698568344116": 95, "011723337695002556": 95, "013356896": 95, "xlmrobertasentenceembed": 96, "guzm\u00e3": 96, "sent_xlm_roberta_bas": 96, "xlnetembed": 97, "autoregress": 97, "xl": 97, "exhibit": 97, "involv": [97, 132], "rank": [97, 138, 152, 154], "xlnet_large_cas": 97, "xlnet_base_cas": 97, "zihangdai": 97, "denois": [97, 136, 137], "autoencod": [97, 136, 137], "corrupt": [97, 136, 137], "pro": 97, "con": 97, "enabl": [97, 118, 136, 141, 147, 152, 156, 198], "maxim": [97, 136, 154], "likelihood": [97, 123], "overcom": 97, "formul": 97, "integr": [97, 103, 122, 144, 205, 221, 223], "6287205219268799": 97, "4865287244319916": 97, "186111718416214": 97, "234187275171279": 97, "1967450380325317": 97, "2746637463569641": 97, "9481253027915955": 97, "3431355059146881": 97, "0777631998062134": 97, "092679977416992": 97, "5331977605819702": 97, "11190271377563": 97, "8349916934967041": 97, "45627787709236145": 97, "7890847325325012": 97, "028069257736": 97, "134845569729805": 97, "11672890186309814": 97, "4945235550403595": 97, "66587203741073": 97, "entityrul": 98, "entityrulerapproach": 98, "exact": [98, 107, 112, 123], "definit": [98, 120, 211], "json": [98, 123, 183, 205, 216], "jsonl": 98, "setpatternsresourc": 98, "might": [98, 118, 168, 230], "rule": [98, 108, 111, 134, 163, 165, 191], "w": [98, 101, 111, 117, 121, 163, 165, 198], "winterfel": 98, "jon": 98, "snow": [98, 119, 154], "stark": 98, "eddard": 98, "patternsresourc": 98, "usestorag": 98, "rocksdb": 98, "lord": 98, "29": [98, 119, 168, 214, 216], "38": [98, 148, 216], "setusestorag": 98, "setsentencematch": 98, "setalphabetresourc": 98, "alphabet": [98, 121], "plain": [98, 231], "entityrulermodel": 98, "entity_rul": [99, 101], "graphextract": [100, 174], "graph": [100, 118, 144, 154, 160, 174], "nerdlmodel": [100, 116, 117, 118, 119, 205, 209, 221], "store": [100, 125, 126, 136, 183, 187, 192, 203, 208, 216, 222], "node": 100, "relev": [100, 103, 123], "taken": 100, "implicitli": 100, "setmergeent": 100, "setdependencyparsermodel": 100, "settypeddependencyparsermodel": 100, "setrelationshiptyp": 100, "public": [100, 209, 225], "relationshiptyp": 100, "entitytyp": 100, "explodeent": 100, "roottoken": 100, "travers": 100, "maxsentences": 100, "minsentences": 100, "mergeent": 100, "merg": [100, 107, 112], "neighbor": [100, 152], "includeedg": 100, "symbol": [100, 154, 168], "posmodel": 100, "coordin": [100, 131], "remoteloc": 100, "graphfinish": [100, 174], "rdf": [100, 174], "nertagg": [100, 117, 118, 119], "morn": [100, 174], "flight": [100, 174], "denver": [100, 174], "18": [100, 108, 110, 113, 116, 119, 179, 197, 208, 224], "path1": 100, "setentitytyp": 100, "setexplodeent": 100, "setroottoken": 100, "setmaxsentences": 100, "setminsentences": 100, "setmergeentitiesiobformat": 100, "iob": [100, 116, 117, 118], "iob2": [100, 116], "setincludeedg": 100, "setdelimit": [100, 111, 113], "setposmodel": 100, "class": [101, 190, 195, 202, 213, 220, 221, 229, 231], "classifier_dl": [101, 198], "er": [101, 198], "keyword_extract": [101, 198], "yake_keyword_extract": [101, 102], "ld_dl": [101, 198], "language_detector_dl": [101, 104], "matcher": [101, 198], "big_text_match": [101, 109], "date_match": [101, 109], "multi_date_match": [101, 109], "regex_match": [101, 109], "text_match": [101, 109], "ner_approach": [101, 114], "ner_convert": [101, 114], "ner_crf": [101, 114], "ner_dl": [101, 114], "ner_overwrit": [101, 114], "openai_complet": [101, 122], "openai_embed": [101, 122], "param": [101, 117, 152, 186, 187, 192, 198, 203, 204], "sentence_detector_dl": [101, 130, 144], "sentiment_detector": [101, 133], "vivekn_senti": [101, 133], "seq2seq": [101, 198], "auto_gguf_model": [101, 140], "bart_transform": [101, 140], "cpm_transform": [101, 140], "gpt2_transform": [101, 140], "llama2_transform": [101, 140], "llama3_transform": [101, 140], "m2m100_transform": [101, 140], "marian_transform": [101, 140], "mistral_transform": [101, 140], "nllb_transform": [101, 140], "phi2_transform": [101, 140], "phi3_transform": [101, 140], "qwen_transform": [101, 140], "starcoder_transform": [101, 140], "t5_transform": [101, 140], "spell_check": [101, 198], "context_spell_check": [101, 155], "norvig_sweet": [101, 155], "symmetric_delet": [101, 155], "chunk_token": [101, 162], "recursive_token": [101, 162], "regex_token": [101, 162], "word_segment": [101, 167], "chunk2_doc": [101, 198], "date2_chunk": [101, 198], "document_character_text_splitt": [101, 198], "document_norm": [101, 198], "document_token_splitt": [101, 198], "graph_extract": [101, 198], "lemmat": [101, 134, 159, 182, 184, 198], "n_gram_gener": [101, 198], "stemmer": [101, 159, 198], "stop_words_clean": [101, 198], "token2_chunk": [101, 198], "yakekeywordextract": 103, "yake": 103, "independ": [103, 156, 157, 163], "grow": 103, "autom": 103, "adequ": 103, "emerg": [103, 137, 151], "tool": [103, 123, 137, 150], "nor": 103, "thesauri": 103, "neither": 103, "written": [103, 144], "plethora": 103, "situat": [103, 132], "access": 103, "restrict": [103, 147], "therefor": [103, 229], "sent": 103, "boundari": [103, 131, 132, 135, 165, 168], "detector": [103, 108, 134], "section": [103, 171, 180, 221, 223, 229], "tweakabl": 103, "upper": 103, "bound": [103, 131, 132, 135], "minngram": 103, "maxngram": 103, "occurr": [103, 191], "nkeyword": 103, "stopword": [103, 119, 159], "stop": [103, 117, 123, 136, 142, 151, 159], "campo": 103, "mangaravit": 103, "pasquali": 103, "jatowt": 103, "jorg": 103, "nune": 103, "journal": [103, 168], "elsevi": 103, "vol": 103, "509": 103, "pp": [103, 168], "257": 103, "289": 103, "turn": [103, 184, 225], "fly": 103, "demand": 103, "within": [103, 129, 135, 136, 137, 139, 165, 170], "resort": 103, "solut": [103, 145], "articl": [103, 154], "rest": [103, 116], "merit": 103, "ten": 103, "carri": 103, "twenti": 103, "setcontextchar": [103, 165], "setminngram": 103, "setnkeyword": 103, "acquir": 103, "kaggl": [103, 150], "platform": [103, 123, 124, 205, 223], "host": 103, "transact": 103, "somewhat": 103, "vagu": 103, "cloud": 103, "confer": 103, "week": [103, 108, 110, 161], "announc": [103, 119], "earli": 103, "tomorrow": [103, 108, 110], "phone": [103, 148], "founder": 103, "ceo": 103, "anthoni": 103, "goldbloom": 103, "declin": 103, "deni": 103, "acquisit": 103, "happen": 103, "rumor": 103, "scientist": 103, "ben": 103, "hamner": 103, "2010": 103, "servic": [103, 123, 144], "got": 103, "even": [103, 108, 138, 142, 151], "few": [103, 165, 214, 231], "competitor": 103, "drivendata": 103, "topcod": 103, "hackerrank": 103, "stai": 103, "ahead": 103, "nich": 103, "home": [103, 198], "bui": [103, 212], "commun": [103, 141, 142, 147], "mindshar": 103, "too": [103, 134, 224], "plenti": 103, "bit": [103, 132, 230], "histori": [103, 132, 154], "earlier": 103, "month": [103, 108, 110, 214, 231], "team": [103, 144, 205, 221], "around": [103, 146], "youtub": 103, "technologi": 103, "interest": [103, 147, 148, 149], "kernel": 103, "On": [103, 138, 139, 144], "analyz": [103, 135], "compani": [103, 144], "script": [103, 143, 146], "centric": [103, 143, 146], "job": [103, 170], "board": [103, 129, 214], "unclear": 103, "accord": [103, 136, 141, 154, 211], "crunchbas": 103, "pitchbook": 103, "launch": 103, "investor": 103, "ventur": 103, "sv": [103, 143], "angel": [103, 138], "levchin": 103, "naravik": 103, "chie": 103, "economist": 103, "hal": 103, "varian": 103, "khosla": 103, "yuri": 103, "milner": 103, "resulttupl": 103, "ascend": 103, "orderbi": 103, "32051516486864573": 103, "37786450577630676": 103, "39922830978423146": 103, "40224744669493756": 103, "41584827825302534": 103, "setmaxngram": 103, "setstopword": [103, 119, 159], "getstopword": 103, "loaddefaultstopword": [103, 159], "danish": [103, 143, 146, 159], "dutch": [103, 143, 146, 159], "finnish": [103, 143, 146, 159], "german": [103, 143, 146, 159, 211, 231], "hungarian": [103, 143, 146, 159], "italian": [103, 123, 143, 146, 154, 159], "norwegian": [103, 143, 146, 159], "portugues": [103, 143, 146, 159], "russian": [103, 143, 146, 159], "spanish": [103, 143, 146, 159], "swedish": [103, 143, 146, 159], "turkish": [103, 143, 146, 159], "languagedetectordl": 105, "ld": 105, "identif": 105, "rnn": 105, "tatoeba": 105, "140": 105, "wiki": 105, "languagedetector": 105, "ld_wiki_tatoeba_cnn_21": 105, "advanc": [105, 142, 145, 150, 170, 181, 184], "scala": [105, 152, 185, 186, 194, 200, 204], "program": [105, 150], "biblioth\u00e8qu": 105, "traitement": 105, "pour": 105, "le": [105, 144], "avanc\u00e9": 105, "langag": 105, "naturel": 105, "programm": 105, "ist": 105, "ein": 105, "textverarbeitungsbibliothek": 105, "f\u00fcr": 105, "fortgeschritten": 105, "nat\u00fcrlich": 105, "sprachverarbeitung": 105, "die": 105, "programmiersprachen": 105, "und": 105, "lemma": [106, 134, 179, 208, 212, 226, 229, 230], "predefin": [106, 107, 111, 112, 134], "setdictionari": [106, 134, 156, 157], "lemmatizermodel": 106, "lemmas_smal": [106, 134], "setformcol": 106, "correspend": 106, "formcol": [106, 212], "setlemmacol": 106, "fromlemma": 106, "key_delimit": 106, "value_delimit": 106, "lemma_antbnc": 106, "bigtextmatch": [107, 112], "textmatch": [107, 112, 161], "externalresourc": [107, 112, 196], "mergeoverlap": [107, 112], "tokenizermodel": [107, 165], "trie": 107, "dolor": [107, 112], "magna": [107, 112], "aliqua": [107, 112], "sit": [107, 112], "laborum": [107, 112], "entityextractor": [107, 112, 161], "extractor": [107, 112, 161], "59": [107, 108, 110, 112], "setent": [107, 112, 115, 161], "setmergeoverlap": [107, 112], "settoken": 107, "tokenizer_model": 107, "bigtextmatchermodel": 107, "btm": 107, "textmatchermodel": [107, 112], "searchtri": 107, "datematcherutil": 108, "setinputformat": [108, 183], "setoutputformat": [108, 110], "desir": [108, 110], "yyyi": [108, 110], "mm": [108, 110, 168], "dd": [108, 110, 111], "Not": [108, 118, 182], "setreadmonthfirst": 108, "juli": 108, "5th": 108, "2015": 108, "07": 108, "05": 108, "setdefaultdaywhenmiss": 108, "setanchordateyear": [108, 110], "anchor": [108, 110], "year": [108, 110, 139, 141, 161, 214], "setanchordatemonth": [108, 110], "januari": [108, 110], "setanchordatedai": [108, 110], "setrelaxedfactorystrategi": 108, "matchstrategi": [108, 191], "match_first": [108, 111, 191], "relax": 108, "exhaust": 108, "setaggressivematch": 108, "aggress": 108, "attempt": [108, 156], "ambigu": 108, "aggressivematch": 108, "1978": [108, 110], "28": [108, 110, 116, 179, 197, 208, 216, 224], "1984": [108, 110], "04": [108, 110], "02": [108, 110], "1980": [108, 110], "79": [108, 110], "31st": [108, 110], "april": [108, 110], "2008": [108, 110], "fri": [108, 110], "1997": [108, 110], "jan": [108, 110], "sun": [108, 110], "1st": [108, 110], "thursdai": [108, 110], "wednesdai": [108, 110], "todai": [108, 110, 146, 216], "yesterdai": [108, 110], "0600h": [108, 110], "06": [108, 110], "00": [108, 110], "6pm": [108, 110], "23": [108, 110, 111, 119, 129, 214, 215, 216, 231], "1988": [108, 110], "31": [108, 110, 111, 119, 129, 214], "dateformat": [108, 110], "readmonthfirst": [108, 110], "defaultdaywhenmiss": [108, 110], "anchordateyear": [108, 110], "anchordatemonth": [108, 110], "anchordatedai": [108, 110], "15": [108, 216], "saw": 110, "visit": [110, 123], "57": [110, 119], "65": [110, 119], "regexmatch": 111, "d": [111, 121, 165, 223], "1970": 111, "setrul": 111, "setexternalrul": 111, "match_al": [111, 191], "match_complet": [111, 191], "externalrul": 111, "ceremoni": 111, "setstrategi": 111, "71": 111, "short_dat": 111, "regexmatchermodel": 111, "regardless": 112, "entityvalu": 112, "buildfromtoken": 112, "27": [112, 129, 131, 214], "48": [112, 168, 216], "setentityvalu": 112, "setbuildfromtoken": 112, "null": 113, "empti": [113, 152, 170], "enablecumul": 113, "join": [113, 129, 183, 214], "setenablecumul": 113, "nerapproach": 115, "recogn": [115, 116, 117, 118, 119, 120, 154], "setminepoch": [115, 117], "setrandomse": [115, 118, 125, 144], "getlabelcolumn": [115, 160], "friendli": [116, 123, 144], "whitelist": [116, 163], "setwhitelist": [116, 163], "outsid": 116, "prefix": [116, 136, 163, 165, 205, 221], "preserveposit": [116, 164, 184], "14": [116, 129, 166, 179, 197, 208, 214], "ekeu": [116, 117, 118, 179, 197, 208], "36": [116, 129, 179, 197, 208, 214, 216], "baghdad": [116, 117, 118, 179, 197, 208], "37": [116, 179, 197, 208], "setpreserveposit": [116, 164, 184], "setnerhasnoschema": 116, "nercrf": 117, "nercrfapproach": [117, 118], "nercrfmodel": [117, 118], "crf": [117, 118], "2003": [117, 118, 168, 211, 231], "exclud": [117, 118], "setexternalfeatur": 117, "minepoch": [117, 118], "l2": 117, "c0": 117, "decai": [117, 118], "2250000": 117, "lossep": 117, "ep": 117, "minw": 117, "includeconfid": [117, 118], "confid": [117, 118, 120], "externalfeatur": 117, "nerdlapproach": [117, 118, 211, 231], "trainingdata": [117, 118, 132, 156, 157, 211], "readdataset": [117, 118, 129, 168, 211, 212, 214, 215, 216, 231], "conll2003": [117, 118, 211, 231], "eng": [117, 118, 211, 231], "setl2": 117, "l2valu": 117, "setc0": 117, "c0valu": 117, "setlossep": 117, "setminw": 117, "setincludeconfid": [117, 118], "verbosevalu": 117, "prerequisit": [117, 118, 119, 225], "nerdl": 118, "char": [118, 121, 132], "bilstm": 118, "tagger": [118, 214, 231], "50": [118, 119, 129, 137, 138, 139, 141, 143, 145, 146, 147, 148, 149, 150, 216], "real": [118, 145, 147, 148, 149, 198, 205, 221], "rage": 118, "graphfold": [118, 154], "usecontrib": 118, "contrib": 118, "cell": [118, 183], "slightli": [118, 132], "includeallconfidencescor": 118, "enablememoryoptim": 118, "slow": 118, "usebestmodel": 118, "bestmodelmetr": 118, "micro": 118, "macro": 118, "setgraphfold": [118, 154, 160], "setusecontrib": 118, "setpo": 118, "setincludeallconfidencescor": 118, "setenablememoryoptim": 118, "setusebestmodel": 118, "setbestmodelmetr": 118, "nermodel": 118, "neroverwrit": 119, "setnewresult": 119, "nerword": 119, "overwritten": 119, "newnerent": 119, "lab": 119, "42": [119, 129], "45": [119, 129, 214, 216], "47": [119, 214, 216], "ner_overwritten": 119, "setnerword": 119, "setnewnerent": 119, "cardin": 119, "setreplaceent": 119, "rw": 119, "zeroshotnermodel": 120, "zeroshotn": 120, "zer_shot_n": 120, "entitydefinit": 120, "citi": 120, "town": 120, "predictionthreshold": 120, "01f": 120, "ignoreent": 120, "zero_shot_n": 120, "setentitydefinit": 120, "hellen": 120, "5328949": 120, "9360068": 120, "83294415": 120, "45366877": 120, "setpredictionthreshold": 120, "zero_shot_ner_roberta": 120, "shortcut": 120, "stem": [121, 158, 179, 208, 229, 230], "henc": 121, "pl": [121, 143], "slangdictionari": 121, "slang": 121, "minlength": [121, 131, 132, 164, 165], "maxlength": [121, 131, 132, 164, 165], "setcleanuppattern": 121, "punctuat": [121, 131], "alphanumer": 121, "za": 121, "z": [121, 136, 165], "brother": 121, "dont": [121, 135], "setslangdictionari": 121, "setminlength": [121, 131, 132, 164, 165], "setmaxlength": [121, 131, 132, 164, 165], "normalizermodel": 121, "openaicomplet": 123, "request": [123, 124, 150], "complet": [123, 136, 150, 205, 222, 225], "executor": [123, 124], "doc": [123, 124, 154, 215, 231], "suffix": [123, 136, 163, 165, 225], "insert": [123, 156, 157, 225], "maxtoken": 123, "nucleu": 123, "mass": 123, "numberofcomplet": 123, "prompt": [123, 136, 148, 181], "logprob": 123, "echo": 123, "presencepenalti": [123, 136], "penal": [123, 136], "topic": 123, "frequencypenalti": [123, 136], "frequenc": [123, 135, 136, 154, 156, 157, 168], "verbatim": 123, "bestof": 123, "best_of": 123, "server": [123, 136, 230], "side": [123, 138, 168], "logitbia": 123, "abus": [123, 124], "pleasur": 123, "dine": 123, "fiorita": 123, "truli": 123, "delight": 123, "menu": 123, "boast": 123, "wonder": 123, "classic": 123, "dish": 123, "exquisit": 123, "prepar": [123, 169, 171, 177, 180], "staff": [123, 134], "227": 123, "barbecu": 123, "joe": 123, "dinner": 123, "amaz": 123, "pull": [123, 150], "pork": 123, "smoke": 123, "turkei": 123, "brisket": 123, "rib": 123, "sandwich": 123, "opt": 123, "172": 123, "overallr": 123, "reviewbodi": 123, "enjoi": [123, 138], "meal": 123, "restaur": [123, 134], "flavour": 123, "beautifulli": 123, "setmodel": [123, 124, 132], "setsuffix": [123, 163], "setmaxtoken": 123, "plu": [123, 139], "max_token": 123, "cannot": 123, "settemperatur": [123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "determinist": 123, "alter": 123, "settopp": [123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "compris": 123, "setnumberofcomplet": 123, "consum": 123, "quota": 123, "ensur": [123, 145, 146, 150, 200], "setlogprob": 123, "respons": [123, 132, 141, 142, 147, 150], "setecho": 123, "setstop": 123, "setpresencepenalti": [123, 136], "setfrequencypenalti": [123, 136], "setbestof": 123, "control": [123, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 192], "candid": [123, 154, 156, 157, 165], "setlogitbia": 123, "mathemat": [123, 138], "ban": 123, "exclus": 123, "50256": 123, "prevent": 123, "endoftext": 123, "setus": [123, 124], "openaiembed": 124, "empty_df": 124, "sample_text": 124, "delici": 124, "waiter": 124, "sample_df": 124, "002297497": 124, "009297881": 124, "015739758": 124, "0076794787": 124, "004737794": 124, "01487661": 124, "009856389": 124, "03823238": 124, "0069305706": 124, "028610818": 124, "025208998": 124, "018138802": 124, "0036271256": 124, "025539026": 124, "204275e": 124, "016374426": 124, "02828079": 124, "0054073683": 124, "009710415": 124, "016399812": 124, "015397037": 124, "00427766": 124, "006987691": 124, "0072859847": 124, "003874646": 124, "018544989": 124, "008752067": 124, "022657635": 124, "011493831": 124, "023901584": 124, "015638212": 124, "0035192322": 124, "034932107": 124, "0041919798": 124, "02612292": 124, "021515233": 124, "005715182": 124, "011754045": 124, "008453773": 124, "004080913": 124, "019179657": 124, "014419649": 124, "00893612": 124, "0063911034": 124, "045670684": 124, "017884934": 124, "005610462": 124, "219344e": 124, "02211182": 124, "0039539794": 124, "021007499": 124, "017631067": 124, "011696924": 124, "02260686": 124, "016336346": 124, "017174106": 124, "008466466": 124, "0015922225": 124, "025094759": 124, "024967825": 124, "007806412": 124, "005794516": 124, "022187982": 124, "0029162979": 124, "0060959826": 124, "025564414": 124, "008104706": 124, "0010178483": 124, "9823447e": 124, "0046425937": 124, "02074094": 124, "013467647": 124, "004626727": 124, "016006319": 124, "0166156": 124, "008948814": 124, "007616012": 124, "013619968": 124, "0069749975": 124, "0052677416": 124, "009881775": 124, "04592455": 124, "0030464048": 124, "024003131": 124, "02301305": 124, "006981344": 124, "023571556": 124, "009938896": 124, "006537077": 124, "033332746": 124, "002690991": 124, "019928563": 124, "0017596161": 124, "001090835": 124, "022683023": 124, "005007528": 124, "01540973": 124, "031530287": 124, "0054676617": 124, "015980931": 124, "0051471544": 124, "019890483": 124, "009386734": 124, "0062133963": 124, "031174876": 124, "009405775": 124, "015270104": 124, "028864685": 124, "021020193": 124, "018303815": 124, "0029210579": 124, "012693353": 124, "005102728": 124, "049580235": 124, "04300508": 124, "1293065e": 124, "0215787": 124, "016894853": 124, "0065434235": 124, "041431103": 124, "662815e": 124, "03351045": 124, "0128901": 124, "010510096": 124, "807209e": 124, "01835459": 124, "2869726e": 124, "01309954": 124, "011982525": 124, "005813556": 124, "0070194243": 124, "008637827": 124, "018456135": 124, "5521466e": 124, "019141577": 124, "021896034": 124, "02975322": 124, "0043220865": 124, "0015160623": 124, "0052074483": 124, "0149527695": 124, "0213883": 124, "018836936": 124, "01105591": 124, "0074636918": 124, "022632249": 124, "0036810723": 124, "006286383": 124, "025678653": 124, "027773056": 124, "03668379": 124, "00445854": 124, "013911915": 124, "008015852": 124, "0056739287": 124, "010281616": 124, "0057659554": 124, "00872668": 124, "010649723": 124, "0787844e": 124, "032164957": 124, "023838118": 124, "002641804": 124, "030387888": 124, "029626286": 124, "016602905": 124, "0021784967": 124, "0010519617": 124, "0116524985": 124, "018519603": 124, "007552545": 124, "007419265": 124, "0011090817": 124, "0044331537": 124, "009989669": 124, "007533505": 124, "0061943564": 124, "0057088356": 124, "028230017": 124, "0042554466": 124, "029321646": 124, "024790118": 124, "015676292": 124, "018202268": 124, "0075017717": 124, "00865052": 124, "0063942764": 124, "0020118963": 124, "036963046": 124, "002335577": 124, "020804405": 124, "6888937": 124, "019598536": 124, "0034748053": 124, "0067401705": 124, "02835695": 124, "023393849": 124, "0071527045": 124, "010586256": 124, "0096088685": 124, "009488282": 124, "021337526": 124, "6766098e": 124, "019801632": 124, "0022705235": 124, "009558095": 124, "0020753632": 124, "708839e": 124, "0066449703": 124, "04130417": 124, "011220924": 124, "013391487": 124, "027722282": 124, "011366897": 124, "4434706e": 124, "015460504": 124, "549375e": 124, "01449581": 124, "008529933": 124, "018875016": 124, "017745307": 124, "009437508": 124, "024587024": 124, "013010687": 124, "008993241": 124, "005093208": 124, "024218917": 124, "024066597": 124, "0037857925": 124, "031047942": 124, "015003543": 124, "023266915": 124, "03021018": 124, "0069115306": 124, "010154682": 124, "011430364": 124, "030311726": 124, "01764376": 124, "0020975766": 124, "006746517": 124, "009748495": 124, "01665368": 124, "003658859": 124, "02789999": 124, "0040682196": 124, "0031289116": 124, "029905539": 124, "016882159": 124, "0021689767": 124, "023228835": 124, "011773085": 124, "014292715": 124, "019827018": 124, "029575512": 124, "0015803224": 124, "018405361": 124, "002776671": 124, "019370057": 124, "027569963": 124, "008460119": 124, "012445833": 124, "0028322043": 124, "0052804346": 124, "006422837": 124, "009335961": 124, "02354617": 124, "0010345082": 124, "018900402": 124, "0029908712": 124, "0068544107": 124, "010148335": 124, "007939693": 124, "0072796377": 124, "020537846": 124, "010928977": 124, "029880153": 124, "0038492593": 124, "002795711": 124, "01892579": 124, "029956313": 124, "024612412": 124, "00446806": 124, "026452947": 124, "017605681": 124, "041177236": 124, "02018243": 124, "014648129": 124, "021553313": 124, "0015017823": 124, "0034874987": 124, "034170505": 124, "036125284": 124, "02805231": 124, "018430749": 124, "003404992": 124, "009329614": 124, "020766325": 124, "012560072": 124, "01707256": 124, "011538258": 124, "007711212": 124, "01332802": 124, "007412918": 124, "022492621": 124, "0059055826": 124, "025754813": 124, "01904003": 124, "013353407": 124, "0026005507": 124, "022530701": 124, "007895266": 124, "842112e": 124, "028103083": 124, "013962688": 124, "019979337": 124, "02115982": 124, "0029305778": 124, "01340418": 124, "01609517": 124, "011880978": 124, "016793307": 124, "0048837676": 124, "013036073": 124, "025767507": 124, "030337114": 124, "022454541": 124, "018824242": 124, "0019785764": 124, "006146756": 124, "0021055099": 124, "0014525956": 124, "011157458": 124, "005293128": 124, "011468444": 124, "021591393": 124, "0051535014": 124, "005597769": 124, "1935701e": 124, "012731433": 124, "0034208586": 124, "024688572": 124, "0018103895": 124, "001299482": 124, "005461315": 124, "024878971": 124, "030565593": 124, "016717145": 124, "013226474": 124, "008764761": 124, "007355798": 124, "0070638508": 124, "005734222": 124, "012084072": 124, "023749264": 124, "028813912": 124, "015892077": 124, "0033573918": 124, "0052201413": 124, "01672984": 124, "0014105488": 124, "02184526": 124, "019560456": 124, "0063752364": 124, "008777454": 124, "00418246": 124, "013861141": 124, "012877407": 124, "009500975": 124, "005804036": 124, "0013859555": 124, "025335932": 124, "01779608": 124, "01537165": 124, "0019722297": 124, "011081297": 124, "0073875315": 124, "0015795291": 124, "015968239": 124, "013454954": 124, "0026592575": 124, "0020944031": 124, "014140395": 124, "0023339903": 124, "0064989966": 124, "0030828982": 124, "0046870206": 124, "013239168": 124, "017491441": 124, "011106684": 124, "029702445": 124, "003696939": 124, "013784981": 124, "017250266": 124, "0037762725": 124, "021413686": 124, "017047172": 124, "019268509": 124, "006898837": 124, "013924608": 124, "009266147": 124, "0023577902": 124, "020905953": 124, "005264568": 124, "0014875022": 124, "0064513967": 124, "003044818": 124, "0073431046": 124, "0012431552": 124, "0021166166": 124, "0019404964": 124, "018646536": 124, "6913787e": 124, "01518125": 124, "0013581888": 124, "016755225": 124, "5418405e": 124, "0076921717": 124, "016780613": 124, "56008e": 124, "010948017": 124, "956349e": 124, "006108676": 124, "011290737": 124, "027443029": 124, "008910734": 124, "012858367": 124, "016844079": 124, "017592987": 124, "01476237": 124, "0039793663": 124, "008066626": 124, "0018421229": 124, "03422128": 124, "016526746": 124, "022200674": 124, "0010051549": 124, "004474407": 124, "6767073e": 124, "007749292": 124, "026249854": 124, "006670357": 124, "014775063": 124, "02589444": 124, "0023530303": 124, "0066068904": 124, "0067147836": 124, "0012542619": 124, "018671922": 124, "0022498968": 124, "0048552076": 124, "0031463648": 124, "0217691": 124, "011849245": 124, "0026735375": 124, "011024177": 124, "01733912": 124, "0073621445": 124, "012407753": 124, "0032939252": 124, "0072288644": 124, "014457729": 124, "0011781019": 124, "009615215": 124, "0141150085": 124, "025376e": 124, "04615303": 124, "031631835": 124, "005131288": 124, "006594197": 124, "025386706": 124, "028204631": 124, "023482703": 124, "013086847": 124, "022314915": 124, "2082416e": 124, "023457317": 124, "006013476": 124, "0125029525": 124, "0021404168": 124, "023977743": 124, "0033542186": 124, "029423192": 124, "0019960299": 124, "0076477453": 124, "080113e": 124, "030413274": 124, "008790147": 124, "013493034": 124, "078089505": 124, "004842514": 124, "015232024": 124, "00825068": 124, "036785338": 124, "335175e": 124, "03891782": 124, "004680674": 124, "005451795": 124, "012134845": 124, "02490436": 124, "007101931": 124, "026351402": 124, "0043093935": 124, "0059595294": 124, "024561638": 124, "019331977": 124, "02385081": 124, "008206253": 124, "015942851": 124, "027138388": 124, "01521933": 124, "0043728603": 124, "025500946": 124, "026173694": 124, "0011558884": 124, "023381157": 124, "0016207825": 124, "001237602": 124, "0049916613": 124, "0024085636": 124, "015587438": 124, "0048203007": 124, "35144e": 124, "012255432": 124, "0048742476": 124, "0062546497": 124, "04051718": 124, "0051090745": 124, "016932933": 124, "0016660026": 124, "02774767": 124, "050976507": 124, "03043866": 124, "0028655245": 124, "0023292303": 124, "0104275895": 124, "004360167": 124, "011144764": 124, "024282385": 124, "013988075": 124, "016234798": 124, "014698903": 124, "037673872": 124, "0054644886": 124, "020461684": 124, "012598153": 124, "012363326": 124, "002833791": 124, "0029274046": 124, "01243314": 124, "0037413659": 124, "012820287": 124, "0070511578": 124, "017364508": 124, "0025545373": 124, "0034843255": 124, "009773882": 124, "0010368882": 124, "009894469": 124, "330013e": 124, "008237986": 124, "0013804021": 124, "0035890455": 124, "029194713": 124, "022721102": 124, "026605267": 124, "011151111": 124, "0054200618": 124, "0043919003": 124, "0022181633": 124, "0025402573": 124, "015562051": 124, "021984888": 124, "025145533": 124, "008422039": 124, "0032590183": 124, "008130092": 124, "0019309763": 124, "009278841": 124, "981743e": 124, "04363975": 124, "008510893": 124, "011360551": 124, "025069373": 124, "004252273": 124, "011132071": 124, "020474378": 124, "014889303": 124, "01896387": 124, "0075461986": 124, "012096765": 124, "030489434": 124, "012166579": 124, "032393437": 124, "0035763523": 124, "009018627": 124, "007438305": 124, "0064196633": 124, "025056679": 124, "012230045": 124, "821482e": 124, "0124839125": 124, "0014454556": 124, "012744127": 124, "007159051": 124, "010402203": 124, "010053135": 124, "0042808335": 124, "0025307373": 124, "004128513": 124, "010890896": 124, "025716733": 124, "024155451": 124, "04023793": 124, "015257411": 124, "0129154865": 124, "013264554": 124, "028636204": 124, "023520783": 124, "004890114": 124, "008022199": 124, "016184025": 124, "051535014": 124, "011792125": 124, "009291534": 124, "031707995": 124, "039476328": 124, "004699714": 124, "014216555": 124, "01480045": 124, "0065053436": 124, "0044997935": 124, "021705633": 124, "0904366e": 124, "019585844": 124, "0036842457": 124, "455769e": 124, "006727477": 124, "0108718565": 124, "0046076872": 124, "0303625": 124, "02967706": 124, "026554495": 124, "014825836": 124, "009786575": 124, "009285187": 124, "020931339": 124, "003630299": 124, "004693367": 124, "009589829": 124, "013886528": 124, "017694535": 124, "027493803": 124, "004982141": 124, "0071717445": 124, "03297733": 124, "007571585": 124, "006276863": 124, "016069785": 124, "0464047e": 124, "0025450173": 124, "015358957": 124, "018494215": 124, "7068556e": 124, "027646123": 124, "0011114617": 124, "013429567": 124, "007920653": 124, "0050011813": 124, "013543808": 124, "014381569": 124, "0047346205": 124, "018798856": 124, "019674698": 124, "012629886": 124, "029803993": 124, "009862735": 124, "0033732585": 124, "013048767": 124, "009456548": 124, "03815622": 124, "286778e": 124, "0040301397": 124, "014254635": 124, "0038809928": 124, "016666373": 124, "6997105e": 124, "017351814": 124, "015549357": 124, "02952474": 124, "00431574": 124, "009818309": 124, "470635e": 124, "011404978": 124, "025082065": 124, "021908727": 124, "018951176": 124, "022936888": 124, "013658048": 124, "004671154": 124, "0296009": 124, "0127949": 124, "018341895": 124, "6842424e": 124, "01292818": 124, "0036429923": 124, "030083247": 124, "00215311": 124, "024206225": 124, "02619908": 124, "009837349": 124, "010256229": 124, "008168173": 124, "0100340955": 124, "013150314": 124, "02188334": 124, "010935323": 124, "008371267": 124, "00857436": 124, "0036144322": 124, "009697721": 124, "007863532": 124, "018100722": 124, "019446217": 124, "023495397": 124, "0037032857": 124, "009380388": 124, "027265321": 124, "007140011": 124, "015193944": 124, "004556914": 124, "013632661": 124, "0056358487": 124, "01040855": 124, "0050519546": 124, "008155479": 124, "9020106e": 124, "032571144": 124, "0048076073": 124, "0060293428": 124, "016031705": 124, "021781793": 124, "0015866691": 124, "0016088824": 124, "024752038": 124, "0019547765": 124, "012369673": 124, "015320877": 124, "012706046": 124, "009082094": 124, "010249883": 124, "019128883": 124, "02543748": 124, "0084982": 124, "0032970984": 124, "012991647": 124, "022479929": 124, "02316537": 124, "0012312552": 124, "0042840065": 124, "018227655": 124, "005731049": 124, "02604676": 124, "006689397": 124, "006305423": 124, "018075334": 124, "019484296": 124, "01783416": 124, "0012130085": 124, "015866691": 124, "020626698": 124, "039882515": 124, "008682254": 124, "0022546567": 124, "009323268": 124, "035871416": 124, "014330796": 124, "0145465825": 124, "023216143": 124, "011531911": 124, "020372832": 124, "00641649": 124, "013531114": 124, "016437892": 124, "013124927": 124, "019814324": 124, "0015136823": 124, "016247492": 124, "004753661": 124, "013823061": 124, "007907959": 124, "027113002": 124, "009932549": 124, "009659641": 124, "0044807536": 124, "009850042": 124, "014191168": 124, "042954307": 124, "024701266": 124, "01059895": 124, "0047885673": 124, "021629473": 124, "006651317": 124, "031098714": 124, "0058262493": 124, "0051249415": 124, "0065180366": 124, "0519563e": 124, "009792922": 124, "0423958": 124, "010992444": 124, "008739374": 124, "002449817": 124, "012045992": 124, "014089622": 124, "0018310162": 124, "014406956": 124, "033180423": 124, "0052709146": 124, "0016802826": 124, "012750473": 124, "018329201": 124, "005750089": 124, "048234742": 124, "01771992": 124, "009240761": 124, "789961e": 124, "017669147": 124, "01730104": 124, "0026529108": 124, "022543395": 124, "017288346": 124, "007971426": 124, "019065415": 124, "007857186": 124, "0481933e": 124, "016488666": 124, "709636e": 124, "009348654": 124, "0049281945": 124, "0059436625": 124, "020956725": 124, "003538272": 124, "0038905127": 124, "0016485492": 124, "0044141137": 124, "01271874": 124, "01483853": 124, "01245218": 124, "0023657237": 124, "0037794458": 124, "5497736e": 124, "00882188": 124, "015815917": 124, "016767919": 124, "005185235": 124, "018049948": 124, "007685825": 124, "21934114": 124, "012007912": 124, "005039261": 124, "037445392": 124, "4307736e": 124, "031403355": 124, "0018468829": 124, "0024656837": 124, "01722488": 124, "013213781": 124, "011512871": 124, "0015811158": 124, "0035287521": 124, "0062419563": 124, "0048456877": 124, "025120145": 124, "023800036": 124, "0269697e": 124, "03554139": 124, "01071319": 124, "2110125e": 124, "017313734": 124, "03777542": 124, "0019944431": 124, "04402055": 124, "02442201": 124, "018976564": 124, "005873849": 124, "006924224": 124, "003865126": 124, "0057437425": 124, "0038206992": 124, "013163007": 124, "01646328": 124, "02446009": 124, "018748082": 124, "027239935": 124, "0032479118": 124, "03653147": 124, "015206637": 124, "018773468": 124, "00643553": 124, "010141989": 124, "009183641": 124, "02025859": 124, "019852404": 124, "006054729": 124, "010630683": 124, "009481935": 124, "059881e": 124, "03005786": 124, "014851223": 124, "014280022": 124, "003274885": 124, "0014168955": 124, "025005905": 124, "9089613e": 124, "022302222": 124, "008999587": 124, "010097562": 124, "024942439": 124, "012807593": 124, "019547764": 124, "034957495": 124, "026833748": 124, "7683392e": 124, "0068417173": 124, "011182844": 124, "016907547": 124, "03013402": 124, "0041062995": 124, "014571969": 124, "02070286": 124, "011335164": 124, "012725086": 124, "8341785e": 124, "0013653288": 124, "017859548": 124, "0056802756": 124, "006556117": 124, "0033002717": 124, "011398631": 124, "010954363": 124, "055139925": 124, "009424815": 124, "004959928": 124, "028788524": 124, "0031241516": 124, "0027465243": 124, "036810722": 124, "0031828582": 124, "005543822": 124, "0026053106": 124, "6973375e": 124, "017935708": 124, "0015406557": 124, "0023911104": 124, "016945627": 124, "0035636588": 124, "02396505": 124, "01911619": 124, "0029448578": 124, "033408906": 124, "020550538": 124, "01294722": 124, "011500178": 124, "011988872": 124, "025424786": 124, "011887325": 124, "038587794": 124, "003395472": 124, "007946039": 124, "019966645": 124, "033713546": 124, "018189576": 124, "026859134": 124, "012223699": 124, "024802811": 124, "099946e": 124, "0010448216": 124, "005020221": 124, "012356979": 124, "007590625": 124, "03089562": 124, "014521196": 124, "017212186": 124, "024917051": 124, "020169739": 124, "044680603": 124, "005658062": 124, "013835755": 124, "3776127e": 124, "0028496578": 124, "006467263": 124, "053007443": 124, "011614418": 124, "0056453687": 124, "16145945": 124, "0091963345": 124, "024548944": 124, "016425198": 124, "015701678": 124, "862344e": 124, "023190755": 124, "0074509983": 124, "018088028": 124, "010205456": 124, "010383163": 124, "033028103": 124, "0023324036": 124, "019052723": 124, "016590212": 124, "4408938e": 124, "02324153": 124, "019623924": 124, "0383847": 124, "002686231": 124, "0010852817": 124, "0076223584": 124, "002762391": 124, "030540207": 124, "0037667525": 124, "011005137": 124, "0017850028": 124, "005984916": 124, "0029353378": 124, "02555172": 124, "00855532": 124, "010287963": 124, "2544602e": 124, "0065624635": 124, "017808774": 124, "03528752": 124, "013188394": 124, "027925376": 124, "0014248289": 124, "009342308": 124, "0017247093": 124, "023596942": 124, "004709234": 124, "037369233": 124, "016082479": 124, "0011963486": 124, "00222451": 124, "014165782": 124, "0014414889": 124, "0058865426": 124, "2633766e": 124, "012274472": 124, "011328817": 124, "0020372833": 124, "0013026553": 124, "00635937": 124, "00651169": 124, "0024672705": 124, "0026640175": 124, "0033669118": 124, "0074763848": 124, "311968e": 124, "023444623": 124, "017656455": 124, "0065243836": 124, "021832567": 124, "02320345": 124, "015092397": 124, "034119733": 124, "025983294": 124, "021324834": 124, "015663598": 124, "00417294": 124, "014965463": 124, "014203862": 124, "0074319583": 124, "007381185": 124, "0035446188": 124, "009310574": 124, "02562788": 124, "01101783": 124, "009050361": 124, "010484709": 124, "005835769": 124, "0036620323": 124, "0055565154": 124, "028712364": 124, "033586614": 124, "027087616": 124, "019509684": 124, "005166195": 124, "020042805": 124, "019903177": 124, "010738577": 124, "038816273": 124, "014990849": 124, "025412092": 124, "030464048": 124, "009158255": 124, "046609994": 124, "9095457e": 124, "0016675893": 124, "012921833": 124, "2828116e": 124, "0033288319": 124, "10784273": 124, "022898808": 124, "020563232": 124, "020487072": 124, "0063117696": 124, "005299475": 124, "013442261": 124, "0112590045": 124, "015282797": 124, "013581888": 124, "023723876": 124, "00847916": 124, "025221692": 124, "028686978": 124, "8655227e": 124, "005169368": 124, "0765446e": 124, "011436711": 124, "004963101": 124, "0067592105": 124, "007527158": 124, "029854767": 124, "0072098244": 124, "011246311": 124, "009945242": 124, "017326428": 124, "004052353": 124, "011684231": 124, "311375e": 124, "026986068": 124, "012801247": 124, "0023815904": 124, "047600072": 124, "006886144": 124, "004464887": 124, "9809546e": 124, "018684616": 124, "022924196": 124, "0070575043": 124, "0037730993": 124, "025830973": 124, "029651672": 124, "0046140337": 124, "041710358": 124, "0058960626": 124, "0018706829": 124, "0065878504": 124, "0067338236": 124, "0011431951": 124, "020233205": 124, "008218946": 124, "015930157": 124, "0024022171": 124, "0051439814": 124, "0120777255": 124, "00895516": 124, "010116602": 124, "038638566": 124, "0056231553": 124, "840722e": 124, "009754842": 124, "0074256114": 124, "0011773085": 124, "7314436e": 124, "02014435": 124, "010186416": 124, "0067211306": 124, "015828611": 124, "0043665133": 124, "0112526575": 124, "031073328": 124, "018126108": 124, "014432343": 124, "0021118566": 124, "017389894": 124, "023635022": 124, "0062736897": 124, "040187154": 124, "006905184": 124, "0068163304": 124, "0087838005": 124, "010072175": 124, "00832684": 124, "01061799": 124, "01268066": 124, "0137088215": 124, "007926999": 124, "01711064": 124, "00885996": 124, "015422424": 124, "0052011013": 124, "022327607": 124, "0092280675": 124, "022251448": 124, "0045251804": 124, "5886433e": 124, "020360138": 124, "021870647": 124, "013251861": 124, "027595349": 124, "01094167": 124, "011550951": 124, "0033034452": 124, "026072146": 124, "030032473": 124, "00411582": 124, "012185619": 124, "0096215615": 124, "002618004": 124, "006575157": 124, "03675995": 124, "010986097": 124, "023673104": 124, "011900018": 124, "016044399": 124, "0040206197": 124, "018722696": 124, "0038873393": 124, "011163804": 124, "01919235": 124, "015790531": 124, "0013692954": 124, "011836552": 124, "005096381": 124, "031200262": 124, "0358968": 124, "009126521": 124, "013696128": 124, "014711596": 124, "018608455": 124, "03922246": 124, "0179484": 124, "0069178776": 124, "010909937": 124, "013569194": 124, "019839711": 124, "024447398": 124, "01086551": 124, "010294309": 124, "024726652": 124, "016679065": 124, "0013145554": 124, "004617207": 124, "004690194": 124, "013315327": 124, "0112653505": 124, "0016009491": 124, "003998406": 124, "025272466": 124, "0030051514": 124, "007869879": 124, "031251036": 124, "005375635": 124, "0046203807": 124, "0030099114": 124, "0071273176": 124, "012020606": 124, "016285572": 124, "033865865": 124, "04290353": 124, "009107481": 124, "007400225": 124, "018253041": 124, "016704453": 124, "003957153": 124, "022644943": 124, "0074446513": 124, "012122152": 124, "0013796088": 124, "019014644": 124, "026909908": 124, "003035298": 124, "012153885": 124, "020499766": 124, "006010303": 124, "004026966": 124, "3466855e": 124, "001078935": 124, "0051725414": 124, "0014906756": 124, "009526362": 124, "016310958": 124, "010357776": 124, "0145338895": 124, "015993625": 124, "025259772": 124, "036937658": 124, "0044014202": 124, "008713987": 124, "003931766": 124, "0053597684": 124, "02797615": 124, "020093577": 124, "004550567": 124, "024434704": 124, "0029956312": 124, "6632223e": 124, "51248e": 124, "028915457": 124, "023470009": 124, "008675907": 124, "014013462": 124, "0031527115": 124, "0018865496": 124, "0033986452": 124, "040974144": 124, "002589444": 124, "0018516429": 124, "049504075": 124, "00884092": 124, "004541047": 124, "014076929": 124, "015473197": 124, "0027211376": 124, "031327195": 124, "041126464": 124, "018595763": 124, "0104593225": 124, "01938275": 124, "0027592175": 124, "classifierencod": 125, "attach": [125, 126, 187, 192, 203, 205], "evaluationdlparam": 126, "setevaluationlogextend": 126, "setenableoutputlog": [126, 205, 221], "setoutputlogspath": [126, 132, 205, 221], "assum": 126, "perceptronapproach": [129, 214, 231], "member": [129, 208], "datasetpath": 129, "pierr": [129, 214], "vinken": [129, 214], "34": [129, 214, 216], "md": [129, 214], "vb": [129, 211, 214, 231], "41": [129, 131, 214, 216], "43": [129, 131, 214, 216], "dt": [129, 214, 215, 231], "49": [129, 214], "poscol": [129, 168, 211], "niter": [129, 168], "anc": [129, 214, 231], "trainingperceptrondf": 129, "trainedpo": 129, "setposcolumn": [129, 168], "cd": [129, 211, 214], "setiter": 129, "getniter": [129, 168], "pos_anc": 129, "25": [129, 131, 214, 216], "33": [129, 216], "sentencedetectorparam": 131, "ii": 131, "abbrevi": 131, "period": 131, "geo": 131, "1026": 131, "253": 131, "553": 131, "ellipsi": 131, "quotat": 131, "mark": [131, 132, 168], "exclam": 131, "breaker": 131, "pragmaticcontentformatt": 131, "custombound": [131, 132], "setcustombound": [131, 132], "usecustomboundsonli": [131, 132], "explodesent": [131, 132, 211, 212], "useabbrevi": 131, "explicitli": [131, 132, 159, 197, 225], "customboundsstrategi": 131, "prepend": [131, 170], "break": [131, 146], "append": [131, 154, 225], "parallel": [131, 132, 179, 211, 229], "splitlength": [131, 132], "forcibli": [131, 132], "99999": [131, 132, 165], "detectlist": 131, "nhow": 131, "setcustomboundsstrategi": 131, "setuseabbrevi": 131, "setdetectlist": 131, "setusecustomboundsonli": [131, 132], "setexplodesent": [131, 132], "setsplitlength": [131, 132], "sentencedetectordl": [132, 144], "sentencedetectordlapproach": 132, "sentencedetectordlmodel": [132, 144], "modelarchitectur": 132, "impossiblepenultim": 132, "imposs": [132, 168], "penultim": 132, "epochsnumb": 132, "eo": 132, "stefan": 132, "schweter": 132, "sajawel": 132, "ahm": 132, "cover": [132, 137, 143, 146, 151, 168], "broken": 132, "moder": 132, "lack": 132, "easier": [132, 173, 227, 231], "polit": 132, "successor": 132, "great": 132, "heritag": [132, 150], "bequeath": 132, "nelson": 132, "mandela": 132, "setepochsnumb": 132, "model_architectur": 132, "validation_split": 132, "epochs_numb": 132, "output_logs_path": 132, "setimpossiblepenultim": 132, "impossible_penultim": 132, "sentencedl": 132, "sentencesdl": 132, "helen": 132, "total": [132, 168], "peopl": 132, "sentimentdetector": 134, "els": 134, "viveknsentimentapproach": [134, 135], "cool": 134, "superb": 134, "uninspir": 134, "sentimentscor": 134, "nice": [134, 205, 221], "entri": [134, 171, 180, 209], "sttr": 134, "sentimentdetectormodel": 134, "sda": [134, 135], "pragmat": 134, "viveknsenti": 135, "analys": 135, "vivek": 135, "narayanan": 135, "give": 135, "transit": [135, 154], "sentimentcol": 135, "prunecorpu": 135, "unfrequ": 135, "scope": 135, "naiv": 135, "bay": 135, "vivekn": 135, "setsentimentcol": 135, "train_senti": 135, "result_senti": 135, "finish": [135, 152, 172, 174, 178, 182, 198], "final_senti": 135, "cast": [135, 169], "horribl": 135, "go": [135, 225], "again": [135, 163], "anyon": 135, "protagonist": 135, "music": 135, "setprunecorpu": 135, "viveknsentimentmodel": 135, "sentiment_vivekn": 135, "autoggufmodel": 136, "llama": [136, 141, 142, 145, 147, 181], "cpp": [136, 181], "settabl": 136, "explan": [136, 154, 228], "phi3": [136, 148], "5_mini_4k_instruct_q4_gguf": 136, "autoggufmodeltest": 136, "nthread": 136, "thread": 136, "nthreadsdraft": 136, "draft": 136, "nthreadsbatch": 136, "nthreadsbatchdraft": 136, "nctx": 136, "nbatch": 136, "logic": [136, 147, 148], "bla": 136, "nubatch": 136, "physic": 136, "ndraft": 136, "specul": 136, "nchunk": 136, "nsequenc": 136, "psplit": 136, "ngpulay": 136, "vram": 136, "ngpulayersdraft": 136, "gpusplitmod": 136, "maingpu": 136, "scratch": 136, "tensorsplit": 136, "grpattnn": 136, "grpattnw": 136, "ropefreqbas": 136, "rope": 136, "ntk": 136, "awar": [136, 154], "ropefreqscal": 136, "expand": [136, 145], "yarnextfactor": 136, "yarn": 136, "extrapol": 136, "yarnattnfactor": 136, "sqrt": 136, "yarnbetafast": 136, "beta": [136, 149], "yarnbetaslow": 136, "alpha": [136, 138, 154], "yarnorigctx": 136, "defragmentationthreshold": 136, "kv": 136, "defragment": 136, "numastrategi": 136, "numa": 136, "ropescalingtyp": 136, "unless": 136, "poolingtyp": 136, "unspecifi": 136, "modeldraft": 136, "modelalia": 136, "alia": [136, 197], "lookupcachestaticfilepath": 136, "updat": [136, 154], "lookupcachedynamicfilepath": 136, "flashattent": 136, "flash": 136, "inputprefixbo": 136, "bo": 136, "preced": [136, 225], "usemmap": 136, "pageout": 136, "mlock": 136, "usemlock": 136, "ram": 136, "swap": [136, 156], "compress": 136, "nokvoffload": 136, "disabl": [136, 171, 180], "offload": 136, "systemprompt": 136, "chattempl": [136, 181], "chat": [136, 138, 141, 142, 147, 148, 149, 181], "templat": [136, 181], "inputprefix": 136, "inputsuffix": 136, "infil": 136, "cacheprompt": 136, "rememb": [136, 154], "reprocess": 136, "npredict": 136, "minp": 136, "min": [136, 154], "tfsz": 136, "tail": 136, "free": [136, 144], "typicalp": 136, "typic": [136, 139], "dynatemprang": 136, "dynatempexpon": 136, "expon": 136, "repeatlastn": 136, "repeatpenalti": 136, "presenc": 136, "mirostat": 136, "mirostattau": 136, "entropi": 136, "tau": 136, "mirostateta": 136, "eta": 136, "penalizenl": 136, "newlin": [136, 154], "nkeep": 136, "rng": 136, "nprob": 136, "minkeep": 136, "sampler": 136, "least": [136, 168], "bnf": 136, "penaltyprompt": 136, "ignoreeo": 136, "impli": 136, "inf": 136, "disabletokenid": 136, "stopstr": 136, "usechattempl": 136, "setngpulay": 136, "adjust": 136, "setnctx": 136, "hardwar": 136, "ab": [136, 137], "1910": [136, 137], "13461": [136, 137], "pytorch": [136, 137, 143, 146], "fairseq": [136, 137, 143, 146], "arbitrari": [136, 137], "nois": [136, 137], "reconstruct": [136, 137, 184], "tranform": [136, 137], "randomli": [136, 137], "dialogu": [136, 137, 141, 142, 147], "roug": [136, 137], "bleu": [136, 137, 143, 146], "ablat": [136, 137], "influenc": [136, 137, 154], "setnpredict": 136, "99": 136, "settopk": [136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "setpenalizenl": 136, "78": [136, 148, 214], "setnthread": 136, "setnthreadsdraft": 136, "setnthreadsbatch": 136, "setnthreadsbatchdraft": 136, "setnbatch": 136, "setnubatch": 136, "setndraft": 136, "setnchunk": 136, "setnsequ": 136, "setpsplit": 136, "setngpulayersdraft": 136, "setgpusplitmod": 136, "setmaingpu": 136, "settensorsplit": 136, "setgrpattnn": 136, "setgrpattnw": 136, "setropefreqbas": 136, "setropefreqscal": 136, "setyarnextfactor": 136, "setyarnattnfactor": 136, "setyarnbetafast": 136, "setyarnbetaslow": 136, "setyarnorigctx": 136, "setdefragmentationthreshold": 136, "setnumastrategi": 136, "setropescalingtyp": 136, "setpoolingtyp": 136, "setmodeldraft": 136, "setmodelalia": 136, "setlookupcachestaticfilepath": 136, "setlookupcachedynamicfilepath": 136, "setembed": 136, "setflashattent": 136, "setinputprefixbo": 136, "setusemmap": 136, "setusemlock": 136, "setnokvoffload": 136, "setsystemprompt": 136, "setchattempl": [136, 181], "setinputprefix": 136, "setinputsuffix": 136, "setcacheprompt": 136, "setminp": 136, "settfsz": 136, "settypicalp": 136, "setdynamictemperaturerang": 136, "dynamictemperaturerang": 136, "setdynamictemperatureexpon": 136, "dynamictemperatureexpon": 136, "setrepeatlastn": 136, "setrepeatpenalti": 136, "setmirostat": 136, "setmirostattau": 136, "setmirostateta": 136, "setnkeep": 136, "setnprob": 136, "setminkeep": 136, "setgrammar": 136, "setpenaltyprompt": 136, "setignoreeo": 136, "setdisabletokenid": 136, "setstopstr": 136, "setsampl": 136, "setusechattempl": 136, "settokenidbia": 136, "tokenidbia": 136, "settokenbia": 136, "tokenbia": 136, "setloraadapt": 136, "loraadapt": 136, "getmetadata": 136, "barttransform": 137, "handl": [137, 145, 195, 213], "captur": [137, 152], "past": [137, 144, 209], "incorpor": [137, 148], "versatil": [137, 145, 150], "valuabl": [137, 150], "summari": [137, 138, 139, 141, 143, 145, 146, 147, 148, 149, 151], "distilbart_xsum_12_6": 137, "barttestspec": 137, "cumul": [137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "ignoretokenid": [137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151], "usecach": 137, "setmaxoutputlength": [137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "200": [137, 146, 151], "rich": [137, 151], "rise": [137, 151], "methodologi": [137, 151], "landscap": [137, 151], "unifi": [137, 151], "systemat": [137, 151], "dozen": [137, 151], "insight": [137, 151], "coloss": [137, 151], "facilit": [137, 151], "setignoretokenid": [137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "setminoutputlength": [137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 192], "setrepetitionpenalti": [137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "ctrl": [137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "setnorepeatngrams": [137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192], "setcach": 137, "use_cach": 137, "cpmtransform": 138, "minicpm": 138, "unveil": 138, "seri": [138, 149], "2b": 138, "4b": [138, 149], "close": [138, 141, 142, 147], "mistral": [138, 145], "7b": [138, 141, 142, 145, 147, 148, 149, 150], "chines": [138, 143, 146, 168], "llama2": [138, 141], "13b": [138, 141, 145, 149, 150], "mpt": 138, "30b": 138, "falcon": 138, "40b": 138, "mtbench": 138, "closest": 138, "70b": [138, 141, 142], "vicuna": 138, "33b": [138, 150], "v0": 138, "zephyr": 138, "dpo": 138, "multimodel": 138, "multimod": 138, "phi": [138, 147, 148], "6b": 138, "qwen": [138, 149], "vl": 138, "deploi": [138, 144, 148, 222], "smartphon": 138, "verbal": 138, "cpm": 138, "llam2": [138, 141, 147], "shengdinghu": 138, "notion": 138, "d4d3a8c426424654a4e80e42a711cb20": 138, "openbmb": 138, "llama_2_7b_chat_hf_int4": [138, 141, 142], "leonardo": [138, 139, 141, 145, 147, 148, 149], "student": [138, 147, 148, 149], "california": [138, 147, 148, 149], "lo": [138, 143], "passion": [138, 147, 148, 149], "cultur": 138, "plai": 138, "basketbal": 138, "gpt2transform": 139, "caus": [139, 165], "goal": [139, 146, 168], "direct": [139, 143, 146, 148], "10x": 139, "synthet": [139, 147, 148], "unpreced": 139, "prime": 139, "lengthi": 139, "benefit": 139, "suffici": 139, "learner": 139, "taskspecif": 139, "webpag": [139, 222], "webtext": 139, "coqa": 139, "exceed": [139, 142], "127": 139, "fashion": [139, 152], "5b": [139, 149], "underfit": 139, "reflect": [139, 143], "paragraph": [139, 154], "promis": 139, "1776": [139, 141], "came": [139, 141], "kingdom": [139, 141], "llama2transform": 141, "4k": [141, 148], "excit": 141, "reinforc": [141, 142, 147], "feedback": [141, 142, 147], "rlhf": [141, 142], "safeti": [141, 142, 146, 147, 148], "chatgpt": 141, "facebookresearch": [141, 142], "suitabl": [141, 147], "substitut": [141, 147], "llama3transform": 142, "cut": 142, "8b": [142, 149], "expans": 142, "offer": [142, 145, 225, 227, 230], "known": 142, "llama3": 142, "latest": 142, "meta": [142, 205, 223], "commerci": [142, 144], "aim": [142, 146, 152], "foster": 142, "collabor": [142, 150], "llama_3_7b_chat_hf_int8": 142, "start_header_id": [142, 181], "end_header_id": [142, 181], "minion": 142, "chatbot": 142, "respond": 142, "speak": 142, "assist": [142, 150, 181, 197], "oooh": 142, "yeah": 142, "bana": 142, "na": 142, "setstoptokenid": 142, "llama_3_7b_chat_hf_int4": 142, "m2m100transform": 143, "m2m100": 143, "seq": [143, 146], "900": 143, "m2m100_418m": 143, "srclang": [143, 146], "tgtlang": [143, 146], "afrikaan": [143, 146], "af": 143, "amhar": [143, 146], "arab": [143, 146], "asturian": [143, 146], "ast": 143, "azerbaijani": [143, 146], "az": 143, "bashkir": [143, 146], "ba": 143, "belarusian": [143, 146], "bulgarian": [143, 146], "bg": 143, "bengali": [143, 146], "breton": 143, "br": 143, "bosnian": [143, 146], "catalan": [143, 146], "valencian": 143, "ca": 143, "cebuano": [143, 146], "ceb": 143, "czech": [143, 146], "welsh": [143, 146], "cy": 143, "da": [143, 145], "greeek": 143, "el": 143, "estonian": [143, 146], "persian": [143, 146], "fa": 143, "fulah": 143, "ff": 143, "fi": 143, "western": [143, 146], "frisian": 143, "fy": 143, "irish": [143, 146], "ga": 143, "gaelic": [143, 146], "scottish": [143, 146], "gd": 143, "galician": [143, 146], "gl": 143, "gujarati": [143, 146], "gu": 143, "hausa": [143, 146], "hebrew": [143, 146], "hindi": [143, 146], "croatian": [143, 146], "hr": 143, "haitian": [143, 146], "creol": [143, 146], "ht": 143, "armenian": [143, 146], "hy": 143, "indonesian": [143, 146], "igbo": [143, 146], "ig": 143, "iloko": 143, "ilo": 143, "iceland": [143, 146], "japanes": [143, 146, 168], "ja": 143, "javanes": [143, 146], "jv": 143, "georgian": [143, 146], "ka": 143, "kazakh": [143, 146], "kk": 143, "central": [143, 146, 222], "khmer": [143, 146], "km": 143, "kannada": [143, 146], "kn": 143, "korean": [143, 146, 168], "ko": 143, "luxembourgish": [143, 146], "letzeburgesch": 143, "lb": 143, "ganda": [143, 146], "lg": 143, "lingala": [143, 146], "ln": 143, "lao": [143, 146], "lithuanian": [143, 146], "lt": 143, "latvian": [143, 146], "lv": 143, "malagasi": [143, 146], "mg": 143, "macedonian": [143, 146], "mk": 143, "malayalam": [143, 146], "mongolian": [143, 146], "mn": 143, "marathi": [143, 146], "malai": [143, 146], "burmes": [143, 146], "nepali": [143, 146], "ne": 143, "flemish": 143, "nl": 143, "northern": [143, 146], "sotho": [143, 146], "occitan": [143, 146], "post": [143, 148], "oc": 143, "oriya": 143, "panjabi": [143, 146], "punjabi": 143, "pa": [143, 215, 231], "polish": [143, 146], "pushto": 143, "pashto": [143, 146], "romanian": [143, 146], "moldavian": 143, "moldovan": 143, "ro": 143, "ru": 143, "sindhi": [143, 146], "sd": 143, "sinhala": [143, 146], "sinhales": 143, "si": 143, "slovak": [143, 146], "sk": 143, "slovenian": [143, 146], "sl": 143, "somali": [143, 146], "albanian": [143, 146], "sq": 143, "serbian": [143, 146], "sr": 143, "swati": [143, 146], "ss": 143, "sundanes": [143, 146], "su": 143, "sw": 143, "tamil": [143, 146], "ta": [143, 146], "thai": [143, 146], "th": 143, "tagalog": [143, 146], "tl": 143, "tswana": [143, 146], "tn": 143, "tr": 143, "ukrainian": [143, 146], "uk": 143, "ur": 143, "uzbek": [143, 146], "uz": 143, "vietnames": [143, 146], "vi": 143, "wolof": [143, 146], "wo": 143, "xhosa": [143, 146], "xh": 143, "yiddish": [143, 146], "yi": 143, "yoruba": [143, 146], "yo": 143, "zh": [143, 168], "zulu": [143, 146], "zu": 143, "beyond": [143, 146], "massiv": 143, "worldwid": 143, "mine": [143, 146], "spars": [143, 146], "focu": [143, 146, 148], "wmt": 143, "m2m": 143, "setsrclang": [143, 146], "settgtlang": [143, 146], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [143, 146], "life": [143, 146], "chocol": [143, 146], "mariantransform": 144, "marian": 144, "mainli": 144, "academ": [144, 148], "notabl": [144, 145], "edinburgh": 144, "adam": 144, "mickiewicz": 144, "pozna\u0144": 144, "contributor": 144, "mariannmt": 144, "engin": [144, 161], "behind": [144, 146, 147], "opus_mt_en_fr": 144, "langid": 144, "maxinputlength": 144, "differenti": 144, "toolkit": 144, "setmaxinputlength": 144, "capit": [144, 154], "quell": 144, "capital": 144, "devrait": 144, "savoir": 144, "fran\u00e7ai": 144, "setlangid": 144, "mistraltransform": 145, "34b": [145, 150], "aspect": 145, "strike": 145, "balanc": 145, "rival": [145, 148], "codellama": [145, 150], "latter": 145, "gqa": [145, 149], "quicker": 145, "compromis": 145, "streamlin": [145, 205, 221], "smoother": 145, "slide": [145, 149], "swa": [145, 149], "reliabl": [145, 205, 221], "mistral_7b": 145, "vinci": 145, "invent": 145, "microscop": 145, "No": [145, 146, 212, 224], "late": 145, "16th": 145, "nllbtransform": 146, "nllb": 146, "nllb_418m": 146, "acehnes": 146, "ace_arab": 146, "latin": 146, "ace_latn": 146, "mesopotamian": 146, "acm_arab": 146, "izzi": 146, "adeni": 146, "acq_arab": 146, "tunisian": 146, "aeb_arab": 146, "afr_latn": 146, "south": 146, "levantin": 146, "ajp_arab": 146, "akan": 146, "aka_latn": 146, "amh_ethi": 146, "north": 146, "apc_arab": 146, "arb_arab": 146, "roman": 146, "arb_latn": 146, "najdi": 146, "ars_arab": 146, "moroccan": 146, "ary_arab": 146, "arz_arab": 146, "assames": 146, "asm_beng": 146, "ast_latn": 146, "awadhi": 146, "awa_deva": 146, "aymara": 146, "ayr_latn": 146, "azb_arab": 146, "azj_latn": 146, "bak_cyrl": 146, "bambara": 146, "bam_latn": 146, "balines": 146, "ban_latn": 146, "bel_cyrl": 146, "bemba": 146, "bem_latn": 146, "ben_beng": 146, "bhojpuri": 146, "bho_deva": 146, "banjar": 146, "bjn_arab": 146, "bjn_latn": 146, "tibetan": 146, "bod_tibt": 146, "bos_latn": 146, "bugines": 146, "bug_latn": 146, "bul_cyrl": 146, "cat_latn": 146, "ceb_latn": 146, "ces_latn": 146, "chokw": 146, "cjk_latn": 146, "kurdish": 146, "ckb_arab": 146, "crimean": 146, "tatar": 146, "crh_latn": 146, "cym_latn": 146, "dan_latn": 146, "deu_latn": 146, "southwestern": 146, "dinka": 146, "dik_latn": 146, "dyula": 146, "dyu_latn": 146, "dzongkha": 146, "dzo_tibt": 146, "greek": 146, "ell_grek": 146, "eng_latn": 146, "esperanto": 146, "epo_latn": 146, "est_latn": 146, "basqu": 146, "eus_latn": 146, "ew": 146, "ewe_latn": 146, "faroes": 146, "fao_latn": 146, "fijian": 146, "fij_latn": 146, "fin_latn": 146, "fon": 146, "fon_latn": 146, "fra_latn": 146, "friulian": 146, "fur_latn": 146, "nigerian": 146, "fulfuld": 146, "fuv_latn": 146, "gla_latn": 146, "gle_latn": 146, "glg_latn": 146, "guarani": 146, "grn_latn": 146, "guj_gujr": 146, "hat_latn": 146, "hau_latn": 146, "heb_hebr": 146, "hin_deva": 146, "chhattisgarhi": 146, "hne_deva": 146, "hrv_latn": 146, "hun_latn": 146, "hye_armn": 146, "ibo_latn": 146, "ilocano": 146, "ilo_latn": 146, "ind_latn": 146, "isl_latn": 146, "ita_latn": 146, "jav_latn": 146, "jpn_jpan": 146, "kabyl": 146, "kab_latn": 146, "jingpho": 146, "kac_latn": 146, "kamba": 146, "kam_latn": 146, "kan_knda": 146, "kashmiri": 146, "kas_arab": 146, "devanagari": 146, "kas_deva": 146, "kat_geor": 146, "kanuri": 146, "knc_arab": 146, "knc_latn": 146, "kaz_cyrl": 146, "kabiy\u00e8": 146, "kbp_latn": 146, "kabuverdianu": 146, "kea_latn": 146, "khm_khmr": 146, "kikuyu": 146, "kik_latn": 146, "kinyarwanda": 146, "kin_latn": 146, "kyrgyz": 146, "kir_cyrl": 146, "kimbundu": 146, "kmb_latn": 146, "kmr_latn": 146, "kikongo": 146, "kon_latn": 146, "kor_hang": 146, "lao_laoo": 146, "ligurian": 146, "lij_latn": 146, "limburgish": 146, "lim_latn": 146, "lin_latn": 146, "lit_latn": 146, "lombard": 146, "lmo_latn": 146, "latgalian": 146, "ltg_latn": 146, "ltz_latn": 146, "luba": 146, "kasai": 146, "lua_latn": 146, "lug_latn": 146, "luo": 146, "luo_latn": 146, "mizo": 146, "lus_latn": 146, "lvs_latn": 146, "magahi": 146, "mag_deva": 146, "maithili": 146, "mai_deva": 146, "mal_mlym": 146, "mar_deva": 146, "minangkabau": 146, "min_arab": 146, "min_latn": 146, "mkd_cyrl": 146, "plateau": 146, "plt_latn": 146, "maltes": 146, "mlt_latn": 146, "meitei": 146, "mni_beng": 146, "halh": 146, "khk_cyrl": 146, "mossi": 146, "mos_latn": 146, "maori": 146, "mri_latn": 146, "mya_mymr": 146, "nld_latn": 146, "nynorsk": 146, "nno_latn": 146, "bokm\u00e5l": 146, "nob_latn": 146, "npi_deva": 146, "nso_latn": 146, "nuer": 146, "nus_latn": 146, "nyanja": 146, "nya_latn": 146, "oci_latn": 146, "west": 146, "oromo": 146, "gaz_latn": 146, "odia": 146, "ory_orya": 146, "pangasinan": 146, "pag_latn": 146, "eastern": 146, "pan_guru": 146, "papiamento": 146, "pap_latn": 146, "pes_arab": 146, "pol_latn": 146, "por_latn": 146, "dari": 146, "prs_arab": 146, "southern": 146, "pbt_arab": 146, "ayacucho": 146, "quechua": 146, "quy_latn": 146, "ron_latn": 146, "rundi": 146, "run_latn": 146, "rus_cyrl": 146, "sango": 146, "sag_latn": 146, "sanskrit": 146, "san_deva": 146, "santali": 146, "sat_olck": 146, "sicilian": 146, "scn_latn": 146, "shan": 146, "shn_mymr": 146, "sin_sinh": 146, "slk_latn": 146, "slv_latn": 146, "samoan": 146, "smo_latn": 146, "shona": 146, "sna_latn": 146, "snd_arab": 146, "som_latn": 146, "sot_latn": 146, "spa_latn": 146, "tosk": 146, "als_latn": 146, "sardinian": 146, "srd_latn": 146, "srp_cyrl": 146, "ssw_latn": 146, "sun_latn": 146, "swe_latn": 146, "swh_latn": 146, "silesian": 146, "szl_latn": 146, "tam_taml": 146, "tat_cyrl": 146, "telugu": 146, "tel_telu": 146, "tajik": 146, "tgk_cyrl": 146, "tgl_latn": 146, "tha_thai": 146, "tigrinya": 146, "tir_ethi": 146, "tamasheq": 146, "taq_latn": 146, "tifinagh": 146, "taq_tfng": 146, "tok": 146, "pisin": 146, "tpi_latn": 146, "tsn_latn": 146, "tsonga": 146, "tso_latn": 146, "turkmen": 146, "tuk_latn": 146, "tumbuka": 146, "tum_latn": 146, "tur_latn": 146, "twi": 146, "twi_latn": 146, "atla": 146, "tamazight": 146, "tzm_tfng": 146, "uyghur": 146, "uig_arab": 146, "ukr_cyrl": 146, "umbundu": 146, "umb_latn": 146, "urd_arab": 146, "uzn_latn": 146, "venetian": 146, "vec_latn": 146, "vie_latn": 146, "warai": 146, "war_latn": 146, "wol_latn": 146, "xho_latn": 146, "ydd_hebr": 146, "yor_latn": 146, "yue_hant": 146, "simplifi": 146, "zho_han": 146, "tradit": 146, "zho_hant": 146, "zsm_latn": 146, "zul_latn": 146, "driven": 146, "erad": 146, "barrier": 146, "solidifi": 146, "artifici": [146, 147, 148, 149], "intellig": [146, 147, 148, 149], "effort": 146, "coalesc": 146, "leav": 146, "vast": 146, "major": 146, "mostli": 146, "safe": 146, "ethic": 146, "consider": 146, "exploratori": 146, "interview": 146, "nativ": [146, 222], "speaker": 146, "narrow": 146, "gap": 146, "gate": 146, "expert": 146, "counteract": 146, "overfit": 146, "critic": 146, "flore": 146, "assess": [146, 147, 148], "groundwork": 146, "realiz": 146, "phi2transform": 147, "textbook": 147, "augment": 147, "websit": [147, 148], "educ": 147, "sens": [147, 148, 230], "showcas": [147, 148], "nearli": 147, "hasn": 147, "intent": [147, 182], "craft": 147, "vital": 147, "societ": 147, "phi2": 147, "skill": [147, 148, 149], "phi3transform": 148, "medium": 148, "14b": [148, 149], "lightweight": 148, "128k": 148, "underw": 148, "math": [148, 150], "big": 148, "trillion": [148, 150], "mixtral": 148, "8x7b": 148, "69": [148, 214], "mmlu": 148, "mt": 148, "bench": 148, "enough": 148, "innov": 148, "compos": 148, "heavili": 148, "8t": 148, "moreov": 148, "qwentransform": 149, "qwen1": 149, "qwen2": 149, "72b": 149, "stabl": 149, "32k": 149, "swiglu": 149, "qkv": 149, "temporarili": [149, 198], "starcodertransform": 150, "starcoder2": 150, "predecessor": 150, "starcoder2transform": 150, "bigcod": 150, "starcod": 150, "scientif": 150, "partnership": 150, "swh": 150, "stack": 150, "digit": 150, "archiv": 150, "alongsid": 150, "619": 150, "3b": 150, "15b": 150, "thoroughli": 150, "starcoderbas": 150, "twice": 150, "although": 150, "deepseekcod": 150, "openrail": 150, "transpar": 150, "regard": [150, 191], "persist": [150, 211], "swhid": 150, "def": [150, 197], "t5transform": 151, "t5": 151, "reconsid": 151, "hyper": 151, "t5_small": 151, "setstopateo": 151, "encount": 151, "setmaxnewtoken": 151, "setusecach": 151, "documentsimilarityrank": 152, "documentsimilarityrankerapproach": 152, "lsh": 152, "lib": 152, "approxim": 152, "ranker": 152, "documentsimilarityrankermodel": 152, "doc_similarity_rank": 152, "enablecach": 152, "rdd": 152, "similaritymethod": 152, "neighbour": 152, "brp": 152, "bucket": 152, "euclidean": 152, "numberofneighbour": 152, "bucketlength": 152, "hash": 152, "numhasht": 152, "visibledist": 152, "identityrank": 152, "ident": 152, "debug": 152, "setsimilaritymethod": 152, "setnumberofneighbour": 152, "setbucketlength": 152, "setnumhasht": 152, "setvisibledist": 152, "setidentityrank": 152, "document_similarity_ranker_finish": 152, "documentsimilarityrankerfinish": 152, "finished_doc_similarity_rankings_id": 152, "finished_doc_similarity_rankings_neighbor": 152, "setextractnearestneighbor": 152, "docsimrankerpipelin": 152, "1510101612": 152, "1634839239": 152, "12448559591306324": 152, "612640902": 152, "1274183715": 152, "1220122862046063": 152, "1320876223": 152, "1293373212": 152, "17848855164122393": 152, "1548374770": 152, "1719102856": 152, "23297156732534166": 152, "visibl": 152, "inclus": 152, "asretriev": 152, "rag": 152, "setaggregationmethod": 152, "wise": 152, "py": [152, 185, 186, 194, 200, 204], "ins": [152, 186, 204], "uid": [152, 186, 204], "extractnearestneighbor": 152, "getinputcol": [152, 160, 172, 173, 187], "getoutputcol": [152, 169, 171, 172, 173, 177, 180, 187], "document_similarity_rank": 153, "contextspellcheck": 154, "contextspellcheckerapproach": [154, 156, 157], "noisi": 154, "spell": [154, 155, 156, 157, 179, 184, 228, 229, 230], "contextspellcheckermodel": [154, 156, 157], "surround": [154, 183], "edit": [154, 156, 157], "subword": 154, "checker": [154, 156, 157, 228], "languagemodelclass": 154, "lm": 154, "wordmaxdist": 154, "maxcandid": 154, "casestrategi": 154, "uppercas": 154, "errorthreshold": 154, "perplex": 154, "nlm": 154, "initialr": 154, "finalr": 154, "validationfract": 154, "datapoint": 154, "vocab": 154, "compoundcount": 154, "compound": 154, "classcount": 154, "tradeoff": 154, "weighteddistpath": 154, "levenshtein": [154, 156, 157], "maxwindowlen": 154, "maxsentlen": 154, "norvigsweetingapproach": [154, 156, 157, 231], "symmetricdeleteapproach": [154, 156, 157, 231], "depth": [154, 228], "sherlock": 154, "spellcheck": [154, 156, 157], "setwordmaxdist": 154, "setepoch": 154, "setlanguagemodelclass": 154, "1650": 154, "addvocabclass": 154, "_name_": 154, "extra": [154, 156, 225], "dist": 154, "setmaxcandid": 154, "setcasestrategi": 154, "seterrorthreshold": 154, "setinitialr": 154, "setfinalr": 154, "setvalidationfract": 154, "fraction": 154, "setcompoundcount": 154, "setclasscount": 154, "settradeoff": 154, "setweighteddistpath": 154, "setmaxwindowlen": 154, "setmaxsentlen": 154, "sentlen": 154, "userdist": 154, "addregexclass": 154, "spellcheck_dl": 154, "gamma": 154, "decis": 154, "correctsymbol": 154, "comparelowcas": 154, "vocabfreq": 154, "idsvocab": 154, "vocabid": 154, "usenewlin": 154, "norvigsweetingmodel": [154, 156, 157], "symmetricdeletemodel": [154, 156, 157], "cold": 154, "dreari": 154, "white": 154, "smow": 154, "setweight": 154, "setgamma": 154, "setvocabfreq": 154, "setidsvocab": 154, "setvocabid": 154, "setclass": 154, "getwordclass": 154, "updateregexclass": 154, "updatevocabclass": 154, "setcorrectsymbol": 154, "setcomparelowcas": 154, "norvigsweet": 156, "norvig": 156, "bayesian": 156, "tokenpattern": 156, "sensit": [156, 159, 165], "doublevari": 156, "shortcircuit": 156, "frequencyprior": 156, "ham": 156, "intersect": 156, "wordsizeignor": 156, "dupslimit": 156, "duplic": 156, "reductlimit": 156, "vowelswaplimit": 156, "vowel": 156, "corrector": 156, "gummi": [156, 157], "gummic": [156, 157], "gummier": [156, 157], "gummiest": [156, 157], "gummifer": [156, 157], "basi": [156, 157], "token_pattern": [156, 157], "setdoublevari": 156, "setshortcircuit": 156, "setfrequencyprior": 156, "symmetr": [156, 157], "delet": [156, 157, 225], "damerau": [156, 157], "transpos": [156, 157], "spellcheck_norvig": 156, "symspel": [156, 157], "somtim": 156, "wrrite": [156, 157], "wordz": [156, 157], "erong": [156, 157], "sometim": [156, 157, 225], "wrong": [156, 157], "symmetricdelet": 157, "deriv": 157, "teach": 157, "maxeditdist": 157, "frequencythreshold": [157, 168], "deletesthreshold": 157, "patttern": 157, "setmaxeditdist": 157, "setfrequencythreshold": [157, 168], "setdeletesthreshold": 157, "spellcheck_sd": 157, "spmetim": 157, "employ": 158, "stopwordsclean": [159, 172, 184], "mllib": [159, 222], "stopwordsremov": 159, "cleantoken": [159, 172, 184], "stopwords_en": 159, "jvm": [159, 198], "forth": 159, "setlocal": 159, "tfnerdlgraphbuildermodel": 160, "tfnerdlgraphbuild": 160, "sethiddenunitsnumb": 160, "assertiondlapproach": 160, "medicalnerapproach": 160, "gethiddenunitsnumb": 160, "srt": 160, "getgraphfold": 160, "setgraphfil": 160, "greaph": 160, "getgraphfil": 160, "chunktoken": 161, "flatten": 161, "artist": 161, "benezar": 161, "robert": 161, "farendel": 161, "graduat": 161, "luca": 161, "chunktokenizermodel": 161, "recursivetoken": 163, "recurs": [163, 182, 194, 198, 202], "infix": [163, 165], "qam": 163, "setprefix": 163, "setinfix": 163, "recursivetokenizermodel": 163, "regextoken": [164, 168, 226], "tolowercas": [164, 168], "positionalmask": 164, "guarante": 164, "increment": 164, "flag": 164, "eventu": 164, "settolowercas": [164, 168], "nthi": 164, "setpositionalmask": 164, "tokenizedsent": 165, "rulefactori": [165, 191], "targetpattern": 165, "grab": 165, "prefixpattern": 165, "suffixpattern": 165, "infixpattern": 165, "sub": 165, "won": 165, "exceptionspath": 165, "casesensitiveexcept": 165, "contextchar": 165, "splitchar": 165, "didn": 165, "jane": 165, "boyfriend": 165, "getinfixpattern": 165, "getsuffixpattern": 165, "getprefixpattern": 165, "getcontextchar": 165, "getsplitchar": 165, "settargetpattern": 165, "setprefixpattern": 165, "setsuffixpattern": 165, "setinfixpattern": 165, "addinfixpattern": 165, "setexcept": 165, "getexcept": 165, "setexceptionspath": 165, "addexcept": 165, "setcasesensitiveexcept": 165, "getcasesensitiveexcept": 165, "addcontextchar": 165, "setsplitchar": 165, "addsplitchar": 165, "piec": 165, "token_rul": 165, "token2chunk": 166, "17": [166, 214, 216], "wordsegment": 168, "wordsegmenterapproach": 168, "correspond": [168, 205], "rr": 168, "likewis": 168, "themselv": 168, "\u4e0a\u6d77": 168, "\u8ba1\u5212": 168, "\u5230": 168, "\u672c": 168, "\u4e16\u7eaa": 168, "\u672b": 168, "\u5b9e\u73b0": 168, "\u4eba\u5747": 168, "\u56fd\u5185": 168, "\u751f\u4ea7": 168, "\u603b\u503c": 168, "\u4e94\u5343": 168, "\u7f8e\u5143": 168, "\u4e0a": 168, "\u6d77": 168, "\u8ba1": 168, "\u5212": 168, "\u4e16": 168, "\u7eaa": 168, "\u5b9e": 168, "\u73b0": 168, "\u4eba": 168, "\u5747": 168, "\u56fd": 168, "\u5185": 168, "\u751f": 168, "\u4ea7": 168, "\u603b": 168, "ll\u503c": 168, "\u4e94": 168, "\u5343": 168, "\u7f8e": 168, "\u5143": 168, "shanghai": 168, "plan": 168, "dollar": 168, "capita": 168, "gdp": 168, "wordsegmentermodel": 168, "tip": 168, "frame": 168, "frequent": 168, "ambiguitythreshold": 168, "enableregextoken": 168, "xue": 168, "nianwen": 168, "volum": 168, "februari": 168, "aclweb": 168, "aclanthologi": 168, "o03": 168, "4002": 168, "chinese_train": 168, "utf8": 168, "\u5341": 168, "\u56db": 168, "\u4e0d": 168, "\u662f": 168, "setniter": 168, "trainingdataset": 168, "setambiguitythreshold": 168, "getfrequencythreshold": 168, "getambiguitythreshold": 168, "setenableregextoken": 168, "plit": 168, "words_seg": 168, "wordseg_pku": 168, "\u7136\u800c": 168, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 168, "\u9019\u6a23": 168, "\u7684": 168, "\u8655\u7406": 168, "\u4e5f": 168, "\u884d\u751f": 168, "\u4e86": 168, "\u4e00\u4e9b": 168, "\u554f\u984c": 168, "outputcol": [169, 171, 172, 173, 174, 177, 180, 181], "inferschema": 169, "tmp": [169, 177, 198, 221], "librispeech_asr_dummy_clean_audio_array_parquet": 169, "float_arrai": 169, "chunkcol": 170, "stringtyp": 170, "setisarrai": 170, "startcol": 170, "startcolbytokenindex": 170, "isarrai": 170, "failonmiss": 170, "chunkassembl": 170, "setchunkcol": 170, "setstartcol": 170, "setstartcolbytokenindex": 170, "setfailonmiss": 170, "idcol": [171, 180], "metadatacol": [171, 180], "cleanupmod": [171, 180], "cleanup": [171, 180], "inplac": [171, 180], "inplace_ful": [171, 180], "shrink_ful": [171, 180], "each_ful": [171, 180], "delete_ful": [171, 180], "setidcol": [171, 180], "setmetadatacol": [171, 180], "usabl": 172, "lda": 172, "forest": 172, "featurecol": 172, "cleanannot": [172, 173, 174], "outputasvector": 172, "gloveembed": 172, "finished_sentence_embed": 172, "resultwiths": 172, "1619900017976761": 172, "045552998781204224": 172, "03229299932718277": 172, "685609996318": 172, "42416998744010925": 172, "1378999948501587": 172, "5717899799346924": 172, "5078899860382": 172, "08621499687433243": 172, "15772999823093414": 172, "06067200005054474": 172, "395359992980": 172, "4970499873161316": 172, "7164199948310852": 172, "40119001269340515": 172, "05761000141501": 172, "08170200139284134": 172, "7159299850463867": 172, "20677000284194946": 172, "0295659992843": 172, "valuesplitsymbol": 173, "annotationsplitsymbol": 173, "includemetadata": 173, "outputasarrai": [173, 174], "parseembeddingsvector": 173, "setvaluesplitsymbol": 173, "setannotationsplitsymbol": 173, "setincludemetadata": [173, 226], "setoutputasarrai": [173, 174], "setparseembeddingsvector": 173, "finishedresult": 174, "hasrecursivefit": [175, 176], "java_obj": [175, 201, 204], "py4j": [175, 176, 204], "java_gatewai": [175, 176, 204], "javaobject": [175, 176, 204], "recursivepipelin": [175, 176, 182, 187], "hasrecursivetransform": 176, "doc2_chunk": [178, 198], "embeddings_finish": [178, 198], "graph_finish": [178, 198], "has_recursive_fit": [178, 198], "has_recursive_transform": [178, 198], "light_pipelin": [178, 198], "prompt_assembl": [178, 198], "recursive_pipelin": [178, 198], "token_assembl": [178, 198], "lightpipelin": [179, 208, 229], "parse_embed": [179, 208], "hold": [179, 229], "principl": [179, 229], "everyth": [179, 229, 230], "fullannot": [179, 208], "happi": [179, 224, 226, 229, 230], "prp": [179, 212, 214, 224, 229, 230, 231], "rb": [179, 214, 224, 229, 230, 231], "optional_target": [179, 208], "explain_document_pipelin": [179, 197, 208, 224, 229, 230], "dict_kei": [179, 208], "fullannotateimag": [179, 208], "path_to_imag": [179, 208], "setignoreunsupport": 179, "unsupport": 179, "annotatormodel": [179, 186, 209], "getignoreunsupport": 179, "text2": 180, "document1": 180, "document2": 180, "promptassembl": 181, "assembl": 181, "role": 181, "setaddassist": 181, "At": [181, 226], "addassist": 181, "eot_id": 181, "arg": [182, 201], "kwarg": 182, "decid": 182, "behav": 182, "exactli": 182, "recursivepipelinemodel": 182, "pipeline_model": [182, 205, 221], "intend": 182, "tab": [183, 205, 221], "escap": 183, "quot": 183, "inputformat": 183, "csvdelimit": 183, "defailt": 183, "comma": 183, "escapecsvdelimit": 183, "table_csv": 183, "csv_data": 183, "input_format": 183, "setcsvdelimit": 183, "setescapecsvdelimit": 183, "tokenassembl": 184, "cleantext": 184, "opensourc": 184, "annotatorapproach": [185, 194, 205], "annotatorproperti": 187, "setlazyannot": 187, "lazili": 187, "getlazyannot": 187, "annotator_approach": [190, 198], "annotator_model": [190, 198], "annotator_properti": [190, 198], "coverage_result": [190, 198], "match_strategi": [190, 198], "recursive_annotator_approach": [190, 198], "constant": [191, 193], "hasembeddingsproperti": 192, "getdimens": 192, "setnreturnsequ": 192, "recursiveannotatorapproach": 194, "fo": 196, "map_annot": 197, "f": [197, 205, 221], "output_typ": 197, "udf": 197, "userdefinedfunct": 197, "nnp_token": 197, "lambda": 197, "epeu": 197, "map_annotations_arrai": 197, "map_annotations_strict": 197, "map_annotations_col": 197, "output_column": 197, "annotatyon_typ": 197, "chunks_df": 197, "pos_chunk": 197, "vbz": [197, 211, 231], "filter_by_annotations_col": 197, "filter_po": 197, "explode_annotations_col": 197, "annotator_java_ml": [198, 202], "annotator_transform": [198, 202], "extended_java_wrapp": [198, 202], "params_getters_sett": [198, 202], "comet": [198, 206, 223], "pretrained_pipelin": [198, 207], "resource_download": [198, 207], "pub_tat": [198, 213], "annotation_audio": 198, "annotation_imag": 198, "apple_silicon": 198, "aarch64": 198, "cache_fold": 198, "log_fold": 198, "cluster_tmp_dir": 198, "real_time_output": 198, "output_level": 198, "correctli": 198, "maco": 198, "linux": 198, "alloc": 198, "directori": [198, 209, 221], "cache_pretrain": 198, "unpack": 198, "hadoop": 198, "dir": 198, "s3": [198, 209], "hdf": 198, "dbf": 198, "annotator_log": 198, "annotatorjavamlread": 199, "mixin": 199, "javamlread": 199, "classmethod": 199, "mlreader": 199, "clazz": 199, "rl": 199, "javaparam": 199, "annotatortransform": 200, "_java_obj": 200, "javawrapp": 201, "extendedjavawrapp": 201, "new_java_arrai": 201, "pylist": 201, "java_class": 201, "todo": 201, "paramsgetterssett": 203, "getparamvalu": 203, "paramnam": 203, "setparamvalu": 203, "recursiveestim": 204, "recursivetransform": 204, "cometlogg": [205, 221], "workspac": 205, "project_nam": [205, 221], "comet_mod": [205, 221], "experiment_id": 205, "experiment_kwarg": 205, "logger": [205, 221], "practition": [205, 221], "lifecycl": [205, 221, 223], "track": [205, 221, 222], "outputlogpath": [205, 221], "onlin": [205, 221], "reus": 205, "importerror": 205, "output_log_path": [205, 221], "embd": [205, 221], "setshuffleperepoch": [205, 221], "logdir": [205, 221], "interfac": [205, 221, 229], "comet_ml": [205, 221], "log_pipeline_paramet": [205, 221], "log_visu": [205, 221], "html": [205, 221], "viz": [205, 221], "upload": 205, "colum": [205, 221], "ner_chunk": [205, 221], "sparknlp_displai": [205, 221], "nervisu": [205, 221], "idx": [205, 221], "enumer": [205, 221], "label_col": [205, 221], "document_col": [205, 221], "return_html": [205, 221], "log_metr": [205, 221], "sklearn": [205, 221], "preprocess": [205, 221], "multilabelbinar": [205, 221], "classification_report": [205, 221], "preds_df": [205, 221], "topanda": [205, 221], "mlb": [205, 221], "y_true": [205, 221], "fit_transform": [205, 221], "y_pred": [205, 221], "output_dict": [205, 221], "log_paramet": 205, "log_completed_run": 205, "log_file_path": 205, "log_asset": 205, "asset_path": 205, "asset": 205, "log_asset_data": 205, "interv": 205, "refresh": 205, "outstand": 205, "disk_loc": 208, "light_model": 208, "gather": 208, "resourcedownload": [209, 225, 230], "showpublicmodel": [209, 225], "onto_100": 209, "onto_300": 209, "ner_dl_bert": 209, "similarli": 209, "showpublicpipelin": [209, 230], "check_spel": [209, 230], "match_datetim": [209, 230], "downloadmodel": 209, "reader": 209, "j_dwn": 209, "pythonresourcedownload": 209, "obj": [209, 212], "downloadmodeldirectli": 209, "unzip": 209, "downloadpipelin": 209, "clearcach": 209, "clear": 209, "filer": 209, "showuncategorizedresourc": 209, "showavailableannot": 209, "documentcol": [211, 212], "sentencecol": [211, 212], "tokencol": 211, "conlllabelindex": 211, "conllposindex": 211, "conlldocidcol": 211, "doc_id": [211, 215], "textcol": [211, 212], "labelcol": 211, "includedocid": 211, "docstart": [211, 231], "eu": [211, 231], "np": [211, 231], "reject": [211, 231], "vp": [211, 231], "misc": [211, 231], "boycott": [211, 231], "british": [211, 231], "lamb": [211, 231], "blackburn": 211, "brussel": 211, "1996": 211, "08": 211, "storage_level": 211, "storagelevel": 211, "disk_onli": 211, "lift": 211, "uposcol": 212, "upo": 212, "xposcol": 212, "xpo": 212, "lemmacol": 212, "sent_id": 212, "sell": 212, "pron": 212, "nom": 212, "plur": 212, "_": 212, "tens": 212, "conj": 212, "cc": 212, "spaceaft": 212, "punct": 212, "conllufil": [212, 231], "conlldataset": [212, 231], "morph": 212, "Into": 212, "googleo": 212, "sconj": 212, "propn": 212, "adp": 212, "wp": 212, "vbd": [212, 214, 231], "ago": [214, 231], "posdf": 214, "61": 214, "67": [214, 215, 231], "nonexecut": 214, "76": 214, "director": 214, "81": 214, "84": 214, "outputposcol": 214, "outputdocumentcol": 214, "outputtextcol": 214, "pubtat": [215, 228], "medic": [215, 231], "titl": [215, 231], "medment": [215, 231], "25763772": [215, 231], "dctn4": [215, 231], "t116": [215, 231], "t123": [215, 231], "c4308010": [215, 231], "63": [215, 231], "chronic": [215, 231], "pseudomona": [215, 231], "aeruginosa": [215, 231], "infect": [215, 231], "t047": [215, 231], "c0854135": [215, 231], "82": [215, 231], "cystic": [215, 231], "fibrosi": [215, 231], "c0010674": [215, 231], "120": [215, 231], "124": [215, 231], "139": [215, 231], "pubtatorfil": 215, "corpus_pubtator_sampl": 215, "pubtatordataset": 215, "finished_token": [215, 226], "finished_po": 215, "finished_n": 215, "finished_token_metadata": 215, "finished_pos_metadata": 215, "finished_label_metadata": 215, "mo": 215, "ispaddedtoken": 215, "pad": 215, "spacytoannot": 216, "token_spac": 216, "sentence_end": 216, "spaci": 216, "multi_doc_token": 216, "went": 216, "night": 216, "bought": 216, "bread": 216, "54": 216, "overview": [220, 228], "workflow": 221, "dedic": 221, "account": 221, "inspect": 221, "init": 221, "sparknlp_experi": 221, "offline_directori": 221, "later": 221, "record": 222, "registri": 222, "send": 223, "mlflow": 223, "content": [224, 230], "clearli": 224, "explain_document_ml": [224, 229, 230], "approx": [224, 229, 230], "mb": [224, 229, 230], "ok": [224, 229, 230], "spearhead": 225, "produc": 225, "declar": 225, "accordingli": 225, "extra_loc": 225, "classifierdl_use_trec50": 225, "classifierdl_use_spam": 225, "column_nam": 225, "interchang": 226, "road": 226, "proce": 226, "constantli": 230, "train_po": 231, "training_conl": 231, "train_corpu": 231, "withcolumnrenam": 231, "trainingpubtatordf": 231, "corpus_pubt": 231}, "objects": {"": [[198, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [101, 0, 0, "-", "annotator"], [178, 0, 0, "-", "base"], [190, 0, 0, "-", "common"], [197, 0, 0, "-", "functions"], [202, 0, 0, "-", "internal"], [206, 0, 0, "-", "logging"], [207, 0, 0, "-", "pretrained"], [198, 3, 1, "", "start"], [213, 0, 0, "-", "training"], [218, 0, 0, "-", "upload_to_hub"], [219, 0, 0, "-", "util"], [198, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [34, 0, 0, "-", "classifier_dl"], [54, 0, 0, "-", "coref"], [58, 0, 0, "-", "cv"], [62, 0, 0, "-", "date2_chunk"], [64, 0, 0, "-", "dependency"], [66, 0, 0, "-", "document_character_text_splitter"], [67, 0, 0, "-", "document_normalizer"], [68, 0, 0, "-", "document_token_splitter"], [69, 0, 0, "-", "document_token_splitter_test"], [81, 0, 0, "-", "embeddings"], [99, 0, 0, "-", "er"], [100, 0, 0, "-", "graph_extraction"], [102, 0, 0, "-", "keyword_extraction"], [104, 0, 0, "-", "ld_dl"], [106, 0, 0, "-", "lemmatizer"], [109, 0, 0, "-", "matcher"], [113, 0, 0, "-", "n_gram_generator"], [114, 0, 0, "-", "ner"], [121, 0, 0, "-", "normalizer"], [122, 0, 0, "-", "openai"], [127, 0, 0, "-", "param"], [128, 0, 0, "-", "pos"], [130, 0, 0, "-", "sentence"], [133, 0, 0, "-", "sentiment"], [140, 0, 0, "-", "seq2seq"], [153, 0, 0, "-", "similarity"], [155, 0, 0, "-", "spell_check"], [158, 0, 0, "-", "stemmer"], [159, 0, 0, "-", "stop_words_cleaner"], [160, 0, 0, "-", "tf_ner_dl_graph_builder"], [162, 0, 0, "-", "token"], [166, 0, 0, "-", "token2_chunk"], [167, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "albert_for_zero_shot_classification"], [15, 0, 0, "-", "bart_for_zero_shot_classification"], [16, 0, 0, "-", "bert_for_multiple_choice"], [17, 0, 0, "-", "bert_for_question_answering"], [18, 0, 0, "-", "bert_for_sequence_classification"], [19, 0, 0, "-", "bert_for_token_classification"], [20, 0, 0, "-", "bert_for_zero_shot_classification"], [21, 0, 0, "-", "camembert_for_question_answering"], [22, 0, 0, "-", "camembert_for_sequence_classification"], [23, 0, 0, "-", "camembert_for_token_classification"], [24, 0, 0, "-", "camembert_for_zero_shot_classification"], [25, 0, 0, "-", "classifier_dl"], [26, 0, 0, "-", "deberta_for_question_answering"], [27, 0, 0, "-", "deberta_for_sequence_classification"], [28, 0, 0, "-", "deberta_for_token_classification"], [29, 0, 0, "-", "deberta_for_zero_shot_classification"], [30, 0, 0, "-", "distil_bert_for_question_answering"], [31, 0, 0, "-", "distil_bert_for_sequence_classification"], [32, 0, 0, "-", "distil_bert_for_token_classification"], [33, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [35, 0, 0, "-", "longformer_for_question_answering"], [36, 0, 0, "-", "longformer_for_sequence_classification"], [37, 0, 0, "-", "longformer_for_token_classification"], [38, 0, 0, "-", "mpnet_for_question_answering"], [39, 0, 0, "-", "mpnet_for_sequence_classification"], [40, 0, 0, "-", "mpnet_for_token_classification"], [41, 0, 0, "-", "multi_classifier_dl"], [42, 0, 0, "-", "roberta_for_question_answering"], [43, 0, 0, "-", "roberta_for_sequence_classification"], [44, 0, 0, "-", "roberta_for_token_classification"], [45, 0, 0, "-", "roberta_for_zero_shot_classification"], [46, 0, 0, "-", "sentiment_dl"], [47, 0, 0, "-", "tapas_for_question_answering"], [48, 0, 0, "-", "xlm_roberta_for_question_answering"], [49, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [50, 0, 0, "-", "xlm_roberta_for_token_classification"], [51, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [52, 0, 0, "-", "xlnet_for_sequence_classification"], [53, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setCoalesceSentences"], [15, 2, 1, "", "setConfigProtoBytes"], [15, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[16, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[20, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[21, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[22, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[23, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[24, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[25, 1, 1, "", "ClassifierDLApproach"], [25, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[25, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[26, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[27, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[28, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[29, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setCoalesceSentences"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[33, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[35, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[36, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[37, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[38, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[39, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[40, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[41, 1, 1, "", "MultiClassifierDLApproach"], [41, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[41, 2, 1, "", "setThreshold"], [41, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[42, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[43, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setCoalesceSentences"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[44, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[45, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"], [45, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[46, 1, 1, "", "SentimentDLApproach"], [46, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[46, 2, 1, "", "setDropout"], [46, 2, 1, "", "setThreshold"], [46, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setThreshold"], [46, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[47, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[48, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[49, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setCoalesceSentences"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[50, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[51, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setCoalesceSentences"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[52, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[52, 2, 1, "", "getClasses"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setCoalesceSentences"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[53, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[53, 2, 1, "", "getClasses"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[55, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[55, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"], [55, 2, 1, "", "setMaxSegmentLength"], [55, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[56, 0, 0, "-", "clip_for_zero_shot_classification"], [57, 0, 0, "-", "convnext_for_image_classification"], [59, 0, 0, "-", "swin_for_image_classification"], [60, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [61, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[56, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[56, 2, 1, "", "getCandidateLabels"], [56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[57, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[57, 2, 1, "", "getClasses"], [57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setCropPct"], [57, 2, 1, "", "setDoRescale"], [57, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[59, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[59, 2, 1, "", "getClasses"], [59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[60, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[61, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[61, 2, 1, "", "getClasses"], [61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[62, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[62, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[63, 0, 0, "-", "dependency_parser"], [65, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[63, 1, 1, "", "DependencyParserApproach"], [63, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[63, 2, 1, "", "setConllU"], [63, 2, 1, "", "setDependencyTreeBank"], [63, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[63, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[65, 1, 1, "", "TypedDependencyParserApproach"], [65, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[65, 2, 1, "", "setConll2009"], [65, 2, 1, "", "setConllU"], [65, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[65, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[66, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[66, 2, 1, "", "setChunkOverlap"], [66, 2, 1, "", "setChunkSize"], [66, 2, 1, "", "setExplodeSplits"], [66, 2, 1, "", "setKeepSeparators"], [66, 2, 1, "", "setPatternsAreRegex"], [66, 2, 1, "", "setSplitPatterns"], [66, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[67, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[67, 2, 1, "", "setAction"], [67, 2, 1, "", "setEncoding"], [67, 2, 1, "", "setLowercase"], [67, 2, 1, "", "setPatterns"], [67, 2, 1, "", "setPolicy"], [67, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[68, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[68, 2, 1, "", "setExplodeSplits"], [68, 2, 1, "", "setNumTokens"], [68, 2, 1, "", "setTokenOverlap"], [68, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[69, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[69, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[70, 0, 0, "-", "albert_embeddings"], [71, 0, 0, "-", "bert_embeddings"], [72, 0, 0, "-", "bert_sentence_embeddings"], [73, 0, 0, "-", "bge_embeddings"], [74, 0, 0, "-", "camembert_embeddings"], [75, 0, 0, "-", "chunk_embeddings"], [76, 0, 0, "-", "deberta_embeddings"], [77, 0, 0, "-", "distil_bert_embeddings"], [78, 0, 0, "-", "doc2vec"], [79, 0, 0, "-", "e5_embeddings"], [80, 0, 0, "-", "elmo_embeddings"], [82, 0, 0, "-", "instructor_embeddings"], [83, 0, 0, "-", "longformer_embeddings"], [84, 0, 0, "-", "mpnet_embeddings"], [85, 0, 0, "-", "mxbai_embeddings"], [86, 0, 0, "-", "nomic_embeddings"], [87, 0, 0, "-", "roberta_embeddings"], [88, 0, 0, "-", "roberta_sentence_embeddings"], [89, 0, 0, "-", "sentence_embeddings"], [90, 0, 0, "-", "snowflake_embeddings"], [91, 0, 0, "-", "uae_embeddings"], [92, 0, 0, "-", "universal_sentence_encoder"], [93, 0, 0, "-", "word2vec"], [94, 0, 0, "-", "word_embeddings"], [95, 0, 0, "-", "xlm_roberta_embeddings"], [96, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [97, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[70, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[71, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[72, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"], [72, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[73, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[74, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[75, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[75, 2, 1, "", "setPoolingStrategy"], [75, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[76, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[77, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[77, 2, 1, "", "loadSavedModel"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[78, 1, 1, "", "Doc2VecApproach"], [78, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[78, 2, 1, "", "setMaxIter"], [78, 2, 1, "", "setMaxSentenceLength"], [78, 2, 1, "", "setMinCount"], [78, 2, 1, "", "setNumPartitions"], [78, 2, 1, "", "setSeed"], [78, 2, 1, "", "setStepSize"], [78, 2, 1, "", "setVectorSize"], [78, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[78, 2, 1, "", "getVectors"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[79, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[80, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setBatchSize"], [80, 2, 1, "", "setConfigProtoBytes"], [80, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[82, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setConfigProtoBytes"], [82, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[83, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[83, 2, 1, "", "loadSavedModel"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[84, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[85, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[86, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[86, 2, 1, "", "loadSavedModel"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[87, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[87, 2, 1, "", "loadSavedModel"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[88, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[88, 2, 1, "", "loadSavedModel"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[89, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[89, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[90, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[90, 2, 1, "", "loadSavedModel"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[91, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[91, 2, 1, "", "loadSavedModel"], [91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[92, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[92, 2, 1, "", "loadSavedModel"], [92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setConfigProtoBytes"], [92, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[93, 1, 1, "", "Word2VecApproach"], [93, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[93, 2, 1, "", "setMaxIter"], [93, 2, 1, "", "setMaxSentenceLength"], [93, 2, 1, "", "setMinCount"], [93, 2, 1, "", "setNumPartitions"], [93, 2, 1, "", "setSeed"], [93, 2, 1, "", "setStepSize"], [93, 2, 1, "", "setVectorSize"], [93, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[93, 2, 1, "", "getVectors"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[94, 1, 1, "", "WordEmbeddings"], [94, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[94, 2, 1, "", "setReadCacheSize"], [94, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[94, 2, 1, "", "loadStorage"], [94, 2, 1, "", "overallCoverage"], [94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setReadCacheSize"], [94, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[95, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[95, 2, 1, "", "loadSavedModel"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[96, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[96, 2, 1, "", "loadSavedModel"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[97, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[97, 2, 1, "", "loadSavedModel"], [97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[98, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[98, 1, 1, "", "EntityRulerApproach"], [98, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[98, 2, 1, "", "setAlphabetResource"], [98, 2, 1, "", "setPatternsResource"], [98, 2, 1, "", "setSentenceMatch"], [98, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[100, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[100, 2, 1, "", "setDelimiter"], [100, 2, 1, "", "setDependencyParserModel"], [100, 2, 1, "", "setEntityTypes"], [100, 2, 1, "", "setExplodeEntities"], [100, 2, 1, "", "setIncludeEdges"], [100, 2, 1, "", "setMaxSentenceSize"], [100, 2, 1, "", "setMergeEntities"], [100, 2, 1, "", "setMergeEntitiesIOBFormat"], [100, 2, 1, "", "setMinSentenceSize"], [100, 2, 1, "", "setPosModel"], [100, 2, 1, "", "setRelationshipTypes"], [100, 2, 1, "", "setRootTokens"], [100, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[103, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[103, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[103, 2, 1, "", "getStopWords"], [103, 2, 1, "", "loadDefaultStopWords"], [103, 2, 1, "", "setMaxNGrams"], [103, 2, 1, "", "setMinNGrams"], [103, 2, 1, "", "setNKeywords"], [103, 2, 1, "", "setStopWords"], [103, 2, 1, "", "setThreshold"], [103, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[105, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[105, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setCoalesceSentences"], [105, 2, 1, "", "setConfigProtoBytes"], [105, 2, 1, "", "setThreshold"], [105, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[106, 1, 1, "", "Lemmatizer"], [106, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[106, 2, 1, "", "setDictionary"], [106, 2, 1, "", "setFormCol"], [106, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[106, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[107, 0, 0, "-", "big_text_matcher"], [108, 0, 0, "-", "date_matcher"], [110, 0, 0, "-", "multi_date_matcher"], [111, 0, 0, "-", "regex_matcher"], [112, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[107, 1, 1, "", "BigTextMatcher"], [107, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[107, 2, 1, "", "setCaseSensitive"], [107, 2, 1, "", "setEntities"], [107, 2, 1, "", "setMergeOverlapping"], [107, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[107, 2, 1, "", "loadStorage"], [107, 2, 1, "", "pretrained"], [107, 2, 1, "", "setCaseSensitive"], [107, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[108, 1, 1, "", "DateMatcher"], [108, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[108, 2, 1, "", "setAggressiveMatching"], [108, 2, 1, "", "setAnchorDateDay"], [108, 2, 1, "", "setAnchorDateMonth"], [108, 2, 1, "", "setAnchorDateYear"], [108, 2, 1, "", "setDefaultDayWhenMissing"], [108, 2, 1, "", "setInputFormats"], [108, 2, 1, "", "setOutputFormat"], [108, 2, 1, "", "setReadMonthFirst"], [108, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[110, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[111, 1, 1, "", "RegexMatcher"], [111, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[111, 2, 1, "", "setDelimiter"], [111, 2, 1, "", "setExternalRules"], [111, 2, 1, "", "setRules"], [111, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[112, 1, 1, "", "TextMatcher"], [112, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[112, 2, 1, "", "setBuildFromTokens"], [112, 2, 1, "", "setCaseSensitive"], [112, 2, 1, "", "setEntities"], [112, 2, 1, "", "setEntityValue"], [112, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[112, 2, 1, "", "pretrained"], [112, 2, 1, "", "setBuildFromTokens"], [112, 2, 1, "", "setEntityValue"], [112, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[113, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[113, 2, 1, "", "setDelimiter"], [113, 2, 1, "", "setEnableCumulative"], [113, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[115, 0, 0, "-", "ner_approach"], [116, 0, 0, "-", "ner_converter"], [117, 0, 0, "-", "ner_crf"], [118, 0, 0, "-", "ner_dl"], [119, 0, 0, "-", "ner_overwriter"], [120, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[115, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[115, 2, 1, "", "getLabelColumn"], [115, 2, 1, "", "setEntities"], [115, 2, 1, "", "setLabelColumn"], [115, 2, 1, "", "setMaxEpochs"], [115, 2, 1, "", "setMinEpochs"], [115, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[116, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[116, 2, 1, "", "setNerHasNoSchema"], [116, 2, 1, "", "setPreservePosition"], [116, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[117, 1, 1, "", "NerCrfApproach"], [117, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[117, 2, 1, "", "setC0"], [117, 2, 1, "", "setExternalFeatures"], [117, 2, 1, "", "setIncludeConfidence"], [117, 2, 1, "", "setL2"], [117, 2, 1, "", "setLossEps"], [117, 2, 1, "", "setMinW"], [117, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[117, 2, 1, "", "pretrained"], [117, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[118, 1, 1, "", "NerDLApproach"], [118, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[118, 2, 1, "", "setBatchSize"], [118, 2, 1, "", "setBestModelMetric"], [118, 2, 1, "", "setConfigProtoBytes"], [118, 2, 1, "", "setDropout"], [118, 2, 1, "", "setEnableMemoryOptimizer"], [118, 2, 1, "", "setGraphFolder"], [118, 2, 1, "", "setIncludeAllConfidenceScores"], [118, 2, 1, "", "setIncludeConfidence"], [118, 2, 1, "", "setLr"], [118, 2, 1, "", "setPo"], [118, 2, 1, "", "setUseBestModel"], [118, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[118, 2, 1, "", "pretrained"], [118, 2, 1, "", "setConfigProtoBytes"], [118, 2, 1, "", "setIncludeAllConfidenceScores"], [118, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[119, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[119, 2, 1, "", "setNerWords"], [119, 2, 1, "", "setNewNerEntity"], [119, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[120, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[120, 2, 1, "", "getClasses"], [120, 2, 1, "", "load"], [120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setEntityDefinitions"], [120, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[121, 1, 1, "", "Normalizer"], [121, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[121, 2, 1, "", "setCleanupPatterns"], [121, 2, 1, "", "setLowercase"], [121, 2, 1, "", "setMaxLength"], [121, 2, 1, "", "setMinLength"], [121, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[123, 0, 0, "-", "openai_completion"], [124, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[123, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[123, 2, 1, "", "setBestOf"], [123, 2, 1, "", "setEcho"], [123, 2, 1, "", "setFrequencyPenalty"], [123, 2, 1, "", "setLogitBias"], [123, 2, 1, "", "setLogprobs"], [123, 2, 1, "", "setMaxTokens"], [123, 2, 1, "", "setModel"], [123, 2, 1, "", "setNumberOfCompletions"], [123, 2, 1, "", "setPresencePenalty"], [123, 2, 1, "", "setStop"], [123, 2, 1, "", "setSuffix"], [123, 2, 1, "", "setTemperature"], [123, 2, 1, "", "setTopP"], [123, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[124, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[124, 2, 1, "", "setModel"], [124, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[125, 0, 0, "-", "classifier_encoder"], [126, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[125, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[125, 2, 1, "", "setBatchSize"], [125, 2, 1, "", "setConfigProtoBytes"], [125, 2, 1, "", "setLabelColumn"], [125, 2, 1, "", "setLr"], [125, 2, 1, "", "setMaxEpochs"], [125, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[126, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[126, 2, 1, "", "setEnableOutputLogs"], [126, 2, 1, "", "setEvaluationLogExtended"], [126, 2, 1, "", "setOutputLogsPath"], [126, 2, 1, "", "setTestDataset"], [126, 2, 1, "", "setValidationSplit"], [126, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[129, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[129, 1, 1, "", "PerceptronApproach"], [129, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[129, 2, 1, "", "getNIterations"], [129, 2, 1, "", "setIterations"], [129, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[129, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[131, 0, 0, "-", "sentence_detector"], [132, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[131, 1, 1, "", "SentenceDetector"], [131, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[131, 2, 1, "", "setCustomBounds"], [131, 2, 1, "", "setCustomBoundsStrategy"], [131, 2, 1, "", "setDetectLists"], [131, 2, 1, "", "setExplodeSentences"], [131, 2, 1, "", "setMaxLength"], [131, 2, 1, "", "setMinLength"], [131, 2, 1, "", "setSplitLength"], [131, 2, 1, "", "setUseAbbreviations"], [131, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[132, 1, 1, "", "SentenceDetectorDLApproach"], [132, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[132, 2, 1, "", "setEpochsNumber"], [132, 2, 1, "", "setExplodeSentences"], [132, 2, 1, "", "setImpossiblePenultimates"], [132, 2, 1, "", "setModel"], [132, 2, 1, "", "setOutputLogsPath"], [132, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setCustomBounds"], [132, 2, 1, "", "setExplodeSentences"], [132, 2, 1, "", "setImpossiblePenultimates"], [132, 2, 1, "", "setMaxLength"], [132, 2, 1, "", "setMinLength"], [132, 2, 1, "", "setModel"], [132, 2, 1, "", "setSplitLength"], [132, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[134, 0, 0, "-", "sentiment_detector"], [135, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[134, 1, 1, "", "SentimentDetector"], [134, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[134, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[135, 1, 1, "", "ViveknSentimentApproach"], [135, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[135, 2, 1, "", "setPruneCorpus"], [135, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[135, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[136, 0, 0, "-", "auto_gguf_model"], [137, 0, 0, "-", "bart_transformer"], [138, 0, 0, "-", "cpm_transformer"], [139, 0, 0, "-", "gpt2_transformer"], [141, 0, 0, "-", "llama2_transformer"], [142, 0, 0, "-", "llama3_transformer"], [143, 0, 0, "-", "m2m100_transformer"], [144, 0, 0, "-", "marian_transformer"], [145, 0, 0, "-", "mistral_transformer"], [146, 0, 0, "-", "nllb_transformer"], [147, 0, 0, "-", "phi2_transformer"], [148, 0, 0, "-", "phi3_transformer"], [149, 0, 0, "-", "qwen_transformer"], [150, 0, 0, "-", "starcoder_transformer"], [151, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[136, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[136, 2, 1, "", "getMetadata"], [136, 2, 1, "", "loadSavedModel"], [136, 2, 1, "", "pretrained"], [136, 2, 1, "", "setCachePrompt"], [136, 2, 1, "", "setChatTemplate"], [136, 2, 1, "", "setDefragmentationThreshold"], [136, 2, 1, "", "setDisableTokenIds"], [136, 2, 1, "", "setDynamicTemperatureExponent"], [136, 2, 1, "", "setDynamicTemperatureRange"], [136, 2, 1, "", "setEmbedding"], [136, 2, 1, "", "setFlashAttention"], [136, 2, 1, "", "setFrequencyPenalty"], [136, 2, 1, "", "setGpuSplitMode"], [136, 2, 1, "", "setGrammar"], [136, 2, 1, "", "setGrpAttnN"], [136, 2, 1, "", "setGrpAttnW"], [136, 2, 1, "", "setIgnoreEos"], [136, 2, 1, "", "setInputPrefix"], [136, 2, 1, "", "setInputPrefixBos"], [136, 2, 1, "", "setInputSuffix"], [136, 2, 1, "", "setLookupCacheDynamicFilePath"], [136, 2, 1, "", "setLookupCacheStaticFilePath"], [136, 2, 1, "", "setLoraAdapters"], [136, 2, 1, "", "setMainGpu"], [136, 2, 1, "", "setMinKeep"], [136, 2, 1, "", "setMinP"], [136, 2, 1, "", "setMiroStat"], [136, 2, 1, "", "setMiroStatEta"], [136, 2, 1, "", "setMiroStatTau"], [136, 2, 1, "", "setModelAlias"], [136, 2, 1, "", "setModelDraft"], [136, 2, 1, "", "setNBatch"], [136, 2, 1, "", "setNChunks"], [136, 2, 1, "", "setNCtx"], [136, 2, 1, "", "setNDraft"], [136, 2, 1, "", "setNGpuLayers"], [136, 2, 1, "", "setNGpuLayersDraft"], [136, 2, 1, "", "setNKeep"], [136, 2, 1, "", "setNPredict"], [136, 2, 1, "", "setNProbs"], [136, 2, 1, "", "setNSequences"], [136, 2, 1, "", "setNThreads"], [136, 2, 1, "", "setNThreadsBatch"], [136, 2, 1, "", "setNThreadsBatchDraft"], [136, 2, 1, "", "setNThreadsDraft"], [136, 2, 1, "", "setNUbatch"], [136, 2, 1, "", "setNoKvOffload"], [136, 2, 1, "", "setNumaStrategy"], [136, 2, 1, "", "setPSplit"], [136, 2, 1, "", "setPenalizeNl"], [136, 2, 1, "", "setPenaltyPrompt"], [136, 2, 1, "", "setPoolingType"], [136, 2, 1, "", "setPresencePenalty"], [136, 2, 1, "", "setRepeatLastN"], [136, 2, 1, "", "setRepeatPenalty"], [136, 2, 1, "", "setRopeFreqBase"], [136, 2, 1, "", "setRopeFreqScale"], [136, 2, 1, "", "setRopeScalingType"], [136, 2, 1, "", "setSamplers"], [136, 2, 1, "", "setSeed"], [136, 2, 1, "", "setStopStrings"], [136, 2, 1, "", "setSystemPrompt"], [136, 2, 1, "", "setTemperature"], [136, 2, 1, "", "setTensorSplit"], [136, 2, 1, "", "setTfsZ"], [136, 2, 1, "", "setTokenBias"], [136, 2, 1, "", "setTokenIdBias"], [136, 2, 1, "", "setTopK"], [136, 2, 1, "", "setTopP"], [136, 2, 1, "", "setTypicalP"], [136, 2, 1, "", "setUseChatTemplate"], [136, 2, 1, "", "setUseMlock"], [136, 2, 1, "", "setUseMmap"], [136, 2, 1, "", "setYarnAttnFactor"], [136, 2, 1, "", "setYarnBetaFast"], [136, 2, 1, "", "setYarnBetaSlow"], [136, 2, 1, "", "setYarnExtFactor"], [136, 2, 1, "", "setYarnOrigCtx"]], "sparknlp.annotator.seq2seq.bart_transformer": [[137, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[137, 2, 1, "", "loadSavedModel"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setBeamSize"], [137, 2, 1, "", "setCache"], [137, 2, 1, "", "setConfigProtoBytes"], [137, 2, 1, "", "setDoSample"], [137, 2, 1, "", "setIgnoreTokenIds"], [137, 2, 1, "", "setMaxOutputLength"], [137, 2, 1, "", "setMinOutputLength"], [137, 2, 1, "", "setNoRepeatNgramSize"], [137, 2, 1, "", "setRepetitionPenalty"], [137, 2, 1, "", "setTask"], [137, 2, 1, "", "setTemperature"], [137, 2, 1, "", "setTopK"], [137, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[138, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[138, 2, 1, "", "loadSavedModel"], [138, 2, 1, "", "pretrained"], [138, 2, 1, "", "setConfigProtoBytes"], [138, 2, 1, "", "setDoSample"], [138, 2, 1, "", "setIgnoreTokenIds"], [138, 2, 1, "", "setMaxOutputLength"], [138, 2, 1, "", "setMinOutputLength"], [138, 2, 1, "", "setNoRepeatNgramSize"], [138, 2, 1, "", "setRepetitionPenalty"], [138, 2, 1, "", "setTemperature"], [138, 2, 1, "", "setTopK"], [138, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[139, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[139, 2, 1, "", "loadSavedModel"], [139, 2, 1, "", "pretrained"], [139, 2, 1, "", "setConfigProtoBytes"], [139, 2, 1, "", "setDoSample"], [139, 2, 1, "", "setIgnoreTokenIds"], [139, 2, 1, "", "setMaxOutputLength"], [139, 2, 1, "", "setMinOutputLength"], [139, 2, 1, "", "setNoRepeatNgramSize"], [139, 2, 1, "", "setRepetitionPenalty"], [139, 2, 1, "", "setTask"], [139, 2, 1, "", "setTemperature"], [139, 2, 1, "", "setTopK"], [139, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[141, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[141, 2, 1, "", "loadSavedModel"], [141, 2, 1, "", "pretrained"], [141, 2, 1, "", "setConfigProtoBytes"], [141, 2, 1, "", "setDoSample"], [141, 2, 1, "", "setIgnoreTokenIds"], [141, 2, 1, "", "setMaxOutputLength"], [141, 2, 1, "", "setMinOutputLength"], [141, 2, 1, "", "setNoRepeatNgramSize"], [141, 2, 1, "", "setRepetitionPenalty"], [141, 2, 1, "", "setTemperature"], [141, 2, 1, "", "setTopK"], [141, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[142, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[142, 2, 1, "", "loadSavedModel"], [142, 2, 1, "", "pretrained"], [142, 2, 1, "", "setBeamSize"], [142, 2, 1, "", "setConfigProtoBytes"], [142, 2, 1, "", "setDoSample"], [142, 2, 1, "", "setIgnoreTokenIds"], [142, 2, 1, "", "setMaxOutputLength"], [142, 2, 1, "", "setMinOutputLength"], [142, 2, 1, "", "setNoRepeatNgramSize"], [142, 2, 1, "", "setRepetitionPenalty"], [142, 2, 1, "", "setStopTokenIds"], [142, 2, 1, "", "setTemperature"], [142, 2, 1, "", "setTopK"], [142, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[143, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[143, 2, 1, "", "loadSavedModel"], [143, 2, 1, "", "pretrained"], [143, 2, 1, "", "setBeamSize"], [143, 2, 1, "", "setConfigProtoBytes"], [143, 2, 1, "", "setDoSample"], [143, 2, 1, "", "setIgnoreTokenIds"], [143, 2, 1, "", "setMaxOutputLength"], [143, 2, 1, "", "setMinOutputLength"], [143, 2, 1, "", "setNoRepeatNgramSize"], [143, 2, 1, "", "setRepetitionPenalty"], [143, 2, 1, "", "setSrcLang"], [143, 2, 1, "", "setTemperature"], [143, 2, 1, "", "setTgtLang"], [143, 2, 1, "", "setTopK"], [143, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[144, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[144, 2, 1, "", "loadSavedModel"], [144, 2, 1, "", "pretrained"], [144, 2, 1, "", "setConfigProtoBytes"], [144, 2, 1, "", "setDoSample"], [144, 2, 1, "", "setIgnoreTokenIds"], [144, 2, 1, "", "setLangId"], [144, 2, 1, "", "setMaxInputLength"], [144, 2, 1, "", "setMaxOutputLength"], [144, 2, 1, "", "setNoRepeatNgramSize"], [144, 2, 1, "", "setRandomSeed"], [144, 2, 1, "", "setRepetitionPenalty"], [144, 2, 1, "", "setTemperature"], [144, 2, 1, "", "setTopK"], [144, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[145, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[145, 2, 1, "", "loadSavedModel"], [145, 2, 1, "", "pretrained"], [145, 2, 1, "", "setConfigProtoBytes"], [145, 2, 1, "", "setDoSample"], [145, 2, 1, "", "setIgnoreTokenIds"], [145, 2, 1, "", "setMaxOutputLength"], [145, 2, 1, "", "setMinOutputLength"], [145, 2, 1, "", "setNoRepeatNgramSize"], [145, 2, 1, "", "setRepetitionPenalty"], [145, 2, 1, "", "setTemperature"], [145, 2, 1, "", "setTopK"], [145, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[146, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[146, 2, 1, "", "loadSavedModel"], [146, 2, 1, "", "pretrained"], [146, 2, 1, "", "setBeamSize"], [146, 2, 1, "", "setConfigProtoBytes"], [146, 2, 1, "", "setDoSample"], [146, 2, 1, "", "setIgnoreTokenIds"], [146, 2, 1, "", "setMaxOutputLength"], [146, 2, 1, "", "setMinOutputLength"], [146, 2, 1, "", "setNoRepeatNgramSize"], [146, 2, 1, "", "setRepetitionPenalty"], [146, 2, 1, "", "setSrcLang"], [146, 2, 1, "", "setTemperature"], [146, 2, 1, "", "setTgtLang"], [146, 2, 1, "", "setTopK"], [146, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[147, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[147, 2, 1, "", "loadSavedModel"], [147, 2, 1, "", "pretrained"], [147, 2, 1, "", "setConfigProtoBytes"], [147, 2, 1, "", "setDoSample"], [147, 2, 1, "", "setIgnoreTokenIds"], [147, 2, 1, "", "setMaxOutputLength"], [147, 2, 1, "", "setMinOutputLength"], [147, 2, 1, "", "setNoRepeatNgramSize"], [147, 2, 1, "", "setRepetitionPenalty"], [147, 2, 1, "", "setTemperature"], [147, 2, 1, "", "setTopK"], [147, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[148, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[148, 2, 1, "", "loadSavedModel"], [148, 2, 1, "", "pretrained"], [148, 2, 1, "", "setConfigProtoBytes"], [148, 2, 1, "", "setDoSample"], [148, 2, 1, "", "setIgnoreTokenIds"], [148, 2, 1, "", "setMaxOutputLength"], [148, 2, 1, "", "setMinOutputLength"], [148, 2, 1, "", "setNoRepeatNgramSize"], [148, 2, 1, "", "setRepetitionPenalty"], [148, 2, 1, "", "setTemperature"], [148, 2, 1, "", "setTopK"], [148, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[149, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[149, 2, 1, "", "loadSavedModel"], [149, 2, 1, "", "pretrained"], [149, 2, 1, "", "setConfigProtoBytes"], [149, 2, 1, "", "setDoSample"], [149, 2, 1, "", "setIgnoreTokenIds"], [149, 2, 1, "", "setMaxOutputLength"], [149, 2, 1, "", "setMinOutputLength"], [149, 2, 1, "", "setNoRepeatNgramSize"], [149, 2, 1, "", "setRepetitionPenalty"], [149, 2, 1, "", "setTemperature"], [149, 2, 1, "", "setTopK"], [149, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[150, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[150, 2, 1, "", "loadSavedModel"], [150, 2, 1, "", "pretrained"], [150, 2, 1, "", "setConfigProtoBytes"], [150, 2, 1, "", "setDoSample"], [150, 2, 1, "", "setIgnoreTokenIds"], [150, 2, 1, "", "setMaxOutputLength"], [150, 2, 1, "", "setMinOutputLength"], [150, 2, 1, "", "setNoRepeatNgramSize"], [150, 2, 1, "", "setRepetitionPenalty"], [150, 2, 1, "", "setTemperature"], [150, 2, 1, "", "setTopK"], [150, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[151, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[151, 2, 1, "", "loadSavedModel"], [151, 2, 1, "", "pretrained"], [151, 2, 1, "", "setConfigProtoBytes"], [151, 2, 1, "", "setDoSample"], [151, 2, 1, "", "setIgnoreTokenIds"], [151, 2, 1, "", "setMaxNewTokens"], [151, 2, 1, "", "setMaxOutputLength"], [151, 2, 1, "", "setMinOutputLength"], [151, 2, 1, "", "setNoRepeatNgramSize"], [151, 2, 1, "", "setRepetitionPenalty"], [151, 2, 1, "", "setStopAtEos"], [151, 2, 1, "", "setTask"], [151, 2, 1, "", "setTemperature"], [151, 2, 1, "", "setTopK"], [151, 2, 1, "", "setTopP"], [151, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[152, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[152, 1, 1, "", "DocumentSimilarityRankerApproach"], [152, 1, 1, "", "DocumentSimilarityRankerFinisher"], [152, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[152, 2, 1, "", "asRetriever"], [152, 2, 1, "", "setAggregationMethod"], [152, 2, 1, "", "setBucketLength"], [152, 2, 1, "", "setIdentityRanking"], [152, 2, 1, "", "setNumHashTables"], [152, 2, 1, "", "setNumberOfNeighbours"], [152, 2, 1, "", "setSimilarityMethod"], [152, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[152, 2, 1, "", "getInputCols"], [152, 2, 1, "", "getOutputCols"], [152, 2, 1, "", "setExtractNearestNeighbor"], [152, 2, 1, "", "setInputCols"], [152, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[154, 0, 0, "-", "context_spell_checker"], [156, 0, 0, "-", "norvig_sweeting"], [157, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[154, 1, 1, "", "ContextSpellCheckerApproach"], [154, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[154, 2, 1, "", "addRegexClass"], [154, 2, 1, "", "addVocabClass"], [154, 2, 1, "", "setBatchSize"], [154, 2, 1, "", "setCaseStrategy"], [154, 2, 1, "", "setClassCount"], [154, 2, 1, "", "setCompoundCount"], [154, 2, 1, "", "setConfigProtoBytes"], [154, 2, 1, "", "setEpochs"], [154, 2, 1, "", "setErrorThreshold"], [154, 2, 1, "", "setFinalRate"], [154, 2, 1, "", "setGraphFolder"], [154, 2, 1, "", "setInitialRate"], [154, 2, 1, "", "setLanguageModelClasses"], [154, 2, 1, "", "setMaxCandidates"], [154, 2, 1, "", "setMaxSentLen"], [154, 2, 1, "", "setMaxWindowLen"], [154, 2, 1, "", "setMinCount"], [154, 2, 1, "", "setTradeoff"], [154, 2, 1, "", "setValidationFraction"], [154, 2, 1, "", "setWeightedDistPath"], [154, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[154, 2, 1, "", "getWordClasses"], [154, 2, 1, "", "pretrained"], [154, 2, 1, "", "setCaseStrategy"], [154, 2, 1, "", "setClasses"], [154, 2, 1, "", "setCompareLowcase"], [154, 2, 1, "", "setConfigProtoBytes"], [154, 2, 1, "", "setCorrectSymbols"], [154, 2, 1, "", "setErrorThreshold"], [154, 2, 1, "", "setGamma"], [154, 2, 1, "", "setIdsVocab"], [154, 2, 1, "", "setMaxCandidates"], [154, 2, 1, "", "setMaxWindowLen"], [154, 2, 1, "", "setTradeoff"], [154, 2, 1, "", "setVocabFreq"], [154, 2, 1, "", "setVocabIds"], [154, 2, 1, "", "setWeights"], [154, 2, 1, "", "setWordMaxDistance"], [154, 2, 1, "", "updateRegexClass"], [154, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[156, 1, 1, "", "NorvigSweetingApproach"], [156, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[156, 2, 1, "", "setCaseSensitive"], [156, 2, 1, "", "setDictionary"], [156, 2, 1, "", "setDoubleVariants"], [156, 2, 1, "", "setFrequencyPriority"], [156, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[156, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[157, 1, 1, "", "SymmetricDeleteApproach"], [157, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[157, 2, 1, "", "setDeletesThreshold"], [157, 2, 1, "", "setDictionary"], [157, 2, 1, "", "setFrequencyThreshold"], [157, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[157, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[158, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[159, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[159, 2, 1, "", "loadDefaultStopWords"], [159, 2, 1, "", "pretrained"], [159, 2, 1, "", "setCaseSensitive"], [159, 2, 1, "", "setLocale"], [159, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[160, 1, 1, "", "TFNerDLGraphBuilder"], [160, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[160, 2, 1, "", "getGraphFile"], [160, 2, 1, "", "getGraphFolder"], [160, 2, 1, "", "getHiddenUnitsNumber"], [160, 2, 1, "", "getInputCols"], [160, 2, 1, "", "getLabelColumn"], [160, 2, 1, "", "setGraphFile"], [160, 2, 1, "", "setGraphFolder"], [160, 2, 1, "", "setHiddenUnitsNumber"], [160, 2, 1, "", "setInputCols"], [160, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[161, 0, 0, "-", "chunk_tokenizer"], [163, 0, 0, "-", "recursive_tokenizer"], [164, 0, 0, "-", "regex_tokenizer"], [165, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[161, 1, 1, "", "ChunkTokenizer"], [161, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[163, 1, 1, "", "RecursiveTokenizer"], [163, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[163, 2, 1, "", "setInfixes"], [163, 2, 1, "", "setPrefixes"], [163, 2, 1, "", "setSuffixes"], [163, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[164, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[164, 2, 1, "", "setMaxLength"], [164, 2, 1, "", "setMinLength"], [164, 2, 1, "", "setPattern"], [164, 2, 1, "", "setPositionalMask"], [164, 2, 1, "", "setPreservePosition"], [164, 2, 1, "", "setToLowercase"], [164, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[165, 1, 1, "", "Tokenizer"], [165, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[165, 2, 1, "", "addContextChars"], [165, 2, 1, "", "addException"], [165, 2, 1, "", "addInfixPattern"], [165, 2, 1, "", "addSplitChars"], [165, 2, 1, "", "getCaseSensitiveExceptions"], [165, 2, 1, "", "getContextChars"], [165, 2, 1, "", "getExceptions"], [165, 2, 1, "", "getInfixPatterns"], [165, 2, 1, "", "getPrefixPattern"], [165, 2, 1, "", "getSplitChars"], [165, 2, 1, "", "getSuffixPattern"], [165, 2, 1, "", "setCaseSensitiveExceptions"], [165, 2, 1, "", "setContextChars"], [165, 2, 1, "", "setExceptions"], [165, 2, 1, "", "setExceptionsPath"], [165, 2, 1, "", "setInfixPatterns"], [165, 2, 1, "", "setMaxLength"], [165, 2, 1, "", "setMinLength"], [165, 2, 1, "", "setPrefixPattern"], [165, 2, 1, "", "setSplitChars"], [165, 2, 1, "", "setSplitPattern"], [165, 2, 1, "", "setSuffixPattern"], [165, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[165, 2, 1, "", "addSplitChars"], [165, 2, 1, "", "pretrained"], [165, 2, 1, "", "setSplitChars"], [165, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[166, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[168, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[168, 1, 1, "", "WordSegmenterApproach"], [168, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[168, 2, 1, "", "getAmbiguityThreshold"], [168, 2, 1, "", "getFrequencyThreshold"], [168, 2, 1, "", "getNIterations"], [168, 2, 1, "", "setAmbiguityThreshold"], [168, 2, 1, "", "setEnableRegexTokenizer"], [168, 2, 1, "", "setFrequencyThreshold"], [168, 2, 1, "", "setNIterations"], [168, 2, 1, "", "setPattern"], [168, 2, 1, "", "setPosColumn"], [168, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[168, 2, 1, "", "pretrained"], [168, 2, 1, "", "setEnableRegexTokenizer"], [168, 2, 1, "", "setPattern"], [168, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[169, 0, 0, "-", "audio_assembler"], [170, 0, 0, "-", "doc2_chunk"], [171, 0, 0, "-", "document_assembler"], [172, 0, 0, "-", "embeddings_finisher"], [173, 0, 0, "-", "finisher"], [174, 0, 0, "-", "graph_finisher"], [175, 0, 0, "-", "has_recursive_fit"], [176, 0, 0, "-", "has_recursive_transform"], [177, 0, 0, "-", "image_assembler"], [179, 0, 0, "-", "light_pipeline"], [180, 0, 0, "-", "multi_document_assembler"], [181, 0, 0, "-", "prompt_assembler"], [182, 0, 0, "-", "recursive_pipeline"], [183, 0, 0, "-", "table_assembler"], [184, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[169, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[169, 2, 1, "", "getOutputCol"], [169, 2, 1, "", "setInputCol"], [169, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[170, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[170, 2, 1, "", "setChunkCol"], [170, 2, 1, "", "setFailOnMissing"], [170, 2, 1, "", "setIsArray"], [170, 2, 1, "", "setLowerCase"], [170, 2, 1, "", "setStartCol"], [170, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[171, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[171, 2, 1, "", "getOutputCol"], [171, 2, 1, "", "setCleanupMode"], [171, 2, 1, "", "setIdCol"], [171, 2, 1, "", "setInputCol"], [171, 2, 1, "", "setMetadataCol"], [171, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[172, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[172, 2, 1, "", "getInputCols"], [172, 2, 1, "", "getOutputCols"], [172, 2, 1, "", "setCleanAnnotations"], [172, 2, 1, "", "setInputCols"], [172, 2, 1, "", "setOutputAsVector"], [172, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[173, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[173, 2, 1, "", "getInputCols"], [173, 2, 1, "", "getOutputCols"], [173, 2, 1, "", "setAnnotationSplitSymbol"], [173, 2, 1, "", "setCleanAnnotations"], [173, 2, 1, "", "setIncludeMetadata"], [173, 2, 1, "", "setInputCols"], [173, 2, 1, "", "setOutputAsArray"], [173, 2, 1, "", "setOutputCols"], [173, 2, 1, "", "setParseEmbeddingsVectors"], [173, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[174, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[174, 2, 1, "", "setCleanAnnotations"], [174, 2, 1, "", "setInputCol"], [174, 2, 1, "", "setOutputAsArray"], [174, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[175, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[176, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[177, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[177, 2, 1, "", "getOutputCol"], [177, 2, 1, "", "setInputCol"], [177, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[179, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[179, 2, 1, "", "annotate"], [179, 2, 1, "", "fullAnnotate"], [179, 2, 1, "", "fullAnnotateImage"], [179, 2, 1, "", "getIgnoreUnsupported"], [179, 2, 1, "", "setIgnoreUnsupported"], [179, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[180, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[180, 2, 1, "", "getOutputCols"], [180, 2, 1, "", "setCleanupMode"], [180, 2, 1, "", "setIdCol"], [180, 2, 1, "", "setInputCols"], [180, 2, 1, "", "setMetadataCol"], [180, 2, 1, "", "setOutputCols"]], "sparknlp.base.prompt_assembler": [[181, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[181, 2, 1, "", "setAddAssistant"], [181, 2, 1, "", "setChatTemplate"], [181, 2, 1, "", "setInputCol"], [181, 2, 1, "", "setOutputCol"]], "sparknlp.base.recursive_pipeline": [[182, 1, 1, "", "RecursivePipeline"], [182, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[183, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[183, 2, 1, "", "setCsvDelimiter"], [183, 2, 1, "", "setEscapeCsvDelimiter"], [183, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[184, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[184, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[185, 0, 0, "-", "annotator_approach"], [186, 0, 0, "-", "annotator_model"], [187, 0, 0, "-", "annotator_properties"], [188, 0, 0, "-", "annotator_type"], [189, 0, 0, "-", "coverage_result"], [191, 0, 0, "-", "match_strategy"], [192, 0, 0, "-", "properties"], [193, 0, 0, "-", "read_as"], [194, 0, 0, "-", "recursive_annotator_approach"], [195, 0, 0, "-", "storage"], [196, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[185, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[186, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[187, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[187, 2, 1, "", "getInputCols"], [187, 2, 1, "", "getLazyAnnotator"], [187, 2, 1, "", "getOutputCol"], [187, 2, 1, "", "setInputCols"], [187, 2, 1, "", "setLazyAnnotator"], [187, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[191, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[192, 1, 1, "", "HasEmbeddingsProperties"], [192, 3, 1, "", "setBeamSize"], [192, 3, 1, "", "setDoSample"], [192, 3, 1, "", "setMaxOutputLength"], [192, 3, 1, "", "setMinOutputLength"], [192, 3, 1, "", "setNReturnSequences"], [192, 3, 1, "", "setNoRepeatNgramSize"], [192, 3, 1, "", "setRepetitionPenalty"], [192, 3, 1, "", "setTask"], [192, 3, 1, "", "setTemperature"], [192, 3, 1, "", "setTopK"], [192, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[192, 2, 1, "", "getDimension"], [192, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[193, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[194, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[196, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[197, 3, 1, "", "explode_annotations_col"], [197, 3, 1, "", "filter_by_annotations_col"], [197, 3, 1, "", "map_annotations"], [197, 3, 1, "", "map_annotations_array"], [197, 3, 1, "", "map_annotations_col"], [197, 3, 1, "", "map_annotations_cols"], [197, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[199, 0, 0, "-", "annotator_java_ml"], [200, 0, 0, "-", "annotator_transformer"], [201, 0, 0, "-", "extended_java_wrapper"], [203, 0, 0, "-", "params_getters_setters"], [204, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[199, 1, 1, "", "AnnotatorJavaMLReadable"], [199, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[199, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[200, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[201, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[201, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[203, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[203, 2, 1, "", "getParamValue"], [203, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[204, 1, 1, "", "RecursiveEstimator"], [204, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[204, 2, 1, "", "fit"]], "sparknlp.logging": [[205, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[205, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[205, 2, 1, "", "end"], [205, 2, 1, "", "log_asset"], [205, 2, 1, "", "log_asset_data"], [205, 2, 1, "", "log_completed_run"], [205, 2, 1, "", "log_metrics"], [205, 2, 1, "", "log_parameters"], [205, 2, 1, "", "log_pipeline_parameters"], [205, 2, 1, "", "log_visualization"], [205, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[208, 0, 0, "-", "pretrained_pipeline"], [209, 0, 0, "-", "resource_downloader"], [210, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[208, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[208, 2, 1, "", "annotate"], [208, 2, 1, "", "fullAnnotate"], [208, 2, 1, "", "fullAnnotateImage"], [208, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[209, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[209, 2, 1, "", "clearCache"], [209, 2, 1, "", "downloadModel"], [209, 2, 1, "", "downloadModelDirectly"], [209, 2, 1, "", "downloadPipeline"], [209, 2, 1, "", "showAvailableAnnotators"], [209, 2, 1, "", "showPublicModels"], [209, 2, 1, "", "showPublicPipelines"], [209, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[211, 0, 0, "-", "conll"], [212, 0, 0, "-", "conllu"], [214, 0, 0, "-", "pos"], [215, 0, 0, "-", "pub_tator"], [216, 0, 0, "-", "spacy_to_annotation"], [217, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[211, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[211, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[212, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[212, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[214, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[214, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[215, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[215, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[216, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 226], "start": 0, "spark": [0, 1, 221, 226, 230], "nlp": [0, 1, 221, 230], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 221], "us": [0, 221, 230], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 214, 215, 216], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 224, 225, 226], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 196, 197, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 214, 215, 216, 220], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 129, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 214, 215, 216], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 34, 54, 58, 64, 81, 99, 101, 102, 104, 109, 114, 122, 128, 130, 133, 140, 153, 155, 162, 167, 178, 190, 198, 202, 206, 207, 213], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "albert_for_zero_shot_classif": 14, "bart_for_zero_shot_classif": 15, "bert_for_multiple_choic": 16, "bert_for_question_answ": 17, "bert_for_sequence_classif": 18, "bert_for_token_classif": 19, "bert_for_zero_shot_classif": 20, "camembert_for_question_answ": 21, "camembert_for_sequence_classif": 22, "camembert_for_token_classif": 23, "camembert_for_zero_shot_classif": 24, "exampl": [24, 29], "deberta_for_question_answ": 26, "deberta_for_sequence_classif": 27, "deberta_for_token_classif": 28, "deberta_for_zero_shot_classif": 29, "return": 29, "distil_bert_for_question_answ": 30, "distil_bert_for_sequence_classif": 31, "distil_bert_for_token_classif": 32, "distil_bert_for_zero_shot_classif": 33, "longformer_for_question_answ": 35, "longformer_for_sequence_classif": 36, "longformer_for_token_classif": 37, "mpnet_for_question_answ": 38, "mpnet_for_sequence_classif": 39, "mpnet_for_token_classif": 40, "multi_classifier_dl": 41, "roberta_for_question_answ": 42, "roberta_for_sequence_classif": 43, "roberta_for_token_classif": 44, "roberta_for_zero_shot_classif": 45, "sentiment_dl": 46, "tapas_for_question_answ": 47, "xlm_roberta_for_question_answ": 48, "xlm_roberta_for_sequence_classif": 49, "xlm_roberta_for_token_classif": 50, "xlm_roberta_for_zero_shot_classif": 51, "xlnet_for_sequence_classif": 52, "xlnet_for_token_classif": 53, "coref": [54, 55], "spanbert_coref": 55, "cv": [56, 57, 58, 59, 60, 61], "clip_for_zero_shot_classif": 56, "convnext_for_image_classif": 57, "swin_for_image_classif": 59, "vision_encoder_decoder_for_image_capt": 60, "vit_for_image_classif": 61, "date2_chunk": 62, "depend": [63, 64, 65], "dependency_pars": 63, "typed_dependency_pars": 65, "document_character_text_splitt": 66, "document_norm": 67, "document_token_splitt": 68, "document_token_splitter_test": 69, "embed": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "albert_embed": 70, "bert_embed": 71, "bert_sentence_embed": 72, "bge_embed": 73, "camembert_embed": 74, "chunk_embed": 75, "deberta_embed": 76, "distil_bert_embed": 77, "doc2vec": 78, "e5_embed": 79, "elmo_embed": 80, "instructor_embed": 82, "longformer_embed": 83, "mpnet_embed": 84, "mxbai_embed": 85, "nomic_embed": 86, "roberta_embed": 87, "roberta_sentence_embed": 88, "sentence_embed": 89, "snowflake_embed": 90, "uae_embed": 91, "universal_sentence_encod": 92, "word2vec": 93, "word_embed": 94, "xlm_roberta_embed": 95, "xlm_roberta_sentence_embed": 96, "xlnet_embed": 97, "er": [98, 99], "entity_rul": 98, "graph_extract": 100, "subpackag": [101, 198], "keyword_extract": [102, 103], "yake_keyword_extract": 103, "ld_dl": [104, 105], "language_detector_dl": 105, "lemmat": 106, "matcher": [107, 108, 109, 110, 111, 112], "big_text_match": 107, "date_match": 108, "multi_date_match": 110, "regex_match": 111, "text_match": 112, "n_gram_gener": 113, "ner": [114, 115, 116, 117, 118, 119, 120], "ner_approach": 115, "ner_convert": 116, "ner_crf": 117, "ner_dl": 118, "ner_overwrit": 119, "zero_shot_ner_model": 120, "normal": 121, "openai": [122, 123, 124], "openai_complet": 123, "openai_embed": 124, "param": [125, 126, 127], "classifier_encod": 125, "evaluation_dl_param": 126, "po": [128, 129, 214, 231], "perceptron": 129, "sentenc": [130, 131, 132, 226], "sentence_detector": 131, "sentence_detector_dl": 132, "sentiment": [133, 134, 135], "sentiment_detector": 134, "vivekn_senti": 135, "seq2seq": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "auto_gguf_model": 136, "bart_transform": 137, "cpm_transform": 138, "gpt2_transform": 139, "llama2_transform": 141, "llama3_transform": 142, "m2m100_transform": 143, "marian_transform": 144, "mistral_transform": 145, "nllb_transform": 146, "phi2_transform": 147, "phi3_transform": 148, "qwen_transform": 149, "starcoder_transform": 150, "t5_transform": 151, "similar": [152, 153], "document_similarity_rank": 152, "spell_check": [154, 155, 156, 157], "context_spell_check": 154, "norvig_sweet": 156, "symmetric_delet": 157, "stemmer": 158, "stop_words_clean": 159, "tf_ner_dl_graph_build": 160, "token": [161, 162, 163, 164, 165, 226], "chunk_token": 161, "recursive_token": 163, "regex_token": 164, "token2_chunk": 166, "w": [167, 168], "word_segment": 168, "base": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "audio_assembl": 169, "doc2_chunk": 170, "document_assembl": 171, "embeddings_finish": 172, "finish": [173, 226], "graph_finish": 174, "has_recursive_fit": 175, "has_recursive_transform": 176, "image_assembl": 177, "light_pipelin": 179, "multi_document_assembl": 180, "prompt_assembl": 181, "recursive_pipelin": 182, "table_assembl": 183, "token_assembl": 184, "common": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 225], "annotator_approach": 185, "annotator_model": 186, "annotator_properti": 187, "annotator_typ": 188, "coverage_result": 189, "match_strategi": 191, "properti": 192, "function": [192, 196, 197, 198, 225, 227], "read_a": 193, "recursive_annotator_approach": 194, "storag": 195, "util": [196, 210, 219], "packag": 198, "intern": [199, 200, 201, 202, 203, 204], "annotator_java_ml": 199, "annotator_transform": 200, "extended_java_wrapp": 201, "params_getters_sett": 203, "recurs": 204, "log": [205, 206, 221, 223], "comet": [205, 221], "pretrain": [207, 208, 209, 210, 225, 229, 230], "pretrained_pipelin": 208, "resource_download": 209, "train": [211, 212, 213, 214, 215, 216, 217, 231], "conll": [211, 231], "conllu": [212, 231], "pub_tat": 215, "spacy_to_annot": 216, "tfgraph": 217, "upload_to_hub": 218, "api": 220, "refer": 220, "A": 221, "meta": 221, "machin": [221, 222], "learn": [221, 222], "platform": [221, 222], "pipelin": [221, 226, 229, 230], "paramet": 221, "evalu": 221, "metric": 221, "visual": 221, "run": 221, "an": 221, "offlin": 221, "experi": 221, "mlflow": 222, "lifecycl": 222, "third": 223, "parti": 223, "project": 223, "approach": 225, "model": 225, "note": 225, "avail": [225, 230], "set": 226, "up": 226, "your": 226, "own": 226, "type": 226, "necessari": 226, "import": 226, "construct": 226, "documentassembl": 226, "data": 226, "detect": 226, "out": 226, "put": 226, "all": 226, "togeth": 226, "ml": [226, 230], "helper": 227, "user": 228, "guid": 228, "light": 229, "convert": 229, "pipelinemodel": 229, "download": 230, "As": 230, "lightpipelin": 230, "load": 231, "dataset": 231, "spell": 231, "checker": 231, "pubtat": 231}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [221, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [100, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [154, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [214, "classes"], [215, "classes"], [216, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [34, "submodules"], [54, "submodules"], [58, "submodules"], [64, "submodules"], [81, "submodules"], [99, "submodules"], [101, "submodules"], [102, "submodules"], [104, "submodules"], [109, "submodules"], [114, "submodules"], [122, "submodules"], [128, "submodules"], [130, "submodules"], [133, "submodules"], [140, "submodules"], [153, "submodules"], [155, "submodules"], [162, "submodules"], [167, "submodules"], [178, "submodules"], [190, "submodules"], [198, "submodules"], [202, "submodules"], [206, "submodules"], [207, "submodules"], [213, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[24, "examples"], [29, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[25, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[29, "returns"], [29, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[41, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[43, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[44, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[46, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[47, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[51, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[52, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[53, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[54, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[55, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[56, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[57, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[58, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[59, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[60, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[61, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[62, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[63, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[64, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[65, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[66, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[67, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[68, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[69, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[70, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[71, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[72, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[73, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[74, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[75, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[76, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[77, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[78, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[79, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[80, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[81, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[82, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[83, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[84, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[85, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[86, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[87, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[89, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[90, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[91, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[92, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[93, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[94, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[95, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[96, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[97, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[98, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[99, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[100, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[101, "module-sparknlp.annotator"]], "Subpackages": [[101, "subpackages"], [198, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[102, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[103, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[104, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[105, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[106, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[107, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[108, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[109, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[110, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[111, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[112, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[113, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[114, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[115, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[116, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[117, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[118, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[119, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[120, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[121, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[122, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[123, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[124, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[125, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[126, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[127, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[128, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[129, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[130, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[131, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[132, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[133, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[134, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[135, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[136, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[137, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[138, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[139, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[140, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[141, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[142, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[143, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[144, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[145, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[146, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[147, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[148, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[149, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[150, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[151, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[152, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[153, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[154, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[155, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[156, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[157, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[158, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[159, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[160, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[161, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[162, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[163, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[164, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[165, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[166, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[167, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[168, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[169, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[170, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[171, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[172, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[173, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[174, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[175, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[176, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[177, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[178, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[179, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[180, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler": [[181, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline": [[182, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[183, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[184, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[185, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[186, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[187, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[188, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[189, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[190, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[191, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[192, "module-sparknlp.common.properties"]], "Functions": [[192, "functions"], [196, "functions"], [197, "functions"], [198, "functions"]], "sparknlp.common.read_as": [[193, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[194, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[195, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[196, "module-sparknlp.common.utils"]], "sparknlp.functions": [[197, "module-sparknlp.functions"]], "sparknlp": [[198, "module-sparknlp"]], "Package Contents": [[198, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[199, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[200, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[201, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[202, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[203, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[204, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[205, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[206, "module-sparknlp.logging"]], "sparknlp.pretrained": [[207, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[208, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[209, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[210, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[211, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[212, "module-sparknlp.training.conllu"]], "sparknlp.training": [[213, "module-sparknlp.training"]], "sparknlp.training.pos": [[214, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[215, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[216, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[217, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[218, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[219, "module-sparknlp.util"]], "API Reference": [[220, "api-reference"]], "Modules": [[220, "modules"]], "Comet - A meta machine learning platform": [[221, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[221, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[221, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[221, "logging-evaluation-metrics"]], "Logging Visualizations": [[221, "logging-visualizations"]], "Running An Offline Experiment": [[221, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[222, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[223, "third-party-projects"]], "Logging": [[223, "logging"]], "Annotation": [[224, "annotation"]], "Annotators": [[225, "annotators"]], "Annotator Approaches": [[225, "annotator-approaches"]], "Annotator Models": [[225, "annotator-models"]], "Note": [[225, "note"]], "Pretrained Models": [[225, "pretrained-models"]], "Common Functions": [[225, "common-functions"]], "Available Annotators": [[225, "available-annotators"]], "Setting up your own pipeline": [[226, "setting-up-your-own-pipeline"]], "Annotator types": [[226, "annotator-types"]], "Necessary imports": [[226, "necessary-imports"]], "Constructing the Pipeline": [[226, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[226, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[226, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[226, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[226, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[227, "helper-functions"]], "User Guide": [[228, "user-guide"]], "Light Pipelines": [[229, "light-pipelines"]], "Converting PipelineModels": [[229, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[229, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[230, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[230, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[230, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[230, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[230, "available-pipelines"]], "Loading datasets for training": [[231, "loading-datasets-for-training"]], "POS Dataset": [[231, "pos-dataset"]], "CoNLL Dataset": [[231, "conll-dataset"]], "CoNLLU Dataset": [[231, "conllu-dataset"]], "Spell Checkers Dataset": [[231, "spell-checkers-dataset"]], "PubTator Dataset": [[231, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [22, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [23, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [25, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [26, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [34, "module-sparknlp.annotator.classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [42, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [43, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [44, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [46, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [47, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [51, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [52, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [53, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [54, "module-sparknlp.annotator.coref"], [55, "module-sparknlp.annotator.coref.spanbert_coref"], [56, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [57, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [58, "module-sparknlp.annotator.cv"], [59, "module-sparknlp.annotator.cv.swin_for_image_classification"], [60, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [61, "module-sparknlp.annotator.cv.vit_for_image_classification"], [62, "module-sparknlp.annotator.date2_chunk"], [63, "module-sparknlp.annotator.dependency.dependency_parser"], [64, "module-sparknlp.annotator.dependency"], [65, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [66, "module-sparknlp.annotator.document_character_text_splitter"], [67, "module-sparknlp.annotator.document_normalizer"], [68, "module-sparknlp.annotator.document_token_splitter"], [69, "module-sparknlp.annotator.document_token_splitter_test"], [70, "module-sparknlp.annotator.embeddings.albert_embeddings"], [71, "module-sparknlp.annotator.embeddings.bert_embeddings"], [72, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [73, "module-sparknlp.annotator.embeddings.bge_embeddings"], [74, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [75, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [76, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [77, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [78, "module-sparknlp.annotator.embeddings.doc2vec"], [79, "module-sparknlp.annotator.embeddings.e5_embeddings"], [80, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [81, "module-sparknlp.annotator.embeddings"], [82, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [83, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [84, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [85, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [86, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [87, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [88, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [89, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [90, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [91, "module-sparknlp.annotator.embeddings.uae_embeddings"], [92, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [93, "module-sparknlp.annotator.embeddings.word2vec"], [94, "module-sparknlp.annotator.embeddings.word_embeddings"], [95, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [96, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [97, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [98, "module-sparknlp.annotator.er.entity_ruler"], [99, "module-sparknlp.annotator.er"], [100, "module-sparknlp.annotator.graph_extraction"], [101, "module-sparknlp.annotator"], [102, "module-sparknlp.annotator.keyword_extraction"], [103, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [104, "module-sparknlp.annotator.ld_dl"], [105, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [106, "module-sparknlp.annotator.lemmatizer"], [107, "module-sparknlp.annotator.matcher.big_text_matcher"], [108, "module-sparknlp.annotator.matcher.date_matcher"], [109, "module-sparknlp.annotator.matcher"], [110, "module-sparknlp.annotator.matcher.multi_date_matcher"], [111, "module-sparknlp.annotator.matcher.regex_matcher"], [112, "module-sparknlp.annotator.matcher.text_matcher"], [113, "module-sparknlp.annotator.n_gram_generator"], [114, "module-sparknlp.annotator.ner"], [115, "module-sparknlp.annotator.ner.ner_approach"], [116, "module-sparknlp.annotator.ner.ner_converter"], [117, "module-sparknlp.annotator.ner.ner_crf"], [118, "module-sparknlp.annotator.ner.ner_dl"], [119, "module-sparknlp.annotator.ner.ner_overwriter"], [120, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [121, "module-sparknlp.annotator.normalizer"], [122, "module-sparknlp.annotator.openai"], [123, "module-sparknlp.annotator.openai.openai_completion"], [124, "module-sparknlp.annotator.openai.openai_embeddings"], [125, "module-sparknlp.annotator.param.classifier_encoder"], [126, "module-sparknlp.annotator.param.evaluation_dl_params"], [127, "module-sparknlp.annotator.param"], [128, "module-sparknlp.annotator.pos"], [129, "module-sparknlp.annotator.pos.perceptron"], [130, "module-sparknlp.annotator.sentence"], [131, "module-sparknlp.annotator.sentence.sentence_detector"], [132, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [133, "module-sparknlp.annotator.sentiment"], [134, "module-sparknlp.annotator.sentiment.sentiment_detector"], [135, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [136, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [137, "module-sparknlp.annotator.seq2seq.bart_transformer"], [138, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [139, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [140, "module-sparknlp.annotator.seq2seq"], [141, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [142, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [143, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [144, "module-sparknlp.annotator.seq2seq.marian_transformer"], [145, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [146, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [147, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [148, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [149, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [150, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [151, "module-sparknlp.annotator.seq2seq.t5_transformer"], [152, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [153, "module-sparknlp.annotator.similarity"], [154, "module-sparknlp.annotator.spell_check.context_spell_checker"], [155, "module-sparknlp.annotator.spell_check"], [156, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [157, "module-sparknlp.annotator.spell_check.symmetric_delete"], [158, "module-sparknlp.annotator.stemmer"], [159, "module-sparknlp.annotator.stop_words_cleaner"], [160, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [161, "module-sparknlp.annotator.token.chunk_tokenizer"], [162, "module-sparknlp.annotator.token"], [163, "module-sparknlp.annotator.token.recursive_tokenizer"], [164, "module-sparknlp.annotator.token.regex_tokenizer"], [165, "module-sparknlp.annotator.token.tokenizer"], [166, "module-sparknlp.annotator.token2_chunk"], [167, "module-sparknlp.annotator.ws"], [168, "module-sparknlp.annotator.ws.word_segmenter"], [169, "module-sparknlp.base.audio_assembler"], [170, "module-sparknlp.base.doc2_chunk"], [171, "module-sparknlp.base.document_assembler"], [172, "module-sparknlp.base.embeddings_finisher"], [173, "module-sparknlp.base.finisher"], [174, "module-sparknlp.base.graph_finisher"], [175, "module-sparknlp.base.has_recursive_fit"], [176, "module-sparknlp.base.has_recursive_transform"], [177, "module-sparknlp.base.image_assembler"], [178, "module-sparknlp.base"], [179, "module-sparknlp.base.light_pipeline"], [180, "module-sparknlp.base.multi_document_assembler"], [181, "module-sparknlp.base.prompt_assembler"], [182, "module-sparknlp.base.recursive_pipeline"], [183, "module-sparknlp.base.table_assembler"], [184, "module-sparknlp.base.token_assembler"], [185, "module-sparknlp.common.annotator_approach"], [186, "module-sparknlp.common.annotator_model"], [187, "module-sparknlp.common.annotator_properties"], [188, "module-sparknlp.common.annotator_type"], [189, "module-sparknlp.common.coverage_result"], [190, "module-sparknlp.common"], [191, "module-sparknlp.common.match_strategy"], [192, "module-sparknlp.common.properties"], [193, "module-sparknlp.common.read_as"], [194, "module-sparknlp.common.recursive_annotator_approach"], [195, "module-sparknlp.common.storage"], [196, "module-sparknlp.common.utils"], [197, "module-sparknlp.functions"], [198, "module-sparknlp"], [199, "module-sparknlp.internal.annotator_java_ml"], [200, "module-sparknlp.internal.annotator_transformer"], [201, "module-sparknlp.internal.extended_java_wrapper"], [202, "module-sparknlp.internal"], [203, "module-sparknlp.internal.params_getters_setters"], [204, "module-sparknlp.internal.recursive"], [205, "module-sparknlp.logging.comet"], [206, "module-sparknlp.logging"], [207, "module-sparknlp.pretrained"], [208, "module-sparknlp.pretrained.pretrained_pipeline"], [209, "module-sparknlp.pretrained.resource_downloader"], [210, "module-sparknlp.pretrained.utils"], [211, "module-sparknlp.training.conll"], [212, "module-sparknlp.training.conllu"], [213, "module-sparknlp.training"], [214, "module-sparknlp.training.pos"], [215, "module-sparknlp.training.pub_tator"], [216, "module-sparknlp.training.spacy_to_annotation"], [217, "module-sparknlp.training.tfgraphs"], [218, "module-sparknlp.upload_to_hub"], [219, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "getclasses() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "pretrained() (albertforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "loadsavedmodel() (bertformultiplechoice static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "pretrained() (bertformultiplechoice static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "getclasses() (camembertforzeroshotclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "pretrained() (camembertforzeroshotclassification static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[25, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "getclasses() (debertaforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (debertaforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "pretrained() (mpnetforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "getclasses() (mpnetforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "pretrained() (mpnetforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "getclasses() (mpnetfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "pretrained() (mpnetfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[41, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[43, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[44, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[46, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[47, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[47, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[47, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[47, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[51, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[52, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[53, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[54, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[55, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[56, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[56, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[56, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[56, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[56, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[57, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[57, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[58, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[59, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[59, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[59, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[59, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[59, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[59, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[60, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[60, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[60, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[60, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[60, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[61, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[61, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[61, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[61, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[61, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[61, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[62, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[62, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[62, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[63, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[63, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[63, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[63, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[63, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[63, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[63, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[64, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[65, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[65, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[65, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[65, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[65, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[65, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[65, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[66, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[66, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[67, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[67, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[68, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[68, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[68, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[68, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[68, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[68, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[69, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[69, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[69, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[70, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[70, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[70, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[70, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[70, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[71, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[71, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[71, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[71, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[71, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[72, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[72, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[72, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[72, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[72, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[72, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[73, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[73, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[73, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[73, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[73, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[74, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[74, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[74, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[74, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[74, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[75, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[75, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[75, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[75, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[76, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[76, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[76, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[76, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[76, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[77, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[77, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[77, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[77, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[77, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[78, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[78, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[79, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[79, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[79, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[79, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[79, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[80, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[80, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[80, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[80, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[80, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[80, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[80, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[81, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[82, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[82, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[82, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[82, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[82, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[82, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[83, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[83, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[83, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[83, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[83, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[84, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[84, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[84, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[84, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[84, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[85, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "loadsavedmodel() (mxbaiembeddings static method)": [[85, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "pretrained() (mxbaiembeddings static method)": [[85, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[85, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[85, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[86, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "loadsavedmodel() (nomicembeddings static method)": [[86, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "pretrained() (nomicembeddings static method)": [[86, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[86, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[86, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[87, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[87, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[87, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[87, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[87, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[88, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[88, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[88, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[88, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[89, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[89, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[89, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[90, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "loadsavedmodel() (snowflakeembeddings static method)": [[90, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "pretrained() (snowflakeembeddings static method)": [[90, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[90, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[90, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[91, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "loadsavedmodel() (uaeembeddings static method)": [[91, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "pretrained() (uaeembeddings static method)": [[91, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[91, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[91, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[92, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[92, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[92, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[92, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[92, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[92, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[93, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[93, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[94, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[94, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[95, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[96, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[96, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[96, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[96, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[96, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[97, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[97, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[97, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[97, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[97, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[98, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[98, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[98, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[98, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[98, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[98, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[98, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[99, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[100, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[100, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[101, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[102, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[103, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[103, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[104, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[105, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[105, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[105, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[105, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[105, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[105, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[105, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[106, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[106, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[106, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[106, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[106, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[106, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[106, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[107, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[107, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setaggressivematching() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[108, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[108, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[109, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[110, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[110, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[111, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[111, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[111, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[111, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[111, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[111, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[111, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[112, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[112, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[113, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[113, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[113, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[113, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[113, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[114, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[115, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[115, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[116, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[116, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[116, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[116, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[116, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[117, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[117, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[118, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[118, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[119, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[119, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[119, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[119, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[119, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[120, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[120, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[120, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[120, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[120, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[120, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[120, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[121, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[121, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[121, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[121, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[121, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[121, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[121, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[121, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[122, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[123, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[123, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[124, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[124, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[124, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[124, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[125, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[125, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[126, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[126, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[127, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[128, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[129, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[129, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[129, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[129, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[129, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[129, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[129, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[130, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[131, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[131, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[132, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[132, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[133, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[134, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[134, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[134, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[134, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[135, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[135, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[135, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[135, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[135, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[135, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "getmetadata() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.getMetadata"]], "loadsavedmodel() (autoggufmodel static method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "pretrained() (autoggufmodel static method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "setcacheprompt() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setCachePrompt"]], "setchattemplate() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setChatTemplate"]], "setdefragmentationthreshold() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDefragmentationThreshold"]], "setdisabletokenids() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDisableTokenIds"]], "setdynamictemperatureexponent() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDynamicTemperatureRange"]], "setembedding() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setEmbedding"]], "setflashattention() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setFlashAttention"]], "setfrequencypenalty() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setFrequencyPenalty"]], "setgpusplitmode() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGpuSplitMode"]], "setgrammar() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrammar"]], "setgrpattnn() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrpAttnN"]], "setgrpattnw() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrpAttnW"]], "setignoreeos() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setIgnoreEos"]], "setinputprefix() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputPrefix"]], "setinputprefixbos() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputPrefixBos"]], "setinputsuffix() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputSuffix"]], "setlookupcachedynamicfilepath() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLookupCacheStaticFilePath"]], "setloraadapters() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLoraAdapters"]], "setmaingpu() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMainGpu"]], "setminkeep() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMinKeep"]], "setminp() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMinP"]], "setmirostat() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStat"]], "setmirostateta() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStatEta"]], "setmirostattau() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStatTau"]], "setmodelalias() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setModelAlias"]], "setmodeldraft() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setModelDraft"]], "setnbatch() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNBatch"]], "setnchunks() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNChunks"]], "setnctx() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNCtx"]], "setndraft() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNDraft"]], "setngpulayers() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNGpuLayers"]], "setngpulayersdraft() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNGpuLayersDraft"]], "setnkeep() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNKeep"]], "setnpredict() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNPredict"]], "setnprobs() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNProbs"]], "setnsequences() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNSequences"]], "setnthreads() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreads"]], "setnthreadsbatch() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsBatch"]], "setnthreadsbatchdraft() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsBatchDraft"]], "setnthreadsdraft() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsDraft"]], "setnubatch() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNUbatch"]], "setnokvoffload() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNoKvOffload"]], "setnumastrategy() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNumaStrategy"]], "setpsplit() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPSplit"]], "setpenalizenl() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPenalizeNl"]], "setpenaltyprompt() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPenaltyPrompt"]], "setpoolingtype() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPoolingType"]], "setpresencepenalty() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPresencePenalty"]], "setrepeatlastn() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRepeatLastN"]], "setrepeatpenalty() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRepeatPenalty"]], "setropefreqbase() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeFreqBase"]], "setropefreqscale() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeFreqScale"]], "setropescalingtype() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeScalingType"]], "setsamplers() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSamplers"]], "setseed() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSeed"]], "setstopstrings() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setStopStrings"]], "setsystemprompt() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSystemPrompt"]], "settemperature() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTemperature"]], "settensorsplit() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTensorSplit"]], "settfsz() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTfsZ"]], "settokenbias() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTokenBias"]], "settokenidbias() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTokenIdBias"]], "settopk() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTopK"]], "settopp() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTopP"]], "settypicalp() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTypicalP"]], "setusechattemplate() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseChatTemplate"]], "setusemlock() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseMlock"]], "setusemmap() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseMmap"]], "setyarnattnfactor() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnAttnFactor"]], "setyarnbetafast() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnBetaFast"]], "setyarnbetaslow() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnBetaSlow"]], "setyarnextfactor() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnExtFactor"]], "setyarnorigctx() (autoggufmodel method)": [[136, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnOrigCtx"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[136, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[137, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[137, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "loadsavedmodel() (cpmtransformer static method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "pretrained() (cpmtransformer static method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "setconfigprotobytes() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[138, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[138, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[139, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[139, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[140, "module-sparknlp.annotator.seq2seq"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "loadsavedmodel() (llama2transformer static method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "pretrained() (llama2transformer static method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "setconfigprotobytes() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[141, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[141, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "loadsavedmodel() (llama3transformer static method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "pretrained() (llama3transformer static method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "setbeamsize() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[142, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[142, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "loadsavedmodel() (m2m100transformer static method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "pretrained() (m2m100transformer static method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "setbeamsize() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[143, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[143, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[144, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[144, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "loadsavedmodel() (mistraltransformer static method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "pretrained() (mistraltransformer static method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "setconfigprotobytes() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[145, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[145, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "loadsavedmodel() (nllbtransformer static method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "pretrained() (nllbtransformer static method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "setbeamsize() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[146, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[146, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "loadsavedmodel() (phi2transformer static method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "pretrained() (phi2transformer static method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "setconfigprotobytes() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[147, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[147, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "loadsavedmodel() (phi3transformer static method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "pretrained() (phi3transformer static method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "setconfigprotobytes() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[148, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[148, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "loadsavedmodel() (qwentransformer static method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "pretrained() (qwentransformer static method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "setconfigprotobytes() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[149, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[149, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "loadsavedmodel() (starcodertransformer static method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "pretrained() (starcodertransformer static method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "setconfigprotobytes() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[150, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[150, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[151, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[151, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "asretriever() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[152, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[152, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[153, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[154, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[154, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[155, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[156, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[156, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[157, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[157, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[158, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[158, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[159, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[159, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[159, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[159, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[159, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[159, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[159, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[160, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[160, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[161, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[161, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[161, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[162, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[163, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[163, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[163, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[163, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[163, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[163, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[163, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[164, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[164, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[165, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[165, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[165, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[165, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[165, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[165, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[165, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[166, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[166, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[167, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[168, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[168, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[169, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[169, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[169, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[169, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[169, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[170, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[170, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[171, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[171, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[171, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[171, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[171, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[171, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[171, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[171, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[172, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[172, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[173, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[173, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[173, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[174, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[174, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[174, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[174, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[174, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[174, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[175, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[175, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[176, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[176, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[177, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[177, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[177, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[177, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[177, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[178, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[179, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[179, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[179, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[179, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[179, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[179, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[179, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[179, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[180, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[180, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[181, "sparknlp.base.prompt_assembler.PromptAssembler"]], "setaddassistant() (promptassembler method)": [[181, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[181, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[181, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[181, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "sparknlp.base.prompt_assembler": [[181, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[182, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[182, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[182, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[183, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[183, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[183, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[183, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[183, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[184, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[184, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[184, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[185, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[185, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[186, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[186, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[187, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[187, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[188, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[189, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[190, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[191, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[191, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[192, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[192, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[192, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[192, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[192, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[193, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[193, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[194, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[194, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[195, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[196, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[196, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[197, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[197, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[197, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[197, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[197, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[197, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[197, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[197, "module-sparknlp.functions"]], "sparknlp": [[198, "module-sparknlp"]], "start() (in module sparknlp)": [[198, "sparknlp.start"]], "version() (in module sparknlp)": [[198, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[199, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[199, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[199, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[199, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[200, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[200, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[201, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[201, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[201, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[202, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[203, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[203, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[203, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[203, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[204, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[204, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[204, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[204, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[205, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[205, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[205, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[206, "module-sparknlp.logging"]], "sparknlp.pretrained": [[207, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[208, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[208, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[208, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[208, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[208, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[208, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[209, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[209, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[210, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[211, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[211, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[211, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[212, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[212, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[212, "module-sparknlp.training.conllu"]], "sparknlp.training": [[213, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[214, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[214, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[214, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[215, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[215, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[215, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[216, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[216, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[217, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[218, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[219, "module-sparknlp.util"]]}})