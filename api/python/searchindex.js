Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token2_chunk/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token2_chunk/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "thi": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 129, 130, 131, 133, 134, 136, 137, 139, 142, 144, 145, 146, 147, 148, 149, 151, 152, 156, 157, 163, 164, 168, 169, 170, 173, 174, 179, 181, 185, 186, 189, 190, 191, 193, 194, 195], "can": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 91, 96, 97, 98, 99, 100, 106, 108, 109, 111, 113, 114, 116, 117, 120, 122, 123, 125, 133, 136, 137, 145, 146, 147, 148, 161, 170, 173, 174, 176, 177, 179, 186, 188, 190, 191, 193, 194, 195, 196], "quick": [0, 186, 191], "refer": [0, 1, 5, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 83, 100, 108, 109, 112, 113, 114, 116, 117, 120, 122, 123, 133, 135, 136, 145, 190, 192, 193], "how": [0, 1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 68, 69, 71, 75, 77, 78, 80, 85, 86, 87, 91, 92, 96, 97, 98, 101, 103, 108, 111, 122, 123, 130, 131, 133, 136, 139, 145, 156, 158, 161, 163, 176, 177, 181, 186, 190, 195], "set": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 149, 151, 152, 157, 161, 163, 168, 169, 170, 174, 176, 186, 190, 193, 194], "up": [0, 1, 5, 20, 32, 63, 68, 71, 73, 83, 113, 114, 116, 117, 163, 186, 190, 193, 194], "your": [0, 1, 20, 32, 37, 52, 62, 63, 69, 71, 73, 86, 87, 91, 92, 96, 97, 98, 101, 106, 111, 112, 120, 122, 127, 129, 133, 137, 188, 190, 193, 194, 196], "environ": [0, 187], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 59, 63, 73, 83, 116, 133], "johnsnowlab": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 91, 92, 97, 98, 100, 101, 106, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 129, 131, 133, 137, 138, 147, 163], "load": [0, 1, 3, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 83, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 142, 173, 174, 181, 190, 193], "shell": 0, "packag": [0, 56, 61, 170, 187, 188], "com": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 91, 92, 97, 98, 100, 101, 106, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 129, 131, 133, 147, 163], "nlp_2": [0, 163], "12": [0, 56, 75, 76, 77, 83, 88, 90, 96, 106, 120, 144, 148, 162, 163, 173, 179, 181, 189], "pyspark": [0, 2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 142, 144, 145, 147, 148, 149, 162, 163, 166, 169, 170, 173, 176, 177, 179, 180, 190, 191], "submit": [0, 170, 186], "extern": [0, 83, 86, 91, 92, 98, 120, 126, 146, 161, 176, 177, 179, 180], "jar": [0, 163], "after": [0, 51, 52, 54, 63, 69, 70, 73, 88, 90, 96, 129, 149, 170, 189, 190], "compil": 0, "build": [0, 61, 62, 69, 70, 80, 83, 87, 114, 170, 186], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 149, 161, 162, 163, 169, 170, 174, 176, 179, 180, 181, 186, 187, 189, 190, 191, 193, 194, 195, 196], "built": [0, 20, 32, 145], "top": [0, 5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 43, 44, 47, 49, 56, 83, 113, 114, 117, 145], "apach": [0, 145, 163], "x": [0, 32, 162, 176, 196], "For": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 131, 133, 136, 137, 138, 145, 149, 170, 173, 174, 180, 186, 187, 189, 190, 191, 192, 193, 194], "you": [0, 16, 27, 33, 42, 52, 54, 60, 62, 64, 69, 71, 80, 88, 99, 116, 137, 139, 144, 163, 170, 174, 179, 181, 186, 188, 190, 191, 194, 195, 196], "need": [0, 5, 7, 9, 52, 54, 62, 64, 69, 74, 78, 80, 83, 88, 91, 97, 98, 101, 103, 106, 109, 112, 114, 120, 122, 123, 130, 131, 134, 142, 144, 170, 174, 176, 177, 179, 186, 188, 190, 191, 194, 196], "java": [0, 85, 118, 150, 151, 159, 165, 166, 169, 174], "8": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 67, 68, 69, 70, 75, 76, 77, 88, 93, 98, 99, 103, 114, 120, 133, 148, 176, 181], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 52, 54, 56, 57, 59, 61, 62, 65, 67, 68, 69, 72, 74, 75, 76, 77, 78, 80, 83, 85, 86, 88, 91, 93, 96, 98, 99, 100, 101, 106, 108, 109, 112, 113, 114, 116, 117, 120, 124, 126, 133, 137, 144, 146, 147, 156, 158, 162, 163, 170, 174, 180, 181, 186, 187, 188, 189, 190, 191, 194, 195, 196], "note": [0, 5, 7, 16, 20, 27, 32, 33, 37, 42, 56, 62, 65, 69, 71, 74, 75, 77, 83, 98, 113, 114, 116, 117, 144, 163, 195], "sinc": [0, 55, 83, 114, 163, 190, 191, 195], "version": [0, 55, 62, 102, 103, 126, 152, 157, 163, 168, 169, 173, 174, 190, 195], "6": [0, 20, 37, 49, 57, 58, 61, 65, 83, 87, 92, 93, 99, 106, 113, 122, 148, 163, 177, 181, 190], "deprec": [0, 163], "If": [0, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 43, 47, 49, 50, 71, 74, 78, 85, 88, 90, 96, 97, 98, 101, 103, 108, 109, 113, 114, 116, 117, 120, 126, 163, 169, 170, 174, 186, 188, 190], "consid": [0, 74, 80, 83, 116, 120, 122, 123, 125, 129, 163, 174], "stick": [0, 163], "lower": [0, 55, 56, 83, 120, 135, 163], "7": [0, 8, 37, 49, 57, 58, 61, 88, 90, 106, 114, 138, 179, 181, 189], "we": [0, 5, 7, 20, 32, 47, 49, 50, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 83, 97, 98, 101, 109, 113, 114, 116, 117, 120, 122, 131, 144, 162, 186, 189, 190, 191, 194, 195, 196], "recommend": [0, 65, 77, 111, 112, 113, 114, 116, 117], "4": [0, 5, 57, 58, 61, 64, 65, 67, 68, 74, 91, 97, 99, 106, 113, 114, 126, 148, 177, 181], "It": [0, 11, 14, 16, 20, 22, 25, 27, 30, 32, 33, 35, 37, 38, 40, 42, 43, 47, 49, 55, 57, 58, 59, 61, 62, 63, 68, 69, 70, 73, 75, 76, 78, 83, 93, 112, 113, 116, 120, 122, 123, 129, 138, 144, 174, 189, 194], "have": [0, 5, 16, 20, 27, 32, 33, 37, 42, 56, 59, 62, 67, 69, 70, 74, 83, 91, 93, 96, 97, 98, 99, 106, 108, 109, 114, 118, 123, 148, 149, 165, 190, 191, 194], "basic": [0, 49, 83, 108, 189], "knowledg": [0, 62, 83, 139], "framework": [0, 7, 113, 116, 117], "work": [0, 47, 62, 67, 68, 85, 113, 116, 117, 127, 189, 191, 195], "befor": [0, 55, 74, 88, 90, 113, 117, 118, 122, 130, 133, 151, 169, 186], "pleas": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 85, 86, 87, 88, 91, 92, 97, 98, 101, 106, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 125, 127, 129, 133, 136, 145, 146, 174, 187, 188, 192, 195], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138, 139, 144, 145, 147, 148, 149, 170, 173, 176, 177, 179, 181, 186, 190, 191, 193, 194, 195], "first": [0, 2, 61, 63, 64, 65, 67, 73, 75, 76, 83, 91, 97, 98, 99, 108, 113, 116, 117, 120, 125, 130, 137, 149, 156, 186, 190, 191, 195], "let": [0, 62, 129, 190], "": [0, 1, 10, 13, 16, 17, 21, 24, 27, 29, 33, 34, 39, 42, 47, 49, 50, 55, 56, 59, 61, 62, 63, 64, 68, 69, 70, 73, 75, 76, 78, 83, 91, 98, 101, 112, 113, 114, 116, 117, 118, 120, 122, 123, 129, 130, 131, 133, 134, 138, 144, 150, 151, 159, 162, 165, 169, 170, 186, 189, 190, 191, 194], "make": [0, 47, 49, 55, 59, 68, 75, 76, 83, 109, 112, 113, 122, 192, 196], "sure": [0, 112], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 43, 46, 47, 49, 51, 52, 54, 56, 57, 58, 61, 63, 65, 67, 70, 73, 74, 75, 76, 77, 83, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 102, 103, 108, 109, 112, 113, 114, 116, 117, 120, 126, 130, 133, 137, 138, 152, 157, 163, 168, 169, 170, 173, 174, 176, 177, 180, 181, 186, 189, 190, 194, 195], "0_292": 0, "creat": [0, 2, 3, 4, 20, 32, 37, 57, 58, 63, 69, 73, 74, 80, 98, 103, 106, 127, 133, 144, 146, 162, 176, 177, 179, 180, 190, 191, 194, 196], "new": [0, 2, 3, 4, 8, 37, 46, 49, 51, 56, 57, 58, 61, 65, 67, 68, 74, 77, 99, 100, 102, 103, 113, 114, 117, 120, 126, 138, 152, 157, 168, 169, 189, 190], "manag": [0, 83, 174, 187], "all": [0, 2, 3, 4, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 43, 49, 55, 56, 57, 58, 59, 71, 74, 77, 78, 81, 85, 88, 98, 101, 113, 114, 117, 120, 125, 130, 133, 137, 139, 156, 170, 174, 185, 190, 195], "depend": [0, 2, 46, 59, 71, 77, 78, 80, 81, 83, 85, 98, 116, 120, 133, 163], "Then": [0, 20, 32, 97, 98, 149, 170, 190], "sparknlp": [0, 186, 189, 190, 191, 192, 194, 195, 196], "n": [0, 76, 83, 93, 96, 97, 98, 108, 109, 113, 114, 117, 129, 144, 147, 162, 173], "y": [0, 32], "activ": [0, 11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 43, 83], "jupyt": [0, 170, 186], "now": [0, 59, 109, 144, 191], "should": [0, 2, 3, 4, 9, 20, 32, 37, 47, 49, 50, 63, 64, 73, 75, 83, 85, 92, 93, 97, 98, 103, 108, 109, 116, 118, 120, 130, 144, 151, 152, 165, 169, 173, 176, 177], "readi": [0, 20, 173, 190], "notebook": [0, 170, 186], "run": [0, 62, 83, 170, 174, 187, 195], "also": [0, 20, 32, 37, 47, 49, 50, 55, 56, 65, 68, 74, 75, 76, 78, 80, 83, 88, 91, 96, 97, 98, 102, 103, 109, 112, 113, 125, 144, 147, 152, 157, 168, 186, 190, 191, 192, 193, 195], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 187], "bin": 0, "A": [0, 5, 7, 37, 46, 47, 56, 69, 70, 74, 78, 83, 86, 87, 91, 92, 93, 100, 101, 111, 113, 114, 116, 117, 122, 123, 130, 131, 170, 179, 188, 190, 196], "retriev": [0, 64, 67, 74, 86, 122, 123, 124, 170, 173, 186, 190, 191], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 162, 170, 173, 176, 177, 179, 180, 181, 186, 189, 190, 193, 194, 195, 196], "manual": [0, 189], "sparksess": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 87, 113, 114, 116, 117, 163, 176, 177, 179, 180], "becaus": [0, 111, 118, 151, 169], "other": [0, 5, 8, 32, 47, 59, 71, 72, 80, 83, 101, 111, 113, 114, 117, 120, 127, 129, 137, 138, 190], "configur": [0, 47, 71, 131, 163], "includ": [0, 49, 55, 57, 58, 63, 65, 73, 75, 76, 77, 80, 83, 88, 96, 97, 98, 113, 114, 117, 120, 138, 170, 180, 187, 189, 190, 191, 196], "them": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 50, 56, 57, 59, 61, 62, 68, 69, 75, 77, 78, 80, 83, 88, 91, 109, 116, 120, 125, 133, 146, 149, 190, 191], "builder": [0, 126, 163], "appnam": [0, 163], "master": [0, 163], "local": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 83, 113, 114, 116, 117, 125, 144, 163, 173, 194], "config": [0, 163, 187], "driver": [0, 163], "memori": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 56, 65, 74, 163], "16g": [0, 163], "maxresults": [0, 163], "kryoseri": [0, 163], "buffer": [0, 58, 74, 163], "max": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 56, 57, 58, 59, 61, 62, 64, 67, 68, 69, 70, 75, 76, 77, 83, 123, 163], "2000m": [0, 163], "getorcr": [0, 163], "main": [1, 78, 131, 189, 193, 196], "page": [1, 55, 114, 173, 185, 193, 195], "github": [1, 61, 67, 69, 116, 173], "issu": [1, 133], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 162, 170, 173, 174, 176, 177, 179, 180, 181, 186, 189, 190, 191, 193, 194, 195, 196], "model": [1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 91, 92, 96, 97, 98, 100, 101, 103, 106, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 126, 127, 129, 131, 133, 151, 163, 169, 170, 173, 174, 186, 187, 189, 193, 195, 196], "hub": [1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 85, 86, 97, 98, 106, 109, 113, 114, 116, 117, 120, 122, 123, 125, 133, 174], "welcom": [1, 5, 7], "python": [1, 85, 163], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 184, 186, 189, 190], "inform": [1, 52, 54, 67, 74, 75, 83, 88, 96, 113, 120, 136, 145, 180, 186, 187, 188, 189, 190, 196], "us": [1, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 103, 106, 108, 109, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 126, 130, 131, 133, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 156, 162, 163, 170, 173, 174, 176, 177, 179, 180, 187, 188, 189, 190, 191, 193], "librari": [1, 47, 49, 50, 85, 135, 136, 137, 145, 149, 195], "get": [1, 20, 32, 83, 95, 106, 118, 120, 126, 131, 133, 134, 136, 137, 138, 142, 144, 145, 152, 157, 168, 186, 190, 195, 196], "start": [1, 5, 10, 13, 17, 21, 24, 29, 34, 39, 68, 80, 83, 97, 98, 109, 135, 163, 170, 186, 189, 191, 194, 195], "cheat": 1, "sheet": [1, 55], "requir": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 54, 56, 58, 61, 64, 65, 72, 75, 76, 83, 98, 101, 112, 120, 133, 135, 137, 148, 149, 189, 190, 191], "instal": [1, 170, 188], "session": [1, 163, 176, 177, 179, 180], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 151, 162, 163, 166, 169, 170, 173, 174, 176, 177, 179, 180, 181, 186, 189, 190, 191, 194, 195, 196], "user": [1, 96, 97, 131, 146, 163, 170, 186], "guid": [1, 187], "annot": [1, 3, 4, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 161, 162, 163, 164, 165, 167, 169, 170, 173, 174, 175, 179, 181, 186, 187, 192, 193, 194, 195, 196], "own": [1, 20, 32, 37, 52, 63, 73, 86, 87, 91, 92, 97, 98, 101, 106, 111, 112, 120, 122, 127, 129, 133, 193, 194, 196], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 163, 169, 170, 172, 173, 174, 175, 187, 189, 190, 193], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 85, 86, 87, 88, 91, 92, 97, 98, 99, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 137, 138, 144, 162, 163, 170, 186, 189, 193], "dataset": [1, 20, 32, 37, 52, 54, 59, 63, 64, 67, 68, 69, 70, 73, 74, 83, 85, 97, 98, 103, 109, 114, 120, 133, 169, 173, 176, 177, 179, 180, 193], "train": [1, 5, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 69, 70, 72, 73, 75, 76, 77, 83, 85, 86, 87, 91, 92, 95, 97, 98, 101, 102, 103, 106, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 127, 129, 133, 135, 144, 163, 170, 173, 186, 190, 191, 193, 194], "light": [1, 5, 62, 77, 83, 144, 193, 195], "helper": [1, 106, 133, 139, 162, 179, 180, 181, 193, 196], "function": [1, 65, 74, 113, 117, 137, 174, 185, 193], "third": [1, 108, 125, 171, 176], "parti": [1, 171], "project": [1, 83, 116, 118, 170, 187], "log": [1, 20, 32, 37, 98, 103, 109, 114, 163], "api": [1, 186, 190, 193], "modul": [1, 28, 53, 66, 79, 81, 82, 84, 89, 94, 104, 105, 107, 110, 115, 121, 128, 132, 143, 155, 167, 172, 178], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 162, 170, 173, 176, 177, 178, 179, 180, 187, 189, 190, 194, 195, 196], "format": [2, 3, 4, 47, 49, 50, 52, 54, 78, 80, 86, 87, 88, 90, 91, 92, 97, 98, 101, 103, 111, 113, 117, 122, 123, 131, 133, 134, 136, 138, 139, 142, 145, 147, 176, 177, 179, 180, 181, 187, 196], "annotatortyp": [2, 3, 4, 60, 93, 135, 136, 142, 145, 189], "begin": [2, 46, 96, 114, 129, 131, 135, 136, 145, 162, 189], "end": [2, 10, 13, 17, 21, 24, 29, 34, 39, 46, 98, 109, 113, 129, 131, 133, 136, 145, 162, 170, 176, 186, 189, 191], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 149, 162, 163, 170, 173, 176, 177, 181, 186, 187, 189, 190, 191, 194, 195], "metadata": [2, 3, 4, 38, 46, 51, 83, 92, 97, 98, 100, 106, 136, 138, 142, 144, 145, 162, 170, 174, 189, 191], "embed": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 80, 81, 97, 98, 99, 118, 136, 137, 138, 144, 145, 157, 162, 163, 169, 173, 189], "repres": [2, 3, 4, 52, 54, 56, 61, 67, 77, 78, 80, 87, 92, 93, 131, 170, 173, 190], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 149, 152, 162, 163, 170, 179, 186, 189, 190, 191], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 158, 162, 163, 165, 166, 167, 170, 173, 174, 176, 177, 179, 180, 181, 185, 187, 188, 189, 190, 192, 193, 194, 196], "nlp": [2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 91, 92, 97, 98, 99, 100, 101, 106, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 155, 163, 167, 170, 173, 174, 176, 177, 179, 180, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196], "detail": [2, 3, 4, 75, 76, 83, 100, 113, 114, 117], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 149, 152, 157, 161, 162, 163, 168, 169, 170, 173, 174, 176, 177, 179, 180], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 149, 152, 161, 162, 163, 168, 170, 173, 174, 176, 177, 179, 180], "The": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 130, 131, 133, 136, 138, 144, 145, 147, 162, 163, 170, 173, 174, 176, 177, 179, 180, 181, 186, 189, 190, 191, 193, 194, 196], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 149, 162, 164, 173, 179, 189, 190, 193], "possibl": [2, 3, 4, 60, 62, 75, 76, 78, 108, 120, 123, 136, 145, 156, 158, 170, 186], "valu": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 58, 60, 65, 67, 72, 75, 78, 80, 83, 85, 86, 88, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 112, 113, 114, 116, 117, 118, 120, 122, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 149, 152, 156, 157, 158, 168, 170, 186, 196], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 83, 86, 87, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 106, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 133, 135, 137, 144, 146, 148, 149, 163, 173, 176, 180, 181, 190, 194, 195], "wordpiec": 2, "word_embed": [2, 56, 57, 59, 60, 61, 62, 65, 66, 68, 69, 71, 73, 75, 77, 81, 97, 98, 103], "sentence_embed": [2, 20, 32, 37, 58, 63, 64, 66, 67, 70, 72, 76, 81, 170, 186, 190], "categori": [2, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 43, 47, 49, 50, 170, 186, 190], "date": [2, 51, 88, 90, 91], "entiti": [2, 8, 12, 15, 19, 23, 26, 31, 36, 41, 44, 46, 49, 51, 59, 78, 79, 80, 87, 92, 94, 95, 96, 97, 98, 99, 100, 127, 138, 144, 148, 173], "sentiment": [2, 20, 32, 37, 65, 77, 81, 117, 163, 190, 191], "po": [2, 9, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 52, 54, 80, 81, 97, 98, 129, 133, 144, 162, 163, 173, 176, 178, 189, 193, 194, 195], "chunk": [2, 8, 9, 10, 13, 17, 21, 24, 29, 34, 38, 39, 51, 60, 63, 73, 78, 83, 87, 91, 92, 93, 96, 127, 135, 138, 148, 162, 170, 180, 186, 196], "named_ent": [2, 12, 15, 19, 23, 26, 31, 36, 41, 44, 80, 96, 97, 98, 99, 100, 103, 144, 173], "negex": 2, "labeled_depend": [2, 54], "languag": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 135, 145, 149, 174, 190], "keyword": [2, 82, 83, 111], "dummi": [2, 55], "int": [2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 80, 83, 85, 88, 93, 95, 97, 98, 101, 102, 103, 106, 108, 109, 112, 113, 114, 116, 117, 118, 120, 123, 126, 130, 131, 133, 157, 163, 170, 176], "index": [2, 83, 87, 130, 163, 176], "charact": [2, 55, 65, 68, 78, 85, 91, 93, 101, 108, 109, 120, 122, 123, 130, 131, 133, 138], "under": [2, 62, 77, 83, 163], "last": [2, 88, 90, 127, 181, 194], "string": [2, 20, 32, 37, 46, 52, 55, 78, 91, 93, 99, 101, 109, 117, 123, 125, 129, 135, 136, 138, 142, 144, 145, 194], "dict": [2, 3, 4, 52, 54, 78, 86, 87, 91, 92, 97, 99, 100, 101, 103, 111, 120, 122, 123, 131, 144, 161, 163, 169, 170, 173], "associ": [2, 3, 4, 32, 72, 78, 91, 96, 170], "list": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 55, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 78, 80, 83, 85, 88, 91, 95, 96, 98, 99, 100, 101, 102, 108, 109, 113, 114, 116, 117, 118, 120, 125, 129, 131, 137, 138, 144, 145, 152, 162, 169, 170, 173, 174, 181, 185, 190], "vector": [2, 32, 57, 58, 60, 61, 63, 64, 65, 72, 73, 74, 137, 138, 189], "where": [2, 32, 61, 65, 78, 83, 86, 87, 91, 92, 93, 106, 109, 111, 113, 114, 117, 122, 123, 133, 135, 179], "applic": [2, 50, 83, 113, 156, 170, 171, 186, 188], "copi": [2, 3, 4, 174], "differ": [2, 3, 4, 47, 49, 52, 54, 65, 67, 69, 70, 75, 77, 83, 88, 108, 109, 120, 131, 133, 144, 170, 194], "return": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 85, 86, 87, 92, 93, 95, 97, 98, 100, 106, 108, 109, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 129, 131, 133, 135, 144, 161, 162, 163, 164, 169, 173, 174, 176, 177, 179, 180], "newli": [2, 3, 4], "static": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 174, 190], "datatyp": [2, 162], "structtyp": 2, "schema": [2, 96, 170, 186], "look": [2, 98, 122, 189], "like": [2, 5, 10, 13, 17, 20, 21, 24, 29, 34, 39, 46, 55, 56, 60, 62, 68, 71, 77, 80, 83, 91, 96, 109, 112, 114, 120, 131, 133, 170, 186, 188, 189], "struct": [2, 136, 142, 145], "containsnul": [2, 32, 134, 136, 142, 145], "true": [2, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 47, 49, 50, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 85, 87, 88, 90, 92, 96, 98, 101, 108, 109, 120, 122, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 145, 147, 170, 174, 176, 177, 180, 181, 186, 190, 191], "nullabl": [2, 32, 134, 136, 142, 145], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138, 139, 144, 145, 147, 148, 149, 162, 163, 170, 173, 176, 177, 179, 181, 186, 189, 190, 191, 196], "integ": [2, 47, 49, 50, 136, 142, 145], "map": [2, 9, 32, 74, 78, 102, 103, 106, 120, 136, 142, 145, 152, 157, 162, 168, 169, 189], "kei": [2, 5, 47, 52, 54, 69, 70, 75, 76, 86, 100, 136, 142, 144, 145, 170, 173, 186], "valuecontainsnul": [2, 136, 142, 145], "arrai": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 85, 86, 93, 98, 102, 106, 108, 109, 113, 114, 116, 117, 120, 127, 129, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 162, 191, 194], "element": [2, 32, 93, 134, 136, 142, 145], "float": [2, 3, 5, 7, 20, 32, 37, 47, 51, 85, 97, 98, 100, 102, 103, 109, 113, 114, 117, 118, 120, 133, 134, 136, 137, 144, 145], "sql": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 87, 113, 114, 116, 117, 144, 162, 169, 173, 176, 177, 179, 180], "arraytyp": [2, 135, 162], "fromrow": 2, "row": [2, 38, 74, 108, 109, 112, 136, 145, 147, 162, 176], "column": [2, 8, 20, 32, 37, 55, 74, 86, 95, 97, 98, 102, 103, 106, 112, 118, 126, 131, 133, 134, 135, 136, 137, 138, 139, 142, 145, 149, 152, 162, 173, 176, 179, 190], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 162, 165, 169, 170, 173, 186, 189, 190, 191, 194, 195, 196], "an": [2, 5, 7, 9, 20, 32, 37, 38, 47, 49, 50, 52, 55, 59, 61, 65, 67, 68, 77, 78, 83, 85, 87, 88, 90, 91, 92, 93, 97, 98, 100, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 127, 131, 133, 135, 136, 137, 138, 139, 144, 145, 149, 152, 157, 161, 162, 164, 168, 169, 170, 176, 177, 179, 180, 185, 187, 189, 190, 191, 193, 194], "annotationaudio": 3, "audio": [3, 134, 170], "alreadi": [3, 80, 83, 97, 98, 99, 131, 144, 148, 173, 194], "process": [3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 75, 76, 77, 80, 83, 85, 96, 97, 98, 103, 109, 113, 114, 117, 133, 134, 135, 136, 137, 138, 142, 145, 146, 149, 170, 186, 189, 190, 191, 192], "file": [3, 5, 7, 20, 32, 37, 52, 54, 55, 72, 74, 78, 86, 87, 91, 92, 97, 98, 101, 103, 109, 111, 120, 122, 123, 126, 131, 134, 147, 158, 163, 170, 176, 177, 179, 180, 186, 196], "byte": [3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 85, 98, 102, 113, 114, 116, 117, 120, 170], "annotationimag": [4, 144, 173], "origin": [4, 47, 49, 50, 56, 63, 68, 69, 73, 96, 109, 113, 142], "height": [4, 47, 49, 50, 142], "width": [4, 47, 49, 50, 142], "nchannel": [4, 142], "mode": [4, 20, 32, 37, 98, 103, 122, 136, 142, 145, 170], "imag": [4, 47, 49, 50, 142, 144, 173], "uri": [4, 174], "pixel": [4, 49], "number": [4, 16, 20, 27, 32, 33, 37, 42, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 93, 95, 97, 98, 102, 106, 108, 109, 113, 114, 117, 118, 120, 126, 133, 176, 177], "color": 4, "channel": [4, 47, 49, 50, 120], "opencv": 4, "concern": [5, 7, 11, 47, 49, 50, 51, 56], "hubertforctc": 5, "classnam": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 91, 92, 97, 98, 100, 101, 106, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 129, 131, 133, 147, 150, 151, 159, 165], "java_model": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 91, 92, 97, 98, 100, 101, 106, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 127, 129, 131, 133, 141, 147, 151, 169], "none": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 91, 92, 97, 98, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 145, 147, 148, 151, 163, 169, 170, 173, 174, 191], "hubert": 5, "head": [5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 43, 44, 46, 56, 77, 96, 97, 98, 144, 162, 173, 190], "connectionist": [5, 7], "tempor": [5, 7], "classif": [5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 43, 44, 47, 49, 50, 56, 64, 67, 72, 112, 113, 117, 190], "ctc": [5, 7], "wa": [5, 7, 11, 12, 14, 15, 16, 20, 22, 23, 25, 26, 27, 30, 31, 33, 35, 36, 37, 40, 41, 42, 43, 44, 47, 49, 55, 59, 61, 62, 68, 69, 70, 74, 75, 76, 83, 112, 113, 114, 120, 173, 190, 191], "propos": [5, 7, 47, 49, 56, 59, 61, 62, 69, 70, 75, 76, 77], "self": [5, 7, 49, 56, 68, 116], "supervis": [5, 7, 56, 64, 65, 72, 83, 113, 114], "speech": [5, 7, 9, 59, 105, 106, 133, 179, 196], "represent": [5, 7, 49, 56, 57, 58, 62, 63, 64, 65, 73, 74, 75, 76, 77, 96, 117, 147, 161], "learn": [5, 7, 20, 32, 37, 51, 56, 62, 63, 65, 69, 70, 72, 73, 75, 76, 77, 83, 97, 98, 102, 109, 113, 114, 117, 120, 170, 188], "mask": [5, 49, 61, 75, 76, 77, 113, 130], "predict": [5, 49, 61, 98, 114, 117, 170, 186], "hidden": [5, 10, 12, 13, 15, 17, 19, 21, 23, 24, 26, 29, 31, 34, 36, 39, 41, 44, 56, 65, 77, 126], "unit": [5, 114, 126], "wei": [5, 49], "ning": 5, "hsu": 5, "benjamin": [5, 59], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 16, 27, 33, 38, 42, 59, 80, 92, 102, 103, 122, 125, 131, 146, 152, 157, 168, 176, 189, 190, 194, 195], "transcrib": [5, 7], "text": [5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 46, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 145, 147, 148, 149, 156, 158, 161, 162, 170, 176, 177, 179, 180, 186, 189, 190, 191, 195, 196], "provid": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 97, 98, 101, 102, 103, 106, 109, 111, 113, 114, 116, 117, 120, 122, 123, 133, 144, 152, 157, 162, 164, 168, 173, 191], "pre": [5, 7, 20, 32, 37, 50, 57, 58, 61, 62, 64, 65, 72, 98, 103, 113, 117, 136, 138, 145, 149, 177, 190], "current": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 83, 87, 88, 90, 109, 113, 114, 116, 117, 126, 144, 147, 152, 163, 189, 190, 191], "support": [5, 7, 20, 32, 56, 68, 83, 98, 101, 109, 116, 125, 147, 163, 187], "appl": [5, 7, 58, 70, 76, 163], "silicon": [5, 7, 163], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 56, 68, 113], "instruct": [5, 7, 67], "xla": [5, 7], "companion": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 97, 98, 100, 106, 109, 113, 114, 116, 117, 120, 122, 123, 125, 133, 166], "object": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 97, 98, 100, 106, 109, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 133, 156, 158, 165, 166, 170, 189, 190], "speechtotext": [5, 7], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 145, 147, 148, 149, 152, 170, 186, 190, 191], "audio_assembl": [5, 7, 143, 163], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 145, 147, 148, 149, 152, 170, 186, 190, 191], "default": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 126, 129, 130, 131, 133, 135, 136, 137, 138, 139, 144, 145, 147, 161, 162, 163, 170, 173, 174, 176, 177, 179, 180, 190], "asr_hubert_large_ls960": 5, "name": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 92, 94, 95, 97, 98, 100, 102, 106, 109, 112, 113, 114, 116, 117, 118, 120, 122, 123, 125, 126, 127, 131, 133, 134, 135, 136, 137, 138, 139, 142, 145, 147, 149, 152, 162, 168, 170, 173, 174, 176, 179, 186, 190], "avail": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 81, 83, 85, 86, 88, 91, 97, 98, 106, 109, 113, 114, 116, 117, 118, 120, 122, 123, 125, 133, 165, 173, 174, 186, 193], "see": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 131, 133, 136, 137, 138, 139, 145, 149, 170, 173, 174, 180, 186, 187, 188, 193, 195, 196], "To": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 50, 56, 57, 59, 61, 62, 68, 69, 75, 77, 83, 88, 91, 106, 108, 113, 114, 117, 133, 139, 144, 146, 170, 186, 194], "which": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 75, 77, 80, 83, 88, 90, 91, 98, 100, 101, 108, 109, 111, 113, 114, 116, 117, 122, 130, 133, 137, 144, 162, 174, 176, 177, 190, 191], "compat": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 50, 56, 57, 59, 61, 62, 68, 69, 75, 77, 98, 137, 174], "5669": [5, 7, 47, 49, 50, 59], "more": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 55, 59, 62, 64, 65, 67, 71, 75, 76, 80, 83, 88, 93, 96, 100, 109, 113, 114, 117, 122, 130, 131, 136, 137, 138, 145, 149, 170, 173, 180, 186, 187, 188, 190, 193, 196], "extend": [5, 7, 9, 20, 32, 37, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 65, 69, 71, 72, 74, 75, 77, 83, 85, 86, 88, 90, 91, 92, 93, 97, 98, 100, 101, 103, 106, 108, 109, 111, 112, 113, 116, 117, 120, 122, 124, 125, 129, 131, 133, 136, 137, 138, 145, 149, 173], "hubertforctctestspec": 5, "paper": [5, 47, 49, 50, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 83, 109, 112, 113, 114, 116, 117, 133, 180, 196], "abstract": [5, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 83, 113, 114, 116, 117, 126, 180, 196], "approach": [5, 47, 49, 69, 70, 77, 83, 95, 97, 98, 100, 109, 111, 113, 114, 117, 120, 122, 123, 150, 193], "challeng": [5, 32, 49, 62, 65, 67, 69, 70, 83], "three": [5, 120, 148], "uniqu": [5, 113], "problem": [5, 32, 56, 65, 113, 117, 120, 133], "multipl": [5, 32, 50, 59, 78, 83, 88, 108, 113, 131, 162, 170, 176], "sound": 5, "each": [5, 7, 16, 20, 27, 32, 33, 37, 42, 47, 49, 50, 61, 63, 64, 71, 73, 74, 78, 80, 83, 86, 87, 88, 91, 92, 93, 95, 97, 98, 100, 101, 103, 106, 108, 109, 111, 113, 118, 120, 122, 123, 130, 131, 133, 136, 145, 156, 162, 169, 179, 191], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 149, 152, 162, 169, 173, 176, 177, 179, 180, 190, 191, 194, 196], "utter": 5, "lexicon": 5, "dure": [5, 20, 32, 37, 62, 67, 97, 98, 103, 108, 120, 163, 170, 186], "phase": [5, 62, 113], "variabl": [5, 63, 73], "length": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 69, 70, 73, 75, 76, 77, 93, 101, 108, 109, 113, 114, 116, 117, 118, 120, 130, 131], "explicit": [5, 108, 114], "segment": [5, 46, 47, 49, 62, 69, 132, 133], "deal": [5, 144, 194], "bert": [5, 11, 13, 14, 15, 16, 18, 22, 25, 26, 30, 35, 38, 40, 43, 56, 57, 58, 61, 62, 68, 69, 70, 75, 76, 77, 98, 99, 100, 113, 117], "util": [5, 60, 97, 100, 108, 109, 123, 146, 154, 155, 158, 160, 163, 164, 168, 172], "offlin": [5, 170], "cluster": [5, 64, 67, 72, 163], "step": [5, 20, 32, 37, 63, 73, 98, 103, 170, 186, 190], "align": 5, "target": [5, 72, 113, 116, 131, 135, 144, 173], "label": [5, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 47, 49, 50, 52, 54, 64, 78, 85, 95, 96, 97, 98, 100, 102, 103, 111, 112, 117, 120, 126, 133, 170, 176, 186, 190], "loss": [5, 56, 62, 67, 98, 117, 186], "ingredi": 5, "our": [5, 56, 59, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 83, 109, 113, 114, 117, 162, 173, 195], "appli": [5, 8, 20, 32, 37, 47, 50, 55, 78, 80, 98, 99, 103, 108, 117, 120, 122, 138, 162, 176], "over": [5, 62, 75, 76, 77, 113, 122, 131, 162, 170, 186], "region": 5, "onli": [5, 47, 49, 50, 52, 54, 55, 65, 72, 77, 88, 91, 101, 108, 109, 113, 114, 116, 117, 129, 133, 146, 156, 176], "forc": 5, "combin": [5, 16, 27, 33, 42, 62, 68, 74, 83, 113, 117, 120, 122, 133], "acoust": 5, "continu": [5, 96, 114, 139, 186], "reli": [5, 52, 54, 77, 83], "primarili": 5, "consist": [5, 56, 61, 68, 91, 106, 112, 133, 147, 179], "unsupervis": [5, 75, 76, 77, 83, 113, 114], "rather": [5, 47], "than": [5, 32, 37, 47, 62, 63, 67, 73, 75, 76, 77, 83, 85, 93, 97, 114, 116, 122, 123, 190], "intrins": [5, 47], "qualiti": [5, 49, 114], "assign": [5, 32, 78, 99, 111], "simpl": [5, 57, 58, 78, 114, 191], "k": [5, 113, 114, 117, 137], "mean": [5, 9, 16, 27, 32, 33, 42, 47, 49, 50, 75, 83, 85, 88, 90, 113, 114, 116, 117, 130, 137, 144, 190, 191, 194], "teacher": 5, "100": [5, 20, 32, 38, 50, 63, 73, 75, 83, 109, 147], "two": [5, 32, 49, 52, 54, 56, 61, 72, 74, 75, 76, 80, 148, 176, 190], "iter": [5, 52, 54, 56, 63, 73, 106, 133, 170, 186], "either": [5, 20, 37, 50, 54, 59, 60, 71, 78, 83, 85, 91, 111, 112, 117, 133, 135, 144, 145, 147, 173, 191], "match": [5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 101, 106, 108, 113, 114, 131, 133, 135, 156, 189], "improv": [5, 56, 57, 58, 59, 61, 65, 67, 69, 70, 75, 76, 97, 98, 114, 195], "upon": [5, 83], "state": [5, 10, 12, 13, 15, 17, 19, 20, 21, 23, 24, 26, 29, 31, 32, 34, 36, 37, 39, 41, 44, 47, 49, 50, 56, 57, 58, 59, 64, 65, 67, 68, 69, 70, 77, 83, 98, 113, 114, 117, 145, 187, 190], "art": [5, 20, 32, 47, 49, 50, 56, 57, 58, 59, 64, 65, 67, 68, 69, 70, 77, 83, 98, 113, 114, 117, 145], "wav2vec": [5, 7], "perform": [5, 47, 49, 50, 55, 56, 59, 61, 62, 64, 65, 67, 69, 70, 72, 74, 75, 76, 77, 98, 112, 113, 114, 122], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 62, 108], "000h": 5, "benchmark": [5, 50, 56, 61, 62, 64, 65, 75, 76, 113, 117], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 46, 57, 58, 62, 64, 100, 113, 117, 181], "tune": [5, 46, 57, 58, 62, 64, 100, 113, 117], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 145, 147, 148, 149, 162, 174, 176, 177, 179, 180, 181, 186, 189, 190, 191, 195], "19": [5, 51, 64, 93, 179, 181], "13": [5, 8, 9, 46, 75, 76, 80, 106, 138, 181], "rel": [5, 59, 61, 75, 88, 90, 97, 120, 189], "wer": 5, "reduct": [5, 56, 122], "dev": [5, 49, 56, 65, 72], "test": [5, 20, 32, 37, 47, 49, 50, 52, 54, 57, 58, 72, 74, 86, 87, 91, 92, 97, 98, 103, 106, 114, 122, 123, 127, 133, 176, 177, 179, 180, 181, 190, 196], "evalu": [5, 20, 32, 37, 59, 64, 67, 68, 75, 76, 103, 113, 152, 170], "batchsiz": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 75, 76, 77, 98, 113, 116, 120], "size": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 80, 83, 98, 102, 113, 114, 116, 117, 118, 120, 122, 189, 194, 195], "batch": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 75, 76, 77, 98, 102, 113, 116, 120], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 150, 151, 152, 155, 159, 163, 165, 169, 170, 186, 190, 191, 194], "ml": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 142, 144, 145, 146, 147, 148, 149, 170, 186, 190, 194], "audioassembl": [5, 7, 134], "audio_cont": [5, 7, 134], "setstag": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 137, 147, 148, 149, 190, 191], "processedaudiofloat": [5, 7], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138, 145, 147, 148, 149, 162, 170, 186, 189, 190, 191, 195], "rawfloat": [5, 7], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138, 142, 145, 147, 148, 149, 162, 189, 190, 191, 195], "fit": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 137, 144, 146, 147, 148, 149, 169, 170, 186, 190, 191, 194], "select": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 60, 62, 74, 80, 83, 85, 97, 98, 100, 112, 113, 114, 117, 120, 122, 123, 129, 133, 134, 136, 138, 139, 142, 145, 147, 149, 162, 170, 186, 191], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 74, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 136, 138, 139, 145, 147, 148, 149, 162, 179, 189, 190, 191], "mister": [5, 7], "quilter": [5, 7], "THE": [5, 7, 55], "apostl": [5, 7], "OF": [5, 7, 56], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7], "TO": [5, 7, 176, 196], "hi": [5, 7, 100, 109], "gospel": [5, 7], "setconfigprotobyt": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 85, 98, 102, 113, 114, 116, 117, 120], "b": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 85, 87, 92, 96, 97, 98, 99, 100, 102, 108, 113, 114, 116, 117, 120, 133, 144, 162, 173, 176, 180, 196], "configproto": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 85, 98, 102, 113, 114, 116, 117, 120], "tensorflow": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 83, 85, 98, 102, 113, 114, 116, 117, 120], "serial": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 78, 85, 98, 102, 113, 114, 116, 117, 120, 163], "loadsavedmodel": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 113, 114, 116, 117], "folder": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 98, 103, 109, 113, 114, 116, 117, 120, 123, 126, 174, 176], "spark_sess": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 113, 114, 116, 117], "save": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 98, 103, 109, 113, 114, 116, 117, 163, 170, 186, 190], "restor": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133], "lang": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 173, 174, 190, 195], "en": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 77, 80, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 173, 174, 177, 190, 195, 196], "remote_loc": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 173, 174], "download": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 85, 86, 87, 92, 97, 98, 99, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 163, 173, 174, 189, 190, 193, 194], "option": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 83, 85, 86, 87, 91, 92, 97, 98, 100, 101, 103, 106, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 134, 136, 140, 141, 144, 145, 161, 162, 163, 169, 170, 173, 174, 176, 177, 179, 180, 190], "remot": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 173, 174], "address": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133], "resourc": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 85, 86, 87, 91, 92, 97, 98, 100, 101, 103, 106, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 125, 127, 131, 133, 146, 158, 161, 172, 174, 176, 177, 179, 180, 181, 190, 196], "Will": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 108, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133], "repositori": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 173, 187], "otherwis": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 86, 87, 92, 97, 98, 100, 106, 109, 112, 113, 114, 116, 117, 120, 122, 123, 125, 131, 133, 135, 170], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 127], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "chunk2doc": [8, 135], "convert": [8, 51, 55, 60, 71, 74, 88, 90, 93, 96, 101, 113, 117, 130, 133, 135, 138, 139, 148, 170, 186, 193], "back": [8, 113], "when": [8, 9, 11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42, 43, 47, 49, 50, 55, 56, 64, 80, 88, 90, 93, 98, 113, 114, 120, 122, 125, 129, 133, 144, 176, 190, 191, 194], "try": [8, 120, 176], "re": [8, 64, 190], "do": [8, 72, 83, 96, 125, 131, 144, 186, 190, 194], "further": [8, 56, 67, 83, 97, 98, 149], "analysi": [8, 20, 32, 37, 65, 67, 77, 110, 111, 117, 154, 191], "doc2chunk": [8, 135], "pretrainedpipelin": [8, 138, 144, 162, 173, 189, 194, 195], "locat": [8, 78, 108, 163, 173, 190], "extract": [8, 9, 10, 13, 17, 21, 24, 29, 34, 39, 47, 49, 50, 52, 60, 74, 78, 79, 80, 82, 83, 87, 88, 90, 92, 96, 97, 98, 99, 108, 109, 111, 118, 120, 123, 127, 137, 138, 139, 144, 148, 163, 170, 173, 186], "york": [8, 100, 138], "jersei": [8, 138], "aren": [8, 138], "t": [8, 16, 27, 33, 42, 62, 69, 86, 101, 109, 111, 131, 138], "far": [8, 114, 138], "apart": [8, 52, 54, 138], "actual": [8, 93, 138, 149], "id": [8, 32, 55, 75, 78, 113, 114, 116, 117, 120, 135, 136, 138, 145, 149, 170, 176], "defin": [8, 9, 96, 97, 98, 120, 125, 129, 138, 162, 170, 173, 186, 190, 194], "amongst": [8, 138], "thing": [8, 120, 138], "explain_document_dl": [8, 138, 144, 162, 173], "chunktodoc": 8, "chunkconvert": 8, "explainresult": [8, 138], "selectexpr": [8, 9, 20, 38, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 86, 87, 88, 90, 91, 92, 93, 96, 99, 100, 101, 106, 108, 109, 111, 116, 124, 125, 127, 130, 131, 135, 137, 138, 148, 162, 176, 177, 179, 189, 190, 195], "explod": [8, 9, 20, 38, 46, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 87, 90, 91, 92, 93, 96, 99, 100, 106, 108, 109, 116, 137, 138, 148, 162, 176, 179, 189, 190, 195], "col": [8, 52, 54, 78, 87, 96, 99, 138, 162, 189], "loc": [8, 12, 15, 19, 23, 26, 31, 36, 41, 44, 80, 96, 97, 98, 138, 144, 162, 173, 176], "sentenc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 106, 112, 113, 116, 120, 125, 127, 130, 133, 136, 138, 144, 145, 147, 148, 149, 163, 173, 176, 177, 179, 180, 181, 190, 194, 195], "22": [8, 138, 176, 189], "pattern": [9, 55, 78, 88, 91, 101, 122, 123, 130, 131, 133], "part": [9, 59, 83, 86, 105, 106, 124, 133, 135, 179, 196], "tag": [9, 20, 32, 37, 55, 59, 95, 96, 97, 98, 99, 105, 106, 133, 162, 170, 176, 179, 180, 196], "order": [9, 67, 77, 78, 83, 88, 113, 122, 123, 144, 149, 162, 190, 191, 194, 196], "meaning": [9, 124], "phrase": [9, 59, 63, 73, 87, 92], "onto": [9, 162, 191], "pars": [9, 52, 53, 54, 59, 78, 86, 88, 90, 120, 122, 123, 144, 147, 173, 176, 179], "regular": [9, 91, 97, 108], "express": [9, 37, 46, 88, 91, 108], "wrap": [9, 118, 150, 151, 159, 165, 169], "angl": 9, "bracket": 9, "easili": [9, 65, 106, 137, 186], "distinguish": 9, "itself": [9, 83, 117, 133, 146, 191], "form": [9, 20, 32, 37, 74, 78, 86, 87, 88, 91, 92, 109, 111, 122, 123, 133, 137, 170, 176, 177, 190], "peter": [9, 68, 86, 101, 106, 109, 122, 124, 176], "piper": [9, 86, 106, 124], "employe": [9, 86, 106, 124], "pick": [9, 86, 106, 124], "peck": [9, 86, 106, 124], "pickl": [9, 86, 106, 124], "pepper": [9, 86, 106, 124], "nnp": [9, 106, 144, 162, 176, 177, 179, 180, 189, 194, 195, 196], "nn": [9, 106, 176, 177, 179, 180, 196], "vbp": [9, 106, 144, 177, 189, 194, 195], "vbg": [9, 106], "IN": [9, 106, 144, 162, 177, 179, 180, 189, 194, 195], "jj": [9, 106, 144, 162, 176, 179, 189, 194, 195, 196], "regexpars": 9, "e": [9, 11, 12, 14, 15, 18, 19, 22, 23, 25, 26, 30, 31, 35, 36, 40, 41, 43, 44, 47, 54, 55, 64, 65, 67, 68, 78, 80, 97, 98, 113, 114, 116, 117, 120, 125, 147, 170, 186], "g": [9, 11, 12, 14, 15, 18, 19, 22, 23, 25, 26, 30, 31, 35, 36, 40, 41, 43, 44, 47, 54, 55, 64, 65, 67, 80, 97, 98, 113, 114, 116, 117, 120, 125, 147, 170, 186], "setregexpars": 9, "enclos": 9, "treat": [9, 120, 133], "group": [9, 131], "so": [9, 16, 20, 27, 33, 37, 42, 83, 96, 109, 146, 170, 186], "here": [9, 86, 162, 190], "specif": [9, 38, 52, 54, 55, 57, 58, 62, 72, 80, 83, 98, 113, 114, 126, 144, 146, 170, 194], "noun": [9, 177], "success": [9, 59, 114], "grammar": 9, "parser": [9, 52, 54, 80], "perceptronmodel": [9, 52, 54, 80, 97, 106, 176], "Of": [9, 56, 133], "documentassembl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 145, 146, 147, 148, 149, 170, 176, 186, 190], "sentencedetector": [9, 20, 38, 46, 52, 54, 58, 60, 70, 72, 76, 80, 83, 86, 91, 93, 97, 98, 99, 100, 106, 108, 109, 125, 127, 146, 149, 176, 190, 191], "postag": 9, "11": [9, 51, 75, 76, 88, 90, 93, 106, 181], "21": [9, 88, 90, 99, 106, 181], "35": [9, 106, 181], "39": [9, 99, 106, 179, 181], "52": [9, 99, 106, 179], "58": [9, 49, 106], "albertforquestionansw": 10, "classifi": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 83, 137, 190], "dl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 85, 98, 100, 122, 123], "albert": [10, 11, 12, 56], "span": [10, 13, 17, 21, 24, 29, 34, 39, 113, 117], "question": [10, 13, 17, 21, 24, 29, 34, 38, 39, 52, 54, 57, 58, 65, 69, 70, 77, 100, 106, 113, 114, 117, 144], "answer": [10, 13, 17, 21, 24, 29, 34, 38, 39, 52, 54, 57, 58, 65, 77, 100, 113, 114, 117, 144], "task": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 67, 68, 72, 75, 76, 77, 83, 100, 113, 114, 116, 117, 146], "squad": [10, 13, 17, 21, 24, 29, 34, 39, 56, 57, 58, 61, 69, 70, 113], "linear": [10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 43, 44, 49, 114], "layer": [10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 43, 44, 56, 57, 58, 61, 65, 77], "comput": [10, 13, 17, 21, 24, 29, 34, 39, 47, 49, 50, 56, 61, 62, 67, 72, 114, 116, 123, 133, 144, 194], "logit": [10, 11, 13, 14, 16, 17, 18, 21, 24, 25, 27, 29, 30, 33, 34, 35, 39, 40, 42, 43], "spanclassifi": [10, 13, 17, 21, 24, 29, 34, 39], "document_quest": [10, 13, 17, 21, 24, 29, 34, 38, 39], "document_context": [10, 13, 17, 21, 24, 29, 34, 39], "albert_base_qa_squad2": 10, "larg": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 56, 61, 62, 64, 65, 75, 76, 77, 83, 85, 87, 92, 98, 113, 114], "allow": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 49, 65, 72, 97, 98, 101, 108, 109, 113, 130, 131, 146, 156], "faster": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 62, 65, 122, 123], "casesensit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 75, 76, 77, 87, 92, 122, 125], "whether": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 78, 80, 87, 88, 90, 92, 93, 96, 97, 98, 101, 103, 108, 109, 113, 114, 117, 118, 120, 122, 125, 130, 131, 133, 135, 137, 138, 139, 144, 147, 149, 152, 163, 173, 176, 180, 191], "ignor": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 75, 76, 77, 87, 93, 96, 113, 114, 116, 117, 122, 125, 144], "case": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 75, 76, 77, 78, 85, 87, 92, 120, 122, 125, 131, 135, 176, 177, 190], "configprotobyt": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 72, 75, 76, 77, 85, 98, 113, 114, 116, 117, 120], "maxsentencelength": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 69, 70, 73, 75, 76, 77], "128": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 61, 62, 67, 69, 70, 75, 76, 77, 170, 186], "multidocumentassembl": [10, 13, 17, 21, 24, 29, 34, 38, 39, 145], "context": [10, 13, 17, 21, 24, 29, 34, 39, 57, 58, 63, 65, 73, 77, 112, 120, 131], "setcasesensit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 60, 62, 68, 69, 75, 87, 92, 97, 122, 125, 137, 149], "what": [10, 13, 17, 21, 24, 29, 34, 37, 39, 47, 52, 54, 83, 85, 100, 116, 120, 129, 177, 187], "my": [10, 12, 13, 15, 17, 20, 21, 23, 24, 26, 29, 31, 34, 36, 37, 39, 41, 44, 55, 91, 93, 100, 108, 114, 125, 127, 130, 190], "clara": [10, 13, 17, 21, 24, 29, 34, 39, 100], "live": [10, 12, 13, 15, 17, 21, 23, 24, 26, 29, 31, 34, 36, 39, 41, 44, 100, 114, 170, 186], "berkelei": [10, 13, 17, 21, 24, 29, 34, 39], "albertforsequenceclassif": [11, 22], "sequenc": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 47, 49, 50, 68, 113, 114, 115, 116, 117, 120, 125], "regress": [11, 14, 18, 22, 25, 30, 35, 40, 43, 113, 117], "pool": [11, 14, 18, 22, 25, 30, 35, 40, 43, 60, 65, 71], "multi": [11, 14, 18, 20, 22, 25, 30, 32, 35, 37, 40, 43, 56, 72, 75, 76, 83, 85, 116], "sequenceclassifi": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43], "albert_base_sequence_classifier_imdb": 11, "coalescesent": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 85], "instead": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 58, 83, 85, 88, 90, 117, 137, 138, 144, 194], "per": [11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 64, 75, 76, 85, 88, 93, 95, 96, 97, 98, 133, 144, 162, 173, 176], "inputcol": [11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 43, 71, 85, 134, 136, 137, 138, 139, 142, 145], "averag": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 43, 60, 64, 67, 71, 75, 76, 85, 98, 106, 118], "probabl": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 83, 113, 114, 117, 122], "calcul": [11, 14, 16, 18, 20, 25, 27, 30, 32, 33, 35, 37, 40, 42, 43, 74, 93, 98, 103, 111, 118], "via": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 43, 72, 142, 163], "softmax": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 43, 61, 63, 73, 120], "sigmoid": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 43], "love": [11, 14, 16, 20, 22, 25, 27, 30, 33, 35, 40, 42, 43, 58, 70, 76, 109, 112, 190], "movi": [11, 14, 16, 20, 22, 25, 27, 30, 33, 35, 37, 40, 42, 43, 112, 190], "child": [11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42, 43], "pretti": [11, 14, 16, 22, 25, 27, 30, 32, 33, 35, 40, 42, 43, 83], "bore": [11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42, 43], "neg": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 37, 40, 42, 43, 111, 112, 170, 186], "getclass": [11, 12, 14, 15, 16, 18, 19, 22, 23, 25, 26, 27, 30, 31, 33, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 100], "setcoalescesent": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 85], "limit": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 47, 49, 50, 56, 59, 68, 74, 77, 83, 117, 122], "almost": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43], "512": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 43, 64, 65, 116], "help": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 52, 54, 56, 116, 131, 170, 186, 191, 195], "feed": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43], "entir": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 47, 116], "bool": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 43, 55, 58, 60, 72, 78, 80, 85, 87, 88, 92, 93, 96, 97, 98, 101, 103, 108, 109, 113, 114, 117, 118, 120, 122, 125, 130, 131, 133, 135, 137, 138, 139, 144, 147, 152, 163, 170, 173, 174, 176], "one": [11, 14, 16, 18, 22, 25, 27, 30, 32, 33, 35, 40, 42, 43, 46, 47, 49, 50, 52, 54, 55, 57, 58, 71, 75, 76, 77, 83, 85, 88, 91, 96, 109, 122, 127, 149, 186, 190], "albertfortokenclassif": [12, 56], "recognit": [12, 15, 19, 23, 26, 31, 36, 41, 44, 47, 50, 59, 94, 97, 98, 100], "ner": [12, 15, 19, 23, 26, 31, 36, 41, 44, 75, 76, 80, 81, 127, 144, 162, 163, 170, 173, 186], "token_classifi": [12, 19, 31, 36, 41, 44], "albert_base_token_classifier_conll03": 12, "albertembed": [12, 56], "level": [12, 20, 32, 37, 57, 58, 68, 69, 70, 72, 74, 76, 78, 97, 98, 103, 120, 163, 176], "tokenclassifi": [12, 15, 19, 23, 26, 31, 36, 41, 44], "john": [12, 15, 23, 26, 31, 36, 41, 44, 46, 58, 70, 76, 78, 80, 99, 101, 109, 139, 181], "lenon": [12, 15, 23, 26, 31, 36, 41, 44], "born": [12, 15, 23, 26, 31, 36, 41, 44, 114], "london": [12, 15, 23, 26, 31, 36, 41, 44], "pari": [12, 15, 23, 26, 31, 36, 41, 44, 100], "sarah": [12, 15, 23, 26, 31, 36, 41, 44], "o": [12, 15, 19, 23, 26, 31, 36, 41, 44, 96, 97, 98, 99, 144, 162, 173, 176, 180, 196], "bertforquestionansw": [13, 38], "bert_base_cased_qa_squad2": 13, "questionansw": 13, "bertforsequenceclassif": [14, 16], "bert_base_sequence_classifier_imdb": 14, "bertfortokenclassif": 15, "bert_base_token_classifier_conll03": 15, "bertforzeroshotclassif": 16, "modelforsequenceclassif": [16, 27, 33, 42], "nli": [16, 27, 33, 42], "natur": [16, 27, 33, 37, 42, 50, 56, 57, 58, 59, 61, 62, 63, 72, 73, 77, 85, 113, 114, 117, 135, 145, 149], "infer": [16, 27, 33, 42, 57, 58, 59, 62, 77], "equival": [16, 27, 33, 42, 144, 163, 194], "don": [16, 27, 33, 42, 62, 69, 101], "hardcod": [16, 27, 33, 42], "potenti": [16, 27, 33, 42, 49, 120], "thei": [16, 27, 33, 38, 42, 52, 54, 98, 101, 114, 118, 146, 165, 177, 190], "chosen": [16, 27, 33, 42, 52, 54, 98], "runtim": [16, 27, 33, 42], "usual": [16, 27, 33, 42, 50, 149, 174], "slower": [16, 27, 33, 42], "much": [16, 20, 27, 33, 38, 42, 56, 64, 69, 70, 101, 133, 163, 190], "flexibl": [16, 27, 33, 42, 49], "loop": [16, 27, 33, 42], "through": [16, 27, 33, 42, 56, 80, 83, 139, 191], "longer": [16, 27, 33, 42, 56, 63, 68, 73, 85, 116, 195], "ani": [16, 27, 33, 42, 63, 64, 67, 72, 73, 78, 83, 98, 114, 117, 120, 137, 138, 174, 187, 190, 191, 196], "pass": [16, 27, 33, 42], "pose": [16, 27, 33, 42], "premis": [16, 27, 33, 42], "hypothesi": [16, 27, 33, 42], "pair": [16, 27, 33, 42, 64, 80, 170], "bert_base_cased_zero_shot_classifier_xnli": 16, "camembertforquestionansw": 17, "camembert": [17, 18, 19, 59], "camembert_base_qa_fquad": 17, "fr": [17, 18, 59, 85], "camembertforsequenceclassif": 18, "sequence_classifi": 18, "camembert_base_sequence_classifier_allocin": 18, "j": [18, 78], "ai": [18, 113, 170, 186], "ador\u00e9": 18, "ce": 18, "film": 18, "lorsqu": 18, "\u00e9tai": 18, "enfant": 18, "je": 18, "d\u00e9test": 18, "\u00e7a": 18, "camembertfortokenclassif": 19, "camembert_base_token_classifier_wikin": 19, "georg": 19, "washington": 19, "est": [19, 59, 85, 116], "all\u00e9": 19, "\u00e0": 19, "classifierdl": [20, 190], "classifierdlapproach": [20, 32, 190], "gener": [20, 32, 47, 49, 56, 60, 62, 64, 67, 68, 71, 77, 80, 83, 97, 98, 100, 109, 113, 114, 117, 120, 122, 123, 138, 139, 170, 186, 189, 190, 191], "univers": [20, 52, 54, 72, 116], "encod": [20, 55, 57, 58, 61, 67, 68, 72, 100, 113, 116, 170], "deep": [20, 57, 58, 65, 83, 97, 109, 120], "dnn": 20, "insid": [20, 32, 96, 106, 131, 176], "instanti": [20, 32, 37, 52, 54, 63, 73, 74, 78, 86, 87, 91, 92, 97, 98, 101, 106, 109, 111, 112, 120, 122, 123, 127, 129, 133, 176, 177], "classifierdlmodel": [20, 32, 190], "monitor": [20, 32, 37, 98, 170, 186], "metric": [20, 32, 37, 98, 123, 170], "done": [20, 32, 37, 69, 70, 97, 98, 191], "settestdataset": [20, 32, 37, 98, 103], "method": [20, 32, 37, 56, 62, 63, 67, 73, 77, 83, 98, 118, 174, 185], "expect": [20, 32, 37, 64, 77, 98, 131, 162], "path": [20, 32, 37, 52, 54, 63, 73, 74, 78, 80, 86, 87, 91, 92, 97, 98, 100, 101, 103, 109, 111, 114, 120, 122, 123, 126, 131, 142, 144, 161, 170, 173, 176, 177, 179, 180, 186], "parquet": [20, 32, 37, 98, 103, 134], "datafram": [20, 32, 37, 50, 74, 98, 103, 106, 133, 144, 158, 162, 169, 170, 173, 176, 177, 179, 180, 186, 190, 194, 196], "ha": [20, 32, 37, 38, 47, 49, 50, 55, 56, 61, 62, 65, 69, 70, 74, 83, 86, 91, 98, 103, 109, 111, 113, 117, 122, 123, 133, 134, 135, 142, 144, 170, 174, 179, 186, 190, 191], "same": [20, 32, 37, 46, 56, 69, 74, 75, 78, 80, 98, 103, 117, 146, 170, 191], "follow": [20, 32, 37, 46, 51, 55, 65, 68, 74, 83, 88, 90, 91, 96, 98, 101, 108, 147, 148, 186, 188, 191], "universalsentenceencod": [20, 32, 37, 72, 170, 186, 190], "preprocessingpipelin": [20, 32, 37, 98, 103], "randomsplit": [20, 32, 37, 98, 103], "write": [20, 32, 37, 74, 98, 103, 122, 123, 191], "overwrit": [20, 32, 37, 98, 99, 103, 170], "test_data": [20, 32, 37, 98, 103], "setlabelcolumn": [20, 32, 37, 95, 97, 98, 102, 126, 170, 186, 190], "usag": [20, 32, 37, 46, 52, 54, 55, 56, 57, 58, 59, 60, 62, 65, 69, 72, 74, 75, 77, 78, 83, 85, 86, 88, 90, 91, 92, 97, 98, 101, 106, 108, 109, 111, 112, 113, 116, 117, 120, 122, 124, 125, 129, 131, 133], "64": [20, 32, 37, 56, 98, 102, 190], "dropout": [20, 37, 98], "coeffici": [20, 37, 97, 98], "enableoutputlog": [20, 32, 37, 98], "stdout": [20, 32, 37, 98, 103], "addit": [20, 32, 37, 52, 54, 57, 58, 78, 97, 98, 103, 108, 114, 131, 170, 189, 190], "evaluationlogextend": [20, 32, 37, 98], "valid": [20, 32, 37, 88, 98, 103, 109, 120, 186], "displai": [20, 32, 37, 103, 114, 170, 186], "time": [20, 32, 37, 56, 63, 73, 75, 76, 83, 88, 103, 112, 120, 133, 163, 189, 190, 194, 195], "labelcolumn": [20, 32, 37, 97, 98], "lr": [20, 32, 37, 98, 133], "rate": [20, 32, 37, 51, 63, 69, 70, 73, 74, 98, 102, 120], "005": [20, 37, 98, 102], "maxepoch": [20, 32, 37, 97, 98], "maximum": [20, 32, 37, 46, 63, 73, 80, 83, 95, 97, 98, 101, 102, 108, 109, 113, 114, 116, 117, 120, 122, 130, 131], "epoch": [20, 32, 37, 95, 97, 98, 102, 103, 109, 120, 170], "30": [20, 37, 83, 88, 90, 96, 102, 116, 144, 162, 173, 181, 189], "outputlogspath": [20, 32, 37, 98, 109], "randomse": [20, 32, 37, 97, 98], "random": [20, 32, 37, 63, 73, 95, 97, 98, 102, 118, 137], "seed": [20, 32, 37, 63, 73, 95, 97, 98, 102], "shuffl": [20, 32, 95, 102, 113], "testdataset": [20, 32, 37, 98, 170, 186], "statist": [20, 32, 37, 74, 83, 98, 103], "validationsplit": [20, 32, 37, 98, 109], "choos": [20, 32, 37, 60, 71, 98, 109, 122], "proport": [20, 32, 37, 98, 103, 109], "against": [20, 32, 37, 78, 83, 87, 92, 98, 103, 109, 146], "between": [20, 32, 37, 49, 52, 54, 69, 70, 72, 75, 76, 77, 80, 98, 103, 108, 109, 120], "off": [20, 32, 37, 72, 75, 76, 98, 103, 109], "verbos": [20, 32, 37, 97, 98, 103], "multiclassifierdlapproach": [20, 32, 170, 186], "sentimentdlapproach": [20, 32, 37], "accept": [20, 32, 37], "singl": [20, 32, 37, 64, 67, 74, 80, 83, 113, 127, 129, 131, 176], "item": [20, 37, 74, 170, 176, 186], "doubl": [20, 37, 134, 147], "sentenceembed": [20, 32, 37, 71, 74, 137], "In": [20, 32, 37, 47, 50, 59, 61, 62, 68, 74, 77, 78, 83, 85, 86, 87, 91, 92, 108, 109, 111, 113, 114, 117, 122, 123, 133, 170, 179, 186, 190, 191, 195, 196], "csv": [20, 37, 78, 103, 147, 190], "best": [20, 37, 56, 59, 64, 67, 69, 70, 83, 85, 98, 113, 190], "wach": [20, 190], "ever": [20, 37, 55, 190], "opinion": [20, 37, 190], "win": [20, 37, 190], "award": [20, 37, 190], "terribl": [20, 37, 190], "act": [20, 37, 190], "bad": [20, 37, 111, 170, 186, 190], "realli": [20, 37, 112, 190], "trane": 20, "smallcorpu": [20, 37, 190], "read": [20, 37, 47, 49, 50, 52, 54, 63, 73, 83, 86, 87, 88, 90, 91, 92, 97, 100, 101, 103, 109, 111, 114, 120, 122, 123, 131, 133, 134, 136, 142, 145, 158, 161, 163, 164, 170, 174, 176, 177, 179, 180, 186, 190, 196], "header": [20, 37, 38, 147, 190], "src": [20, 37, 47, 49, 50, 52, 54, 74, 86, 87, 91, 92, 97, 98, 106, 122, 123, 127, 133, 176, 177, 179, 180, 181, 190, 196], "useembed": [20, 32, 37, 72, 190], "docclassifi": [20, 32, 37, 190], "setbatchs": [20, 32, 37, 65, 98, 102, 120, 170, 186, 190], "setmaxepoch": [20, 32, 37, 95, 97, 98, 102, 170, 186, 190], "20": [20, 38, 47, 77, 96, 113, 114, 144, 147, 162, 173, 190], "setlr": [20, 32, 37, 98, 102, 170, 186, 190], "5e": [20, 37, 190], "setdropout": [20, 37, 98, 190], "pipelinemodel": [20, 32, 37, 52, 54, 55, 63, 73, 97, 98, 112, 120, 122, 123, 133, 144, 146, 170, 174, 190, 193], "v": [20, 32, 37, 51, 61, 74, 83, 85, 87, 98, 102, 103, 123, 162], "classifierdl_use_trec6": [20, 190], "trec": 20, "multiclassifierdlmodel": [20, 32], "sentimentdlmodel": [20, 32, 37], "sarcasmdl": [20, 190], "classifierdl_use_sarcasm": [20, 190], "sarcasm": [20, 190], "m": [20, 88, 90, 181, 190], "could": [20, 62, 83, 91, 103, 120, 189, 190, 191], "put": [20, 162, 190], "word": [20, 49, 50, 52, 54, 56, 60, 61, 63, 65, 69, 71, 72, 73, 74, 77, 78, 80, 83, 86, 93, 96, 99, 100, 101, 106, 111, 113, 114, 116, 117, 120, 122, 123, 124, 125, 129, 131, 132, 133, 144, 162, 173, 179, 180, 189, 190], "wake": [20, 190], "am": [20, 88, 90, 114, 127, 190], "mondai": [20, 190], "would": [20, 46, 60, 71, 88, 109, 163, 190], "arrays_zip": [20, 52, 54, 83, 190], "out": [20, 64, 83, 86, 101, 113, 114, 116, 117, 124, 125, 190], "normal": [20, 47, 49, 50, 55, 81, 87, 109, 112, 125, 137, 146, 149, 163, 190, 191], "debertaforquestionansw": 21, "deberta": [21, 22, 23, 61], "deberta_v3_xsmall_qa_squad2": 21, "debertaforsequenceclassif": 22, "v2": [22, 23, 57, 58, 61], "v3": [22, 23], "deberta_v3_xsmall_sequence_classifier_imdb": 22, "deberta_base_sequence_classifier_imdb": 22, "debertafortokenclassif": 23, "deberta_v3_xsmall_token_classifier_conll03": 23, "distilbertforquestionansw": 24, "distilbert": [24, 25, 27, 62], "distilbert_base_cased_qa_squad2": 24, "distilbertforsequenceclassif": [25, 27], "distilbert_base_sequence_classifier_imdb": 25, "distilbertfortokenclassif": 26, "distilbert_base_token_classifier_conll03": 26, "distilbertforzeroshotclassif": 27, "distilbert_base_zero_shot_classifier_uncased_mnli": 27, "albert_for_sequence_classif": [28, 81], "albert_for_token_classif": [28, 81], "bert_for_sequence_classif": [28, 81], "bert_for_token_classif": [28, 81], "bert_for_zero_shot_classif": [28, 81], "camembert_for_sequence_classif": [28, 81], "camembert_for_token_classif": [28, 81], "deberta_for_sequence_classif": [28, 81], "deberta_for_token_classif": [28, 81], "distil_bert_for_sequence_classif": [28, 81], "distil_bert_for_token_classif": [28, 81], "distil_bert_for_zero_shot_classif": [28, 81], "longformer_for_sequence_classif": [28, 81], "longformer_for_token_classif": [28, 81], "multi_classifier_dl": [28, 81], "roberta_bert_for_zero_shot_classif": [28, 81], "roberta_for_sequence_classif": [28, 81], "roberta_for_token_classif": [28, 81], "sentiment_dl": [28, 81], "xlm_roberta_for_sequence_classif": [28, 81], "xlm_roberta_for_token_classif": [28, 81], "xlm_roberta_for_zero_shot_classif": [28, 81], "xlnet_for_sequence_classif": [28, 81], "xlnet_for_token_classif": [28, 81], "longformerforquestionansw": 29, "longform": [29, 30, 31, 68], "longformer_base_base_qa_squad2": 29, "longformerforsequenceclassif": 30, "longformer_base_sequence_classifier_imdb": 30, "4096": [30, 56, 68], "longformerfortokenclassif": 31, "xlnet_base_token_classifier_conll03": [31, 44], "longformer_base_token_classifier_conll03": 31, "multiclassifierdl": 32, "bidirect": [32, 57, 58, 65, 77, 113], "gru": 32, "convolut": [32, 47, 50], "machin": [32, 47, 63, 73, 83, 97, 113, 114, 116, 117, 170, 188], "strongli": 32, "relat": [32, 52, 54, 80, 195], "variant": [32, 51, 68, 72], "mai": [32, 135, 189, 190, 191, 194, 195], "instanc": [32, 100, 102, 103, 152, 157, 163, 164, 168], "multiclass": 32, "categor": [32, 174], "precis": [32, 52, 54], "constraint": 32, "mani": [32, 61, 69, 70, 83, 113, 114, 116, 117, 133], "formal": 32, "find": [32, 52, 54, 69, 70, 72, 78, 80, 86, 88, 113, 114], "binari": [32, 142, 158, 170], "bertsentenceembed": [32, 37, 58, 70, 76], "multiclassifi": [32, 170, 186], "001": [32, 51, 97, 98], "10": [32, 46, 52, 83, 88, 90, 99, 118, 122, 170, 181, 189], "44": [32, 63, 73, 106], "shuffleperepoch": 32, "threshold": [32, 37, 63, 73, 83, 85, 97, 100, 120, 133], "minimum": [32, 37, 63, 73, 80, 83, 85, 95, 97, 98, 101, 108, 109, 113, 114, 117, 122, 123, 130, 131, 176], "ed58abb40640f983": 32, "pn": 32, "newsyou": 32, "toxic": 32, "a1237f726b5f5d89": 32, "dude": 32, "place": [32, 50], "obscen": 32, "insult": 32, "24b0d6c8733c2abe": 32, "thank": [32, 77, 83, 181], "8c4478fb239bcfc0": 32, "gee": 32, "minut": 32, "traindataset": [32, 170, 186], "printschema": [32, 134, 136, 142, 145], "root": [32, 46, 52, 54, 80, 134, 136, 142, 145, 177], "setcleanupmod": [32, 136, 145], "shrink": [32, 136, 145], "1e": [32, 170, 186], "setthreshold": [32, 37, 83, 85, 170, 186], "setvalidationsplit": [32, 103, 109], "setverbos": [32, 97, 98, 103], "multiclassifierdl_use_tox": 32, "comment": [32, 83], "jigsaw": 32, "good": [32, 59, 62, 72, 112], "stuff": 32, "wtf": 32, "kind": [32, 83, 88, 90], "crap": 32, "robertaforzeroshotclassif": 33, "robertaforsequenceclassif": [33, 35], "roberta_base_zero_shot_classifier_nli": 33, "setmaxsentencelength": [33, 36, 42, 63, 73], "roberta": [33, 34, 35, 36, 39, 40, 41, 59, 61, 68, 69, 70, 75, 76, 100, 113], "robertaforquestionansw": [34, 100], "roberta_base_qa_squad2": [34, 100], "roberta_base_sequence_classifier_imdb": 35, "robertafortokenclassif": 36, "roberta_base_token_classifier_conll03": 36, "sentimentdl": 37, "affect": [37, 131], "subject": [37, 52, 54], "view": 37, "common": [37, 78, 127, 135, 163, 193], "product": 37, "review": [37, 166], "tweet": 37, "interpret": [37, 78], "posit": [37, 61, 62, 75, 76, 77, 83, 96, 111, 112, 130, 133, 149, 170, 186], "final": [37, 68, 69, 70, 75, 76, 85, 98, 120, 190], "otheriws": [37, 85], "neutral": [37, 85], "thresholdlabel": [37, 85], "score": [37, 57, 58, 75, 76, 83, 85, 97, 98, 100, 111, 112, 114], "less": [37, 62, 85, 88, 93, 97, 116, 122], "watch": [37, 112], "32": [37, 56, 65, 181, 189, 195], "setthresholdlabel": [37, 85], "p": [37, 55, 63, 73, 85, 98, 103, 129], "sentimentdl_use_imdb": 37, "english": [37, 59, 83, 122, 125, 133, 174], "imdb": 37, "sentimentdl_use_twitt": 37, "wow": 37, "video": [37, 83], "awesom": 37, "bruh": 37, "damn": 37, "wast": [37, 112], "tapasforquestionansw": 38, "implement": [38, 63, 73, 75, 100, 109, 118, 120, 140, 141, 150, 151, 159, 165, 169], "tapa": 38, "design": [38, 47, 49, 51, 57, 58, 69, 70, 87, 113, 116, 170, 186], "about": [38, 52, 54, 69, 70, 74, 83, 100, 108, 123, 144, 146, 189, 191, 194, 195], "tabular": [38, 147], "tabl": [38, 118, 147], "tri": 38, "share": [38, 83, 191], "its": [38, 50, 61, 62, 68, 77, 83, 106, 111, 113, 116, 125, 170, 179], "table_qa_tapas_base_finetuned_wtq": 38, "document_assembl": [38, 100, 143, 147, 163], "table_json": 38, "document_t": [38, 147], "sentence_detector": [38, 81, 100, 107], "table_assembl": [38, 143, 163], "tableassembl": [38, 147], "stage": [38, 144, 146, 170, 186, 190, 191, 194], "json_data": 38, "monei": [38, 147], "ag": [38, 64, 147], "donald": [38, 147], "trump": [38, 147], "000": [38, 83, 114, 133, 147], "75": [38, 83, 147], "elon": [38, 147], "musk": [38, 147], "55": [38, 99, 147, 181], "AS": [38, 46, 100], "who": [38, 129, 190], "earn": 38, "count": [38, 120], "old": [38, 46, 179], "xlmrobertaforquestionansw": 39, "xlm": [39, 40, 41, 75, 76], "xlm_roberta_base_qa_squad2": 39, "xlmrobertaforsequenceclassif": [40, 42], "xlm_roberta_base_sequence_classifier_imdb": 40, "xlmrobertafortokenclassif": 41, "xlm_roberta_base_token_classifier_conll03": 41, "xlmrobertaforzeroshotclassif": 42, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 42, "xlmroberta": 42, "xx": [42, 75, 76, 85, 116], "xlnetforsequenceclassif": 43, "xlnet": [43, 44, 77], "xlnet_base_sequence_classifier_imdb": 43, "xlnetfortokenclassif": 44, "spanbert_coref": 45, "spanbertcorefmodel": 46, "corefer": 46, "resolut": [46, 49], "spanbert": 46, "identifi": [46, 74, 83, 87, 91, 130, 131, 170, 191], "given": [46, 47, 49, 50, 67, 78, 83, 100, 113, 114, 117, 120, 122, 123, 125, 156, 169, 170], "told": [46, 90], "mari": [46, 58, 70, 76, 109], "he": [46, 61, 90, 129, 181], "borrow": 46, "book": [46, 55, 114, 120, 177], "her": [46, 100], "link": [46, 173], "ontonot": 46, "corefresolut": 46, "spanbert_base_coref": 46, "maxsegmentlength": 46, "textgenr": 46, "genr": 46, "One": [46, 67, 83, 129, 148], "bc": 46, "broadcast": 46, "convers": 46, "bn": 46, "nw": 46, "wire": 46, "pt": 46, "pivot": 46, "testament": 46, "tc": 46, "telephon": 46, "wb": 46, "web": [46, 55, 59, 114, 170, 186], "setmaxsegmentlength": 46, "settextgenr": 46, "code": [46, 61, 63, 67, 68, 69, 70, 73, 75, 76, 83, 85, 113, 117, 187, 195], "convnextforimageclassif": 47, "convnet": 47, "convnext": 47, "2020": [47, 83, 88, 90, 109], "zhuang": 47, "liu": [47, 49, 61, 69, 70], "hanzi": 47, "mao": 47, "chao": 47, "yuan": 47, "wu": 47, "christoph": 47, "feichtenhof": 47, "trevor": 47, "darrel": 47, "sain": 47, "xie": 47, "pure": [47, 50, 116], "inspir": [47, 112, 122, 123, 166], "vision": [47, 49, 50], "claim": 47, "outperform": [47, 64, 68, 72, 75, 76, 77, 83, 114], "huggingfac": [47, 49, 50, 59], "convnextforimageclassificationtestspec": 47, "roar": 47, "visual": [47, 49, 170], "began": 47, "introduct": 47, "vit": [47, 50], "quickli": 47, "supersed": 47, "vanilla": 47, "hand": [47, 129], "face": 47, "difficulti": 47, "detect": [47, 49, 72, 84, 85, 107, 108, 109], "semant": [47, 49, 65, 67, 72, 133], "hierarch": [47, 49, 63, 73], "swin": [47, 49], "reintroduc": 47, "sever": [47, 196], "prior": [47, 62, 67, 68, 120], "practic": [47, 59, 113, 117], "viabl": 47, "backbon": [47, 49, 77], "demonstr": [47, 49, 62, 68, 83, 114, 116], "remark": 47, "wide": [47, 55, 57, 58, 61, 62, 64, 75, 76, 113], "varieti": [47, 68, 75, 76, 195], "howev": [47, 56, 71, 77, 83, 101, 174, 189], "effect": [47, 49, 50, 68, 108, 113, 117], "hybrid": 47, "still": [47, 114, 170], "credit": 47, "superior": 47, "inher": 47, "induct": [47, 62], "bias": [47, 62], "reexamin": 47, "space": [47, 63, 73, 74, 93, 149], "achiev": [47, 61, 64, 67, 68, 69, 70, 75, 76, 77, 98, 113, 114, 116, 117, 144, 194], "gradual": 47, "modern": 47, "standard": [47, 49, 50, 55, 68, 88, 90, 113, 122, 123, 131], "resnet": 47, "toward": [47, 114], "discov": [47, 187], "compon": [47, 50, 102, 103, 134, 142, 152, 157, 168, 194], "contribut": 47, "along": [47, 80], "wai": [47, 52, 54, 78, 80, 146, 173], "outcom": 47, "explor": [47, 113, 117], "famili": [47, 55, 64], "dub": [47, 75, 76], "construct": [47, 63, 73, 131, 173, 193], "compet": 47, "favor": 47, "term": [47, 83], "accuraci": [47, 49, 52, 54, 57, 58, 63, 72, 73, 75, 76, 97, 98, 106, 122, 133, 186], "scalabl": 47, "87": [47, 49], "imagenet": [47, 49, 50], "coco": [47, 49], "ade20k": [47, 49], "while": [47, 49, 50, 56, 62, 67, 74, 83, 103, 114, 170, 186, 191], "maintain": 47, "simplic": [47, 113], "effici": [47, 49, 61, 63, 72, 73, 116, 189], "dores": [47, 49, 50], "resiz": [47, 49, 50], "certain": [47, 49, 50, 120], "donorm": [47, 49, 50], "deviat": [47, 49, 50], "featureextractortyp": [47, 49, 50], "architectur": [47, 49, 50, 56, 57, 58, 61, 69, 85, 98, 109, 113, 117], "featur": [47, 49, 50, 52, 63, 73, 83, 93, 97, 103, 170, 193], "imagemean": [47, 49, 50], "imagestd": [47, 49, 50], "resampl": [47, 49, 50], "filter": [47, 49, 50, 75, 76, 83, 96, 97, 113, 114, 116, 117, 125, 162, 174], "pil": [47, 49, 50], "nearest": [47, 49, 50, 118], "bilinear": [47, 49, 50], "bicub": [47, 49, 50], "do_res": [47, 49, 50], "tupl": [47, 49, 50, 169], "dorescal": [47, 49], "rescal": [47, 49], "rescalefactor": [47, 49], "factor": [47, 49, 75, 76, 77, 113, 117, 120], "scale": [47, 49, 50, 56, 62, 64, 68, 75, 76, 113, 114, 117], "croppct": 47, "percentag": [47, 74, 120, 133], "crop": 47, "imagedf": [47, 49, 50], "dropinvalid": [47, 49, 50], "imageassembl": [47, 49, 50, 142], "image_assembl": [47, 49, 50, 143, 163], "imageclassifi": [47, 49, 50], "pipelinedf": [47, 49, 50], "revers": [47, 49, 50], "split": [47, 49, 50, 108, 109, 116, 127, 129, 130, 133], "image_nam": [47, 49, 50], "bluetick": [47, 49, 50], "jpg": [47, 49, 50], "chihuahua": [47, 49, 50], "egyptian_cat": [47, 49, 50], "jpeg": [47, 49, 50], "tabbi": [47, 49], "cat": [47, 49, 50], "hen": [47, 49, 50], "hippopotamu": [47, 49, 50], "hippo": [47, 49, 50], "river": [47, 49, 50], "hors": [47, 49, 50], "amphibiu": [47, 49, 50], "junco": [47, 49, 50], "snowbird": [47, 49, 50], "ostrich": [47, 49, 50], "struthio": [47, 49, 50], "camelu": [47, 49, 50], "ox": [47, 49, 50], "palac": [47, 49, 50], "tractor": [47, 49, 50], "thresher": 47, "thrasher": 47, "thresh": 47, "setdorescal": [47, 49], "boolean": [47, 49], "setrescalefactor": [47, 49], "255": [47, 49], "setcroppct": 47, "determin": [47, 75], "smaller": [47, 62, 63, 73], "224": 47, "256": 47, "specifi": [47, 99, 100, 109, 176, 177], "edg": [47, 62, 80], "afterward": 47, "image_classifier_convnext_tiny_224_loc": 47, "convnext_for_image_classif": 48, "swin_for_image_classif": 48, "vit_for_image_classif": 48, "swinforimageclassif": 49, "swinimageclassif": 49, "shift": 49, "window": [49, 63, 68, 73, 83, 98, 120], "ze": 49, "yutong": 49, "lin": 49, "yue": 49, "cao": 49, "han": 49, "hu": 49, "yixuan": 49, "zheng": 49, "zhang": 49, "stephen": 49, "bain": 49, "guo": 49, "whose": 49, "scheme": [49, 69, 113], "bring": [49, 190], "greater": [49, 83], "attent": [49, 50, 61, 68], "non": [49, 131, 133], "overlap": [49, 87, 92], "cross": [49, 75, 76, 99], "connect": 49, "image_classifier_swin_base_patch4_window7_224": 49, "swinforimageclassificationtest": 49, "present": [49, 56, 64, 65, 68, 69, 70, 72, 75, 76, 80, 103, 109, 113, 116], "call": [49, 57, 58, 62, 64, 83, 114, 169, 174, 176, 190, 196], "capabl": [49, 62, 77, 114], "serv": [49, 187], "purpos": [49, 62, 64, 109], "adapt": 49, "aris": 49, "domain": [49, 67, 83, 114], "variat": 49, "high": [49, 72, 75, 76, 113, 116], "compar": [49, 50, 56, 61, 62, 65, 67, 77, 83, 109, 113, 117, 120, 170, 186], "variou": [49, 77, 184], "complex": [49, 65, 72, 83, 122, 123], "respect": [49, 61, 74, 97, 98, 179], "These": [49, 56, 69, 70, 77, 83, 97, 114, 173, 188], "broad": [49, 114], "rang": [49, 57, 58, 61, 62, 64, 67, 75, 76, 113], "1k": 49, "dens": [49, 57, 58], "box": 49, "ap": 49, "51": [49, 136, 145, 179], "53": [49, 87, 92], "miou": 49, "val": 49, "Its": [49, 54, 100, 113], "surpass": [49, 61], "previou": [49, 67, 75, 76, 114, 190], "margin": [49, 77], "prove": 49, "benefici": [49, 83], "mlp": 49, "vitforimageclassif": 50, "altern": [50, 83, 111, 120, 122, 123, 144, 147, 190, 195], "neural": [50, 57, 58, 61, 98, 109, 113, 116], "network": [50, 57, 58, 65, 98, 109], "image_classifier_vit_base_patch16_224": 50, "vitimageclassificationtestspec": 50, "becom": [50, 56, 62, 83], "de": [50, 59, 83, 85, 116], "facto": [50, 83], "remain": [50, 55, 56, 62, 83], "conjunct": 50, "replac": [50, 55, 61, 68, 85, 86, 99, 109, 113, 122, 123, 156, 190], "keep": [50, 83, 101, 113, 114, 117], "overal": [50, 74, 77], "structur": [50, 100, 149, 189], "relianc": 50, "cnn": [50, 85, 98, 109], "necessari": [50, 62, 186, 193], "directli": [50, 144, 170, 174, 186], "patch": 50, "veri": [50, 59, 65, 75, 76, 77, 113, 114, 116, 117, 144, 189, 191, 194, 195], "well": [50, 52, 54, 64, 72, 75, 76, 83, 113, 147], "amount": [50, 72, 83, 92, 114, 133, 144, 194], "transfer": [50, 62, 64, 72, 75, 76, 113, 114, 117], "mid": 50, "small": [50, 55, 56, 59, 62, 63, 73, 86, 106, 144, 179, 194], "cifar": 50, "vtab": 50, "etc": [50, 60, 64, 67, 137, 149, 186], "attain": 50, "excel": [50, 77], "substanti": [50, 57, 58], "fewer": [50, 56, 67], "worth": 50, "16x16": 50, "egyptian": 50, "date2chunk": 51, "datematch": [51, 88], "multidatematch": [51, 88, 90], "entitynam": 51, "date_chunk": 51, "omicron": 51, "covid": 51, "world": [51, 55, 127, 170, 181, 186], "health": 51, "organ": [51, 83, 116], "nov": [51, 88, 90, 179], "26": [51, 96, 144, 162, 173, 181], "2021": [51, 88, 90], "118": [51, 147], "121": 51, "01": [51, 88, 90, 91], "setentitynam": 51, "dependencypars": [52, 54, 80], "dependencyparserapproach": [52, 177, 196], "unlabel": [52, 57, 58, 113, 114, 117], "grammat": [52, 54], "dependencyparsermodel": [52, 54, 80], "relationship": [52, 54, 72, 80], "tell": [52, 54, 83, 162], "verb": [52, 54, 177], "modifi": [52, 54, 69, 70, 96, 109], "describ": [52, 54, 80, 83, 116], "particular": [52, 54, 83, 174, 190], "treebank": 52, "penn": 52, "setdependencytreebank": 52, "conll": [52, 54, 97, 98, 163, 177, 178, 193], "u": [52, 54, 61, 62, 83, 90, 96, 97, 98, 144, 162, 173, 177, 188, 191, 196], "setconllu": [52, 54], "dependencytreebank": 52, "conllu": [52, 54, 86, 163, 178, 193], "numberofiter": [52, 54], "converg": [52, 54, 106, 133], "better": [52, 54, 56, 61, 77, 83, 97, 106, 108, 109, 112, 113, 133], "typeddependencyparserapproach": [52, 54], "postagg": [52, 54, 80, 97, 106], "dependency_treebank": 52, "emptydataset": [52, 54], "tree": [52, 80], "bank": 52, "setnumberofiter": [52, 54], "read_a": [52, 54, 78, 86, 87, 91, 92, 97, 101, 103, 111, 122, 123, 131, 155, 161, 163, 176, 177], "reada": [52, 54, 74, 78, 86, 87, 91, 92, 97, 101, 103, 111, 122, 123, 127, 131, 158, 161, 176, 177], "dep": 52, "dependency_conllu": [52, 80], "perceptron": [52, 81, 105], "typeddependencyparsermdoel": 52, "union": [52, 54], "worker": [52, 54], "turner": [52, 54], "newal": [52, 54], "sai": [52, 54, 83, 131], "disappoint": [52, 54], "talk": [52, 54], "stricken": [52, 54], "parent": [52, 54], "firm": [52, 54], "feder": [52, 54], "mogul": [52, 54], "dependency_pars": [53, 81, 174, 195], "typed_dependency_pars": [53, 81], "typeddependencypars": [54, 80], "conll2009": 54, "typeddependencyparsermodel": [54, 80], "beforehand": 54, "2009": 54, "setconll2009": 54, "dependency_typ": [54, 80], "train_smal": 54, "txt": [54, 63, 73, 74, 86, 87, 91, 92, 106, 109, 111, 120, 122, 123, 127, 131, 179, 180, 196], "descript": [54, 67, 71, 83, 88, 122, 129, 156, 158], "typdep": 54, "dependency_typed_conllu": [54, 80], "amod": 54, "flat": [54, 80, 139], "nsubj": [54, 80, 139, 177], "parataxi": 54, "documentnorm": 55, "raw": [55, 114, 129, 131, 133, 189, 191], "scrape": 55, "xml": 55, "remov": [55, 69, 70, 101, 112, 130, 137, 138, 139], "dirti": [55, 101], "regex": [55, 78, 88, 91, 101, 120, 122, 123, 130, 131, 133], "want": [55, 78, 99, 174, 191], "polici": 55, "__": [55, 113, 137, 138], "action": 55, "clean": [55, 101, 113, 117, 149, 191], "lowercas": [55, 101, 130, 133, 135], "pretty_al": 55, "utf": 55, "cleanuppattern": [55, 101], "normalizeddocu": 55, "setact": 55, "setpattern": [55, 130, 133], "setreplac": 55, "setpolici": 55, "setlowercas": [55, 101, 135, 149], "div": 55, "theworldsgreatest": 55, "right": [55, 57, 58, 113, 133], "hide": 55, "toptext": 55, "style": [55, 85, 117], "font": 55, "sego": 55, "ui": 55, "arial": 55, "san": [55, 83], "serif": 55, "largest": [55, 83, 114], "develop": [55, 83, 116, 167], "site": [55, 83], "h1": 55, "300": 55, "160": 55, "lorem": [55, 87, 92], "ipsum": [55, 87, 92], "simpli": [55, 67, 191], "print": [55, 163, 174], "typeset": 55, "industri": 55, "been": [55, 59, 114, 148, 149, 174], "1500": 55, "unknown": [55, 85], "printer": 55, "took": 55, "gallei": 55, "scrambl": 55, "specimen": 55, "surviv": 55, "five": [55, 99], "centuri": [55, 133], "leap": 55, "electron": 55, "essenti": [55, 114], "unchang": 55, "popularis": 55, "1960": 55, "releas": [55, 56, 59, 61, 69, 70, 75, 76, 113, 117, 163], "letraset": 55, "passag": [55, 64], "recent": [55, 57, 58, 61, 69, 70, 83, 113], "desktop": 55, "publish": [55, 69, 70], "softwar": 55, "aldu": 55, "pagemak": 55, "setencod": 55, "lite": 56, "googl": [56, 57, 58, 61, 63, 65, 69, 70, 72, 73, 83, 117, 177], "research": [56, 57, 58, 61, 63, 73, 116, 117], "toyota": 56, "technolog": 56, "institut": 56, "chicago": 56, "offici": [56, 83, 96, 97, 98, 144, 162, 173, 187], "tf": [56, 72], "wrapper": [56, 166], "port": 56, "properti": [56, 140, 141, 152, 155, 163], "albert_base_uncas": 56, "albert_bas": 56, "768": [56, 57, 58, 59, 61, 62, 64, 67, 68, 69, 70, 75, 76, 77], "emb": 56, "dim": 56, "12m": 56, "albert_large_uncas": 56, "albert_larg": 56, "1024": [56, 65, 68, 77], "24": [56, 77, 87, 92, 96, 120, 144, 162, 173, 189], "16": [56, 77, 99, 179, 189], "18m": 56, "albert_xlarge_uncas": 56, "albert_xlarg": 56, "2048": 56, "60m": 56, "albert_xxlarge_uncas": 56, "albert_xxlarg": 56, "235m": 56, "sentencepiec": [56, 61, 72], "everi": [56, 57, 58, 59, 61, 62, 64, 67, 68, 69, 70, 75, 76, 77, 98, 112, 116, 120, 136, 145, 146, 191], "dimens": [56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 157], "repeat": 56, "footprint": 56, "cost": [56, 120, 122], "similar": [56, 67, 72, 83, 85], "FOR": 56, "http": [56, 59, 61, 63, 65, 67, 72, 73, 113, 133, 187], "tfhub": [56, 65, 72], "q": 56, "increas": [56, 64, 74, 83, 113, 114, 122], "often": [56, 69, 70, 77], "downstream": [56, 59, 61, 65, 67, 68, 77, 113, 114, 117], "some": [56, 58, 75, 83, 98, 109, 114, 146, 170, 181, 189, 190, 194, 195], "point": [56, 57, 58, 108, 109, 136, 145, 176], "harder": 56, "gpu": [56, 113, 114, 116, 117, 163], "tpu": 56, "techniqu": [56, 61, 113, 114, 117], "consumpt": [56, 72, 74], "speed": [56, 97, 116], "devlin": [56, 69, 70], "et": [56, 69, 70, 85], "al": [56, 69, 70], "2019": [56, 59, 61, 69, 70, 75, 76, 113], "comprehens": [56, 113, 114], "empir": [56, 57, 58, 75, 76, 77], "evid": 56, "lead": [56, 59, 75, 76], "focus": [56, 83], "inter": 56, "coher": [56, 114], "As": [56, 57, 58, 62, 64, 83], "establish": 56, "glue": [56, 57, 58, 62, 69, 70, 75, 76, 113], "race": [56, 61, 69, 70], "embeddingsfinish": [56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 137], "finished_embed": [56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "setoutputasvector": [56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 137], "setcleanannot": [56, 61, 62, 65, 68, 69, 71, 72, 74, 75, 77, 137, 138, 139], "80": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 137, 149], "1342473030090332": [56, 61], "3855540752410889": [56, 61], "9818322062492371": [56, 61], "784737348556518": [56, 61], "847029983997345": [56, 61], "047153353691101": [56, 61], "1520637571811676": [56, 61], "6245765686035156": [56, 61], "009860038757324219": [56, 61], "13450059294700623": [56, 61], "707749128341675": [56, 61], "2916892766952": [56, 61], "04192575812339783": [56, 61], "5764210224151611": [56, 61], "3196685314178467": [56, 61], "527840495109": [56, 61], "15583214163780212": [56, 61], "1614152491092682": [56, 61], "28423872590065": [56, 61], "135491415858268": [56, 61], "bertembed": [57, 60, 67, 71, 98, 137], "small_bert_l2_768": 57, "understand": [57, 58, 62, 75, 77, 83, 113, 117, 133, 189], "introduc": [57, 58, 62, 65, 67, 68, 113, 117], "stand": [57, 58], "unlik": [57, 58, 67, 75, 83, 129], "jointli": [57, 58], "condit": [57, 58, 113, 114, 117], "both": [57, 58, 64, 65, 72, 80, 113, 190, 191], "left": [57, 58, 113, 133], "just": [57, 58, 62, 69, 93, 98], "without": [57, 58, 64, 67, 75, 76, 83, 114, 133], "modif": [57, 58], "conceptu": [57, 58], "power": [57, 58, 113, 117], "obtain": [57, 58, 59, 64, 72], "eleven": [57, 58], "push": [57, 58], "absolut": [57, 58], "multinli": [57, 58], "86": [57, 58, 61], "v1": [57, 58], "f1": [57, 58, 75, 76, 98, 114], "93": [57, 58], "83": [57, 58, 61, 179, 180, 196], "small_bert_l2_128": 57, "3497989177703857": [57, 67], "480538547039032": [57, 67], "3238905668258667": [57, 67], "612930893898010": [57, 67], "1357314586639404": 57, "32984697818756104": 57, "6032363176345825": 57, "6791689395904": 57, "8244884014129639": 57, "27088963985443115": 57, "059438943862915": 57, "9817547798156": 57, "1648050546646118": 57, "4725411534309387": 57, "5938255786895752": 57, "5780693292617": 57, "9125322699546814": 57, "4563939869403839": 57, "3975459933280945": 57, "81611204147338": 57, "sentence_bert_embed": 58, "sent_small_bert_l2_768": 58, "islong": 58, "long": [58, 68, 77], "sent_small_bert_l2_128": 58, "orang": [58, 70, 76], "8951074481010437": [58, 70, 76], "13753940165042877": [58, 70, 76], "3108254075050354": [58, 70, 76], "65693199634552": [58, 70, 76], "6180210709571838": [58, 70, 76], "12179657071828842": [58, 70, 76], "191165953874588": [58, 70, 76], "4497021436691": [58, 70, 76], "822715163230896": [58, 70, 76], "7568016648292542": [58, 70, 76], "1165061742067337": [58, 70, 76], "59048593044281": [58, 70, 76], "setislong": 58, "camembertembed": 59, "tasti": 59, "french": [59, 83, 116, 125], "loui": 59, "martin": 59, "muller": 59, "pedro": 59, "javier": 59, "ortiz": 59, "su\u00e1rez": 59, "yoann": 59, "dupont": 59, "laurent": 59, "romari": 59, "\u00e9ric": 59, "villemont": 59, "la": [59, 116], "clergeri": 59, "djam\u00e9": 59, "seddah": 59, "beno\u00eet": 59, "sagot": 59, "facebook": [59, 61, 75, 76, 113], "138gb": 59, "camembert_bas": 59, "camembertembeddingstestspec": 59, "co": [59, 83], "ubiquit": 59, "despit": [59, 113], "most": [59, 62, 68, 83, 98, 113, 114, 116, 117], "concaten": [59, 133], "except": [59, 93, 98, 131], "investig": [59, 62, 72], "feasibl": 59, "monolingu": [59, 75, 76], "crawl": [59, 113, 117], "prefer": [59, 80, 139], "wikipedia": [59, 85, 114], "surprisingli": [59, 72], "4gb": 59, "those": [59, 80, 99, 190, 191], "larger": [59, 62, 69, 70, 113, 114, 116, 117], "130": 59, "gb": 59, "reach": [59, 83, 114, 133], "four": [59, 109, 133, 148], "un": [59, 85], "08442357927560806": 59, "12863239645957947": 59, "03835778683423996": 59, "200479581952": 59, "048462312668561935": 59, "12637358903884888": 59, "27429091930389404": 59, "07516729831": 59, "02690504491329193": 59, "12104076147079468": 59, "012526623904705048": 59, "031543646007": 59, "05877285450696945": 59, "08773420006036758": 59, "06381352990865707": 59, "122621834278": 59, "chunkembed": [60, 137], "wordembed": [60, 71, 74, 98, 137, 163], "chunker": [60, 81, 163], "ngramgener": [60, 93], "nerconvert": [60, 96, 97, 98, 170, 186], "poolingstrategi": [60, 71], "aggreg": [60, 71], "sum": [60, 65, 71], "skipoov": 60, "discard": [60, 100], "oov": 60, "ngram": [60, 93, 113, 114, 117], "setn": [60, 93], "wordembeddingsmodel": [60, 71, 74, 80, 97, 98, 99, 137], "setpoolingstrategi": [60, 71], "55661": 60, "42829502": 60, "86661": 60, "409785": 60, "06316501": 60, "120775": 60, "0732005": 60, "40674996": 60, "22938299": 60, "50597": 60, "288195": 60, "555655": 60, "465145": 60, "140118": 60, "17417": 60, "095253006": 60, "0530925": 60, "218465": 60, "714395": 60, "79860497": 60, "0129999": 60, "139705": 60, "177955": 60, "1887775": 60, "45545": 60, "20030999": 60, "461557": 60, "07891501": 60, "strategi": [60, 71, 88, 91, 108, 120, 156], "setskipoov": 60, "debertaembed": 61, "decod": [61, 68, 113, 114, 116, 117], "enhanc": [61, 112, 113], "disentangl": 61, "pengcheng": 61, "xiaodong": 61, "jianfeng": 61, "gao": 61, "weizhu": 61, "chen": [61, 69, 70], "2018": [61, 69, 70], "half": [61, 83], "deberta_v3_bas": 61, "microsoft": [61, 64, 116], "www": 61, "blog": 61, "human": [61, 83], "superglu": 61, "progress": [61, 109, 130], "significantli": [61, 65, 69, 70, 75, 76, 83], "novel": [61, 77, 83, 113], "mechan": [61, 68], "weight": [61, 65, 83, 97, 99, 120], "among": 61, "matric": 61, "second": [61, 65, 91, 108, 125, 130, 190], "mnli": 61, "9": [61, 75, 76, 93, 189, 194, 195], "90": 61, "91": 61, "88": 61, "made": [61, 72, 186], "publicli": [61, 75, 76], "distilbertembed": 62, "fast": [62, 112, 116, 144, 194], "cheap": 62, "distil": 62, "40": [62, 64, 99, 116], "uncas": 62, "preserv": [62, 96, 130, 149], "95": 62, "measur": [62, 69, 70, 113, 170], "distilbert_base_cas": 62, "doesn": [62, 69], "token_type_id": [62, 69], "indic": [62, 69, 130, 133], "belong": [62, 69], "separ": [62, 69, 91, 93, 108, 109, 122, 131, 133, 138, 162, 176, 188], "sep_token": [62, 69], "sep": 62, "position_id": 62, "ad": [62, 65, 120], "though": [62, 83], "know": [62, 116, 146], "cheaper": 62, "lighter": 62, "preval": 62, "oper": [62, 68, 120, 129, 189], "constrain": 62, "budget": 62, "counterpart": 62, "leverag": [62, 170, 186], "reduc": [62, 122, 123, 149], "retain": 62, "97": [62, 88, 90, 133], "being": [62, 98, 103, 113, 116, 117], "tripl": [62, 80], "cosin": 62, "distanc": [62, 118, 120, 122, 123], "devic": 62, "proof": 62, "concept": [62, 191], "experi": [62, 77, 113, 170, 187], "studi": [62, 69, 70, 113, 117], "1127224713563919": 62, "1982710212469101": 62, "5360898375511169": 62, "272536993026733": 62, "35534414649009705": 62, "13215228915214539": 62, "40981462597846985": 62, "14036104083061": 62, "328085333108902": 62, "06269335001707077": 62, "017595693469047546": 62, "024373905733": 62, "15617232024669647": 62, "2967822253704071": 62, "22324979305267334": 62, "04568954557180": 62, "45411425828933716": 62, "01173491682857275": 62, "190129816532135": 62, "1178255230188369": 62, "doc2vecapproach": 63, "word2vec": [63, 66, 81], "corpu": [63, 65, 73, 83, 86, 106, 113, 117, 120, 179, 196], "algorithm": [63, 73, 83, 97, 112, 120, 122, 123], "vocabulari": [63, 73, 113, 114, 117, 120], "skip": [63, 73, 80, 120], "gram": [63, 64, 73, 83, 93, 113, 114, 117], "doc2vecmodel": 63, "vectors": [63, 73], "windows": [63, 73, 83], "numpartit": [63, 73], "partit": [63, 73, 176], "mincount": [63, 73, 120], "must": [63, 73, 86, 87, 91, 92, 103, 111, 112, 122, 123, 135, 162, 163, 170, 176], "appear": [63, 73, 120], "divid": [63, 73], "1000": [63, 73, 80, 97], "stepsiz": [63, 73], "optim": [63, 69, 70, 73, 98, 100, 109], "025": [63, 73], "maxit": [63, 73], "estim": [63, 73, 118, 126, 140, 150, 159, 169, 190], "distribut": [63, 73], "composition": [63, 73], "sherlockholm": [63, 73, 120, 196], "setvectors": [63, 73], "setwindows": [63, 73, 83], "setsteps": [63, 73], "initi": [63, 73, 120, 130, 146, 163, 176, 177, 179, 180, 186], "setnumpartit": [63, 73], "setmaxit": [63, 73], "numiter": [63, 73], "equal": [63, 73], "setse": [63, 73], "setmincount": [63, 73, 120], "doc2vec_gigaword_300": 63, "06222493574023247": [63, 73], "011579325422644615": [63, 73], "009919632226228714": [63, 73], "109361454844": [63, 73], "doc2vec_wiki": 63, "e5embed": 64, "e5": 64, "weakli": 64, "tailor": [64, 67], "e5_smal": 64, "contrast": [64, 67, 68, 87, 117], "unilm": 64, "manner": [64, 83], "weak": 64, "signal": [64, 65], "curat": 64, "ccpair": 64, "readili": 64, "strong": [64, 75, 76], "zero": [64, 74, 100, 114], "shot": [64, 100, 114], "conduct": 64, "extens": [64, 166], "56": [64, 179], "beir": 64, "mteb": 64, "bm25": 64, "baselin": [64, 72, 114], "beat": 64, "exist": [64, 65, 120, 137, 139, 170], "queri": [64, 187], "protein": 64, "femal": 64, "eat": 64, "guidelin": 64, "cdc": 64, "women": 64, "70": [64, 67], "46": [64, 181], "dai": [64, 88, 90, 120], "But": 64, "chart": [64, 170, 186], "ll": [64, 133], "marathon": 64, "check": [64, 98, 108, 120, 121, 122, 123, 144, 149, 173, 190, 195], "below": [64, 80, 195], "0190285e": 64, "005974853": 64, "072875895": 64, "007944068": 64, "026059335": 64, "0080": 64, "050514214": 64, "010061974": 64, "04340176": 64, "020937217": 64, "05170225": 64, "01157857": 64, "elmoembed": 65, "elmo": 65, "billion": [65, 114], "computation": [65, 69, 70, 77, 113, 114, 116, 117], "expens": [65, 69, 70, 77, 111, 113, 114, 116, 117, 122], "lookup": [65, 74, 77, 87, 122, 123], "acceler": [65, 77, 113, 114, 116, 117, 163], "setpoolinglay": 65, "word_emb": 65, "shape": 65, "batch_siz": 65, "max_length": 65, "lstm_outputs1": 65, "lstm": [65, 98], "lstm_outputs2": 65, "trainabl": 65, "tensor": 65, "poolinglay": 65, "contextu": [65, 113, 120], "characterist": 65, "syntax": 65, "vari": 65, "across": [65, 114], "linguist": [65, 133], "polysemi": 65, "intern": [65, 102, 103, 120, 131, 133, 147, 152, 157, 163], "bilm": 65, "six": [65, 122, 123], "textual": [65, 67], "entail": 65, "expos": 65, "crucial": 65, "mix": [65, 118, 151, 169], "semi": 65, "662458181381226e": 65, "2541114091873169": 65, "6275503039360046": 65, "5787073969841": 65, "19154725968837738": 65, "22998669743537903": 65, "2894386649131775": 65, "21524395048618": 65, "10400570929050446": 65, "12288510054349899": 65, "07056470215320587": 65, "246389418840": 65, "49932169914245605": 65, "12706467509269714": 65, "30969417095184326": 65, "2643227577209": 65, "8871506452560425": 65, "20039963722229004": 65, "0601330995559692": 65, "0348707810044": 65, "albert_embed": [66, 81], "bert_embed": [66, 81], "bert_sentence_embed": [66, 81], "camembert_embed": [66, 81], "chunk_embed": [66, 81], "deberta_embed": [66, 81], "distil_bert_embed": [66, 81], "doc2vec": [66, 81], "e5_embed": [66, 81], "elmo_embed": [66, 81], "instructor_embed": [66, 81], "longformer_embed": [66, 81], "roberta_embed": [66, 81], "roberta_sentence_embed": [66, 81], "universal_sentence_encod": [66, 81], "xlm_roberta_embed": [66, 81], "xlm_roberta_sentence_embed": [66, 81], "xlnet_embed": [66, 81], "instructorembed": 67, "instructor": 67, "finetun": [67, 68, 77], "scienc": [67, 83, 187], "financ": 67, "sota": [67, 77], "divers": [67, 72, 113, 114, 117, 187], "setinstruct": 67, "medicin": 67, "instructor_bas": 67, "summar": [67, 68, 83, 113, 114, 116, 117], "embedd": 67, "hkunlp": 67, "togeth": 67, "explain": [67, 170, 186, 193, 195], "special": [67, 120, 133, 164, 191], "330": 67, "multitask": [67, 114], "mixtur": 67, "66": [67, 99], "unseen": 67, "magnitud": [67, 122, 123], "suggest": [67, 114], "robust": 67, "chang": [67, 166], "mitig": 67, "url": 67, "io": 67, "dynam": [67, 116], "scalar": 67, "degre": 67, "freedom": 67, "horava": 67, "lifshitz": 67, "graviti": 67, "longformerembed": 68, "iz": 68, "beltagi": 68, "matthew": 68, "arman": 68, "cohan": 68, "checkpoint": 68, "mlm": 68, "096": 68, "longformer_base_4096": 68, "unabl": 68, "quadrat": 68, "linearli": 68, "easi": 68, "thousand": 68, "drop": [68, 125], "motiv": 68, "global": 68, "text8": 68, "enwik8": 68, "wikihop": 68, "triviaqa": 68, "led": [68, 69, 70, 83], "arxiv": [68, 113], "found": [68, 74, 83, 122, 129, 135, 176, 193], "18792399764060974": [68, 69], "14591649174690247": [68, 69], "20547787845134735": [68, 69], "1468472778797": [68, 69], "22845706343650818": [68, 69], "18073144555091858": [68, 69], "09725798666477203": [68, 69], "0417917296290": [68, 69], "07037967443466187": [68, 69], "14801117777824402": [68, 69], "03603338822722435": [68, 69], "17893412709": [68, 69], "08734266459941864": [68, 69], "2486150562763214": [68, 69], "009067727252840996": [68, 69], "24408400058": [68, 69], "22409197688102722": [68, 69], "4312366545200348": [68, 69], "1401449590921402": [68, 69], "356410235166549": [68, 69], "robertaembed": [69, 75], "robustli": [69, 70, 100], "yinhan": [69, 70], "myle": [69, 70, 75, 76], "ott": [69, 70, 75, 76], "naman": [69, 70, 75, 76], "goyal": [69, 70, 75, 76], "jingfei": [69, 70], "du": [69, 70, 85], "mandar": [69, 70], "joshi": [69, 70], "danqi": [69, 70], "omer": [69, 70], "levi": [69, 70], "mike": [69, 70], "lewi": [69, 70], "luke": [69, 70, 75, 76], "zettlemoy": [69, 70, 75, 76], "veselin": [69, 70, 75, 76], "stoyanov": [69, 70, 75, 76], "hyperparamet": [69, 70], "next": [69, 70, 83, 88, 90, 113, 114, 117], "mini": [69, 70], "roberta_bas": 69, "bpe": 69, "gpt": [69, 113, 114], "signific": [69, 70, 75, 76, 83, 86], "gain": [69, 70, 75, 76, 113], "care": [69, 70, 131], "comparison": [69, 70, 72, 125], "privat": [69, 70, 164], "choic": [69, 70, 91], "impact": [69, 70], "replic": [69, 70, 113], "carefulli": [69, 70], "undertrain": [69, 70], "exce": [69, 70], "highlight": [69, 70], "previous": [69, 70, 83], "overlook": [69, 70], "rais": [69, 70, 83, 93, 98, 170], "report": [69, 70, 72, 113, 170, 186], "robertasentenceembed": 70, "sent_roberta_bas": 70, "embeddingssent": 71, "22093398869037628": 71, "25130119919776917": 71, "41810303926467896": 71, "380883991718": 71, "dimension": 72, "tfhub_us": 72, "loadsp": 72, "op": 72, "lingual": [72, 75, 76, 83, 85, 116], "accur": [72, 112, 113, 122], "trade": [72, 75, 76], "tend": 72, "With": [72, 77, 83], "observ": 72, "minim": [72, 100, 116], "encourag": 72, "weat": 72, "bia": 72, "freeli": 72, "04616805538535118": 72, "022307956591248512": 72, "044395286589860916": 72, "0016493503": 72, "setloadsp": 72, "word2vecapproach": 73, "word2vecmodel": 73, "word2vec_gigaword_300": 73, "word2vec_wiki": 73, "custom": [74, 97, 98, 108, 109, 131, 163, 170], "dictionari": [74, 83, 86, 91, 97, 99, 100, 101, 111, 122, 123, 170], "setstoragepath": [74, 87], "line": [74, 78, 87, 92, 109, 111, 120, 173, 176, 179], "delimit": [74, 78, 80, 86, 91, 93, 97, 101, 111, 130, 147, 176, 179], "39658191506190343": 74, "630968081620067": 74, "5393722253731201": 74, "8428180123359783": 74, "were": [74, 98, 170, 186], "7535235923631415": 74, "9699218875629833": 74, "10397182122983872": 74, "11833962569383116": 74, "stress": 74, "0492683418305907": 74, "9415954572751959": 74, "47624463167525755": 74, "16790967216778263": 74, "induc": 74, "1535748762292387": 74, "33498936903209897": 74, "9235178224122094": 74, "1158772920395934": 74, "withcoveragecolumn": 74, "overallcoverag": 74, "writebuffers": 74, "dump": 74, "disk": [74, 190, 191], "storag": [74, 78, 87, 155, 163], "10000": 74, "readcaches": 74, "cach": [74, 113, 174], "higher": [74, 83, 112, 113, 114, 117], "random_embeddings_dim4": 74, "abov": [74, 80, 179], "setstorageref": 74, "glove_4d": 74, "setdimens": [74, 157], "patient": 74, "diagnos": 74, "diabet": 74, "9439099431037903": 74, "4707513153553009": 74, "806300163269043": 74, "16176554560661316": 74, "7966810464859009": 74, "5551124811172485": 74, "8861005902290344": 74, "28284206986427307": 74, "025029370561242104": 74, "35177749395370483": 74, "052506182342767715": 74, "1887107789516449": 74, "08617766946554184": 74, "8399239182472229": 74, "5395117998123169": 74, "7864698767662048": 74, "6599600911140442": 74, "16109347343444824": 74, "6041093468666077": 74, "8913561105728149": 74, "5955275893211365": 74, "01899011991918087": 74, "4397728443145752": 74, "8911281824111938": 74, "9840458631515503": 74, "7599489092826843": 74, "9417727589607239": 74, "8624503016471863": 74, "setwritebuffers": 74, "setreadcaches": 74, "glove_100d": [74, 98], "There": [74, 78, 80, 129, 188, 190, 191, 196], "conveni": 74, "coverag": [74, 154], "add": [74, 88, 90, 108, 113, 114, 117, 120, 131, 190], "stat": 74, "field": [74, 78, 92], "whole": [74, 173], "570580005645752": 74, "44183000922203064": 74, "7010200023651123": 74, "417129993438720": 74, "542639970779419": 74, "4147599935531616": 74, "0321999788284302": 74, "4024400115013122": 74, "2708599865436554": 74, "04400600120425224": 74, "020260000601410866": 74, "17395000159": 74, "6191999912261963": 74, "14650000631809235": 74, "08592499792575836": 74, "2629800140857": 74, "3397899866104126": 74, "20940999686717987": 74, "46347999572753906": 74, "6479200124740": 74, "embeddings_col": 74, "coverageresult": 74, "coverateresult": 74, "wordsoverallcoverag": 74, "resultdf": 74, "output_col": 74, "wordscoverag": 74, "cov_embed": 74, "loadstorag": [74, 87], "storage_ref": [74, 87], "xlmrobertaembed": 75, "alexi": [75, 76], "conneau": [75, 76], "kartikai": [75, 76], "khandelw": [75, 76], "vishrav": [75, 76], "chaudhari": [75, 76], "guillaum": [75, 76], "wenzek": [75, 76], "francisco": [75, 76, 83], "guzman": 75, "edouard": [75, 76], "grave": [75, 76], "5tb": [75, 76], "commoncrawl": [75, 76], "xlm_roberta_bas": 75, "multilingu": [75, 76, 133], "doe": [75, 83, 96, 116, 144, 146, 174, 191, 194, 195], "abl": [75, 117, 170, 189], "correct": [75, 120, 122, 123, 133], "hundr": [75, 76], "terabyt": [75, 76], "r": [75, 76, 83], "mbert": [75, 76], "xnli": [75, 76], "mlqa": [75, 76], "particularli": [75, 76, 113], "low": [75, 76, 120], "swahili": [75, 76], "urdu": [75, 76], "capac": [75, 76, 114], "dilut": [75, 76], "sacrif": [75, 76], "ri": [75, 76], "competit": [75, 76, 83], "05969233065843582": 75, "030789051204919815": 75, "04443822056055069": 75, "09564960747": 75, "038839809596538544": 75, "011712731793522835": 75, "019954433664679527": 75, "0667808502": 75, "03952755779027939": 75, "03455188870429993": 75, "019103847444057465": 75, "04311436787": 75, "09579929709434509": 75, "02494969218969345": 75, "014753809198737144": 75, "10259044915": 75, "004710011184215546": 75, "022148698568344116": 75, "011723337695002556": 75, "013356896": 75, "xlmrobertasentenceembed": 76, "guzm\u00e3": 76, "sent_xlm_roberta_bas": 76, "xlnetembed": 77, "autoregress": 77, "permut": 77, "addition": [77, 98, 106, 136, 145, 173], "emploi": 77, "xl": 77, "exhibit": 77, "involv": [77, 109], "rank": [77, 118, 120], "xlnet_large_cas": 77, "xlnet_base_cas": 77, "full": [77, 190], "zihangdai": 77, "denois": [77, 113], "autoencod": [77, 113], "corrupt": [77, 113], "neglect": 77, "suffer": 77, "discrep": 77, "pro": 77, "con": 77, "enabl": [77, 98, 122, 163], "maxim": [77, 120], "likelihood": 77, "overcom": 77, "formul": 77, "furthermor": 77, "integr": [77, 83, 116, 170, 186, 188], "idea": 77, "6287205219268799": 77, "4865287244319916": 77, "186111718416214": 77, "234187275171279": 77, "1967450380325317": 77, "2746637463569641": 77, "9481253027915955": 77, "3431355059146881": 77, "0777631998062134": 77, "092679977416992": 77, "5331977605819702": 77, "11190271377563": 77, "8349916934967041": 77, "45627787709236145": 77, "7890847325325012": 77, "028069257736": 77, "134845569729805": 77, "11672890186309814": 77, "4945235550403595": 77, "66587203741073": 77, "entityrul": 78, "entityrulerapproach": 78, "exact": [78, 87, 92], "definit": [78, 100, 176], "json": [78, 147, 170, 181], "jsonl": 78, "setpatternsresourc": 78, "might": [78, 98, 133, 195], "rule": [78, 88, 91, 111, 129, 131, 156], "person": [78, 177], "w": [78, 81, 91, 97, 101, 129, 131, 163], "winterfel": 78, "jon": 78, "snow": [78, 99, 120], "stark": 78, "eddard": 78, "patternsresourc": 78, "usestorag": 78, "rocksdb": 78, "lord": 78, "29": [78, 99, 133, 179, 181], "38": [78, 181], "setusestorag": 78, "setsentencematch": 78, "setalphabetresourc": 78, "alphabet": [78, 101], "plain": [78, 196], "entityrulermodel": 78, "entity_rul": [79, 81], "graphextract": [80, 139], "graph": [80, 98, 116, 120, 126, 139], "nerdlmodel": [80, 96, 97, 98, 99, 170, 174, 186], "store": [80, 102, 103, 147, 152, 157, 168, 173, 181, 187], "node": 80, "relev": [80, 83], "taken": 80, "implicitli": 80, "setmergeent": 80, "automat": [80, 83, 100, 116, 122, 189, 190], "setdependencyparsermodel": 80, "settypeddependencyparsermodel": 80, "setrelationshiptyp": 80, "public": [80, 174, 190], "relationshiptyp": 80, "entitytyp": 80, "explodeent": 80, "roottoken": 80, "travers": 80, "maxsentences": 80, "minsentences": 80, "mergeent": 80, "merg": [80, 87, 92], "neighbor": [80, 118], "includeedg": 80, "symbol": [80, 120, 133], "posmodel": 80, "coordin": [80, 108], "remoteloc": 80, "graphfinish": [80, 139], "rdf": [80, 139], "nertagg": [80, 97, 98, 99], "morn": [80, 139], "flight": [80, 139], "denver": [80, 139], "18": [80, 88, 90, 93, 96, 99, 144, 162, 173, 189], "path1": 80, "setentitytyp": 80, "setexplodeent": 80, "setroottoken": 80, "setmaxsentences": 80, "setminsentences": 80, "setmergeentitiesiobformat": 80, "iob": [80, 96, 97, 98], "iob2": [80, 96], "setincludeedg": 80, "setdelimit": [80, 91, 93], "setposmodel": 80, "class": [81, 155, 160, 167, 178, 185, 186, 194, 196], "classifier_dl": [81, 163], "er": [81, 163], "keyword_extract": [81, 163], "yake_keyword_extract": [81, 82], "ld_dl": [81, 163], "language_detector_dl": [81, 84], "matcher": [81, 163], "big_text_match": [81, 89], "date_match": [81, 89], "multi_date_match": [81, 89], "regex_match": [81, 89], "text_match": [81, 89], "ner_approach": [81, 94], "ner_convert": [81, 94], "ner_crf": [81, 94], "ner_dl": [81, 94], "ner_overwrit": [81, 94], "param": [81, 97, 118, 151, 152, 157, 163, 168, 169], "sentence_detector_dl": [81, 107, 116], "sentiment_detector": [81, 110], "vivekn_senti": [81, 110], "seq2seq": [81, 163], "bart_transform": [81, 115], "gpt2_transform": [81, 115], "marian_transform": [81, 115], "t5_transform": [81, 115], "spell_check": [81, 163], "context_spell_check": [81, 121], "norvig_sweet": [81, 121], "symmetric_delet": [81, 121], "chunk_token": [81, 128], "recursive_token": [81, 128], "regex_token": [81, 128], "word_segment": [81, 132], "chunk2_doc": [81, 163], "date2_chunk": [81, 163], "document_norm": [81, 163], "graph_extract": [81, 163], "lemmat": [81, 111, 125, 146, 149, 163], "n_gram_gener": [81, 163], "stemmer": [81, 125, 163], "stop_words_clean": [81, 163], "yakekeywordextract": 83, "yake": 83, "independ": [83, 122, 123, 129], "individu": [83, 120], "grow": 83, "autom": 83, "adequ": 83, "emerg": [83, 113, 117], "tool": [83, 113], "system": [83, 113, 114], "nor": 83, "thesauri": 83, "neither": 83, "corpora": [83, 87], "thu": 83, "written": [83, 116], "plethora": 83, "situat": [83, 109], "access": 83, "restrict": 83, "therefor": [83, 194], "sent": 83, "boundari": [83, 108, 109, 112, 131, 133], "detector": [83, 88, 111], "section": [83, 136, 145, 186, 188, 194], "tweakabl": 83, "upper": 83, "bound": [83, 108, 109, 112], "minngram": 83, "maxngram": 83, "occurr": [83, 156], "nkeyword": 83, "stopword": [83, 99, 125], "stop": [83, 97, 125], "campo": 83, "mangaravit": 83, "pasquali": 83, "jatowt": 83, "jorg": 83, "nune": 83, "journal": [83, 133], "elsevi": 83, "vol": 83, "509": 83, "pp": [83, 133], "257": 83, "289": 83, "collect": [83, 170, 186], "turn": [83, 149, 190], "come": [83, 96], "fly": 83, "demand": 83, "abil": [83, 113, 114], "within": [83, 106, 112, 113, 114, 131, 135], "resort": 83, "alwai": [83, 117], "solut": 83, "articl": [83, 120], "rest": [83, 96], "merit": 83, "ten": 83, "experiment": 83, "carri": 83, "twenti": 83, "setcontextchar": [83, 131], "setminngram": 83, "setnkeyword": 83, "acquir": 83, "kaggl": 83, "platform": [83, 170, 188], "host": 83, "transact": 83, "somewhat": 83, "vagu": 83, "cloud": 83, "confer": 83, "week": [83, 88, 90, 127], "announc": [83, 99], "earli": 83, "tomorrow": [83, 88, 90], "phone": 83, "founder": 83, "ceo": 83, "anthoni": 83, "goldbloom": 83, "declin": 83, "deni": 83, "acquisit": 83, "happen": 83, "rumor": 83, "million": [83, 99, 114], "scientist": 83, "ben": 83, "hamner": 83, "2010": 83, "servic": [83, 116], "got": 83, "even": [83, 117], "few": [83, 131, 179, 196], "competitor": 83, "drivendata": 83, "topcod": 83, "hackerrank": 83, "stai": 83, "ahead": 83, "nich": 83, "home": [83, 163], "bui": [83, 177], "commun": 83, "mindshar": 83, "too": [83, 111, 189], "plenti": 83, "bit": [83, 109, 195], "histori": [83, 109, 120], "earlier": 83, "month": [83, 88, 90, 179, 196], "team": [83, 116, 170, 186], "around": 83, "youtub": 83, "That": [83, 129, 170, 186, 191], "had": 83, "technologi": 83, "did": 83, "interest": 83, "kernel": 83, "On": [83, 114, 116], "analyz": [83, 112], "compani": [83, 116], "script": 83, "centric": 83, "job": [83, 135], "board": [83, 106, 179], "unclear": 83, "accord": [83, 120, 176], "crunchbas": 83, "pitchbook": 83, "launch": 83, "investor": 83, "ventur": 83, "sv": 83, "angel": 83, "levchin": 83, "naravik": 83, "chie": 83, "economist": 83, "hal": 83, "varian": 83, "khosla": 83, "yuri": 83, "milner": 83, "resulttupl": 83, "ascend": 83, "orderbi": 83, "32051516486864573": 83, "37786450577630676": 83, "39922830978423146": 83, "40224744669493756": 83, "41584827825302534": 83, "setmaxngram": 83, "setstopword": [83, 99, 125], "getstopword": 83, "loaddefaultstopword": [83, 125], "danish": [83, 125], "dutch": [83, 125], "finnish": [83, 125], "german": [83, 125, 176, 196], "hungarian": [83, 125], "italian": [83, 120, 125], "norwegian": [83, 125], "portugues": [83, 125], "russian": [83, 125], "spanish": [83, 125], "swedish": [83, 125], "turkish": [83, 125], "languagedetectordl": 85, "ld": 85, "identif": 85, "rnn": 85, "tatoeba": 85, "140": 85, "wiki": 85, "languagedetector": 85, "ld_wiki_tatoeba_cnn_21": 85, "open": [85, 131, 135, 136, 137, 145, 149, 187], "advanc": [85, 135, 149], "scala": [85, 118, 150, 151, 159, 165, 169], "program": 85, "biblioth\u00e8qu": 85, "traitement": 85, "pour": 85, "le": [85, 116], "avanc\u00e9": 85, "langag": 85, "naturel": 85, "programm": 85, "ist": 85, "ein": 85, "textverarbeitungsbibliothek": 85, "f\u00fcr": 85, "fortgeschritten": 85, "nat\u00fcrlich": 85, "sprachverarbeitung": 85, "die": 85, "programmiersprachen": 85, "und": 85, "lemma": [86, 111, 144, 173, 177, 191, 194, 195], "predefin": [86, 87, 91, 92, 111], "setdictionari": [86, 111, 122, 123], "lemmatizermodel": 86, "lemmas_smal": [86, 111], "setformcol": 86, "correspend": 86, "formcol": [86, 177], "setlemmacol": 86, "fromlemma": 86, "key_delimit": 86, "value_delimit": 86, "lemma_antbnc": 86, "bigtextmatch": [87, 92], "textmatch": [87, 92, 127], "externalresourc": [87, 92, 161], "mergeoverlap": [87, 92], "tokenizermodel": [87, 131], "trie": 87, "dolor": [87, 92], "magna": [87, 92], "aliqua": [87, 92], "sit": [87, 92], "laborum": [87, 92], "hello": [87, 92, 127, 181], "entityextractor": [87, 92, 127], "extractor": [87, 92, 127], "59": [87, 88, 90, 92], "setent": [87, 92, 95, 127], "setmergeoverlap": [87, 92], "settoken": 87, "tokenizer_model": 87, "bigtextmatchermodel": 87, "btm": 87, "textmatchermodel": [87, 92], "searchtri": 87, "datematcherutil": 88, "setinputformat": [88, 147], "setoutputformat": [88, 90], "desir": [88, 90], "yyyi": [88, 90], "mm": [88, 90, 133], "dd": [88, 90, 91], "Not": [88, 98, 146], "setreadmonthfirst": 88, "juli": 88, "5th": 88, "2015": 88, "07": 88, "05": 88, "setdefaultdaywhenmiss": 88, "miss": [88, 90, 135], "setanchordateyear": [88, 90], "anchor": [88, 90], "year": [88, 90, 114, 127, 179], "setanchordatemonth": [88, 90], "januari": [88, 90], "setanchordatedai": [88, 90], "setrelaxedfactorystrategi": 88, "matchstrategi": [88, 156], "match_first": [88, 91, 156], "search": [88, 113, 122], "relax": 88, "exhaust": 88, "1978": [88, 90], "28": [88, 90, 96, 144, 162, 173, 181, 189], "1984": [88, 90], "04": [88, 90], "02": [88, 90], "1980": [88, 90], "79": [88, 90], "31st": [88, 90], "april": [88, 90], "2008": [88, 90], "fri": [88, 90], "1997": [88, 90], "jan": [88, 90], "sun": [88, 90], "1st": [88, 90], "thursdai": [88, 90], "wednesdai": [88, 90], "todai": [88, 90, 181], "yesterdai": [88, 90], "0600h": [88, 90], "06": [88, 90], "00": [88, 90], "hour": [88, 90], "6pm": [88, 90], "23": [88, 90, 91, 99, 106, 179, 180, 181, 196], "1988": [88, 90], "31": [88, 90, 91, 99, 106, 179], "dateformat": [88, 90], "readmonthfirst": [88, 90], "defaultdaywhenmiss": [88, 90], "anchordateyear": [88, 90], "anchordatemonth": [88, 90], "anchordatedai": [88, 90], "15": [88, 181], "saw": 90, "him": 90, "me": 90, "visit": 90, "57": [90, 99], "65": [90, 99], "regexmatch": 91, "d": [91, 101, 131, 188], "1970": 91, "setrul": 91, "setexternalrul": 91, "match_al": [91, 156], "match_complet": [91, 156], "externalrul": 91, "ceremoni": 91, "setstrategi": 91, "71": 91, "short_dat": 91, "regexmatchermodel": 91, "regardless": 92, "entityvalu": 92, "buildfromtoken": 92, "27": [92, 106, 108, 179], "48": [92, 133, 181], "setentityvalu": 92, "setbuildfromtoken": 92, "null": 93, "empti": [93, 135], "enablecumul": 93, "join": [93, 106, 147, 179], "setenablecumul": 93, "nerapproach": 95, "recogn": [95, 96, 97, 98, 99, 100, 120], "setminepoch": [95, 97], "setrandomse": [95, 98, 102], "getlabelcolumn": [95, 126], "friendli": [96, 116], "whitelist": [96, 129], "setwhitelist": [96, 129], "outsid": 96, "prefix": [96, 129, 131, 170, 186], "preserveposit": [96, 130, 149], "org": [96, 97, 98, 99, 113, 133, 144, 162, 163, 173, 176, 187, 196], "14": [96, 106, 144, 148, 162, 173, 179], "ekeu": [96, 97, 98, 144, 162, 173], "36": [96, 106, 144, 162, 173, 179, 181], "baghdad": [96, 97, 98, 144, 162, 173], "37": [96, 144, 162, 173], "setpreserveposit": [96, 130, 149], "setnerhasnoschema": 96, "nercrf": 97, "nercrfapproach": [97, 98], "nercrfmodel": [97, 98], "crf": [97, 98], "2003": [97, 98, 133, 176, 196], "exclud": [97, 98], "setexternalfeatur": 97, "minepoch": [97, 98], "l2": 97, "c0": 97, "decai": [97, 98], "gradient": 97, "2250000": 97, "lossep": 97, "ep": 97, "minw": 97, "includeconfid": [97, 98], "confid": [97, 98, 100], "externalfeatur": 97, "nerdlapproach": [97, 98, 176, 196], "trainingdata": [97, 98, 109, 122, 123, 176], "readdataset": [97, 98, 106, 133, 176, 177, 179, 180, 181, 196], "conll2003": [97, 98, 176, 196], "eng": [97, 98, 176, 196], "setl2": 97, "l2valu": 97, "setc0": 97, "c0valu": 97, "setlossep": 97, "setminw": 97, "setincludeconfid": [97, 98], "verbosevalu": 97, "prerequisit": [97, 98, 99, 190], "nerdl": 98, "char": [98, 101, 109], "bilstm": 98, "tagger": [98, 179, 196], "50": [98, 99, 106, 113, 114, 181], "real": [98, 163, 170, 186], "rage": 98, "graphfold": [98, 120], "usecontrib": 98, "contrib": 98, "cell": [98, 147], "slightli": [98, 109], "includeallconfidencescor": 98, "enablememoryoptim": 98, "slow": 98, "down": [98, 190, 191], "usebestmodel": 98, "bestmodelmetr": 98, "micro": 98, "macro": 98, "setgraphfold": [98, 120, 126], "setusecontrib": 98, "setpo": 98, "setincludeallconfidencescor": 98, "setenablememoryoptim": 98, "setusebestmodel": 98, "setbestmodelmetr": 98, "nermodel": 98, "neroverwrit": 99, "setnewresult": 99, "nerword": 99, "overwritten": 99, "newnerent": 99, "lab": 99, "42": [99, 106], "45": [99, 106, 179, 181], "47": [99, 179, 181], "ner_overwritten": 99, "setnerword": 99, "setnewnerent": 99, "cardin": 99, "setreplaceent": 99, "rw": 99, "zeroshotnermodel": 100, "zeroshotn": 100, "zer_shot_n": 100, "entitydefinit": 100, "citi": 100, "town": 100, "predictionthreshold": 100, "01f": 100, "ignoreent": 100, "zero_shot_n": 100, "setentitydefinit": 100, "hellen": 100, "5328949": 100, "9360068": 100, "83294415": 100, "45366877": 100, "setpredictionthreshold": 100, "zero_shot_ner_roberta": 100, "shortcut": 100, "stem": [101, 124, 144, 173, 194, 195], "henc": 101, "pl": 101, "slangdictionari": 101, "slang": 101, "minlength": [101, 108, 109, 130, 131], "maxlength": [101, 108, 109, 130, 131], "setcleanuppattern": 101, "punctuat": [101, 108], "alphanumer": 101, "letter": [101, 114, 120, 179, 196], "za": 101, "z": [101, 131], "brother": 101, "dont": [101, 112], "setslangdictionari": 101, "setminlength": [101, 108, 109, 130, 131], "setmaxlength": [101, 108, 109, 130, 131], "normalizermodel": 101, "classifierencod": 102, "attach": [102, 103, 152, 157, 168, 170], "evaluationdlparam": 103, "setevaluationlogextend": 103, "setenableoutputlog": [103, 170, 186], "setoutputlogspath": [103, 109, 170, 186], "assum": 103, "perceptronapproach": [106, 179, 196], "member": [106, 173], "datasetpath": 106, "pierr": [106, 179], "vinken": [106, 179], "34": [106, 179, 181], "md": [106, 179], "vb": [106, 176, 179, 196], "41": [106, 108, 179, 181], "43": [106, 108, 179, 181], "dt": [106, 179, 180, 196], "49": [106, 179], "poscol": [106, 133, 176], "niter": [106, 133], "anc": [106, 179, 196], "trainingperceptrondf": 106, "trainedpo": 106, "setposcolumn": [106, 133], "cd": [106, 176, 179], "setiter": 106, "getniter": [106, 133], "pos_anc": 106, "25": [106, 108, 179, 181], "33": [106, 181], "sentencedetectorparam": 108, "ii": 108, "abbrevi": 108, "period": 108, "geo": 108, "1026": 108, "253": 108, "553": 108, "ellipsi": 108, "quotat": 108, "mark": [108, 109, 133], "exclam": 108, "breaker": 108, "pragmaticcontentformatt": 108, "custombound": [108, 109], "setcustombound": [108, 109], "usecustomboundsonli": [108, 109], "explodesent": [108, 109, 176, 177], "useabbrevi": 108, "explicitli": [108, 109, 125, 162, 190], "customboundsstrategi": 108, "prepend": [108, 135], "break": 108, "append": [108, 120, 190], "parallel": [108, 109, 144, 176, 194], "splitlength": [108, 109], "forcibli": [108, 109], "99999": [108, 109, 131], "detectlist": 108, "nhow": 108, "setcustomboundsstrategi": 108, "setuseabbrevi": 108, "setdetectlist": 108, "setusecustomboundsonli": [108, 109], "setexplodesent": [108, 109], "setsplitlength": [108, 109], "sentencedetectordl": [109, 116], "sentencedetectordlapproach": 109, "futur": [109, 113, 117], "setmodel": 109, "sentencedetectordlmodel": [109, 116], "modelarchitectur": 109, "impossiblepenultim": 109, "imposs": [109, 133], "penultim": 109, "epochsnumb": 109, "eo": 109, "stefan": 109, "schweter": 109, "sajawel": 109, "ahm": 109, "littl": [109, 195], "cover": [109, 113, 117, 133], "broken": 109, "moder": 109, "lack": 109, "easier": [109, 138, 192, 196], "polit": 109, "successor": 109, "great": 109, "respons": 109, "heritag": 109, "bequeath": 109, "nelson": 109, "mandela": 109, "setepochsnumb": 109, "model_architectur": 109, "validation_split": 109, "epochs_numb": 109, "output_logs_path": 109, "setimpossiblepenultim": 109, "impossible_penultim": 109, "sentencedl": 109, "sentencesdl": 109, "helen": 109, "total": [109, 133], "peopl": 109, "sentimentdetector": 111, "By": [111, 113, 117, 125, 130, 137, 163, 170, 186], "els": 111, "viveknsentimentapproach": [111, 112], "cool": 111, "superb": 111, "uninspir": 111, "sentimentscor": 111, "staff": 111, "restaur": 111, "nice": [111, 170, 186], "avoid": 111, "entri": [111, 136, 145, 174], "sttr": 111, "sentimentdetectormodel": 111, "sda": [111, 112], "pragmat": 111, "viveknsenti": 112, "analys": 112, "vivek": 112, "narayanan": 112, "give": 112, "transit": [112, 120], "sentimentcol": 112, "prunecorpu": 112, "unfrequ": 112, "scenario": 112, "scope": 112, "naiv": 112, "bay": 112, "vivekn": 112, "setsentimentcol": 112, "train_senti": 112, "result_senti": 112, "finish": [112, 118, 137, 139, 143, 146, 163], "final_senti": 112, "cast": [112, 134], "horribl": 112, "never": [112, 190], "go": [112, 190], "again": [112, 129], "anyon": 112, "protagonist": 112, "music": 112, "setprunecorpu": 112, "frequenc": [112, 120, 122, 123, 133], "viveknsentimentmodel": 112, "sentiment_vivekn": 112, "barttransform": 113, "bart": 113, "translat": [113, 114, 116, 117, 133], "auto": [113, 126], "handl": [113, 160, 178], "captur": 113, "past": [113, 116, 174], "incorpor": 113, "versatil": 113, "valuabl": 113, "settask": [113, 114, 117], "summari": [113, 114, 117], "distilbart_xsum_12_6": 113, "barttestspec": 113, "minoutputlength": [113, 114, 117], "maxoutputlength": [113, 114, 116, 117], "dosampl": [113, 114, 117], "sampl": [113, 114, 117], "greedi": [113, 114, 117], "temperatur": [113, 114, 117], "topk": [113, 114, 117], "highest": [113, 114, 117, 122], "beamsiz": 113, "beam": 113, "topp": [113, 114, 117], "cumul": [113, 114, 117], "kept": [113, 114, 117], "repetitionpenalti": [113, 114, 117], "repetit": [113, 114, 117], "penalti": [113, 114, 117], "norepeatngrams": [113, 114, 117], "occur": [113, 114, 117], "onc": [113, 114, 117], "ignoretokenid": [113, 114, 117], "usecach": 113, "especi": [113, 114, 116, 117], "ab": 113, "1910": 113, "13461": 113, "pytorch": 113, "fairseq": 113, "arbitrari": 113, "nois": 113, "reconstruct": [113, 149], "tranform": 113, "seen": 113, "randomli": 113, "fill": 113, "dialogu": 113, "roug": 113, "bleu": 113, "ablat": 113, "influenc": [113, 120], "setmaxoutputlength": [113, 114, 116, 117], "200": [113, 117], "rich": [113, 117], "rise": [113, 117], "methodologi": [113, 117], "landscap": [113, 117], "unifi": [113, 117], "systemat": [113, 117], "dozen": [113, 117], "insight": [113, 117], "coloss": [113, 117], "facilit": [113, 117], "setignoretokenid": [113, 114, 116, 117], "setminoutputlength": [113, 114, 117], "setdosampl": [113, 114, 117], "settemperatur": [113, 114, 117], "settopk": [113, 114, 117], "settopp": [113, 114, 117], "setrepetitionpenalti": [113, 114, 117], "ctrl": [113, 114, 117], "control": [113, 114, 116, 117, 118, 120], "setnorepeatngrams": [113, 114, 117], "setbeams": 113, "setcach": 113, "use_cach": 113, "gpt2transform": 114, "gpt2": 114, "openai": 114, "caus": [114, 131], "goal": [114, 133], "direct": 114, "10x": 114, "synthet": 114, "unpreced": 114, "prime": 114, "lengthi": 114, "benefit": 114, "suffici": 114, "learner": 114, "typic": 114, "taskspecif": 114, "webpag": [114, 187], "webtext": 114, "plu": 114, "coqa": 114, "exceed": 114, "127": 114, "fashion": 114, "5b": 114, "underfit": 114, "reflect": 114, "paragraph": [114, 120], "promis": 114, "leonardo": 114, "man": 114, "1776": 114, "came": 114, "kingdom": 114, "mariantransform": 116, "marian": 116, "free": 116, "mainli": 116, "academ": 116, "notabl": 116, "edinburgh": 116, "adam": 116, "mickiewicz": 116, "pozna\u0144": 116, "commerci": 116, "contributor": 116, "mariannmt": 116, "engin": [116, 127], "behind": 116, "deploi": [116, 187], "opus_mt_en_fr": 116, "langid": 116, "maxinputlength": 116, "differenti": 116, "toolkit": 116, "setmaxinputlength": 116, "capit": [116, 120], "franc": 116, "quell": 116, "capital": 116, "devrait": 116, "savoir": 116, "fran\u00e7ai": 116, "setlangid": 116, "t5transform": 117, "t5": 117, "reconsid": 117, "hyper": 117, "t5_small": 117, "documentsimilarityrank": 118, "documentsimilarityrankerapproach": 118, "py": [118, 150, 151, 159, 165, 169], "setsimilaritymethod": 118, "neighbour": 118, "brp": 118, "bucket": 118, "euclidean": 118, "setnumberofneighbour": 118, "setbucketlength": 118, "hash": 118, "setnumhasht": 118, "setvisibledist": 118, "visibl": 118, "setidentityrank": 118, "ident": 118, "inclus": 118, "debug": 118, "documentsimilarityrankermodel": 118, "subclass": [118, 151, 165, 169], "inherit": [118, 151, 169], "ins": [118, 151, 169], "uid": [118, 151, 169], "documentsimilarityrankerfinish": 118, "ensur": [118, 165], "_java_obj": [118, 165], "setextractnearestneighbor": 118, "getinputcol": [118, 126, 137, 138, 152], "getoutputcol": [118, 134, 136, 137, 138, 142, 145, 152], "document_similarity_rank": 119, "contextspellcheck": 120, "contextspellcheckerapproach": [120, 122, 123], "noisi": 120, "spell": [120, 121, 122, 123, 144, 149, 193, 194, 195], "candid": [120, 122, 123, 131], "contextspellcheckermodel": [120, 122, 123], "error": 120, "surround": [120, 147], "edit": [120, 122, 123], "subword": 120, "checker": [120, 122, 123, 193], "languagemodelclass": 120, "lm": 120, "wordmaxdist": 120, "maxcandid": 120, "casestrategi": 120, "uppercas": 120, "errorthreshold": 120, "perplex": 120, "nlm": 120, "initialr": 120, "finalr": 120, "validationfract": 120, "datapoint": 120, "min": 120, "vocab": 120, "compoundcount": 120, "compound": 120, "classcount": 120, "tradeoff": 120, "weighteddistpath": 120, "levenshtein": [120, 122, 123], "maxwindowlen": 120, "rememb": 120, "maxsentlen": 120, "norvigsweetingapproach": [120, 122, 123, 196], "symmetricdeleteapproach": [120, 122, 123, 196], "depth": [120, 193], "explan": [120, 193], "awar": 120, "sherlock": 120, "holm": 120, "spellcheck": [120, 122, 123], "setwordmaxdist": 120, "setepoch": 120, "setlanguagemodelclass": 120, "1650": 120, "addvocabclass": 120, "_name_": 120, "extra": [120, 122, 190], "dist": 120, "setmaxcandid": 120, "setcasestrategi": 120, "seterrorthreshold": 120, "setinitialr": 120, "setfinalr": 120, "setvalidationfract": 120, "fraction": 120, "setcompoundcount": 120, "setclasscount": 120, "settradeoff": 120, "alpha": 120, "setweighteddistpath": 120, "setmaxwindowlen": 120, "setmaxsentlen": 120, "sentlen": 120, "userdist": 120, "addregexclass": 120, "spellcheck_dl": 120, "gamma": 120, "decis": 120, "correctsymbol": 120, "comparelowcas": 120, "vocabfreq": 120, "idsvocab": 120, "vocabid": 120, "usenewlin": 120, "newlin": 120, "norvigsweetingmodel": [120, 122, 123], "symmetricdeletemodel": [120, 122, 123], "doc": [120, 180, 196], "cold": 120, "dreari": 120, "countri": 120, "white": 120, "smow": 120, "setweight": 120, "setgamma": 120, "setvocabfreq": 120, "setidsvocab": 120, "setvocabid": 120, "setclass": 120, "getwordclass": 120, "updateregexclass": 120, "updat": 120, "updatevocabclass": 120, "setcorrectsymbol": 120, "setcomparelowcas": 120, "norvigsweet": 122, "norvig": 122, "bayesian": 122, "tokenpattern": 122, "sensit": [122, 125, 131], "doublevari": 122, "shortcircuit": 122, "frequencyprior": 122, "ham": 122, "intersect": 122, "prioriti": [122, 131], "wordsizeignor": 122, "dupslimit": 122, "duplic": 122, "reductlimit": 122, "attempt": 122, "vowelswaplimit": 122, "vowel": 122, "swap": 122, "corrector": 122, "gummi": [122, 123], "gummic": [122, 123], "gummier": [122, 123], "gummiest": [122, 123], "gummifer": [122, 123], "basi": [122, 123], "token_pattern": [122, 123], "setdoublevari": 122, "setshortcircuit": 122, "setfrequencyprior": 122, "symmetr": [122, 123], "delet": [122, 123, 190], "damerau": [122, 123], "transpos": [122, 123], "insert": [122, 123, 190], "spellcheck_norvig": 122, "symspel": [122, 123], "somtim": 122, "wrrite": [122, 123], "wordz": [122, 123], "erong": [122, 123], "sometim": [122, 123, 190], "wrong": [122, 123], "symmetricdelet": 123, "deriv": 123, "teach": 123, "maxeditdist": 123, "frequencythreshold": [123, 133], "deletesthreshold": 123, "patttern": 123, "setmaxeditdist": 123, "setfrequencythreshold": [123, 133], "setdeletesthreshold": 123, "spellcheck_sd": 123, "spmetim": 123, "hard": 124, "employ": 124, "stopwordsclean": [125, 137, 149], "mllib": [125, 187], "stopwordsremov": 125, "cleantoken": [125, 137, 149], "stopwords_en": 125, "jvm": [125, 163], "forth": 125, "setlocal": 125, "tfnerdlgraphbuildermodel": 126, "tfnerdlgraphbuild": 126, "sethiddenunitsnumb": 126, "assertiondlapproach": 126, "medicalnerapproach": 126, "gethiddenunitsnumb": 126, "srt": 126, "getgraphfold": 126, "setgraphfil": 126, "greaph": 126, "getgraphfil": 126, "chunktoken": 127, "flatten": 127, "artist": 127, "benezar": 127, "robert": 127, "farendel": 127, "graduat": 127, "luca": 127, "chunktokenizermodel": 127, "recursivetoken": 129, "recurs": [129, 146, 159, 163, 167], "suffix": [129, 131, 190], "infix": [129, 131], "middl": [129, 133], "she": 129, "qam": 129, "setprefix": 129, "setsuffix": 129, "setinfix": 129, "recursivetokenizermodel": 129, "regextoken": [130, 133, 191], "whitespac": [130, 133, 135], "tolowercas": [130, 133], "positionalmask": 130, "guarante": 130, "increment": 130, "trimwhitespac": 130, "flag": 130, "eventu": 130, "settolowercas": [130, 133], "nthi": 130, "setpositionalmask": 130, "settrimwhitespac": 130, "tokenizedsent": 131, "rulefactori": [131, 156], "targetpattern": 131, "grab": 131, "prefixpattern": 131, "suffixpattern": 131, "infixpattern": 131, "sub": 131, "won": 131, "exceptionspath": 131, "casesensitiveexcept": 131, "contextchar": 131, "splitpattern": 131, "splitchar": 131, "didn": 131, "jane": 131, "boyfriend": 131, "getinfixpattern": 131, "getsuffixpattern": 131, "getprefixpattern": 131, "getcontextchar": 131, "getsplitchar": 131, "settargetpattern": 131, "setprefixpattern": 131, "setsuffixpattern": 131, "setinfixpattern": 131, "addinfixpattern": 131, "setexcept": 131, "getexcept": 131, "setexceptionspath": 131, "addexcept": 131, "setcasesensitiveexcept": 131, "getcasesensitiveexcept": 131, "addcontextchar": 131, "setsplitpattern": 131, "setsplitchar": 131, "addsplitchar": 131, "piec": 131, "token_rul": 131, "wordsegment": 133, "wordsegmenterapproach": 133, "korean": 133, "japanes": 133, "chines": 133, "correspond": [133, 170], "rr": 133, "likewis": 133, "side": 133, "themselv": 133, "\u4e0a\u6d77": 133, "\u8ba1\u5212": 133, "\u5230": 133, "\u672c": 133, "\u4e16\u7eaa": 133, "\u672b": 133, "\u5b9e\u73b0": 133, "\u4eba\u5747": 133, "\u56fd\u5185": 133, "\u751f\u4ea7": 133, "\u603b\u503c": 133, "\u4e94\u5343": 133, "\u7f8e\u5143": 133, "\u4e0a": 133, "\u6d77": 133, "\u8ba1": 133, "\u5212": 133, "\u4e16": 133, "\u7eaa": 133, "\u5b9e": 133, "\u73b0": 133, "\u4eba": 133, "\u5747": 133, "\u56fd": 133, "\u5185": 133, "\u751f": 133, "\u4ea7": 133, "\u603b": 133, "ll\u503c": 133, "\u4e94": 133, "\u5343": 133, "\u7f8e": 133, "\u5143": 133, "shanghai": 133, "plan": 133, "dollar": 133, "capita": 133, "gdp": 133, "wordsegmentermodel": 133, "tip": 133, "frame": 133, "least": 133, "frequent": 133, "ambiguitythreshold": 133, "enableregextoken": 133, "xue": 133, "nianwen": 133, "volum": 133, "februari": 133, "aclweb": 133, "aclanthologi": 133, "o03": 133, "4002": 133, "chinese_train": 133, "utf8": 133, "\u5341": 133, "\u56db": 133, "\u4e0d": 133, "\u662f": 133, "setniter": 133, "trainingdataset": 133, "setambiguitythreshold": 133, "getfrequencythreshold": 133, "getambiguitythreshold": 133, "setenableregextoken": 133, "plit": 133, "words_seg": 133, "wordseg_pku": 133, "zh": 133, "\u7136\u800c": 133, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 133, "\u9019\u6a23": 133, "\u7684": 133, "\u8655\u7406": 133, "\u4e5f": 133, "\u884d\u751f": 133, "\u4e86": 133, "\u4e00\u4e9b": 133, "\u554f\u984c": 133, "prepar": [134, 136, 142, 145], "outputcol": [134, 136, 137, 138, 139, 142, 145], "inferschema": 134, "tmp": [134, 142, 163, 186], "librispeech_asr_dummy_clean_audio_array_parquet": 134, "float_arrai": 134, "chunkcol": 135, "stringtyp": 135, "setisarrai": 135, "startcol": 135, "startcolbytokenindex": 135, "isarrai": 135, "failonmiss": 135, "fail": 135, "chunkassembl": 135, "setchunkcol": 135, "setstartcol": 135, "setstartcolbytokenindex": 135, "setfailonmiss": 135, "disabl": [136, 145], "idcol": [136, 145], "metadatacol": [136, 145], "cleanupmod": [136, 145], "cleanup": [136, 145], "inplac": [136, 145], "inplace_ful": [136, 145], "shrink_ful": [136, 145], "each_ful": [136, 145], "delete_ful": [136, 145], "setidcol": [136, 145], "setmetadatacol": [136, 145], "usabl": 137, "lda": 137, "forest": 137, "featurecol": 137, "cleanannot": [137, 138, 139], "outputasvector": 137, "gloveembed": 137, "finished_sentence_embed": 137, "resultwiths": 137, "1619900017976761": 137, "045552998781204224": 137, "03229299932718277": 137, "685609996318": 137, "42416998744010925": 137, "1378999948501587": 137, "5717899799346924": 137, "5078899860382": 137, "08621499687433243": 137, "15772999823093414": 137, "06067200005054474": 137, "395359992980": 137, "4970499873161316": 137, "7164199948310852": 137, "40119001269340515": 137, "05761000141501": 137, "08170200139284134": 137, "7159299850463867": 137, "20677000284194946": 137, "0295659992843": 137, "valuesplitsymbol": 138, "annotationsplitsymbol": 138, "includemetadata": 138, "outputasarrai": [138, 139], "parseembeddingsvector": 138, "setvaluesplitsymbol": 138, "setannotationsplitsymbol": 138, "setincludemetadata": [138, 191], "setoutputasarrai": [138, 139], "setparseembeddingsvector": 138, "finishedresult": 139, "hasrecursivefit": [140, 141], "java_obj": [140, 166, 169], "py4j": [140, 141, 169], "java_gatewai": [140, 141, 169], "javaobject": [140, 141, 169], "recursivepipelin": [140, 141, 146, 152], "hasrecursivetransform": 141, "doc2_chunk": [143, 163], "embeddings_finish": [143, 163], "graph_finish": [143, 163], "has_recursive_fit": [143, 163], "has_recursive_transform": [143, 163], "light_pipelin": [143, 163], "recursive_pipelin": [143, 163], "token2_chunk": [143, 163], "token_assembl": [143, 163], "lightpipelin": [144, 173, 194], "parse_embed": [144, 173], "execut": [144, 190, 194], "hold": [144, 194], "principl": [144, 194], "everyth": [144, 194, 195], "fullannot": [144, 173], "happi": [144, 189, 191, 194, 195], "prp": [144, 177, 179, 189, 194, 195, 196], "rb": [144, 179, 189, 194, 195, 196], "optional_target": [144, 173], "explain_document_pipelin": [144, 162, 173, 189, 194, 195], "dict_kei": [144, 173], "fullannotateimag": [144, 173], "path_to_imag": [144, 173], "setignoreunsupport": 144, "unsupport": 144, "annotatormodel": [144, 151, 174], "getignoreunsupport": 144, "text2": 145, "document1": 145, "document2": 145, "arg": [146, 166], "kwarg": 146, "decid": 146, "advantag": 146, "behav": 146, "exactli": 146, "intent": 146, "recursivepipelinemodel": 146, "pipeline_model": [146, 170, 186], "intend": 146, "tab": [147, 170, 186], "escap": 147, "quot": 147, "inputformat": 147, "csvdelimit": 147, "defailt": 147, "comma": 147, "escapecsvdelimit": 147, "table_csv": 147, "csv_data": 147, "input_format": 147, "setcsvdelimit": 147, "setescapecsvdelimit": 147, "token2chunk": 148, "17": [148, 179, 181], "tokenassembl": 149, "cleantext": 149, "opensourc": 149, "annotatorapproach": [150, 159, 170], "annotatorproperti": 152, "setlazyannot": 152, "lazili": 152, "getlazyannot": 152, "annotator_approach": [155, 163], "annotator_model": [155, 163], "annotator_properti": [155, 163], "coverage_result": [155, 163], "match_strategi": [155, 163], "recursive_annotator_approach": [155, 163], "regard": 156, "constant": [156, 158], "hasembeddingsproperti": 157, "getdimens": 157, "recursiveannotatorapproach": 159, "fo": 161, "assist": 162, "map_annot": 162, "f": [162, 170, 186], "output_typ": 162, "udf": 162, "userdefinedfunct": 162, "def": 162, "nnp_token": 162, "lambda": 162, "alia": 162, "epeu": 162, "map_annotations_arrai": 162, "map_annotations_strict": 162, "map_annotations_col": 162, "output_column": 162, "annotatyon_typ": 162, "chunks_df": 162, "pos_chunk": 162, "vbz": [162, 176, 196], "filter_by_annotations_col": 162, "filter_po": 162, "explode_annotations_col": 162, "annotator_java_ml": [163, 167], "annotator_transform": [163, 167], "extended_java_wrapp": [163, 167], "params_getters_sett": [163, 167], "comet": [163, 171, 188], "pretrained_pipelin": [163, 172], "resource_download": [163, 172], "pub_tat": [163, 178], "annotation_audio": 163, "annotation_imag": 163, "apple_silicon": 163, "aarch64": 163, "cache_fold": 163, "log_fold": 163, "cluster_tmp_dir": 163, "real_time_output": 163, "output_level": 163, "correctli": 163, "maco": 163, "linux": 163, "alloc": 163, "directori": [163, 174, 186], "cache_pretrain": 163, "temporarili": 163, "unpack": 163, "hadoop": 163, "dir": 163, "s3": [163, 174], "hdf": 163, "dbf": 163, "annotator_log": 163, "annotatorjavamlread": 164, "mixin": 164, "javamlread": 164, "classmethod": 164, "mlreader": 164, "clazz": 164, "rl": 164, "javaparam": 164, "annotatortransform": 165, "javawrapp": 166, "extendedjavawrapp": 166, "new_java_arrai": 166, "pylist": 166, "java_class": 166, "todo": 166, "paramsgetterssett": 168, "getparamvalu": 168, "paramnam": 168, "setparamvalu": 168, "recursiveestim": 169, "overrid": 169, "recursivetransform": 169, "cometlogg": [170, 186], "workspac": 170, "project_nam": [170, 186], "comet_mod": [170, 186], "experiment_id": 170, "experiment_kwarg": 170, "logger": [170, 186], "meta": [170, 188], "practition": [170, 186], "reliabl": [170, 186], "streamlin": [170, 186], "lifecycl": [170, 186, 188], "track": [170, 186, 187], "reproduc": [170, 186, 187], "outputlogpath": [170, 186], "onlin": [170, 186], "reus": 170, "importerror": 170, "output_log_path": [170, 186], "embd": [170, 186], "setshuffleperepoch": [170, 186], "logdir": [170, 186], "interfac": [170, 186, 194], "attribut": 170, "comet_ml": [170, 186], "log_pipeline_paramet": [170, 186], "log_visu": [170, 186], "html": [170, 186], "viz": [170, 186], "upload": 170, "colum": [170, 186], "ner_chunk": [170, 186], "sparknlp_displai": [170, 186], "nervisu": [170, 186], "idx": [170, 186], "enumer": [170, 186], "label_col": [170, 186], "document_col": [170, 186], "return_html": [170, 186], "log_metr": [170, 186], "sklearn": [170, 186], "preprocess": [170, 186], "multilabelbinar": [170, 186], "classification_report": [170, 186], "preds_df": [170, 186], "topanda": [170, 186], "mlb": [170, 186], "y_true": [170, 186], "fit_transform": [170, 186], "y_pred": [170, 186], "output_dict": [170, 186], "log_paramet": 170, "log_completed_run": 170, "log_file_path": 170, "complet": [170, 187, 190], "log_asset": 170, "asset_path": 170, "asset": 170, "log_asset_data": 170, "interv": 170, "refresh": 170, "outstand": 170, "disk_loc": 173, "fulli": 173, "light_model": 173, "gather": 173, "langaug": 173, "resourcedownload": [174, 190, 195], "showpublicmodel": [174, 190], "onto_100": 174, "onto_300": 174, "ner_dl_bert": 174, "similarli": 174, "showpublicpipelin": [174, 195], "check_spel": [174, 195], "match_datetim": [174, 195], "downloadmodel": 174, "reader": 174, "j_dwn": 174, "pythonresourcedownload": 174, "downloadmodeldirectli": 174, "unzip": 174, "downloadpipelin": 174, "clearcach": 174, "clear": 174, "argument": 174, "filer": 174, "showuncategorizedresourc": 174, "yet": 174, "showavailableannot": 174, "documentcol": [176, 177], "sentencecol": [176, 177], "tokencol": 176, "conlllabelindex": 176, "conllposindex": 176, "conlldocidcol": 176, "doc_id": [176, 180], "textcol": [176, 177], "labelcol": 176, "includedocid": 176, "docstart": [176, 196], "eu": [176, 196], "np": [176, 196], "reject": [176, 196], "vp": [176, 196], "misc": [176, 196], "boycott": [176, 196], "british": [176, 196], "lamb": [176, 196], "blackburn": 176, "brussel": 176, "1996": 176, "08": 176, "storage_level": 176, "storagelevel": 176, "disk_onli": 176, "lift": 176, "persist": 176, "uposcol": 177, "upo": 177, "xposcol": 177, "xpo": 177, "lemmacol": 177, "sent_id": 177, "sell": 177, "pron": 177, "nom": 177, "plur": 177, "_": 177, "tens": 177, "conj": 177, "cc": 177, "obj": 177, "spaceaft": 177, "No": [177, 189], "punct": 177, "conllufil": [177, 196], "conlldataset": [177, 196], "morph": 177, "Into": 177, "googleo": 177, "sconj": 177, "propn": 177, "adp": 177, "wp": 177, "vbd": [177, 179, 196], "ago": [179, 196], "receiv": [179, 196], "posdf": 179, "61": 179, "67": [179, 180, 196], "nonexecut": 179, "69": 179, "76": 179, "director": 179, "78": 179, "81": 179, "84": 179, "outputposcol": 179, "outputdocumentcol": 179, "outputtextcol": 179, "pubtat": [180, 193], "medic": [180, 196], "titl": [180, 196], "medment": [180, 196], "25763772": [180, 196], "dctn4": [180, 196], "t116": [180, 196], "t123": [180, 196], "c4308010": [180, 196], "63": [180, 196], "chronic": [180, 196], "pseudomona": [180, 196], "aeruginosa": [180, 196], "infect": [180, 196], "t047": [180, 196], "c0854135": [180, 196], "82": [180, 196], "cystic": [180, 196], "fibrosi": [180, 196], "c0010674": [180, 196], "120": [180, 196], "pa": [180, 196], "124": [180, 196], "139": [180, 196], "pubtatorfil": 180, "corpus_pubtator_sampl": 180, "pubtatordataset": 180, "finished_token": [180, 191], "finished_po": 180, "finished_n": 180, "finished_token_metadata": 180, "finished_pos_metadata": 180, "finished_label_metadata": 180, "mo": 180, "ispaddedtoken": 180, "pad": 180, "spacytoannot": 181, "token_spac": 181, "sentence_end": 181, "spaci": 181, "multi_doc_token": 181, "went": 181, "night": 181, "bought": 181, "bread": 181, "54": 181, "overview": [185, 193], "workflow": 186, "dedic": 186, "account": 186, "inspect": 186, "init": 186, "sparknlp_experi": 186, "offline_directori": 186, "later": 186, "nativ": 187, "record": 187, "registri": 187, "central": 187, "send": 188, "messag": 188, "mlflow": 188, "content": [189, 195], "clearli": 189, "explain_document_ml": [189, 194, 195], "approx": [189, 194, 195], "mb": [189, 194, 195], "ok": [189, 194, 195], "spearhead": 190, "produc": 190, "declar": 190, "accordingli": 190, "extra_loc": 190, "offer": [190, 192, 195], "classifierdl_use_trec50": 190, "classifierdl_use_spam": 190, "column_nam": 190, "preced": 190, "interchang": 191, "anoth": 191, "road": 191, "proce": 191, "At": 191, "sens": 195, "constantli": 195, "server": 195, "train_po": 196, "training_conl": 196, "train_corpu": 196, "withcolumnrenam": 196, "trainingpubtatordf": 196, "corpus_pubt": 196}, "objects": {"": [[163, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [81, 0, 0, "-", "annotator"], [143, 0, 0, "-", "base"], [155, 0, 0, "-", "common"], [162, 0, 0, "-", "functions"], [167, 0, 0, "-", "internal"], [171, 0, 0, "-", "logging"], [172, 0, 0, "-", "pretrained"], [163, 3, 1, "", "start"], [178, 0, 0, "-", "training"], [183, 0, 0, "-", "upload_to_hub"], [184, 0, 0, "-", "util"], [163, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [8, 0, 0, "-", "chunk2_doc"], [9, 0, 0, "-", "chunker"], [28, 0, 0, "-", "classifier_dl"], [45, 0, 0, "-", "coref"], [48, 0, 0, "-", "cv"], [51, 0, 0, "-", "date2_chunk"], [53, 0, 0, "-", "dependency"], [55, 0, 0, "-", "document_normalizer"], [66, 0, 0, "-", "embeddings"], [79, 0, 0, "-", "er"], [80, 0, 0, "-", "graph_extraction"], [82, 0, 0, "-", "keyword_extraction"], [84, 0, 0, "-", "ld_dl"], [86, 0, 0, "-", "lemmatizer"], [89, 0, 0, "-", "matcher"], [93, 0, 0, "-", "n_gram_generator"], [94, 0, 0, "-", "ner"], [101, 0, 0, "-", "normalizer"], [104, 0, 0, "-", "param"], [105, 0, 0, "-", "pos"], [107, 0, 0, "-", "sentence"], [110, 0, 0, "-", "sentiment"], [115, 0, 0, "-", "seq2seq"], [119, 0, 0, "-", "similarity"], [121, 0, 0, "-", "spell_check"], [124, 0, 0, "-", "stemmer"], [125, 0, 0, "-", "stop_words_cleaner"], [126, 0, 0, "-", "tf_ner_dl_graph_builder"], [128, 0, 0, "-", "token"], [132, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.chunk2_doc": [[8, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[9, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[9, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[10, 0, 0, "-", "albert_for_question_answering"], [11, 0, 0, "-", "albert_for_sequence_classification"], [12, 0, 0, "-", "albert_for_token_classification"], [13, 0, 0, "-", "bert_for_question_answering"], [14, 0, 0, "-", "bert_for_sequence_classification"], [15, 0, 0, "-", "bert_for_token_classification"], [16, 0, 0, "-", "bert_for_zero_shot_classification"], [17, 0, 0, "-", "camembert_for_question_answering"], [18, 0, 0, "-", "camembert_for_sequence_classification"], [19, 0, 0, "-", "camembert_for_token_classification"], [20, 0, 0, "-", "classifier_dl"], [21, 0, 0, "-", "deberta_for_question_answering"], [22, 0, 0, "-", "deberta_for_sequence_classification"], [23, 0, 0, "-", "deberta_for_token_classification"], [24, 0, 0, "-", "distil_bert_for_question_answering"], [25, 0, 0, "-", "distil_bert_for_sequence_classification"], [26, 0, 0, "-", "distil_bert_for_token_classification"], [27, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [29, 0, 0, "-", "longformer_for_question_answering"], [30, 0, 0, "-", "longformer_for_sequence_classification"], [31, 0, 0, "-", "longformer_for_token_classification"], [32, 0, 0, "-", "multi_classifier_dl"], [33, 0, 0, "-", "roberta_bert_for_zero_shot_classification"], [34, 0, 0, "-", "roberta_for_question_answering"], [35, 0, 0, "-", "roberta_for_sequence_classification"], [36, 0, 0, "-", "roberta_for_token_classification"], [37, 0, 0, "-", "sentiment_dl"], [38, 0, 0, "-", "tapas_for_question_answering"], [39, 0, 0, "-", "xlm_roberta_for_question_answering"], [40, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [41, 0, 0, "-", "xlm_roberta_for_token_classification"], [42, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [43, 0, 0, "-", "xlnet_for_sequence_classification"], [44, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[10, 2, 1, "", "loadSavedModel"], [10, 2, 1, "", "pretrained"], [10, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[11, 2, 1, "", "getClasses"], [11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setCoalesceSentences"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, 1, 1, "", "ClassifierDLApproach"], [20, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[20, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setCoalesceSentences"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, 1, 1, "", "MultiClassifierDLApproach"], [32, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[32, 2, 1, "", "setThreshold"], [32, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"], [33, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[35, 2, 1, "", "getClasses"], [35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setCoalesceSentences"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setConfigProtoBytes"], [36, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, 1, 1, "", "SentimentDLApproach"], [37, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[37, 2, 1, "", "setDropout"], [37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setCoalesceSentences"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[41, 2, 1, "", "getClasses"], [41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[42, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"], [42, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[43, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setCoalesceSentences"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[44, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[46, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[46, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setMaxSegmentLength"], [46, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[47, 0, 0, "-", "convnext_for_image_classification"], [49, 0, 0, "-", "swin_for_image_classification"], [50, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[47, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[47, 2, 1, "", "getClasses"], [47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setConfigProtoBytes"], [47, 2, 1, "", "setCropPct"], [47, 2, 1, "", "setDoRescale"], [47, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[49, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setDoRescale"], [49, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.vit_for_image_classification": [[50, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[51, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[51, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[52, 0, 0, "-", "dependency_parser"], [54, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[52, 1, 1, "", "DependencyParserApproach"], [52, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[52, 2, 1, "", "setConllU"], [52, 2, 1, "", "setDependencyTreeBank"], [52, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[52, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[54, 1, 1, "", "TypedDependencyParserApproach"], [54, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[54, 2, 1, "", "setConll2009"], [54, 2, 1, "", "setConllU"], [54, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[54, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[55, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[55, 2, 1, "", "setAction"], [55, 2, 1, "", "setEncoding"], [55, 2, 1, "", "setLowercase"], [55, 2, 1, "", "setPatterns"], [55, 2, 1, "", "setPolicy"], [55, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[56, 0, 0, "-", "albert_embeddings"], [57, 0, 0, "-", "bert_embeddings"], [58, 0, 0, "-", "bert_sentence_embeddings"], [59, 0, 0, "-", "camembert_embeddings"], [60, 0, 0, "-", "chunk_embeddings"], [61, 0, 0, "-", "deberta_embeddings"], [62, 0, 0, "-", "distil_bert_embeddings"], [63, 0, 0, "-", "doc2vec"], [64, 0, 0, "-", "e5_embeddings"], [65, 0, 0, "-", "elmo_embeddings"], [67, 0, 0, "-", "instructor_embeddings"], [68, 0, 0, "-", "longformer_embeddings"], [69, 0, 0, "-", "roberta_embeddings"], [70, 0, 0, "-", "roberta_sentence_embeddings"], [71, 0, 0, "-", "sentence_embeddings"], [72, 0, 0, "-", "universal_sentence_encoder"], [73, 0, 0, "-", "word2vec"], [74, 0, 0, "-", "word_embeddings"], [75, 0, 0, "-", "xlm_roberta_embeddings"], [76, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [77, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[56, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[57, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[58, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"], [58, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[59, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[60, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[60, 2, 1, "", "setPoolingStrategy"], [60, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[61, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[62, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[63, 1, 1, "", "Doc2VecApproach"], [63, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[63, 2, 1, "", "setMaxIter"], [63, 2, 1, "", "setMaxSentenceLength"], [63, 2, 1, "", "setMinCount"], [63, 2, 1, "", "setNumPartitions"], [63, 2, 1, "", "setSeed"], [63, 2, 1, "", "setStepSize"], [63, 2, 1, "", "setVectorSize"], [63, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[64, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[65, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setBatchSize"], [65, 2, 1, "", "setConfigProtoBytes"], [65, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[67, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"], [67, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[68, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[69, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[70, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[71, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[71, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[72, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"], [72, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[73, 1, 1, "", "Word2VecApproach"], [73, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[73, 2, 1, "", "setMaxIter"], [73, 2, 1, "", "setMaxSentenceLength"], [73, 2, 1, "", "setMinCount"], [73, 2, 1, "", "setNumPartitions"], [73, 2, 1, "", "setSeed"], [73, 2, 1, "", "setStepSize"], [73, 2, 1, "", "setVectorSize"], [73, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[74, 1, 1, "", "WordEmbeddings"], [74, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[74, 2, 1, "", "setReadCacheSize"], [74, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[74, 2, 1, "", "loadStorage"], [74, 2, 1, "", "overallCoverage"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setReadCacheSize"], [74, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[75, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[76, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[77, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[77, 2, 1, "", "loadSavedModel"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[78, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[78, 1, 1, "", "EntityRulerApproach"], [78, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[78, 2, 1, "", "setAlphabetResource"], [78, 2, 1, "", "setPatternsResource"], [78, 2, 1, "", "setSentenceMatch"], [78, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[80, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[80, 2, 1, "", "setDelimiter"], [80, 2, 1, "", "setDependencyParserModel"], [80, 2, 1, "", "setEntityTypes"], [80, 2, 1, "", "setExplodeEntities"], [80, 2, 1, "", "setIncludeEdges"], [80, 2, 1, "", "setMaxSentenceSize"], [80, 2, 1, "", "setMergeEntities"], [80, 2, 1, "", "setMergeEntitiesIOBFormat"], [80, 2, 1, "", "setMinSentenceSize"], [80, 2, 1, "", "setPosModel"], [80, 2, 1, "", "setRelationshipTypes"], [80, 2, 1, "", "setRootTokens"], [80, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[83, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[83, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[83, 2, 1, "", "getStopWords"], [83, 2, 1, "", "loadDefaultStopWords"], [83, 2, 1, "", "setMaxNGrams"], [83, 2, 1, "", "setMinNGrams"], [83, 2, 1, "", "setNKeywords"], [83, 2, 1, "", "setStopWords"], [83, 2, 1, "", "setThreshold"], [83, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[85, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[85, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setCoalesceSentences"], [85, 2, 1, "", "setConfigProtoBytes"], [85, 2, 1, "", "setThreshold"], [85, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[86, 1, 1, "", "Lemmatizer"], [86, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[86, 2, 1, "", "setDictionary"], [86, 2, 1, "", "setFormCol"], [86, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[86, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[87, 0, 0, "-", "big_text_matcher"], [88, 0, 0, "-", "date_matcher"], [90, 0, 0, "-", "multi_date_matcher"], [91, 0, 0, "-", "regex_matcher"], [92, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[87, 1, 1, "", "BigTextMatcher"], [87, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[87, 2, 1, "", "setCaseSensitive"], [87, 2, 1, "", "setEntities"], [87, 2, 1, "", "setMergeOverlapping"], [87, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[87, 2, 1, "", "loadStorage"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setCaseSensitive"], [87, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[88, 1, 1, "", "DateMatcher"], [88, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[88, 2, 1, "", "setAnchorDateDay"], [88, 2, 1, "", "setAnchorDateMonth"], [88, 2, 1, "", "setAnchorDateYear"], [88, 2, 1, "", "setDefaultDayWhenMissing"], [88, 2, 1, "", "setInputFormats"], [88, 2, 1, "", "setOutputFormat"], [88, 2, 1, "", "setReadMonthFirst"], [88, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[90, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[91, 1, 1, "", "RegexMatcher"], [91, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[91, 2, 1, "", "setDelimiter"], [91, 2, 1, "", "setExternalRules"], [91, 2, 1, "", "setRules"], [91, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[92, 1, 1, "", "TextMatcher"], [92, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[92, 2, 1, "", "setBuildFromTokens"], [92, 2, 1, "", "setCaseSensitive"], [92, 2, 1, "", "setEntities"], [92, 2, 1, "", "setEntityValue"], [92, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setBuildFromTokens"], [92, 2, 1, "", "setEntityValue"], [92, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[93, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[93, 2, 1, "", "setDelimiter"], [93, 2, 1, "", "setEnableCumulative"], [93, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[95, 0, 0, "-", "ner_approach"], [96, 0, 0, "-", "ner_converter"], [97, 0, 0, "-", "ner_crf"], [98, 0, 0, "-", "ner_dl"], [99, 0, 0, "-", "ner_overwriter"], [100, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[95, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[95, 2, 1, "", "getLabelColumn"], [95, 2, 1, "", "setEntities"], [95, 2, 1, "", "setLabelColumn"], [95, 2, 1, "", "setMaxEpochs"], [95, 2, 1, "", "setMinEpochs"], [95, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[96, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[96, 2, 1, "", "setNerHasNoSchema"], [96, 2, 1, "", "setPreservePosition"], [96, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[97, 1, 1, "", "NerCrfApproach"], [97, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[97, 2, 1, "", "setC0"], [97, 2, 1, "", "setExternalFeatures"], [97, 2, 1, "", "setIncludeConfidence"], [97, 2, 1, "", "setL2"], [97, 2, 1, "", "setLossEps"], [97, 2, 1, "", "setMinW"], [97, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[98, 1, 1, "", "NerDLApproach"], [98, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[98, 2, 1, "", "setBatchSize"], [98, 2, 1, "", "setBestModelMetric"], [98, 2, 1, "", "setConfigProtoBytes"], [98, 2, 1, "", "setDropout"], [98, 2, 1, "", "setEnableMemoryOptimizer"], [98, 2, 1, "", "setGraphFolder"], [98, 2, 1, "", "setIncludeAllConfidenceScores"], [98, 2, 1, "", "setIncludeConfidence"], [98, 2, 1, "", "setLr"], [98, 2, 1, "", "setPo"], [98, 2, 1, "", "setUseBestModel"], [98, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setConfigProtoBytes"], [98, 2, 1, "", "setIncludeAllConfidenceScores"], [98, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[99, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[99, 2, 1, "", "setNerWords"], [99, 2, 1, "", "setNewNerEntity"], [99, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[100, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[100, 2, 1, "", "getClasses"], [100, 2, 1, "", "load"], [100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setEntityDefinitions"], [100, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[101, 1, 1, "", "Normalizer"], [101, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[101, 2, 1, "", "setCleanupPatterns"], [101, 2, 1, "", "setLowercase"], [101, 2, 1, "", "setMaxLength"], [101, 2, 1, "", "setMinLength"], [101, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.param": [[102, 0, 0, "-", "classifier_encoder"], [103, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[102, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[102, 2, 1, "", "setBatchSize"], [102, 2, 1, "", "setConfigProtoBytes"], [102, 2, 1, "", "setLabelColumn"], [102, 2, 1, "", "setLr"], [102, 2, 1, "", "setMaxEpochs"], [102, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[103, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[103, 2, 1, "", "setEnableOutputLogs"], [103, 2, 1, "", "setEvaluationLogExtended"], [103, 2, 1, "", "setOutputLogsPath"], [103, 2, 1, "", "setTestDataset"], [103, 2, 1, "", "setValidationSplit"], [103, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[106, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[106, 1, 1, "", "PerceptronApproach"], [106, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[106, 2, 1, "", "getNIterations"], [106, 2, 1, "", "setIterations"], [106, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[106, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[108, 0, 0, "-", "sentence_detector"], [109, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[108, 1, 1, "", "SentenceDetector"], [108, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[108, 2, 1, "", "setCustomBounds"], [108, 2, 1, "", "setCustomBoundsStrategy"], [108, 2, 1, "", "setDetectLists"], [108, 2, 1, "", "setExplodeSentences"], [108, 2, 1, "", "setMaxLength"], [108, 2, 1, "", "setMinLength"], [108, 2, 1, "", "setSplitLength"], [108, 2, 1, "", "setUseAbbreviations"], [108, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[109, 1, 1, "", "SentenceDetectorDLApproach"], [109, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[109, 2, 1, "", "setEpochsNumber"], [109, 2, 1, "", "setExplodeSentences"], [109, 2, 1, "", "setImpossiblePenultimates"], [109, 2, 1, "", "setModel"], [109, 2, 1, "", "setOutputLogsPath"], [109, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[109, 2, 1, "", "pretrained"], [109, 2, 1, "", "setCustomBounds"], [109, 2, 1, "", "setExplodeSentences"], [109, 2, 1, "", "setImpossiblePenultimates"], [109, 2, 1, "", "setMaxLength"], [109, 2, 1, "", "setMinLength"], [109, 2, 1, "", "setModel"], [109, 2, 1, "", "setSplitLength"], [109, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[111, 0, 0, "-", "sentiment_detector"], [112, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[111, 1, 1, "", "SentimentDetector"], [111, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[111, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[112, 1, 1, "", "ViveknSentimentApproach"], [112, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[112, 2, 1, "", "setPruneCorpus"], [112, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[112, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[113, 0, 0, "-", "bart_transformer"], [114, 0, 0, "-", "gpt2_transformer"], [116, 0, 0, "-", "marian_transformer"], [117, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[113, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[113, 2, 1, "", "loadSavedModel"], [113, 2, 1, "", "pretrained"], [113, 2, 1, "", "setBeamSize"], [113, 2, 1, "", "setCache"], [113, 2, 1, "", "setConfigProtoBytes"], [113, 2, 1, "", "setDoSample"], [113, 2, 1, "", "setIgnoreTokenIds"], [113, 2, 1, "", "setMaxOutputLength"], [113, 2, 1, "", "setMinOutputLength"], [113, 2, 1, "", "setNoRepeatNgramSize"], [113, 2, 1, "", "setRepetitionPenalty"], [113, 2, 1, "", "setTask"], [113, 2, 1, "", "setTemperature"], [113, 2, 1, "", "setTopK"], [113, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[114, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[114, 2, 1, "", "loadSavedModel"], [114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setConfigProtoBytes"], [114, 2, 1, "", "setDoSample"], [114, 2, 1, "", "setIgnoreTokenIds"], [114, 2, 1, "", "setMaxOutputLength"], [114, 2, 1, "", "setMinOutputLength"], [114, 2, 1, "", "setNoRepeatNgramSize"], [114, 2, 1, "", "setRepetitionPenalty"], [114, 2, 1, "", "setTask"], [114, 2, 1, "", "setTemperature"], [114, 2, 1, "", "setTopK"], [114, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[116, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[116, 2, 1, "", "loadSavedModel"], [116, 2, 1, "", "pretrained"], [116, 2, 1, "", "setConfigProtoBytes"], [116, 2, 1, "", "setIgnoreTokenIds"], [116, 2, 1, "", "setLangId"], [116, 2, 1, "", "setMaxInputLength"], [116, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[117, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[117, 2, 1, "", "loadSavedModel"], [117, 2, 1, "", "pretrained"], [117, 2, 1, "", "setConfigProtoBytes"], [117, 2, 1, "", "setDoSample"], [117, 2, 1, "", "setIgnoreTokenIds"], [117, 2, 1, "", "setMaxOutputLength"], [117, 2, 1, "", "setMinOutputLength"], [117, 2, 1, "", "setNoRepeatNgramSize"], [117, 2, 1, "", "setRepetitionPenalty"], [117, 2, 1, "", "setTask"], [117, 2, 1, "", "setTemperature"], [117, 2, 1, "", "setTopK"], [117, 2, 1, "", "setTopP"]], "sparknlp.annotator.similarity": [[118, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[118, 1, 1, "", "DocumentSimilarityRankerApproach"], [118, 1, 1, "", "DocumentSimilarityRankerFinisher"], [118, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[118, 2, 1, "", "setBucketLength"], [118, 2, 1, "", "setIdentityRanking"], [118, 2, 1, "", "setNumHashTables"], [118, 2, 1, "", "setNumberOfNeighbours"], [118, 2, 1, "", "setSimilarityMethod"], [118, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[118, 2, 1, "", "getInputCols"], [118, 2, 1, "", "getOutputCols"], [118, 2, 1, "", "setExtractNearestNeighbor"], [118, 2, 1, "", "setInputCols"], [118, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[120, 0, 0, "-", "context_spell_checker"], [122, 0, 0, "-", "norvig_sweeting"], [123, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[120, 1, 1, "", "ContextSpellCheckerApproach"], [120, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[120, 2, 1, "", "addRegexClass"], [120, 2, 1, "", "addVocabClass"], [120, 2, 1, "", "setBatchSize"], [120, 2, 1, "", "setCaseStrategy"], [120, 2, 1, "", "setClassCount"], [120, 2, 1, "", "setCompoundCount"], [120, 2, 1, "", "setConfigProtoBytes"], [120, 2, 1, "", "setEpochs"], [120, 2, 1, "", "setErrorThreshold"], [120, 2, 1, "", "setFinalRate"], [120, 2, 1, "", "setGraphFolder"], [120, 2, 1, "", "setInitialRate"], [120, 2, 1, "", "setLanguageModelClasses"], [120, 2, 1, "", "setMaxCandidates"], [120, 2, 1, "", "setMaxSentLen"], [120, 2, 1, "", "setMaxWindowLen"], [120, 2, 1, "", "setMinCount"], [120, 2, 1, "", "setTradeoff"], [120, 2, 1, "", "setValidationFraction"], [120, 2, 1, "", "setWeightedDistPath"], [120, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[120, 2, 1, "", "getWordClasses"], [120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setCaseStrategy"], [120, 2, 1, "", "setClasses"], [120, 2, 1, "", "setCompareLowcase"], [120, 2, 1, "", "setConfigProtoBytes"], [120, 2, 1, "", "setCorrectSymbols"], [120, 2, 1, "", "setErrorThreshold"], [120, 2, 1, "", "setGamma"], [120, 2, 1, "", "setIdsVocab"], [120, 2, 1, "", "setMaxCandidates"], [120, 2, 1, "", "setMaxWindowLen"], [120, 2, 1, "", "setTradeoff"], [120, 2, 1, "", "setVocabFreq"], [120, 2, 1, "", "setVocabIds"], [120, 2, 1, "", "setWeights"], [120, 2, 1, "", "setWordMaxDistance"], [120, 2, 1, "", "updateRegexClass"], [120, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[122, 1, 1, "", "NorvigSweetingApproach"], [122, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[122, 2, 1, "", "setCaseSensitive"], [122, 2, 1, "", "setDictionary"], [122, 2, 1, "", "setDoubleVariants"], [122, 2, 1, "", "setFrequencyPriority"], [122, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[122, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[123, 1, 1, "", "SymmetricDeleteApproach"], [123, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[123, 2, 1, "", "setDeletesThreshold"], [123, 2, 1, "", "setDictionary"], [123, 2, 1, "", "setFrequencyThreshold"], [123, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[123, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[124, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[125, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[125, 2, 1, "", "loadDefaultStopWords"], [125, 2, 1, "", "pretrained"], [125, 2, 1, "", "setCaseSensitive"], [125, 2, 1, "", "setLocale"], [125, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[126, 1, 1, "", "TFNerDLGraphBuilder"], [126, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[126, 2, 1, "", "getGraphFile"], [126, 2, 1, "", "getGraphFolder"], [126, 2, 1, "", "getHiddenUnitsNumber"], [126, 2, 1, "", "getInputCols"], [126, 2, 1, "", "getLabelColumn"], [126, 2, 1, "", "setGraphFile"], [126, 2, 1, "", "setGraphFolder"], [126, 2, 1, "", "setHiddenUnitsNumber"], [126, 2, 1, "", "setInputCols"], [126, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[127, 0, 0, "-", "chunk_tokenizer"], [129, 0, 0, "-", "recursive_tokenizer"], [130, 0, 0, "-", "regex_tokenizer"], [131, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[127, 1, 1, "", "ChunkTokenizer"], [127, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[129, 1, 1, "", "RecursiveTokenizer"], [129, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[129, 2, 1, "", "setInfixes"], [129, 2, 1, "", "setPrefixes"], [129, 2, 1, "", "setSuffixes"], [129, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[130, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[130, 2, 1, "", "setMaxLength"], [130, 2, 1, "", "setMinLength"], [130, 2, 1, "", "setPattern"], [130, 2, 1, "", "setPositionalMask"], [130, 2, 1, "", "setPreservePosition"], [130, 2, 1, "", "setToLowercase"], [130, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[131, 1, 1, "", "Tokenizer"], [131, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[131, 2, 1, "", "addContextChars"], [131, 2, 1, "", "addException"], [131, 2, 1, "", "addInfixPattern"], [131, 2, 1, "", "addSplitChars"], [131, 2, 1, "", "getCaseSensitiveExceptions"], [131, 2, 1, "", "getContextChars"], [131, 2, 1, "", "getExceptions"], [131, 2, 1, "", "getInfixPatterns"], [131, 2, 1, "", "getPrefixPattern"], [131, 2, 1, "", "getSplitChars"], [131, 2, 1, "", "getSuffixPattern"], [131, 2, 1, "", "setCaseSensitiveExceptions"], [131, 2, 1, "", "setContextChars"], [131, 2, 1, "", "setExceptions"], [131, 2, 1, "", "setExceptionsPath"], [131, 2, 1, "", "setInfixPatterns"], [131, 2, 1, "", "setMaxLength"], [131, 2, 1, "", "setMinLength"], [131, 2, 1, "", "setPrefixPattern"], [131, 2, 1, "", "setSplitChars"], [131, 2, 1, "", "setSplitPattern"], [131, 2, 1, "", "setSuffixPattern"], [131, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[131, 2, 1, "", "addSplitChars"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setSplitChars"], [131, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.ws": [[133, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[133, 1, 1, "", "WordSegmenterApproach"], [133, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[133, 2, 1, "", "getAmbiguityThreshold"], [133, 2, 1, "", "getFrequencyThreshold"], [133, 2, 1, "", "getNIterations"], [133, 2, 1, "", "setAmbiguityThreshold"], [133, 2, 1, "", "setEnableRegexTokenizer"], [133, 2, 1, "", "setFrequencyThreshold"], [133, 2, 1, "", "setNIterations"], [133, 2, 1, "", "setPattern"], [133, 2, 1, "", "setPosColumn"], [133, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[133, 2, 1, "", "pretrained"], [133, 2, 1, "", "setEnableRegexTokenizer"], [133, 2, 1, "", "setPattern"], [133, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[134, 0, 0, "-", "audio_assembler"], [135, 0, 0, "-", "doc2_chunk"], [136, 0, 0, "-", "document_assembler"], [137, 0, 0, "-", "embeddings_finisher"], [138, 0, 0, "-", "finisher"], [139, 0, 0, "-", "graph_finisher"], [140, 0, 0, "-", "has_recursive_fit"], [141, 0, 0, "-", "has_recursive_transform"], [142, 0, 0, "-", "image_assembler"], [144, 0, 0, "-", "light_pipeline"], [145, 0, 0, "-", "multi_document_assembler"], [146, 0, 0, "-", "recursive_pipeline"], [147, 0, 0, "-", "table_assembler"], [148, 0, 0, "-", "token2_chunk"], [149, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[134, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[134, 2, 1, "", "getOutputCol"], [134, 2, 1, "", "setInputCol"], [134, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[135, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[135, 2, 1, "", "setChunkCol"], [135, 2, 1, "", "setFailOnMissing"], [135, 2, 1, "", "setIsArray"], [135, 2, 1, "", "setLowerCase"], [135, 2, 1, "", "setStartCol"], [135, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[136, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[136, 2, 1, "", "getOutputCol"], [136, 2, 1, "", "setCleanupMode"], [136, 2, 1, "", "setIdCol"], [136, 2, 1, "", "setInputCol"], [136, 2, 1, "", "setMetadataCol"], [136, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[137, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[137, 2, 1, "", "getInputCols"], [137, 2, 1, "", "getOutputCols"], [137, 2, 1, "", "setCleanAnnotations"], [137, 2, 1, "", "setInputCols"], [137, 2, 1, "", "setOutputAsVector"], [137, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[138, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[138, 2, 1, "", "getInputCols"], [138, 2, 1, "", "getOutputCols"], [138, 2, 1, "", "setAnnotationSplitSymbol"], [138, 2, 1, "", "setCleanAnnotations"], [138, 2, 1, "", "setIncludeMetadata"], [138, 2, 1, "", "setInputCols"], [138, 2, 1, "", "setOutputAsArray"], [138, 2, 1, "", "setOutputCols"], [138, 2, 1, "", "setParseEmbeddingsVectors"], [138, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[139, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[139, 2, 1, "", "setCleanAnnotations"], [139, 2, 1, "", "setInputCol"], [139, 2, 1, "", "setOutputAsArray"], [139, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[140, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[141, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[142, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[142, 2, 1, "", "getOutputCol"], [142, 2, 1, "", "setInputCol"], [142, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[144, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[144, 2, 1, "", "annotate"], [144, 2, 1, "", "fullAnnotate"], [144, 2, 1, "", "fullAnnotateImage"], [144, 2, 1, "", "getIgnoreUnsupported"], [144, 2, 1, "", "setIgnoreUnsupported"], [144, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[145, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[145, 2, 1, "", "getOutputCols"], [145, 2, 1, "", "setCleanupMode"], [145, 2, 1, "", "setIdCol"], [145, 2, 1, "", "setInputCols"], [145, 2, 1, "", "setMetadataCol"], [145, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[146, 1, 1, "", "RecursivePipeline"], [146, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[147, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[147, 2, 1, "", "setCsvDelimiter"], [147, 2, 1, "", "setEscapeCsvDelimiter"], [147, 2, 1, "", "setInputFormat"]], "sparknlp.base.token2_chunk": [[148, 1, 1, "", "Token2Chunk"]], "sparknlp.base.token_assembler": [[149, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[149, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[150, 0, 0, "-", "annotator_approach"], [151, 0, 0, "-", "annotator_model"], [152, 0, 0, "-", "annotator_properties"], [153, 0, 0, "-", "annotator_type"], [154, 0, 0, "-", "coverage_result"], [156, 0, 0, "-", "match_strategy"], [157, 0, 0, "-", "properties"], [158, 0, 0, "-", "read_as"], [159, 0, 0, "-", "recursive_annotator_approach"], [160, 0, 0, "-", "storage"], [161, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[150, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[151, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[152, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[152, 2, 1, "", "getInputCols"], [152, 2, 1, "", "getLazyAnnotator"], [152, 2, 1, "", "getOutputCol"], [152, 2, 1, "", "setInputCols"], [152, 2, 1, "", "setLazyAnnotator"], [152, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[156, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[157, 1, 1, "", "HasEmbeddingsProperties"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[157, 2, 1, "", "getDimension"], [157, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[158, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[159, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[161, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[162, 3, 1, "", "explode_annotations_col"], [162, 3, 1, "", "filter_by_annotations_col"], [162, 3, 1, "", "map_annotations"], [162, 3, 1, "", "map_annotations_array"], [162, 3, 1, "", "map_annotations_col"], [162, 3, 1, "", "map_annotations_cols"], [162, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[164, 0, 0, "-", "annotator_java_ml"], [165, 0, 0, "-", "annotator_transformer"], [166, 0, 0, "-", "extended_java_wrapper"], [168, 0, 0, "-", "params_getters_setters"], [169, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[164, 1, 1, "", "AnnotatorJavaMLReadable"], [164, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[164, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[165, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[166, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[166, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[168, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[168, 2, 1, "", "getParamValue"], [168, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[169, 1, 1, "", "RecursiveEstimator"], [169, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[169, 2, 1, "", "fit"]], "sparknlp.logging": [[170, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[170, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[170, 2, 1, "", "end"], [170, 2, 1, "", "log_asset"], [170, 2, 1, "", "log_asset_data"], [170, 2, 1, "", "log_completed_run"], [170, 2, 1, "", "log_metrics"], [170, 2, 1, "", "log_parameters"], [170, 2, 1, "", "log_pipeline_parameters"], [170, 2, 1, "", "log_visualization"], [170, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[173, 0, 0, "-", "pretrained_pipeline"], [174, 0, 0, "-", "resource_downloader"], [175, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[173, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[173, 2, 1, "", "annotate"], [173, 2, 1, "", "fullAnnotate"], [173, 2, 1, "", "fullAnnotateImage"], [173, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[174, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[174, 2, 1, "", "clearCache"], [174, 2, 1, "", "downloadModel"], [174, 2, 1, "", "downloadModelDirectly"], [174, 2, 1, "", "downloadPipeline"], [174, 2, 1, "", "showAvailableAnnotators"], [174, 2, 1, "", "showPublicModels"], [174, 2, 1, "", "showPublicPipelines"], [174, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[176, 0, 0, "-", "conll"], [177, 0, 0, "-", "conllu"], [179, 0, 0, "-", "pos"], [180, 0, 0, "-", "pub_tator"], [181, 0, 0, "-", "spacy_to_annotation"], [182, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[176, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[176, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[177, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[177, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[179, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[179, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[180, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[180, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[181, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 191], "start": 0, "spark": [0, 1, 186, 191, 195], "nlp": [0, 1, 186, 195], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 186], "us": [0, 186, 195], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 189, 190, 191], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 164, 165, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 185], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 164, 165, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7], "hubert_for_ctc": 5, "submodul": [6, 28, 45, 48, 53, 66, 79, 81, 82, 84, 89, 94, 105, 107, 110, 115, 119, 121, 128, 132, 143, 155, 163, 167, 171, 172, 178], "wav2vec2_for_ctc": 7, "chunk2_doc": 8, "chunker": 9, "classifier_dl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "albert_for_question_answ": 10, "albert_for_sequence_classif": 11, "albert_for_token_classif": 12, "bert_for_question_answ": 13, "bert_for_sequence_classif": 14, "bert_for_token_classif": 15, "bert_for_zero_shot_classif": 16, "camembert_for_question_answ": 17, "camembert_for_sequence_classif": 18, "camembert_for_token_classif": 19, "deberta_for_question_answ": 21, "deberta_for_sequence_classif": 22, "deberta_for_token_classif": 23, "distil_bert_for_question_answ": 24, "distil_bert_for_sequence_classif": 25, "distil_bert_for_token_classif": 26, "distil_bert_for_zero_shot_classif": 27, "longformer_for_question_answ": 29, "longformer_for_sequence_classif": 30, "longformer_for_token_classif": 31, "multi_classifier_dl": 32, "roberta_bert_for_zero_shot_classif": 33, "roberta_for_question_answ": 34, "roberta_for_sequence_classif": 35, "roberta_for_token_classif": 36, "sentiment_dl": 37, "tapas_for_question_answ": 38, "xlm_roberta_for_question_answ": 39, "xlm_roberta_for_sequence_classif": 40, "xlm_roberta_for_token_classif": 41, "xlm_roberta_for_zero_shot_classif": 42, "xlnet_for_sequence_classif": 43, "xlnet_for_token_classif": 44, "coref": [45, 46], "spanbert_coref": 46, "cv": [47, 48, 49, 50], "convnext_for_image_classif": 47, "swin_for_image_classif": 49, "vit_for_image_classif": 50, "date2_chunk": 51, "depend": [52, 53, 54], "dependency_pars": 52, "typed_dependency_pars": 54, "document_norm": 55, "embed": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "albert_embed": 56, "bert_embed": 57, "bert_sentence_embed": 58, "camembert_embed": 59, "chunk_embed": 60, "deberta_embed": 61, "distil_bert_embed": 62, "doc2vec": 63, "e5_embed": 64, "elmo_embed": 65, "instructor_embed": 67, "longformer_embed": 68, "roberta_embed": 69, "roberta_sentence_embed": 70, "sentence_embed": 71, "universal_sentence_encod": 72, "word2vec": 73, "word_embed": 74, "xlm_roberta_embed": 75, "xlm_roberta_sentence_embed": 76, "xlnet_embed": 77, "er": [78, 79], "entity_rul": 78, "graph_extract": 80, "subpackag": [81, 163], "keyword_extract": [82, 83], "yake_keyword_extract": 83, "ld_dl": [84, 85], "language_detector_dl": 85, "lemmat": 86, "matcher": [87, 88, 89, 90, 91, 92], "big_text_match": 87, "date_match": 88, "multi_date_match": 90, "regex_match": 91, "text_match": 92, "n_gram_gener": 93, "ner": [94, 95, 96, 97, 98, 99, 100], "ner_approach": 95, "ner_convert": 96, "ner_crf": 97, "ner_dl": 98, "ner_overwrit": 99, "zero_shot_ner_model": 100, "normal": 101, "param": [102, 103, 104], "classifier_encod": 102, "evaluation_dl_param": 103, "po": [105, 106, 179, 196], "perceptron": 106, "sentenc": [107, 108, 109, 191], "sentence_detector": 108, "sentence_detector_dl": 109, "sentiment": [110, 111, 112], "sentiment_detector": 111, "vivekn_senti": 112, "seq2seq": [113, 114, 115, 116, 117], "bart_transform": 113, "gpt2_transform": 114, "marian_transform": 116, "t5_transform": 117, "similar": [118, 119], "document_similarity_rank": 118, "spell_check": [120, 121, 122, 123], "context_spell_check": 120, "norvig_sweet": 122, "symmetric_delet": 123, "stemmer": 124, "stop_words_clean": 125, "tf_ner_dl_graph_build": 126, "token": [127, 128, 129, 130, 131, 191], "chunk_token": 127, "recursive_token": 129, "regex_token": 130, "w": [132, 133], "word_segment": 133, "base": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "audio_assembl": 134, "doc2_chunk": 135, "document_assembl": 136, "embeddings_finish": 137, "finish": [138, 191], "graph_finish": 139, "has_recursive_fit": 140, "has_recursive_transform": 141, "image_assembl": 142, "light_pipelin": 144, "multi_document_assembl": 145, "recursive_pipelin": 146, "table_assembl": 147, "token2_chunk": 148, "token_assembl": 149, "common": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 190], "annotator_approach": 150, "annotator_model": 151, "annotator_properti": 152, "annotator_typ": 153, "coverage_result": 154, "match_strategi": 156, "properti": 157, "read_a": 158, "recursive_annotator_approach": 159, "storag": 160, "util": [161, 175, 184], "function": [161, 162, 163, 190, 192], "packag": 163, "intern": [164, 165, 166, 167, 168, 169], "annotator_java_ml": 164, "annotator_transform": 165, "extended_java_wrapp": 166, "params_getters_sett": 168, "recurs": 169, "log": [170, 171, 186, 188], "comet": [170, 186], "pretrain": [172, 173, 174, 175, 190, 194, 195], "pretrained_pipelin": 173, "resource_download": 174, "train": [176, 177, 178, 179, 180, 181, 182, 196], "conll": [176, 196], "conllu": [177, 196], "pub_tat": 180, "spacy_to_annot": 181, "tfgraph": 182, "upload_to_hub": 183, "api": 185, "refer": 185, "A": 186, "meta": 186, "machin": [186, 187], "learn": [186, 187], "platform": [186, 187], "pipelin": [186, 191, 194, 195], "paramet": 186, "evalu": 186, "metric": 186, "visual": 186, "run": 186, "an": 186, "offlin": 186, "experi": 186, "mlflow": 187, "lifecycl": 187, "third": 188, "parti": 188, "project": 188, "approach": 190, "model": 190, "note": 190, "avail": [190, 195], "set": 191, "up": 191, "your": 191, "own": 191, "type": 191, "necessari": 191, "import": 191, "construct": 191, "documentassembl": 191, "data": 191, "detect": 191, "out": 191, "put": 191, "all": 191, "togeth": 191, "ml": [191, 195], "helper": 192, "user": 193, "guid": 193, "light": 194, "convert": 194, "pipelinemodel": 194, "download": 195, "As": 195, "lightpipelin": 195, "load": 196, "dataset": 196, "spell": 196, "checker": 196, "pubtat": 196}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [186, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [83, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [120, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [80, "classes"], [83, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [120, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [181, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [28, "submodules"], [45, "submodules"], [48, "submodules"], [53, "submodules"], [66, "submodules"], [79, "submodules"], [81, "submodules"], [82, "submodules"], [84, "submodules"], [89, "submodules"], [94, "submodules"], [105, "submodules"], [107, "submodules"], [110, "submodules"], [115, "submodules"], [119, "submodules"], [121, "submodules"], [128, "submodules"], [132, "submodules"], [143, "submodules"], [155, "submodules"], [163, "submodules"], [167, "submodules"], [171, "submodules"], [172, "submodules"], [178, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[8, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[9, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[45, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[46, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[47, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[48, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[49, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vit_for_image_classification": [[50, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[51, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[52, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[53, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[54, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_normalizer": [[55, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[56, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[58, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[59, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[60, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[61, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[62, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[63, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[64, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[65, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[66, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[67, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[68, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[69, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[70, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[71, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[72, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[73, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[74, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[75, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[76, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[77, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[78, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[79, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[80, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[81, "module-sparknlp.annotator"]], "Subpackages": [[81, "subpackages"], [163, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[82, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[83, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[84, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[85, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[86, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[87, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[88, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[89, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[90, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[91, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[92, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[93, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[94, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[95, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[96, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[97, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[98, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[99, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[100, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[101, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.param.classifier_encoder": [[102, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[103, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[104, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[105, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[106, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[107, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[108, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[109, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[110, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[111, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[112, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[113, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[114, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[115, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[116, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[117, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[118, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[119, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[120, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[121, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[122, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[123, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[124, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[125, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[126, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[127, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[128, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[129, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[130, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[131, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[132, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[133, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[134, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[135, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[136, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[137, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[138, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[139, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[140, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[141, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[142, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[143, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[144, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[145, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[146, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[147, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token2_chunk": [[148, "module-sparknlp.base.token2_chunk"]], "sparknlp.base.token_assembler": [[149, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[150, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[151, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[152, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[153, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[154, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[155, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[156, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[157, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[158, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[159, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[160, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[161, "module-sparknlp.common.utils"]], "Functions": [[161, "functions"], [162, "functions"], [163, "functions"]], "sparknlp.functions": [[162, "module-sparknlp.functions"]], "sparknlp": [[163, "module-sparknlp"]], "Package Contents": [[163, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[164, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[165, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[166, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[167, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[168, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[169, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[170, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[171, "module-sparknlp.logging"]], "sparknlp.pretrained": [[172, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[173, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[174, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[175, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[176, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[177, "module-sparknlp.training.conllu"]], "sparknlp.training": [[178, "module-sparknlp.training"]], "sparknlp.training.pos": [[179, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[180, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[181, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[182, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[183, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[184, "module-sparknlp.util"]], "API Reference": [[185, "api-reference"]], "Modules": [[185, "modules"]], "Comet - A meta machine learning platform": [[186, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[186, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[186, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[186, "logging-evaluation-metrics"]], "Logging Visualizations": [[186, "logging-visualizations"]], "Running An Offline Experiment": [[186, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[187, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[188, "third-party-projects"]], "Logging": [[188, "logging"]], "Annotation": [[189, "annotation"]], "Annotators": [[190, "annotators"]], "Annotator Approaches": [[190, "annotator-approaches"]], "Annotator Models": [[190, "annotator-models"]], "Note": [[190, "note"]], "Pretrained Models": [[190, "pretrained-models"]], "Common Functions": [[190, "common-functions"]], "Available Annotators": [[190, "available-annotators"]], "Setting up your own pipeline": [[191, "setting-up-your-own-pipeline"]], "Annotator types": [[191, "annotator-types"]], "Necessary imports": [[191, "necessary-imports"]], "Constructing the Pipeline": [[191, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[191, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[191, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[191, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[191, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[192, "helper-functions"]], "User Guide": [[193, "user-guide"]], "Light Pipelines": [[194, "light-pipelines"]], "Converting PipelineModels": [[194, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[194, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[195, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[195, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[195, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[195, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[195, "available-pipelines"]], "Loading datasets for training": [[196, "loading-datasets-for-training"]], "POS Dataset": [[196, "pos-dataset"]], "CoNLL Dataset": [[196, "conll-dataset"]], "CoNLLU Dataset": [[196, "conllu-dataset"]], "Spell Checkers Dataset": [[196, "spell-checkers-dataset"]], "PubTator Dataset": [[196, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.chunk2_doc"], [9, "module-sparknlp.annotator.chunker"], [10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [20, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"], [34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [44, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [45, "module-sparknlp.annotator.coref"], [46, "module-sparknlp.annotator.coref.spanbert_coref"], [47, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [48, "module-sparknlp.annotator.cv"], [49, "module-sparknlp.annotator.cv.swin_for_image_classification"], [50, "module-sparknlp.annotator.cv.vit_for_image_classification"], [51, "module-sparknlp.annotator.date2_chunk"], [52, "module-sparknlp.annotator.dependency.dependency_parser"], [53, "module-sparknlp.annotator.dependency"], [54, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [55, "module-sparknlp.annotator.document_normalizer"], [56, "module-sparknlp.annotator.embeddings.albert_embeddings"], [57, "module-sparknlp.annotator.embeddings.bert_embeddings"], [58, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [59, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [60, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [61, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [62, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [63, "module-sparknlp.annotator.embeddings.doc2vec"], [64, "module-sparknlp.annotator.embeddings.e5_embeddings"], [65, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [66, "module-sparknlp.annotator.embeddings"], [67, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [68, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [69, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [70, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [71, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [72, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [73, "module-sparknlp.annotator.embeddings.word2vec"], [74, "module-sparknlp.annotator.embeddings.word_embeddings"], [75, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [76, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [77, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [78, "module-sparknlp.annotator.er.entity_ruler"], [79, "module-sparknlp.annotator.er"], [80, "module-sparknlp.annotator.graph_extraction"], [81, "module-sparknlp.annotator"], [82, "module-sparknlp.annotator.keyword_extraction"], [83, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [84, "module-sparknlp.annotator.ld_dl"], [85, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [86, "module-sparknlp.annotator.lemmatizer"], [87, "module-sparknlp.annotator.matcher.big_text_matcher"], [88, "module-sparknlp.annotator.matcher.date_matcher"], [89, "module-sparknlp.annotator.matcher"], [90, "module-sparknlp.annotator.matcher.multi_date_matcher"], [91, "module-sparknlp.annotator.matcher.regex_matcher"], [92, "module-sparknlp.annotator.matcher.text_matcher"], [93, "module-sparknlp.annotator.n_gram_generator"], [94, "module-sparknlp.annotator.ner"], [95, "module-sparknlp.annotator.ner.ner_approach"], [96, "module-sparknlp.annotator.ner.ner_converter"], [97, "module-sparknlp.annotator.ner.ner_crf"], [98, "module-sparknlp.annotator.ner.ner_dl"], [99, "module-sparknlp.annotator.ner.ner_overwriter"], [100, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [101, "module-sparknlp.annotator.normalizer"], [102, "module-sparknlp.annotator.param.classifier_encoder"], [103, "module-sparknlp.annotator.param.evaluation_dl_params"], [104, "module-sparknlp.annotator.param"], [105, "module-sparknlp.annotator.pos"], [106, "module-sparknlp.annotator.pos.perceptron"], [107, "module-sparknlp.annotator.sentence"], [108, "module-sparknlp.annotator.sentence.sentence_detector"], [109, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [110, "module-sparknlp.annotator.sentiment"], [111, "module-sparknlp.annotator.sentiment.sentiment_detector"], [112, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [113, "module-sparknlp.annotator.seq2seq.bart_transformer"], [114, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [115, "module-sparknlp.annotator.seq2seq"], [116, "module-sparknlp.annotator.seq2seq.marian_transformer"], [117, "module-sparknlp.annotator.seq2seq.t5_transformer"], [118, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [119, "module-sparknlp.annotator.similarity"], [120, "module-sparknlp.annotator.spell_check.context_spell_checker"], [121, "module-sparknlp.annotator.spell_check"], [122, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [123, "module-sparknlp.annotator.spell_check.symmetric_delete"], [124, "module-sparknlp.annotator.stemmer"], [125, "module-sparknlp.annotator.stop_words_cleaner"], [126, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [127, "module-sparknlp.annotator.token.chunk_tokenizer"], [128, "module-sparknlp.annotator.token"], [129, "module-sparknlp.annotator.token.recursive_tokenizer"], [130, "module-sparknlp.annotator.token.regex_tokenizer"], [131, "module-sparknlp.annotator.token.tokenizer"], [132, "module-sparknlp.annotator.ws"], [133, "module-sparknlp.annotator.ws.word_segmenter"], [134, "module-sparknlp.base.audio_assembler"], [135, "module-sparknlp.base.doc2_chunk"], [136, "module-sparknlp.base.document_assembler"], [137, "module-sparknlp.base.embeddings_finisher"], [138, "module-sparknlp.base.finisher"], [139, "module-sparknlp.base.graph_finisher"], [140, "module-sparknlp.base.has_recursive_fit"], [141, "module-sparknlp.base.has_recursive_transform"], [142, "module-sparknlp.base.image_assembler"], [143, "module-sparknlp.base"], [144, "module-sparknlp.base.light_pipeline"], [145, "module-sparknlp.base.multi_document_assembler"], [146, "module-sparknlp.base.recursive_pipeline"], [147, "module-sparknlp.base.table_assembler"], [148, "module-sparknlp.base.token2_chunk"], [149, "module-sparknlp.base.token_assembler"], [150, "module-sparknlp.common.annotator_approach"], [151, "module-sparknlp.common.annotator_model"], [152, "module-sparknlp.common.annotator_properties"], [153, "module-sparknlp.common.annotator_type"], [154, "module-sparknlp.common.coverage_result"], [155, "module-sparknlp.common"], [156, "module-sparknlp.common.match_strategy"], [157, "module-sparknlp.common.properties"], [158, "module-sparknlp.common.read_as"], [159, "module-sparknlp.common.recursive_annotator_approach"], [160, "module-sparknlp.common.storage"], [161, "module-sparknlp.common.utils"], [162, "module-sparknlp.functions"], [163, "module-sparknlp"], [164, "module-sparknlp.internal.annotator_java_ml"], [165, "module-sparknlp.internal.annotator_transformer"], [166, "module-sparknlp.internal.extended_java_wrapper"], [167, "module-sparknlp.internal"], [168, "module-sparknlp.internal.params_getters_setters"], [169, "module-sparknlp.internal.recursive"], [170, "module-sparknlp.logging.comet"], [171, "module-sparknlp.logging"], [172, "module-sparknlp.pretrained"], [173, "module-sparknlp.pretrained.pretrained_pipeline"], [174, "module-sparknlp.pretrained.resource_downloader"], [175, "module-sparknlp.pretrained.utils"], [176, "module-sparknlp.training.conll"], [177, "module-sparknlp.training.conllu"], [178, "module-sparknlp.training"], [179, "module-sparknlp.training.pos"], [180, "module-sparknlp.training.pub_tator"], [181, "module-sparknlp.training.spacy_to_annotation"], [182, "module-sparknlp.training.tfgraphs"], [183, "module-sparknlp.upload_to_hub"], [184, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[8, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[8, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[9, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[9, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[9, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[44, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[45, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[46, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[46, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[46, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[46, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[46, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[46, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[46, "module-sparknlp.annotator.coref.spanbert_coref"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[47, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[47, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[48, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "setdorescale() (swinforimageclassification method)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setDoRescale"]], "setrescalefactor() (swinforimageclassification method)": [[49, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[49, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[50, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[50, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[50, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[50, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[50, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[50, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[51, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[51, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[51, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[52, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[53, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[54, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[55, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[56, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[58, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[59, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[60, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[60, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[60, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[60, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[61, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[62, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "pretrained() (doc2vecmodel static method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[63, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[64, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[64, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[64, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[64, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[64, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[65, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[65, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[65, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[65, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[65, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[65, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[65, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[66, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[67, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[67, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[67, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[67, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[67, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[67, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[68, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[68, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[68, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[68, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[68, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[69, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[69, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[69, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[69, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[69, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[70, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[70, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[70, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[70, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[70, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[71, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[71, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[71, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[72, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[72, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[72, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[72, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[72, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[72, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "pretrained() (word2vecmodel static method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[73, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[73, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[74, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[74, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[75, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[76, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[76, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[76, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[76, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[76, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[77, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[77, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[77, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[77, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[77, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[78, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[78, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[78, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[78, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[78, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[78, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[78, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[79, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[80, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[80, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[81, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[82, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[83, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[83, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[84, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[85, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[85, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[85, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[85, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[85, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[85, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[85, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[86, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[86, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[86, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[86, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[86, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[86, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[86, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[87, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[87, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[88, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[88, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[89, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[90, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[90, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[91, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[91, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[91, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[91, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[91, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[91, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[91, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[92, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[92, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[93, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[93, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[93, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[93, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[93, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[94, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[95, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[95, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[96, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[96, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[96, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[96, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[96, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[97, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[97, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[98, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[98, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[99, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[99, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[99, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[99, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[99, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[100, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[100, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[100, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[100, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[100, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[100, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[100, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[101, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[101, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[101, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[101, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[101, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[101, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[101, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[101, "module-sparknlp.annotator.normalizer"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[102, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[102, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[103, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[103, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[104, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[105, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[106, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[106, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[106, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[106, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[106, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[106, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[106, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[107, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[108, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[108, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[109, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[109, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[110, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[111, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[111, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[111, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[111, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[112, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[112, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[112, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[112, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[112, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[112, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[113, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[113, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[114, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[114, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[115, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[116, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[116, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[117, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[117, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[118, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[118, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[119, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[120, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[120, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[121, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[122, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[122, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[123, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[123, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[124, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[124, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[125, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[125, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[125, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[125, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[125, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[125, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[125, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[126, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[126, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[127, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[127, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[127, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[128, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[129, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[129, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[129, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[129, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[129, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[129, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[129, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[130, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[130, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[131, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[131, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[131, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[131, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[131, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[131, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[131, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[132, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[133, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[133, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[134, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[134, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[134, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[134, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[134, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[135, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[135, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[136, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[136, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[136, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[136, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[136, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[136, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[136, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[136, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[137, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[137, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[138, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[138, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[138, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[139, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[139, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[139, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[139, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[139, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[139, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[140, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[140, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[141, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[141, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[142, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[142, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[142, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[142, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[142, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[143, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[144, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[144, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[144, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[144, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[144, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[144, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[144, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[144, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[145, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[145, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[146, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[146, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[146, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[147, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[147, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[147, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[147, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[147, "module-sparknlp.base.table_assembler"]], "token2chunk (class in sparknlp.base.token2_chunk)": [[148, "sparknlp.base.token2_chunk.Token2Chunk"]], "sparknlp.base.token2_chunk": [[148, "module-sparknlp.base.token2_chunk"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[149, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[149, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[149, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[150, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[150, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[151, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[151, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[152, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[152, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[153, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[154, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[155, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[156, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[156, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[157, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[157, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setdimension() (hasembeddingsproperties method)": [[157, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "sparknlp.common.properties": [[157, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[158, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[158, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[159, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[159, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[160, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[161, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[161, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[162, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[162, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[162, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[162, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[162, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[162, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[162, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[162, "module-sparknlp.functions"]], "sparknlp": [[163, "module-sparknlp"]], "start() (in module sparknlp)": [[163, "sparknlp.start"]], "version() (in module sparknlp)": [[163, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[164, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[164, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[164, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[164, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[165, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[165, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[166, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[166, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[166, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[167, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[168, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[168, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[168, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[168, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[169, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[169, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[169, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[169, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[170, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[170, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[170, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[171, "module-sparknlp.logging"]], "sparknlp.pretrained": [[172, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[173, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[173, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[173, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[173, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[173, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[173, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[174, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[174, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[175, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[176, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[176, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[176, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[177, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[177, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[177, "module-sparknlp.training.conllu"]], "sparknlp.training": [[178, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[179, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[179, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[179, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[180, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[180, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[180, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[181, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[181, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[182, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[183, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[184, "module-sparknlp.util"]]}})