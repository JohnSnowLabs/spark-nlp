Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 90, 91, 92, 95, 96, 97, 100, 101, 102, 103, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 150, 152, 153, 154, 155, 156, 158, 159, 163, 164, 170, 171, 175, 176, 177, 180, 181, 186, 188, 192, 193, 196, 197, 198, 200, 201, 202], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 95, 100, 101, 102, 103, 104, 107, 108, 113, 115, 116, 118, 120, 121, 123, 124, 127, 129, 130, 132, 139, 141, 144, 145, 153, 154, 155, 164, 168, 177, 180, 181, 183, 184, 186, 193, 195, 197, 198, 200, 201, 202, 203], "quick": [0, 193, 198], "refer": [0, 1, 5, 8, 48, 49, 51, 53, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 87, 104, 107, 115, 116, 119, 120, 121, 123, 124, 127, 129, 130, 141, 143, 144, 153, 164, 197, 199, 200], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 55, 57, 59, 60, 62, 63, 64, 65, 67, 68, 71, 73, 75, 79, 81, 82, 84, 89, 90, 91, 95, 96, 100, 101, 102, 105, 107, 110, 115, 118, 129, 130, 137, 138, 141, 144, 147, 153, 163, 165, 168, 170, 183, 184, 188, 193, 197, 202], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 158, 159, 164, 168, 170, 175, 176, 177, 181, 183, 193, 197, 200, 201], "up": [0, 1, 5, 8, 22, 34, 52, 66, 71, 75, 77, 87, 107, 120, 121, 123, 124, 164, 170, 193, 197, 200, 201], "your": [0, 1, 22, 34, 39, 55, 65, 66, 73, 75, 77, 90, 91, 95, 96, 100, 101, 102, 105, 107, 108, 113, 118, 119, 127, 129, 134, 136, 141, 145, 195, 197, 200, 201, 203], "environ": [0, 194], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 62, 66, 77, 87, 123, 141], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 95, 96, 101, 102, 104, 105, 107, 108, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 138, 141, 145, 146, 155, 170], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 87, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 150, 180, 181, 188, 197, 200], "shell": 0, "packag": [0, 59, 64, 177, 194, 195], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 95, 96, 101, 102, 104, 105, 107, 108, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 138, 141, 155, 170], "nlp_2": [0, 170], "12": [0, 59, 79, 80, 81, 87, 92, 94, 100, 113, 127, 139, 152, 169, 170, 180, 186, 188, 196], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 150, 152, 153, 155, 156, 169, 170, 173, 176, 177, 180, 183, 184, 186, 187, 197, 198], "submit": [0, 177, 193], "extern": [0, 87, 90, 95, 96, 102, 127, 133, 154, 168, 183, 184, 186, 187], "jar": [0, 170], "after": [0, 54, 55, 57, 66, 73, 74, 77, 92, 94, 100, 107, 136, 156, 177, 196, 197], "compil": 0, "build": [0, 64, 65, 73, 74, 84, 87, 91, 121, 177, 193], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 168, 169, 170, 176, 177, 181, 183, 186, 187, 188, 193, 194, 196, 197, 198, 200, 201, 202, 203], "built": [0, 22, 34, 153], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 49, 51, 52, 59, 87, 107, 120, 121, 124, 125, 153, 164], "apach": [0, 153, 170], "x": [0, 34, 169, 183, 203], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 138, 141, 144, 145, 146, 153, 156, 164, 177, 180, 181, 187, 193, 194, 196, 197, 198, 199, 200, 201], "you": [0, 14, 18, 29, 38, 44, 55, 57, 63, 65, 67, 73, 75, 84, 92, 103, 107, 123, 145, 147, 152, 170, 177, 181, 186, 188, 193, 195, 197, 198, 201, 202, 203], "need": [0, 5, 7, 8, 10, 55, 57, 65, 67, 73, 78, 82, 84, 87, 92, 95, 101, 102, 105, 110, 113, 116, 119, 121, 127, 129, 130, 137, 138, 142, 150, 152, 177, 181, 183, 184, 186, 193, 195, 197, 198, 201, 203], "java": [0, 89, 108, 125, 157, 158, 166, 172, 173, 176, 181], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 79, 80, 81, 92, 97, 102, 103, 107, 110, 121, 127, 139, 141, 183, 188], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 55, 57, 59, 60, 62, 64, 65, 68, 70, 71, 73, 76, 78, 79, 80, 81, 82, 84, 87, 89, 90, 92, 95, 97, 100, 102, 103, 104, 105, 107, 113, 115, 116, 119, 120, 121, 123, 124, 127, 131, 133, 141, 145, 152, 154, 155, 163, 164, 165, 169, 170, 177, 181, 187, 188, 193, 194, 195, 196, 197, 198, 201, 202, 203], "note": [0, 5, 7, 8, 14, 18, 22, 29, 34, 38, 39, 44, 52, 59, 65, 68, 73, 75, 78, 79, 81, 87, 102, 107, 120, 121, 123, 124, 152, 170, 202], "sinc": [0, 58, 72, 87, 121, 170, 197, 198, 202], "version": [0, 8, 58, 65, 109, 110, 133, 159, 164, 170, 175, 176, 180, 181, 197, 202], "6": [0, 22, 39, 51, 60, 61, 64, 68, 87, 91, 96, 97, 103, 113, 120, 129, 139, 170, 184, 188, 197], "deprec": [0, 170], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 51, 52, 53, 75, 78, 82, 89, 92, 94, 100, 101, 102, 105, 110, 115, 116, 120, 121, 123, 124, 127, 133, 164, 170, 176, 177, 181, 193, 195, 197], "consid": [0, 78, 84, 87, 107, 123, 127, 129, 130, 132, 136, 170, 181], "stick": [0, 170], "lower": [0, 58, 59, 87, 107, 125, 127, 143, 170], "7": [0, 9, 39, 51, 60, 61, 64, 92, 94, 113, 121, 146, 186, 188, 196], "we": [0, 5, 7, 8, 22, 34, 49, 51, 53, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 87, 101, 102, 105, 107, 116, 120, 121, 123, 124, 127, 129, 138, 152, 169, 193, 196, 197, 198, 201, 202, 203], "recommend": [0, 52, 68, 81, 107, 118, 119, 120, 121, 123, 124], "4": [0, 5, 8, 60, 61, 64, 67, 68, 70, 71, 78, 95, 101, 103, 107, 113, 120, 121, 133, 139, 184, 188], "It": [0, 8, 12, 14, 16, 18, 22, 24, 27, 29, 32, 34, 36, 38, 39, 40, 42, 44, 45, 49, 51, 52, 58, 60, 61, 62, 64, 65, 66, 71, 73, 74, 77, 79, 80, 82, 87, 97, 119, 120, 123, 125, 127, 129, 130, 136, 146, 152, 181, 196, 201], "have": [0, 5, 14, 18, 22, 29, 34, 38, 39, 44, 59, 62, 65, 70, 73, 74, 78, 87, 95, 97, 100, 101, 102, 103, 107, 113, 115, 116, 121, 130, 139, 156, 172, 197, 198, 201], "basic": [0, 51, 87, 115, 196], "knowledg": [0, 65, 87, 147], "framework": [0, 7, 120, 123, 124], "work": [0, 8, 49, 65, 70, 71, 89, 107, 120, 123, 124, 134, 196, 198, 202], "befor": [0, 58, 78, 92, 94, 108, 120, 124, 125, 129, 137, 141, 158, 176, 193], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 89, 90, 91, 92, 95, 96, 101, 102, 105, 113, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 132, 134, 136, 141, 144, 153, 154, 181, 194, 195, 199, 202], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 152, 153, 155, 156, 177, 180, 183, 184, 186, 188, 193, 197, 198, 200, 201, 202], "first": [0, 2, 64, 66, 67, 68, 70, 77, 79, 80, 87, 95, 101, 102, 103, 115, 120, 123, 124, 127, 132, 137, 145, 156, 163, 193, 197, 198, 202], "let": [0, 65, 107, 136, 197], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 29, 31, 35, 38, 41, 44, 49, 51, 52, 53, 58, 59, 62, 64, 65, 66, 67, 71, 73, 74, 77, 79, 80, 82, 87, 95, 102, 105, 107, 108, 119, 120, 121, 123, 124, 125, 127, 129, 130, 136, 137, 138, 141, 142, 146, 152, 157, 158, 164, 166, 169, 172, 176, 177, 193, 196, 197, 198, 201], "make": [0, 49, 51, 58, 62, 71, 72, 79, 80, 87, 107, 116, 119, 120, 129, 199, 203], "sure": [0, 119], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 22, 34, 39, 60, 61, 66, 73, 77, 78, 84, 102, 107, 110, 113, 134, 141, 152, 154, 169, 183, 184, 186, 187, 197, 198, 201, 203], "new": [0, 2, 3, 4, 9, 39, 48, 51, 54, 59, 60, 61, 64, 68, 70, 71, 78, 81, 103, 104, 107, 109, 110, 120, 121, 124, 127, 133, 146, 159, 164, 175, 176, 196, 197], "manag": [0, 87, 181, 194], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 51, 52, 58, 59, 60, 61, 62, 75, 78, 81, 82, 85, 89, 92, 102, 105, 107, 120, 121, 124, 127, 132, 137, 141, 145, 147, 163, 164, 177, 181, 192, 197, 202], "depend": [0, 2, 48, 62, 72, 75, 81, 82, 84, 85, 87, 89, 102, 123, 127, 141, 170], "Then": [0, 22, 34, 101, 102, 156, 177, 197], "sparknlp": [0, 193, 196, 197, 198, 199, 201, 202, 203], "n": [0, 80, 87, 97, 100, 101, 102, 107, 115, 116, 120, 121, 124, 136, 152, 155, 164, 169, 180], "y": [0, 34], "activ": [0, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 87], "jupyt": [0, 125, 177, 193], "now": [0, 62, 116, 152, 198], "should": [0, 2, 3, 4, 10, 22, 34, 39, 49, 51, 52, 53, 66, 67, 77, 79, 87, 89, 96, 97, 101, 102, 107, 108, 110, 115, 116, 123, 125, 127, 137, 152, 158, 159, 172, 176, 180, 183, 184], "readi": [0, 22, 180, 197], "notebook": [0, 125, 177, 193], "run": [0, 65, 87, 125, 177, 181, 194, 202], "also": [0, 22, 34, 39, 49, 51, 52, 53, 58, 59, 68, 71, 78, 79, 80, 82, 84, 87, 92, 95, 100, 101, 102, 109, 110, 116, 119, 120, 132, 152, 155, 159, 164, 175, 193, 197, 198, 199, 200, 202], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 181, 183, 184, 186, 187, 188, 194], "bin": 0, "A": [0, 5, 7, 39, 48, 49, 59, 73, 74, 78, 82, 87, 90, 91, 95, 96, 97, 104, 105, 107, 108, 118, 120, 121, 123, 124, 125, 129, 130, 137, 138, 164, 177, 186, 195, 197, 203], "retriev": [0, 67, 70, 78, 90, 129, 130, 131, 177, 180, 193, 197, 198], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 169, 177, 180, 183, 184, 186, 187, 188, 193, 196, 197, 200, 201, 202, 203], "manual": [0, 196], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 91, 120, 121, 123, 124, 170, 183, 184, 186, 187], "becaus": [0, 107, 108, 118, 125, 158, 176], "other": [0, 5, 9, 34, 49, 52, 62, 75, 76, 84, 87, 105, 118, 120, 121, 124, 127, 134, 136, 145, 146, 197], "configur": [0, 49, 75, 138, 170], "includ": [0, 51, 58, 60, 61, 66, 68, 77, 79, 80, 81, 84, 87, 92, 100, 101, 102, 107, 120, 121, 124, 125, 127, 146, 177, 187, 194, 196, 197, 198, 203], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 59, 60, 62, 64, 65, 71, 73, 79, 81, 82, 84, 87, 92, 95, 116, 123, 127, 132, 141, 154, 156, 197, 198], "builder": [0, 133, 170], "appnam": [0, 170], "master": [0, 170], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 87, 120, 121, 123, 124, 132, 152, 170, 180, 201], "config": [0, 170, 194], "driver": [0, 170], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 59, 68, 78, 170], "16g": [0, 170], "maxresults": [0, 170], "0": [0, 5, 7, 8, 9, 10, 22, 34, 39, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 89, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 109, 110, 113, 115, 116, 118, 120, 121, 124, 125, 127, 130, 133, 138, 139, 141, 144, 145, 146, 152, 153, 155, 156, 159, 164, 169, 170, 173, 175, 176, 177, 180, 181, 184, 186, 187, 188, 193, 196, 197, 202, 203], "kryoseri": [0, 170], "buffer": [0, 61, 78, 170], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 59, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 79, 80, 81, 87, 130, 170], "2000m": [0, 170], "getorcr": [0, 170], "main": [1, 82, 125, 138, 196, 200, 203], "page": [1, 58, 121, 180, 192, 200, 202], "github": [1, 64, 70, 73, 123, 180], "issu": [1, 141], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 169, 177, 180, 181, 183, 184, 186, 187, 188, 193, 196, 197, 198, 200, 201, 202, 203], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 95, 96, 100, 101, 102, 104, 105, 107, 108, 110, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 133, 134, 136, 138, 141, 158, 164, 170, 176, 177, 180, 181, 193, 194, 196, 200, 202, 203], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 89, 90, 101, 102, 113, 116, 120, 121, 123, 124, 127, 129, 130, 132, 141, 181], "welcom": [1, 5, 7, 8], "python": [1, 89, 170], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 107, 108, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 191, 193, 196, 197], "inform": [1, 55, 57, 70, 72, 78, 79, 87, 92, 100, 120, 127, 144, 153, 187, 193, 194, 195, 196, 197, 203], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 104, 107, 108, 110, 113, 115, 116, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 133, 137, 138, 139, 141, 143, 144, 145, 146, 152, 153, 154, 155, 156, 163, 164, 169, 170, 177, 180, 181, 183, 184, 186, 187, 194, 195, 196, 197, 198, 200], "librari": [1, 49, 51, 52, 53, 89, 143, 144, 145, 153, 156, 202], "get": [1, 8, 22, 34, 87, 99, 113, 125, 127, 133, 138, 141, 142, 144, 145, 146, 150, 152, 153, 159, 164, 175, 193, 197, 202, 203], "start": [1, 5, 11, 15, 19, 23, 26, 31, 35, 41, 71, 84, 87, 101, 102, 116, 143, 170, 177, 193, 196, 198, 201, 202], "cheat": 1, "sheet": [1, 58], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 57, 59, 61, 64, 67, 68, 76, 79, 80, 87, 102, 105, 119, 127, 139, 141, 143, 145, 156, 196, 197, 198], "instal": [1, 177, 195], "session": [1, 170, 183, 184, 186, 187], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 158, 164, 169, 170, 173, 176, 177, 180, 181, 183, 184, 186, 187, 188, 193, 196, 197, 198, 201, 202, 203], "user": [1, 100, 101, 107, 108, 138, 154, 170, 177, 193], "guid": [1, 194], "annot": [1, 3, 4, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 168, 169, 170, 171, 172, 174, 176, 177, 180, 181, 182, 186, 188, 193, 194, 199, 200, 201, 202, 203], "own": [1, 22, 34, 39, 55, 66, 77, 90, 91, 95, 96, 101, 102, 105, 113, 118, 119, 127, 129, 134, 136, 141, 200, 201, 203], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 170, 176, 177, 179, 180, 181, 182, 194, 196, 197, 200], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 95, 96, 101, 102, 103, 104, 113, 116, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 138, 141, 145, 146, 152, 169, 170, 177, 193, 196, 200], "dataset": [1, 22, 34, 39, 55, 57, 62, 66, 67, 70, 71, 72, 73, 74, 77, 78, 87, 89, 101, 102, 110, 116, 121, 127, 141, 176, 180, 183, 184, 186, 187, 200], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 87, 89, 90, 91, 95, 96, 99, 101, 102, 105, 109, 110, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 134, 136, 141, 143, 152, 170, 177, 180, 193, 197, 198, 200, 201], "light": [1, 5, 65, 81, 87, 152, 200, 202], "helper": [1, 113, 141, 147, 169, 186, 187, 188, 200, 203], "function": [1, 68, 78, 120, 124, 145, 181, 192, 200], "third": [1, 115, 132, 178, 183], "parti": [1, 178], "project": [1, 87, 123, 125, 177, 194], "log": [1, 22, 34, 39, 102, 107, 110, 116, 121, 170], "api": [1, 107, 193, 197, 200], "modul": [1, 30, 56, 69, 83, 85, 86, 88, 93, 98, 106, 111, 112, 114, 117, 122, 128, 135, 140, 151, 162, 174, 179, 185], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 169, 177, 180, 183, 184, 185, 186, 187, 194, 196, 197, 201, 202, 203], "format": [2, 3, 4, 8, 49, 51, 52, 53, 55, 57, 82, 84, 90, 91, 92, 94, 95, 96, 101, 102, 105, 110, 118, 120, 124, 129, 130, 138, 141, 142, 144, 146, 147, 150, 153, 155, 183, 184, 186, 187, 188, 194, 203], "annotatortyp": [2, 3, 4, 63, 97, 143, 144, 150, 153, 196], "begin": [2, 48, 100, 121, 136, 138, 143, 144, 153, 169, 196], "end": [2, 11, 15, 19, 23, 26, 31, 35, 41, 48, 102, 107, 108, 116, 120, 136, 138, 141, 144, 153, 169, 177, 183, 193, 196, 198], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 169, 170, 177, 180, 183, 184, 188, 193, 194, 196, 197, 198, 201, 202], "metadata": [2, 3, 4, 40, 48, 54, 87, 96, 101, 102, 104, 113, 144, 146, 150, 152, 153, 169, 177, 181, 196, 198], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 84, 85, 101, 102, 103, 125, 144, 145, 146, 152, 153, 164, 169, 170, 176, 180, 196], "repres": [2, 3, 4, 55, 57, 59, 64, 70, 81, 82, 84, 91, 96, 97, 107, 108, 138, 177, 180, 197], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 159, 164, 169, 170, 177, 186, 193, 196, 197, 198], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 162, 165, 169, 170, 172, 173, 174, 177, 180, 181, 183, 184, 186, 187, 188, 192, 194, 195, 196, 197, 199, 200, 201, 203], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 89, 90, 91, 95, 96, 101, 102, 103, 104, 105, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 138, 141, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 162, 170, 174, 177, 180, 181, 183, 184, 186, 187, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203], "detail": [2, 3, 4, 8, 52, 79, 80, 87, 104, 120, 121, 124, 164], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 159, 164, 168, 169, 170, 175, 176, 177, 180, 181, 183, 184, 186, 187], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 159, 164, 168, 169, 170, 175, 177, 180, 181, 183, 184, 186, 187], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 137, 138, 141, 144, 146, 152, 153, 155, 164, 169, 170, 177, 180, 181, 183, 184, 186, 187, 188, 193, 196, 197, 198, 200, 201, 203], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 169, 171, 180, 186, 196, 197, 200], "possibl": [2, 3, 4, 63, 65, 79, 80, 82, 115, 127, 130, 144, 153, 163, 165, 177, 193], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 61, 63, 68, 70, 76, 79, 82, 84, 87, 89, 90, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 119, 120, 121, 123, 124, 125, 127, 129, 132, 133, 137, 138, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 159, 163, 164, 165, 175, 177, 193, 203], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 87, 90, 91, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 110, 113, 118, 119, 120, 121, 123, 124, 127, 129, 130, 131, 132, 139, 141, 143, 145, 152, 154, 156, 164, 170, 180, 183, 187, 188, 197, 201, 202], "wordpiec": 2, "word_embed": [2, 59, 60, 62, 63, 64, 65, 68, 69, 71, 73, 75, 77, 79, 81, 85, 101, 102, 110], "sentence_embed": [2, 22, 34, 39, 61, 66, 67, 69, 70, 72, 74, 76, 80, 85, 125, 177, 193, 197], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 51, 53, 177, 193, 197], "date": [2, 54, 92, 94, 95], "entiti": [2, 9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 48, 51, 54, 62, 82, 83, 84, 91, 96, 98, 99, 100, 101, 102, 103, 104, 134, 139, 146, 152, 180], "sentiment": [2, 22, 34, 39, 68, 81, 85, 124, 170, 197, 198], "po": [2, 10, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 55, 57, 84, 85, 101, 102, 136, 141, 152, 169, 170, 180, 183, 185, 196, 200, 201, 202], "chunk": [2, 9, 10, 11, 15, 19, 23, 26, 31, 35, 40, 41, 54, 63, 66, 77, 82, 87, 91, 95, 96, 97, 100, 134, 139, 143, 146, 169, 177, 187, 193, 203], "named_ent": [2, 13, 17, 21, 25, 28, 33, 37, 43, 46, 84, 100, 101, 102, 103, 104, 110, 152, 180], "negex": 2, "labeled_depend": [2, 57], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 143, 153, 156, 164, 181, 197], "keyword": [2, 86, 87, 118], "dummi": [2, 58], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 84, 87, 89, 92, 97, 99, 101, 102, 105, 107, 109, 110, 113, 115, 116, 119, 120, 121, 123, 124, 125, 127, 130, 133, 137, 138, 141, 164, 170, 177, 183], "index": [2, 87, 91, 137, 170, 183], "charact": [2, 58, 68, 71, 82, 89, 95, 97, 105, 115, 116, 127, 129, 130, 137, 138, 141, 146], "under": [2, 65, 72, 81, 87, 170], "last": [2, 92, 94, 134, 188, 201], "string": [2, 8, 22, 34, 39, 48, 55, 58, 82, 95, 97, 103, 105, 116, 124, 130, 132, 136, 143, 144, 146, 150, 152, 153, 201], "dict": [2, 3, 4, 55, 57, 82, 90, 91, 95, 96, 101, 103, 104, 105, 107, 110, 118, 127, 129, 130, 138, 152, 168, 170, 176, 177, 180], "associ": [2, 3, 4, 34, 76, 82, 95, 100, 107, 177], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 84, 87, 89, 92, 95, 99, 100, 102, 103, 104, 105, 107, 109, 115, 116, 120, 121, 123, 124, 125, 127, 132, 136, 138, 145, 146, 152, 153, 159, 169, 176, 177, 180, 181, 188, 192, 197], "vector": [2, 34, 60, 61, 63, 64, 66, 67, 68, 76, 77, 78, 125, 145, 146, 196], "where": [2, 34, 64, 68, 82, 87, 90, 91, 95, 96, 97, 107, 113, 116, 118, 120, 121, 124, 125, 129, 130, 141, 143, 186], "applic": [2, 53, 87, 120, 163, 177, 178, 193, 195], "copi": [2, 3, 4, 181], "differ": [2, 3, 4, 49, 51, 55, 57, 68, 70, 73, 74, 79, 81, 87, 92, 115, 116, 127, 138, 141, 152, 177, 201], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 89, 90, 91, 96, 97, 99, 101, 102, 104, 107, 113, 115, 116, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 136, 138, 141, 143, 152, 164, 168, 169, 170, 171, 176, 180, 181, 183, 184, 186, 187], "newli": [2, 3, 4], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 181, 197], "datatyp": [2, 169], "structtyp": 2, "schema": [2, 100, 177, 193], "look": [2, 102, 129, 196], "like": [2, 5, 11, 15, 19, 22, 23, 26, 31, 35, 41, 48, 52, 58, 59, 63, 65, 71, 75, 81, 84, 87, 95, 100, 107, 116, 119, 121, 127, 138, 141, 177, 193, 195, 196], "struct": [2, 144, 150, 153], "containsnul": [2, 34, 142, 144, 150, 153], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 89, 91, 92, 94, 96, 100, 102, 105, 115, 116, 125, 127, 129, 137, 138, 141, 142, 143, 144, 145, 146, 147, 150, 153, 155, 177, 181, 183, 184, 187, 188, 193, 197, 198], "nullabl": [2, 34, 142, 144, 150, 153], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 152, 153, 155, 156, 169, 170, 177, 180, 183, 184, 186, 188, 193, 196, 197, 198, 203], "integ": [2, 49, 51, 52, 53, 144, 150, 153], "map": [2, 10, 34, 78, 82, 107, 109, 110, 113, 127, 144, 150, 153, 159, 164, 169, 175, 176, 196], "kei": [2, 5, 49, 55, 57, 73, 74, 79, 80, 90, 104, 144, 150, 152, 153, 177, 180, 193], "valuecontainsnul": [2, 144, 150, 153], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 89, 90, 97, 102, 109, 113, 115, 116, 120, 121, 123, 124, 127, 134, 136, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 169, 198, 201], "element": [2, 34, 97, 107, 142, 144, 150, 153], "float": [2, 3, 5, 7, 8, 22, 34, 39, 49, 52, 54, 89, 101, 102, 104, 107, 109, 110, 116, 120, 121, 124, 125, 127, 141, 142, 144, 145, 152, 153, 164], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 91, 120, 121, 123, 124, 152, 169, 176, 180, 183, 184, 186, 187], "arraytyp": [2, 143, 169], "fromrow": 2, "row": [2, 40, 78, 115, 116, 119, 144, 153, 155, 169, 183], "column": [2, 9, 22, 34, 39, 58, 78, 90, 99, 101, 102, 109, 110, 113, 119, 125, 133, 138, 141, 142, 143, 144, 145, 146, 147, 150, 153, 156, 159, 169, 180, 183, 186, 197], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 155, 156, 164, 169, 172, 176, 177, 180, 193, 196, 197, 198, 201, 202, 203], "an": [2, 5, 7, 8, 10, 22, 34, 39, 40, 49, 51, 52, 53, 55, 58, 62, 64, 68, 70, 71, 72, 81, 82, 87, 89, 91, 92, 94, 95, 96, 97, 101, 102, 104, 107, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 134, 138, 141, 143, 144, 145, 146, 147, 152, 153, 156, 159, 164, 168, 169, 171, 175, 176, 177, 183, 184, 186, 187, 192, 194, 196, 197, 198, 200, 201], "annotationaudio": 3, "audio": [3, 142, 177], "alreadi": [3, 84, 87, 101, 102, 103, 138, 139, 152, 180, 201], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 79, 80, 81, 84, 87, 89, 100, 101, 102, 110, 116, 120, 121, 124, 141, 142, 143, 144, 145, 146, 150, 153, 154, 156, 177, 193, 196, 197, 198, 199], "file": [3, 5, 7, 22, 34, 39, 55, 57, 58, 76, 78, 82, 90, 91, 95, 96, 101, 102, 105, 110, 116, 118, 127, 129, 130, 133, 138, 142, 155, 165, 170, 177, 183, 184, 186, 187, 193, 203], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 89, 102, 109, 120, 121, 123, 124, 127, 177], "annotationimag": [4, 152, 180], "origin": [4, 49, 51, 52, 53, 59, 66, 71, 73, 77, 100, 116, 120, 150], "height": [4, 49, 51, 52, 53, 150], "width": [4, 49, 51, 52, 53, 150], "nchannel": [4, 150], "mode": [4, 22, 34, 39, 102, 110, 129, 144, 150, 153, 177], "imag": [4, 49, 51, 52, 53, 150, 152, 180], "uri": [4, 181], "pixel": [4, 51], "number": [4, 8, 14, 18, 22, 29, 34, 38, 39, 44, 52, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 97, 99, 101, 102, 107, 109, 113, 115, 116, 120, 121, 124, 125, 127, 133, 141, 164, 183, 184], "color": 4, "channel": [4, 49, 51, 52, 53, 127], "opencv": 4, "concern": [5, 7, 8, 12, 49, 51, 52, 53, 54, 59], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 95, 96, 101, 102, 104, 105, 107, 108, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 138, 141, 155, 157, 158, 166, 172], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 95, 96, 101, 102, 104, 105, 107, 108, 113, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 134, 136, 138, 141, 149, 155, 158, 176], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 95, 96, 101, 102, 104, 105, 107, 108, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 153, 155, 158, 170, 176, 177, 180, 181, 198], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 48, 59, 81, 100, 101, 102, 152, 169, 180, 197], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 49, 51, 53, 59, 67, 70, 76, 119, 120, 124, 197], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 58, 62, 64, 65, 71, 73, 74, 78, 79, 80, 87, 107, 119, 120, 121, 127, 180, 197, 198], "propos": [5, 7, 49, 51, 59, 62, 64, 65, 72, 73, 74, 79, 80, 81], "self": [5, 7, 51, 59, 71, 123, 164], "supervis": [5, 7, 8, 59, 67, 68, 76, 87, 120, 121], "speech": [5, 7, 8, 10, 62, 112, 113, 141, 186, 203], "represent": [5, 7, 51, 59, 60, 61, 65, 66, 67, 68, 77, 78, 79, 80, 81, 100, 124, 155, 168], "learn": [5, 7, 22, 34, 39, 54, 59, 65, 66, 68, 73, 74, 76, 77, 79, 80, 81, 87, 101, 102, 109, 116, 120, 121, 124, 127, 177, 195], "mask": [5, 51, 64, 72, 79, 80, 81, 120, 137], "predict": [5, 8, 51, 64, 72, 102, 121, 124, 177, 193], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 59, 68, 81, 133], "unit": [5, 121, 133], "wei": [5, 51], "ning": 5, "hsu": 5, "benjamin": [5, 62], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 29, 38, 40, 44, 62, 72, 84, 96, 109, 110, 129, 132, 138, 154, 159, 164, 175, 183, 196, 197, 201, 202], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 107, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 153, 155, 156, 163, 164, 165, 168, 169, 177, 183, 184, 186, 187, 193, 196, 197, 198, 202, 203], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 89, 90, 91, 92, 94, 95, 96, 101, 102, 105, 109, 110, 113, 116, 118, 120, 121, 123, 124, 127, 129, 130, 141, 152, 159, 164, 169, 171, 175, 180, 198], "pre": [5, 7, 8, 22, 34, 39, 53, 60, 61, 64, 65, 67, 68, 72, 76, 102, 110, 120, 124, 144, 146, 153, 156, 184, 197], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 87, 91, 92, 94, 116, 120, 121, 123, 124, 133, 152, 155, 159, 170, 196, 197, 198], "support": [5, 7, 8, 22, 34, 59, 71, 87, 102, 105, 116, 123, 132, 155, 170, 194], "appl": [5, 7, 61, 74, 80, 170], "silicon": [5, 7, 170], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 59, 71, 120], "instruct": [5, 7, 70], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 101, 102, 104, 113, 116, 120, 121, 123, 124, 127, 129, 130, 132, 141, 173], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 101, 102, 104, 107, 113, 116, 120, 121, 123, 124, 127, 129, 130, 131, 132, 141, 163, 165, 172, 173, 177, 196, 197], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 153, 155, 156, 159, 177, 193, 197, 198], "audio_assembl": [5, 7, 8, 151, 170], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 153, 155, 156, 159, 177, 193, 197, 198], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 133, 136, 137, 138, 141, 143, 144, 145, 146, 147, 152, 153, 155, 168, 169, 170, 177, 180, 181, 183, 184, 186, 187, 197], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 96, 98, 99, 101, 102, 104, 109, 113, 116, 119, 120, 121, 123, 124, 125, 127, 129, 130, 132, 133, 134, 138, 141, 142, 143, 144, 145, 146, 147, 150, 153, 155, 156, 159, 169, 175, 177, 180, 181, 183, 186, 193, 197], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 85, 87, 89, 90, 92, 95, 101, 102, 113, 116, 120, 121, 123, 124, 127, 129, 130, 132, 141, 172, 180, 181, 193, 200], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 104, 105, 107, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 138, 141, 144, 145, 146, 147, 153, 156, 164, 177, 180, 181, 187, 193, 194, 195, 200, 202, 203], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 59, 60, 62, 64, 65, 71, 73, 79, 81, 87, 92, 95, 113, 115, 120, 121, 124, 141, 147, 152, 154, 177, 193, 201], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 75, 76, 77, 79, 81, 84, 87, 92, 94, 95, 102, 104, 105, 107, 108, 115, 116, 118, 120, 121, 123, 124, 129, 137, 141, 145, 152, 169, 181, 183, 184, 197, 198], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 59, 60, 62, 64, 65, 71, 73, 79, 81, 102, 145, 181], "5669": [5, 7, 8, 49, 51, 52, 53, 62], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 62, 65, 67, 68, 70, 75, 79, 80, 84, 87, 92, 97, 100, 104, 107, 116, 120, 121, 124, 129, 137, 138, 144, 145, 146, 153, 156, 164, 177, 180, 187, 193, 194, 195, 197, 200, 203], "extend": [5, 7, 8, 10, 22, 34, 39, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 73, 75, 76, 78, 79, 81, 87, 89, 90, 92, 94, 95, 96, 97, 101, 102, 104, 105, 110, 113, 115, 116, 118, 119, 120, 123, 124, 125, 127, 129, 131, 132, 136, 138, 141, 144, 145, 146, 153, 156, 180], "hubertforctctestspec": 5, "paper": [5, 8, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 87, 116, 119, 120, 121, 123, 124, 141, 187, 203], "abstract": [5, 8, 49, 51, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 87, 120, 121, 123, 124, 133, 187, 203], "approach": [5, 8, 49, 51, 73, 74, 81, 87, 99, 101, 102, 104, 116, 118, 120, 121, 124, 127, 129, 130, 157, 200], "challeng": [5, 34, 51, 65, 68, 70, 73, 74, 87], "three": [5, 127, 139], "uniqu": [5, 107, 108, 120], "problem": [5, 34, 59, 68, 72, 120, 124, 127, 141], "multipl": [5, 8, 34, 53, 62, 82, 87, 92, 115, 120, 138, 169, 177, 183], "sound": 5, "each": [5, 7, 14, 18, 22, 29, 34, 38, 39, 44, 49, 51, 52, 53, 64, 66, 67, 72, 75, 77, 78, 82, 84, 87, 90, 91, 92, 95, 96, 97, 99, 101, 102, 104, 105, 107, 110, 113, 115, 116, 118, 120, 125, 127, 129, 130, 137, 138, 141, 144, 153, 163, 169, 176, 186, 198], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 155, 156, 159, 169, 176, 180, 183, 184, 186, 187, 197, 198, 201, 203], "utter": 5, "lexicon": 5, "dure": [5, 22, 34, 39, 65, 70, 101, 102, 110, 115, 125, 127, 170, 177, 193], "phase": [5, 65, 120], "variabl": [5, 66, 77], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 77, 79, 80, 81, 97, 105, 107, 115, 116, 120, 121, 123, 124, 125, 127, 137, 138, 164], "explicit": [5, 115, 121], "segment": [5, 48, 49, 51, 65, 73, 140, 141], "deal": [5, 152, 201], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 27, 28, 32, 36, 40, 42, 45, 52, 59, 60, 61, 64, 65, 71, 72, 73, 74, 79, 80, 81, 102, 103, 104, 120, 124], "util": [5, 63, 101, 104, 115, 116, 130, 154, 161, 162, 165, 167, 170, 171, 175, 179], "offlin": [5, 177], "cluster": [5, 67, 70, 76, 170], "step": [5, 22, 34, 39, 66, 77, 102, 110, 177, 193, 197], "align": 5, "target": [5, 76, 120, 123, 138, 143, 152, 180], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 53, 55, 57, 67, 82, 89, 99, 100, 101, 102, 104, 109, 110, 118, 119, 124, 127, 133, 141, 177, 183, 193, 197], "loss": [5, 59, 65, 70, 102, 124, 193], "ingredi": 5, "our": [5, 59, 62, 65, 66, 67, 68, 70, 71, 73, 74, 76, 77, 79, 80, 87, 116, 120, 121, 124, 169, 180, 202], "appli": [5, 9, 22, 34, 39, 49, 53, 58, 82, 84, 102, 103, 110, 115, 124, 127, 129, 146, 169, 183], "over": [5, 65, 72, 79, 80, 81, 120, 129, 138, 169, 177, 193], "region": 5, "onli": [5, 8, 49, 51, 52, 53, 55, 57, 58, 68, 76, 81, 92, 95, 105, 107, 115, 116, 120, 121, 123, 124, 136, 141, 154, 163, 164, 183], "forc": 5, "combin": [5, 14, 18, 29, 38, 44, 52, 65, 71, 78, 87, 120, 124, 127, 129, 141], "acoust": 5, "continu": [5, 100, 121, 125, 147, 193], "reli": [5, 55, 57, 81, 87], "primarili": 5, "consist": [5, 59, 64, 71, 95, 113, 119, 141, 155, 186], "unsupervis": [5, 79, 80, 81, 87, 120, 121], "rather": [5, 49], "than": [5, 34, 39, 49, 65, 66, 70, 77, 79, 80, 81, 87, 89, 97, 101, 107, 121, 123, 129, 130, 197], "intrins": [5, 49], "qualiti": [5, 51, 121], "assign": [5, 34, 82, 103, 118], "simpl": [5, 60, 61, 82, 121, 198], "k": [5, 8, 52, 120, 121, 124, 145, 164], "mean": [5, 8, 10, 14, 18, 29, 34, 38, 44, 49, 51, 52, 53, 79, 87, 89, 92, 94, 107, 120, 121, 123, 124, 125, 137, 145, 152, 164, 197, 198, 201], "teacher": 5, "100": [5, 22, 34, 40, 53, 66, 77, 79, 87, 107, 116, 155], "two": [5, 34, 51, 55, 57, 59, 64, 66, 76, 77, 78, 79, 80, 84, 139, 183, 197], "iter": [5, 55, 57, 59, 66, 77, 113, 141, 177, 193], "either": [5, 8, 22, 39, 53, 57, 62, 63, 75, 82, 87, 89, 95, 118, 119, 124, 141, 143, 152, 153, 155, 180, 198], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 79, 80, 81, 82, 91, 92, 93, 94, 95, 96, 105, 113, 115, 120, 121, 138, 141, 143, 163, 196], "improv": [5, 59, 60, 61, 62, 64, 68, 70, 73, 74, 79, 80, 101, 102, 121, 125, 202], "upon": [5, 87], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 26, 28, 31, 33, 34, 35, 37, 39, 41, 43, 46, 49, 51, 53, 59, 60, 61, 62, 67, 68, 70, 71, 72, 73, 74, 81, 87, 102, 120, 121, 124, 153, 194, 197], "art": [5, 22, 34, 49, 51, 53, 59, 60, 61, 62, 67, 68, 70, 71, 72, 73, 74, 81, 87, 102, 120, 121, 124, 153], "wav2vec": [5, 7], "perform": [5, 49, 51, 53, 58, 59, 62, 64, 65, 67, 68, 70, 73, 74, 76, 78, 79, 80, 81, 102, 119, 120, 121, 125, 129], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 65, 115], "000h": 5, "benchmark": [5, 8, 53, 59, 64, 65, 67, 68, 79, 80, 120, 124], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 48, 60, 61, 65, 67, 72, 104, 120, 124, 188], "tune": [5, 8, 48, 60, 61, 65, 67, 72, 104, 120, 124], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 153, 155, 156, 169, 181, 183, 184, 186, 187, 188, 193, 196, 197, 198, 202], "19": [5, 54, 67, 97, 186, 188], "13": [5, 9, 10, 48, 79, 80, 84, 113, 146, 188], "rel": [5, 62, 64, 79, 92, 94, 101, 127, 196], "wer": 5, "reduct": [5, 59, 129], "dev": [5, 51, 59, 68, 76], "test": [5, 22, 34, 39, 49, 51, 52, 53, 55, 57, 60, 61, 76, 78, 90, 91, 95, 96, 101, 102, 110, 113, 121, 129, 130, 134, 141, 183, 184, 186, 187, 188, 197, 203], "evalu": [5, 22, 34, 39, 62, 67, 70, 71, 79, 80, 110, 120, 159, 177], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 79, 80, 81, 102, 120, 123, 127], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 102, 109, 120, 121, 123, 124, 125, 127, 129, 164, 196, 201, 202], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 79, 80, 81, 102, 109, 120, 123, 127], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 107, 108, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 157, 158, 159, 162, 166, 170, 172, 176, 177, 193, 197, 198, 201], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 107, 108, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 150, 152, 153, 154, 155, 156, 177, 193, 197, 201], "audioassembl": [5, 7, 8, 142], "audio_cont": [5, 7, 8, 142], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 145, 155, 156, 197, 198], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 153, 155, 156, 169, 177, 193, 196, 197, 198, 202], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 150, 153, 155, 156, 169, 196, 197, 198, 202], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 145, 152, 154, 155, 156, 176, 177, 193, 197, 198, 201], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 63, 65, 78, 84, 87, 89, 101, 102, 104, 107, 119, 120, 121, 124, 125, 127, 129, 130, 136, 141, 142, 144, 146, 147, 150, 153, 155, 156, 169, 177, 193, 198], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 78, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 146, 147, 153, 155, 156, 169, 186, 196, 197, 198], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 58], "apostl": [5, 7, 8], "OF": [5, 7, 59], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 183, 203], "hi": [5, 7, 8, 104, 116], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 89, 102, 109, 120, 121, 123, 124, 127], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 89, 91, 96, 100, 101, 102, 103, 104, 109, 115, 120, 121, 123, 124, 127, 141, 152, 169, 180, 183, 187, 203], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 89, 102, 109, 120, 121, 123, 124, 127], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 87, 89, 102, 109, 120, 121, 123, 124, 127], "serial": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 89, 102, 109, 120, 121, 123, 124, 127, 170], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 120, 121, 123, 124], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 102, 110, 116, 120, 121, 123, 124, 127, 130, 133, 181, 183], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 120, 121, 123, 124], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 102, 110, 116, 120, 121, 123, 124, 170, 177, 193, 197], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 180, 181, 197, 202], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 81, 84, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 180, 181, 184, 197, 202, 203], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 180, 181], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 89, 90, 91, 96, 101, 102, 103, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 170, 180, 181, 196, 197, 200, 201], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 87, 89, 90, 91, 95, 96, 101, 102, 104, 105, 110, 113, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 142, 144, 148, 149, 152, 153, 168, 169, 170, 176, 177, 180, 181, 183, 184, 186, 187, 197], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 180, 181], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 89, 90, 91, 95, 96, 101, 102, 104, 105, 110, 113, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 132, 134, 138, 141, 154, 165, 168, 179, 181, 183, 184, 186, 187, 188, 197, 203], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 115, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 180, 194], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 89, 90, 91, 96, 101, 102, 104, 113, 116, 119, 120, 121, 123, 124, 127, 129, 130, 132, 138, 141, 143, 164, 177], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 134], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 84, 87, 104, 123, 129, 196, 197], "recognit": [8, 13, 17, 21, 25, 28, 33, 37, 43, 46, 49, 53, 62, 98, 101, 102, 104], "asr": 8, "system": [8, 87, 120, 121], "680": 8, "000": [8, 40, 87, 121, 141, 155], "hour": [8, 92, 94], "multilingu": [8, 79, 80, 141], "multitask": [8, 70, 121], "collect": [8, 87, 177, 193], "web": [8, 48, 58, 62, 121, 177, 193], "well": [8, 53, 55, 57, 67, 76, 79, 80, 87, 107, 120, 155], "translat": [8, 120, 121, 123, 124, 141], "those": [8, 62, 84, 103, 197, 198], "english": [8, 39, 62, 87, 129, 132, 141, 181], "moment": 8, "greedi": [8, 52, 120, 121, 124, 164], "search": [8, 52, 92, 120, 125, 129, 164], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 51, 53, 59, 60, 61, 62, 64, 65, 67, 70, 71, 72, 76, 79, 80, 81, 87, 104, 120, 121, 123, 124, 154, 164], "setlanguag": 8, "settask": [8, 120, 121, 124, 164], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 70], "via": [8, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 76, 150, 170], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 59, 64, 65, 67, 68, 72, 79, 80, 81, 87, 89, 91, 96, 102, 120, 121], "scale": [8, 49, 51, 52, 53, 59, 65, 67, 71, 72, 79, 80, 120, 121, 124], "weak": [8, 67], "studi": [8, 65, 73, 74, 120, 124], "capabl": [8, 51, 65, 81, 121], "simpli": [8, 58, 70, 198], "amount": [8, 53, 76, 87, 96, 121, 141, 152, 201], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 53, 58, 59, 67, 84, 92, 94, 97, 102, 107, 120, 121, 127, 129, 132, 136, 141, 152, 183, 197, 198, 201], "gener": [8, 22, 34, 49, 51, 52, 59, 63, 65, 67, 70, 71, 75, 81, 84, 87, 101, 102, 104, 107, 116, 120, 121, 124, 127, 129, 130, 146, 147, 164, 177, 193, 196, 197, 198], "standard": [8, 49, 51, 52, 53, 58, 71, 92, 94, 120, 129, 130, 138], "often": [8, 59, 73, 74, 81], "competit": [8, 79, 80, 87], "prior": [8, 49, 65, 70, 71, 107, 127], "fulli": [8, 180], "zero": [8, 67, 78, 104, 121], "shot": [8, 67, 104, 121], "transfer": [8, 53, 65, 67, 76, 79, 80, 120, 121, 124], "without": [8, 60, 61, 67, 70, 79, 80, 87, 121, 141], "ani": [8, 14, 18, 29, 38, 44, 66, 67, 70, 76, 77, 82, 87, 102, 121, 124, 127, 145, 146, 181, 194, 197, 198, 203], "compar": [8, 51, 53, 59, 64, 65, 68, 70, 72, 81, 87, 116, 120, 124, 127, 177, 193], "human": [8, 64, 87], "accuraci": [8, 49, 51, 55, 57, 60, 61, 66, 76, 77, 79, 80, 101, 102, 113, 129, 141, 193], "releas": [8, 58, 59, 62, 64, 73, 74, 79, 80, 120, 124, 170], "infer": [8, 14, 18, 29, 38, 44, 60, 61, 62, 65, 81], "code": [8, 48, 64, 66, 70, 71, 73, 74, 77, 79, 80, 87, 89, 120, 124, 194, 202], "serv": [8, 51, 194], "foundat": 8, "further": [8, 9, 59, 70, 87, 101, 102, 107, 156], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 49, 57, 58, 67, 68, 70, 71, 72, 82, 84, 101, 102, 120, 121, 123, 124, 125, 127, 132, 155, 164, 177, 193], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 49, 57, 58, 67, 68, 70, 72, 84, 101, 102, 120, 121, 123, 124, 127, 132, 155, 164, 177, 193], "check": [8, 67, 102, 115, 127, 128, 129, 130, 152, 156, 180, 197, 202], "descript": [8, 57, 70, 75, 87, 92, 129, 136, 163, 165], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 84, 91, 92, 94, 96, 97, 100, 101, 102, 105, 107, 110, 115, 116, 120, 121, 124, 125, 127, 129, 132, 137, 138, 141, 143, 145, 146, 147, 152, 155, 156, 159, 164, 170, 180, 183, 187, 198], "minoutputlength": [8, 52, 120, 121, 124], "minimum": [8, 34, 39, 52, 66, 77, 84, 87, 89, 99, 101, 102, 105, 115, 116, 120, 121, 124, 129, 130, 137, 138, 164, 183], "sequenc": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 53, 71, 107, 120, 121, 122, 123, 124, 127, 132, 164], "maxoutputlength": [8, 52, 120, 121, 123, 124], "maximum": [8, 22, 34, 39, 48, 52, 66, 77, 84, 87, 99, 101, 102, 105, 107, 109, 115, 116, 120, 121, 123, 124, 127, 129, 137, 138, 164], "dosampl": [8, 52, 120, 121, 124], "sampl": [8, 52, 107, 120, 121, 124, 164], "decod": [8, 52, 64, 71, 120, 121, 123, 124, 164], "temperatur": [8, 52, 107, 120, 121, 124], "next": [8, 52, 73, 74, 87, 92, 94, 120, 121, 124, 164], "probabl": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 52, 87, 107, 120, 121, 124, 125, 129, 164], "topk": [8, 52, 120, 121, 124], "highest": [8, 52, 107, 120, 121, 124, 129, 164], "vocabulari": [8, 52, 66, 77, 120, 121, 124, 127, 164], "keep": [8, 52, 53, 87, 105, 120, 121, 124, 164], "filter": [8, 49, 51, 52, 53, 79, 80, 87, 100, 101, 120, 121, 123, 124, 132, 164, 169, 181], "topp": [8, 52, 107, 120, 121, 124, 164], "most": [8, 52, 62, 65, 71, 72, 87, 102, 107, 120, 121, 123, 124, 164], "add": [8, 52, 78, 92, 94, 115, 120, 121, 124, 127, 138, 164, 197], "top_p": [8, 52, 107], "higher": [8, 52, 78, 87, 107, 119, 120, 121, 124, 164], "kept": [8, 52, 120, 121, 124, 164], "repetitionpenalti": [8, 52, 120, 121, 124], "repetit": [8, 52, 120, 121, 124, 164], "penalti": [8, 52, 120, 121, 124, 164], "norepeatngrams": [8, 52, 120, 121, 124], "ngram": [8, 52, 63, 97, 120, 121, 124, 164], "occur": [8, 52, 120, 121, 124, 164], "onc": [8, 52, 120, 121, 124, 164], "beamsiz": [8, 52, 120], "beam": [8, 52, 120, 164], "mr": 8, "middl": [8, 136, 141], "getlanguag": 8, "langaug": [8, 180], "getismultilingu": 8, "do": [8, 9, 76, 87, 100, 132, 138, 152, 193, 197, 201], "xx": [8, 44, 79, 80, 89, 123], "chunk2doc": [9, 143], "convert": [9, 52, 54, 58, 63, 72, 75, 78, 92, 94, 97, 100, 105, 107, 120, 124, 137, 139, 141, 143, 146, 147, 177, 193, 200], "back": [9, 107, 120], "try": [9, 127, 183], "re": [9, 67, 197], "analysi": [9, 22, 34, 39, 68, 70, 81, 117, 118, 124, 161, 198], "doc2chunk": [9, 143], "pretrainedpipelin": [9, 146, 152, 169, 180, 196, 201, 202], "locat": [9, 82, 115, 170, 180, 197], "extract": [9, 10, 11, 15, 19, 23, 26, 31, 35, 41, 49, 51, 52, 53, 55, 63, 78, 82, 83, 84, 86, 87, 91, 92, 94, 96, 100, 101, 102, 103, 115, 116, 118, 125, 127, 130, 134, 139, 145, 146, 147, 152, 170, 177, 180, 193], "york": [9, 104, 146], "jersei": [9, 146], "aren": [9, 146], "t": [9, 14, 18, 29, 38, 44, 65, 73, 90, 105, 116, 118, 138, 146], "far": [9, 107, 121, 146], "apart": [9, 55, 57, 146], "actual": [9, 97, 146, 156], "id": [9, 34, 58, 79, 82, 107, 108, 120, 121, 123, 124, 127, 143, 144, 146, 153, 156, 177, 183], "defin": [9, 10, 100, 101, 102, 127, 132, 136, 146, 169, 177, 180, 193, 197, 201], "amongst": [9, 146], "thing": [9, 127, 146], "explain_document_dl": [9, 146, 152, 169, 180], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 146], "selectexpr": [9, 10, 22, 40, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 90, 91, 92, 94, 95, 96, 97, 100, 103, 104, 105, 113, 115, 116, 118, 123, 131, 132, 134, 137, 138, 139, 143, 145, 146, 169, 183, 184, 186, 196, 197, 202], "explod": [9, 10, 22, 40, 48, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 91, 94, 95, 96, 97, 100, 103, 104, 113, 115, 116, 123, 139, 145, 146, 169, 183, 186, 196, 197, 202], "col": [9, 55, 57, 82, 91, 100, 103, 146, 169, 196], "loc": [9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 84, 100, 101, 102, 146, 152, 169, 180, 183], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 113, 119, 120, 123, 125, 127, 132, 134, 137, 139, 141, 144, 146, 152, 153, 155, 156, 170, 180, 183, 184, 186, 187, 188, 197, 201, 202], "22": [9, 146, 183, 196], "pattern": [10, 58, 82, 92, 95, 105, 129, 130, 137, 138, 141], "part": [10, 62, 87, 90, 112, 113, 131, 141, 143, 186, 203], "tag": [10, 22, 34, 39, 58, 62, 99, 100, 101, 102, 103, 112, 113, 141, 169, 177, 183, 186, 187, 203], "order": [10, 70, 81, 82, 87, 92, 120, 129, 130, 152, 156, 169, 197, 198, 201, 203], "meaning": [10, 131], "phrase": [10, 62, 66, 77, 91, 96], "onto": [10, 169, 198], "pars": [10, 55, 56, 57, 62, 82, 90, 92, 94, 127, 129, 130, 152, 155, 180, 183, 186], "regular": [10, 95, 101, 115], "express": [10, 39, 48, 92, 95, 115], "wrap": [10, 108, 125, 157, 158, 166, 172, 176], "angl": 10, "bracket": 10, "easili": [10, 68, 113, 145, 193], "distinguish": 10, "itself": [10, 87, 124, 141, 154, 198], "form": [10, 22, 34, 39, 78, 82, 90, 91, 92, 95, 96, 116, 118, 129, 130, 141, 145, 177, 183, 184, 197], "peter": [10, 71, 90, 105, 113, 116, 129, 131, 183], "piper": [10, 90, 113, 131], "employe": [10, 90, 113, 131], "pick": [10, 90, 113, 131], "peck": [10, 90, 113, 131], "pickl": [10, 90, 113, 131], "pepper": [10, 90, 113, 131], "nnp": [10, 113, 152, 169, 183, 184, 186, 187, 196, 201, 202, 203], "nn": [10, 113, 183, 184, 186, 187, 203], "vbp": [10, 113, 152, 184, 196, 201, 202], "vbg": [10, 113], "IN": [10, 113, 152, 169, 184, 186, 187, 196, 201, 202], "jj": [10, 113, 152, 169, 183, 186, 196, 201, 202, 203], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 127, 141], "group": [10, 138], "so": [10, 14, 18, 22, 29, 38, 39, 44, 87, 100, 107, 116, 154, 177, 193], "here": [10, 90, 169, 197], "specif": [10, 40, 55, 57, 58, 60, 61, 65, 76, 84, 87, 102, 120, 121, 133, 152, 154, 177, 201], "noun": [10, 184], "success": [10, 62, 72, 121], "grammar": 10, "parser": [10, 55, 57, 84], "perceptronmodel": [10, 55, 57, 84, 101, 113, 183], "Of": [10, 59, 141], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 153, 154, 155, 156, 177, 183, 193, 197], "sentencedetector": [10, 22, 40, 48, 55, 57, 61, 63, 74, 76, 80, 84, 87, 90, 95, 97, 101, 102, 103, 104, 113, 115, 116, 132, 134, 154, 156, 183, 197, 198], "postag": 10, "11": [10, 54, 79, 80, 92, 94, 97, 113, 188], "21": [10, 92, 94, 103, 113, 188], "35": [10, 113, 188], "39": [10, 103, 113, 186, 188], "52": [10, 103, 113, 186], "58": [10, 51, 113], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 87, 145, 197], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 89, 102, 104, 129, 130], "albert": [11, 12, 13, 59], "span": [11, 15, 19, 23, 26, 31, 35, 41, 120, 124], "question": [11, 15, 19, 23, 26, 31, 35, 40, 41, 55, 57, 60, 61, 68, 73, 74, 81, 104, 113, 120, 121, 124, 152], "answer": [11, 15, 19, 23, 26, 31, 35, 40, 41, 55, 57, 60, 61, 68, 81, 104, 120, 121, 124, 152], "squad": [11, 15, 19, 23, 26, 31, 35, 41, 59, 60, 61, 64, 72, 73, 74, 120], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 51, 121], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 59, 60, 61, 64, 68, 81], "comput": [11, 15, 19, 23, 26, 31, 35, 41, 49, 51, 53, 59, 64, 65, 70, 76, 121, 123, 130, 141, 152, 201], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 29, 31, 32, 35, 36, 38, 41, 42, 44, 45, 107], "spanclassifi": [11, 15, 19, 23, 26, 31, 35, 41], "document_quest": [11, 15, 19, 23, 26, 31, 35, 40, 41], "document_context": [11, 15, 19, 23, 26, 31, 35, 41], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 52, 68, 76, 101, 102, 105, 115, 116, 120, 137, 138, 154, 163], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 65, 68, 129, 130], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 79, 80, 81, 91, 96, 129, 132], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 79, 80, 81, 91, 97, 100, 120, 121, 123, 124, 129, 132, 152], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 79, 80, 81, 82, 89, 91, 96, 127, 129, 132, 138, 143, 183, 184, 197], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 79, 80, 81, 89, 102, 120, 121, 123, 124, 127], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 77, 79, 80, 81], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 64, 65, 70, 73, 74, 79, 80, 81, 177, 193], "multidocumentassembl": [11, 15, 19, 23, 26, 31, 35, 40, 41, 153], "context": [11, 15, 19, 23, 26, 31, 35, 41, 60, 61, 66, 68, 77, 81, 107, 119, 127, 138], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 63, 65, 71, 73, 79, 91, 96, 101, 129, 132, 145, 156], "what": [11, 15, 19, 23, 26, 31, 35, 39, 41, 49, 55, 57, 87, 89, 104, 107, 123, 127, 136, 184, 194], "my": [11, 13, 15, 17, 19, 22, 23, 25, 26, 28, 31, 33, 35, 37, 39, 41, 43, 46, 58, 95, 97, 104, 107, 115, 121, 132, 134, 137, 197], "clara": [11, 15, 19, 23, 26, 31, 35, 41, 104], "live": [11, 13, 15, 17, 19, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 104, 121, 177, 193], "berkelei": [11, 15, 19, 23, 26, 31, 35, 41], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 27, 32, 36, 42, 45, 120, 124], "pool": [12, 16, 20, 24, 27, 32, 36, 42, 45, 63, 68, 75], "multi": [12, 16, 20, 22, 24, 27, 32, 34, 36, 39, 42, 45, 59, 76, 79, 80, 87, 89, 123], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 89], "instead": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 61, 87, 89, 92, 94, 124, 145, 146, 152, 201], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 67, 79, 80, 89, 92, 97, 99, 100, 101, 102, 107, 141, 152, 169, 180, 183], "inputcol": [12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 75, 89, 142, 144, 145, 146, 147, 150, 153], "averag": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 63, 67, 70, 75, 79, 80, 89, 102, 113, 125], "calcul": [12, 14, 16, 18, 20, 22, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 78, 97, 102, 110, 118, 125], "softmax": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 64, 66, 77, 127], "sigmoid": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45], "love": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 42, 44, 45, 61, 74, 80, 116, 119, 197], "movi": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 119, 197], "child": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "pretti": [12, 14, 16, 18, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 87], "bore": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "neg": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 118, 119, 125, 177, 193], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 42, 43, 44, 45, 46, 49, 51, 53, 104], "setcoalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 89], "limit": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 53, 59, 62, 71, 72, 78, 81, 87, 124, 129], "almost": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "512": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 67, 68, 72, 123], "help": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 55, 57, 59, 107, 108, 123, 138, 177, 193, 198, 202], "feed": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "entir": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 123], "bool": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 58, 61, 63, 76, 82, 84, 89, 91, 92, 96, 97, 100, 101, 102, 105, 110, 115, 116, 120, 121, 124, 125, 127, 129, 132, 137, 138, 141, 143, 145, 146, 147, 152, 155, 159, 164, 170, 177, 180, 181, 183], "one": [12, 14, 16, 18, 20, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 72, 75, 79, 80, 81, 87, 89, 92, 95, 100, 107, 116, 129, 134, 156, 193, 197], "albertfortokenclassif": [13, 59], "ner": [13, 17, 21, 25, 28, 33, 37, 43, 46, 79, 80, 84, 85, 134, 152, 169, 170, 177, 180, 193], "token_classifi": [13, 21, 33, 37, 43, 46], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 59], "level": [13, 22, 34, 39, 60, 61, 71, 73, 74, 76, 78, 80, 82, 101, 102, 110, 127, 170, 183], "tokenclassifi": [13, 17, 21, 25, 28, 33, 37, 43, 46], "john": [13, 17, 25, 28, 33, 37, 43, 46, 48, 61, 74, 80, 82, 84, 103, 105, 116, 147, 188], "lenon": [13, 17, 25, 28, 33, 37, 43, 46], "born": [13, 17, 25, 28, 33, 37, 43, 46, 121], "london": [13, 17, 25, 28, 33, 37, 43, 46], "pari": [13, 17, 25, 28, 33, 37, 43, 46, 104], "sarah": [13, 17, 25, 28, 33, 37, 43, 46], "o": [13, 17, 21, 25, 28, 33, 37, 43, 46, 100, 101, 102, 103, 152, 169, 180, 183, 187, 203], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 29, 38, 44], "nli": [14, 18, 29, 38, 44], "natur": [14, 18, 29, 38, 39, 44, 53, 59, 60, 61, 62, 64, 65, 66, 72, 76, 77, 81, 89, 120, 121, 124, 143, 153, 156], "equival": [14, 18, 29, 38, 44, 152, 170, 201], "bartforsequenceclassif": 14, "don": [14, 18, 29, 38, 44, 65, 73, 105], "hardcod": [14, 18, 29, 38, 44], "potenti": [14, 18, 29, 38, 44, 51, 127], "thei": [14, 18, 29, 38, 40, 44, 55, 57, 102, 105, 107, 121, 154, 172, 184, 197], "chosen": [14, 18, 29, 38, 44, 55, 57, 102, 107], "runtim": [14, 18, 29, 38, 44], "usual": [14, 18, 29, 38, 44, 53, 156, 181], "slower": [14, 18, 29, 38, 44], "much": [14, 18, 22, 29, 38, 40, 44, 59, 67, 73, 74, 105, 141, 170, 197], "flexibl": [14, 18, 29, 38, 44, 51], "loop": [14, 18, 29, 38, 44], "through": [14, 18, 29, 38, 44, 59, 72, 84, 87, 147, 198], "longer": [14, 18, 29, 38, 44, 59, 66, 71, 77, 89, 123, 202], "pass": [14, 18, 29, 38, 44, 107], "pose": [14, 18, 29, 38, 44], "premis": [14, 18, 29, 38, 44], "hypothesi": [14, 18, 29, 38, 44], "pair": [14, 18, 29, 38, 44, 67, 84, 177], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 37, 38, 44, 66, 77], "bart": [14, 120], "bertforquestionansw": [15, 40], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_base_cased_zero_shot_classifier_xnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 62], "camembert_base_qa_fquad": 19, "fr": [19, 20, 62, 89], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 82], "ai": [20, 107, 108, 120, 177, 193], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 62, 89, 123], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 197], "classifierdlapproach": [22, 34, 197], "univers": [22, 55, 57, 76, 123], "encod": [22, 52, 58, 60, 61, 64, 70, 71, 76, 104, 120, 123, 177], "deep": [22, 60, 61, 68, 87, 101, 116, 127], "dnn": 22, "insid": [22, 34, 100, 113, 138, 183], "instanti": [22, 34, 39, 55, 57, 66, 77, 78, 82, 90, 91, 95, 96, 101, 102, 105, 113, 116, 118, 119, 125, 127, 129, 130, 134, 136, 141, 183, 184], "classifierdlmodel": [22, 34, 197], "monitor": [22, 34, 39, 102, 107, 108, 177, 193], "metric": [22, 34, 39, 102, 130, 177], "done": [22, 34, 39, 73, 74, 101, 102, 198], "settestdataset": [22, 34, 39, 102, 110], "method": [22, 34, 39, 59, 65, 66, 70, 72, 77, 81, 87, 102, 125, 181, 192], "expect": [22, 34, 39, 67, 81, 102, 138, 169], "path": [22, 34, 39, 55, 57, 66, 77, 78, 82, 84, 90, 91, 95, 96, 101, 102, 104, 105, 110, 116, 118, 121, 127, 129, 130, 133, 138, 150, 152, 168, 177, 180, 183, 184, 186, 187, 193], "parquet": [22, 34, 39, 102, 110, 142], "datafram": [22, 34, 39, 53, 66, 77, 78, 102, 110, 113, 125, 141, 152, 165, 169, 176, 177, 180, 183, 184, 186, 187, 193, 197, 201, 203], "ha": [22, 34, 39, 40, 49, 51, 52, 53, 58, 59, 64, 65, 68, 73, 74, 78, 87, 90, 95, 102, 110, 116, 118, 120, 124, 129, 130, 141, 142, 143, 150, 152, 177, 181, 186, 193, 197, 198], "same": [22, 34, 39, 48, 59, 72, 73, 78, 79, 82, 84, 102, 107, 110, 124, 125, 154, 177, 198], "follow": [22, 34, 39, 48, 54, 58, 68, 71, 78, 87, 92, 94, 95, 100, 102, 105, 115, 139, 155, 193, 195, 198], "universalsentenceencod": [22, 34, 39, 76, 177, 193, 197], "preprocessingpipelin": [22, 34, 39, 102, 110], "randomsplit": [22, 34, 39, 102, 110], "write": [22, 34, 39, 78, 102, 110, 129, 130, 198], "overwrit": [22, 34, 39, 102, 103, 110, 177], "test_data": [22, 34, 39, 102, 110], "setlabelcolumn": [22, 34, 39, 99, 101, 102, 109, 133, 177, 193, 197], "usag": [22, 34, 39, 48, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 73, 76, 78, 79, 81, 82, 87, 89, 90, 92, 94, 95, 96, 101, 102, 105, 113, 115, 116, 118, 119, 120, 123, 124, 125, 127, 129, 131, 132, 136, 138, 141], "64": [22, 34, 39, 59, 102, 109, 197], "dropout": [22, 39, 102], "coeffici": [22, 39, 101, 102], "enableoutputlog": [22, 34, 39, 102], "stdout": [22, 34, 39, 102, 110], "addit": [22, 34, 39, 55, 57, 60, 61, 82, 101, 102, 107, 110, 115, 121, 138, 177, 196, 197], "evaluationlogextend": [22, 34, 39, 102], "valid": [22, 34, 39, 92, 102, 110, 116, 127, 193], "displai": [22, 34, 39, 110, 121, 177, 193], "time": [22, 34, 39, 59, 66, 77, 79, 80, 87, 92, 110, 119, 127, 141, 170, 196, 197, 201, 202], "labelcolumn": [22, 34, 39, 101, 102], "lr": [22, 34, 39, 102, 141], "rate": [22, 34, 39, 54, 66, 73, 74, 77, 78, 102, 109, 125, 127], "005": [22, 39, 102, 109], "maxepoch": [22, 34, 39, 101, 102], "epoch": [22, 34, 39, 99, 101, 102, 109, 110, 116, 127, 177], "30": [22, 39, 87, 92, 94, 100, 109, 123, 152, 169, 180, 188, 196], "outputlogspath": [22, 34, 39, 102, 116], "randomse": [22, 34, 39, 101, 102], "random": [22, 34, 39, 66, 77, 99, 101, 102, 107, 109, 125, 145], "seed": [22, 34, 39, 66, 77, 99, 101, 102, 109], "shuffl": [22, 34, 99, 109, 120], "testdataset": [22, 34, 39, 102, 177, 193], "statist": [22, 34, 39, 78, 87, 102, 110], "validationsplit": [22, 34, 39, 102, 116], "choos": [22, 34, 39, 63, 75, 102, 107, 116, 129], "proport": [22, 34, 39, 102, 110, 116], "against": [22, 34, 39, 82, 87, 91, 96, 102, 110, 116, 154], "between": [22, 34, 39, 51, 55, 57, 72, 73, 74, 76, 79, 80, 81, 84, 102, 107, 110, 115, 116, 127], "off": [22, 34, 39, 76, 79, 80, 102, 110, 116], "verbos": [22, 34, 39, 101, 102, 110], "multiclassifierdlapproach": [22, 34, 177, 193], "sentimentdlapproach": [22, 34, 39], "accept": [22, 34, 39, 107], "singl": [22, 34, 39, 67, 70, 78, 84, 87, 120, 134, 136, 138, 183], "item": [22, 39, 78, 107, 177, 183, 193], "doubl": [22, 39, 142, 155], "sentenceembed": [22, 34, 39, 75, 78, 145], "In": [22, 34, 39, 49, 53, 62, 64, 65, 71, 72, 78, 81, 82, 87, 89, 90, 91, 95, 96, 115, 116, 118, 120, 121, 124, 129, 130, 141, 177, 186, 193, 197, 198, 202, 203], "csv": [22, 39, 82, 110, 155, 197], "best": [22, 39, 59, 62, 67, 70, 73, 74, 87, 89, 102, 107, 120, 197], "wach": [22, 197], "ever": [22, 39, 58, 197], "opinion": [22, 39, 197], "win": [22, 39, 197], "award": [22, 39, 197], "terribl": [22, 39, 197], "act": [22, 39, 197], "bad": [22, 39, 118, 177, 193, 197], "realli": [22, 39, 107, 119, 197], "trane": 22, "smallcorpu": [22, 39, 197], "read": [22, 39, 49, 51, 52, 53, 55, 57, 66, 77, 87, 90, 91, 92, 94, 95, 96, 101, 104, 105, 110, 116, 118, 121, 127, 129, 130, 138, 141, 142, 144, 150, 153, 165, 168, 170, 171, 177, 181, 183, 184, 186, 187, 193, 197, 203], "header": [22, 39, 40, 155, 197], "src": [22, 39, 49, 51, 52, 53, 55, 57, 78, 90, 91, 95, 96, 101, 102, 113, 129, 130, 134, 141, 183, 184, 186, 187, 188, 197, 203], "useembed": [22, 34, 39, 76, 197], "docclassifi": [22, 34, 39, 197], "setbatchs": [22, 34, 39, 68, 102, 109, 127, 177, 193, 197], "setmaxepoch": [22, 34, 39, 99, 101, 102, 109, 177, 193, 197], "20": [22, 40, 49, 81, 100, 120, 121, 152, 155, 169, 180, 197], "setlr": [22, 34, 39, 102, 109, 177, 193, 197], "5e": [22, 39, 197], "setdropout": [22, 39, 102, 197], "pipelinemodel": [22, 34, 39, 55, 57, 58, 66, 77, 101, 102, 119, 127, 129, 130, 141, 152, 154, 177, 181, 197, 200], "v": [22, 34, 39, 54, 64, 72, 78, 87, 89, 91, 102, 109, 110, 130, 169], "classifierdl_use_trec6": [22, 197], "trec": 22, "multiclassifierdlmodel": [22, 34], "sentimentdlmodel": [22, 34, 39], "sarcasmdl": [22, 197], "classifierdl_use_sarcasm": [22, 197], "sarcasm": [22, 197], "m": [22, 92, 94, 188, 197], "could": [22, 65, 87, 95, 110, 127, 196, 197, 198], "put": [22, 169, 197], "word": [22, 51, 53, 55, 57, 59, 63, 64, 66, 68, 73, 75, 76, 77, 78, 81, 82, 84, 87, 90, 97, 100, 103, 104, 105, 113, 118, 120, 121, 123, 124, 127, 129, 130, 131, 132, 136, 138, 140, 141, 152, 169, 180, 186, 187, 196, 197], "wake": [22, 197], "am": [22, 92, 94, 121, 134, 197], "mondai": [22, 197], "would": [22, 48, 63, 75, 92, 116, 170, 197], "arrays_zip": [22, 55, 57, 87, 197], "out": [22, 67, 87, 90, 105, 120, 121, 123, 124, 131, 132, 197], "normal": [22, 49, 51, 52, 53, 58, 85, 91, 116, 119, 132, 145, 154, 156, 170, 197, 198], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 64], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": 24, "v2": [24, 25, 60, 61, 64], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "distilbertforquestionansw": 26, "distilbert": [26, 27, 29, 65], "distilbert_base_cased_qa_squad2": 26, "distilbertforsequenceclassif": [27, 29], "distilbert_base_sequence_classifier_imdb": 27, "distilbertfortokenclassif": 28, "distilbert_base_token_classifier_conll03": 28, "distilbertforzeroshotclassif": 29, "distilbert_base_zero_shot_classifier_uncased_mnli": 29, "albert_for_sequence_classif": [30, 85], "albert_for_token_classif": [30, 85], "bart_for_zero_shot_classif": [30, 85], "bert_for_sequence_classif": [30, 85], "bert_for_token_classif": [30, 85], "bert_for_zero_shot_classif": [30, 85], "camembert_for_sequence_classif": [30, 85], "camembert_for_token_classif": [30, 85], "deberta_for_sequence_classif": [30, 85], "deberta_for_token_classif": [30, 85], "distil_bert_for_sequence_classif": [30, 85], "distil_bert_for_token_classif": [30, 85], "distil_bert_for_zero_shot_classif": [30, 85], "longformer_for_sequence_classif": [30, 85], "longformer_for_token_classif": [30, 85], "multi_classifier_dl": [30, 85], "roberta_for_sequence_classif": [30, 85], "roberta_for_token_classif": [30, 85], "roberta_for_zero_shot_classif": [30, 85], "sentiment_dl": [30, 85], "xlm_roberta_for_sequence_classif": [30, 85], "xlm_roberta_for_token_classif": [30, 85], "xlm_roberta_for_zero_shot_classif": [30, 85], "xlnet_for_sequence_classif": [30, 85], "xlnet_for_token_classif": [30, 85], "longformerforquestionansw": 31, "longform": [31, 32, 33, 71], "longformer_base_base_qa_squad2": 31, "longformerforsequenceclassif": 32, "longformer_base_sequence_classifier_imdb": 32, "4096": [32, 59, 71], "longformerfortokenclassif": 33, "xlnet_base_token_classifier_conll03": [33, 46], "longformer_base_token_classifier_conll03": 33, "multiclassifierdl": 34, "bidirect": [34, 60, 61, 68, 81, 120], "gru": 34, "convolut": [34, 49, 53], "machin": [34, 49, 66, 77, 87, 101, 120, 121, 123, 124, 177, 195], "strongli": 34, "relat": [34, 55, 57, 84, 202], "variant": [34, 54, 71, 76], "mai": [34, 107, 143, 196, 197, 198, 201, 202], "instanc": [34, 104, 109, 110, 159, 164, 170, 171, 175], "multiclass": 34, "categor": [34, 181], "precis": [34, 55, 57], "constraint": 34, "mani": [34, 64, 73, 74, 87, 107, 120, 121, 123, 124, 141], "formal": 34, "find": [34, 55, 57, 73, 74, 76, 82, 84, 90, 92, 120, 121], "binari": [34, 150, 165, 177], "bertsentenceembed": [34, 39, 61, 74, 80], "multiclassifi": [34, 177, 193], "001": [34, 54, 101, 102], "10": [34, 48, 55, 87, 92, 94, 103, 107, 125, 129, 177, 188, 196], "44": [34, 66, 77, 113], "shuffleperepoch": 34, "threshold": [34, 39, 66, 77, 87, 89, 101, 104, 127, 141], "ed58abb40640f983": 34, "pn": 34, "newsyou": 34, "toxic": 34, "a1237f726b5f5d89": 34, "dude": 34, "place": [34, 53], "obscen": 34, "insult": 34, "24b0d6c8733c2abe": 34, "thank": [34, 81, 87, 188], "8c4478fb239bcfc0": 34, "gee": 34, "minut": 34, "traindataset": [34, 177, 193], "printschema": [34, 142, 144, 150, 153], "root": [34, 48, 55, 57, 84, 142, 144, 150, 153, 184], "setcleanupmod": [34, 144, 153], "shrink": [34, 144, 153], "1e": [34, 177, 193], "setthreshold": [34, 39, 87, 89, 177, 193], "setvalidationsplit": [34, 110, 116], "setverbos": [34, 101, 102, 110], "multiclassifierdl_use_tox": 34, "comment": [34, 87], "jigsaw": 34, "good": [34, 62, 65, 76, 119], "stuff": 34, "wtf": 34, "kind": [34, 87, 92, 94], "crap": 34, "robertaforquestionansw": [35, 104], "roberta": [35, 36, 37, 38, 41, 42, 43, 52, 62, 64, 71, 72, 73, 74, 79, 80, 104, 120], "roberta_base_qa_squad2": [35, 104], "robertaforsequenceclassif": [36, 38], "roberta_base_sequence_classifier_imdb": 36, "robertafortokenclassif": 37, "roberta_base_token_classifier_conll03": 37, "robertaforzeroshotclassif": 38, "roberta_base_zero_shot_classifier_nli": 38, "sentimentdl": 39, "affect": [39, 138], "subject": [39, 55, 57], "view": 39, "common": [39, 82, 134, 143, 170, 200], "product": 39, "review": [39, 107, 173], "tweet": 39, "interpret": [39, 82], "posit": [39, 64, 65, 72, 79, 80, 81, 87, 100, 107, 118, 119, 125, 137, 141, 156, 177, 193], "final": [39, 71, 73, 74, 79, 80, 89, 102, 127, 197], "otheriws": [39, 89], "neutral": [39, 89], "thresholdlabel": [39, 89], "score": [39, 60, 61, 79, 80, 87, 89, 101, 102, 104, 118, 119, 121], "less": [39, 65, 89, 92, 97, 101, 123, 129], "watch": [39, 119], "32": [39, 59, 68, 188, 196, 202], "setthresholdlabel": [39, 89], "p": [39, 58, 66, 77, 89, 102, 110, 136], "sentimentdl_use_imdb": 39, "imdb": 39, "sentimentdl_use_twitt": 39, "wow": 39, "video": [39, 87], "awesom": 39, "bruh": 39, "damn": 39, "wast": [39, 119], "tapasforquestionansw": 40, "implement": [40, 66, 77, 79, 104, 108, 116, 125, 127, 148, 149, 157, 158, 166, 172, 176], "tapa": 40, "design": [40, 49, 51, 54, 60, 61, 73, 74, 91, 120, 123, 177, 193], "about": [40, 55, 57, 73, 74, 78, 87, 104, 107, 115, 130, 152, 154, 196, 198, 201, 202], "tabular": [40, 155], "tabl": [40, 125, 155], "tri": 40, "share": [40, 87, 198], "its": [40, 53, 64, 65, 71, 81, 87, 113, 118, 120, 123, 132, 177, 186], "table_qa_tapas_base_finetuned_wtq": 40, "document_assembl": [40, 104, 125, 151, 155, 170], "table_json": 40, "document_t": [40, 155], "sentence_detector": [40, 85, 104, 114], "table_assembl": [40, 151, 170], "tableassembl": [40, 155], "stage": [40, 125, 152, 154, 177, 193, 197, 198, 201], "json_data": 40, "monei": [40, 155], "ag": [40, 67, 155], "donald": [40, 155], "trump": [40, 155], "75": [40, 87, 155], "elon": [40, 155], "musk": [40, 155], "55": [40, 103, 155, 188], "AS": [40, 48, 104], "who": [40, 136, 197], "earn": 40, "count": [40, 107, 127], "old": [40, 48, 186], "xlmrobertaforquestionansw": 41, "xlm": [41, 42, 43, 79, 80], "xlm_roberta_base_qa_squad2": 41, "xlmrobertaforsequenceclassif": [42, 44], "xlm_roberta_base_sequence_classifier_imdb": 42, "xlmrobertafortokenclassif": 43, "xlm_roberta_base_token_classifier_conll03": 43, "xlmrobertaforzeroshotclassif": 44, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 44, "xlmroberta": 44, "xlnetforsequenceclassif": 45, "xlnet": [45, 46, 72, 81], "xlnet_base_sequence_classifier_imdb": 45, "xlnetfortokenclassif": 46, "spanbert_coref": 47, "spanbertcorefmodel": 48, "corefer": 48, "resolut": [48, 51], "spanbert": 48, "identifi": [48, 78, 87, 91, 95, 107, 108, 137, 138, 177, 198], "given": [48, 49, 51, 52, 53, 70, 82, 87, 104, 120, 121, 124, 127, 129, 130, 132, 163, 176, 177], "told": [48, 94], "mari": [48, 61, 74, 80, 116], "he": [48, 64, 94, 136, 188], "borrow": 48, "book": [48, 58, 121, 127, 184], "her": [48, 104], "link": [48, 180], "ontonot": 48, "corefresolut": 48, "spanbert_base_coref": 48, "maxsegmentlength": 48, "textgenr": 48, "genr": 48, "One": [48, 70, 87, 136, 139], "bc": 48, "broadcast": 48, "convers": 48, "bn": 48, "nw": 48, "wire": 48, "pt": 48, "pivot": 48, "testament": 48, "tc": 48, "telephon": 48, "wb": 48, "setmaxsegmentlength": 48, "settextgenr": 48, "convnextforimageclassif": 49, "convnet": 49, "convnext": 49, "2020": [49, 87, 92, 94, 116], "zhuang": 49, "liu": [49, 51, 64, 73, 74], "hanzi": 49, "mao": 49, "chao": 49, "yuan": 49, "wu": 49, "christoph": 49, "feichtenhof": 49, "trevor": 49, "darrel": 49, "sain": 49, "xie": 49, "pure": [49, 53, 123], "inspir": [49, 119, 129, 130, 173], "vision": [49, 51, 52, 53], "claim": 49, "outperform": [49, 67, 71, 72, 76, 79, 80, 81, 87, 121], "huggingfac": [49, 51, 52, 53, 62], "convnextforimageclassificationtestspec": 49, "roar": 49, "visual": [49, 51, 177], "began": 49, "introduct": 49, "vit": [49, 52, 53], "quickli": [49, 107], "supersed": 49, "vanilla": 49, "hand": [49, 136], "face": 49, "difficulti": 49, "detect": [49, 51, 76, 88, 89, 107, 108, 114, 115, 116], "semant": [49, 51, 68, 70, 76, 125, 141], "hierarch": [49, 51, 66, 77], "swin": [49, 51], "reintroduc": 49, "sever": [49, 203], "practic": [49, 62, 120, 124], "viabl": 49, "backbon": [49, 51, 81], "demonstr": [49, 51, 65, 71, 87, 121, 123], "remark": 49, "wide": [49, 58, 60, 61, 64, 65, 67, 79, 80, 120], "varieti": [49, 71, 72, 79, 80, 202], "howev": [49, 59, 72, 75, 81, 87, 105, 181, 196], "effect": [49, 51, 52, 53, 71, 107, 115, 120, 124], "hybrid": 49, "still": [49, 121, 177], "credit": 49, "superior": 49, "inher": 49, "induct": [49, 65], "bias": [49, 65], "reexamin": 49, "space": [49, 66, 77, 78, 97, 125, 156], "achiev": [49, 64, 67, 70, 71, 72, 73, 74, 79, 80, 81, 102, 120, 121, 123, 124, 152, 201], "gradual": 49, "modern": 49, "resnet": 49, "toward": [49, 121], "discov": [49, 194], "compon": [49, 53, 109, 110, 142, 150, 159, 164, 175, 201], "contribut": 49, "along": [49, 84], "wai": [49, 55, 57, 82, 84, 154, 180], "outcom": 49, "explor": [49, 120, 124], "famili": [49, 58, 67], "dub": [49, 79, 80], "construct": [49, 66, 77, 138, 180, 200], "compet": 49, "favor": 49, "term": [49, 87], "scalabl": 49, "87": [49, 51], "imagenet": [49, 51, 53], "coco": [49, 51], "ade20k": [49, 51], "while": [49, 51, 53, 59, 65, 70, 78, 87, 107, 110, 121, 177, 193, 198], "maintain": 49, "simplic": [49, 120], "effici": [49, 51, 64, 66, 76, 77, 123, 196], "dores": [49, 51, 52, 53], "resiz": [49, 51, 52, 53], "certain": [49, 51, 52, 53, 127], "donorm": [49, 51, 52, 53], "deviat": [49, 51, 52, 53], "featureextractortyp": [49, 51, 52, 53], "architectur": [49, 51, 52, 53, 59, 60, 61, 64, 73, 89, 102, 116, 120, 124], "featur": [49, 51, 52, 53, 55, 66, 77, 87, 97, 101, 110, 125, 177, 200], "imagemean": [49, 51, 52, 53], "imagestd": [49, 51, 52, 53], "resampl": [49, 51, 52, 53], "pil": [49, 51, 52, 53], "nearest": [49, 51, 52, 53, 125], "bilinear": [49, 51, 52, 53], "bicub": [49, 51, 52, 53], "do_res": [49, 51, 52, 53], "tupl": [49, 51, 52, 53, 176], "dorescal": [49, 51, 52], "rescal": [49, 51, 52], "rescalefactor": [49, 51, 52], "factor": [49, 51, 52, 79, 80, 81, 120, 124, 127], "croppct": 49, "percentag": [49, 78, 127, 141], "crop": 49, "imagedf": [49, 51, 52, 53], "dropinvalid": [49, 51, 52, 53], "imageassembl": [49, 51, 52, 53, 150], "image_assembl": [49, 51, 52, 53, 151, 170], "imageclassifi": [49, 51, 52, 53], "pipelinedf": [49, 51, 52, 53], "revers": [49, 51, 52, 53], "split": [49, 51, 52, 53, 115, 116, 123, 134, 136, 137, 141], "image_nam": [49, 51, 52, 53], "bluetick": [49, 51, 52, 53], "jpg": [49, 51, 52, 53], "chihuahua": [49, 51, 52, 53], "egyptian_cat": [49, 51, 52, 53], "jpeg": [49, 51, 52, 53], "tabbi": [49, 51], "cat": [49, 51, 52, 53], "hen": [49, 51, 52, 53], "hippopotamu": [49, 51, 52, 53], "hippo": [49, 51, 53], "river": [49, 51, 53], "hors": [49, 51, 53], "amphibiu": [49, 51, 53], "junco": [49, 51, 52, 53], "snowbird": [49, 51, 53], "ostrich": [49, 51, 52, 53], "struthio": [49, 51, 53], "camelu": [49, 51, 53], "ox": [49, 51, 52, 53], "palac": [49, 51, 52, 53], "tractor": [49, 51, 52, 53], "thresher": 49, "thrasher": 49, "thresh": 49, "setdorescal": 49, "boolean": 49, "setrescalefactor": 49, "255": 49, "setcroppct": 49, "determin": [49, 79], "smaller": [49, 65, 66, 77], "224": 49, "256": 49, "specifi": [49, 103, 104, 107, 116, 183, 184], "edg": [49, 65, 84], "afterward": 49, "image_classifier_convnext_tiny_224_loc": 49, "convnext_for_image_classif": 50, "swin_for_image_classif": 50, "vision_encoder_decoder_for_image_capt": 50, "vit_for_image_classif": 50, "swinforimageclassif": 51, "swinimageclassif": 51, "shift": 51, "window": [51, 52, 66, 71, 77, 87, 102, 127], "ze": 51, "yutong": 51, "lin": 51, "yue": 51, "cao": 51, "han": 51, "hu": 51, "yixuan": 51, "zheng": 51, "zhang": 51, "stephen": 51, "bain": 51, "guo": 51, "whose": 51, "scheme": [51, 73, 120], "bring": [51, 197], "greater": [51, 87, 107], "attent": [51, 53, 64, 71, 107], "non": [51, 138, 141], "overlap": [51, 91, 96], "cross": [51, 79, 80, 103], "connect": 51, "image_classifier_swin_base_patch4_window7_224": 51, "swinforimageclassificationtest": 51, "present": [51, 59, 67, 68, 71, 73, 74, 76, 79, 80, 84, 107, 110, 116, 120, 123, 125], "call": [51, 60, 61, 65, 67, 87, 107, 121, 176, 181, 183, 197, 203], "purpos": [51, 65, 67, 116], "adapt": 51, "aris": 51, "domain": [51, 70, 87, 121], "variat": 51, "high": [51, 76, 79, 80, 120, 123], "variou": [51, 81, 191], "complex": [51, 68, 76, 87, 129, 130], "respect": [51, 64, 78, 101, 102, 186], "These": [51, 59, 73, 74, 81, 87, 101, 121, 180, 195], "broad": [51, 121], "rang": [51, 60, 61, 64, 65, 67, 70, 79, 80, 120], "1k": 51, "dens": [51, 60, 61, 125], "box": 51, "ap": 51, "51": [51, 144, 153, 186], "53": [51, 91, 96], "miou": 51, "val": 51, "Its": [51, 57, 104, 120], "surpass": [51, 64], "previou": [51, 70, 72, 79, 80, 121, 197], "margin": [51, 72, 81], "prove": 51, "benefici": [51, 87], "mlp": 51, "visionencoderdecoderforimagecapt": 52, "visionencoderdecod": 52, "caption": 52, "auto": [52, 120, 133], "beit": 52, "deit": 52, "gpt2": [52, 121], "image_captioning_vit_gpt2": 52, "visionencoderdecodertestspec": 52, "nreturnsequ": 52, "veri": [52, 53, 62, 68, 79, 80, 81, 120, 121, 123, 124, 152, 196, 198, 201, 202], "computation": [52, 68, 73, 74, 81, 120, 121, 123, 124], "expens": [52, 68, 73, 74, 81, 118, 120, 121, 123, 124, 129], "especi": [52, 120, 121, 123, 124], "larger": [52, 62, 65, 73, 74, 120, 121, 123, 124, 125], "acceler": [52, 68, 81, 120, 121, 123, 124, 170], "gpu": [52, 59, 120, 121, 123, 124, 170], "imagecapt": 52, "setbeams": [52, 120, 164], "setdosampl": [52, 120, 121, 124, 164], "room": 52, "fill": [52, 120], "furnitur": 52, "lai": 52, "couch": 52, "anoth": [52, 198], "brown": 52, "bear": 52, "bodi": 52, "water": 52, "flock": 52, "chicken": 52, "stand": [52, 60, 61], "bird": 52, "lush": 52, "green": 52, "field": [52, 66, 77, 78, 82, 96], "small": [52, 53, 58, 59, 62, 65, 66, 77, 90, 113, 152, 186, 201], "wet": 52, "ground": 52, "dog": 52, "wooden": 52, "floor": 52, "wear": 52, "blue": 52, "sweater": 52, "man": [52, 121], "cow": 52, "vitforimageclassif": 53, "altern": [53, 87, 107, 118, 127, 129, 130, 152, 155, 197, 202], "neural": [53, 60, 61, 64, 102, 116, 120, 123], "network": [53, 60, 61, 68, 102, 116], "image_classifier_vit_base_patch16_224": 53, "vitimageclassificationtestspec": 53, "becom": [53, 59, 65, 87], "de": [53, 62, 87, 89, 123], "facto": [53, 87], "remain": [53, 58, 59, 65, 87], "conjunct": 53, "replac": [53, 58, 64, 71, 89, 90, 103, 116, 120, 129, 130, 163, 197], "overal": [53, 78, 81], "structur": [53, 104, 156, 196], "relianc": 53, "cnn": [53, 89, 102, 116], "necessari": [53, 65, 193, 200], "directli": [53, 152, 177, 181, 193], "patch": 53, "mid": 53, "cifar": 53, "vtab": 53, "etc": [53, 63, 67, 70, 72, 145, 156, 193], "attain": 53, "excel": [53, 81], "substanti": [53, 60, 61], "fewer": [53, 59, 70, 125], "worth": 53, "16x16": 53, "egyptian": 53, "date2chunk": 54, "datematch": [54, 92], "multidatematch": [54, 92, 94], "entitynam": 54, "date_chunk": 54, "omicron": 54, "covid": 54, "world": [54, 58, 134, 177, 188, 193], "health": 54, "organ": [54, 87, 123], "nov": [54, 92, 94, 186], "26": [54, 100, 152, 169, 180, 188], "2021": [54, 92, 94], "118": [54, 155], "121": 54, "01": [54, 92, 94, 95], "setentitynam": 54, "dependencypars": [55, 57, 84], "dependencyparserapproach": [55, 184, 203], "unlabel": [55, 60, 61, 120, 121, 124], "grammat": [55, 57], "dependencyparsermodel": [55, 57, 84], "relationship": [55, 57, 76, 84], "tell": [55, 57, 87, 169], "verb": [55, 57, 184], "modifi": [55, 57, 73, 74, 100, 107, 116], "describ": [55, 57, 84, 87, 123], "particular": [55, 57, 87, 181, 197], "treebank": 55, "penn": 55, "setdependencytreebank": 55, "conll": [55, 57, 101, 102, 170, 184, 185, 200], "u": [55, 57, 64, 65, 87, 94, 100, 101, 102, 152, 169, 180, 184, 195, 198, 203], "setconllu": [55, 57], "dependencytreebank": 55, "conllu": [55, 57, 90, 170, 185, 200], "numberofiter": [55, 57], "converg": [55, 57, 113, 141], "better": [55, 57, 59, 64, 72, 81, 87, 101, 113, 115, 116, 119, 120, 141], "typeddependencyparserapproach": [55, 57], "postagg": [55, 57, 84, 101, 113], "dependency_treebank": 55, "emptydataset": [55, 57], "tree": [55, 84], "bank": 55, "setnumberofiter": [55, 57], "read_a": [55, 57, 82, 90, 91, 95, 96, 101, 105, 110, 118, 129, 130, 138, 162, 168, 170, 183, 184], "reada": [55, 57, 78, 82, 90, 91, 95, 96, 101, 105, 110, 118, 129, 130, 134, 138, 165, 168, 183, 184], "dep": 55, "dependency_conllu": [55, 84], "perceptron": [55, 85, 112], "typeddependencyparsermdoel": 55, "union": [55, 57], "worker": [55, 57], "turner": [55, 57], "newal": [55, 57], "sai": [55, 57, 87, 138], "disappoint": [55, 57], "talk": [55, 57, 107], "stricken": [55, 57], "parent": [55, 57], "firm": [55, 57], "feder": [55, 57], "mogul": [55, 57], "dependency_pars": [56, 85, 181, 202], "typed_dependency_pars": [56, 85], "typeddependencypars": [57, 84], "conll2009": 57, "typeddependencyparsermodel": [57, 84], "beforehand": 57, "2009": 57, "setconll2009": 57, "dependency_typ": [57, 84], "train_smal": 57, "txt": [57, 66, 77, 78, 90, 91, 95, 96, 113, 116, 118, 127, 129, 130, 134, 138, 186, 187, 203], "typdep": 57, "dependency_typed_conllu": [57, 84], "amod": 57, "flat": [57, 84, 147], "nsubj": [57, 84, 147, 184], "parataxi": 57, "documentnorm": 58, "raw": [58, 121, 136, 138, 141, 196, 198], "scrape": 58, "xml": 58, "remov": [58, 73, 74, 105, 119, 137, 145, 146, 147], "dirti": [58, 105], "regex": [58, 82, 92, 95, 105, 127, 129, 130, 137, 138, 141], "want": [58, 82, 103, 181, 198], "polici": 58, "__": [58, 120, 145, 146], "action": 58, "clean": [58, 105, 120, 124, 156, 198], "lowercas": [58, 105, 137, 141, 143], "pretty_al": 58, "utf": 58, "cleanuppattern": [58, 105], "normalizeddocu": 58, "setact": 58, "setpattern": [58, 137, 141], "setreplac": 58, "setpolici": 58, "setlowercas": [58, 105, 143, 156], "div": 58, "theworldsgreatest": 58, "right": [58, 60, 61, 120, 141], "hide": 58, "toptext": 58, "style": [58, 89, 124], "font": 58, "sego": 58, "ui": 58, "arial": 58, "san": [58, 87], "serif": 58, "largest": [58, 87, 121], "develop": [58, 87, 123, 174], "site": [58, 87], "h1": 58, "300": 58, "160": 58, "lorem": [58, 91, 96], "ipsum": [58, 91, 96], "print": [58, 170, 181], "typeset": 58, "industri": 58, "been": [58, 62, 121, 139, 156, 181], "1500": 58, "unknown": [58, 89], "printer": 58, "took": 58, "gallei": 58, "scrambl": 58, "specimen": 58, "surviv": 58, "five": [58, 103], "centuri": [58, 141], "leap": 58, "electron": 58, "essenti": [58, 121], "unchang": 58, "popularis": 58, "1960": 58, "letraset": 58, "passag": [58, 67], "recent": [58, 60, 61, 64, 73, 74, 87, 107, 120], "desktop": 58, "publish": [58, 73, 74], "softwar": 58, "aldu": 58, "pagemak": 58, "setencod": 58, "lite": 59, "googl": [59, 60, 61, 64, 66, 68, 73, 74, 76, 77, 87, 124, 184], "research": [59, 60, 61, 64, 66, 77, 123, 124], "toyota": 59, "technolog": 59, "institut": 59, "chicago": 59, "offici": [59, 87, 100, 101, 102, 152, 169, 180, 194], "tf": [59, 76], "wrapper": [59, 173], "port": 59, "properti": [59, 148, 149, 159, 162, 170], "albert_base_uncas": 59, "albert_bas": 59, "768": [59, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 79, 80, 81], "emb": 59, "dim": 59, "12m": 59, "albert_large_uncas": 59, "albert_larg": 59, "1024": [59, 68, 71, 81], "24": [59, 81, 91, 96, 100, 127, 152, 169, 180, 196], "16": [59, 81, 103, 186, 196], "18m": 59, "albert_xlarge_uncas": 59, "albert_xlarg": 59, "2048": 59, "60m": 59, "albert_xxlarge_uncas": 59, "albert_xxlarg": 59, "235m": 59, "sentencepiec": [59, 64, 76], "everi": [59, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 79, 80, 81, 102, 119, 123, 127, 144, 153, 154, 198], "dimens": [59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 164], "repeat": [59, 107], "footprint": 59, "cost": [59, 127, 129], "similar": [59, 70, 76, 87, 89], "FOR": 59, "http": [59, 62, 64, 66, 68, 70, 76, 77, 107, 120, 141, 194], "tfhub": [59, 68, 76], "q": 59, "increas": [59, 67, 78, 87, 107, 120, 121, 125, 129], "downstream": [59, 62, 64, 68, 70, 71, 81, 120, 121, 124], "some": [59, 61, 79, 87, 102, 116, 121, 154, 177, 188, 196, 197, 201, 202], "point": [59, 60, 61, 115, 116, 144, 153, 183], "harder": 59, "tpu": 59, "techniqu": [59, 64, 120, 121, 124, 125], "consumpt": [59, 76, 78], "speed": [59, 101, 123], "devlin": [59, 73, 74], "et": [59, 73, 74, 89], "al": [59, 73, 74], "2019": [59, 62, 64, 73, 74, 79, 80, 120], "comprehens": [59, 120, 121], "empir": [59, 60, 61, 79, 80, 81], "evid": 59, "lead": [59, 62, 79, 80], "focus": [59, 87, 107], "inter": 59, "coher": [59, 121], "As": [59, 60, 61, 65, 67, 87, 107], "establish": 59, "glue": [59, 60, 61, 65, 72, 73, 74, 79, 80, 120], "race": [59, 64, 73, 74], "embeddingsfinish": [59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 145], "finished_embed": [59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "setoutputasvector": [59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 145], "setcleanannot": [59, 64, 65, 68, 71, 73, 75, 76, 78, 79, 81, 145, 146, 147], "80": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 95, 145, 156], "1342473030090332": [59, 64], "3855540752410889": [59, 64], "9818322062492371": [59, 64], "784737348556518": [59, 64], "847029983997345": [59, 64], "047153353691101": [59, 64], "1520637571811676": [59, 64], "6245765686035156": [59, 64], "009860038757324219": [59, 64], "13450059294700623": [59, 64], "707749128341675": [59, 64], "2916892766952": [59, 64], "04192575812339783": [59, 64], "5764210224151611": [59, 64], "3196685314178467": [59, 64], "527840495109": [59, 64], "15583214163780212": [59, 64], "1614152491092682": [59, 64], "28423872590065": [59, 64], "135491415858268": [59, 64], "bertembed": [60, 63, 70, 75, 102, 145], "small_bert_l2_768": 60, "understand": [60, 61, 65, 72, 79, 81, 87, 120, 124, 141, 196], "introduc": [60, 61, 65, 68, 70, 71, 72, 120, 124], "unlik": [60, 61, 70, 79, 87, 136], "jointli": [60, 61], "condit": [60, 61, 120, 121, 124, 164], "both": [60, 61, 67, 68, 76, 84, 107, 120, 197, 198], "left": [60, 61, 120, 141], "just": [60, 61, 65, 73, 97, 102], "modif": [60, 61], "conceptu": [60, 61], "power": [60, 61, 120, 124], "obtain": [60, 61, 62, 67, 76], "eleven": [60, 61], "push": [60, 61], "absolut": [60, 61], "multinli": [60, 61], "86": [60, 61, 64], "v1": [60, 61], "f1": [60, 61, 79, 80, 102, 121], "93": [60, 61], "83": [60, 61, 64, 186, 187, 203], "small_bert_l2_128": 60, "3497989177703857": [60, 70], "480538547039032": [60, 70], "3238905668258667": [60, 70], "612930893898010": [60, 70], "1357314586639404": 60, "32984697818756104": 60, "6032363176345825": 60, "6791689395904": 60, "8244884014129639": 60, "27088963985443115": 60, "059438943862915": 60, "9817547798156": 60, "1648050546646118": 60, "4725411534309387": 60, "5938255786895752": 60, "5780693292617": 60, "9125322699546814": 60, "4563939869403839": 60, "3975459933280945": 60, "81611204147338": 60, "sentence_bert_embed": 61, "sent_small_bert_l2_768": 61, "islong": 61, "long": [61, 71, 81], "sent_small_bert_l2_128": 61, "orang": [61, 74, 80], "8951074481010437": [61, 74, 80], "13753940165042877": [61, 74, 80], "3108254075050354": [61, 74, 80], "65693199634552": [61, 74, 80], "6180210709571838": [61, 74, 80], "12179657071828842": [61, 74, 80], "191165953874588": [61, 74, 80], "4497021436691": [61, 74, 80], "822715163230896": [61, 74, 80], "7568016648292542": [61, 74, 80], "1165061742067337": [61, 74, 80], "59048593044281": [61, 74, 80], "setislong": 61, "camembertembed": 62, "tasti": 62, "french": [62, 87, 123, 132], "loui": 62, "martin": 62, "muller": 62, "pedro": 62, "javier": 62, "ortiz": 62, "su\u00e1rez": 62, "yoann": 62, "dupont": 62, "laurent": 62, "romari": 62, "\u00e9ric": 62, "villemont": 62, "la": [62, 107, 123], "clergeri": 62, "djam\u00e9": 62, "seddah": 62, "beno\u00eet": 62, "sagot": 62, "facebook": [62, 64, 79, 80, 120], "138gb": 62, "camembert_bas": 62, "camembertembeddingstestspec": 62, "co": [62, 87], "ubiquit": 62, "despit": [62, 120], "concaten": [62, 141], "except": [62, 97, 102, 138], "investig": [62, 65, 76], "feasibl": 62, "monolingu": [62, 79, 80], "crawl": [62, 120, 124], "prefer": [62, 84, 147], "wikipedia": [62, 89, 121], "surprisingli": [62, 76], "4gb": 62, "130": 62, "gb": 62, "reach": [62, 87, 121, 141], "four": [62, 116, 139, 141], "un": [62, 89], "08442357927560806": 62, "12863239645957947": 62, "03835778683423996": 62, "200479581952": 62, "048462312668561935": 62, "12637358903884888": 62, "27429091930389404": 62, "07516729831": 62, "02690504491329193": 62, "12104076147079468": 62, "012526623904705048": 62, "031543646007": 62, "05877285450696945": 62, "08773420006036758": 62, "06381352990865707": 62, "122621834278": 62, "chunkembed": [63, 145], "wordembed": [63, 75, 78, 102, 145, 170], "chunker": [63, 85, 170], "ngramgener": [63, 97], "nerconvert": [63, 100, 101, 102, 177, 193], "poolingstrategi": [63, 75], "aggreg": [63, 75], "sum": [63, 68, 75], "skipoov": 63, "discard": [63, 104], "oov": 63, "setn": [63, 97], "wordembeddingsmodel": [63, 75, 78, 84, 101, 102, 103, 145], "setpoolingstrategi": [63, 75], "55661": 63, "42829502": 63, "86661": 63, "409785": 63, "06316501": 63, "120775": 63, "0732005": 63, "40674996": 63, "22938299": 63, "50597": 63, "288195": 63, "555655": 63, "465145": 63, "140118": 63, "17417": 63, "095253006": 63, "0530925": 63, "218465": 63, "714395": 63, "79860497": 63, "0129999": 63, "139705": 63, "177955": 63, "1887775": 63, "45545": 63, "20030999": 63, "461557": 63, "07891501": 63, "strategi": [63, 75, 92, 95, 115, 127, 163], "setskipoov": 63, "debertaembed": 64, "enhanc": [64, 119, 120], "disentangl": 64, "pengcheng": 64, "xiaodong": 64, "jianfeng": 64, "gao": 64, "weizhu": 64, "chen": [64, 73, 74], "2018": [64, 73, 74], "half": [64, 87], "deberta_v3_bas": 64, "microsoft": [64, 67, 72, 123], "www": 64, "blog": 64, "superglu": 64, "progress": [64, 116, 137], "significantli": [64, 68, 73, 74, 79, 80, 87], "novel": [64, 72, 81, 87, 120], "mechan": [64, 71], "weight": [64, 68, 87, 101, 103, 127], "among": [64, 72], "matric": 64, "second": [64, 68, 95, 115, 132, 137, 197], "mnli": 64, "9": [64, 79, 80, 97, 196, 201, 202], "90": 64, "91": 64, "88": 64, "made": [64, 76, 193], "publicli": [64, 79, 80], "distilbertembed": 65, "fast": [65, 119, 123, 152, 201], "cheap": 65, "distil": 65, "40": [65, 67, 103, 123], "uncas": 65, "preserv": [65, 100, 137, 156], "95": 65, "measur": [65, 73, 74, 120, 177], "distilbert_base_cas": 65, "doesn": [65, 73], "token_type_id": [65, 73], "indic": [65, 73, 137, 141], "belong": [65, 73], "separ": [65, 73, 95, 97, 115, 116, 129, 138, 141, 146, 169, 183, 195], "sep_token": [65, 73], "sep": 65, "position_id": 65, "ad": [65, 68, 107, 127], "though": [65, 87], "know": [65, 123, 154], "cheaper": 65, "lighter": 65, "preval": 65, "oper": [65, 71, 127, 136, 196], "constrain": 65, "budget": 65, "counterpart": 65, "leverag": [65, 72, 177, 193], "reduc": [65, 72, 129, 130, 156], "retain": 65, "97": [65, 92, 94, 141], "being": [65, 102, 107, 110, 120, 123, 124, 125], "tripl": [65, 84], "cosin": 65, "distanc": [65, 125, 127, 129, 130], "devic": 65, "proof": 65, "concept": [65, 198], "experi": [65, 81, 107, 120, 177, 194], "1127224713563919": 65, "1982710212469101": 65, "5360898375511169": 65, "272536993026733": 65, "35534414649009705": 65, "13215228915214539": 65, "40981462597846985": 65, "14036104083061": 65, "328085333108902": 65, "06269335001707077": 65, "017595693469047546": 65, "024373905733": 65, "15617232024669647": 65, "2967822253704071": 65, "22324979305267334": 65, "04568954557180": 65, "45411425828933716": 65, "01173491682857275": 65, "190129816532135": 65, "1178255230188369": 65, "doc2vecapproach": 66, "word2vec": [66, 69, 85], "corpu": [66, 68, 77, 87, 90, 113, 120, 124, 127, 186, 203], "algorithm": [66, 77, 87, 101, 119, 127, 129, 130], "skip": [66, 77, 84, 127], "gram": [66, 67, 77, 87, 97, 120, 121, 124, 164], "doc2vecmodel": 66, "vectors": [66, 77], "windows": [66, 77, 87], "numpartit": [66, 77], "partit": [66, 77, 183], "mincount": [66, 77, 127], "must": [66, 77, 90, 91, 95, 96, 107, 110, 118, 119, 129, 130, 143, 169, 170, 177, 183], "appear": [66, 77, 107, 127], "divid": [66, 77], "1000": [66, 77, 84, 101], "stepsiz": [66, 77], "optim": [66, 73, 74, 77, 102, 104, 116], "025": [66, 77], "maxit": [66, 77], "estim": [66, 77, 133, 148, 157, 166, 176, 197], "distribut": [66, 77], "composition": [66, 77], "sherlockholm": [66, 77, 127, 203], "setvectors": [66, 77], "setwindows": [66, 77, 87], "setsteps": [66, 77], "initi": [66, 77, 127, 137, 154, 170, 183, 184, 186, 187, 193], "setnumpartit": [66, 77], "setmaxit": [66, 77], "numiter": [66, 77], "equal": [66, 77], "setse": [66, 77], "setmincount": [66, 77, 127], "doc2vec_gigaword_300": 66, "06222493574023247": [66, 77], "011579325422644615": [66, 77], "009919632226228714": [66, 77], "109361454844": [66, 77], "doc2vec_wiki": 66, "getvector": [66, 77], "e5embed": [67, 72, 125], "e5": 67, "weakli": 67, "tailor": [67, 70], "e5_smal": 67, "contrast": [67, 70, 71, 91, 124], "unilm": 67, "manner": [67, 87], "signal": [67, 68], "curat": 67, "ccpair": 67, "readili": 67, "strong": [67, 79, 80], "conduct": 67, "extens": [67, 173], "56": [67, 186], "beir": 67, "mteb": 67, "bm25": 67, "baselin": [67, 76, 121], "beat": 67, "exist": [67, 68, 107, 127, 145, 147, 177], "queri": [67, 194], "protein": 67, "femal": 67, "eat": 67, "guidelin": 67, "cdc": 67, "women": 67, "70": [67, 70], "46": [67, 188], "dai": [67, 92, 94, 127], "But": 67, "chart": [67, 177, 193], "ll": [67, 141], "marathon": 67, "below": [67, 84, 202], "0190285e": 67, "005974853": 67, "072875895": 67, "007944068": 67, "026059335": 67, "0080": 67, "050514214": 67, "010061974": 67, "04340176": 67, "020937217": 67, "05170225": 67, "01157857": 67, "elmoembed": 68, "elmo": 68, "billion": [68, 121], "lookup": [68, 78, 81, 91, 129, 130], "setpoolinglay": 68, "word_emb": 68, "shape": 68, "batch_siz": 68, "max_length": 68, "lstm_outputs1": 68, "lstm": [68, 102], "lstm_outputs2": 68, "trainabl": 68, "tensor": 68, "poolinglay": 68, "contextu": [68, 120, 127], "characterist": 68, "syntax": 68, "vari": [68, 107], "across": [68, 121], "linguist": [68, 141], "polysemi": 68, "intern": [68, 109, 110, 127, 138, 141, 155, 159, 164, 170], "bilm": 68, "six": [68, 129, 130], "textual": [68, 70], "entail": 68, "expos": 68, "crucial": 68, "mix": [68, 108, 125, 158, 176], "semi": 68, "662458181381226e": 68, "2541114091873169": 68, "6275503039360046": 68, "5787073969841": 68, "19154725968837738": 68, "22998669743537903": 68, "2894386649131775": 68, "21524395048618": 68, "10400570929050446": 68, "12288510054349899": 68, "07056470215320587": 68, "246389418840": 68, "49932169914245605": 68, "12706467509269714": 68, "30969417095184326": 68, "2643227577209": 68, "8871506452560425": 68, "20039963722229004": 68, "0601330995559692": 68, "0348707810044": 68, "albert_embed": [69, 85], "bert_embed": [69, 85], "bert_sentence_embed": [69, 85], "camembert_embed": [69, 85], "chunk_embed": [69, 85], "deberta_embed": [69, 85], "distil_bert_embed": [69, 85], "doc2vec": [69, 85], "e5_embed": [69, 85], "elmo_embed": [69, 85], "instructor_embed": [69, 85], "longformer_embed": [69, 85], "mpnet_embed": [69, 85], "roberta_embed": [69, 85], "roberta_sentence_embed": [69, 85], "universal_sentence_encod": [69, 85], "xlm_roberta_embed": [69, 85], "xlm_roberta_sentence_embed": [69, 85], "xlnet_embed": [69, 85], "instructorembed": 70, "instructor": 70, "finetun": [70, 71, 81], "scienc": [70, 87, 194], "financ": 70, "sota": [70, 81], "divers": [70, 76, 120, 121, 124, 194], "setinstruct": 70, "medicin": 70, "instructor_bas": 70, "summar": [70, 71, 87, 120, 121, 123, 124, 164], "embedd": 70, "hkunlp": 70, "togeth": 70, "explain": [70, 177, 193, 200, 202], "special": [70, 127, 141, 171, 198], "330": 70, "mixtur": 70, "66": [70, 103], "unseen": 70, "magnitud": [70, 129, 130], "suggest": [70, 121], "chang": [70, 173], "mitig": 70, "url": 70, "io": 70, "dynam": [70, 123], "scalar": 70, "degre": 70, "freedom": 70, "horava": 70, "lifshitz": 70, "graviti": 70, "longformerembed": 71, "iz": 71, "beltagi": 71, "matthew": 71, "arman": 71, "cohan": 71, "checkpoint": 71, "mlm": [71, 72], "096": 71, "longformer_base_4096": 71, "unabl": 71, "quadrat": 71, "linearli": 71, "easi": 71, "thousand": 71, "drop": [71, 132], "motiv": 71, "global": 71, "text8": 71, "enwik8": 71, "wikihop": 71, "triviaqa": 71, "led": [71, 73, 74, 87], "arxiv": [71, 120], "found": [71, 78, 87, 129, 136, 143, 183, 200], "18792399764060974": [71, 73], "14591649174690247": [71, 73], "20547787845134735": [71, 73], "1468472778797": [71, 73], "22845706343650818": [71, 73], "18073144555091858": [71, 73], "09725798666477203": [71, 73], "0417917296290": [71, 73], "07037967443466187": [71, 73], "14801117777824402": [71, 73], "03603338822722435": [71, 73], "17893412709": [71, 73], "08734266459941864": [71, 73], "2486150562763214": [71, 73], "009067727252840996": [71, 73], "24408400058": [71, 73], "22409197688102722": [71, 73], "4312366545200348": [71, 73], "1401449590921402": [71, 73], "356410235166549": [71, 73], "mpnetembed": 72, "mpnet": 72, "adopt": 72, "permut": [72, 81], "inherit": [72, 108, 125, 158, 176], "advantag": [72, 154], "all_mpnet_base_v2": 72, "neglect": [72, 81], "plm": 72, "doe": [72, 79, 87, 100, 123, 152, 154, 181, 198, 201, 202], "full": [72, 81, 197], "thu": [72, 87], "suffer": [72, 81], "discrep": [72, 81], "avoid": [72, 118], "auxiliari": 72, "160gb": 72, "corpora": [72, 87, 91], "down": [72, 102, 197, 198], "stream": [72, 107], "experiment": [72, 87], "022502584": 72, "078291744": 72, "023030775": 72, "0051000593": 72, "080340415": 72, "039": 72, "041702367": 72, "0010974605": 72, "015534201": 72, "07092203": 72, "0017729357": 72, "04661": 72, "robertaembed": [73, 79], "robustli": [73, 74, 104], "yinhan": [73, 74], "myle": [73, 74, 79, 80], "ott": [73, 74, 79, 80], "naman": [73, 74, 79, 80], "goyal": [73, 74, 79, 80], "jingfei": [73, 74], "du": [73, 74, 89], "mandar": [73, 74], "joshi": [73, 74], "danqi": [73, 74], "omer": [73, 74], "levi": [73, 74], "mike": [73, 74], "lewi": [73, 74], "luke": [73, 74, 79, 80], "zettlemoy": [73, 74, 79, 80], "veselin": [73, 74, 79, 80], "stoyanov": [73, 74, 79, 80], "hyperparamet": [73, 74], "mini": [73, 74], "roberta_bas": 73, "bpe": 73, "gpt": [73, 107, 120, 121], "signific": [73, 74, 79, 80, 87, 90], "gain": [73, 74, 79, 80, 120], "care": [73, 74, 138], "comparison": [73, 74, 76, 132], "privat": [73, 74, 171], "choic": [73, 74, 95], "impact": [73, 74], "replic": [73, 74, 120], "carefulli": [73, 74, 107], "undertrain": [73, 74], "exce": [73, 74, 107], "highlight": [73, 74], "previous": [73, 74, 87], "overlook": [73, 74], "rais": [73, 74, 87, 97, 102, 177], "report": [73, 74, 76, 120, 177, 193], "robertasentenceembed": 74, "sent_roberta_bas": 74, "embeddingssent": 75, "22093398869037628": 75, "25130119919776917": 75, "41810303926467896": 75, "380883991718": 75, "dimension": 76, "tfhub_us": 76, "loadsp": 76, "op": 76, "lingual": [76, 79, 80, 87, 89, 123], "accur": [76, 119, 120, 129], "trade": [76, 79, 80], "tend": 76, "With": [76, 81, 87], "observ": 76, "minim": [76, 104, 123], "encourag": 76, "weat": 76, "bia": [76, 107], "freeli": 76, "04616805538535118": 76, "022307956591248512": 76, "044395286589860916": 76, "0016493503": 76, "setloadsp": 76, "word2vecapproach": 77, "word2vecmodel": 77, "word2vec_gigaword_300": 77, "word2vec_wiki": 77, "custom": [78, 101, 102, 115, 116, 138, 170, 177], "dictionari": [78, 87, 90, 95, 101, 103, 104, 105, 118, 129, 130, 177], "setstoragepath": [78, 91], "line": [78, 82, 91, 96, 107, 116, 118, 127, 180, 183, 186], "delimit": [78, 82, 84, 90, 95, 97, 101, 105, 118, 137, 155, 183, 186], "39658191506190343": 78, "630968081620067": 78, "5393722253731201": 78, "8428180123359783": 78, "were": [78, 102, 177, 193], "7535235923631415": 78, "9699218875629833": 78, "10397182122983872": 78, "11833962569383116": 78, "stress": 78, "0492683418305907": 78, "9415954572751959": 78, "47624463167525755": 78, "16790967216778263": 78, "induc": 78, "1535748762292387": 78, "33498936903209897": 78, "9235178224122094": 78, "1158772920395934": 78, "withcoveragecolumn": 78, "overallcoverag": 78, "writebuffers": 78, "dump": 78, "disk": [78, 197, 198], "storag": [78, 82, 91, 162, 170], "10000": 78, "readcaches": 78, "cach": [78, 120, 125, 181], "random_embeddings_dim4": 78, "abov": [78, 84, 186], "setstorageref": 78, "glove_4d": 78, "setdimens": [78, 164], "patient": 78, "diagnos": 78, "diabet": 78, "9439099431037903": 78, "4707513153553009": 78, "806300163269043": 78, "16176554560661316": 78, "7966810464859009": 78, "5551124811172485": 78, "8861005902290344": 78, "28284206986427307": 78, "025029370561242104": 78, "35177749395370483": 78, "052506182342767715": 78, "1887107789516449": 78, "08617766946554184": 78, "8399239182472229": 78, "5395117998123169": 78, "7864698767662048": 78, "6599600911140442": 78, "16109347343444824": 78, "6041093468666077": 78, "8913561105728149": 78, "5955275893211365": 78, "01899011991918087": 78, "4397728443145752": 78, "8911281824111938": 78, "9840458631515503": 78, "7599489092826843": 78, "9417727589607239": 78, "8624503016471863": 78, "setwritebuffers": 78, "setreadcaches": 78, "glove_100d": [78, 102], "There": [78, 82, 84, 136, 195, 197, 198, 203], "conveni": 78, "coverag": [78, 161], "stat": 78, "whole": [78, 180], "570580005645752": 78, "44183000922203064": 78, "7010200023651123": 78, "417129993438720": 78, "542639970779419": 78, "4147599935531616": 78, "0321999788284302": 78, "4024400115013122": 78, "2708599865436554": 78, "04400600120425224": 78, "020260000601410866": 78, "17395000159": 78, "6191999912261963": 78, "14650000631809235": 78, "08592499792575836": 78, "2629800140857": 78, "3397899866104126": 78, "20940999686717987": 78, "46347999572753906": 78, "6479200124740": 78, "embeddings_col": 78, "coverageresult": 78, "coverateresult": 78, "wordsoverallcoverag": 78, "resultdf": 78, "output_col": 78, "wordscoverag": 78, "cov_embed": 78, "loadstorag": [78, 91], "storage_ref": [78, 91], "xlmrobertaembed": 79, "alexi": [79, 80], "conneau": [79, 80], "kartikai": [79, 80], "khandelw": [79, 80], "vishrav": [79, 80], "chaudhari": [79, 80], "guillaum": [79, 80], "wenzek": [79, 80], "francisco": [79, 80, 87], "guzman": 79, "edouard": [79, 80], "grave": [79, 80], "5tb": [79, 80], "commoncrawl": [79, 80], "xlm_roberta_bas": 79, "abl": [79, 124, 177, 196], "correct": [79, 127, 129, 130, 141], "hundr": [79, 80], "terabyt": [79, 80], "r": [79, 80, 87], "mbert": [79, 80], "xnli": [79, 80], "mlqa": [79, 80], "particularli": [79, 80, 120], "low": [79, 80, 127], "swahili": [79, 80], "urdu": [79, 80], "capac": [79, 80, 121], "dilut": [79, 80], "sacrif": [79, 80], "ri": [79, 80], "05969233065843582": 79, "030789051204919815": 79, "04443822056055069": 79, "09564960747": 79, "038839809596538544": 79, "011712731793522835": 79, "019954433664679527": 79, "0667808502": 79, "03952755779027939": 79, "03455188870429993": 79, "019103847444057465": 79, "04311436787": 79, "09579929709434509": 79, "02494969218969345": 79, "014753809198737144": 79, "10259044915": 79, "004710011184215546": 79, "022148698568344116": 79, "011723337695002556": 79, "013356896": 79, "xlmrobertasentenceembed": 80, "guzm\u00e3": 80, "sent_xlm_roberta_bas": 80, "xlnetembed": 81, "autoregress": 81, "addition": [81, 102, 113, 144, 153, 180], "emploi": 81, "xl": 81, "exhibit": 81, "involv": [81, 116], "rank": [81, 125, 127], "xlnet_large_cas": 81, "xlnet_base_cas": 81, "zihangdai": 81, "denois": [81, 120], "autoencod": [81, 120], "corrupt": [81, 120], "pro": 81, "con": 81, "enabl": [81, 102, 125, 129, 170], "maxim": [81, 127], "likelihood": [81, 107], "overcom": 81, "formul": 81, "furthermor": 81, "integr": [81, 87, 106, 123, 177, 193, 195], "idea": 81, "6287205219268799": 81, "4865287244319916": 81, "186111718416214": 81, "234187275171279": 81, "1967450380325317": 81, "2746637463569641": 81, "9481253027915955": 81, "3431355059146881": 81, "0777631998062134": 81, "092679977416992": 81, "5331977605819702": 81, "11190271377563": 81, "8349916934967041": 81, "45627787709236145": 81, "7890847325325012": 81, "028069257736": 81, "134845569729805": 81, "11672890186309814": 81, "4945235550403595": 81, "66587203741073": 81, "entityrul": 82, "entityrulerapproach": 82, "exact": [82, 91, 96, 107], "definit": [82, 104, 183], "json": [82, 107, 155, 177, 188], "jsonl": 82, "setpatternsresourc": 82, "might": [82, 102, 141, 202], "rule": [82, 92, 95, 118, 136, 138, 163], "person": [82, 184], "w": [82, 85, 95, 101, 105, 136, 138, 170], "winterfel": 82, "jon": 82, "snow": [82, 103, 127], "stark": 82, "eddard": 82, "patternsresourc": 82, "usestorag": 82, "rocksdb": 82, "lord": 82, "29": [82, 103, 141, 186, 188], "38": [82, 188], "setusestorag": 82, "setsentencematch": 82, "setalphabetresourc": 82, "alphabet": [82, 105], "plain": [82, 203], "entityrulermodel": 82, "entity_rul": [83, 85], "graphextract": [84, 147], "graph": [84, 102, 123, 127, 133, 147], "nerdlmodel": [84, 100, 101, 102, 103, 177, 181, 193], "store": [84, 109, 110, 155, 159, 164, 175, 180, 188, 194], "node": 84, "relev": [84, 87, 107], "taken": 84, "implicitli": 84, "setmergeent": 84, "setdependencyparsermodel": 84, "settypeddependencyparsermodel": 84, "setrelationshiptyp": 84, "public": [84, 181, 197], "relationshiptyp": 84, "entitytyp": 84, "explodeent": 84, "roottoken": 84, "travers": 84, "maxsentences": 84, "minsentences": 84, "mergeent": 84, "merg": [84, 91, 96], "neighbor": [84, 125], "includeedg": 84, "symbol": [84, 127, 141], "posmodel": 84, "coordin": [84, 115], "remoteloc": 84, "graphfinish": [84, 147], "rdf": [84, 147], "nertagg": [84, 101, 102, 103], "morn": [84, 147], "flight": [84, 147], "denver": [84, 147], "18": [84, 92, 94, 97, 100, 103, 152, 169, 180, 196], "path1": 84, "setentitytyp": 84, "setexplodeent": 84, "setroottoken": 84, "setmaxsentences": 84, "setminsentences": 84, "setmergeentitiesiobformat": 84, "iob": [84, 100, 101, 102], "iob2": [84, 100], "setincludeedg": 84, "setdelimit": [84, 95, 97], "setposmodel": 84, "class": [85, 162, 167, 174, 185, 192, 193, 201, 203], "classifier_dl": [85, 170], "er": [85, 170], "keyword_extract": [85, 170], "yake_keyword_extract": [85, 86], "ld_dl": [85, 170], "language_detector_dl": [85, 88], "matcher": [85, 170], "big_text_match": [85, 93], "date_match": [85, 93], "multi_date_match": [85, 93], "regex_match": [85, 93], "text_match": [85, 93], "ner_approach": [85, 98], "ner_convert": [85, 98], "ner_crf": [85, 98], "ner_dl": [85, 98], "ner_overwrit": [85, 98], "openai": [85, 121, 170], "openai_complet": [85, 106], "openai_embed": [85, 106], "param": [85, 101, 108, 125, 158, 159, 164, 170, 175, 176], "sentence_detector_dl": [85, 114, 123], "sentiment_detector": [85, 117], "vivekn_senti": [85, 117], "seq2seq": [85, 170], "bart_transform": [85, 122], "gpt2_transform": [85, 122], "marian_transform": [85, 122], "t5_transform": [85, 122], "spell_check": [85, 170], "context_spell_check": [85, 128], "norvig_sweet": [85, 128], "symmetric_delet": [85, 128], "chunk_token": [85, 135], "recursive_token": [85, 135], "regex_token": [85, 135], "word_segment": [85, 140], "chunk2_doc": [85, 170], "date2_chunk": [85, 170], "document_norm": [85, 170], "graph_extract": [85, 170], "lemmat": [85, 118, 132, 154, 156, 170], "n_gram_gener": [85, 170], "stemmer": [85, 132, 170], "stop_words_clean": [85, 170], "token2_chunk": [85, 170], "yakekeywordextract": 87, "yake": 87, "independ": [87, 129, 130, 136], "individu": [87, 127], "grow": 87, "autom": 87, "adequ": 87, "emerg": [87, 120, 124], "tool": [87, 107, 120], "nor": 87, "thesauri": 87, "neither": 87, "written": [87, 123], "plethora": 87, "situat": [87, 116], "access": 87, "restrict": 87, "therefor": [87, 201], "sent": 87, "boundari": [87, 115, 116, 119, 138, 141], "detector": [87, 92, 118], "section": [87, 144, 153, 193, 195, 201], "tweakabl": 87, "upper": 87, "bound": [87, 115, 116, 119], "minngram": 87, "maxngram": 87, "occurr": [87, 163], "nkeyword": 87, "stopword": [87, 103, 132], "stop": [87, 101, 107, 132], "campo": 87, "mangaravit": 87, "pasquali": 87, "jatowt": 87, "jorg": 87, "nune": 87, "journal": [87, 141], "elsevi": 87, "vol": 87, "509": 87, "pp": [87, 141], "257": 87, "289": 87, "turn": [87, 156, 197], "come": [87, 100, 107], "fly": 87, "demand": 87, "abil": [87, 120, 121], "within": [87, 113, 119, 120, 121, 138, 143], "resort": 87, "alwai": [87, 107, 124], "solut": 87, "articl": [87, 127], "rest": [87, 100], "merit": 87, "ten": 87, "carri": 87, "twenti": 87, "setcontextchar": [87, 138], "setminngram": 87, "setnkeyword": 87, "acquir": 87, "kaggl": 87, "platform": [87, 107, 177, 195], "host": 87, "transact": 87, "somewhat": 87, "vagu": 87, "cloud": 87, "confer": 87, "week": [87, 92, 94, 134], "announc": [87, 103], "earli": 87, "tomorrow": [87, 92, 94], "phone": 87, "founder": 87, "ceo": 87, "anthoni": 87, "goldbloom": 87, "declin": 87, "deni": 87, "acquisit": 87, "happen": 87, "rumor": 87, "million": [87, 103, 121], "scientist": 87, "ben": 87, "hamner": 87, "2010": 87, "servic": [87, 107, 123], "got": 87, "even": [87, 124], "few": [87, 138, 186, 203], "competitor": 87, "drivendata": 87, "topcod": 87, "hackerrank": 87, "stai": 87, "ahead": 87, "nich": 87, "home": [87, 170], "bui": [87, 184], "commun": 87, "mindshar": 87, "too": [87, 118, 196], "plenti": 87, "bit": [87, 116, 202], "histori": [87, 116, 127], "earlier": 87, "month": [87, 92, 94, 186, 203], "team": [87, 123, 177, 193], "around": 87, "youtub": 87, "That": [87, 136, 177, 193, 198], "had": [87, 107], "technologi": 87, "did": 87, "interest": 87, "kernel": 87, "On": [87, 121, 123], "analyz": [87, 119], "compani": [87, 123], "script": 87, "centric": 87, "job": [87, 143], "board": [87, 113, 186], "unclear": 87, "accord": [87, 127, 183], "crunchbas": 87, "pitchbook": 87, "launch": 87, "investor": 87, "ventur": 87, "sv": 87, "angel": 87, "levchin": 87, "naravik": 87, "chie": 87, "economist": 87, "hal": 87, "varian": 87, "khosla": 87, "yuri": 87, "milner": 87, "resulttupl": 87, "ascend": 87, "orderbi": 87, "32051516486864573": 87, "37786450577630676": 87, "39922830978423146": 87, "40224744669493756": 87, "41584827825302534": 87, "setmaxngram": 87, "setstopword": [87, 103, 132], "getstopword": 87, "loaddefaultstopword": [87, 132], "danish": [87, 132], "dutch": [87, 132], "finnish": [87, 132], "german": [87, 132, 183, 203], "hungarian": [87, 132], "italian": [87, 107, 127, 132], "norwegian": [87, 132], "portugues": [87, 132], "russian": [87, 132], "spanish": [87, 132], "swedish": [87, 132], "turkish": [87, 132], "languagedetectordl": 89, "ld": 89, "identif": 89, "rnn": 89, "tatoeba": 89, "140": 89, "wiki": 89, "languagedetector": 89, "ld_wiki_tatoeba_cnn_21": 89, "open": [89, 138, 143, 144, 145, 153, 156, 194], "advanc": [89, 143, 156], "scala": [89, 108, 125, 157, 158, 166, 172, 176], "program": 89, "biblioth\u00e8qu": 89, "traitement": 89, "pour": 89, "le": [89, 123], "avanc\u00e9": 89, "langag": 89, "naturel": 89, "programm": 89, "ist": 89, "ein": 89, "textverarbeitungsbibliothek": 89, "f\u00fcr": 89, "fortgeschritten": 89, "nat\u00fcrlich": 89, "sprachverarbeitung": 89, "die": 89, "programmiersprachen": 89, "und": 89, "lemma": [90, 118, 152, 180, 184, 198, 201, 202], "predefin": [90, 91, 95, 96, 118], "setdictionari": [90, 118, 129, 130], "lemmatizermodel": 90, "lemmas_smal": [90, 118], "setformcol": 90, "correspend": 90, "formcol": [90, 184], "setlemmacol": 90, "fromlemma": 90, "key_delimit": 90, "value_delimit": 90, "lemma_antbnc": 90, "bigtextmatch": [91, 96], "textmatch": [91, 96, 134], "externalresourc": [91, 96, 168], "mergeoverlap": [91, 96], "tokenizermodel": [91, 138], "trie": 91, "dolor": [91, 96], "magna": [91, 96], "aliqua": [91, 96], "sit": [91, 96], "laborum": [91, 96], "hello": [91, 96, 134, 188], "entityextractor": [91, 96, 134], "extractor": [91, 96, 134], "59": [91, 92, 94, 96], "setent": [91, 96, 99, 134], "setmergeoverlap": [91, 96], "settoken": 91, "tokenizer_model": 91, "bigtextmatchermodel": 91, "btm": 91, "textmatchermodel": [91, 96], "searchtri": 91, "datematcherutil": 92, "setinputformat": [92, 155], "setoutputformat": [92, 94], "desir": [92, 94], "yyyi": [92, 94], "mm": [92, 94, 141], "dd": [92, 94, 95], "Not": [92, 102, 154], "setreadmonthfirst": 92, "juli": 92, "5th": 92, "2015": 92, "07": 92, "05": 92, "setdefaultdaywhenmiss": 92, "miss": [92, 94, 143], "setanchordateyear": [92, 94], "anchor": [92, 94], "year": [92, 94, 121, 134, 186], "setanchordatemonth": [92, 94], "januari": [92, 94], "setanchordatedai": [92, 94], "setrelaxedfactorystrategi": 92, "matchstrategi": [92, 163], "match_first": [92, 95, 163], "relax": 92, "exhaust": 92, "1978": [92, 94], "28": [92, 94, 100, 152, 169, 180, 188, 196], "1984": [92, 94], "04": [92, 94], "02": [92, 94], "1980": [92, 94], "79": [92, 94], "31st": [92, 94], "april": [92, 94], "2008": [92, 94], "fri": [92, 94], "1997": [92, 94], "jan": [92, 94], "sun": [92, 94], "1st": [92, 94], "thursdai": [92, 94], "wednesdai": [92, 94], "todai": [92, 94, 188], "yesterdai": [92, 94], "0600h": [92, 94], "06": [92, 94], "00": [92, 94], "6pm": [92, 94], "23": [92, 94, 95, 103, 113, 186, 187, 188, 203], "1988": [92, 94], "31": [92, 94, 95, 103, 113, 186], "dateformat": [92, 94], "readmonthfirst": [92, 94], "defaultdaywhenmiss": [92, 94], "anchordateyear": [92, 94], "anchordatemonth": [92, 94], "anchordatedai": [92, 94], "15": [92, 188], "saw": 94, "him": 94, "me": 94, "visit": [94, 107], "57": [94, 103], "65": [94, 103], "regexmatch": 95, "d": [95, 105, 138, 195], "1970": 95, "setrul": 95, "setexternalrul": 95, "match_al": [95, 163], "match_complet": [95, 163], "externalrul": 95, "ceremoni": 95, "setstrategi": 95, "71": 95, "short_dat": 95, "regexmatchermodel": 95, "regardless": 96, "entityvalu": 96, "buildfromtoken": 96, "27": [96, 113, 115, 186], "48": [96, 141, 188], "setentityvalu": 96, "setbuildfromtoken": 96, "null": 97, "empti": [97, 143], "enablecumul": 97, "join": [97, 113, 155, 186], "setenablecumul": 97, "nerapproach": 99, "recogn": [99, 100, 101, 102, 103, 104, 127], "setminepoch": [99, 101], "setrandomse": [99, 102, 109], "getlabelcolumn": [99, 133], "friendli": [100, 107, 123], "whitelist": [100, 136], "setwhitelist": [100, 136], "outsid": 100, "prefix": [100, 136, 138, 177, 193], "preserveposit": [100, 137, 156], "org": [100, 101, 102, 103, 120, 141, 152, 169, 170, 180, 183, 194, 203], "14": [100, 113, 139, 152, 169, 180, 186], "ekeu": [100, 101, 102, 152, 169, 180], "36": [100, 113, 152, 169, 180, 186, 188], "baghdad": [100, 101, 102, 152, 169, 180], "37": [100, 152, 169, 180], "setpreserveposit": [100, 137, 156], "setnerhasnoschema": 100, "nercrf": 101, "nercrfapproach": [101, 102], "nercrfmodel": [101, 102], "crf": [101, 102], "2003": [101, 102, 141, 183, 203], "exclud": [101, 102], "setexternalfeatur": 101, "minepoch": [101, 102], "l2": 101, "c0": 101, "decai": [101, 102], "gradient": 101, "2250000": 101, "lossep": 101, "ep": 101, "minw": 101, "includeconfid": [101, 102], "confid": [101, 102, 104], "externalfeatur": 101, "nerdlapproach": [101, 102, 183, 203], "trainingdata": [101, 102, 116, 129, 130, 183], "readdataset": [101, 102, 113, 141, 183, 184, 186, 187, 188, 203], "conll2003": [101, 102, 183, 203], "eng": [101, 102, 183, 203], "setl2": 101, "l2valu": 101, "setc0": 101, "c0valu": 101, "setlossep": 101, "setminw": 101, "setincludeconfid": [101, 102], "verbosevalu": 101, "prerequisit": [101, 102, 103, 197], "nerdl": 102, "char": [102, 105, 116], "bilstm": 102, "tagger": [102, 186, 203], "50": [102, 103, 113, 120, 121, 188], "real": [102, 170, 177, 193], "rage": 102, "graphfold": [102, 127], "usecontrib": 102, "contrib": 102, "cell": [102, 155], "slightli": [102, 116], "includeallconfidencescor": 102, "enablememoryoptim": 102, "slow": 102, "usebestmodel": 102, "bestmodelmetr": 102, "micro": 102, "macro": 102, "setgraphfold": [102, 127, 133], "setusecontrib": 102, "setpo": 102, "setincludeallconfidencescor": 102, "setenablememoryoptim": 102, "setusebestmodel": 102, "setbestmodelmetr": 102, "nermodel": 102, "neroverwrit": 103, "setnewresult": 103, "nerword": 103, "overwritten": 103, "newnerent": 103, "lab": 103, "42": [103, 113], "45": [103, 113, 186, 188], "47": [103, 186, 188], "ner_overwritten": 103, "setnerword": 103, "setnewnerent": 103, "cardin": 103, "setreplaceent": 103, "rw": 103, "zeroshotnermodel": 104, "zeroshotn": 104, "zer_shot_n": 104, "entitydefinit": 104, "citi": 104, "town": 104, "predictionthreshold": 104, "01f": 104, "ignoreent": 104, "zero_shot_n": 104, "setentitydefinit": 104, "hellen": 104, "5328949": 104, "9360068": 104, "83294415": 104, "45366877": 104, "setpredictionthreshold": 104, "zero_shot_ner_roberta": 104, "shortcut": 104, "stem": [105, 131, 152, 180, 201, 202], "henc": 105, "pl": 105, "slangdictionari": 105, "slang": 105, "minlength": [105, 115, 116, 137, 138], "maxlength": [105, 115, 116, 137, 138], "setcleanuppattern": 105, "punctuat": [105, 115], "alphanumer": 105, "letter": [105, 121, 127, 186, 203], "za": 105, "z": [105, 138], "brother": 105, "dont": [105, 119], "setslangdictionari": 105, "setminlength": [105, 115, 116, 137, 138], "setmaxlength": [105, 115, 116, 137, 138], "normalizermodel": 105, "openaicomplet": 107, "request": 107, "complet": [107, 177, 194, 197], "executor": 107, "doc": [107, 127, 187, 203], "suffix": [107, 136, 138, 197], "insert": [107, 129, 130, 197], "maxtoken": 107, "nucleu": 107, "mass": 107, "numberofcomplet": 107, "prompt": 107, "logprob": 107, "echo": 107, "presencepenalti": 107, "penal": 107, "topic": 107, "frequencypenalti": 107, "frequenc": [107, 119, 127, 129, 130, 141], "decreas": [107, 125], "verbatim": 107, "bestof": 107, "best_of": 107, "server": [107, 202], "side": [107, 141], "logitbia": 107, "abus": [107, 108], "pleasur": 107, "dine": 107, "fiorita": 107, "truli": 107, "delight": 107, "menu": 107, "boast": 107, "wonder": 107, "classic": 107, "dish": 107, "exquisit": 107, "prepar": [107, 142, 144, 150, 153], "staff": [107, 118], "227": 107, "barbecu": 107, "joe": 107, "dinner": 107, "amaz": 107, "pull": 107, "pork": 107, "smoke": 107, "turkei": 107, "brisket": 107, "rib": 107, "sandwich": 107, "opt": 107, "172": 107, "overallr": 107, "reviewbodi": 107, "enjoi": 107, "meal": 107, "restaur": [107, 118], "food": 107, "flavour": 107, "beautifulli": 107, "setmodel": [107, 108, 116], "setsuffix": [107, 136], "setmaxtoken": 107, "plu": [107, 121], "max_token": 107, "cannot": 107, "settemperatur": [107, 120, 121, 124, 164], "determinist": 107, "alter": 107, "settopp": [107, 120, 121, 124, 164], "compris": 107, "setnumberofcomplet": 107, "consum": 107, "quota": 107, "ensur": [107, 172], "reason": 107, "setlogprob": 107, "respons": [107, 116], "setecho": 107, "setstop": 107, "setpresencepenalti": 107, "setfrequencypenalti": 107, "setbestof": 107, "control": [107, 120, 121, 123, 124, 125, 127, 164], "candid": [107, 127, 129, 130, 138], "setlogitbia": 107, "mathemat": 107, "ban": 107, "exclus": 107, "50256": 107, "prevent": 107, "endoftext": 107, "setus": [107, 108], "openaiembed": 108, "py": [108, 125, 157, 158, 166, 172, 176], "subclass": [108, 125, 158, 172, 176], "ins": [108, 125, 158, 176], "uid": [108, 125, 158, 176], "classifierencod": 109, "attach": [109, 110, 159, 164, 175, 177], "evaluationdlparam": 110, "setevaluationlogextend": 110, "setenableoutputlog": [110, 177, 193], "setoutputlogspath": [110, 116, 177, 193], "assum": 110, "perceptronapproach": [113, 186, 203], "member": [113, 180], "datasetpath": 113, "pierr": [113, 186], "vinken": [113, 186], "34": [113, 186, 188], "md": [113, 186], "vb": [113, 183, 186, 203], "41": [113, 115, 186, 188], "43": [113, 115, 186, 188], "dt": [113, 186, 187, 203], "49": [113, 186], "poscol": [113, 141, 183], "niter": [113, 141], "anc": [113, 186, 203], "trainingperceptrondf": 113, "trainedpo": 113, "setposcolumn": [113, 141], "cd": [113, 183, 186], "setiter": 113, "getniter": [113, 141], "pos_anc": 113, "25": [113, 115, 186, 188], "33": [113, 188], "sentencedetectorparam": 115, "ii": 115, "abbrevi": 115, "period": 115, "geo": 115, "1026": 115, "253": 115, "553": 115, "ellipsi": 115, "quotat": 115, "mark": [115, 116, 141], "exclam": 115, "breaker": 115, "pragmaticcontentformatt": 115, "custombound": [115, 116], "setcustombound": [115, 116], "usecustomboundsonli": [115, 116], "explodesent": [115, 116, 183, 184], "useabbrevi": 115, "explicitli": [115, 116, 132, 169, 197], "customboundsstrategi": 115, "prepend": [115, 143], "break": 115, "append": [115, 127, 197], "parallel": [115, 116, 152, 183, 201], "splitlength": [115, 116], "forcibli": [115, 116], "99999": [115, 116, 138], "detectlist": 115, "nhow": 115, "setcustomboundsstrategi": 115, "setuseabbrevi": 115, "setdetectlist": 115, "setusecustomboundsonli": [115, 116], "setexplodesent": [115, 116], "setsplitlength": [115, 116], "sentencedetectordl": [116, 123], "sentencedetectordlapproach": 116, "futur": [116, 120, 124], "sentencedetectordlmodel": [116, 123], "modelarchitectur": 116, "impossiblepenultim": 116, "imposs": [116, 141], "penultim": 116, "epochsnumb": 116, "eo": 116, "stefan": 116, "schweter": 116, "sajawel": 116, "ahm": 116, "littl": [116, 202], "cover": [116, 120, 124, 141], "broken": 116, "moder": 116, "lack": 116, "easier": [116, 146, 199, 203], "polit": 116, "successor": 116, "great": 116, "heritag": 116, "bequeath": 116, "nelson": 116, "mandela": 116, "setepochsnumb": 116, "model_architectur": 116, "validation_split": 116, "epochs_numb": 116, "output_logs_path": 116, "setimpossiblepenultim": 116, "impossible_penultim": 116, "sentencedl": 116, "sentencesdl": 116, "helen": 116, "total": [116, 141], "peopl": 116, "sentimentdetector": 118, "By": [118, 120, 124, 132, 137, 145, 170, 177, 193], "els": 118, "viveknsentimentapproach": [118, 119], "cool": 118, "superb": 118, "uninspir": 118, "sentimentscor": 118, "nice": [118, 177, 193], "entri": [118, 144, 153, 181], "sttr": 118, "sentimentdetectormodel": 118, "sda": [118, 119], "pragmat": 118, "viveknsenti": 119, "analys": 119, "vivek": 119, "narayanan": 119, "give": 119, "transit": [119, 127], "sentimentcol": 119, "prunecorpu": 119, "unfrequ": 119, "scenario": 119, "scope": 119, "naiv": 119, "bay": 119, "vivekn": 119, "setsentimentcol": 119, "train_senti": 119, "result_senti": 119, "finish": [119, 125, 145, 147, 151, 154, 170], "final_senti": 119, "cast": [119, 142], "horribl": 119, "never": [119, 197], "go": [119, 197], "again": [119, 136], "anyon": 119, "protagonist": 119, "music": 119, "setprunecorpu": 119, "viveknsentimentmodel": 119, "sentiment_vivekn": 119, "barttransform": 120, "handl": [120, 167, 185], "captur": [120, 125], "past": [120, 123, 181], "incorpor": 120, "versatil": 120, "valuabl": 120, "summari": [120, 121, 124], "distilbart_xsum_12_6": 120, "barttestspec": 120, "cumul": [120, 121, 124, 164], "ignoretokenid": [120, 121, 124], "usecach": 120, "ab": 120, "1910": 120, "13461": 120, "pytorch": 120, "fairseq": 120, "arbitrari": 120, "nois": 120, "reconstruct": [120, 156], "tranform": 120, "seen": 120, "randomli": 120, "dialogu": 120, "roug": 120, "bleu": 120, "ablat": 120, "influenc": [120, 127], "setmaxoutputlength": [120, 121, 123, 124, 164], "200": [120, 124], "rich": [120, 124], "rise": [120, 124], "methodologi": [120, 124], "landscap": [120, 124], "unifi": [120, 124], "systemat": [120, 124], "dozen": [120, 124], "insight": [120, 124], "coloss": [120, 124], "facilit": [120, 124], "setignoretokenid": [120, 121, 123, 124], "setminoutputlength": [120, 121, 124, 164], "settopk": [120, 121, 124, 164], "setrepetitionpenalti": [120, 121, 124, 164], "ctrl": [120, 121, 124, 164], "setnorepeatngrams": [120, 121, 124, 164], "setcach": 120, "use_cach": 120, "gpt2transform": 121, "caus": [121, 138], "goal": [121, 141], "direct": 121, "10x": 121, "synthet": 121, "unpreced": 121, "prime": 121, "lengthi": 121, "benefit": 121, "suffici": 121, "learner": 121, "typic": 121, "taskspecif": 121, "webpag": [121, 194], "webtext": 121, "coqa": 121, "exceed": 121, "127": 121, "fashion": 121, "5b": 121, "underfit": 121, "reflect": 121, "paragraph": [121, 127], "promis": 121, "leonardo": 121, "1776": 121, "came": 121, "kingdom": 121, "mariantransform": 123, "marian": 123, "free": 123, "mainli": 123, "academ": 123, "notabl": 123, "edinburgh": 123, "adam": 123, "mickiewicz": 123, "pozna\u0144": 123, "commerci": 123, "contributor": 123, "mariannmt": 123, "engin": [123, 134], "behind": 123, "deploi": [123, 194], "opus_mt_en_fr": 123, "langid": 123, "maxinputlength": 123, "differenti": 123, "toolkit": 123, "setmaxinputlength": 123, "capit": [123, 127], "franc": 123, "quell": 123, "capital": 123, "devrait": 123, "savoir": 123, "fran\u00e7ai": 123, "setlangid": 123, "t5transform": 124, "t5": 124, "reconsid": 124, "hyper": 124, "t5_small": 124, "documentsimilarityrank": 125, "documentsimilarityrankerapproach": 125, "lsh": 125, "lib": 125, "execut": [125, 152, 197, 201], "approxim": 125, "aim": 125, "ranker": 125, "documentsimilarityrankermodel": 125, "doc_similarity_rank": 125, "enablecach": 125, "rdd": 125, "similaritymethod": 125, "neighbour": 125, "brp": 125, "bucket": 125, "euclidean": 125, "numberofneighbour": 125, "bucketlength": 125, "hash": 125, "numhasht": 125, "visibledist": 125, "identityrank": 125, "ident": 125, "debug": 125, "setsimilaritymethod": 125, "setnumberofneighbour": 125, "setbucketlength": 125, "setnumhasht": 125, "setvisibledist": 125, "setidentityrank": 125, "document_similarity_ranker_finish": 125, "documentsimilarityrankerfinish": 125, "finished_doc_similarity_rankings_id": 125, "finished_doc_similarity_rankings_neighbor": 125, "setextractnearestneighbor": 125, "docsimrankerpipelin": 125, "1510101612": 125, "1634839239": 125, "12448559591306324": 125, "612640902": 125, "1274183715": 125, "1220122862046063": 125, "1320876223": 125, "1293373212": 125, "17848855164122393": 125, "1548374770": 125, "1719102856": 125, "23297156732534166": 125, "visibl": 125, "inclus": 125, "extractnearestneighbor": 125, "getinputcol": [125, 133, 145, 146, 159], "getoutputcol": [125, 142, 144, 145, 146, 150, 153, 159], "document_similarity_rank": 126, "contextspellcheck": 127, "contextspellcheckerapproach": [127, 129, 130], "noisi": 127, "spell": [127, 128, 129, 130, 152, 156, 200, 201, 202], "contextspellcheckermodel": [127, 129, 130], "error": 127, "surround": [127, 155], "edit": [127, 129, 130], "subword": 127, "checker": [127, 129, 130, 200], "languagemodelclass": 127, "lm": 127, "wordmaxdist": 127, "maxcandid": 127, "casestrategi": 127, "uppercas": 127, "errorthreshold": 127, "perplex": 127, "nlm": 127, "initialr": 127, "finalr": 127, "validationfract": 127, "datapoint": 127, "min": 127, "vocab": 127, "compoundcount": 127, "compound": 127, "classcount": 127, "tradeoff": 127, "weighteddistpath": 127, "levenshtein": [127, 129, 130], "maxwindowlen": 127, "rememb": 127, "maxsentlen": 127, "norvigsweetingapproach": [127, 129, 130, 203], "symmetricdeleteapproach": [127, 129, 130, 203], "depth": [127, 200], "explan": [127, 200], "awar": 127, "sherlock": 127, "holm": 127, "spellcheck": [127, 129, 130], "setwordmaxdist": 127, "setepoch": 127, "setlanguagemodelclass": 127, "1650": 127, "addvocabclass": 127, "_name_": 127, "extra": [127, 129, 197], "dist": 127, "setmaxcandid": 127, "setcasestrategi": 127, "seterrorthreshold": 127, "setinitialr": 127, "setfinalr": 127, "setvalidationfract": 127, "fraction": 127, "setcompoundcount": 127, "setclasscount": 127, "settradeoff": 127, "alpha": 127, "setweighteddistpath": 127, "setmaxwindowlen": 127, "setmaxsentlen": 127, "sentlen": 127, "userdist": 127, "addregexclass": 127, "spellcheck_dl": 127, "gamma": 127, "decis": 127, "correctsymbol": 127, "comparelowcas": 127, "vocabfreq": 127, "idsvocab": 127, "vocabid": 127, "usenewlin": 127, "newlin": 127, "norvigsweetingmodel": [127, 129, 130], "symmetricdeletemodel": [127, 129, 130], "cold": 127, "dreari": 127, "countri": 127, "white": 127, "smow": 127, "setweight": 127, "setgamma": 127, "setvocabfreq": 127, "setidsvocab": 127, "setvocabid": 127, "setclass": 127, "getwordclass": 127, "updateregexclass": 127, "updat": 127, "updatevocabclass": 127, "setcorrectsymbol": 127, "setcomparelowcas": 127, "norvigsweet": 129, "norvig": 129, "bayesian": 129, "tokenpattern": 129, "sensit": [129, 132, 138], "doublevari": 129, "shortcircuit": 129, "frequencyprior": 129, "ham": 129, "intersect": 129, "prioriti": [129, 138], "wordsizeignor": 129, "dupslimit": 129, "duplic": 129, "reductlimit": 129, "attempt": 129, "vowelswaplimit": 129, "vowel": 129, "swap": 129, "corrector": 129, "gummi": [129, 130], "gummic": [129, 130], "gummier": [129, 130], "gummiest": [129, 130], "gummifer": [129, 130], "basi": [129, 130], "token_pattern": [129, 130], "setdoublevari": 129, "setshortcircuit": 129, "setfrequencyprior": 129, "symmetr": [129, 130], "delet": [129, 130, 197], "damerau": [129, 130], "transpos": [129, 130], "spellcheck_norvig": 129, "symspel": [129, 130], "somtim": 129, "wrrite": [129, 130], "wordz": [129, 130], "erong": [129, 130], "sometim": [129, 130, 197], "wrong": [129, 130], "symmetricdelet": 130, "deriv": 130, "teach": 130, "maxeditdist": 130, "frequencythreshold": [130, 141], "deletesthreshold": 130, "patttern": 130, "setmaxeditdist": 130, "setfrequencythreshold": [130, 141], "setdeletesthreshold": 130, "spellcheck_sd": 130, "spmetim": 130, "hard": 131, "employ": 131, "stopwordsclean": [132, 145, 156], "mllib": [132, 194], "stopwordsremov": 132, "cleantoken": [132, 145, 156], "stopwords_en": 132, "jvm": [132, 170], "forth": 132, "setlocal": 132, "tfnerdlgraphbuildermodel": 133, "tfnerdlgraphbuild": 133, "sethiddenunitsnumb": 133, "assertiondlapproach": 133, "medicalnerapproach": 133, "gethiddenunitsnumb": 133, "srt": 133, "getgraphfold": 133, "setgraphfil": 133, "greaph": 133, "getgraphfil": 133, "chunktoken": 134, "flatten": 134, "artist": 134, "benezar": 134, "robert": 134, "farendel": 134, "graduat": 134, "luca": 134, "chunktokenizermodel": 134, "recursivetoken": 136, "recurs": [136, 154, 166, 170, 174], "infix": [136, 138], "she": 136, "qam": 136, "setprefix": 136, "setinfix": 136, "recursivetokenizermodel": 136, "regextoken": [137, 141, 198], "whitespac": [137, 141, 143], "tolowercas": [137, 141], "positionalmask": 137, "guarante": 137, "increment": 137, "trimwhitespac": 137, "flag": 137, "eventu": 137, "settolowercas": [137, 141], "nthi": 137, "setpositionalmask": 137, "settrimwhitespac": 137, "tokenizedsent": 138, "rulefactori": [138, 163], "targetpattern": 138, "grab": 138, "prefixpattern": 138, "suffixpattern": 138, "infixpattern": 138, "sub": 138, "won": 138, "exceptionspath": 138, "casesensitiveexcept": 138, "contextchar": 138, "splitpattern": 138, "splitchar": 138, "didn": 138, "jane": 138, "boyfriend": 138, "getinfixpattern": 138, "getsuffixpattern": 138, "getprefixpattern": 138, "getcontextchar": 138, "getsplitchar": 138, "settargetpattern": 138, "setprefixpattern": 138, "setsuffixpattern": 138, "setinfixpattern": 138, "addinfixpattern": 138, "setexcept": 138, "getexcept": 138, "setexceptionspath": 138, "addexcept": 138, "setcasesensitiveexcept": 138, "getcasesensitiveexcept": 138, "addcontextchar": 138, "setsplitpattern": 138, "setsplitchar": 138, "addsplitchar": 138, "piec": 138, "token_rul": 138, "token2chunk": 139, "17": [139, 186, 188], "wordsegment": 141, "wordsegmenterapproach": 141, "korean": 141, "japanes": 141, "chines": 141, "correspond": [141, 177], "rr": 141, "likewis": 141, "themselv": 141, "\u4e0a\u6d77": 141, "\u8ba1\u5212": 141, "\u5230": 141, "\u672c": 141, "\u4e16\u7eaa": 141, "\u672b": 141, "\u5b9e\u73b0": 141, "\u4eba\u5747": 141, "\u56fd\u5185": 141, "\u751f\u4ea7": 141, "\u603b\u503c": 141, "\u4e94\u5343": 141, "\u7f8e\u5143": 141, "\u4e0a": 141, "\u6d77": 141, "\u8ba1": 141, "\u5212": 141, "\u4e16": 141, "\u7eaa": 141, "\u5b9e": 141, "\u73b0": 141, "\u4eba": 141, "\u5747": 141, "\u56fd": 141, "\u5185": 141, "\u751f": 141, "\u4ea7": 141, "\u603b": 141, "ll\u503c": 141, "\u4e94": 141, "\u5343": 141, "\u7f8e": 141, "\u5143": 141, "shanghai": 141, "plan": 141, "dollar": 141, "capita": 141, "gdp": 141, "wordsegmentermodel": 141, "tip": 141, "frame": 141, "least": 141, "frequent": 141, "ambiguitythreshold": 141, "enableregextoken": 141, "xue": 141, "nianwen": 141, "volum": 141, "februari": 141, "aclweb": 141, "aclanthologi": 141, "o03": 141, "4002": 141, "chinese_train": 141, "utf8": 141, "\u5341": 141, "\u56db": 141, "\u4e0d": 141, "\u662f": 141, "setniter": 141, "trainingdataset": 141, "setambiguitythreshold": 141, "getfrequencythreshold": 141, "getambiguitythreshold": 141, "setenableregextoken": 141, "plit": 141, "words_seg": 141, "wordseg_pku": 141, "zh": 141, "\u7136\u800c": 141, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 141, "\u9019\u6a23": 141, "\u7684": 141, "\u8655\u7406": 141, "\u4e5f": 141, "\u884d\u751f": 141, "\u4e86": 141, "\u4e00\u4e9b": 141, "\u554f\u984c": 141, "outputcol": [142, 144, 145, 146, 147, 150, 153], "inferschema": 142, "tmp": [142, 150, 170, 193], "librispeech_asr_dummy_clean_audio_array_parquet": 142, "float_arrai": 142, "chunkcol": 143, "stringtyp": 143, "setisarrai": 143, "startcol": 143, "startcolbytokenindex": 143, "isarrai": 143, "failonmiss": 143, "fail": 143, "chunkassembl": 143, "setchunkcol": 143, "setstartcol": 143, "setstartcolbytokenindex": 143, "setfailonmiss": 143, "disabl": [144, 153], "idcol": [144, 153], "metadatacol": [144, 153], "cleanupmod": [144, 153], "cleanup": [144, 153], "inplac": [144, 153], "inplace_ful": [144, 153], "shrink_ful": [144, 153], "each_ful": [144, 153], "delete_ful": [144, 153], "setidcol": [144, 153], "setmetadatacol": [144, 153], "usabl": 145, "lda": 145, "forest": 145, "featurecol": 145, "cleanannot": [145, 146, 147], "outputasvector": 145, "gloveembed": 145, "finished_sentence_embed": 145, "resultwiths": 145, "1619900017976761": 145, "045552998781204224": 145, "03229299932718277": 145, "685609996318": 145, "42416998744010925": 145, "1378999948501587": 145, "5717899799346924": 145, "5078899860382": 145, "08621499687433243": 145, "15772999823093414": 145, "06067200005054474": 145, "395359992980": 145, "4970499873161316": 145, "7164199948310852": 145, "40119001269340515": 145, "05761000141501": 145, "08170200139284134": 145, "7159299850463867": 145, "20677000284194946": 145, "0295659992843": 145, "valuesplitsymbol": 146, "annotationsplitsymbol": 146, "includemetadata": 146, "outputasarrai": [146, 147], "parseembeddingsvector": 146, "setvaluesplitsymbol": 146, "setannotationsplitsymbol": 146, "setincludemetadata": [146, 198], "setoutputasarrai": [146, 147], "setparseembeddingsvector": 146, "finishedresult": 147, "hasrecursivefit": [148, 149], "java_obj": [148, 173, 176], "py4j": [148, 149, 176], "java_gatewai": [148, 149, 176], "javaobject": [148, 149, 176], "recursivepipelin": [148, 149, 154, 159], "hasrecursivetransform": 149, "doc2_chunk": [151, 170], "embeddings_finish": [151, 170], "graph_finish": [151, 170], "has_recursive_fit": [151, 170], "has_recursive_transform": [151, 170], "light_pipelin": [151, 170], "recursive_pipelin": [151, 170], "token_assembl": [151, 170], "lightpipelin": [152, 180, 201], "parse_embed": [152, 180], "hold": [152, 201], "principl": [152, 201], "everyth": [152, 201, 202], "fullannot": [152, 180], "happi": [152, 196, 198, 201, 202], "prp": [152, 184, 186, 196, 201, 202, 203], "rb": [152, 186, 196, 201, 202, 203], "optional_target": [152, 180], "explain_document_pipelin": [152, 169, 180, 196, 201, 202], "dict_kei": [152, 180], "fullannotateimag": [152, 180], "path_to_imag": [152, 180], "setignoreunsupport": 152, "unsupport": 152, "annotatormodel": [152, 158, 181], "getignoreunsupport": 152, "text2": 153, "document1": 153, "document2": 153, "arg": [154, 173], "kwarg": 154, "decid": 154, "behav": 154, "exactli": 154, "intent": 154, "recursivepipelinemodel": 154, "pipeline_model": [154, 177, 193], "intend": 154, "tab": [155, 177, 193], "escap": 155, "quot": 155, "inputformat": 155, "csvdelimit": 155, "defailt": 155, "comma": 155, "escapecsvdelimit": 155, "table_csv": 155, "csv_data": 155, "input_format": 155, "setcsvdelimit": 155, "setescapecsvdelimit": 155, "tokenassembl": 156, "cleantext": 156, "opensourc": 156, "annotatorapproach": [157, 166, 177], "annotatorproperti": 159, "setlazyannot": 159, "lazili": 159, "getlazyannot": 159, "annotator_approach": [162, 170], "annotator_model": [162, 170], "annotator_properti": [162, 170], "coverage_result": [162, 170], "match_strategi": [162, 170], "recursive_annotator_approach": [162, 170], "regard": 163, "constant": [163, 165], "hasembeddingsproperti": 164, "getdimens": 164, "setnreturnsequ": 164, "recursiveannotatorapproach": 166, "fo": 168, "assist": 169, "map_annot": 169, "f": [169, 177, 193], "output_typ": 169, "udf": 169, "userdefinedfunct": 169, "def": 169, "nnp_token": 169, "lambda": 169, "alia": 169, "epeu": 169, "map_annotations_arrai": 169, "map_annotations_strict": 169, "map_annotations_col": 169, "output_column": 169, "annotatyon_typ": 169, "chunks_df": 169, "pos_chunk": 169, "vbz": [169, 183, 203], "filter_by_annotations_col": 169, "filter_po": 169, "explode_annotations_col": 169, "annotator_java_ml": [170, 174], "annotator_transform": [170, 174], "extended_java_wrapp": [170, 174], "params_getters_sett": [170, 174], "comet": [170, 178, 195], "pretrained_pipelin": [170, 179], "resource_download": [170, 179], "pub_tat": [170, 185], "annotation_audio": 170, "annotation_imag": 170, "apple_silicon": 170, "aarch64": 170, "cache_fold": 170, "log_fold": 170, "cluster_tmp_dir": 170, "real_time_output": 170, "output_level": 170, "correctli": 170, "maco": 170, "linux": 170, "alloc": 170, "directori": [170, 181, 193], "cache_pretrain": 170, "temporarili": 170, "unpack": 170, "hadoop": 170, "dir": 170, "s3": [170, 181], "hdf": 170, "dbf": 170, "annotator_log": 170, "annotatorjavamlread": 171, "mixin": 171, "javamlread": 171, "classmethod": 171, "mlreader": 171, "clazz": 171, "rl": 171, "javaparam": 171, "annotatortransform": 172, "_java_obj": 172, "javawrapp": 173, "extendedjavawrapp": 173, "new_java_arrai": 173, "pylist": 173, "java_class": 173, "todo": 173, "paramsgetterssett": 175, "getparamvalu": 175, "paramnam": 175, "setparamvalu": 175, "recursiveestim": 176, "overrid": 176, "recursivetransform": 176, "cometlogg": [177, 193], "workspac": 177, "project_nam": [177, 193], "comet_mod": [177, 193], "experiment_id": 177, "experiment_kwarg": 177, "logger": [177, 193], "meta": [177, 195], "practition": [177, 193], "reliabl": [177, 193], "streamlin": [177, 193], "lifecycl": [177, 193, 195], "track": [177, 193, 194], "reproduc": [177, 193, 194], "outputlogpath": [177, 193], "onlin": [177, 193], "reus": 177, "importerror": 177, "output_log_path": [177, 193], "embd": [177, 193], "setshuffleperepoch": [177, 193], "logdir": [177, 193], "interfac": [177, 193, 201], "attribut": 177, "comet_ml": [177, 193], "log_pipeline_paramet": [177, 193], "log_visu": [177, 193], "html": [177, 193], "viz": [177, 193], "upload": 177, "colum": [177, 193], "ner_chunk": [177, 193], "sparknlp_displai": [177, 193], "nervisu": [177, 193], "idx": [177, 193], "enumer": [177, 193], "label_col": [177, 193], "document_col": [177, 193], "return_html": [177, 193], "log_metr": [177, 193], "sklearn": [177, 193], "preprocess": [177, 193], "multilabelbinar": [177, 193], "classification_report": [177, 193], "preds_df": [177, 193], "topanda": [177, 193], "mlb": [177, 193], "y_true": [177, 193], "fit_transform": [177, 193], "y_pred": [177, 193], "output_dict": [177, 193], "log_paramet": 177, "log_completed_run": 177, "log_file_path": 177, "log_asset": 177, "asset_path": 177, "asset": 177, "log_asset_data": 177, "interv": 177, "refresh": 177, "outstand": 177, "disk_loc": 180, "light_model": 180, "gather": 180, "resourcedownload": [181, 197, 202], "showpublicmodel": [181, 197], "onto_100": 181, "onto_300": 181, "ner_dl_bert": 181, "similarli": 181, "showpublicpipelin": [181, 202], "check_spel": [181, 202], "match_datetim": [181, 202], "downloadmodel": 181, "reader": 181, "j_dwn": 181, "pythonresourcedownload": 181, "downloadmodeldirectli": 181, "unzip": 181, "downloadpipelin": 181, "clearcach": 181, "clear": 181, "argument": 181, "filer": 181, "showuncategorizedresourc": 181, "yet": 181, "showavailableannot": 181, "documentcol": [183, 184], "sentencecol": [183, 184], "tokencol": 183, "conlllabelindex": 183, "conllposindex": 183, "conlldocidcol": 183, "doc_id": [183, 187], "textcol": [183, 184], "labelcol": 183, "includedocid": 183, "docstart": [183, 203], "eu": [183, 203], "np": [183, 203], "reject": [183, 203], "vp": [183, 203], "misc": [183, 203], "boycott": [183, 203], "british": [183, 203], "lamb": [183, 203], "blackburn": 183, "brussel": 183, "1996": 183, "08": 183, "storage_level": 183, "storagelevel": 183, "disk_onli": 183, "lift": 183, "persist": 183, "uposcol": 184, "upo": 184, "xposcol": 184, "xpo": 184, "lemmacol": 184, "sent_id": 184, "sell": 184, "pron": 184, "nom": 184, "plur": 184, "_": 184, "tens": 184, "conj": 184, "cc": 184, "obj": 184, "spaceaft": 184, "No": [184, 196], "punct": 184, "conllufil": [184, 203], "conlldataset": [184, 203], "morph": 184, "Into": 184, "googleo": 184, "sconj": 184, "propn": 184, "adp": 184, "wp": 184, "vbd": [184, 186, 203], "ago": [186, 203], "receiv": [186, 203], "posdf": 186, "61": 186, "67": [186, 187, 203], "nonexecut": 186, "69": 186, "76": 186, "director": 186, "78": 186, "81": 186, "84": 186, "outputposcol": 186, "outputdocumentcol": 186, "outputtextcol": 186, "pubtat": [187, 200], "medic": [187, 203], "titl": [187, 203], "medment": [187, 203], "25763772": [187, 203], "dctn4": [187, 203], "t116": [187, 203], "t123": [187, 203], "c4308010": [187, 203], "63": [187, 203], "chronic": [187, 203], "pseudomona": [187, 203], "aeruginosa": [187, 203], "infect": [187, 203], "t047": [187, 203], "c0854135": [187, 203], "82": [187, 203], "cystic": [187, 203], "fibrosi": [187, 203], "c0010674": [187, 203], "120": [187, 203], "pa": [187, 203], "124": [187, 203], "139": [187, 203], "pubtatorfil": 187, "corpus_pubtator_sampl": 187, "pubtatordataset": 187, "finished_token": [187, 198], "finished_po": 187, "finished_n": 187, "finished_token_metadata": 187, "finished_pos_metadata": 187, "finished_label_metadata": 187, "mo": 187, "ispaddedtoken": 187, "pad": 187, "spacytoannot": 188, "token_spac": 188, "sentence_end": 188, "spaci": 188, "multi_doc_token": 188, "went": 188, "night": 188, "bought": 188, "bread": 188, "54": 188, "overview": [192, 200], "workflow": 193, "dedic": 193, "account": 193, "inspect": 193, "init": 193, "sparknlp_experi": 193, "offline_directori": 193, "later": 193, "nativ": 194, "record": 194, "registri": 194, "central": 194, "send": 195, "messag": 195, "mlflow": 195, "content": [196, 202], "clearli": 196, "explain_document_ml": [196, 201, 202], "approx": [196, 201, 202], "mb": [196, 201, 202], "ok": [196, 201, 202], "spearhead": 197, "produc": 197, "declar": 197, "accordingli": 197, "extra_loc": 197, "offer": [197, 199, 202], "classifierdl_use_trec50": 197, "classifierdl_use_spam": 197, "column_nam": 197, "preced": 197, "interchang": 198, "road": 198, "proce": 198, "At": 198, "sens": 202, "constantli": 202, "train_po": 203, "training_conl": 203, "train_corpu": 203, "withcolumnrenam": 203, "trainingpubtatordf": 203, "corpus_pubt": 203}, "objects": {"": [[170, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [85, 0, 0, "-", "annotator"], [151, 0, 0, "-", "base"], [162, 0, 0, "-", "common"], [169, 0, 0, "-", "functions"], [174, 0, 0, "-", "internal"], [178, 0, 0, "-", "logging"], [179, 0, 0, "-", "pretrained"], [170, 3, 1, "", "start"], [185, 0, 0, "-", "training"], [190, 0, 0, "-", "upload_to_hub"], [191, 0, 0, "-", "util"], [170, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [30, 0, 0, "-", "classifier_dl"], [47, 0, 0, "-", "coref"], [50, 0, 0, "-", "cv"], [54, 0, 0, "-", "date2_chunk"], [56, 0, 0, "-", "dependency"], [58, 0, 0, "-", "document_normalizer"], [69, 0, 0, "-", "embeddings"], [83, 0, 0, "-", "er"], [84, 0, 0, "-", "graph_extraction"], [86, 0, 0, "-", "keyword_extraction"], [88, 0, 0, "-", "ld_dl"], [90, 0, 0, "-", "lemmatizer"], [93, 0, 0, "-", "matcher"], [97, 0, 0, "-", "n_gram_generator"], [98, 0, 0, "-", "ner"], [105, 0, 0, "-", "normalizer"], [106, 0, 0, "-", "openai"], [111, 0, 0, "-", "param"], [112, 0, 0, "-", "pos"], [114, 0, 0, "-", "sentence"], [117, 0, 0, "-", "sentiment"], [122, 0, 0, "-", "seq2seq"], [126, 0, 0, "-", "similarity"], [128, 0, 0, "-", "spell_check"], [131, 0, 0, "-", "stemmer"], [132, 0, 0, "-", "stop_words_cleaner"], [133, 0, 0, "-", "tf_ner_dl_graph_builder"], [135, 0, 0, "-", "token"], [139, 0, 0, "-", "token2_chunk"], [140, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "distil_bert_for_question_answering"], [27, 0, 0, "-", "distil_bert_for_sequence_classification"], [28, 0, 0, "-", "distil_bert_for_token_classification"], [29, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [31, 0, 0, "-", "longformer_for_question_answering"], [32, 0, 0, "-", "longformer_for_sequence_classification"], [33, 0, 0, "-", "longformer_for_token_classification"], [34, 0, 0, "-", "multi_classifier_dl"], [35, 0, 0, "-", "roberta_for_question_answering"], [36, 0, 0, "-", "roberta_for_sequence_classification"], [37, 0, 0, "-", "roberta_for_token_classification"], [38, 0, 0, "-", "roberta_for_zero_shot_classification"], [39, 0, 0, "-", "sentiment_dl"], [40, 0, 0, "-", "tapas_for_question_answering"], [41, 0, 0, "-", "xlm_roberta_for_question_answering"], [42, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [43, 0, 0, "-", "xlm_roberta_for_token_classification"], [44, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [45, 0, 0, "-", "xlnet_for_sequence_classification"], [46, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, 1, 1, "", "MultiClassifierDLApproach"], [34, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[34, 2, 1, "", "setThreshold"], [34, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, 1, 1, "", "SentimentDLApproach"], [39, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[39, 2, 1, "", "setDropout"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[48, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSegmentLength"], [48, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[49, 0, 0, "-", "convnext_for_image_classification"], [51, 0, 0, "-", "swin_for_image_classification"], [52, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [53, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setCropPct"], [49, 2, 1, "", "setDoRescale"], [49, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[52, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[53, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[53, 2, 1, "", "getClasses"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[54, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[54, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[55, 0, 0, "-", "dependency_parser"], [57, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[55, 1, 1, "", "DependencyParserApproach"], [55, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[55, 2, 1, "", "setConllU"], [55, 2, 1, "", "setDependencyTreeBank"], [55, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[55, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[57, 1, 1, "", "TypedDependencyParserApproach"], [57, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[57, 2, 1, "", "setConll2009"], [57, 2, 1, "", "setConllU"], [57, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[57, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[58, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[58, 2, 1, "", "setAction"], [58, 2, 1, "", "setEncoding"], [58, 2, 1, "", "setLowercase"], [58, 2, 1, "", "setPatterns"], [58, 2, 1, "", "setPolicy"], [58, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[59, 0, 0, "-", "albert_embeddings"], [60, 0, 0, "-", "bert_embeddings"], [61, 0, 0, "-", "bert_sentence_embeddings"], [62, 0, 0, "-", "camembert_embeddings"], [63, 0, 0, "-", "chunk_embeddings"], [64, 0, 0, "-", "deberta_embeddings"], [65, 0, 0, "-", "distil_bert_embeddings"], [66, 0, 0, "-", "doc2vec"], [67, 0, 0, "-", "e5_embeddings"], [68, 0, 0, "-", "elmo_embeddings"], [70, 0, 0, "-", "instructor_embeddings"], [71, 0, 0, "-", "longformer_embeddings"], [72, 0, 0, "-", "mpnet_embeddings"], [73, 0, 0, "-", "roberta_embeddings"], [74, 0, 0, "-", "roberta_sentence_embeddings"], [75, 0, 0, "-", "sentence_embeddings"], [76, 0, 0, "-", "universal_sentence_encoder"], [77, 0, 0, "-", "word2vec"], [78, 0, 0, "-", "word_embeddings"], [79, 0, 0, "-", "xlm_roberta_embeddings"], [80, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [81, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[59, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[60, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[61, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"], [61, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[62, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[63, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[63, 2, 1, "", "setPoolingStrategy"], [63, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[64, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[65, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[66, 1, 1, "", "Doc2VecApproach"], [66, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[66, 2, 1, "", "setMaxIter"], [66, 2, 1, "", "setMaxSentenceLength"], [66, 2, 1, "", "setMinCount"], [66, 2, 1, "", "setNumPartitions"], [66, 2, 1, "", "setSeed"], [66, 2, 1, "", "setStepSize"], [66, 2, 1, "", "setVectorSize"], [66, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[66, 2, 1, "", "getVectors"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[67, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[68, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setBatchSize"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[70, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"], [70, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[71, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[72, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[73, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[74, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[75, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[75, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[76, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"], [76, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[77, 1, 1, "", "Word2VecApproach"], [77, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[77, 2, 1, "", "setMaxIter"], [77, 2, 1, "", "setMaxSentenceLength"], [77, 2, 1, "", "setMinCount"], [77, 2, 1, "", "setNumPartitions"], [77, 2, 1, "", "setSeed"], [77, 2, 1, "", "setStepSize"], [77, 2, 1, "", "setVectorSize"], [77, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[77, 2, 1, "", "getVectors"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[78, 1, 1, "", "WordEmbeddings"], [78, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[78, 2, 1, "", "setReadCacheSize"], [78, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[78, 2, 1, "", "loadStorage"], [78, 2, 1, "", "overallCoverage"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setReadCacheSize"], [78, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[79, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[80, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[81, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[82, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[82, 1, 1, "", "EntityRulerApproach"], [82, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[82, 2, 1, "", "setAlphabetResource"], [82, 2, 1, "", "setPatternsResource"], [82, 2, 1, "", "setSentenceMatch"], [82, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[84, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[84, 2, 1, "", "setDelimiter"], [84, 2, 1, "", "setDependencyParserModel"], [84, 2, 1, "", "setEntityTypes"], [84, 2, 1, "", "setExplodeEntities"], [84, 2, 1, "", "setIncludeEdges"], [84, 2, 1, "", "setMaxSentenceSize"], [84, 2, 1, "", "setMergeEntities"], [84, 2, 1, "", "setMergeEntitiesIOBFormat"], [84, 2, 1, "", "setMinSentenceSize"], [84, 2, 1, "", "setPosModel"], [84, 2, 1, "", "setRelationshipTypes"], [84, 2, 1, "", "setRootTokens"], [84, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[87, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[87, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[87, 2, 1, "", "getStopWords"], [87, 2, 1, "", "loadDefaultStopWords"], [87, 2, 1, "", "setMaxNGrams"], [87, 2, 1, "", "setMinNGrams"], [87, 2, 1, "", "setNKeywords"], [87, 2, 1, "", "setStopWords"], [87, 2, 1, "", "setThreshold"], [87, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[89, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[89, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setCoalesceSentences"], [89, 2, 1, "", "setConfigProtoBytes"], [89, 2, 1, "", "setThreshold"], [89, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[90, 1, 1, "", "Lemmatizer"], [90, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[90, 2, 1, "", "setDictionary"], [90, 2, 1, "", "setFormCol"], [90, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[90, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[91, 0, 0, "-", "big_text_matcher"], [92, 0, 0, "-", "date_matcher"], [94, 0, 0, "-", "multi_date_matcher"], [95, 0, 0, "-", "regex_matcher"], [96, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[91, 1, 1, "", "BigTextMatcher"], [91, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[91, 2, 1, "", "setCaseSensitive"], [91, 2, 1, "", "setEntities"], [91, 2, 1, "", "setMergeOverlapping"], [91, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[91, 2, 1, "", "loadStorage"], [91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setCaseSensitive"], [91, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[92, 1, 1, "", "DateMatcher"], [92, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[92, 2, 1, "", "setAnchorDateDay"], [92, 2, 1, "", "setAnchorDateMonth"], [92, 2, 1, "", "setAnchorDateYear"], [92, 2, 1, "", "setDefaultDayWhenMissing"], [92, 2, 1, "", "setInputFormats"], [92, 2, 1, "", "setOutputFormat"], [92, 2, 1, "", "setReadMonthFirst"], [92, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[94, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[95, 1, 1, "", "RegexMatcher"], [95, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[95, 2, 1, "", "setDelimiter"], [95, 2, 1, "", "setExternalRules"], [95, 2, 1, "", "setRules"], [95, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[96, 1, 1, "", "TextMatcher"], [96, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[96, 2, 1, "", "setBuildFromTokens"], [96, 2, 1, "", "setCaseSensitive"], [96, 2, 1, "", "setEntities"], [96, 2, 1, "", "setEntityValue"], [96, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setBuildFromTokens"], [96, 2, 1, "", "setEntityValue"], [96, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[97, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[97, 2, 1, "", "setDelimiter"], [97, 2, 1, "", "setEnableCumulative"], [97, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[99, 0, 0, "-", "ner_approach"], [100, 0, 0, "-", "ner_converter"], [101, 0, 0, "-", "ner_crf"], [102, 0, 0, "-", "ner_dl"], [103, 0, 0, "-", "ner_overwriter"], [104, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[99, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[99, 2, 1, "", "getLabelColumn"], [99, 2, 1, "", "setEntities"], [99, 2, 1, "", "setLabelColumn"], [99, 2, 1, "", "setMaxEpochs"], [99, 2, 1, "", "setMinEpochs"], [99, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[100, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[100, 2, 1, "", "setNerHasNoSchema"], [100, 2, 1, "", "setPreservePosition"], [100, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[101, 1, 1, "", "NerCrfApproach"], [101, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[101, 2, 1, "", "setC0"], [101, 2, 1, "", "setExternalFeatures"], [101, 2, 1, "", "setIncludeConfidence"], [101, 2, 1, "", "setL2"], [101, 2, 1, "", "setLossEps"], [101, 2, 1, "", "setMinW"], [101, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[102, 1, 1, "", "NerDLApproach"], [102, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[102, 2, 1, "", "setBatchSize"], [102, 2, 1, "", "setBestModelMetric"], [102, 2, 1, "", "setConfigProtoBytes"], [102, 2, 1, "", "setDropout"], [102, 2, 1, "", "setEnableMemoryOptimizer"], [102, 2, 1, "", "setGraphFolder"], [102, 2, 1, "", "setIncludeAllConfidenceScores"], [102, 2, 1, "", "setIncludeConfidence"], [102, 2, 1, "", "setLr"], [102, 2, 1, "", "setPo"], [102, 2, 1, "", "setUseBestModel"], [102, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[102, 2, 1, "", "pretrained"], [102, 2, 1, "", "setConfigProtoBytes"], [102, 2, 1, "", "setIncludeAllConfidenceScores"], [102, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[103, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[103, 2, 1, "", "setNerWords"], [103, 2, 1, "", "setNewNerEntity"], [103, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[104, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[104, 2, 1, "", "getClasses"], [104, 2, 1, "", "load"], [104, 2, 1, "", "pretrained"], [104, 2, 1, "", "setEntityDefinitions"], [104, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[105, 1, 1, "", "Normalizer"], [105, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[105, 2, 1, "", "setCleanupPatterns"], [105, 2, 1, "", "setLowercase"], [105, 2, 1, "", "setMaxLength"], [105, 2, 1, "", "setMinLength"], [105, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[107, 0, 0, "-", "openai_completion"], [108, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[107, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[107, 2, 1, "", "setBestOf"], [107, 2, 1, "", "setEcho"], [107, 2, 1, "", "setFrequencyPenalty"], [107, 2, 1, "", "setLogitBias"], [107, 2, 1, "", "setLogprobs"], [107, 2, 1, "", "setMaxTokens"], [107, 2, 1, "", "setModel"], [107, 2, 1, "", "setNumberOfCompletions"], [107, 2, 1, "", "setPresencePenalty"], [107, 2, 1, "", "setStop"], [107, 2, 1, "", "setSuffix"], [107, 2, 1, "", "setTemperature"], [107, 2, 1, "", "setTopP"], [107, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[108, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[108, 2, 1, "", "setModel"], [108, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[109, 0, 0, "-", "classifier_encoder"], [110, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[109, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[109, 2, 1, "", "setBatchSize"], [109, 2, 1, "", "setConfigProtoBytes"], [109, 2, 1, "", "setLabelColumn"], [109, 2, 1, "", "setLr"], [109, 2, 1, "", "setMaxEpochs"], [109, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[110, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[110, 2, 1, "", "setEnableOutputLogs"], [110, 2, 1, "", "setEvaluationLogExtended"], [110, 2, 1, "", "setOutputLogsPath"], [110, 2, 1, "", "setTestDataset"], [110, 2, 1, "", "setValidationSplit"], [110, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[113, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[113, 1, 1, "", "PerceptronApproach"], [113, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[113, 2, 1, "", "getNIterations"], [113, 2, 1, "", "setIterations"], [113, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[113, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[115, 0, 0, "-", "sentence_detector"], [116, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[115, 1, 1, "", "SentenceDetector"], [115, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[115, 2, 1, "", "setCustomBounds"], [115, 2, 1, "", "setCustomBoundsStrategy"], [115, 2, 1, "", "setDetectLists"], [115, 2, 1, "", "setExplodeSentences"], [115, 2, 1, "", "setMaxLength"], [115, 2, 1, "", "setMinLength"], [115, 2, 1, "", "setSplitLength"], [115, 2, 1, "", "setUseAbbreviations"], [115, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[116, 1, 1, "", "SentenceDetectorDLApproach"], [116, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[116, 2, 1, "", "setEpochsNumber"], [116, 2, 1, "", "setExplodeSentences"], [116, 2, 1, "", "setImpossiblePenultimates"], [116, 2, 1, "", "setModel"], [116, 2, 1, "", "setOutputLogsPath"], [116, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[116, 2, 1, "", "pretrained"], [116, 2, 1, "", "setCustomBounds"], [116, 2, 1, "", "setExplodeSentences"], [116, 2, 1, "", "setImpossiblePenultimates"], [116, 2, 1, "", "setMaxLength"], [116, 2, 1, "", "setMinLength"], [116, 2, 1, "", "setModel"], [116, 2, 1, "", "setSplitLength"], [116, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[118, 0, 0, "-", "sentiment_detector"], [119, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[118, 1, 1, "", "SentimentDetector"], [118, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[118, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[119, 1, 1, "", "ViveknSentimentApproach"], [119, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[119, 2, 1, "", "setPruneCorpus"], [119, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[119, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[120, 0, 0, "-", "bart_transformer"], [121, 0, 0, "-", "gpt2_transformer"], [123, 0, 0, "-", "marian_transformer"], [124, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[120, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[120, 2, 1, "", "loadSavedModel"], [120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setBeamSize"], [120, 2, 1, "", "setCache"], [120, 2, 1, "", "setConfigProtoBytes"], [120, 2, 1, "", "setDoSample"], [120, 2, 1, "", "setIgnoreTokenIds"], [120, 2, 1, "", "setMaxOutputLength"], [120, 2, 1, "", "setMinOutputLength"], [120, 2, 1, "", "setNoRepeatNgramSize"], [120, 2, 1, "", "setRepetitionPenalty"], [120, 2, 1, "", "setTask"], [120, 2, 1, "", "setTemperature"], [120, 2, 1, "", "setTopK"], [120, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[121, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[121, 2, 1, "", "loadSavedModel"], [121, 2, 1, "", "pretrained"], [121, 2, 1, "", "setConfigProtoBytes"], [121, 2, 1, "", "setDoSample"], [121, 2, 1, "", "setIgnoreTokenIds"], [121, 2, 1, "", "setMaxOutputLength"], [121, 2, 1, "", "setMinOutputLength"], [121, 2, 1, "", "setNoRepeatNgramSize"], [121, 2, 1, "", "setRepetitionPenalty"], [121, 2, 1, "", "setTask"], [121, 2, 1, "", "setTemperature"], [121, 2, 1, "", "setTopK"], [121, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[123, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[123, 2, 1, "", "loadSavedModel"], [123, 2, 1, "", "pretrained"], [123, 2, 1, "", "setConfigProtoBytes"], [123, 2, 1, "", "setIgnoreTokenIds"], [123, 2, 1, "", "setLangId"], [123, 2, 1, "", "setMaxInputLength"], [123, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[124, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[124, 2, 1, "", "loadSavedModel"], [124, 2, 1, "", "pretrained"], [124, 2, 1, "", "setConfigProtoBytes"], [124, 2, 1, "", "setDoSample"], [124, 2, 1, "", "setIgnoreTokenIds"], [124, 2, 1, "", "setMaxOutputLength"], [124, 2, 1, "", "setMinOutputLength"], [124, 2, 1, "", "setNoRepeatNgramSize"], [124, 2, 1, "", "setRepetitionPenalty"], [124, 2, 1, "", "setTask"], [124, 2, 1, "", "setTemperature"], [124, 2, 1, "", "setTopK"], [124, 2, 1, "", "setTopP"]], "sparknlp.annotator.similarity": [[125, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[125, 1, 1, "", "DocumentSimilarityRankerApproach"], [125, 1, 1, "", "DocumentSimilarityRankerFinisher"], [125, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[125, 2, 1, "", "setBucketLength"], [125, 2, 1, "", "setIdentityRanking"], [125, 2, 1, "", "setNumHashTables"], [125, 2, 1, "", "setNumberOfNeighbours"], [125, 2, 1, "", "setSimilarityMethod"], [125, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[125, 2, 1, "", "getInputCols"], [125, 2, 1, "", "getOutputCols"], [125, 2, 1, "", "setExtractNearestNeighbor"], [125, 2, 1, "", "setInputCols"], [125, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[127, 0, 0, "-", "context_spell_checker"], [129, 0, 0, "-", "norvig_sweeting"], [130, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[127, 1, 1, "", "ContextSpellCheckerApproach"], [127, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[127, 2, 1, "", "addRegexClass"], [127, 2, 1, "", "addVocabClass"], [127, 2, 1, "", "setBatchSize"], [127, 2, 1, "", "setCaseStrategy"], [127, 2, 1, "", "setClassCount"], [127, 2, 1, "", "setCompoundCount"], [127, 2, 1, "", "setConfigProtoBytes"], [127, 2, 1, "", "setEpochs"], [127, 2, 1, "", "setErrorThreshold"], [127, 2, 1, "", "setFinalRate"], [127, 2, 1, "", "setGraphFolder"], [127, 2, 1, "", "setInitialRate"], [127, 2, 1, "", "setLanguageModelClasses"], [127, 2, 1, "", "setMaxCandidates"], [127, 2, 1, "", "setMaxSentLen"], [127, 2, 1, "", "setMaxWindowLen"], [127, 2, 1, "", "setMinCount"], [127, 2, 1, "", "setTradeoff"], [127, 2, 1, "", "setValidationFraction"], [127, 2, 1, "", "setWeightedDistPath"], [127, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[127, 2, 1, "", "getWordClasses"], [127, 2, 1, "", "pretrained"], [127, 2, 1, "", "setCaseStrategy"], [127, 2, 1, "", "setClasses"], [127, 2, 1, "", "setCompareLowcase"], [127, 2, 1, "", "setConfigProtoBytes"], [127, 2, 1, "", "setCorrectSymbols"], [127, 2, 1, "", "setErrorThreshold"], [127, 2, 1, "", "setGamma"], [127, 2, 1, "", "setIdsVocab"], [127, 2, 1, "", "setMaxCandidates"], [127, 2, 1, "", "setMaxWindowLen"], [127, 2, 1, "", "setTradeoff"], [127, 2, 1, "", "setVocabFreq"], [127, 2, 1, "", "setVocabIds"], [127, 2, 1, "", "setWeights"], [127, 2, 1, "", "setWordMaxDistance"], [127, 2, 1, "", "updateRegexClass"], [127, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[129, 1, 1, "", "NorvigSweetingApproach"], [129, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[129, 2, 1, "", "setCaseSensitive"], [129, 2, 1, "", "setDictionary"], [129, 2, 1, "", "setDoubleVariants"], [129, 2, 1, "", "setFrequencyPriority"], [129, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[129, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[130, 1, 1, "", "SymmetricDeleteApproach"], [130, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[130, 2, 1, "", "setDeletesThreshold"], [130, 2, 1, "", "setDictionary"], [130, 2, 1, "", "setFrequencyThreshold"], [130, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[130, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[131, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[132, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[132, 2, 1, "", "loadDefaultStopWords"], [132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setCaseSensitive"], [132, 2, 1, "", "setLocale"], [132, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[133, 1, 1, "", "TFNerDLGraphBuilder"], [133, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[133, 2, 1, "", "getGraphFile"], [133, 2, 1, "", "getGraphFolder"], [133, 2, 1, "", "getHiddenUnitsNumber"], [133, 2, 1, "", "getInputCols"], [133, 2, 1, "", "getLabelColumn"], [133, 2, 1, "", "setGraphFile"], [133, 2, 1, "", "setGraphFolder"], [133, 2, 1, "", "setHiddenUnitsNumber"], [133, 2, 1, "", "setInputCols"], [133, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[134, 0, 0, "-", "chunk_tokenizer"], [136, 0, 0, "-", "recursive_tokenizer"], [137, 0, 0, "-", "regex_tokenizer"], [138, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[134, 1, 1, "", "ChunkTokenizer"], [134, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[136, 1, 1, "", "RecursiveTokenizer"], [136, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[136, 2, 1, "", "setInfixes"], [136, 2, 1, "", "setPrefixes"], [136, 2, 1, "", "setSuffixes"], [136, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[137, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[137, 2, 1, "", "setMaxLength"], [137, 2, 1, "", "setMinLength"], [137, 2, 1, "", "setPattern"], [137, 2, 1, "", "setPositionalMask"], [137, 2, 1, "", "setPreservePosition"], [137, 2, 1, "", "setToLowercase"], [137, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[138, 1, 1, "", "Tokenizer"], [138, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[138, 2, 1, "", "addContextChars"], [138, 2, 1, "", "addException"], [138, 2, 1, "", "addInfixPattern"], [138, 2, 1, "", "addSplitChars"], [138, 2, 1, "", "getCaseSensitiveExceptions"], [138, 2, 1, "", "getContextChars"], [138, 2, 1, "", "getExceptions"], [138, 2, 1, "", "getInfixPatterns"], [138, 2, 1, "", "getPrefixPattern"], [138, 2, 1, "", "getSplitChars"], [138, 2, 1, "", "getSuffixPattern"], [138, 2, 1, "", "setCaseSensitiveExceptions"], [138, 2, 1, "", "setContextChars"], [138, 2, 1, "", "setExceptions"], [138, 2, 1, "", "setExceptionsPath"], [138, 2, 1, "", "setInfixPatterns"], [138, 2, 1, "", "setMaxLength"], [138, 2, 1, "", "setMinLength"], [138, 2, 1, "", "setPrefixPattern"], [138, 2, 1, "", "setSplitChars"], [138, 2, 1, "", "setSplitPattern"], [138, 2, 1, "", "setSuffixPattern"], [138, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[138, 2, 1, "", "addSplitChars"], [138, 2, 1, "", "pretrained"], [138, 2, 1, "", "setSplitChars"], [138, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[139, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[141, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[141, 1, 1, "", "WordSegmenterApproach"], [141, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[141, 2, 1, "", "getAmbiguityThreshold"], [141, 2, 1, "", "getFrequencyThreshold"], [141, 2, 1, "", "getNIterations"], [141, 2, 1, "", "setAmbiguityThreshold"], [141, 2, 1, "", "setEnableRegexTokenizer"], [141, 2, 1, "", "setFrequencyThreshold"], [141, 2, 1, "", "setNIterations"], [141, 2, 1, "", "setPattern"], [141, 2, 1, "", "setPosColumn"], [141, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[141, 2, 1, "", "pretrained"], [141, 2, 1, "", "setEnableRegexTokenizer"], [141, 2, 1, "", "setPattern"], [141, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[142, 0, 0, "-", "audio_assembler"], [143, 0, 0, "-", "doc2_chunk"], [144, 0, 0, "-", "document_assembler"], [145, 0, 0, "-", "embeddings_finisher"], [146, 0, 0, "-", "finisher"], [147, 0, 0, "-", "graph_finisher"], [148, 0, 0, "-", "has_recursive_fit"], [149, 0, 0, "-", "has_recursive_transform"], [150, 0, 0, "-", "image_assembler"], [152, 0, 0, "-", "light_pipeline"], [153, 0, 0, "-", "multi_document_assembler"], [154, 0, 0, "-", "recursive_pipeline"], [155, 0, 0, "-", "table_assembler"], [156, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[142, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[142, 2, 1, "", "getOutputCol"], [142, 2, 1, "", "setInputCol"], [142, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[143, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[143, 2, 1, "", "setChunkCol"], [143, 2, 1, "", "setFailOnMissing"], [143, 2, 1, "", "setIsArray"], [143, 2, 1, "", "setLowerCase"], [143, 2, 1, "", "setStartCol"], [143, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[144, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[144, 2, 1, "", "getOutputCol"], [144, 2, 1, "", "setCleanupMode"], [144, 2, 1, "", "setIdCol"], [144, 2, 1, "", "setInputCol"], [144, 2, 1, "", "setMetadataCol"], [144, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[145, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[145, 2, 1, "", "getInputCols"], [145, 2, 1, "", "getOutputCols"], [145, 2, 1, "", "setCleanAnnotations"], [145, 2, 1, "", "setInputCols"], [145, 2, 1, "", "setOutputAsVector"], [145, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[146, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[146, 2, 1, "", "getInputCols"], [146, 2, 1, "", "getOutputCols"], [146, 2, 1, "", "setAnnotationSplitSymbol"], [146, 2, 1, "", "setCleanAnnotations"], [146, 2, 1, "", "setIncludeMetadata"], [146, 2, 1, "", "setInputCols"], [146, 2, 1, "", "setOutputAsArray"], [146, 2, 1, "", "setOutputCols"], [146, 2, 1, "", "setParseEmbeddingsVectors"], [146, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[147, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[147, 2, 1, "", "setCleanAnnotations"], [147, 2, 1, "", "setInputCol"], [147, 2, 1, "", "setOutputAsArray"], [147, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[148, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[149, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[150, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[150, 2, 1, "", "getOutputCol"], [150, 2, 1, "", "setInputCol"], [150, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[152, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[152, 2, 1, "", "annotate"], [152, 2, 1, "", "fullAnnotate"], [152, 2, 1, "", "fullAnnotateImage"], [152, 2, 1, "", "getIgnoreUnsupported"], [152, 2, 1, "", "setIgnoreUnsupported"], [152, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[153, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[153, 2, 1, "", "getOutputCols"], [153, 2, 1, "", "setCleanupMode"], [153, 2, 1, "", "setIdCol"], [153, 2, 1, "", "setInputCols"], [153, 2, 1, "", "setMetadataCol"], [153, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[154, 1, 1, "", "RecursivePipeline"], [154, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[155, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[155, 2, 1, "", "setCsvDelimiter"], [155, 2, 1, "", "setEscapeCsvDelimiter"], [155, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[156, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[156, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[157, 0, 0, "-", "annotator_approach"], [158, 0, 0, "-", "annotator_model"], [159, 0, 0, "-", "annotator_properties"], [160, 0, 0, "-", "annotator_type"], [161, 0, 0, "-", "coverage_result"], [163, 0, 0, "-", "match_strategy"], [164, 0, 0, "-", "properties"], [165, 0, 0, "-", "read_as"], [166, 0, 0, "-", "recursive_annotator_approach"], [167, 0, 0, "-", "storage"], [168, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[157, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[158, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[159, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[159, 2, 1, "", "getInputCols"], [159, 2, 1, "", "getLazyAnnotator"], [159, 2, 1, "", "getOutputCol"], [159, 2, 1, "", "setInputCols"], [159, 2, 1, "", "setLazyAnnotator"], [159, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[163, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[164, 1, 1, "", "HasEmbeddingsProperties"], [164, 3, 1, "", "setBeamSize"], [164, 3, 1, "", "setDoSample"], [164, 3, 1, "", "setMaxOutputLength"], [164, 3, 1, "", "setMinOutputLength"], [164, 3, 1, "", "setNReturnSequences"], [164, 3, 1, "", "setNoRepeatNgramSize"], [164, 3, 1, "", "setRepetitionPenalty"], [164, 3, 1, "", "setTask"], [164, 3, 1, "", "setTemperature"], [164, 3, 1, "", "setTopK"], [164, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[164, 2, 1, "", "getDimension"], [164, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[165, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[166, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[168, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[169, 3, 1, "", "explode_annotations_col"], [169, 3, 1, "", "filter_by_annotations_col"], [169, 3, 1, "", "map_annotations"], [169, 3, 1, "", "map_annotations_array"], [169, 3, 1, "", "map_annotations_col"], [169, 3, 1, "", "map_annotations_cols"], [169, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[171, 0, 0, "-", "annotator_java_ml"], [172, 0, 0, "-", "annotator_transformer"], [173, 0, 0, "-", "extended_java_wrapper"], [175, 0, 0, "-", "params_getters_setters"], [176, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[171, 1, 1, "", "AnnotatorJavaMLReadable"], [171, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[171, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[172, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[173, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[173, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[175, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[175, 2, 1, "", "getParamValue"], [175, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[176, 1, 1, "", "RecursiveEstimator"], [176, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[176, 2, 1, "", "fit"]], "sparknlp.logging": [[177, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[177, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[177, 2, 1, "", "end"], [177, 2, 1, "", "log_asset"], [177, 2, 1, "", "log_asset_data"], [177, 2, 1, "", "log_completed_run"], [177, 2, 1, "", "log_metrics"], [177, 2, 1, "", "log_parameters"], [177, 2, 1, "", "log_pipeline_parameters"], [177, 2, 1, "", "log_visualization"], [177, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[180, 0, 0, "-", "pretrained_pipeline"], [181, 0, 0, "-", "resource_downloader"], [182, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[180, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[180, 2, 1, "", "annotate"], [180, 2, 1, "", "fullAnnotate"], [180, 2, 1, "", "fullAnnotateImage"], [180, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[181, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[181, 2, 1, "", "clearCache"], [181, 2, 1, "", "downloadModel"], [181, 2, 1, "", "downloadModelDirectly"], [181, 2, 1, "", "downloadPipeline"], [181, 2, 1, "", "showAvailableAnnotators"], [181, 2, 1, "", "showPublicModels"], [181, 2, 1, "", "showPublicPipelines"], [181, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[183, 0, 0, "-", "conll"], [184, 0, 0, "-", "conllu"], [186, 0, 0, "-", "pos"], [187, 0, 0, "-", "pub_tator"], [188, 0, 0, "-", "spacy_to_annotation"], [189, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[183, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[183, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[184, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[184, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[186, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[186, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[187, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[187, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[188, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 198], "start": 0, "spark": [0, 1, 193, 198, 202], "nlp": [0, 1, 193, 202], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 193], "us": [0, 193, 202], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 181, 183, 184, 186, 187, 188], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 196, 197, 198], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 177, 180, 181, 183, 184, 186, 187, 188, 192], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 171, 172, 173, 175, 176, 177, 180, 181, 183, 184, 186, 187, 188], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 30, 47, 50, 56, 69, 83, 85, 86, 88, 93, 98, 106, 112, 114, 117, 122, 126, 128, 135, 140, 151, 162, 170, 174, 178, 179, 185], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "distil_bert_for_question_answ": 26, "distil_bert_for_sequence_classif": 27, "distil_bert_for_token_classif": 28, "distil_bert_for_zero_shot_classif": 29, "longformer_for_question_answ": 31, "longformer_for_sequence_classif": 32, "longformer_for_token_classif": 33, "multi_classifier_dl": 34, "roberta_for_question_answ": 35, "roberta_for_sequence_classif": 36, "roberta_for_token_classif": 37, "roberta_for_zero_shot_classif": 38, "sentiment_dl": 39, "tapas_for_question_answ": 40, "xlm_roberta_for_question_answ": 41, "xlm_roberta_for_sequence_classif": 42, "xlm_roberta_for_token_classif": 43, "xlm_roberta_for_zero_shot_classif": 44, "xlnet_for_sequence_classif": 45, "xlnet_for_token_classif": 46, "coref": [47, 48], "spanbert_coref": 48, "cv": [49, 50, 51, 52, 53], "convnext_for_image_classif": 49, "swin_for_image_classif": 51, "vision_encoder_decoder_for_image_capt": 52, "vit_for_image_classif": 53, "date2_chunk": 54, "depend": [55, 56, 57], "dependency_pars": 55, "typed_dependency_pars": 57, "document_norm": 58, "embed": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "albert_embed": 59, "bert_embed": 60, "bert_sentence_embed": 61, "camembert_embed": 62, "chunk_embed": 63, "deberta_embed": 64, "distil_bert_embed": 65, "doc2vec": 66, "e5_embed": 67, "elmo_embed": 68, "instructor_embed": 70, "longformer_embed": 71, "mpnet_embed": 72, "roberta_embed": 73, "roberta_sentence_embed": 74, "sentence_embed": 75, "universal_sentence_encod": 76, "word2vec": 77, "word_embed": 78, "xlm_roberta_embed": 79, "xlm_roberta_sentence_embed": 80, "xlnet_embed": 81, "er": [82, 83], "entity_rul": 82, "graph_extract": 84, "subpackag": [85, 170], "keyword_extract": [86, 87], "yake_keyword_extract": 87, "ld_dl": [88, 89], "language_detector_dl": 89, "lemmat": 90, "matcher": [91, 92, 93, 94, 95, 96], "big_text_match": 91, "date_match": 92, "multi_date_match": 94, "regex_match": 95, "text_match": 96, "n_gram_gener": 97, "ner": [98, 99, 100, 101, 102, 103, 104], "ner_approach": 99, "ner_convert": 100, "ner_crf": 101, "ner_dl": 102, "ner_overwrit": 103, "zero_shot_ner_model": 104, "normal": 105, "openai": [106, 107, 108], "openai_complet": 107, "openai_embed": 108, "param": [109, 110, 111], "classifier_encod": 109, "evaluation_dl_param": 110, "po": [112, 113, 186, 203], "perceptron": 113, "sentenc": [114, 115, 116, 198], "sentence_detector": 115, "sentence_detector_dl": 116, "sentiment": [117, 118, 119], "sentiment_detector": 118, "vivekn_senti": 119, "seq2seq": [120, 121, 122, 123, 124], "bart_transform": 120, "gpt2_transform": 121, "marian_transform": 123, "t5_transform": 124, "similar": [125, 126], "document_similarity_rank": 125, "spell_check": [127, 128, 129, 130], "context_spell_check": 127, "norvig_sweet": 129, "symmetric_delet": 130, "stemmer": 131, "stop_words_clean": 132, "tf_ner_dl_graph_build": 133, "token": [134, 135, 136, 137, 138, 198], "chunk_token": 134, "recursive_token": 136, "regex_token": 137, "token2_chunk": 139, "w": [140, 141], "word_segment": 141, "base": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], "audio_assembl": 142, "doc2_chunk": 143, "document_assembl": 144, "embeddings_finish": 145, "finish": [146, 198], "graph_finish": 147, "has_recursive_fit": 148, "has_recursive_transform": 149, "image_assembl": 150, "light_pipelin": 152, "multi_document_assembl": 153, "recursive_pipelin": 154, "table_assembl": 155, "token_assembl": 156, "common": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 197], "annotator_approach": 157, "annotator_model": 158, "annotator_properti": 159, "annotator_typ": 160, "coverage_result": 161, "match_strategi": 163, "properti": 164, "function": [164, 168, 169, 170, 197, 199], "read_a": 165, "recursive_annotator_approach": 166, "storag": 167, "util": [168, 182, 191], "packag": 170, "intern": [171, 172, 173, 174, 175, 176], "annotator_java_ml": 171, "annotator_transform": 172, "extended_java_wrapp": 173, "params_getters_sett": 175, "recurs": 176, "log": [177, 178, 193, 195], "comet": [177, 193], "pretrain": [179, 180, 181, 182, 197, 201, 202], "pretrained_pipelin": 180, "resource_download": 181, "train": [183, 184, 185, 186, 187, 188, 189, 203], "conll": [183, 203], "conllu": [184, 203], "pub_tat": 187, "spacy_to_annot": 188, "tfgraph": 189, "upload_to_hub": 190, "api": 192, "refer": 192, "A": 193, "meta": 193, "machin": [193, 194], "learn": [193, 194], "platform": [193, 194], "pipelin": [193, 198, 201, 202], "paramet": 193, "evalu": 193, "metric": 193, "visual": 193, "run": 193, "an": 193, "offlin": 193, "experi": 193, "mlflow": 194, "lifecycl": 194, "third": 195, "parti": 195, "project": 195, "approach": 197, "model": 197, "note": 197, "avail": [197, 202], "set": 198, "up": 198, "your": 198, "own": 198, "type": 198, "necessari": 198, "import": 198, "construct": 198, "documentassembl": 198, "data": 198, "detect": 198, "out": 198, "put": 198, "all": 198, "togeth": 198, "ml": [198, 202], "helper": 199, "user": 200, "guid": 200, "light": 201, "convert": 201, "pipelinemodel": 201, "download": 202, "As": 202, "lightpipelin": 202, "load": 203, "dataset": 203, "spell": 203, "checker": 203, "pubtat": 203}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [193, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [87, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [168, "module-contents"], [169, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [87, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [184, "classes"], [186, "classes"], [187, "classes"], [188, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [30, "submodules"], [47, "submodules"], [50, "submodules"], [56, "submodules"], [69, "submodules"], [83, "submodules"], [85, "submodules"], [86, "submodules"], [88, "submodules"], [93, "submodules"], [98, "submodules"], [106, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [122, "submodules"], [126, "submodules"], [128, "submodules"], [135, "submodules"], [140, "submodules"], [151, "submodules"], [162, "submodules"], [170, "submodules"], [174, "submodules"], [178, "submodules"], [179, "submodules"], [185, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[52, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[53, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[54, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[55, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[56, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[57, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_normalizer": [[58, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[59, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[60, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[61, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[62, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[63, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[64, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[65, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[66, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[67, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[68, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[69, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[70, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[71, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[72, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[73, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[75, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[76, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[77, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[78, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[79, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[80, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[81, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[82, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[83, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[84, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[85, "module-sparknlp.annotator"]], "Subpackages": [[85, "subpackages"], [170, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[86, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[87, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[88, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[89, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[90, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[91, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[92, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[93, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[94, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[95, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[96, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[97, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[98, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[99, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[100, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[101, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[102, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[103, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[104, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[105, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[106, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[107, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[108, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[109, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[110, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[111, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[112, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[113, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[114, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[115, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[116, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[117, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[118, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[119, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[120, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[121, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[122, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[123, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[124, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[125, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[126, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[127, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[128, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[129, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[130, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[131, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[132, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[133, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[134, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[135, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[136, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[137, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[138, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[139, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[140, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[141, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[142, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[143, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[144, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[145, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[146, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[147, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[148, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[149, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[150, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[151, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[152, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[153, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[154, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[155, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[156, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[157, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[158, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[159, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[160, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[161, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[162, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[163, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[164, "module-sparknlp.common.properties"]], "Functions": [[164, "functions"], [168, "functions"], [169, "functions"], [170, "functions"]], "sparknlp.common.read_as": [[165, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[166, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[167, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[168, "module-sparknlp.common.utils"]], "sparknlp.functions": [[169, "module-sparknlp.functions"]], "sparknlp": [[170, "module-sparknlp"]], "Package Contents": [[170, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[171, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[172, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[173, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[174, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[175, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[176, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[177, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[178, "module-sparknlp.logging"]], "sparknlp.pretrained": [[179, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[180, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[181, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[182, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[183, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[184, "module-sparknlp.training.conllu"]], "sparknlp.training": [[185, "module-sparknlp.training"]], "sparknlp.training.pos": [[186, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[187, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[188, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[189, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[190, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[191, "module-sparknlp.util"]], "API Reference": [[192, "api-reference"]], "Modules": [[192, "modules"]], "Comet - A meta machine learning platform": [[193, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[193, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[193, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[193, "logging-evaluation-metrics"]], "Logging Visualizations": [[193, "logging-visualizations"]], "Running An Offline Experiment": [[193, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[194, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[195, "third-party-projects"]], "Logging": [[195, "logging"]], "Annotation": [[196, "annotation"]], "Annotators": [[197, "annotators"]], "Annotator Approaches": [[197, "annotator-approaches"]], "Annotator Models": [[197, "annotator-models"]], "Note": [[197, "note"]], "Pretrained Models": [[197, "pretrained-models"]], "Common Functions": [[197, "common-functions"]], "Available Annotators": [[197, "available-annotators"]], "Setting up your own pipeline": [[198, "setting-up-your-own-pipeline"]], "Annotator types": [[198, "annotator-types"]], "Necessary imports": [[198, "necessary-imports"]], "Constructing the Pipeline": [[198, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[198, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[198, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[198, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[198, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[199, "helper-functions"]], "User Guide": [[200, "user-guide"]], "Light Pipelines": [[201, "light-pipelines"]], "Converting PipelineModels": [[201, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[201, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[202, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[202, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[202, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[202, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[202, "available-pipelines"]], "Loading datasets for training": [[203, "loading-datasets-for-training"]], "POS Dataset": [[203, "pos-dataset"]], "CoNLL Dataset": [[203, "conll-dataset"]], "CoNLLU Dataset": [[203, "conllu-dataset"]], "Spell Checkers Dataset": [[203, "spell-checkers-dataset"]], "PubTator Dataset": [[203, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [47, "module-sparknlp.annotator.coref"], [48, "module-sparknlp.annotator.coref.spanbert_coref"], [49, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [50, "module-sparknlp.annotator.cv"], [51, "module-sparknlp.annotator.cv.swin_for_image_classification"], [52, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [53, "module-sparknlp.annotator.cv.vit_for_image_classification"], [54, "module-sparknlp.annotator.date2_chunk"], [55, "module-sparknlp.annotator.dependency.dependency_parser"], [56, "module-sparknlp.annotator.dependency"], [57, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [58, "module-sparknlp.annotator.document_normalizer"], [59, "module-sparknlp.annotator.embeddings.albert_embeddings"], [60, "module-sparknlp.annotator.embeddings.bert_embeddings"], [61, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [62, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [63, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [64, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [65, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [66, "module-sparknlp.annotator.embeddings.doc2vec"], [67, "module-sparknlp.annotator.embeddings.e5_embeddings"], [68, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [69, "module-sparknlp.annotator.embeddings"], [70, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [71, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [72, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [73, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [74, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [75, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [76, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [77, "module-sparknlp.annotator.embeddings.word2vec"], [78, "module-sparknlp.annotator.embeddings.word_embeddings"], [79, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [80, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [81, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [82, "module-sparknlp.annotator.er.entity_ruler"], [83, "module-sparknlp.annotator.er"], [84, "module-sparknlp.annotator.graph_extraction"], [85, "module-sparknlp.annotator"], [86, "module-sparknlp.annotator.keyword_extraction"], [87, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [88, "module-sparknlp.annotator.ld_dl"], [89, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [90, "module-sparknlp.annotator.lemmatizer"], [91, "module-sparknlp.annotator.matcher.big_text_matcher"], [92, "module-sparknlp.annotator.matcher.date_matcher"], [93, "module-sparknlp.annotator.matcher"], [94, "module-sparknlp.annotator.matcher.multi_date_matcher"], [95, "module-sparknlp.annotator.matcher.regex_matcher"], [96, "module-sparknlp.annotator.matcher.text_matcher"], [97, "module-sparknlp.annotator.n_gram_generator"], [98, "module-sparknlp.annotator.ner"], [99, "module-sparknlp.annotator.ner.ner_approach"], [100, "module-sparknlp.annotator.ner.ner_converter"], [101, "module-sparknlp.annotator.ner.ner_crf"], [102, "module-sparknlp.annotator.ner.ner_dl"], [103, "module-sparknlp.annotator.ner.ner_overwriter"], [104, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [105, "module-sparknlp.annotator.normalizer"], [106, "module-sparknlp.annotator.openai"], [107, "module-sparknlp.annotator.openai.openai_completion"], [108, "module-sparknlp.annotator.openai.openai_embeddings"], [109, "module-sparknlp.annotator.param.classifier_encoder"], [110, "module-sparknlp.annotator.param.evaluation_dl_params"], [111, "module-sparknlp.annotator.param"], [112, "module-sparknlp.annotator.pos"], [113, "module-sparknlp.annotator.pos.perceptron"], [114, "module-sparknlp.annotator.sentence"], [115, "module-sparknlp.annotator.sentence.sentence_detector"], [116, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [117, "module-sparknlp.annotator.sentiment"], [118, "module-sparknlp.annotator.sentiment.sentiment_detector"], [119, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [120, "module-sparknlp.annotator.seq2seq.bart_transformer"], [121, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [122, "module-sparknlp.annotator.seq2seq"], [123, "module-sparknlp.annotator.seq2seq.marian_transformer"], [124, "module-sparknlp.annotator.seq2seq.t5_transformer"], [125, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [126, "module-sparknlp.annotator.similarity"], [127, "module-sparknlp.annotator.spell_check.context_spell_checker"], [128, "module-sparknlp.annotator.spell_check"], [129, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [130, "module-sparknlp.annotator.spell_check.symmetric_delete"], [131, "module-sparknlp.annotator.stemmer"], [132, "module-sparknlp.annotator.stop_words_cleaner"], [133, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [134, "module-sparknlp.annotator.token.chunk_tokenizer"], [135, "module-sparknlp.annotator.token"], [136, "module-sparknlp.annotator.token.recursive_tokenizer"], [137, "module-sparknlp.annotator.token.regex_tokenizer"], [138, "module-sparknlp.annotator.token.tokenizer"], [139, "module-sparknlp.annotator.token2_chunk"], [140, "module-sparknlp.annotator.ws"], [141, "module-sparknlp.annotator.ws.word_segmenter"], [142, "module-sparknlp.base.audio_assembler"], [143, "module-sparknlp.base.doc2_chunk"], [144, "module-sparknlp.base.document_assembler"], [145, "module-sparknlp.base.embeddings_finisher"], [146, "module-sparknlp.base.finisher"], [147, "module-sparknlp.base.graph_finisher"], [148, "module-sparknlp.base.has_recursive_fit"], [149, "module-sparknlp.base.has_recursive_transform"], [150, "module-sparknlp.base.image_assembler"], [151, "module-sparknlp.base"], [152, "module-sparknlp.base.light_pipeline"], [153, "module-sparknlp.base.multi_document_assembler"], [154, "module-sparknlp.base.recursive_pipeline"], [155, "module-sparknlp.base.table_assembler"], [156, "module-sparknlp.base.token_assembler"], [157, "module-sparknlp.common.annotator_approach"], [158, "module-sparknlp.common.annotator_model"], [159, "module-sparknlp.common.annotator_properties"], [160, "module-sparknlp.common.annotator_type"], [161, "module-sparknlp.common.coverage_result"], [162, "module-sparknlp.common"], [163, "module-sparknlp.common.match_strategy"], [164, "module-sparknlp.common.properties"], [165, "module-sparknlp.common.read_as"], [166, "module-sparknlp.common.recursive_annotator_approach"], [167, "module-sparknlp.common.storage"], [168, "module-sparknlp.common.utils"], [169, "module-sparknlp.functions"], [170, "module-sparknlp"], [171, "module-sparknlp.internal.annotator_java_ml"], [172, "module-sparknlp.internal.annotator_transformer"], [173, "module-sparknlp.internal.extended_java_wrapper"], [174, "module-sparknlp.internal"], [175, "module-sparknlp.internal.params_getters_setters"], [176, "module-sparknlp.internal.recursive"], [177, "module-sparknlp.logging.comet"], [178, "module-sparknlp.logging"], [179, "module-sparknlp.pretrained"], [180, "module-sparknlp.pretrained.pretrained_pipeline"], [181, "module-sparknlp.pretrained.resource_downloader"], [182, "module-sparknlp.pretrained.utils"], [183, "module-sparknlp.training.conll"], [184, "module-sparknlp.training.conllu"], [185, "module-sparknlp.training"], [186, "module-sparknlp.training.pos"], [187, "module-sparknlp.training.pub_tator"], [188, "module-sparknlp.training.spacy_to_annotation"], [189, "module-sparknlp.training.tfgraphs"], [190, "module-sparknlp.upload_to_hub"], [191, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[52, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[53, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[54, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[54, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[54, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[55, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[56, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[57, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[58, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[58, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[59, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[59, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[59, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[59, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[59, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[60, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[60, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[60, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[60, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[60, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[61, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[61, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[61, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[61, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[61, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[61, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[62, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[62, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[62, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[62, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[62, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[63, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[63, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[63, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[63, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[64, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[64, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[64, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[64, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[64, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[65, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[65, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[65, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[65, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[65, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[66, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[66, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[67, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[67, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[67, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[67, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[67, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[68, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[68, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[68, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[68, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[68, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[68, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[68, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[69, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[70, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[70, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[70, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[70, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[70, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[70, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[71, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[71, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[71, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[71, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[71, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[72, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[72, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[72, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[72, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[72, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[73, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[73, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[73, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[73, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[73, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[74, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[74, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[74, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[74, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[75, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[75, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[75, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[76, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[76, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[76, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[76, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[76, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[76, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[77, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[77, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[78, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[78, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[79, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[80, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[81, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[81, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[81, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[81, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[81, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[82, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[82, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[82, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[82, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[82, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[82, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[82, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[83, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[84, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[84, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[85, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[86, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[87, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[87, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[88, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[89, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[89, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[89, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[89, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[89, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[89, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[89, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[90, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[90, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[90, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[90, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[90, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[90, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[90, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[91, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[91, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[92, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[92, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[93, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[94, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[94, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[95, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[95, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[95, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[95, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[95, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[95, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[95, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[96, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[96, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[97, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[97, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[97, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[97, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[97, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[98, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[99, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[99, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[100, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[100, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[100, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[100, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[100, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[101, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[101, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[102, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[102, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[103, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[103, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[103, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[103, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[103, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[104, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[104, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[104, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[104, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[104, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[104, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[104, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[105, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[105, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[105, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[105, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[105, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[105, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[105, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[105, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[106, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[107, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[107, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[108, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[108, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[108, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[108, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[109, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[109, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[110, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[110, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[111, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[112, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[113, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[113, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[113, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[113, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[113, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[113, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[113, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[114, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[115, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[115, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[116, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[116, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[117, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[118, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[118, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[118, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[118, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[119, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[119, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[119, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[119, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[119, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[119, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[120, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[120, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[121, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[121, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[122, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[123, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[123, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[124, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[124, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[125, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[125, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[126, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[127, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[127, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[128, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[129, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[129, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[130, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[130, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[131, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[131, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[132, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[132, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[132, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[132, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[132, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[132, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[132, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[133, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[133, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[134, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[134, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[134, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[135, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[136, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[136, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[136, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[136, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[136, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[136, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[136, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[137, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[137, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[138, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[138, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[138, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[138, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[138, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[138, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[138, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[139, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[139, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[140, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[141, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[141, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[142, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[142, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[142, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[142, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[142, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[143, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[143, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[144, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[144, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[144, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[144, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[144, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[144, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[144, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[144, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[145, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[145, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[146, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[146, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[146, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[147, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[147, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[147, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[147, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[147, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[147, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[148, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[148, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[149, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[149, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[150, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[150, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[150, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[150, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[150, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[151, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[152, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[152, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[152, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[152, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[152, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[152, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[152, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[152, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[153, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[153, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[154, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[154, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[154, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[155, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[155, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[155, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[155, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[155, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[156, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[156, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[156, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[157, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[157, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[158, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[158, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[159, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[159, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[160, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[161, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[162, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[163, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[163, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[164, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[164, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[164, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[164, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[164, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[165, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[165, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[166, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[166, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[167, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[168, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[168, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[169, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[169, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[169, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[169, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[169, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[169, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[169, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[169, "module-sparknlp.functions"]], "sparknlp": [[170, "module-sparknlp"]], "start() (in module sparknlp)": [[170, "sparknlp.start"]], "version() (in module sparknlp)": [[170, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[171, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[171, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[171, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[171, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[172, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[172, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[173, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[173, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[173, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[174, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[175, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[175, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[175, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[175, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[176, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[176, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[176, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[176, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[177, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[177, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[177, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[178, "module-sparknlp.logging"]], "sparknlp.pretrained": [[179, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[180, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[180, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[180, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[180, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[180, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[180, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[181, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[181, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[182, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[183, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[183, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[183, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[184, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[184, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[184, "module-sparknlp.training.conllu"]], "sparknlp.training": [[185, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[186, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[186, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[186, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[187, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[187, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[187, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[188, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[188, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[189, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[190, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[191, "module-sparknlp.util"]]}})