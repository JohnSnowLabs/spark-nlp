Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/prompt_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/reader/index", "reference/autosummary/sparknlp/reader/sparknlp_reader/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/prompt_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/reader/index.rst", "reference/autosummary/sparknlp/reader/sparknlp_reader/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.blip_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.auto_gguf_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.prompt_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.sparknlp_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 108, 109, 110, 113, 114, 115, 118, 119, 120, 121, 123, 125, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 166, 167, 168, 170, 171, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 188, 189, 193, 194, 200, 201, 205, 206, 207, 210, 211, 218, 220, 224, 225, 228, 229, 230, 232, 233, 234], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 113, 118, 119, 120, 121, 122, 125, 126, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 168, 170, 173, 174, 182, 183, 184, 185, 194, 198, 207, 210, 211, 214, 215, 216, 218, 225, 227, 229, 230, 232, 233, 234, 235], "quick": [0, 225, 230], "refer": [0, 1, 5, 8, 55, 58, 60, 62, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 93, 94, 95, 97, 98, 99, 105, 122, 125, 126, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 170, 172, 173, 182, 194, 229, 231, 232], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 64, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 85, 88, 89, 91, 93, 97, 99, 100, 102, 107, 108, 109, 113, 114, 118, 119, 120, 123, 125, 128, 133, 136, 138, 145, 158, 159, 166, 167, 170, 173, 176, 182, 183, 193, 195, 198, 200, 215, 216, 220, 225, 229, 234], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 188, 189, 194, 198, 200, 205, 206, 207, 211, 214, 215, 225, 229, 232, 233], "up": [0, 1, 5, 8, 25, 41, 61, 70, 75, 80, 81, 85, 86, 91, 93, 95, 105, 125, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194, 200, 225, 229, 232, 233], "your": [0, 1, 25, 41, 46, 64, 69, 72, 79, 80, 89, 91, 95, 108, 109, 113, 114, 118, 119, 120, 123, 125, 126, 131, 136, 137, 138, 156, 158, 163, 165, 170, 174, 227, 229, 232, 233, 235], "environ": [0, 70, 226], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 76, 80, 95, 105, 145, 146, 170], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 113, 114, 119, 120, 122, 123, 125, 126, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 167, 170, 174, 175, 185, 200], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 105, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 179, 210, 211, 220, 229, 232], "shell": 0, "packag": [0, 71, 72, 78, 138, 207, 226, 227], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 113, 114, 119, 120, 122, 123, 125, 126, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 167, 170, 185, 200], "nlp_2": [0, 200], "12": [0, 71, 97, 98, 99, 105, 110, 112, 118, 131, 156, 168, 181, 199, 200, 210, 218, 220, 228], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 179, 181, 182, 185, 186, 199, 200, 203, 206, 207, 210, 214, 215, 216, 218, 219, 229, 230], "submit": [0, 207, 225], "extern": [0, 105, 108, 113, 114, 120, 156, 162, 184, 198, 215, 216, 218, 219], "jar": [0, 200], "after": [0, 63, 64, 66, 80, 89, 90, 95, 110, 112, 118, 125, 140, 147, 165, 186, 207, 228, 229], "compil": 0, "build": [0, 78, 79, 89, 90, 102, 105, 109, 141, 143, 145, 149, 152, 207, 225], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 198, 199, 200, 206, 207, 211, 215, 218, 219, 220, 225, 226, 228, 229, 230, 232, 233, 234, 235], "built": [0, 25, 41, 140, 182], "top": [0, 5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 58, 60, 61, 71, 105, 125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 182, 194], "apach": [0, 88, 182, 200], "x": [0, 41, 199, 215, 235], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 122, 123, 125, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 167, 170, 173, 174, 175, 182, 183, 186, 194, 207, 210, 211, 219, 225, 226, 228, 229, 230, 231, 232, 233], "you": [0, 14, 15, 20, 33, 45, 51, 64, 66, 67, 69, 70, 75, 77, 79, 81, 88, 89, 91, 102, 110, 121, 125, 144, 146, 149, 174, 176, 181, 183, 200, 207, 211, 214, 218, 220, 225, 227, 229, 230, 233, 234, 235], "need": [0, 5, 7, 8, 10, 14, 64, 66, 70, 75, 79, 81, 88, 89, 96, 100, 102, 105, 110, 113, 119, 120, 123, 128, 131, 134, 137, 138, 141, 145, 148, 149, 156, 158, 159, 166, 167, 171, 179, 181, 183, 207, 211, 215, 216, 218, 225, 227, 229, 230, 233, 235], "java": [0, 107, 154, 187, 188, 196, 202, 203, 206, 211], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 58, 64, 66, 68, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 110, 115, 120, 121, 125, 126, 128, 141, 150, 156, 168, 170, 215, 220], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 64, 66, 67, 70, 71, 72, 73, 76, 78, 79, 82, 84, 85, 87, 89, 92, 93, 94, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 113, 115, 118, 120, 121, 122, 123, 125, 131, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 160, 162, 170, 174, 181, 183, 184, 185, 193, 194, 195, 199, 200, 207, 211, 214, 219, 220, 225, 226, 227, 228, 229, 230, 233, 234, 235], "note": [0, 5, 7, 8, 14, 15, 20, 25, 33, 41, 45, 46, 51, 61, 69, 71, 72, 75, 79, 81, 82, 86, 89, 91, 96, 97, 99, 105, 120, 125, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 181, 200, 234], "sinc": [0, 68, 70, 86, 105, 141, 143, 200, 229, 230, 234], "version": [0, 8, 68, 75, 79, 81, 86, 127, 128, 144, 150, 151, 162, 183, 189, 194, 200, 205, 206, 210, 211, 229, 234], "6": [0, 25, 46, 60, 73, 74, 78, 82, 105, 109, 114, 115, 121, 126, 131, 139, 151, 158, 168, 200, 216, 220, 229], "deprec": [0, 200], "If": [0, 8, 12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 58, 60, 61, 62, 70, 91, 96, 100, 107, 110, 112, 118, 119, 120, 123, 128, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 162, 181, 194, 200, 206, 207, 211, 225, 227, 229], "consid": [0, 67, 96, 102, 105, 125, 138, 144, 146, 156, 158, 159, 161, 165, 200, 211], "stick": [0, 200], "lower": [0, 68, 71, 105, 125, 154, 156, 172, 200], "7": [0, 9, 46, 60, 73, 74, 78, 110, 112, 126, 131, 141, 143, 147, 149, 150, 175, 218, 220, 228], "we": [0, 5, 7, 8, 25, 41, 58, 60, 62, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 93, 94, 95, 97, 98, 99, 105, 119, 120, 123, 125, 134, 138, 139, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 156, 158, 167, 181, 199, 225, 228, 229, 230, 233, 234, 235], "recommend": [0, 61, 72, 82, 99, 125, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153], "4": [0, 5, 8, 72, 73, 74, 75, 78, 81, 82, 84, 85, 86, 88, 96, 113, 119, 121, 125, 126, 131, 138, 139, 141, 145, 148, 150, 152, 162, 168, 216, 220], "It": [0, 8, 12, 14, 15, 18, 20, 24, 25, 27, 29, 31, 33, 36, 41, 43, 45, 46, 47, 49, 51, 52, 57, 58, 60, 61, 67, 68, 70, 73, 74, 76, 78, 79, 80, 85, 89, 90, 95, 97, 98, 100, 105, 115, 137, 139, 140, 146, 149, 151, 154, 156, 158, 159, 165, 175, 181, 211, 228, 233], "have": [0, 5, 14, 15, 20, 25, 33, 41, 45, 46, 51, 69, 70, 71, 76, 79, 84, 89, 90, 96, 105, 113, 115, 118, 119, 120, 121, 125, 131, 133, 134, 140, 141, 143, 144, 148, 149, 150, 151, 159, 168, 186, 202, 229, 230, 233], "basic": [0, 60, 105, 133, 183, 228], "knowledg": [0, 79, 105, 149, 150, 151, 176], "framework": [0, 7, 70, 139, 146, 153], "work": [0, 8, 58, 79, 84, 85, 93, 107, 125, 138, 139, 143, 145, 146, 149, 153, 163, 228, 230, 234], "befor": [0, 68, 70, 96, 110, 112, 139, 153, 154, 158, 166, 170, 188, 206, 225], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 107, 108, 109, 110, 113, 114, 119, 120, 123, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 163, 165, 170, 173, 182, 184, 211, 226, 227, 231, 234], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 61, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 181, 182, 183, 185, 186, 207, 210, 214, 215, 216, 218, 220, 225, 229, 230, 232, 233, 234], "first": [0, 2, 78, 80, 81, 82, 84, 88, 95, 97, 98, 105, 113, 119, 120, 121, 133, 139, 146, 147, 148, 152, 153, 154, 156, 161, 166, 174, 183, 186, 193, 225, 229, 230, 234], "let": [0, 79, 125, 165, 229], "": [0, 1, 11, 14, 15, 17, 20, 21, 24, 26, 29, 30, 33, 35, 38, 42, 45, 48, 51, 56, 58, 60, 61, 62, 68, 70, 71, 75, 76, 78, 79, 80, 81, 85, 88, 89, 90, 95, 97, 98, 100, 105, 113, 120, 123, 125, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 165, 166, 167, 170, 171, 175, 181, 187, 188, 194, 196, 199, 202, 206, 207, 214, 225, 228, 229, 230, 233], "make": [0, 57, 58, 60, 68, 72, 76, 85, 86, 97, 98, 105, 125, 126, 134, 137, 138, 139, 144, 147, 152, 158, 231, 235], "sure": [0, 72, 137, 138], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 10, 12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 55, 58, 60, 61, 63, 64, 66, 69, 71, 72, 73, 74, 78, 80, 82, 84, 90, 95, 96, 97, 98, 99, 105, 109, 110, 112, 113, 114, 115, 118, 119, 120, 122, 125, 126, 127, 128, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 162, 166, 170, 174, 175, 189, 194, 200, 205, 206, 207, 210, 211, 215, 216, 219, 220, 225, 228, 229, 233, 234], "0_292": 0, "creat": [0, 2, 3, 4, 25, 41, 46, 69, 70, 73, 74, 80, 89, 92, 95, 96, 102, 120, 125, 126, 128, 131, 138, 145, 148, 163, 170, 181, 184, 199, 215, 216, 218, 219, 229, 230, 233, 235], "new": [0, 2, 3, 4, 9, 46, 55, 60, 63, 71, 73, 74, 78, 82, 84, 85, 96, 99, 121, 122, 125, 127, 128, 138, 139, 141, 144, 149, 153, 156, 162, 175, 189, 194, 205, 206, 228, 229], "manag": [0, 105, 211, 226], "all": [0, 2, 3, 4, 8, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 47, 49, 51, 52, 60, 61, 67, 68, 71, 73, 74, 76, 87, 91, 92, 93, 96, 99, 100, 103, 107, 110, 120, 123, 125, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 161, 166, 170, 174, 176, 193, 194, 207, 211, 224, 229, 234], "depend": [0, 2, 55, 76, 86, 91, 99, 100, 102, 103, 105, 107, 120, 146, 156, 170, 200], "Then": [0, 25, 41, 119, 120, 145, 148, 186, 207, 229], "sparknlp": [0, 225, 228, 229, 230, 231, 233, 234, 235], "n": [0, 72, 98, 105, 115, 118, 119, 120, 125, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 165, 181, 185, 194, 199, 210], "y": [0, 41, 69], "activ": [0, 12, 14, 15, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 105, 151, 214], "jupyt": [0, 154, 207, 225], "now": [0, 76, 134, 181, 230], "should": [0, 2, 3, 4, 10, 25, 41, 46, 58, 60, 61, 62, 67, 70, 72, 75, 80, 81, 88, 95, 97, 105, 107, 114, 115, 119, 120, 125, 128, 133, 134, 138, 146, 154, 156, 166, 181, 183, 188, 189, 202, 206, 210, 215, 216], "readi": [0, 25, 210, 229], "notebook": [0, 72, 138, 152, 154, 183, 207, 225], "run": [0, 70, 79, 105, 154, 207, 211, 226, 234], "also": [0, 25, 41, 46, 57, 58, 60, 61, 62, 68, 71, 82, 85, 96, 97, 98, 100, 102, 105, 110, 113, 118, 119, 120, 127, 128, 134, 137, 139, 140, 150, 152, 161, 181, 185, 189, 194, 205, 214, 225, 229, 230, 231, 232, 234], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 214, 215, 216, 218, 219, 220, 226], "bin": 0, "A": [0, 5, 7, 46, 55, 58, 70, 71, 89, 90, 96, 100, 105, 108, 109, 113, 114, 115, 122, 123, 125, 126, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 166, 167, 194, 207, 214, 218, 227, 229, 235], "retriev": [0, 75, 81, 84, 92, 96, 108, 154, 158, 159, 160, 207, 210, 225, 229, 230], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 179, 181, 182, 184, 185, 186, 199, 207, 210, 214, 215, 216, 218, 219, 220, 225, 228, 229, 232, 233, 234, 235], "manual": [0, 228], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 109, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 200, 214, 215, 216, 218, 219], "becaus": [0, 125, 136, 154, 188, 206], "other": [0, 5, 9, 41, 58, 61, 69, 76, 87, 88, 91, 92, 93, 94, 102, 105, 123, 136, 139, 141, 145, 152, 153, 156, 163, 165, 174, 175, 229], "configur": [0, 58, 70, 91, 167, 200, 214], "includ": [0, 60, 68, 70, 73, 74, 80, 82, 93, 95, 97, 98, 99, 102, 105, 110, 118, 119, 120, 125, 139, 141, 143, 150, 151, 152, 153, 154, 156, 175, 207, 219, 226, 228, 229, 230, 235], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 71, 73, 76, 78, 79, 85, 89, 97, 99, 100, 102, 105, 110, 113, 134, 144, 146, 152, 156, 161, 170, 184, 186, 229, 230], "builder": [0, 162, 200], "appnam": [0, 200], "master": [0, 200], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 105, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 181, 200, 210, 233], "config": [0, 200, 226], "driver": [0, 200], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 71, 72, 82, 96, 138, 200], "16g": [0, 200], "serial": [0, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 100, 107, 120, 127, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 200], "org": [0, 118, 119, 120, 121, 139, 170, 181, 199, 200, 210, 214, 215, 226, 235], "kryoseri": [0, 200], "buffer": [0, 74, 96, 200], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 105, 154, 159, 200], "2000m": [0, 200], "maxresults": [0, 200], "0": [0, 5, 7, 8, 9, 10, 25, 41, 46, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 107, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 162, 167, 168, 170, 173, 174, 175, 181, 182, 185, 186, 189, 194, 199, 200, 203, 205, 206, 207, 210, 211, 216, 218, 219, 220, 225, 228, 229, 234, 235], "getorcr": [0, 200], "main": [1, 72, 100, 138, 154, 167, 228, 232, 235], "page": [1, 68, 141, 210, 224, 232, 234], "github": [1, 78, 84, 88, 89, 93, 146, 152, 210], "issu": [1, 93, 170], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 199, 207, 210, 211, 214, 215, 216, 218, 219, 220, 225, 228, 229, 230, 232, 233, 234, 235], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 113, 114, 118, 119, 120, 122, 123, 125, 126, 128, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 163, 165, 167, 170, 183, 188, 194, 200, 206, 207, 210, 211, 225, 226, 228, 232, 234, 235], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 107, 108, 119, 120, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 170, 211], "welcom": [1, 5, 7, 8], "python": [1, 107, 200], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 223, 225, 228, 229], "inform": [1, 64, 66, 84, 86, 96, 97, 105, 110, 118, 138, 139, 156, 173, 182, 219, 225, 226, 227, 228, 229, 235], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 122, 125, 126, 128, 131, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 166, 167, 168, 170, 172, 173, 174, 175, 181, 182, 183, 184, 185, 186, 193, 194, 199, 200, 207, 210, 211, 214, 215, 216, 218, 219, 226, 227, 228, 229, 230, 232], "librari": [1, 57, 58, 60, 61, 62, 72, 107, 138, 172, 173, 174, 182, 186, 234], "get": [1, 8, 25, 41, 72, 105, 117, 131, 138, 154, 156, 162, 167, 170, 171, 173, 174, 175, 179, 181, 182, 189, 194, 205, 225, 229, 234, 235], "start": [1, 5, 11, 17, 21, 26, 30, 35, 38, 42, 48, 85, 102, 105, 119, 120, 134, 138, 172, 200, 207, 225, 228, 230, 233, 234], "cheat": 1, "sheet": [1, 68], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 62, 63, 64, 66, 70, 71, 74, 75, 78, 81, 82, 88, 94, 97, 98, 105, 120, 123, 137, 156, 168, 170, 172, 174, 186, 228, 229, 230], "instal": [1, 207, 227], "session": [1, 200, 214, 215, 216, 218, 219], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 184, 185, 186, 188, 194, 199, 200, 203, 206, 207, 210, 211, 214, 215, 216, 218, 219, 220, 225, 228, 229, 230, 233, 234, 235], "user": [1, 118, 119, 125, 126, 138, 140, 144, 147, 167, 183, 184, 200, 207, 214, 225], "guid": [1, 226], "annot": [1, 3, 4, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 194, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 212, 218, 220, 225, 226, 231, 232, 233, 234, 235], "own": [1, 25, 41, 46, 64, 70, 80, 95, 108, 109, 113, 114, 119, 120, 123, 131, 136, 137, 156, 158, 163, 165, 170, 232, 233, 235], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 179, 181, 182, 184, 185, 186, 200, 206, 207, 209, 210, 211, 212, 226, 228, 229, 232], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 107, 108, 109, 110, 113, 114, 119, 120, 121, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 167, 170, 174, 175, 181, 199, 200, 207, 225, 228, 232], "dataset": [1, 25, 41, 46, 64, 66, 76, 80, 81, 84, 85, 86, 89, 90, 93, 95, 96, 105, 107, 119, 120, 128, 134, 141, 144, 145, 148, 150, 152, 156, 170, 206, 210, 215, 216, 218, 219, 232], "train": [1, 5, 8, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 57, 58, 60, 62, 64, 66, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 94, 95, 97, 98, 99, 105, 107, 108, 109, 113, 114, 117, 119, 120, 123, 127, 128, 131, 134, 136, 137, 139, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 163, 165, 170, 172, 181, 200, 207, 210, 225, 229, 230, 232, 233], "light": [1, 5, 79, 99, 105, 181, 232, 234], "helper": [1, 131, 170, 176, 199, 218, 219, 220, 232, 235], "function": [1, 82, 93, 96, 139, 153, 174, 211, 224, 232], "third": [1, 133, 161, 208, 215], "parti": [1, 208], "project": [1, 105, 138, 146, 152, 154, 207, 226], "log": [1, 25, 41, 46, 120, 125, 128, 134, 141, 200], "api": [1, 125, 126, 225, 229, 232], "modul": [1, 34, 65, 83, 101, 103, 104, 106, 111, 116, 124, 129, 130, 132, 135, 142, 157, 164, 169, 180, 192, 204, 209, 213, 217], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 179, 181, 182, 184, 185, 186, 199, 207, 210, 214, 215, 216, 217, 218, 219, 226, 228, 229, 233, 234, 235], "format": [2, 3, 4, 8, 56, 57, 58, 60, 61, 62, 64, 66, 100, 102, 108, 109, 110, 112, 113, 114, 119, 120, 123, 128, 136, 139, 150, 153, 158, 159, 167, 170, 171, 173, 175, 176, 179, 182, 185, 215, 216, 218, 219, 220, 226, 235], "annotatortyp": [2, 3, 4, 77, 115, 172, 173, 179, 182, 228], "begin": [2, 55, 118, 141, 165, 167, 172, 173, 182, 199, 228], "end": [2, 11, 17, 21, 26, 30, 35, 38, 42, 48, 55, 120, 125, 126, 134, 138, 139, 140, 153, 165, 167, 170, 173, 182, 183, 199, 207, 215, 225, 228, 230], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 185, 186, 199, 200, 207, 210, 215, 216, 220, 225, 226, 228, 229, 230, 233, 234], "metadata": [2, 3, 4, 47, 55, 63, 72, 105, 114, 119, 120, 122, 131, 138, 173, 175, 179, 181, 182, 199, 207, 211, 228, 230], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 102, 103, 119, 120, 121, 126, 138, 140, 154, 173, 174, 175, 181, 182, 194, 199, 200, 206, 210, 228], "repres": [2, 3, 4, 64, 66, 71, 78, 84, 87, 92, 93, 99, 100, 102, 109, 114, 115, 125, 126, 140, 147, 167, 207, 210, 229], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 189, 194, 199, 200, 207, 218, 225, 228, 229, 230], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 126, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 184, 185, 186, 192, 195, 199, 200, 202, 203, 204, 207, 210, 211, 214, 215, 216, 218, 219, 220, 224, 226, 227, 228, 229, 231, 232, 233, 235], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 107, 108, 109, 113, 114, 119, 120, 121, 122, 123, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 167, 170, 172, 173, 174, 175, 179, 180, 181, 182, 184, 185, 186, 192, 200, 204, 207, 210, 211, 215, 216, 218, 219, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235], "detail": [2, 3, 4, 8, 61, 97, 98, 105, 122, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 189, 194, 198, 199, 200, 205, 206, 207, 210, 211, 214, 215, 216, 218, 219], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 189, 194, 198, 199, 200, 205, 207, 210, 211, 214, 215, 216, 218, 219], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 166, 167, 170, 173, 175, 181, 182, 183, 185, 194, 199, 200, 207, 210, 211, 214, 215, 216, 218, 219, 220, 225, 228, 229, 230, 232, 233, 235], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 199, 201, 210, 213, 214, 218, 228, 229, 232], "possibl": [2, 3, 4, 77, 79, 97, 98, 100, 133, 156, 159, 173, 182, 183, 193, 195, 207, 225], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 74, 77, 82, 84, 87, 92, 93, 94, 97, 100, 102, 105, 107, 108, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 161, 162, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 189, 193, 194, 195, 205, 207, 225, 235], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 61, 64, 66, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 108, 109, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 128, 131, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 168, 170, 172, 174, 181, 184, 186, 194, 200, 210, 215, 219, 220, 229, 233, 234], "wordpiec": 2, "word_embed": [2, 71, 73, 76, 77, 78, 79, 82, 83, 85, 89, 91, 95, 97, 99, 103, 119, 120, 128], "sentence_embed": [2, 25, 41, 46, 72, 74, 75, 80, 81, 83, 84, 86, 87, 88, 90, 92, 93, 94, 98, 103, 126, 154, 207, 225, 229], "categori": [2, 12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 57, 58, 60, 62, 207, 225, 229], "date": [2, 63, 110, 112, 113], "entiti": [2, 9, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 55, 60, 63, 76, 100, 101, 102, 109, 114, 116, 117, 118, 119, 120, 121, 122, 163, 168, 175, 181, 210], "sentiment": [2, 25, 41, 46, 82, 99, 103, 153, 200, 229, 230], "po": [2, 10, 12, 15, 18, 20, 22, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52, 64, 66, 102, 103, 119, 120, 165, 170, 181, 199, 200, 210, 215, 217, 228, 232, 233, 234], "chunk": [2, 9, 10, 11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 63, 67, 69, 72, 77, 80, 95, 100, 105, 109, 113, 114, 115, 118, 138, 163, 168, 172, 175, 199, 207, 219, 225, 235], "named_ent": [2, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 102, 118, 119, 120, 121, 122, 128, 181, 210], "negex": 2, "labeled_depend": [2, 66], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 172, 182, 183, 186, 194, 211, 229], "keyword": [2, 104, 105, 136], "dummi": [2, 68], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 102, 105, 107, 110, 115, 117, 119, 120, 123, 125, 127, 128, 131, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 162, 166, 167, 170, 194, 200, 207, 215], "index": [2, 87, 92, 93, 105, 109, 166, 200, 215], "charact": [2, 16, 68, 82, 85, 100, 107, 113, 115, 123, 133, 134, 156, 158, 159, 166, 167, 170, 175], "under": [2, 79, 86, 88, 99, 105, 152, 200], "last": [2, 72, 87, 92, 93, 110, 112, 138, 163, 220, 233], "string": [2, 8, 16, 25, 41, 46, 55, 64, 68, 100, 113, 115, 121, 123, 134, 138, 153, 159, 161, 165, 172, 173, 175, 179, 181, 182, 183, 233], "dict": [2, 3, 4, 64, 66, 100, 108, 109, 113, 114, 119, 121, 122, 123, 125, 128, 136, 138, 156, 158, 159, 167, 181, 198, 200, 206, 207, 210, 214], "associ": [2, 3, 4, 41, 94, 100, 113, 118, 125, 207], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 60, 61, 62, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 94, 97, 98, 99, 100, 102, 105, 107, 110, 113, 117, 118, 120, 121, 122, 123, 125, 127, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 161, 162, 165, 167, 174, 175, 181, 182, 189, 199, 206, 207, 210, 211, 214, 220, 224, 229], "vector": [2, 41, 73, 74, 75, 77, 78, 80, 81, 82, 94, 95, 96, 154, 174, 175, 228], "where": [2, 41, 78, 82, 100, 105, 108, 109, 113, 114, 115, 125, 131, 134, 136, 139, 141, 153, 154, 158, 159, 170, 172, 218], "applic": [2, 62, 93, 105, 139, 143, 144, 147, 149, 150, 151, 193, 207, 208, 225, 227], "copi": [2, 3, 4, 211], "differ": [2, 3, 4, 58, 60, 64, 66, 82, 84, 89, 90, 97, 99, 105, 110, 133, 134, 140, 148, 151, 156, 167, 170, 181, 207, 213, 233], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 107, 108, 109, 114, 115, 117, 119, 120, 122, 125, 131, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 165, 167, 170, 172, 181, 194, 198, 199, 200, 201, 206, 210, 211, 214, 215, 216, 218, 219], "newli": [2, 3, 4, 93], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 211, 229], "datatyp": [2, 199], "structtyp": 2, "schema": [2, 118, 207, 225], "look": [2, 70, 120, 149, 150, 151, 158, 228], "like": [2, 5, 11, 17, 21, 25, 26, 30, 35, 38, 42, 48, 55, 61, 68, 71, 75, 77, 79, 85, 91, 99, 102, 105, 113, 118, 125, 134, 137, 138, 140, 141, 145, 148, 156, 167, 170, 207, 225, 227, 228], "struct": [2, 173, 179, 182], "containsnul": [2, 41, 171, 173, 179, 182], "true": [2, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 67, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 109, 110, 112, 114, 118, 120, 123, 133, 134, 138, 145, 154, 156, 158, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 182, 183, 185, 207, 211, 215, 216, 219, 220, 225, 229, 230], "nullabl": [2, 41, 171, 173, 179, 182], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 181, 182, 185, 186, 199, 200, 207, 210, 214, 215, 216, 218, 220, 225, 228, 229, 230, 235], "integ": [2, 58, 60, 61, 62, 87, 92, 93, 173, 179, 182], "map": [2, 10, 41, 72, 75, 96, 100, 125, 127, 128, 131, 138, 156, 173, 179, 182, 189, 194, 199, 205, 206, 228], "kei": [2, 5, 58, 64, 66, 89, 90, 97, 98, 108, 122, 148, 173, 179, 181, 182, 207, 210, 225], "valuecontainsnul": [2, 173, 179, 182], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 107, 108, 115, 120, 127, 131, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 163, 165, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 199, 230, 233], "element": [2, 41, 115, 125, 154, 171, 173, 179, 182, 183], "float": [2, 3, 5, 7, 8, 25, 41, 46, 58, 61, 63, 72, 107, 119, 120, 122, 125, 127, 128, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 170, 171, 173, 174, 181, 182, 194], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 109, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 181, 199, 206, 210, 214, 215, 216, 218, 219], "arraytyp": [2, 172, 199], "fromrow": 2, "row": [2, 47, 67, 69, 96, 133, 134, 137, 173, 182, 183, 185, 199, 215], "column": [2, 9, 25, 41, 46, 68, 96, 108, 117, 119, 120, 127, 128, 131, 137, 154, 162, 167, 170, 171, 172, 173, 174, 175, 176, 179, 182, 183, 186, 189, 199, 210, 215, 218, 229], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 185, 186, 194, 199, 202, 206, 207, 210, 225, 228, 229, 230, 233, 234, 235], "an": [2, 5, 7, 8, 10, 25, 41, 46, 47, 57, 58, 60, 61, 62, 64, 67, 68, 70, 76, 78, 82, 84, 85, 86, 87, 88, 92, 93, 99, 100, 105, 107, 109, 110, 112, 113, 114, 115, 119, 120, 122, 125, 127, 128, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 163, 167, 170, 172, 173, 174, 175, 176, 179, 181, 182, 183, 186, 189, 194, 198, 199, 201, 205, 206, 207, 214, 215, 216, 218, 219, 224, 226, 228, 229, 230, 232, 233], "annotationaudio": 3, "audio": [3, 171, 207], "alreadi": [3, 102, 105, 119, 120, 121, 167, 168, 181, 210, 233], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 62, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 102, 105, 107, 118, 119, 120, 128, 134, 138, 139, 141, 147, 150, 153, 154, 170, 171, 172, 173, 174, 175, 179, 182, 184, 186, 207, 214, 225, 228, 229, 230, 231], "file": [3, 5, 7, 25, 41, 46, 56, 64, 66, 68, 94, 96, 100, 108, 109, 113, 114, 119, 120, 123, 128, 134, 136, 156, 158, 159, 162, 167, 171, 185, 195, 200, 207, 213, 214, 215, 216, 218, 219, 225, 235], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 107, 120, 127, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 207], "annotationimag": [4, 181, 210], "origin": [4, 56, 57, 58, 60, 61, 62, 71, 72, 80, 85, 89, 95, 118, 134, 138, 139, 179], "height": [4, 58, 60, 61, 62, 179], "width": [4, 58, 60, 61, 62, 72, 138, 179], "nchannel": [4, 179], "mode": [4, 25, 41, 46, 120, 128, 158, 173, 179, 182, 207], "imag": [4, 56, 57, 58, 60, 61, 62, 150, 179, 181, 210], "uri": [4, 211], "pixel": [4, 60], "number": [4, 8, 14, 15, 20, 24, 25, 29, 33, 41, 45, 46, 51, 61, 64, 66, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 115, 117, 119, 120, 125, 127, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 162, 170, 194, 215, 216], "color": 4, "channel": [4, 58, 60, 61, 62, 156], "opencv": 4, "concern": [5, 7, 8, 12, 57, 58, 60, 61, 62, 63, 71], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 113, 114, 119, 120, 122, 123, 125, 126, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 167, 170, 185, 187, 188, 196, 202], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 113, 114, 119, 120, 122, 123, 125, 126, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 167, 170, 178, 185, 188, 206], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 113, 114, 119, 120, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 188, 200, 206, 207, 210, 211, 214, 230], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 55, 67, 71, 99, 118, 119, 120, 181, 199, 210, 229], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 52, 53, 57, 58, 60, 62, 71, 75, 81, 84, 94, 137, 139, 153, 229], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 15, 18, 19, 20, 25, 27, 28, 29, 31, 32, 33, 36, 37, 40, 43, 44, 45, 46, 49, 50, 51, 52, 53, 57, 58, 60, 67, 68, 69, 76, 78, 79, 85, 89, 90, 96, 97, 98, 105, 125, 126, 137, 139, 141, 143, 145, 147, 149, 152, 156, 210, 229, 230], "propos": [5, 7, 58, 60, 71, 76, 78, 79, 86, 89, 90, 93, 97, 98, 99, 148], "self": [5, 7, 60, 71, 85, 146, 194], "supervis": [5, 7, 8, 71, 81, 82, 88, 94, 105, 139, 141, 145, 150], "speech": [5, 7, 8, 10, 76, 130, 131, 170, 218, 235], "represent": [5, 7, 60, 71, 73, 74, 79, 80, 81, 82, 95, 96, 97, 98, 99, 118, 153, 154, 185, 198], "learn": [5, 7, 25, 41, 46, 63, 71, 79, 80, 82, 89, 90, 94, 95, 97, 98, 99, 105, 119, 120, 127, 134, 138, 139, 140, 141, 143, 144, 149, 150, 151, 153, 156, 207, 227], "mask": [5, 60, 78, 86, 97, 98, 99, 139, 166], "predict": [5, 8, 57, 60, 78, 86, 120, 138, 141, 153, 207, 225], "hidden": [5, 11, 13, 17, 19, 21, 23, 26, 28, 30, 32, 35, 37, 38, 40, 42, 44, 48, 50, 53, 71, 82, 99, 162], "unit": [5, 141, 143, 162], "wei": [5, 60], "ning": 5, "hsu": 5, "benjamin": [5, 76], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 15, 20, 33, 45, 47, 51, 67, 69, 76, 86, 102, 114, 127, 128, 148, 158, 161, 167, 184, 189, 194, 205, 215, 228, 229, 233, 234], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 60, 61, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 193, 194, 195, 198, 199, 207, 215, 216, 218, 219, 225, 228, 229, 230, 234, 235], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 108, 109, 110, 112, 113, 114, 119, 120, 123, 127, 128, 131, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 170, 181, 189, 194, 199, 201, 205, 210, 230], "pre": [5, 7, 8, 25, 41, 46, 57, 62, 73, 74, 78, 79, 81, 82, 86, 88, 94, 120, 128, 139, 153, 173, 175, 182, 186, 216, 229], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 105, 109, 110, 112, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 181, 185, 189, 200, 228, 229, 230], "support": [5, 7, 8, 25, 41, 69, 71, 75, 81, 85, 86, 105, 120, 123, 134, 138, 145, 146, 148, 150, 151, 152, 161, 183, 185, 200, 214, 226], "appl": [5, 7, 74, 90, 98, 200], "silicon": [5, 7, 200], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 71, 85, 93, 139], "instruct": [5, 7, 84, 140, 144, 150], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 119, 120, 122, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 170, 203], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 119, 120, 122, 125, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 170, 193, 195, 202, 203, 207, 228, 229], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 182, 183, 185, 186, 189, 207, 225, 229, 230], "audio_assembl": [5, 7, 8, 180, 200], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 182, 183, 185, 186, 189, 207, 225, 229, 230], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 165, 166, 167, 170, 172, 173, 174, 175, 176, 181, 182, 185, 198, 199, 200, 207, 210, 211, 215, 216, 218, 219, 229], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 114, 116, 117, 119, 120, 122, 127, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 163, 167, 170, 171, 172, 173, 174, 175, 176, 179, 182, 183, 185, 186, 189, 199, 205, 207, 210, 211, 215, 218, 225, 229], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 103, 105, 107, 108, 110, 113, 119, 120, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 170, 202, 210, 211, 225, 232], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 167, 170, 173, 174, 175, 176, 182, 183, 186, 194, 207, 210, 211, 219, 225, 226, 227, 232, 234, 235], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 71, 72, 73, 76, 78, 79, 85, 89, 93, 97, 99, 105, 110, 113, 131, 133, 138, 139, 141, 153, 170, 176, 181, 184, 207, 225, 233], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 82, 84, 85, 87, 89, 91, 92, 93, 94, 95, 97, 99, 102, 105, 110, 112, 113, 120, 122, 123, 125, 126, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 166, 170, 174, 181, 199, 211, 215, 216, 229, 230], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 71, 73, 76, 78, 79, 85, 89, 97, 99, 120, 174, 211], "5669": [5, 7, 8, 57, 58, 60, 61, 62, 76], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 68, 76, 79, 81, 82, 84, 91, 97, 98, 102, 105, 110, 115, 118, 122, 125, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 166, 167, 173, 174, 175, 182, 183, 186, 194, 207, 210, 219, 225, 226, 227, 229, 232, 235], "extend": [5, 7, 8, 10, 25, 41, 46, 55, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 82, 89, 91, 94, 96, 97, 99, 105, 107, 108, 110, 112, 113, 114, 115, 119, 120, 122, 123, 128, 131, 133, 134, 136, 137, 138, 139, 146, 153, 154, 156, 158, 160, 161, 165, 167, 170, 173, 174, 175, 182, 183, 186, 210], "hubertforctctestspec": 5, "paper": [5, 8, 58, 60, 61, 62, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 93, 94, 95, 97, 98, 99, 105, 134, 137, 139, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 170, 219, 235], "abstract": [5, 8, 58, 60, 62, 71, 73, 74, 76, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 93, 94, 97, 98, 99, 105, 139, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 162, 219, 235], "approach": [5, 8, 58, 60, 89, 90, 93, 99, 105, 117, 119, 120, 122, 134, 136, 139, 141, 143, 144, 147, 149, 153, 156, 158, 159, 187, 232], "challeng": [5, 41, 60, 79, 82, 84, 89, 90, 93, 105, 147, 148, 149], "three": [5, 156, 168], "uniqu": [5, 125, 126, 139], "problem": [5, 14, 41, 71, 82, 86, 93, 139, 153, 156, 170], "multipl": [5, 8, 16, 41, 62, 76, 100, 105, 110, 133, 139, 144, 148, 151, 152, 154, 167, 199, 207, 215], "sound": [5, 67], "each": [5, 7, 14, 15, 20, 24, 25, 29, 33, 41, 45, 46, 51, 58, 60, 61, 62, 67, 75, 78, 80, 81, 86, 88, 91, 95, 96, 100, 102, 105, 108, 109, 110, 113, 114, 115, 117, 119, 120, 122, 123, 125, 126, 128, 131, 133, 134, 136, 139, 151, 154, 156, 158, 159, 166, 167, 170, 173, 182, 193, 199, 206, 218, 230], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 189, 199, 206, 210, 214, 215, 216, 218, 219, 229, 230, 233, 235], "utter": 5, "lexicon": 5, "dure": [5, 25, 41, 46, 57, 72, 79, 84, 119, 120, 128, 133, 138, 154, 156, 200, 207, 225], "phase": [5, 79, 139], "variabl": [5, 80, 95], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 61, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 115, 123, 125, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 166, 167, 194], "explicit": [5, 70, 133, 141], "segment": [5, 55, 58, 60, 79, 89, 169, 170], "deal": [5, 181, 233], "bert": [5, 12, 16, 17, 18, 19, 20, 22, 24, 27, 31, 32, 36, 39, 43, 47, 49, 52, 61, 71, 73, 74, 78, 79, 85, 86, 89, 90, 97, 98, 99, 120, 121, 122, 139, 153], "util": [5, 77, 119, 122, 133, 134, 147, 159, 184, 191, 192, 195, 197, 200, 201, 205, 209], "offlin": [5, 207], "cluster": [5, 75, 81, 84, 94, 200], "step": [5, 25, 41, 46, 80, 95, 120, 128, 207, 225, 229], "align": [5, 150, 151], "target": [5, 94, 138, 139, 145, 146, 148, 167, 172, 181, 210], "label": [5, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 57, 58, 60, 62, 64, 66, 81, 93, 100, 107, 117, 118, 119, 120, 122, 127, 128, 136, 137, 153, 156, 162, 170, 207, 215, 225, 229], "loss": [5, 71, 79, 84, 120, 153, 225], "ingredi": 5, "our": [5, 71, 76, 79, 80, 81, 82, 84, 85, 89, 90, 94, 95, 97, 98, 105, 134, 139, 141, 143, 144, 145, 148, 149, 150, 152, 153, 199, 210, 234], "appli": [5, 9, 25, 41, 46, 58, 62, 67, 68, 100, 102, 120, 121, 128, 133, 138, 153, 156, 158, 175, 183, 199, 215], "over": [5, 67, 79, 86, 97, 98, 99, 139, 143, 147, 148, 158, 167, 199, 207, 225], "region": 5, "onli": [5, 8, 58, 60, 61, 62, 64, 66, 67, 68, 75, 81, 82, 86, 94, 99, 110, 113, 123, 125, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 165, 170, 184, 193, 194, 215], "forc": [5, 72, 138], "combin": [5, 14, 15, 20, 24, 29, 33, 45, 51, 61, 79, 85, 96, 105, 139, 145, 148, 153, 156, 158, 170], "acoust": 5, "continu": [5, 118, 138, 141, 154, 176, 225], "reli": [5, 64, 66, 99, 105], "primarili": [5, 93], "consist": [5, 56, 71, 78, 85, 113, 131, 137, 149, 170, 185, 218], "unsupervis": [5, 97, 98, 99, 105, 139, 141], "rather": [5, 58, 70, 72, 138], "than": [5, 41, 46, 58, 70, 72, 79, 80, 84, 95, 97, 98, 99, 105, 107, 115, 119, 125, 138, 140, 141, 143, 144, 145, 146, 149, 150, 152, 158, 159, 229], "intrins": [5, 58], "qualiti": [5, 60, 92, 93, 141, 144, 145, 148, 150, 152], "assign": [5, 41, 100, 121, 136], "simpl": [5, 73, 74, 100, 141, 230], "k": [5, 8, 61, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 174, 194], "mean": [5, 8, 10, 14, 15, 20, 24, 29, 33, 41, 45, 51, 58, 60, 61, 62, 72, 87, 92, 93, 97, 105, 107, 110, 112, 125, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 166, 174, 181, 183, 194, 229, 230, 233], "teacher": 5, "100": [5, 25, 41, 47, 62, 80, 95, 97, 105, 125, 134, 145, 185], "two": [5, 41, 60, 64, 66, 71, 78, 80, 94, 95, 96, 97, 98, 102, 150, 168, 183, 214, 215, 229], "iter": [5, 64, 66, 71, 80, 95, 131, 144, 170, 207, 225], "either": [5, 8, 25, 46, 62, 66, 76, 77, 91, 100, 105, 107, 113, 136, 137, 153, 170, 172, 181, 182, 185, 210, 230], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 58, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 109, 110, 111, 112, 113, 114, 123, 131, 133, 139, 141, 144, 152, 167, 170, 172, 183, 193, 228], "improv": [5, 71, 73, 74, 76, 78, 82, 84, 89, 90, 93, 97, 98, 119, 120, 141, 143, 144, 148, 149, 150, 151, 153, 154, 234], "upon": [5, 69, 105, 138, 152], "state": [5, 11, 13, 17, 19, 21, 23, 25, 26, 28, 30, 32, 35, 37, 38, 40, 41, 42, 44, 46, 48, 50, 53, 58, 60, 62, 71, 73, 74, 76, 81, 82, 84, 85, 86, 89, 90, 93, 99, 105, 120, 139, 141, 143, 148, 149, 150, 153, 182, 226, 229], "art": [5, 25, 41, 58, 60, 62, 71, 73, 74, 76, 81, 82, 84, 85, 86, 89, 90, 93, 99, 105, 120, 139, 141, 148, 149, 150, 153, 182], "wav2vec": [5, 7], "perform": [5, 58, 60, 62, 68, 71, 76, 78, 79, 81, 82, 84, 88, 89, 90, 92, 94, 96, 97, 98, 99, 120, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 79, 133, 144], "000h": 5, "benchmark": [5, 8, 62, 71, 78, 79, 81, 82, 97, 98, 139, 140, 143, 144, 147, 148, 149, 150, 152, 153], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 55, 73, 74, 79, 81, 86, 122, 139, 143, 144, 149, 150, 153, 220], "tune": [5, 8, 55, 73, 74, 79, 81, 86, 122, 139, 143, 144, 149, 150, 153], "subset": [5, 148], "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 182, 185, 186, 199, 211, 214, 215, 216, 218, 219, 220, 225, 228, 229, 230, 234], "19": [5, 63, 75, 81, 88, 115, 218, 220], "13": [5, 9, 10, 55, 97, 98, 102, 131, 149, 152, 175, 220], "rel": [5, 76, 78, 97, 110, 112, 119, 140, 148, 156, 228], "wer": 5, "reduct": [5, 71, 158], "dev": [5, 60, 71, 82, 94], "test": [5, 25, 41, 46, 57, 58, 60, 61, 62, 64, 66, 70, 73, 74, 94, 96, 108, 109, 113, 114, 119, 120, 128, 131, 141, 143, 149, 150, 158, 159, 163, 170, 215, 216, 218, 219, 220, 229, 235], "evalu": [5, 25, 41, 46, 76, 81, 84, 85, 93, 97, 98, 128, 139, 143, 145, 148, 149, 152, 189, 207], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 120, 139, 146, 156], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 102, 105, 120, 127, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 194, 228, 233, 234], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 61, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 120, 127, 138, 139, 146, 156], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 187, 188, 189, 192, 196, 200, 202, 206, 207, 225, 229, 230, 233], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 179, 181, 182, 184, 185, 186, 207, 225, 229, 233], "audioassembl": [5, 7, 8, 171], "audio_cont": [5, 7, 8, 171], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 174, 185, 186, 229, 230], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 182, 185, 186, 199, 207, 225, 228, 229, 230, 234], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 179, 182, 185, 186, 199, 228, 229, 230, 234], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 172, 174, 181, 184, 185, 186, 206, 207, 225, 229, 230, 233], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 63, 72, 77, 79, 96, 102, 105, 107, 119, 120, 122, 125, 126, 137, 138, 139, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 165, 170, 171, 173, 175, 176, 179, 182, 185, 186, 199, 207, 225, 230], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 68, 72, 96, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 175, 176, 182, 185, 186, 199, 214, 218, 228, 229, 230], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 68], "apostl": [5, 7, 8], "OF": [5, 7, 71], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 215, 235], "hi": [5, 7, 8, 69, 122, 134, 145], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 94, 97, 98, 99, 107, 120, 127, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156], "b": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 94, 97, 98, 99, 107, 109, 114, 118, 119, 120, 121, 122, 127, 133, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 170, 181, 199, 210, 215, 219, 235], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 107, 120, 127, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 105, 107, 120, 127, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 120, 128, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 159, 162, 211, 215], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 120, 128, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 200, 207, 225, 229], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 210, 211, 229, 234], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 99, 102, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 210, 211, 216, 229, 234, 235], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 210, 211], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 107, 108, 109, 114, 119, 120, 121, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 200, 210, 211, 228, 229, 232, 233], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 107, 108, 109, 113, 114, 119, 120, 122, 123, 128, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 167, 170, 171, 173, 177, 178, 179, 181, 182, 198, 199, 200, 206, 207, 210, 211, 214, 215, 216, 218, 219, 229], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 210, 211], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 108, 109, 113, 114, 119, 120, 122, 123, 128, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 163, 167, 170, 184, 195, 198, 209, 211, 215, 216, 218, 219, 220, 229, 235], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 210, 226], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 119, 120, 122, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 167, 170, 172, 194, 207], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 163], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 70, 102, 105, 122, 146, 158, 228, 229], "recognit": [8, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 58, 62, 76, 116, 119, 120, 122], "asr": 8, "system": [8, 72, 105, 138, 139, 141, 144, 145, 148, 183], "680": 8, "000": [8, 47, 105, 141, 148, 170, 185], "hour": [8, 69, 110, 112], "multilingu": [8, 97, 98, 145, 148, 151, 170], "multitask": [8, 84, 141], "collect": [8, 93, 105, 143, 149, 207, 225], "web": [8, 55, 68, 76, 141, 150, 207, 225], "well": [8, 56, 62, 64, 66, 67, 81, 94, 97, 98, 105, 125, 139, 152, 185], "translat": [8, 139, 141, 145, 146, 148, 153, 170], "those": [8, 76, 102, 121, 229, 230], "english": [8, 46, 76, 88, 105, 145, 147, 148, 158, 161, 170, 211], "moment": [8, 183], "greedi": [8, 61, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "search": [8, 61, 75, 110, 139, 144, 145, 148, 154, 158, 194], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 58, 60, 62, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 88, 93, 94, 97, 98, 99, 105, 122, 139, 140, 141, 146, 147, 148, 152, 153, 184, 194], "setlanguag": 8, "settask": [8, 139, 141, 153, 194], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 84, 150], "via": [8, 12, 14, 15, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 94, 179, 200], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 58, 60, 61, 62, 67, 69, 71, 72, 78, 79, 81, 82, 86, 93, 97, 98, 99, 105, 107, 109, 114, 120, 138, 139, 140, 141, 143, 144, 145, 149, 151, 152, 183], "scale": [8, 58, 60, 61, 62, 71, 72, 79, 81, 85, 86, 97, 98, 138, 139, 140, 141, 143, 144, 145, 148, 149, 150, 153], "weak": [8, 81], "studi": [8, 79, 89, 90, 139, 153], "capabl": [8, 57, 60, 79, 99, 141, 144, 147, 150], "simpli": [8, 68, 84, 230], "amount": [8, 62, 94, 105, 114, 138, 141, 151, 170, 181, 233], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 15, 18, 20, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52, 58, 60, 61, 62, 67, 68, 70, 71, 72, 81, 102, 110, 112, 115, 120, 125, 138, 139, 141, 145, 149, 150, 153, 156, 158, 161, 165, 170, 181, 215, 229, 230, 233], "gener": [8, 25, 41, 58, 60, 61, 71, 72, 75, 77, 79, 81, 84, 85, 88, 91, 93, 99, 102, 105, 119, 120, 122, 125, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 175, 176, 183, 194, 207, 225, 228, 229, 230], "standard": [8, 58, 60, 61, 62, 68, 85, 110, 112, 139, 148, 158, 159, 167], "often": [8, 71, 89, 90, 99], "competit": [8, 97, 98, 105, 145], "prior": [8, 58, 79, 84, 85, 125, 156], "fulli": [8, 88, 210], "zero": [8, 57, 81, 96, 122, 141], "shot": [8, 57, 81, 122, 141], "transfer": [8, 62, 79, 81, 94, 97, 98, 139, 141, 153], "without": [8, 57, 73, 74, 81, 84, 97, 98, 105, 141, 147, 170], "ani": [8, 14, 15, 20, 24, 29, 33, 45, 51, 57, 70, 75, 80, 81, 84, 94, 95, 100, 105, 120, 141, 145, 153, 156, 174, 175, 211, 226, 229, 230, 235], "compar": [8, 60, 62, 71, 78, 79, 82, 84, 86, 99, 105, 134, 139, 140, 143, 152, 153, 156, 207, 225], "human": [8, 78, 105, 140, 143, 144, 148, 149], "accuraci": [8, 58, 60, 64, 66, 73, 74, 80, 94, 95, 97, 98, 119, 120, 131, 147, 158, 170, 225], "releas": [8, 68, 71, 76, 78, 88, 89, 90, 97, 98, 139, 143, 144, 149, 151, 152, 153, 200], "infer": [8, 14, 15, 20, 24, 29, 33, 45, 51, 57, 72, 73, 74, 76, 79, 99, 138, 140, 143, 147], "code": [8, 55, 57, 70, 78, 80, 84, 85, 88, 89, 90, 95, 97, 98, 105, 107, 139, 140, 147, 150, 151, 152, 153, 226, 234], "serv": [8, 60, 226], "foundat": [8, 143, 144], "further": [8, 9, 71, 84, 105, 119, 120, 125, 150, 186], "e": [8, 10, 12, 13, 16, 18, 19, 22, 23, 27, 28, 31, 32, 36, 37, 39, 40, 43, 44, 49, 50, 52, 53, 58, 66, 68, 81, 82, 84, 85, 86, 100, 102, 119, 120, 139, 141, 145, 146, 150, 153, 154, 156, 161, 185, 194, 207, 214, 225], "g": [8, 10, 12, 13, 16, 18, 19, 22, 23, 27, 28, 31, 32, 36, 37, 39, 40, 43, 44, 49, 50, 52, 53, 58, 66, 68, 81, 82, 84, 86, 102, 119, 120, 139, 141, 146, 150, 153, 156, 161, 185, 194, 207, 214, 225], "check": [8, 75, 81, 88, 120, 133, 156, 157, 158, 159, 181, 186, 210, 229, 234], "descript": [8, 66, 84, 91, 105, 110, 143, 149, 158, 165, 193, 195], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 100, 102, 109, 110, 112, 114, 115, 118, 119, 120, 123, 125, 128, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 161, 166, 167, 170, 172, 174, 175, 176, 181, 183, 185, 186, 189, 194, 200, 210, 215, 219, 230], "minoutputlength": [8, 61, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "minimum": [8, 41, 46, 61, 80, 95, 102, 105, 107, 117, 119, 120, 123, 133, 134, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 158, 159, 166, 167, 194, 215], "sequenc": [8, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 58, 60, 61, 62, 72, 85, 87, 92, 93, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 161, 183, 194], "maxoutputlength": [8, 61, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "maximum": [8, 25, 41, 46, 55, 56, 61, 70, 80, 95, 102, 105, 117, 119, 120, 123, 125, 127, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 166, 167, 194], "dosampl": [8, 61, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "sampl": [8, 61, 125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "decod": [8, 56, 61, 72, 78, 85, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "temperatur": [8, 61, 125, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "next": [8, 39, 61, 89, 90, 105, 110, 112, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "probabl": [8, 12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 61, 105, 125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 194], "topk": [8, 61, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "highest": [8, 61, 125, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 194], "vocabulari": [8, 61, 80, 95, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 194], "keep": [8, 61, 62, 67, 72, 105, 123, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "filter": [8, 58, 60, 61, 62, 97, 98, 105, 118, 119, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 194, 199, 211], "topp": [8, 61, 125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "most": [8, 61, 67, 69, 76, 79, 85, 86, 105, 120, 125, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "add": [8, 61, 96, 110, 112, 133, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 167, 183, 194, 229], "top_p": [8, 61, 125], "higher": [8, 61, 96, 105, 125, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "kept": [8, 61, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "repetitionpenalti": [8, 61, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "repetit": [8, 61, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "penalti": [8, 61, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "norepeatngrams": [8, 61, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "ngram": [8, 61, 77, 115, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "occur": [8, 61, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "onc": [8, 61, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "beamsiz": [8, 61, 139], "beam": [8, 61, 139, 144, 145, 148, 194], "mr": [8, 145], "middl": [8, 165, 170], "getlanguag": 8, "langaug": [8, 210], "getismultilingu": 8, "do": [8, 9, 69, 94, 105, 118, 161, 167, 181, 225, 229, 233], "xx": [8, 20, 51, 97, 98, 107, 140, 145, 146, 148], "chunk2doc": [9, 172], "convert": [9, 61, 63, 68, 77, 86, 91, 96, 110, 112, 115, 118, 123, 125, 139, 153, 166, 168, 170, 172, 175, 176, 207, 225, 232], "back": [9, 69, 125, 139], "try": [9, 156, 215], "re": [9, 75, 81, 88, 229], "analysi": [9, 25, 41, 46, 82, 84, 99, 135, 136, 153, 191, 230], "doc2chunk": [9, 172], "pretrainedpipelin": [9, 175, 181, 199, 210, 228, 233, 234], "locat": [9, 16, 100, 133, 200, 210, 229], "extract": [9, 10, 11, 17, 21, 26, 30, 35, 38, 42, 48, 58, 60, 61, 62, 64, 67, 69, 77, 96, 100, 101, 102, 104, 105, 109, 110, 112, 114, 118, 119, 120, 121, 133, 134, 136, 154, 156, 159, 163, 168, 174, 175, 176, 181, 200, 207, 210, 225], "york": [9, 122, 175], "jersei": [9, 175], "aren": [9, 175], "t": [9, 14, 15, 20, 24, 29, 33, 45, 51, 69, 72, 79, 89, 108, 123, 134, 136, 138, 149, 167, 175], "far": [9, 125, 141, 175], "apart": [9, 64, 66, 175], "actual": [9, 115, 175, 186], "id": [9, 41, 68, 97, 100, 125, 126, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 172, 173, 175, 182, 186, 207, 215], "defin": [9, 10, 118, 119, 120, 156, 161, 165, 175, 199, 207, 210, 225, 229, 233], "amongst": [9, 175], "thing": [9, 144, 156, 175], "explain_document_dl": [9, 175, 181, 199, 210], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 175], "selectexpr": [9, 10, 25, 47, 55, 57, 58, 60, 61, 62, 64, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 108, 109, 110, 112, 113, 114, 115, 118, 121, 122, 123, 131, 133, 134, 136, 146, 160, 161, 163, 166, 167, 168, 172, 174, 175, 199, 215, 216, 218, 228, 229, 234], "explod": [9, 10, 25, 47, 55, 64, 66, 67, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 109, 112, 113, 114, 115, 118, 121, 122, 131, 133, 134, 146, 168, 174, 175, 199, 215, 218, 228, 229, 234], "col": [9, 64, 66, 100, 109, 118, 121, 175, 199, 228], "loc": [9, 13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 102, 118, 119, 120, 175, 181, 199, 210, 215], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 63, 64, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 126, 131, 137, 139, 146, 153, 154, 156, 161, 163, 166, 168, 170, 173, 175, 181, 182, 185, 186, 200, 210, 215, 216, 218, 219, 220, 229, 233, 234], "22": [9, 175, 215, 228], "pattern": [10, 67, 68, 100, 110, 113, 123, 158, 159, 166, 167, 170, 183], "part": [10, 70, 76, 105, 108, 130, 131, 138, 143, 160, 170, 172, 218, 235], "tag": [10, 25, 41, 46, 68, 76, 117, 118, 119, 120, 121, 130, 131, 170, 199, 207, 215, 218, 219, 235], "order": [10, 67, 70, 84, 99, 100, 105, 110, 138, 139, 143, 149, 158, 159, 181, 186, 199, 229, 230, 233, 235], "meaning": [10, 160], "phrase": [10, 76, 80, 95, 109, 114], "onto": [10, 199, 230], "pars": [10, 64, 65, 66, 76, 100, 108, 110, 112, 156, 158, 159, 181, 183, 185, 210, 214, 215, 218], "regular": [10, 67, 113, 119, 133], "express": [10, 46, 55, 67, 110, 113, 133], "wrap": [10, 154, 187, 188, 196, 202, 206], "angl": [10, 93], "bracket": 10, "easili": [10, 82, 131, 174, 225], "distinguish": 10, "itself": [10, 70, 105, 148, 153, 170, 184, 230], "form": [10, 25, 41, 46, 96, 100, 108, 109, 110, 113, 114, 134, 136, 158, 159, 170, 174, 207, 215, 216, 229], "peter": [10, 85, 108, 123, 131, 134, 158, 160, 215], "piper": [10, 108, 131, 160], "employe": [10, 108, 131, 160], "pick": [10, 108, 131, 160], "peck": [10, 108, 131, 160], "pickl": [10, 108, 131, 160], "pepper": [10, 108, 131, 160], "nnp": [10, 131, 181, 199, 215, 216, 218, 219, 228, 233, 234, 235], "nn": [10, 131, 215, 216, 218, 219, 235], "vbp": [10, 131, 181, 216, 228, 233, 234], "vbg": [10, 131], "IN": [10, 131, 181, 199, 216, 218, 219, 228, 233, 234], "jj": [10, 131, 181, 199, 215, 218, 228, 233, 234, 235], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 156, 170], "group": [10, 72, 138, 143, 147, 151, 167], "so": [10, 14, 15, 20, 25, 33, 45, 46, 51, 69, 70, 105, 118, 125, 134, 145, 184, 207, 225], "here": [10, 108, 199, 229], "specif": [10, 47, 64, 66, 68, 73, 74, 79, 93, 94, 102, 105, 120, 139, 141, 144, 145, 148, 152, 162, 181, 184, 207, 233], "noun": [10, 216], "success": [10, 76, 86, 141], "grammar": [10, 138], "parser": [10, 64, 66, 102], "perceptronmodel": [10, 64, 66, 102, 119, 131, 215], "Of": [10, 71, 170], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 126, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 182, 184, 185, 186, 207, 215, 225, 229], "sentencedetector": [10, 25, 47, 55, 64, 66, 74, 77, 90, 94, 98, 102, 105, 108, 113, 115, 119, 120, 121, 122, 131, 133, 134, 161, 163, 184, 186, 215, 229, 230], "postag": 10, "11": [10, 63, 97, 98, 110, 112, 115, 131, 220], "21": [10, 110, 112, 121, 131, 220], "35": [10, 131, 220], "39": [10, 121, 126, 131, 218, 220], "52": [10, 121, 131, 218], "58": [10, 60, 131], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 105, 174, 229], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 107, 120, 122, 158, 159], "albert": [11, 12, 13, 71], "span": [11, 17, 21, 26, 30, 35, 38, 42, 48, 139, 152, 153], "question": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 56, 64, 66, 73, 74, 82, 89, 90, 99, 122, 131, 139, 141, 147, 153, 181], "answer": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 56, 64, 66, 67, 73, 74, 82, 99, 122, 139, 141, 147, 153, 181], "squad": [11, 17, 21, 26, 30, 35, 38, 42, 48, 71, 73, 74, 78, 86, 89, 90, 139], "linear": [11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 60, 72, 138, 141], "layer": [11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 52, 53, 71, 72, 73, 74, 78, 82, 99, 138], "comput": [11, 17, 21, 26, 30, 35, 38, 42, 48, 58, 60, 62, 71, 78, 79, 84, 94, 141, 146, 147, 148, 154, 159, 170, 181, 233], "logit": [11, 12, 14, 15, 17, 18, 20, 21, 22, 24, 26, 29, 30, 31, 33, 35, 36, 38, 39, 42, 43, 45, 48, 49, 51, 52, 125, 138], "spanclassifi": [11, 16, 17, 21, 26, 30, 35, 38, 42, 48], "document_quest": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48], "document_context": [11, 16, 17, 21, 26, 30, 35, 38, 42, 48], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 60, 61, 82, 88, 94, 119, 120, 123, 133, 134, 139, 152, 166, 167, 184, 193], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 72, 79, 82, 138, 158, 159], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 109, 114, 158, 161], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 109, 115, 118, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 161, 181], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 100, 107, 109, 114, 143, 149, 156, 158, 161, 167, 172, 215, 216, 229], "configprotobyt": [11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 60, 61, 62, 71, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 107, 120, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99], "128": [11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 71, 73, 74, 76, 78, 79, 84, 89, 90, 97, 98, 99, 207, 225], "multidocumentassembl": [11, 16, 17, 21, 26, 30, 35, 38, 42, 47, 48, 182], "context": [11, 16, 17, 21, 26, 30, 35, 38, 42, 48, 72, 73, 74, 80, 82, 88, 95, 99, 125, 137, 138, 143, 150, 151, 156, 167], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 77, 79, 85, 89, 97, 109, 114, 119, 158, 161, 174, 186], "what": [11, 17, 21, 26, 30, 35, 38, 42, 46, 48, 56, 58, 64, 66, 105, 107, 122, 125, 146, 148, 156, 165, 216, 226], "my": [11, 13, 14, 17, 19, 21, 25, 26, 28, 30, 32, 35, 37, 38, 39, 40, 42, 44, 46, 48, 50, 53, 67, 68, 69, 113, 115, 122, 125, 133, 140, 141, 143, 145, 149, 150, 151, 161, 163, 166, 183, 229], "clara": [11, 17, 21, 26, 30, 35, 38, 42, 48, 122], "live": [11, 13, 17, 19, 21, 26, 28, 30, 32, 35, 37, 38, 40, 42, 44, 48, 50, 53, 122, 141, 143, 207, 225], "berkelei": [11, 17, 21, 26, 30, 35, 38, 42, 48, 149, 150, 151], "albertforsequenceclassif": [12, 27], "regress": [12, 18, 22, 27, 31, 36, 39, 43, 49, 52, 139, 153], "pool": [12, 16, 18, 22, 27, 31, 36, 39, 43, 49, 52, 72, 77, 82, 87, 91, 92, 93, 138], "multi": [12, 18, 22, 25, 27, 31, 36, 39, 41, 43, 46, 49, 52, 71, 94, 97, 98, 105, 107, 146], "sequenceclassifi": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 107], "instead": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 74, 105, 107, 110, 112, 153, 174, 175, 181, 233], "per": [12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 75, 81, 88, 97, 98, 107, 110, 115, 117, 118, 119, 120, 125, 170, 181, 183, 199, 210, 215], "inputcol": [12, 14, 15, 18, 20, 22, 24, 25, 27, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 91, 107, 171, 173, 174, 175, 176, 179, 182, 183], "averag": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 47, 49, 51, 52, 75, 77, 81, 84, 88, 91, 97, 98, 107, 120, 131, 154], "calcul": [12, 14, 15, 18, 20, 22, 24, 25, 29, 31, 33, 36, 39, 41, 43, 45, 46, 49, 51, 52, 96, 115, 120, 128, 136, 154], "softmax": [12, 14, 15, 16, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 78, 80, 95, 156], "sigmoid": [12, 14, 15, 18, 20, 22, 24, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "love": [12, 15, 18, 20, 25, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 74, 90, 98, 134, 137, 229], "movi": [12, 15, 18, 20, 25, 27, 29, 31, 33, 36, 43, 45, 46, 49, 51, 52, 137, 140, 229], "child": [12, 15, 18, 20, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52], "pretti": [12, 15, 18, 20, 27, 29, 31, 33, 36, 41, 43, 45, 49, 51, 52, 105], "bore": [12, 15, 18, 20, 27, 29, 31, 33, 36, 43, 45, 49, 51, 52], "neg": [12, 15, 18, 20, 22, 27, 29, 31, 33, 36, 43, 45, 46, 49, 51, 52, 136, 137, 154, 207, 225], "getclass": [12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 43, 44, 45, 49, 50, 51, 52, 53, 58, 60, 62, 122], "setcoalescesent": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 107], "limit": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 58, 60, 62, 69, 71, 76, 85, 86, 93, 96, 99, 105, 153, 158], "almost": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "512": [12, 14, 15, 16, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 47, 49, 51, 52, 69, 75, 81, 82, 86, 87, 88, 92, 93, 146], "help": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 64, 66, 67, 71, 72, 125, 126, 138, 143, 144, 146, 149, 167, 183, 207, 225, 230, 234], "feed": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52], "entir": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 58, 87, 92, 93, 146, 150], "bool": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 43, 45, 49, 51, 52, 67, 68, 69, 72, 73, 74, 77, 81, 89, 94, 97, 100, 102, 107, 109, 110, 114, 115, 118, 119, 120, 123, 128, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 161, 166, 167, 170, 172, 174, 175, 176, 181, 183, 185, 189, 194, 200, 207, 210, 211, 215], "one": [12, 14, 15, 18, 20, 22, 24, 27, 29, 31, 33, 36, 39, 41, 43, 45, 49, 51, 52, 55, 58, 60, 61, 62, 64, 66, 68, 73, 74, 86, 91, 97, 98, 99, 105, 107, 110, 113, 118, 125, 134, 150, 158, 163, 183, 186, 225, 229], "albertfortokenclassif": [13, 71], "ner": [13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 97, 98, 102, 103, 163, 181, 199, 200, 207, 210, 225], "token_classifi": [13, 23, 37, 40, 44, 50, 53], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 71], "level": [13, 25, 41, 46, 73, 74, 85, 89, 90, 94, 96, 98, 100, 119, 120, 128, 156, 200, 215], "tokenclassifi": [13, 19, 23, 28, 32, 37, 40, 44, 50, 53], "john": [13, 19, 28, 32, 37, 40, 44, 50, 53, 55, 74, 90, 98, 100, 102, 121, 123, 134, 176, 220], "lenon": [13, 19, 28, 32, 37, 40, 44, 50, 53], "born": [13, 19, 28, 32, 37, 40, 44, 50, 53, 141, 143], "london": [13, 19, 28, 32, 37, 40, 44, 50, 53], "pari": [13, 19, 28, 32, 37, 40, 44, 50, 53, 122], "sarah": [13, 19, 28, 32, 37, 40, 44, 50, 53], "o": [13, 19, 23, 28, 32, 37, 40, 44, 50, 53, 118, 119, 120, 121, 181, 199, 210, 215, 219, 235], "albertforzeroshotclassif": 14, "modelforsequenceclassif": [14, 15, 20, 24, 29, 33, 45, 51], "nli": [14, 15, 20, 24, 29, 33, 45, 51], "natur": [14, 15, 20, 24, 29, 33, 45, 46, 51, 62, 71, 72, 73, 74, 76, 78, 79, 80, 86, 94, 95, 99, 107, 139, 141, 147, 151, 153, 172, 182, 186], "equival": [14, 15, 20, 24, 29, 33, 45, 51, 181, 200, 233], "distilbertforsequenceclassif": [14, 31, 33], "don": [14, 15, 20, 24, 29, 33, 45, 51, 79, 89, 123], "hardcod": [14, 15, 20, 24, 29, 33, 45, 51], "potenti": [14, 15, 20, 24, 29, 33, 45, 51, 60, 140, 145, 150, 156], "thei": [14, 15, 20, 24, 29, 33, 45, 47, 51, 64, 66, 67, 120, 123, 125, 141, 184, 202, 216, 229], "chosen": [14, 15, 20, 24, 29, 33, 45, 51, 64, 66, 120, 125], "runtim": [14, 15, 20, 24, 29, 33, 45, 51], "usual": [14, 15, 20, 24, 29, 33, 45, 51, 62, 186, 211], "slower": [14, 15, 20, 24, 29, 33, 45, 51], "much": [14, 15, 20, 24, 25, 29, 33, 45, 47, 51, 71, 75, 81, 88, 89, 90, 123, 143, 145, 170, 200, 229], "flexibl": [14, 15, 20, 24, 29, 33, 45, 51, 57, 60], "loop": [14, 15, 20, 33, 45, 51], "through": [14, 15, 20, 33, 45, 51, 71, 86, 102, 105, 145, 148, 149, 176, 230], "longer": [14, 15, 20, 33, 45, 51, 71, 80, 85, 95, 107, 143, 146, 147, 234], "pass": [14, 15, 20, 24, 29, 33, 45, 51, 70, 125], "pose": [14, 15, 20, 24, 29, 33, 45, 51], "premis": [14, 15, 20, 24, 29, 33, 45, 51], "hypothesi": [14, 15, 20, 24, 29, 33, 45, 51], "pair": [14, 15, 20, 24, 29, 33, 45, 51, 57, 81, 88, 102, 145, 207], "albert_base_zero_shot_classifier_onnx": 14, "iphon": 14, "resolv": 14, "asap": 14, "urgent": 14, "bart": [14, 15, 139], "albert_zero_shot_classifier_onnx": 14, "bartforzeroshotclassif": [14, 15], "bartforsequenceclassif": 15, "bart_large_zero_shot_classifier_mnli": 15, "setmaxsentencelength": [15, 44, 45, 51, 80, 95], "bertformultiplechoic": 16, "choic": [16, 89, 90, 113, 144, 147], "rocstori": 16, "swag": 16, "bert_base_uncased_multiple_choic": 16, "questionansw": [16, 17], "eiffel": 16, "tower": 16, "countri": [16, 156], "germani": 16, "franc": [16, 24, 146], "itali": 16, "setchoicesdelimit": 16, "delimit": [16, 96, 100, 102, 108, 113, 115, 119, 123, 136, 166, 185, 215, 218], "split": [16, 57, 58, 60, 61, 62, 67, 69, 72, 133, 134, 138, 146, 163, 165, 166, 170], "bertforquestionansw": [16, 17, 47], "bert_base_cased_qa_squad2": 17, "bertforsequenceclassif": [18, 20], "bert_base_sequence_classifier_imdb": 18, "bertfortokenclassif": 19, "bert_base_token_classifier_conll03": 19, "bertforzeroshotclassif": 20, "bert_zero_shot_classifier_mnli": 20, "camembertforquestionansw": 21, "camembert": [21, 22, 23, 76], "camembert_base_qa_fquad": 21, "fr": [21, 22, 24, 76, 107, 145, 148], "camembertforsequenceclassif": [22, 24], "sequence_classifi": 22, "camembert_base_sequence_classifier_allocin": 22, "j": [22, 100], "ai": [22, 125, 126, 139, 144, 207, 225], "ador\u00e9": 22, "ce": 22, "film": 22, "lorsqu": 22, "\u00e9tai": 22, "enfant": 22, "je": 22, "d\u00e9test": 22, "\u00e7a": 22, "camembertfortokenclassif": 23, "camembert_base_token_classifier_wikin": 23, "georg": 23, "washington": 23, "est": [23, 76, 107, 146], "all\u00e9": 23, "\u00e0": 23, "camembertforzeroshotclassif": 24, "debertaforsequenceclassif": [24, 27, 29], "camembert_zero_shot_classifier_xnli_onnx": 24, "multi_class": 24, "setcandidatelabel": [24, 57], "sport": 24, "politiqu": 24, "scienc": [24, 84, 105, 152, 226], "l": 24, "\u00e9quip": 24, "de": [24, 62, 76, 105, 107, 145, 146], "joue": 24, "aujourd": 24, "hui": 24, "au": 24, "parc": 24, "princ": 24, "classifierdl": [25, 229], "classifierdlapproach": [25, 41, 229], "univers": [25, 64, 66, 93, 94, 140, 146, 148, 149, 150, 151], "encod": [25, 56, 61, 68, 73, 74, 78, 84, 85, 88, 94, 122, 139, 145, 146, 148, 207], "deep": [25, 73, 74, 82, 105, 119, 134, 156], "dnn": 25, "insid": [25, 41, 118, 131, 167, 215], "instanti": [25, 41, 46, 64, 66, 70, 80, 95, 96, 100, 108, 109, 113, 114, 119, 120, 123, 131, 134, 136, 137, 154, 156, 158, 159, 163, 165, 170, 214, 215, 216], "classifierdlmodel": [25, 41, 229], "monitor": [25, 41, 46, 120, 125, 126, 207, 225], "metric": [25, 41, 46, 120, 159, 207], "done": [25, 41, 46, 89, 90, 119, 120, 230], "settestdataset": [25, 41, 46, 120, 128], "method": [25, 41, 46, 70, 71, 72, 79, 80, 84, 86, 95, 99, 105, 120, 138, 154, 211, 224], "expect": [25, 41, 46, 75, 81, 88, 99, 120, 167, 183, 199], "path": [25, 41, 46, 56, 64, 66, 80, 95, 96, 100, 102, 108, 109, 113, 114, 119, 120, 122, 123, 128, 134, 136, 138, 141, 156, 158, 159, 162, 167, 179, 181, 198, 207, 210, 214, 215, 216, 218, 219, 225], "parquet": [25, 41, 46, 120, 128, 171], "datafram": [25, 41, 46, 80, 95, 96, 120, 128, 131, 154, 170, 181, 195, 199, 206, 207, 210, 214, 215, 216, 218, 219, 225, 229, 233, 235], "ha": [25, 41, 46, 47, 57, 58, 60, 61, 62, 67, 68, 69, 71, 78, 79, 82, 89, 90, 93, 96, 105, 108, 113, 120, 128, 134, 136, 139, 145, 148, 150, 153, 158, 159, 170, 171, 172, 179, 181, 207, 211, 218, 225, 229, 230], "same": [25, 41, 46, 55, 71, 86, 89, 96, 97, 100, 102, 120, 125, 128, 140, 149, 150, 153, 154, 184, 207, 230], "follow": [25, 41, 46, 55, 63, 68, 82, 85, 96, 105, 110, 112, 113, 118, 120, 123, 133, 150, 168, 185, 225, 227, 230], "universalsentenceencod": [25, 41, 46, 94, 207, 225, 229], "preprocessingpipelin": [25, 41, 46, 120, 128], "randomsplit": [25, 41, 46, 120, 128], "write": [25, 41, 46, 96, 120, 128, 140, 152, 158, 159, 230], "overwrit": [25, 41, 46, 120, 121, 128, 207], "test_data": [25, 41, 46, 120, 128], "setlabelcolumn": [25, 41, 46, 117, 119, 120, 127, 162, 207, 225, 229], "usag": [25, 41, 46, 55, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 82, 89, 94, 96, 97, 99, 100, 105, 107, 108, 110, 112, 113, 114, 119, 120, 123, 131, 133, 134, 136, 137, 138, 139, 146, 153, 154, 156, 158, 160, 161, 165, 167, 170], "64": [25, 41, 46, 71, 120, 127, 229], "dropout": [25, 46, 120], "coeffici": [25, 46, 119, 120], "enableoutputlog": [25, 41, 46, 120], "stdout": [25, 41, 46, 120, 128], "addit": [25, 41, 46, 64, 66, 70, 73, 74, 100, 119, 120, 125, 128, 133, 141, 152, 167, 207, 228, 229], "evaluationlogextend": [25, 41, 46, 120], "valid": [25, 41, 46, 110, 120, 128, 134, 156, 225], "displai": [25, 41, 46, 128, 141, 207, 225], "time": [25, 41, 46, 71, 80, 95, 97, 98, 105, 110, 128, 137, 156, 170, 200, 228, 229, 233, 234], "labelcolumn": [25, 41, 46, 119, 120], "lr": [25, 41, 46, 120, 170], "rate": [25, 41, 46, 63, 80, 89, 90, 95, 96, 120, 127, 138, 154, 156], "005": [25, 46, 120, 127], "maxepoch": [25, 41, 46, 119, 120], "epoch": [25, 41, 46, 117, 119, 120, 127, 128, 134, 156, 207], "30": [25, 46, 105, 110, 112, 118, 127, 146, 181, 199, 210, 220, 228], "outputlogspath": [25, 41, 46, 120, 134], "randomse": [25, 41, 46, 119, 120], "random": [25, 41, 46, 80, 95, 117, 119, 120, 125, 127, 146, 154, 174], "seed": [25, 41, 46, 80, 95, 117, 119, 120, 127, 138, 146], "shuffl": [25, 41, 117, 127, 139], "testdataset": [25, 41, 46, 120, 207, 225], "statist": [25, 41, 46, 96, 105, 120, 128], "validationsplit": [25, 41, 46, 120, 134], "choos": [25, 41, 46, 77, 91, 120, 125, 134, 158], "proport": [25, 41, 46, 120, 128, 134], "against": [25, 41, 46, 100, 105, 109, 114, 120, 128, 134, 149, 150, 184], "between": [25, 41, 46, 60, 64, 66, 67, 69, 86, 89, 90, 94, 97, 98, 99, 102, 120, 125, 128, 133, 134, 145, 147, 148, 156], "off": [25, 41, 46, 94, 97, 98, 120, 128, 134], "verbos": [25, 41, 46, 119, 120, 128], "multiclassifierdlapproach": [25, 41, 207, 225], "sentimentdlapproach": [25, 41, 46], "accept": [25, 41, 46, 125], "singl": [25, 41, 46, 70, 81, 84, 96, 102, 105, 139, 145, 154, 163, 165, 167, 183, 214, 215], "item": [25, 46, 96, 125, 207, 215, 225], "doubl": [25, 46, 171, 185], "sentenceembed": [25, 41, 46, 91, 96, 174], "In": [25, 41, 46, 58, 62, 69, 76, 78, 79, 85, 86, 88, 96, 99, 100, 105, 107, 108, 109, 113, 114, 133, 134, 136, 139, 141, 143, 145, 147, 148, 149, 151, 152, 153, 158, 159, 170, 207, 218, 225, 229, 230, 234, 235], "csv": [25, 46, 100, 128, 185, 229], "best": [25, 46, 71, 76, 81, 84, 89, 90, 105, 107, 120, 125, 139, 140, 145, 152, 229], "wach": [25, 229], "ever": [25, 46, 68, 229], "opinion": [25, 46, 229], "win": [25, 46, 229], "award": [25, 46, 229], "terribl": [25, 46, 229], "act": [25, 46, 229], "bad": [25, 46, 136, 207, 225, 229], "realli": [25, 46, 125, 137, 229], "trane": 25, "smallcorpu": [25, 46, 229], "read": [25, 46, 56, 57, 58, 60, 61, 62, 64, 66, 80, 95, 105, 108, 109, 110, 112, 113, 114, 119, 122, 123, 128, 134, 136, 141, 156, 158, 159, 167, 170, 171, 173, 179, 182, 195, 198, 200, 201, 207, 211, 213, 214, 215, 216, 218, 219, 225, 229, 235], "header": [25, 46, 47, 183, 185, 229], "src": [25, 46, 57, 58, 60, 61, 62, 64, 66, 96, 108, 109, 113, 114, 119, 120, 131, 158, 159, 163, 170, 215, 216, 218, 219, 220, 229, 235], "useembed": [25, 41, 46, 94, 229], "docclassifi": [25, 41, 46, 229], "setbatchs": [25, 41, 46, 72, 82, 120, 127, 138, 156, 207, 225, 229], "setmaxepoch": [25, 41, 46, 117, 119, 120, 127, 207, 225, 229], "20": [25, 39, 47, 58, 67, 99, 118, 138, 139, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 181, 185, 199, 210, 229], "setlr": [25, 41, 46, 120, 127, 207, 225, 229], "5e": [25, 46, 229], "setdropout": [25, 46, 120, 229], "pipelinemodel": [25, 39, 41, 46, 64, 66, 68, 80, 95, 119, 120, 137, 156, 158, 159, 170, 181, 184, 207, 211, 229, 232], "v": [25, 41, 46, 63, 78, 86, 96, 105, 107, 109, 120, 127, 128, 140, 159, 199], "classifierdl_use_trec6": [25, 229], "trec": 25, "multiclassifierdlmodel": [25, 41], "sentimentdlmodel": [25, 41, 46], "sarcasmdl": [25, 229], "classifierdl_use_sarcasm": [25, 229], "sarcasm": [25, 229], "m": [25, 69, 110, 112, 145, 220, 229], "could": [25, 79, 105, 113, 128, 156, 228, 229, 230], "put": [25, 199, 229], "word": [25, 60, 62, 64, 66, 71, 77, 78, 80, 82, 89, 91, 94, 95, 96, 99, 100, 102, 105, 108, 115, 118, 121, 122, 123, 131, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 165, 167, 169, 170, 181, 199, 210, 218, 219, 228, 229], "wake": [25, 229], "am": [25, 67, 110, 112, 138, 140, 141, 143, 144, 145, 149, 150, 151, 163, 229], "mondai": [25, 229], "would": [25, 55, 67, 77, 91, 110, 134, 200, 229], "arrays_zip": [25, 64, 66, 105, 229], "out": [25, 72, 75, 81, 88, 105, 108, 123, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 160, 161, 229], "normal": [25, 58, 60, 61, 62, 68, 103, 109, 134, 137, 161, 174, 184, 186, 200, 229, 230], "debertaforquestionansw": 26, "deberta": [26, 27, 28, 29, 78], "deberta_v3_xsmall_qa_squad2": 26, "v2": [27, 28, 73, 74, 78, 152], "v3": [27, 28], "deberta_v3_xsmall_sequence_classifier_imdb": 27, "deberta_base_sequence_classifier_imdb": 27, "debertafortokenclassif": 28, "deberta_v3_xsmall_token_classifier_conll03": 28, "debertaforzeroshotclassif": 29, "deberta_base_zero_shot_classifier_mnli_anli_v3": 29, "distilbertforquestionansw": 30, "distilbert": [30, 31, 33, 79], "distilbert_base_cased_qa_squad2": 30, "distilbert_base_sequence_classifier_imdb": 31, "distilbertfortokenclassif": 32, "distilbert_base_token_classifier_conll03": 32, "distilbertforzeroshotclassif": 33, "distilbert_base_zero_shot_classifier_uncased_mnli": 33, "albert_for_sequence_classif": [34, 103], "albert_for_token_classif": [34, 103], "albert_for_zero_shot_classif": [34, 103], "bart_for_zero_shot_classif": [34, 103], "bert_for_sequence_classif": [34, 103], "bert_for_token_classif": [34, 103], "bert_for_zero_shot_classif": [34, 103], "camembert_for_sequence_classif": [34, 103], "camembert_for_token_classif": [34, 103], "camembert_for_zero_shot_classif": [34, 103], "deberta_for_sequence_classif": [34, 103], "deberta_for_token_classif": [34, 103], "deberta_for_zero_shot_classif": [34, 103], "distil_bert_for_sequence_classif": [34, 103], "distil_bert_for_token_classif": [34, 103], "distil_bert_for_zero_shot_classif": [34, 103], "longformer_for_sequence_classif": [34, 103], "longformer_for_token_classif": [34, 103], "mpnet_for_sequence_classif": [34, 103], "mpnet_for_token_classif": [34, 103], "multi_classifier_dl": [34, 103], "roberta_for_sequence_classif": [34, 103], "roberta_for_token_classif": [34, 103], "roberta_for_zero_shot_classif": [34, 103], "sentiment_dl": [34, 103], "xlm_roberta_for_sequence_classif": [34, 103], "xlm_roberta_for_token_classif": [34, 103], "xlm_roberta_for_zero_shot_classif": [34, 103], "xlnet_for_sequence_classif": [34, 103], "xlnet_for_token_classif": [34, 103], "longformerforquestionansw": 35, "longform": [35, 36, 37, 85], "longformer_base_base_qa_squad2": 35, "longformerforsequenceclassif": 36, "longformer_base_sequence_classifier_imdb": 36, "4096": [36, 71, 85], "longformerfortokenclassif": 37, "xlnet_base_token_classifier_conll03": [37, 53], "longformer_base_token_classifier_conll03": 37, "mpnetforquestionansw": 38, "mpnet": [38, 39, 86], "mpnet_base_question_answering_squad2": 38, "mpnetforsequenceclassif": 39, "mpnet_sequence_classifier_ukr_messag": 39, "drive": 39, "car": 39, "bu": 39, "arriv": 39, "minut": [39, 41], "pineappl": 39, "pizza": 39, "worst": 39, "transport": 39, "movement": 39, "food": [39, 125, 126], "mpnet_base_sequence_classifier_imdb": 39, "mpnetfortokenclassif": 40, "xlm": [40, 48, 49, 50, 97, 98], "roberta": [40, 42, 43, 44, 45, 48, 49, 50, 61, 76, 78, 85, 86, 89, 90, 97, 98, 122, 139], "mpnet_base_token_classifi": [40, 50], "xlmrobertafortokenclassif": [40, 50], "multiclassifierdl": 41, "bidirect": [41, 73, 74, 82, 99, 139], "gru": 41, "convolut": [41, 58, 62], "machin": [41, 58, 67, 69, 80, 95, 105, 119, 139, 141, 145, 146, 148, 153, 207, 227], "strongli": 41, "relat": [41, 64, 66, 102, 234], "variant": [41, 63, 85, 94, 150], "mai": [41, 69, 70, 72, 125, 138, 143, 145, 149, 172, 228, 229, 230, 233, 234], "instanc": [41, 70, 122, 127, 128, 189, 194, 200, 201, 205], "multiclass": 41, "categor": [41, 211], "precis": [41, 64, 66, 69], "constraint": 41, "mani": [41, 70, 78, 89, 90, 105, 125, 139, 140, 141, 143, 145, 146, 148, 153, 170], "formal": 41, "find": [41, 64, 66, 88, 89, 90, 93, 94, 100, 102, 108, 110, 139, 141, 152], "binari": [41, 179, 195, 207], "bertsentenceembed": [41, 46, 74, 90, 98], "multiclassifi": [41, 207, 225], "001": [41, 63, 119, 120], "10": [41, 55, 64, 105, 110, 112, 121, 125, 145, 154, 158, 207, 220, 228], "44": [41, 80, 95, 131, 148], "shuffleperepoch": 41, "threshold": [41, 46, 72, 80, 95, 105, 107, 119, 122, 138, 156, 170], "ed58abb40640f983": 41, "pn": 41, "newsyou": 41, "toxic": [41, 148, 149], "a1237f726b5f5d89": 41, "dude": 41, "place": [41, 62, 70], "obscen": 41, "insult": 41, "24b0d6c8733c2abe": 41, "thank": [41, 99, 105, 220], "8c4478fb239bcfc0": 41, "gee": 41, "traindataset": [41, 207, 225], "printschema": [41, 171, 173, 179, 182], "root": [41, 55, 64, 66, 102, 171, 173, 179, 182, 216], "setcleanupmod": [41, 173, 182], "shrink": [41, 173, 182], "1e": [41, 207, 225], "setthreshold": [41, 46, 105, 107, 207, 225], "setvalidationsplit": [41, 128, 134], "setverbos": [41, 119, 120, 128], "multiclassifierdl_use_tox": 41, "comment": [41, 105], "jigsaw": 41, "good": [41, 76, 79, 94, 137], "stuff": 41, "wtf": 41, "kind": [41, 105, 110, 112], "crap": 41, "robertaforquestionansw": [42, 122], "roberta_base_qa_squad2": [42, 122], "robertaforsequenceclassif": [43, 45], "roberta_base_sequence_classifier_imdb": 43, "robertafortokenclassif": 44, "roberta_base_token_classifier_conll03": 44, "robertaforzeroshotclassif": 45, "roberta_base_zero_shot_classifier_nli": 45, "sentimentdl": 46, "affect": [46, 167], "subject": [46, 64, 66], "view": 46, "common": [46, 93, 100, 110, 126, 149, 150, 152, 163, 172, 200, 232], "product": 46, "review": [46, 125, 203], "tweet": 46, "interpret": [46, 67, 100], "posit": [46, 78, 79, 86, 97, 98, 99, 105, 118, 125, 136, 137, 154, 166, 170, 186, 207, 225], "final": [46, 67, 85, 89, 90, 97, 98, 107, 120, 145, 156, 229], "otheriws": [46, 107], "neutral": [46, 107], "thresholdlabel": [46, 107], "score": [46, 73, 74, 97, 98, 105, 107, 119, 120, 122, 136, 137, 141], "less": [46, 79, 107, 110, 115, 119, 146, 149, 158], "watch": [46, 137, 140], "32": [46, 71, 72, 82, 138, 220, 228, 234], "setthresholdlabel": [46, 107], "p": [46, 68, 80, 95, 107, 120, 128, 138, 145, 165], "sentimentdl_use_imdb": 46, "imdb": 46, "sentimentdl_use_twitt": 46, "wow": 46, "video": [46, 105], "awesom": 46, "bruh": 46, "damn": 46, "wast": [46, 137], "tapasforquestionansw": 47, "implement": [47, 70, 80, 95, 97, 122, 134, 154, 156, 177, 178, 187, 188, 196, 202, 206], "tapa": 47, "design": [47, 58, 60, 63, 73, 74, 89, 90, 93, 109, 139, 144, 146, 152, 207, 225], "about": [47, 56, 64, 66, 89, 90, 96, 105, 122, 125, 133, 140, 159, 181, 184, 228, 230, 233, 234], "tabular": [47, 185], "tabl": [47, 154, 185], "tri": 47, "share": [47, 105, 230], "its": [47, 62, 78, 79, 85, 99, 105, 131, 136, 139, 146, 147, 149, 150, 151, 152, 161, 207, 218], "table_qa_tapas_base_finetuned_wtq": 47, "document_assembl": [47, 122, 154, 180, 185, 200], "table_json": 47, "document_t": [47, 185], "sentence_detector": [47, 103, 122, 132], "table_assembl": [47, 180, 200], "tableassembl": [47, 185], "stage": [47, 154, 181, 184, 207, 225, 229, 230, 233], "json_data": 47, "monei": [47, 185], "ag": [47, 75, 81, 88, 185], "donald": [47, 185], "trump": [47, 185], "75": [47, 105, 150, 185], "elon": [47, 185], "musk": [47, 185], "55": [47, 121, 185, 220], "AS": [47, 55, 122], "who": [47, 67, 69, 144, 165, 229], "earn": 47, "count": [47, 125, 156], "old": [47, 55, 218], "xlmrobertaforquestionansw": 48, "xlm_roberta_base_qa_squad2": 48, "xlmrobertaforsequenceclassif": [49, 51], "xlm_roberta_base_sequence_classifier_imdb": 49, "xlmrobertaforzeroshotclassif": 51, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 51, "xlmroberta": 51, "xlnetforsequenceclassif": 52, "xlnet": [52, 53, 86, 99], "xlnet_base_sequence_classifier_imdb": 52, "xlnetfortokenclassif": 53, "spanbert_coref": 54, "spanbertcorefmodel": 55, "corefer": 55, "resolut": [55, 60], "spanbert": 55, "identifi": [55, 96, 105, 109, 113, 125, 126, 152, 166, 167, 207, 230], "given": [55, 58, 60, 61, 62, 67, 69, 84, 100, 105, 122, 138, 139, 141, 153, 156, 158, 159, 161, 193, 206, 207], "told": [55, 112], "mari": [55, 74, 90, 98, 134], "he": [55, 67, 69, 78, 112, 145, 165, 220], "borrow": 55, "book": [55, 68, 141, 156, 216], "her": [55, 122], "link": [55, 210], "ontonot": 55, "corefresolut": 55, "spanbert_base_coref": 55, "maxsegmentlength": 55, "textgenr": 55, "genr": 55, "One": [55, 84, 105, 165, 168], "bc": 55, "broadcast": 55, "convers": 55, "bn": [55, 145], "nw": 55, "wire": 55, "pt": [55, 145], "pivot": [55, 93], "testament": 55, "tc": 55, "telephon": 55, "wb": 55, "setmaxsegmentlength": 55, "settextgenr": 55, "blipforquestionansw": 56, "blip": 56, "visual": [56, 58, 60, 207], "vision": [56, 58, 60, 61, 62, 150], "togeth": [56, 84], "visualqaclassifi": 56, "image_assembl": [56, 57, 58, 60, 61, 62, 180, 200], "blip_vqa_bas": 56, "50": [56, 120, 121, 131, 139, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 220], "image_df": 56, "sparksessionfortest": 56, "images_path": 56, "test_df": 56, "withcolumn": 56, "lit": 56, "pictur": 56, "imageassembl": [56, 57, 58, 60, 61, 62, 179], "setsiz": 56, "384": 56, "cat_imag": 56, "jpg": [56, 57, 58, 60, 61, 62], "cat": [56, 57, 58, 60, 61, 62], "setmaxsentences": [56, 102], "clipforzeroshotclassif": [56, 57], "blip_vqa_tf": 56, "clip": 57, "contrast": [57, 81, 84, 85, 88, 109, 153], "neural": [57, 62, 73, 74, 78, 120, 134, 139, 146], "network": [57, 62, 73, 74, 82, 120, 134], "abil": [57, 93, 105, 139, 140, 141, 147], "hard": [57, 160], "veri": [57, 61, 62, 67, 76, 82, 97, 98, 99, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 181, 228, 230, 233, 234], "similar": [57, 71, 84, 93, 94, 105, 107, 152], "gpt": [57, 89, 125, 139, 141, 150], "imageclassifi": [57, 58, 60, 61, 62], "zero_shot_classifier_clip_vit_base_patch32": 57, "huggingfac": [57, 58, 60, 61, 62, 76, 149, 150], "clipforzeroshotclassificationtestspec": 57, "candidatelabel": 57, "imagedf": [57, 58, 60, 61, 62], "dropinvalid": [57, 58, 60, 61, 62], "photo": 57, "bird": [57, 61], "dog": [57, 61], "hen": [57, 58, 60, 61, 62], "hippo": [57, 58, 60, 62], "room": [57, 61, 183], "tractor": [57, 58, 60, 61, 62], "ostrich": [57, 58, 60, 61, 62], "ox": [57, 58, 60, 61, 62], "pipelinedf": [57, 58, 60, 61, 62], "revers": [57, 58, 60, 61, 62], "image_nam": [57, 58, 60, 61, 62], "palac": [57, 58, 60, 61, 62], "jpeg": [57, 58, 60, 61, 62], "egyptian_cat": [57, 58, 60, 61, 62], "hippopotamu": [57, 58, 60, 61, 62], "junco": [57, 58, 60, 61, 62], "bluetick": [57, 58, 60, 61, 62], "chihuahua": [57, 58, 60, 61, 62], "getcandidatelabel": 57, "image_classifier_vit_base_patch16_224": [57, 62], "convnextforimageclassif": 58, "convnet": 58, "convnext": 58, "2020": [58, 105, 110, 112, 134], "zhuang": 58, "liu": [58, 60, 78, 89, 90], "hanzi": 58, "mao": 58, "chao": 58, "yuan": 58, "wu": 58, "christoph": 58, "feichtenhof": 58, "trevor": 58, "darrel": 58, "sain": 58, "xie": 58, "pure": [58, 62, 146], "inspir": [58, 137, 158, 159, 203], "claim": 58, "outperform": [58, 81, 85, 86, 88, 93, 94, 97, 98, 99, 105, 140, 141, 143, 144, 149, 152], "convnextforimageclassificationtestspec": 58, "roar": 58, "began": 58, "introduct": 58, "vit": [58, 61, 62], "quickli": [58, 125], "supersed": 58, "vanilla": 58, "hand": [58, 165], "face": [58, 93], "difficulti": 58, "detect": [58, 60, 94, 106, 107, 125, 126, 132, 133, 134], "semant": [58, 60, 75, 82, 84, 93, 94, 154, 170], "hierarch": [58, 60, 80, 95], "swin": [58, 60], "reintroduc": 58, "sever": [58, 152, 235], "practic": [58, 76, 139, 147, 153], "viabl": 58, "backbon": [58, 60, 99], "demonstr": [58, 60, 79, 85, 93, 105, 141, 144, 145, 146], "remark": [58, 144], "wide": [58, 68, 73, 74, 78, 79, 81, 97, 98, 139, 143, 152], "varieti": [58, 85, 86, 97, 98, 234], "howev": [58, 71, 86, 91, 93, 99, 105, 123, 143, 145, 148, 211, 228], "effect": [58, 60, 61, 62, 85, 93, 125, 133, 139, 145, 147, 148, 153], "hybrid": 58, "still": [58, 141, 207], "credit": 58, "superior": [58, 144], "inher": 58, "induct": [58, 79], "bias": [58, 79, 149], "reexamin": 58, "space": [58, 80, 93, 95, 96, 115, 154, 186], "achiev": [58, 78, 81, 84, 85, 86, 89, 90, 97, 98, 99, 120, 139, 140, 141, 143, 146, 148, 150, 153, 181, 233], "gradual": 58, "modern": [58, 148], "resnet": 58, "toward": [58, 141, 148], "discov": [58, 226], "compon": [58, 62, 93, 127, 128, 171, 179, 189, 194, 205, 233], "contribut": [58, 143, 149], "along": [58, 102], "wai": [58, 64, 66, 100, 102, 149, 150, 151, 184, 210], "outcom": 58, "explor": [58, 93, 139, 145, 149, 153], "famili": [58, 68, 81, 143, 144, 150], "dub": [58, 97, 98], "construct": [58, 70, 80, 95, 167, 210, 232], "compet": 58, "favor": 58, "term": [58, 105], "scalabl": 58, "87": [58, 60], "imagenet": [58, 60, 62], "coco": [58, 60], "ade20k": [58, 60], "while": [58, 60, 62, 71, 79, 84, 96, 105, 125, 128, 141, 145, 148, 207, 225, 230], "maintain": 58, "simplic": [58, 139], "effici": [58, 60, 78, 80, 94, 95, 144, 146, 147, 152, 228], "dores": [58, 60, 61, 62], "resiz": [58, 60, 61, 62], "certain": [58, 60, 61, 62, 156], "donorm": [58, 60, 61, 62], "deviat": [58, 60, 61, 62], "featureextractortyp": [58, 60, 61, 62], "architectur": [58, 60, 61, 62, 71, 73, 74, 78, 89, 107, 120, 134, 139, 148, 151, 153], "featur": [58, 60, 61, 62, 64, 80, 87, 92, 93, 95, 105, 115, 119, 128, 147, 154, 207, 232], "imagemean": [58, 60, 61, 62], "imagestd": [58, 60, 61, 62], "resampl": [58, 60, 61, 62], "pil": [58, 60, 61, 62], "nearest": [58, 60, 61, 62, 154], "bilinear": [58, 60, 61, 62], "bicub": [58, 60, 61, 62], "do_res": [58, 60, 61, 62], "tupl": [58, 60, 61, 62, 183, 206], "dorescal": [58, 60, 61], "rescal": [58, 60, 61], "rescalefactor": [58, 60, 61], "factor": [58, 60, 61, 72, 97, 98, 99, 138, 139, 153, 156], "croppct": 58, "percentag": [58, 96, 156, 170], "crop": 58, "tabbi": [58, 60], "river": [58, 60, 62], "hors": [58, 60, 62], "amphibiu": [58, 60, 62], "snowbird": [58, 60, 62], "struthio": [58, 60, 62], "camelu": [58, 60, 62], "thresher": 58, "thrasher": 58, "thresh": 58, "setdorescal": 58, "boolean": [58, 110], "setrescalefactor": 58, "255": 58, "setcroppct": 58, "determin": [58, 70, 97, 183], "smaller": [58, 69, 79, 80, 95], "224": 58, "256": 58, "specifi": [58, 70, 72, 121, 122, 125, 134, 138, 215, 216], "edg": [58, 79, 102, 140, 144], "afterward": 58, "image_classifier_convnext_tiny_224_loc": 58, "clip_for_zero_shot_classif": 59, "convnext_for_image_classif": 59, "swin_for_image_classif": 59, "vision_encoder_decoder_for_image_capt": 59, "vit_for_image_classif": 59, "swinforimageclassif": 60, "swinimageclassif": 60, "shift": 60, "window": [60, 61, 80, 85, 95, 105, 120, 147, 151, 156], "ze": 60, "yutong": 60, "lin": 60, "yue": [60, 148], "cao": 60, "han": 60, "hu": [60, 145], "yixuan": 60, "zheng": 60, "zhang": 60, "stephen": 60, "bain": 60, "guo": 60, "whose": [60, 70, 150], "scheme": [60, 89, 139], "bring": [60, 145, 229], "greater": [60, 105, 125, 138], "attent": [60, 62, 72, 78, 85, 125, 138, 143, 147, 151], "non": [60, 140, 145, 149, 167, 170], "overlap": [60, 67, 69, 109, 114], "cross": [60, 97, 98, 121], "connect": 60, "image_classifier_swin_base_patch4_window7_224": 60, "swinforimageclassificationtest": 60, "present": [60, 71, 81, 82, 85, 89, 90, 94, 97, 98, 102, 125, 128, 134, 139, 146, 154], "call": [60, 70, 73, 74, 79, 81, 93, 105, 125, 141, 143, 149, 150, 206, 211, 215, 229, 235], "purpos": [60, 79, 81, 134], "adapt": [60, 151], "aris": 60, "domain": [60, 84, 93, 105, 141], "variat": 60, "high": [60, 72, 92, 93, 94, 97, 98, 138, 139, 145, 146, 148, 150, 152], "variou": [60, 93, 99, 147, 149, 152, 223], "complex": [60, 82, 93, 94, 105, 147, 158, 159], "respect": [60, 70, 78, 96, 119, 120, 150, 218], "These": [60, 71, 89, 90, 93, 99, 105, 119, 141, 144, 183, 210, 227], "broad": [60, 67, 141], "rang": [60, 73, 74, 78, 79, 81, 84, 97, 98, 138, 139, 143, 144, 149], "1k": 60, "dens": [60, 73, 74, 75, 145, 150, 154], "box": [60, 145, 148], "ap": 60, "51": [60, 173, 182, 218], "53": [60, 109, 114], "miou": 60, "val": 60, "Its": [60, 66, 122, 139], "surpass": [60, 78, 88, 140, 147], "previou": [60, 84, 86, 97, 98, 141, 144, 148, 151, 229], "margin": [60, 86, 99], "prove": 60, "benefici": [60, 105], "mlp": 60, "visionencoderdecoderforimagecapt": 61, "visionencoderdecod": 61, "caption": 61, "auto": [61, 139, 162], "beit": 61, "deit": 61, "gpt2": [61, 141], "image_captioning_vit_gpt2": 61, "visionencoderdecodertestspec": 61, "nreturnsequ": 61, "computation": [61, 82, 89, 90, 99, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153], "expens": [61, 82, 89, 90, 99, 136, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 158], "especi": [61, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153], "larger": [61, 72, 76, 79, 89, 90, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154], "acceler": [61, 82, 99, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 200], "gpu": [61, 71, 72, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 200], "imagecapt": 61, "setbeams": [61, 139, 144, 145, 148, 194], "setdosampl": [61, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "fill": [61, 139], "furnitur": 61, "lai": [61, 148], "couch": 61, "anoth": [61, 230], "brown": 61, "bear": 61, "bodi": 61, "water": 61, "flock": 61, "chicken": 61, "stand": [61, 73, 74, 147], "lush": 61, "green": 61, "field": [61, 80, 95, 96, 100, 114, 149, 150, 151], "small": [61, 62, 68, 71, 72, 76, 79, 80, 88, 95, 108, 131, 138, 148, 149, 150, 152, 181, 218, 233], "wet": 61, "ground": 61, "wooden": 61, "floor": 61, "wear": 61, "blue": 61, "sweater": 61, "man": [61, 72, 141, 143], "cow": 61, "vitforimageclassif": 62, "altern": [62, 105, 125, 136, 156, 158, 159, 181, 185, 229, 234], "vitimageclassificationtestspec": 62, "becom": [62, 71, 79, 105], "facto": [62, 105], "remain": [62, 68, 71, 79, 105], "conjunct": 62, "replac": [62, 68, 78, 85, 107, 108, 121, 134, 139, 158, 159, 193, 229], "overal": [62, 96, 99, 140, 150], "structur": [62, 122, 186, 228], "relianc": [62, 93], "cnn": [62, 107, 120, 134], "necessari": [62, 70, 79, 225, 232], "directli": [62, 145, 148, 181, 207, 211, 225], "patch": 62, "mid": 62, "cifar": 62, "vtab": 62, "etc": [62, 77, 81, 84, 86, 140, 151, 174, 186, 225], "attain": 62, "excel": [62, 99, 147], "substanti": [62, 73, 74], "fewer": [62, 71, 84, 154], "worth": 62, "16x16": 62, "egyptian": [62, 148], "date2chunk": 63, "datematch": [63, 110], "multidatematch": [63, 110, 112], "entitynam": 63, "date_chunk": 63, "omicron": 63, "covid": 63, "world": [63, 67, 68, 69, 87, 92, 93, 147, 149, 150, 151, 163, 207, 220, 225], "health": 63, "organ": [63, 105, 146, 183], "nov": [63, 110, 112, 218], "26": [63, 118, 181, 199, 210, 220], "2021": [63, 110, 112], "118": [63, 185], "121": 63, "01": [63, 110, 112, 113], "setentitynam": 63, "dependencypars": [64, 66, 102], "dependencyparserapproach": [64, 216, 235], "unlabel": [64, 73, 74, 139, 141, 153], "grammat": [64, 66], "dependencyparsermodel": [64, 66, 102], "relationship": [64, 66, 94, 102], "tell": [64, 66, 105, 199], "verb": [64, 66, 216], "modifi": [64, 66, 89, 90, 118, 125, 134], "describ": [64, 66, 88, 102, 105, 146], "particular": [64, 66, 105, 211, 229], "treebank": 64, "penn": 64, "setdependencytreebank": 64, "conll": [64, 66, 119, 120, 200, 216, 217, 232], "u": [64, 66, 78, 79, 105, 112, 118, 119, 120, 181, 199, 210, 216, 227, 230, 235], "setconllu": [64, 66], "dependencytreebank": 64, "conllu": [64, 66, 108, 200, 217, 232], "numberofiter": [64, 66], "converg": [64, 66, 131, 170], "better": [64, 66, 71, 78, 86, 99, 105, 119, 131, 133, 134, 137, 139, 140, 143, 170], "typeddependencyparserapproach": [64, 66], "postagg": [64, 66, 102, 119, 131], "dependency_treebank": 64, "emptydataset": [64, 66], "tree": [64, 102], "bank": 64, "setnumberofiter": [64, 66], "read_a": [64, 66, 100, 108, 109, 113, 114, 119, 123, 128, 136, 158, 159, 167, 192, 198, 200, 215, 216], "reada": [64, 66, 96, 100, 108, 109, 113, 114, 119, 123, 128, 136, 158, 159, 163, 167, 195, 198, 215, 216], "dep": 64, "dependency_conllu": [64, 102], "perceptron": [64, 103, 130], "typeddependencyparsermdoel": 64, "union": [64, 66], "worker": [64, 66], "turner": [64, 66], "newal": [64, 66], "sai": [64, 66, 105, 167], "disappoint": [64, 66], "talk": [64, 66, 125], "stricken": [64, 66], "parent": [64, 66], "firm": [64, 66], "feder": [64, 66], "mogul": [64, 66], "dependency_pars": [65, 103, 211, 234], "typed_dependency_pars": [65, 103], "typeddependencypars": [66, 102], "conll2009": 66, "typeddependencyparsermodel": [66, 102], "beforehand": 66, "2009": 66, "setconll2009": 66, "dependency_typ": [66, 102], "train_smal": 66, "txt": [66, 80, 95, 96, 108, 109, 113, 114, 131, 134, 136, 156, 158, 159, 163, 167, 218, 219, 235], "typdep": 66, "dependency_typed_conllu": [66, 102], "amod": 66, "flat": [66, 102, 176], "nsubj": [66, 102, 176, 216], "parataxi": 66, "documentnorm": [67, 68, 69], "documentcharactertextsplitt": 67, "roughli": 67, "separ": [67, 69, 79, 89, 113, 115, 133, 134, 158, 167, 170, 175, 199, 215, 227], "subtext": 67, "perfect": [67, 69], "reason": [67, 69, 125, 149, 150, 152], "observ": [67, 69, 94], "seen": [67, 69, 139], "addition": [67, 69, 99, 120, 131, 147, 151, 173, 182, 210], "custom": [67, 96, 119, 120, 133, 134, 167, 200, 207, 214], "setsplitpattern": [67, 167], "regex": [67, 68, 100, 110, 113, 123, 156, 158, 159, 166, 167, 170], "setpatternsareregex": 67, "setkeepsepar": 67, "trim": [67, 69], "whitespac": [67, 69, 166, 170, 172], "settrimwhitespac": [67, 69, 166], "individu": [67, 69, 70, 105, 156], "setexplodesplit": [67, 69], "documentcharactertextsplittertest": 67, "chunksiz": 67, "chunkoverlap": 67, "splitpattern": [67, 167], "decreas": [67, 125, 154], "prioriti": [67, 158, 167], "patternsareregex": 67, "keepsepar": 67, "explodesplit": [67, 69], "trimwhitespac": [67, 69, 166], "brioni": 67, "lodg": 67, "serpentin": 67, "aven": 67, "19798": 67, "39395": 67, "19597": 67, "did": [67, 105, 147, 151], "woman": 67, "think": 67, "39371": 67, "59242": 67, "19871": 67, "But": [67, 69, 75, 81, 88], "said": [67, 69], "million": [67, 88, 105, 121, 141], "red": 67, "men": 67, "59166": 67, "77833": 67, "18667": 67, "friend": 67, "enthusiast": 67, "musician": 67, "being": [67, 79, 120, 125, 128, 139, 143, 146, 150, 153, 154], "himself": 67, "capab": 67, "77835": 67, "97769": 67, "19934": 67, "And": 67, "yet": [67, 211], "convinc": 67, "come": [67, 105, 118, 125, 143], "li": [67, 150], "97771": 67, "117248": 67, "19477": 67, "she": [67, 165], "had": [67, 105, 125], "slate": 67, "colour": 67, "brim": 67, "straw": 67, "hat": 67, "feather": 67, "117250": 67, "137242": 67, "19992": 67, "That": [67, 105, 165, 207, 225, 230], "littl": [67, 134, 234], "paradox": 67, "profoundli": 67, "singulari": 67, "137244": 67, "157171": 67, "19927": 67, "setchunks": 67, "setchunkoverlap": 67, "raw": [68, 141, 165, 167, 170, 228, 230], "scrape": 68, "xml": 68, "remov": [68, 89, 90, 123, 137, 166, 174, 175, 176], "dirti": [68, 123], "want": [68, 69, 100, 121, 211, 230], "polici": 68, "__": [68, 139, 174, 175], "action": 68, "clean": [68, 123, 139, 153, 186, 230], "lowercas": [68, 123, 166, 170, 172], "pretty_al": 68, "utf": 68, "cleanuppattern": [68, 123], "normalizeddocu": 68, "setact": 68, "setpattern": [68, 166, 170], "setreplac": 68, "setpolici": 68, "setlowercas": [68, 123, 172, 186], "div": 68, "theworldsgreatest": 68, "right": [68, 73, 74, 139, 170], "hide": 68, "toptext": 68, "style": [68, 107, 153], "font": 68, "sego": 68, "ui": 68, "arial": 68, "san": [68, 105], "serif": 68, "largest": [68, 105, 141], "develop": [68, 105, 143, 144, 146, 148, 149, 152, 204], "site": [68, 105, 140], "h1": 68, "300": 68, "160": 68, "lorem": [68, 109, 114], "ipsum": [68, 109, 114], "print": [68, 70, 200, 211], "typeset": 68, "industri": 68, "been": [68, 76, 141, 143, 144, 149, 168, 186, 211], "1500": [68, 145], "unknown": [68, 69, 107], "printer": 68, "took": [68, 148], "gallei": 68, "scrambl": 68, "specimen": 68, "surviv": 68, "five": [68, 121], "centuri": [68, 147, 170], "leap": 68, "electron": 68, "essenti": [68, 141], "unchang": 68, "popularis": 68, "1960": 68, "letraset": 68, "passag": [68, 75, 81, 88], "recent": [68, 73, 74, 78, 89, 90, 105, 125, 139], "desktop": 68, "publish": [68, 89, 90], "softwar": [68, 152], "aldu": 68, "pagemak": 68, "setencod": 68, "documenttokensplitt": 69, "measur": [69, 79, 89, 90, 139, 150, 207], "futur": [69, 134, 139, 153], "techniqu": [69, 71, 78, 139, 141, 144, 148, 153, 154], "documenttokensplittertest": 69, "numtoken": 69, "tokenoverlap": 69, "immens": 69, "faculti": 69, "extraordinari": 69, "power": [69, 73, 74, 139, 153], "2950": 69, "5707": 69, "2757": 69, "chang": [69, 70, 84, 203], "cloth": 69, "imagin": 69, "deduc": 69, "As": [69, 71, 73, 74, 75, 79, 81, 88, 105, 125], "5659": 69, "8483": 69, "2824": 69, "quarter": 69, "receiv": [69, 218, 235], "Be": 69, "chamber": 69, "8427": 69, "11241": 69, "2814": 69, "piti": 69, "miss": [69, 110, 112, 172], "client": 69, "never": [69, 137, 229], "mind": [69, 148], "him": [69, 112], "11188": 69, "13970": 69, "2782": 69, "person": [69, 100, 216], "emploi": [69, 99], "me": [69, 112, 144], "wish": 69, "agent": 69, "conf": 69, "13918": 69, "16898": 69, "2980": 69, "letter": [69, 123, 141, 143, 156, 218, 235], "secret": 69, "marriag": 69, "16836": 69, "19744": 69, "2908": 69, "seven": 69, "hundr": [69, 97, 98], "holm": [69, 156], "scribbl": 69, "receipt": 69, "shee": 69, "19683": 69, "22551": 69, "2868": 69, "setnumtoken": 69, "settokenoverlap": 69, "documenttokensplittertestspec": 70, "methodnam": 70, "runtest": 70, "By": [70, 93, 136, 139, 153, 161, 166, 174, 200, 207, 225], "fixtur": 70, "testcas": 70, "subclass": [70, 154, 188, 202, 206], "constructor": 70, "argument": [70, 211], "execut": [70, 154, 181, 229, 233], "author": 70, "deconstruct": 70, "overrid": [70, 138, 206], "setup": 70, "teardown": 70, "__init__": 70, "must": [70, 72, 80, 95, 108, 109, 113, 114, 125, 128, 136, 137, 138, 158, 159, 172, 199, 200, 207, 215], "alwai": [70, 105, 125, 144, 149, 150, 151, 153], "signatur": 70, "attribut": [70, 207], "failureexcept": 70, "except": [70, 76, 115, 120, 167], "rais": [70, 89, 90, 105, 115, 120, 207], "assert": 70, "fail": [70, 172], "deem": 70, "error": [70, 72, 138, 156], "longmessag": 70, "long": [70, 74, 85, 88, 93, 99, 147, 150], "messag": [70, 183, 227], "repr": 70, "failur": 70, "maxdiff": 70, "diff": 70, "difflib": 70, "hook": 70, "exercis": 70, "lite": 71, "googl": [71, 73, 74, 78, 80, 82, 89, 90, 94, 95, 105, 153, 216], "research": [71, 73, 74, 78, 80, 95, 146, 148, 149, 153], "toyota": 71, "technolog": 71, "institut": 71, "chicago": 71, "offici": [71, 105, 118, 119, 120, 181, 199, 210, 226], "tf": [71, 94], "wrapper": [71, 203], "port": 71, "properti": [71, 150, 177, 178, 189, 192, 200], "albert_base_uncas": 71, "albert_bas": 71, "768": [71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99], "emb": [71, 72, 88, 92], "dim": [71, 72, 138], "12m": 71, "albert_large_uncas": 71, "albert_larg": 71, "1024": [71, 82, 85, 99], "24": [71, 99, 109, 114, 118, 156, 181, 199, 210, 228], "16": [71, 99, 121, 218, 228], "18m": 71, "albert_xlarge_uncas": 71, "albert_xlarg": 71, "2048": 71, "60m": 71, "albert_xxlarge_uncas": 71, "albert_xxlarg": 71, "235m": 71, "sentencepiec": [71, 78, 94], "everi": [71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 120, 137, 146, 156, 173, 182, 184, 230], "dimens": [71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 194], "repeat": [71, 125, 138], "footprint": 71, "cost": [71, 147, 156, 158], "FOR": 71, "http": [71, 76, 78, 80, 82, 84, 88, 94, 95, 125, 126, 139, 140, 149, 150, 170, 214, 226], "tfhub": [71, 82, 94], "q": 71, "increas": [71, 72, 75, 81, 88, 96, 105, 125, 138, 139, 141, 145, 154, 158], "downstream": [71, 76, 78, 82, 84, 85, 99, 139, 141, 153], "some": [71, 72, 74, 97, 105, 120, 134, 138, 140, 141, 144, 150, 184, 207, 220, 228, 229, 233, 234], "point": [71, 73, 74, 133, 134, 173, 182, 215], "harder": 71, "tpu": 71, "consumpt": [71, 94, 96], "speed": [71, 119, 140, 146, 147], "devlin": [71, 89, 90], "et": [71, 89, 90, 107, 145], "al": [71, 89, 90], "2019": [71, 76, 78, 89, 90, 97, 98, 139], "comprehens": [71, 93, 139, 140, 141, 144, 147, 151, 152], "empir": [71, 73, 74, 97, 98, 99], "evid": 71, "lead": [71, 76, 87, 92, 93, 97, 98, 144], "focus": [71, 92, 105, 125, 152], "inter": 71, "coher": [71, 141], "establish": 71, "glue": [71, 73, 74, 79, 86, 89, 90, 97, 98, 139], "race": [71, 78, 89, 90], "embeddingsfinish": [71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 174], "finished_embed": [71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "setoutputasvector": [71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 174], "setcleanannot": [71, 78, 79, 82, 85, 89, 91, 94, 96, 97, 99, 174, 175, 176], "80": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 174, 186], "1342473030090332": [71, 78], "3855540752410889": [71, 78], "9818322062492371": [71, 78], "784737348556518": [71, 78], "847029983997345": [71, 78], "047153353691101": [71, 78], "1520637571811676": [71, 78], "6245765686035156": [71, 78], "009860038757324219": [71, 78], "13450059294700623": [71, 78], "707749128341675": [71, 78], "2916892766952": [71, 78], "04192575812339783": [71, 78], "5764210224151611": [71, 78], "3196685314178467": [71, 78], "527840495109": [71, 78], "15583214163780212": [71, 78], "1614152491092682": [71, 78], "28423872590065": [71, 78], "135491415858268": [71, 78], "autoggufembed": 72, "llama": [72, 138, 143, 144, 147, 149, 183], "cpp": [72, 138, 183], "setpoolingtyp": [72, 138], "cl": [72, 75, 87, 92, 93], "auto_gguf_model": [72, 103, 142], "nomic": [72, 88], "v1": [72, 73, 74, 88], "q8_0": 72, "gguf": 72, "autoggufembeddingstest": 72, "nthread": [72, 138], "thread": [72, 138], "nthreadsbatch": [72, 138], "prompt": [72, 125, 138, 150, 183], "nctx": [72, 138], "nbatch": [72, 138], "logic": [72, 138, 149, 150], "bla": [72, 138], "nubatch": [72, 138], "physic": [72, 138], "nchunk": [72, 138], "maxim": [72, 99, 138, 156], "nsequenc": [72, 138], "ngpulay": [72, 138], "store": [72, 102, 127, 128, 138, 185, 189, 194, 205, 210, 220, 226], "vram": [72, 138], "gpusplitmod": [72, 138], "across": [72, 82, 138, 141, 143, 144, 147, 154], "maingpu": [72, 138], "scratch": [72, 138], "tensor": [72, 82, 138], "tensorsplit": [72, 138], "distribut": [72, 80, 95, 138], "grpattnn": [72, 138], "grpattnw": [72, 138], "ropefreqbas": [72, 138], "rope": [72, 138], "frequenc": [72, 125, 137, 138, 156, 158, 159, 170], "ntk": [72, 138], "awar": [72, 138, 156], "ropefreqscal": [72, 138], "expand": [72, 138, 147], "yarnextfactor": [72, 138], "yarn": [72, 138], "extrapol": [72, 138], "mix": [72, 82, 138, 154, 188, 206], "yarnattnfactor": [72, 138], "sqrt": [72, 138], "magnitud": [72, 84, 138, 158, 159], "yarnbetafast": [72, 138], "low": [72, 75, 97, 98, 138, 148, 152, 156], "correct": [72, 97, 138, 156, 158, 159, 170], "beta": [72, 138, 151], "yarnbetaslow": [72, 138], "alpha": [72, 138, 140, 156], "yarnorigctx": [72, 138], "defragmentationthreshold": [72, 138], "kv": [72, 138], "cach": [72, 96, 138, 139, 153, 154, 211], "defragment": [72, 138], "numastrategi": [72, 138], "optim": [72, 80, 89, 90, 92, 93, 95, 120, 122, 134, 138, 143, 144, 149, 150], "strategi": [72, 77, 87, 91, 92, 93, 110, 113, 133, 138, 156, 193], "numa": [72, 138], "ropescalingtyp": [72, 138], "unless": [72, 138], "poolingtyp": [72, 138], "unspecifi": [72, 138], "flashattent": [72, 138], "enabl": [72, 99, 120, 138, 143, 149, 154, 158, 200], "flash": [72, 138], "usemmap": [72, 138], "pageout": [72, 138], "mlock": [72, 138], "usemlock": [72, 138], "ram": [72, 138], "swap": [72, 138, 158], "compress": [72, 138], "nokvoffload": [72, 138], "disabl": [72, 138, 173, 182], "offload": [72, 138], "setngpulay": [72, 138], "adjust": [72, 138], "setnctx": [72, 138], "accord": [72, 105, 138, 143, 156, 215], "hardwar": [72, 138], "avoid": [72, 86, 136, 138], "99": [72, 138], "moon": [72, 87, 92, 93], "jupit": 72, "77": 72, "total": [72, 134, 170], "79": [72, 110, 112], "confirm": 72, "satellit": 72, "made": [72, 78, 94, 225], "ones": 72, "034486726": 72, "07770534": 72, "15982522": 72, "017873349": 72, "013914132": 72, "0365736": 72, "setnthread": [72, 138], "setnthreadsbatch": [72, 138], "setnbatch": [72, 138], "setnubatch": [72, 138], "setnchunk": [72, 138], "setnsequ": [72, 138], "setgpusplitmod": [72, 138], "setmaingpu": [72, 138], "settensorsplit": [72, 138], "setgrpattnn": [72, 138], "setgrpattnw": [72, 138], "setropefreqbas": [72, 138], "setropefreqscal": [72, 138], "setyarnextfactor": [72, 138], "setyarnattnfactor": [72, 138], "setyarnbetafast": [72, 138], "setyarnbetaslow": [72, 138], "setyarnorigctx": [72, 138], "setdefragmentationthreshold": [72, 138], "setnumastrategi": [72, 138], "setropescalingtyp": [72, 138], "setflashattent": [72, 138], "setusemmap": [72, 138], "setusemlock": [72, 138], "setnokvoffload": [72, 138], "getmetadata": [72, 138], "bertembed": [73, 77, 84, 91, 120, 174], "small_bert_l2_768": 73, "understand": [73, 74, 79, 86, 97, 99, 105, 139, 144, 149, 150, 152, 153, 170, 228], "introduc": [73, 74, 79, 82, 84, 85, 86, 93, 139, 143, 144, 147, 150, 152, 153], "unlik": [73, 74, 84, 97, 105, 165], "jointli": [73, 74], "condit": [73, 74, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "both": [73, 74, 81, 82, 88, 94, 102, 125, 139, 144, 150, 151, 229, 230], "left": [73, 74, 139, 148, 170], "just": [73, 74, 79, 89, 115, 120], "modif": [73, 74], "conceptu": [73, 74], "obtain": [73, 74, 76, 81, 94, 148], "eleven": [73, 74], "push": [73, 74], "absolut": [73, 74], "multinli": [73, 74], "86": [73, 74, 78], "f1": [73, 74, 97, 98, 120, 141], "93": [73, 74], "83": [73, 74, 78, 218, 219, 235], "small_bert_l2_128": 73, "3497989177703857": [73, 84], "480538547039032": [73, 84], "3238905668258667": [73, 84], "612930893898010": [73, 84], "1357314586639404": 73, "32984697818756104": 73, "6032363176345825": 73, "6791689395904": 73, "8244884014129639": 73, "27088963985443115": 73, "059438943862915": 73, "9817547798156": 73, "1648050546646118": 73, "4725411534309387": 73, "5938255786895752": 73, "5780693292617": 73, "9125322699546814": 73, "4563939869403839": 73, "3975459933280945": 73, "81611204147338": 73, "use_openvino": [73, 74, 81, 88, 89, 97, 140, 143, 144, 145, 147, 148, 149, 150, 151, 152], "openvino": [73, 74, 81, 89, 97], "backend": [73, 74, 81, 89, 97, 183], "sentence_bert_embed": 74, "sent_small_bert_l2_768": 74, "islong": 74, "sent_small_bert_l2_128": 74, "orang": [74, 90, 98], "8951074481010437": [74, 90, 98], "13753940165042877": [74, 90, 98], "3108254075050354": [74, 90, 98], "65693199634552": [74, 90, 98], "6180210709571838": [74, 90, 98], "12179657071828842": [74, 90, 98], "191165953874588": [74, 90, 98], "4497021436691": [74, 90, 98], "822715163230896": [74, 90, 98], "7568016648292542": [74, 90, 98], "1165061742067337": [74, 90, 98], "59048593044281": [74, 90, 98], "setislong": 74, "bgeembed": 75, "bge": 75, "baai": 75, "dimension": [75, 94], "bge_bas": 75, "useclstoken": 75, "queri": [75, 81, 88, 143, 147, 151, 154, 226], "protein": [75, 81, 88], "femal": [75, 81, 88], "eat": [75, 81, 88], "guidelin": [75, 81, 88], "cdc": [75, 81, 88], "women": [75, 81, 88], "70": [75, 81, 84, 88, 143, 144, 149], "46": [75, 81, 88, 220], "gram": [75, 80, 81, 88, 95, 105, 115, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "dai": [75, 81, 88, 110, 112, 156], "chart": [75, 81, 88, 207, 225], "ll": [75, 81, 88, 170], "marathon": [75, 81, 88], "below": [75, 81, 88, 102, 234], "0190285e": [75, 81, 88], "005974853": [75, 81, 88], "072875895": [75, 81, 88], "007944068": [75, 81, 88], "026059335": [75, 81, 88], "0080": [75, 81, 88], "050514214": [75, 81, 88], "010061974": [75, 81, 88], "04340176": [75, 81, 88], "020937217": [75, 81, 88], "05170225": [75, 81, 88], "01157857": [75, 81, 88], "bge_small_en_v1": 75, "camembertembed": 76, "tasti": 76, "french": [76, 105, 145, 146, 148, 161], "loui": 76, "martin": 76, "muller": 76, "pedro": 76, "javier": 76, "ortiz": 76, "su\u00e1rez": 76, "yoann": 76, "dupont": 76, "laurent": 76, "romari": 76, "\u00e9ric": 76, "villemont": 76, "la": [76, 125, 146], "clergeri": 76, "djam\u00e9": 76, "seddah": 76, "beno\u00eet": 76, "sagot": 76, "facebook": [76, 78, 97, 98, 139], "138gb": 76, "camembert_bas": 76, "camembertembeddingstestspec": 76, "co": [76, 105, 149, 150], "ubiquit": 76, "despit": [76, 139, 150], "concaten": [76, 170], "investig": [76, 79, 94], "feasibl": 76, "monolingu": [76, 97, 98], "crawl": [76, 139, 153], "prefer": [76, 102, 150, 176], "wikipedia": [76, 107, 141, 214], "surprisingli": [76, 94], "4gb": 76, "130": 76, "gb": 76, "reach": [76, 105, 141, 170], "four": [76, 134, 168, 170], "un": [76, 107], "08442357927560806": 76, "12863239645957947": 76, "03835778683423996": 76, "200479581952": 76, "048462312668561935": 76, "12637358903884888": 76, "27429091930389404": 76, "07516729831": 76, "02690504491329193": 76, "12104076147079468": 76, "012526623904705048": 76, "031543646007": 76, "05877285450696945": 76, "08773420006036758": 76, "06381352990865707": 76, "122621834278": 76, "chunkembed": [77, 174], "wordembed": [77, 91, 96, 120, 174, 200], "chunker": [77, 103, 200], "ngramgener": [77, 115], "nerconvert": [77, 118, 119, 120, 207, 225], "poolingstrategi": [77, 91], "aggreg": [77, 91, 154], "sum": [77, 82, 91], "skipoov": 77, "discard": [77, 122], "oov": 77, "setn": [77, 115], "wordembeddingsmodel": [77, 91, 96, 102, 119, 120, 121, 174], "setpoolingstrategi": [77, 87, 91, 92, 93], "55661": 77, "42829502": 77, "86661": 77, "409785": 77, "06316501": 77, "120775": 77, "0732005": 77, "40674996": 77, "22938299": 77, "50597": 77, "288195": 77, "555655": 77, "465145": 77, "140118": 77, "17417": 77, "095253006": 77, "0530925": 77, "218465": 77, "714395": 77, "79860497": 77, "0129999": 77, "139705": 77, "177955": 77, "1887775": 77, "45545": 77, "20030999": 77, "461557": 77, "07891501": 77, "setskipoov": 77, "debertaembed": 78, "enhanc": [78, 137, 139, 144, 147, 149], "disentangl": 78, "pengcheng": 78, "xiaodong": 78, "jianfeng": 78, "gao": 78, "weizhu": 78, "chen": [78, 89, 90], "2018": [78, 89, 90], "half": [78, 105], "deberta_v3_bas": 78, "microsoft": [78, 81, 86, 88, 146, 149, 150], "www": [78, 214], "blog": 78, "superglu": 78, "progress": [78, 134, 166], "significantli": [78, 82, 89, 90, 97, 98, 105, 150, 152], "novel": [78, 86, 93, 99, 105, 139, 148], "mechan": [78, 85], "weight": [78, 82, 88, 105, 119, 121, 152, 156], "among": [78, 86, 140, 149, 150], "matric": 78, "second": [78, 82, 113, 133, 161, 166, 183, 229], "mnli": 78, "9": [78, 97, 98, 115, 126, 138, 140, 145, 150, 228, 233, 234], "90": 78, "91": 78, "88": 78, "publicli": [78, 97, 98, 150], "distilbertembed": 79, "fast": [79, 137, 143, 146, 181, 233], "cheap": 79, "distil": 79, "40": [79, 81, 121, 138, 143, 144, 146, 148], "uncas": 79, "preserv": [79, 118, 166, 186], "95": 79, "distilbert_base_cas": 79, "doesn": [79, 89], "token_type_id": [79, 89], "indic": [79, 89, 166, 170], "belong": [79, 89, 150], "sep_token": [79, 89], "sep": 79, "position_id": 79, "ad": [79, 82, 125, 156, 183], "though": [79, 105], "know": [79, 146, 184], "cheaper": 79, "lighter": 79, "preval": 79, "oper": [79, 85, 156, 165, 228], "constrain": [79, 138], "budget": 79, "counterpart": 79, "leverag": [79, 86, 207, 225], "reduc": [79, 86, 147, 149, 158, 159, 186], "retain": 79, "97": [79, 110, 112, 170], "tripl": [79, 102], "cosin": [79, 93], "distanc": [79, 154, 156, 158, 159], "devic": 79, "proof": 79, "concept": [79, 230], "experi": [79, 93, 99, 125, 139, 140, 147, 207, 226], "1127224713563919": 79, "1982710212469101": 79, "5360898375511169": 79, "272536993026733": 79, "35534414649009705": 79, "13215228915214539": 79, "40981462597846985": 79, "14036104083061": 79, "328085333108902": 79, "06269335001707077": 79, "017595693469047546": 79, "024373905733": 79, "15617232024669647": 79, "2967822253704071": 79, "22324979305267334": 79, "04568954557180": 79, "45411425828933716": 79, "01173491682857275": 79, "190129816532135": 79, "1178255230188369": 79, "doc2vecapproach": 80, "word2vec": [80, 83, 103], "corpu": [80, 82, 95, 105, 108, 131, 139, 153, 156, 218, 235], "algorithm": [80, 95, 105, 119, 137, 156, 158, 159], "skip": [80, 95, 102, 156], "doc2vecmodel": 80, "vectors": [80, 95], "windows": [80, 95, 105], "numpartit": [80, 95], "partit": [80, 95, 215], "mincount": [80, 95, 156], "appear": [80, 95, 125, 156], "divid": [80, 95], "1000": [80, 95, 102, 119], "stepsiz": [80, 95], "025": [80, 95], "maxit": [80, 95], "estim": [80, 95, 162, 177, 187, 196, 206, 229], "composition": [80, 95], "sherlockholm": [80, 95, 156, 235], "setvectors": [80, 95], "setwindows": [80, 95, 105], "setsteps": [80, 95], "initi": [80, 95, 138, 150, 156, 166, 184, 200, 215, 216, 218, 219, 225], "setnumpartit": [80, 95], "setmaxit": [80, 95], "numiter": [80, 95], "equal": [80, 95], "setse": [80, 95, 138], "setmincount": [80, 95, 156], "doc2vec_gigaword_300": 80, "06222493574023247": [80, 95], "011579325422644615": [80, 95], "009919632226228714": [80, 95], "109361454844": [80, 95], "doc2vec_wiki": 80, "getvector": [80, 95], "e5embed": [81, 86, 88, 154], "e5": 81, "weakli": [81, 88], "tailor": [81, 84, 148], "e5_smal": 81, "unilm": [81, 88], "manner": [81, 105], "signal": [81, 82], "curat": [81, 88], "ccpair": 81, "readili": 81, "strong": [81, 97, 98, 149, 150, 151], "conduct": [81, 93], "extens": [81, 93, 147, 152, 203], "56": [81, 218], "beir": 81, "mteb": 81, "bm25": 81, "baselin": [81, 94, 141], "beat": 81, "exist": [81, 82, 93, 125, 140, 145, 156, 174, 176, 207], "elmoembed": 82, "elmo": 82, "billion": [82, 141, 143, 144, 147, 149, 150, 152], "lookup": [82, 96, 99, 109, 138, 158, 159], "setpoolinglay": 82, "word_emb": 82, "shape": 82, "batch_siz": 82, "max_length": 82, "lstm_outputs1": 82, "lstm": [82, 120], "lstm_outputs2": 82, "trainabl": 82, "poolinglay": 82, "contextu": [82, 139, 144, 148, 156], "characterist": 82, "syntax": 82, "vari": [82, 125], "linguist": [82, 170], "polysemi": 82, "intern": [82, 127, 128, 150, 153, 156, 167, 170, 185, 189, 194, 200], "bilm": 82, "six": [82, 158, 159], "textual": [82, 84, 93, 147], "entail": 82, "expos": 82, "crucial": [82, 93], "semi": 82, "662458181381226e": 82, "2541114091873169": 82, "6275503039360046": 82, "5787073969841": 82, "19154725968837738": 82, "22998669743537903": 82, "2894386649131775": 82, "21524395048618": 82, "10400570929050446": 82, "12288510054349899": 82, "07056470215320587": 82, "246389418840": 82, "49932169914245605": 82, "12706467509269714": 82, "30969417095184326": 82, "2643227577209": 82, "8871506452560425": 82, "20039963722229004": 82, "0601330995559692": 82, "0348707810044": 82, "albert_embed": [83, 103], "auto_gguf_embed": [83, 103], "bert_embed": [83, 103], "bert_sentence_embed": [83, 103], "bge_embed": [83, 103], "camembert_embed": [83, 103], "chunk_embed": [83, 103], "deberta_embed": [83, 103], "distil_bert_embed": [83, 103], "doc2vec": [83, 103], "e5_embed": [83, 103], "elmo_embed": [83, 103], "instructor_embed": [83, 103], "longformer_embed": [83, 103], "mpnet_embed": [83, 103], "mxbai_embed": [83, 103], "nomic_embed": [83, 103], "roberta_embed": [83, 103], "roberta_sentence_embed": [83, 103], "snowflake_embed": [83, 103], "uae_embed": [83, 103], "universal_sentence_encod": [83, 103], "xlm_roberta_embed": [83, 103], "xlm_roberta_sentence_embed": [83, 103], "xlnet_embed": [83, 103], "instructorembed": 84, "instructor": 84, "finetun": [84, 85, 99], "financ": 84, "sota": [84, 93, 99], "divers": [84, 94, 139, 141, 144, 152, 153, 226], "setinstruct": 84, "medicin": 84, "instructor_bas": 84, "summar": [84, 85, 105, 139, 141, 146, 153, 194], "embedd": 84, "hkunlp": 84, "explain": [84, 207, 225, 232, 234], "special": [84, 156, 170, 201, 230], "330": 84, "mixtur": [84, 148, 151], "66": [84, 121], "unseen": 84, "suggest": [84, 141], "mitig": [84, 93], "url": [84, 214], "io": 84, "dynam": [84, 138, 146], "scalar": 84, "degre": 84, "freedom": 84, "horava": 84, "lifshitz": 84, "graviti": 84, "longformerembed": 85, "iz": 85, "beltagi": 85, "matthew": 85, "arman": 85, "cohan": 85, "checkpoint": 85, "mlm": [85, 86], "096": 85, "longformer_base_4096": 85, "unabl": 85, "quadrat": 85, "linearli": 85, "easi": 85, "thousand": [85, 145, 148], "drop": [85, 161], "motiv": 85, "global": [85, 148], "text8": 85, "enwik8": 85, "wikihop": 85, "triviaqa": 85, "led": [85, 89, 90, 105], "arxiv": [85, 139], "found": [85, 96, 105, 158, 165, 172, 215, 232], "18792399764060974": [85, 89], "14591649174690247": [85, 89], "20547787845134735": [85, 89], "1468472778797": [85, 89], "22845706343650818": [85, 89], "18073144555091858": [85, 89], "09725798666477203": [85, 89], "0417917296290": [85, 89], "07037967443466187": [85, 89], "14801117777824402": [85, 89], "03603338822722435": [85, 89], "17893412709": [85, 89], "08734266459941864": [85, 89], "2486150562763214": [85, 89], "009067727252840996": [85, 89], "24408400058": [85, 89], "22409197688102722": [85, 89], "4312366545200348": [85, 89], "1401449590921402": [85, 89], "356410235166549": [85, 89], "mpnetembed": 86, "adopt": [86, 147], "permut": [86, 99], "inherit": [86, 154, 188, 206], "advantag": [86, 184], "all_mpnet_base_v2": 86, "neglect": [86, 99], "plm": 86, "doe": [86, 97, 105, 118, 145, 146, 148, 181, 184, 211, 230, 233, 234], "full": [86, 88, 99, 151, 152, 229], "thu": [86, 105], "suffer": [86, 99], "discrep": [86, 99], "auxiliari": 86, "160gb": 86, "corpora": [86, 105, 109], "down": [86, 120, 229, 230], "stream": [86, 125, 138, 140], "experiment": [86, 105], "022502584": 86, "078291744": 86, "023030775": 86, "0051000593": 86, "080340415": 86, "039": 86, "041702367": 86, "0010974605": 86, "015534201": 86, "07092203": 86, "0017729357": 86, "04661": 86, "mxbaiembed": 87, "mxbai": 87, "mxbai_large_v1": 87, "hello": [87, 92, 93, 109, 114, 138, 163, 183, 220], "50387806": [87, 92, 93], "5861606": [87, 92, 93], "35129607": [87, 92, 93], "76046336": [87, 92, 93], "32446072": [87, 92, 93], "117674336": [87, 92, 93], "6660665": [87, 92, 93], "961762": [87, 92, 93], "24854276": [87, 92, 93], "1018044": [87, 92, 93], "6569202": [87, 92, 93], "027635604": [87, 92, 93], "1915": [87, 92, 93], "cls_avg": [87, 92, 93], "avg": [87, 92, 93], "nomicembed": 88, "8192": 88, "openai": [88, 103, 141, 200], "ada": [88, 126], "002": [88, 126], "short": [88, 93], "nomic_embed_v1": 88, "technic": 88, "report": [88, 89, 90, 94, 139, 207, 225], "reproduc": [88, 145, 207, 225, 226], "open": [88, 107, 140, 143, 144, 145, 149, 150, 152, 167, 172, 173, 174, 182, 186, 226], "opendata": 88, "licens": [88, 152], "loader": 88, "235": 88, "replic": [88, 89, 90, 139], "embedtext": 88, "nomicai": 88, "contrastor": 88, "robertaembed": [89, 97], "robustli": [89, 90, 122], "yinhan": [89, 90], "myle": [89, 90, 97, 98], "ott": [89, 90, 97, 98], "naman": [89, 90, 97, 98], "goyal": [89, 90, 97, 98], "jingfei": [89, 90], "du": [89, 90, 107], "mandar": [89, 90], "joshi": [89, 90], "danqi": [89, 90], "omer": [89, 90], "levi": [89, 90], "mike": [89, 90], "lewi": [89, 90], "luke": [89, 90, 97, 98], "zettlemoy": [89, 90, 97, 98], "veselin": [89, 90, 97, 98], "stoyanov": [89, 90, 97, 98], "hyperparamet": [89, 90], "mini": [89, 90, 150], "roberta_bas": 89, "bpe": 89, "signific": [89, 90, 97, 98, 105, 108, 143, 151], "gain": [89, 90, 97, 98, 139, 145], "care": [89, 90, 167], "comparison": [89, 90, 94, 151, 161], "privat": [89, 90, 201], "impact": [89, 90], "carefulli": [89, 90, 125, 152], "undertrain": [89, 90], "exce": [89, 90, 125], "highlight": [89, 90], "previous": [89, 90, 105], "overlook": [89, 90], "robertasentenceembed": 90, "sent_roberta_bas": 90, "embeddingssent": 91, "22093398869037628": 91, "25130119919776917": 91, "41810303926467896": 91, "380883991718": 91, "snowflakeembed": 92, "snowflak": 92, "arctic": 92, "suit": 92, "snowflake_artic_m": 92, "uaeembed": 93, "uae": 93, "llm": [93, 143, 144, 149, 152], "satur": 93, "uae_large_v1": 93, "st": 93, "vanish": 93, "gradient": [93, 119], "zone": 93, "core": 93, "idea": [93, 99], "advers": 93, "imped": 93, "hinder": 93, "furthermor": [93, 99], "examin": 93, "scenario": [93, 137], "were": [93, 96, 120, 207, 225], "uae_smal": 93, "tfhub_us": 94, "loadsp": 94, "op": 94, "lingual": [94, 97, 98, 105, 107, 146], "accur": [94, 137, 139, 158], "trade": [94, 97, 98], "tend": 94, "With": [94, 99, 105, 152], "minim": [94, 122, 146], "encourag": [94, 144], "weat": 94, "bia": [94, 125, 138, 151], "freeli": 94, "04616805538535118": 94, "022307956591248512": 94, "044395286589860916": 94, "0016493503": 94, "setloadsp": 94, "word2vecapproach": 95, "word2vecmodel": 95, "word2vec_gigaword_300": 95, "word2vec_wiki": 95, "dictionari": [96, 105, 108, 113, 119, 121, 122, 123, 136, 158, 159, 207, 214], "setstoragepath": [96, 109], "line": [96, 100, 109, 114, 125, 134, 136, 156, 210, 215, 218], "39658191506190343": 96, "630968081620067": 96, "5393722253731201": 96, "8428180123359783": 96, "7535235923631415": 96, "9699218875629833": 96, "10397182122983872": 96, "11833962569383116": 96, "stress": 96, "0492683418305907": 96, "9415954572751959": 96, "47624463167525755": 96, "16790967216778263": 96, "induc": 96, "1535748762292387": 96, "33498936903209897": 96, "9235178224122094": 96, "1158772920395934": 96, "withcoveragecolumn": 96, "overallcoverag": 96, "writebuffers": 96, "dump": 96, "disk": [96, 229, 230], "storag": [96, 100, 109, 192, 200], "10000": 96, "readcaches": 96, "random_embeddings_dim4": 96, "abov": [96, 102, 218], "setstorageref": 96, "glove_4d": 96, "setdimens": [96, 194], "patient": 96, "diagnos": 96, "diabet": 96, "9439099431037903": 96, "4707513153553009": 96, "806300163269043": 96, "16176554560661316": 96, "7966810464859009": 96, "5551124811172485": 96, "8861005902290344": 96, "28284206986427307": 96, "025029370561242104": 96, "35177749395370483": 96, "052506182342767715": 96, "1887107789516449": 96, "08617766946554184": 96, "8399239182472229": 96, "5395117998123169": 96, "7864698767662048": 96, "6599600911140442": 96, "16109347343444824": 96, "6041093468666077": 96, "8913561105728149": 96, "5955275893211365": 96, "01899011991918087": 96, "4397728443145752": 96, "8911281824111938": 96, "9840458631515503": 96, "7599489092826843": 96, "9417727589607239": 96, "8624503016471863": 96, "setwritebuffers": 96, "setreadcaches": 96, "glove_100d": [96, 120], "There": [96, 100, 102, 165, 227, 229, 230, 235], "conveni": 96, "coverag": [96, 191], "stat": 96, "whole": [96, 210], "570580005645752": 96, "44183000922203064": 96, "7010200023651123": 96, "417129993438720": 96, "542639970779419": 96, "4147599935531616": 96, "0321999788284302": 96, "4024400115013122": 96, "2708599865436554": 96, "04400600120425224": 96, "020260000601410866": 96, "17395000159": 96, "6191999912261963": 96, "14650000631809235": 96, "08592499792575836": 96, "2629800140857": 96, "3397899866104126": 96, "20940999686717987": 96, "46347999572753906": 96, "6479200124740": 96, "embeddings_col": 96, "coverageresult": 96, "coverateresult": 96, "wordsoverallcoverag": 96, "resultdf": 96, "output_col": 96, "wordscoverag": 96, "cov_embed": 96, "loadstorag": [96, 109], "storage_ref": [96, 109], "xlmrobertaembed": 97, "alexi": [97, 98], "conneau": [97, 98], "kartikai": [97, 98], "khandelw": [97, 98], "vishrav": [97, 98], "chaudhari": [97, 98], "guillaum": [97, 98], "wenzek": [97, 98], "francisco": [97, 98, 105], "guzman": 97, "edouard": [97, 98], "grave": [97, 98], "5tb": [97, 98], "commoncrawl": [97, 98], "xlm_roberta_bas": 97, "abl": [97, 145, 153, 207, 228], "terabyt": [97, 98], "r": [97, 98, 105], "mbert": [97, 98], "xnli": [97, 98], "mlqa": [97, 98], "particularli": [97, 98, 139], "swahili": [97, 98, 145, 148], "urdu": [97, 98, 145, 148], "capac": [97, 98, 141, 145], "dilut": [97, 98], "sacrif": [97, 98], "ri": [97, 98], "05969233065843582": 97, "030789051204919815": 97, "04443822056055069": 97, "09564960747": 97, "038839809596538544": 97, "011712731793522835": 97, "019954433664679527": 97, "0667808502": 97, "03952755779027939": 97, "03455188870429993": 97, "019103847444057465": 97, "04311436787": 97, "09579929709434509": 97, "02494969218969345": 97, "014753809198737144": 97, "10259044915": 97, "004710011184215546": 97, "022148698568344116": 97, "011723337695002556": 97, "013356896": 97, "xlmrobertasentenceembed": 98, "guzm\u00e3": 98, "sent_xlm_roberta_bas": 98, "xlnetembed": 99, "autoregress": 99, "xl": 99, "exhibit": 99, "involv": [99, 134], "rank": [99, 140, 154, 156], "xlnet_large_cas": 99, "xlnet_base_cas": 99, "zihangdai": 99, "denois": [99, 139], "autoencod": [99, 139], "corrupt": [99, 139], "pro": 99, "con": 99, "likelihood": [99, 125], "overcom": 99, "formul": 99, "integr": [99, 105, 124, 146, 207, 225, 227], "6287205219268799": 99, "4865287244319916": 99, "186111718416214": 99, "234187275171279": 99, "1967450380325317": 99, "2746637463569641": 99, "9481253027915955": 99, "3431355059146881": 99, "0777631998062134": 99, "092679977416992": 99, "5331977605819702": 99, "11190271377563": 99, "8349916934967041": 99, "45627787709236145": 99, "7890847325325012": 99, "028069257736": 99, "134845569729805": 99, "11672890186309814": 99, "4945235550403595": 99, "66587203741073": 99, "entityrul": 100, "entityrulerapproach": 100, "exact": [100, 109, 114, 125], "definit": [100, 122, 215], "json": [100, 125, 185, 207, 220], "jsonl": 100, "setpatternsresourc": 100, "might": [100, 120, 170, 234], "rule": [100, 110, 113, 136, 165, 167, 193], "w": [100, 103, 113, 119, 123, 165, 167, 200], "winterfel": 100, "jon": 100, "snow": [100, 121, 156], "stark": 100, "eddard": 100, "patternsresourc": 100, "usestorag": 100, "rocksdb": 100, "lord": 100, "29": [100, 121, 170, 218, 220], "38": [100, 150, 220], "setusestorag": 100, "setsentencematch": 100, "setalphabetresourc": 100, "alphabet": [100, 123], "plain": [100, 235], "entityrulermodel": 100, "entity_rul": [101, 103], "graphextract": [102, 176], "graph": [102, 120, 146, 156, 162, 176], "nerdlmodel": [102, 118, 119, 120, 121, 207, 211, 225], "node": 102, "relev": [102, 105, 125], "taken": 102, "implicitli": 102, "setmergeent": 102, "setdependencyparsermodel": 102, "settypeddependencyparsermodel": 102, "setrelationshiptyp": 102, "public": [102, 211, 229], "relationshiptyp": 102, "entitytyp": 102, "explodeent": 102, "roottoken": 102, "travers": 102, "maxsentences": 102, "minsentences": 102, "mergeent": 102, "merg": [102, 109, 114], "neighbor": [102, 154], "includeedg": 102, "symbol": [102, 156, 170], "posmodel": 102, "coordin": [102, 133], "remoteloc": 102, "graphfinish": [102, 176], "rdf": [102, 176], "nertagg": [102, 119, 120, 121], "morn": [102, 176], "flight": [102, 176], "denver": [102, 176], "18": [102, 110, 112, 115, 118, 121, 181, 199, 210, 228], "path1": 102, "setentitytyp": 102, "setexplodeent": 102, "setroottoken": 102, "setminsentences": 102, "setmergeentitiesiobformat": 102, "iob": [102, 118, 119, 120], "iob2": [102, 118], "setincludeedg": 102, "setdelimit": [102, 113, 115], "setposmodel": 102, "class": [103, 192, 197, 204, 217, 224, 225, 233, 235], "classifier_dl": [103, 200], "er": [103, 200], "keyword_extract": [103, 200], "yake_keyword_extract": [103, 104], "ld_dl": [103, 200], "language_detector_dl": [103, 106], "matcher": [103, 200], "big_text_match": [103, 111], "date_match": [103, 111], "multi_date_match": [103, 111], "regex_match": [103, 111], "text_match": [103, 111], "ner_approach": [103, 116], "ner_convert": [103, 116], "ner_crf": [103, 116], "ner_dl": [103, 116], "ner_overwrit": [103, 116], "openai_complet": [103, 124], "openai_embed": [103, 124], "param": [103, 119, 154, 188, 189, 194, 200, 205, 206, 214], "sentence_detector_dl": [103, 132, 146], "sentiment_detector": [103, 135], "vivekn_senti": [103, 135], "seq2seq": [103, 200], "bart_transform": [103, 142], "cpm_transform": [103, 142], "gpt2_transform": [103, 142], "llama2_transform": [103, 142], "llama3_transform": [103, 142], "m2m100_transform": [103, 142], "marian_transform": [103, 142], "mistral_transform": [103, 142], "nllb_transform": [103, 142], "phi2_transform": [103, 142], "phi3_transform": [103, 142], "qwen_transform": [103, 142], "starcoder_transform": [103, 142], "t5_transform": [103, 142], "spell_check": [103, 200], "context_spell_check": [103, 157], "norvig_sweet": [103, 157], "symmetric_delet": [103, 157], "chunk_token": [103, 164], "recursive_token": [103, 164], "regex_token": [103, 164], "word_segment": [103, 169], "chunk2_doc": [103, 200], "date2_chunk": [103, 200], "document_character_text_splitt": [103, 200], "document_norm": [103, 200], "document_token_splitt": [103, 200], "graph_extract": [103, 200], "lemmat": [103, 136, 161, 184, 186, 200], "n_gram_gener": [103, 200], "stemmer": [103, 161, 200], "stop_words_clean": [103, 200], "token2_chunk": [103, 200], "yakekeywordextract": 105, "yake": 105, "independ": [105, 158, 159, 165], "grow": 105, "autom": 105, "adequ": 105, "emerg": [105, 139, 153], "tool": [105, 125, 139, 152], "nor": 105, "thesauri": 105, "neither": 105, "written": [105, 146], "plethora": 105, "situat": [105, 134], "access": 105, "restrict": [105, 149], "therefor": [105, 233], "sent": 105, "boundari": [105, 133, 134, 137, 167, 170], "detector": [105, 110, 136], "section": [105, 173, 182, 225, 227, 233], "tweakabl": 105, "upper": 105, "bound": [105, 133, 134, 137], "minngram": 105, "maxngram": 105, "occurr": [105, 193], "nkeyword": 105, "stopword": [105, 121, 161], "stop": [105, 119, 125, 138, 144, 153, 161], "campo": 105, "mangaravit": 105, "pasquali": 105, "jatowt": 105, "jorg": 105, "nune": 105, "journal": [105, 170], "elsevi": 105, "vol": 105, "509": 105, "pp": [105, 170], "257": 105, "289": 105, "turn": [105, 186, 229], "fly": 105, "demand": 105, "within": [105, 131, 137, 139, 141, 167, 172], "resort": 105, "solut": [105, 147], "articl": [105, 156], "rest": [105, 118], "merit": 105, "ten": 105, "carri": 105, "twenti": 105, "setcontextchar": [105, 167], "setminngram": 105, "setnkeyword": 105, "acquir": 105, "kaggl": [105, 152], "platform": [105, 125, 126, 207, 227], "host": 105, "transact": 105, "somewhat": 105, "vagu": 105, "cloud": 105, "confer": 105, "week": [105, 110, 112, 163], "announc": [105, 121], "earli": 105, "tomorrow": [105, 110, 112], "phone": [105, 150], "founder": 105, "ceo": 105, "anthoni": 105, "goldbloom": 105, "declin": 105, "deni": 105, "acquisit": 105, "happen": 105, "rumor": 105, "scientist": 105, "ben": 105, "hamner": 105, "2010": 105, "servic": [105, 125, 146], "got": 105, "even": [105, 110, 140, 144, 153], "few": [105, 167, 218, 235], "competitor": 105, "drivendata": 105, "topcod": 105, "hackerrank": 105, "stai": 105, "ahead": 105, "nich": 105, "home": [105, 200, 214], "bui": [105, 216], "commun": [105, 143, 144, 149], "mindshar": 105, "too": [105, 136, 228], "plenti": 105, "bit": [105, 134, 234], "histori": [105, 134, 156], "earlier": 105, "month": [105, 110, 112, 218, 235], "team": [105, 146, 207, 225], "around": [105, 148], "youtub": 105, "technologi": 105, "interest": [105, 149, 150, 151], "kernel": 105, "On": [105, 140, 141, 146], "analyz": [105, 137], "compani": [105, 146], "script": [105, 145, 148], "centric": [105, 145, 148], "job": [105, 172], "board": [105, 131, 218], "unclear": 105, "crunchbas": 105, "pitchbook": 105, "launch": 105, "investor": 105, "ventur": 105, "sv": [105, 145], "angel": [105, 140], "levchin": 105, "naravik": 105, "chie": 105, "economist": 105, "hal": 105, "varian": 105, "khosla": 105, "yuri": 105, "milner": 105, "resulttupl": 105, "ascend": 105, "orderbi": 105, "32051516486864573": 105, "37786450577630676": 105, "39922830978423146": 105, "40224744669493756": 105, "41584827825302534": 105, "setmaxngram": 105, "setstopword": [105, 121, 161], "getstopword": 105, "loaddefaultstopword": [105, 161], "danish": [105, 145, 148, 161], "dutch": [105, 145, 148, 161], "finnish": [105, 145, 148, 161], "german": [105, 145, 148, 161, 215, 235], "hungarian": [105, 145, 148, 161], "italian": [105, 125, 145, 148, 156, 161], "norwegian": [105, 145, 148, 161], "portugues": [105, 145, 148, 161], "russian": [105, 145, 148, 161], "spanish": [105, 145, 148, 161], "swedish": [105, 145, 148, 161], "turkish": [105, 145, 148, 161], "languagedetectordl": 107, "ld": 107, "identif": 107, "rnn": 107, "tatoeba": 107, "140": 107, "wiki": 107, "languagedetector": 107, "ld_wiki_tatoeba_cnn_21": 107, "advanc": [107, 144, 147, 152, 172, 183, 186], "scala": [107, 154, 187, 188, 196, 202, 206], "program": [107, 152], "biblioth\u00e8qu": 107, "traitement": 107, "pour": 107, "le": [107, 146], "avanc\u00e9": 107, "langag": 107, "naturel": 107, "programm": 107, "ist": 107, "ein": 107, "textverarbeitungsbibliothek": 107, "f\u00fcr": 107, "fortgeschritten": 107, "nat\u00fcrlich": 107, "sprachverarbeitung": 107, "die": 107, "programmiersprachen": 107, "und": 107, "lemma": [108, 136, 181, 210, 216, 230, 233, 234], "predefin": [108, 109, 113, 114, 136], "setdictionari": [108, 136, 158, 159], "lemmatizermodel": 108, "lemmas_smal": [108, 136], "setformcol": 108, "correspend": 108, "formcol": [108, 216], "setlemmacol": 108, "fromlemma": 108, "key_delimit": 108, "value_delimit": 108, "lemma_antbnc": 108, "bigtextmatch": [109, 114], "textmatch": [109, 114, 163], "externalresourc": [109, 114, 198], "mergeoverlap": [109, 114], "tokenizermodel": [109, 167], "trie": 109, "dolor": [109, 114], "magna": [109, 114], "aliqua": [109, 114], "sit": [109, 114], "laborum": [109, 114], "entityextractor": [109, 114, 163], "extractor": [109, 114, 163], "59": [109, 110, 112, 114], "setent": [109, 114, 117, 163], "setmergeoverlap": [109, 114], "settoken": 109, "tokenizer_model": 109, "bigtextmatchermodel": 109, "btm": 109, "textmatchermodel": [109, 114], "searchtri": 109, "datematcherutil": 110, "setinputformat": [110, 185], "setoutputformat": [110, 112], "desir": [110, 112], "yyyi": [110, 112], "mm": [110, 112, 170], "dd": [110, 112, 113], "Not": [110, 120, 184], "setreadmonthfirst": 110, "juli": 110, "5th": 110, "2015": 110, "07": 110, "05": 110, "setdefaultdaywhenmiss": 110, "setanchordateyear": [110, 112], "anchor": [110, 112], "year": [110, 112, 141, 143, 163, 218], "setanchordatemonth": [110, 112], "januari": [110, 112], "setanchordatedai": [110, 112], "setrelaxedfactorystrategi": 110, "matchstrategi": [110, 193], "match_first": [110, 113, 193], "relax": 110, "exhaust": 110, "setaggressivematch": 110, "aggress": 110, "attempt": [110, 158], "ambigu": 110, "aggressivematch": 110, "1978": [110, 112], "28": [110, 112, 118, 181, 199, 210, 220, 228], "1984": [110, 112], "04": [110, 112], "02": [110, 112], "1980": [110, 112], "31st": [110, 112], "april": [110, 112], "2008": [110, 112], "fri": [110, 112], "1997": [110, 112], "jan": [110, 112], "sun": [110, 112], "1st": [110, 112], "thursdai": [110, 112], "wednesdai": [110, 112], "todai": [110, 112, 148, 220], "yesterdai": [110, 112], "0600h": [110, 112], "06": [110, 112], "00": [110, 112], "6pm": [110, 112], "23": [110, 112, 113, 121, 131, 218, 219, 220, 235], "1988": [110, 112], "31": [110, 112, 113, 121, 131, 218], "dateformat": [110, 112], "readmonthfirst": [110, 112], "defaultdaywhenmiss": [110, 112], "anchordateyear": [110, 112], "anchordatemonth": [110, 112], "anchordatedai": [110, 112], "15": [110, 220], "saw": 112, "visit": [112, 125], "57": [112, 121], "65": [112, 121], "regexmatch": 113, "d": [113, 123, 167, 227], "1970": 113, "setrul": 113, "setexternalrul": 113, "match_al": [113, 193], "match_complet": [113, 193], "externalrul": 113, "ceremoni": 113, "setstrategi": 113, "71": 113, "short_dat": 113, "regexmatchermodel": 113, "regardless": 114, "entityvalu": 114, "buildfromtoken": 114, "27": [114, 131, 133, 218], "48": [114, 170, 220], "setentityvalu": 114, "setbuildfromtoken": 114, "null": 115, "empti": [115, 154, 172, 181], "enablecumul": 115, "join": [115, 131, 185, 218], "setenablecumul": 115, "nerapproach": 117, "recogn": [117, 118, 119, 120, 121, 122, 156], "setminepoch": [117, 119], "setrandomse": [117, 120, 127, 146], "getlabelcolumn": [117, 162], "friendli": [118, 125, 146], "whitelist": [118, 165], "setwhitelist": [118, 165], "outsid": 118, "prefix": [118, 138, 165, 167, 207, 225], "preserveposit": [118, 166, 186], "14": [118, 131, 168, 181, 199, 210, 218], "ekeu": [118, 119, 120, 181, 199, 210], "36": [118, 131, 181, 199, 210, 218, 220], "baghdad": [118, 119, 120, 181, 199, 210], "37": [118, 181, 199, 210], "setpreserveposit": [118, 166, 186], "setnerhasnoschema": 118, "nercrf": 119, "nercrfapproach": [119, 120], "nercrfmodel": [119, 120], "crf": [119, 120], "2003": [119, 120, 170, 215, 235], "exclud": [119, 120], "setexternalfeatur": 119, "minepoch": [119, 120], "l2": 119, "c0": 119, "decai": [119, 120], "2250000": 119, "lossep": 119, "ep": 119, "minw": 119, "includeconfid": [119, 120], "confid": [119, 120, 122], "externalfeatur": 119, "nerdlapproach": [119, 120, 215, 235], "trainingdata": [119, 120, 134, 158, 159, 215], "readdataset": [119, 120, 131, 170, 215, 216, 218, 219, 220, 235], "conll2003": [119, 120, 215, 235], "eng": [119, 120, 215, 235], "setl2": 119, "l2valu": 119, "setc0": 119, "c0valu": 119, "setlossep": 119, "setminw": 119, "setincludeconfid": [119, 120], "verbosevalu": 119, "prerequisit": [119, 120, 121, 229], "nerdl": 120, "char": [120, 123, 134], "bilstm": 120, "tagger": [120, 218, 235], "real": [120, 147, 149, 150, 151, 200, 207, 225], "rage": 120, "graphfold": [120, 156], "usecontrib": 120, "contrib": 120, "cell": [120, 185], "slightli": [120, 134], "includeallconfidencescor": 120, "enablememoryoptim": 120, "slow": 120, "usebestmodel": 120, "bestmodelmetr": 120, "micro": 120, "macro": 120, "setgraphfold": [120, 156, 162], "setusecontrib": 120, "setpo": 120, "setincludeallconfidencescor": 120, "setenablememoryoptim": 120, "setusebestmodel": 120, "setbestmodelmetr": 120, "nermodel": 120, "neroverwrit": 121, "setnewresult": 121, "nerword": 121, "overwritten": 121, "newnerent": 121, "lab": 121, "42": [121, 131], "45": [121, 131, 218, 220], "47": [121, 218, 220], "ner_overwritten": 121, "setnerword": 121, "setnewnerent": 121, "cardin": 121, "setreplaceent": 121, "rw": 121, "zeroshotnermodel": 122, "zeroshotn": 122, "zer_shot_n": 122, "entitydefinit": 122, "citi": 122, "town": 122, "predictionthreshold": 122, "01f": 122, "ignoreent": 122, "zero_shot_n": 122, "setentitydefinit": 122, "hellen": 122, "5328949": 122, "9360068": 122, "83294415": 122, "45366877": 122, "setpredictionthreshold": 122, "zero_shot_ner_roberta": 122, "shortcut": 122, "stem": [123, 160, 181, 210, 233, 234], "henc": 123, "pl": [123, 145], "slangdictionari": 123, "slang": 123, "minlength": [123, 133, 134, 166, 167], "maxlength": [123, 133, 134, 166, 167], "setcleanuppattern": 123, "punctuat": [123, 133], "alphanumer": 123, "za": 123, "z": [123, 138, 167], "brother": 123, "dont": [123, 137], "setslangdictionari": 123, "setminlength": [123, 133, 134, 166, 167], "setmaxlength": [123, 133, 134, 166, 167], "normalizermodel": 123, "openaicomplet": 125, "request": [125, 126, 152], "complet": [125, 138, 152, 207, 226, 229], "executor": [125, 126], "doc": [125, 126, 156, 214, 219, 235], "suffix": [125, 138, 165, 167, 229], "insert": [125, 158, 159, 229], "maxtoken": 125, "nucleu": 125, "mass": 125, "numberofcomplet": 125, "logprob": 125, "echo": 125, "presencepenalti": [125, 138], "penal": [125, 138], "topic": 125, "frequencypenalti": [125, 138], "verbatim": 125, "bestof": 125, "best_of": 125, "server": [125, 138, 234], "side": [125, 140, 170], "logitbia": 125, "abus": [125, 126], "pleasur": 125, "dine": 125, "fiorita": 125, "truli": 125, "delight": 125, "menu": 125, "boast": 125, "wonder": 125, "classic": 125, "dish": 125, "exquisit": 125, "prepar": [125, 171, 173, 179, 182], "staff": [125, 136], "227": 125, "barbecu": 125, "joe": 125, "dinner": 125, "amaz": 125, "pull": [125, 152], "pork": 125, "smoke": 125, "turkei": 125, "brisket": 125, "rib": 125, "sandwich": 125, "opt": 125, "172": 125, "overallr": 125, "reviewbodi": 125, "enjoi": [125, 140], "meal": 125, "restaur": [125, 136], "flavour": 125, "beautifulli": 125, "setmodel": [125, 126, 134], "setsuffix": [125, 165], "setmaxtoken": 125, "plu": [125, 141], "max_token": 125, "cannot": 125, "settemperatur": [125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "determinist": 125, "alter": 125, "settopp": [125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "compris": 125, "setnumberofcomplet": 125, "consum": 125, "quota": 125, "ensur": [125, 147, 148, 152, 202], "setlogprob": 125, "respons": [125, 134, 143, 144, 149, 152], "setecho": 125, "setstop": 125, "setpresencepenalti": [125, 138], "setfrequencypenalti": [125, 138], "setbestof": 125, "control": [125, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 194], "candid": [125, 156, 158, 159, 167], "setlogitbia": 125, "mathemat": [125, 140], "ban": 125, "exclus": 125, "50256": 125, "prevent": 125, "endoftext": 125, "setus": [125, 126], "openaiembed": 126, "empty_df": 126, "sample_text": 126, "delici": 126, "waiter": 126, "sample_df": 126, "002297497": 126, "009297881": 126, "015739758": 126, "0076794787": 126, "004737794": 126, "01487661": 126, "009856389": 126, "03823238": 126, "0069305706": 126, "028610818": 126, "025208998": 126, "018138802": 126, "0036271256": 126, "025539026": 126, "204275e": 126, "016374426": 126, "02828079": 126, "0054073683": 126, "009710415": 126, "016399812": 126, "015397037": 126, "00427766": 126, "006987691": 126, "0072859847": 126, "003874646": 126, "018544989": 126, "008752067": 126, "022657635": 126, "011493831": 126, "023901584": 126, "015638212": 126, "0035192322": 126, "034932107": 126, "0041919798": 126, "02612292": 126, "021515233": 126, "005715182": 126, "011754045": 126, "008453773": 126, "004080913": 126, "019179657": 126, "014419649": 126, "00893612": 126, "0063911034": 126, "045670684": 126, "017884934": 126, "005610462": 126, "219344e": 126, "02211182": 126, "0039539794": 126, "021007499": 126, "017631067": 126, "011696924": 126, "02260686": 126, "016336346": 126, "017174106": 126, "008466466": 126, "0015922225": 126, "025094759": 126, "024967825": 126, "007806412": 126, "005794516": 126, "022187982": 126, "0029162979": 126, "0060959826": 126, "025564414": 126, "008104706": 126, "0010178483": 126, "9823447e": 126, "0046425937": 126, "02074094": 126, "013467647": 126, "004626727": 126, "016006319": 126, "0166156": 126, "008948814": 126, "007616012": 126, "013619968": 126, "0069749975": 126, "0052677416": 126, "009881775": 126, "04592455": 126, "0030464048": 126, "024003131": 126, "02301305": 126, "006981344": 126, "023571556": 126, "009938896": 126, "006537077": 126, "033332746": 126, "002690991": 126, "019928563": 126, "0017596161": 126, "001090835": 126, "022683023": 126, "005007528": 126, "01540973": 126, "031530287": 126, "0054676617": 126, "015980931": 126, "0051471544": 126, "019890483": 126, "009386734": 126, "0062133963": 126, "031174876": 126, "009405775": 126, "015270104": 126, "028864685": 126, "021020193": 126, "018303815": 126, "0029210579": 126, "012693353": 126, "005102728": 126, "049580235": 126, "04300508": 126, "1293065e": 126, "0215787": 126, "016894853": 126, "0065434235": 126, "041431103": 126, "662815e": 126, "03351045": 126, "0128901": 126, "010510096": 126, "807209e": 126, "01835459": 126, "2869726e": 126, "01309954": 126, "011982525": 126, "005813556": 126, "0070194243": 126, "008637827": 126, "018456135": 126, "5521466e": 126, "019141577": 126, "021896034": 126, "02975322": 126, "0043220865": 126, "0015160623": 126, "0052074483": 126, "0149527695": 126, "0213883": 126, "018836936": 126, "01105591": 126, "0074636918": 126, "022632249": 126, "0036810723": 126, "006286383": 126, "025678653": 126, "027773056": 126, "03668379": 126, "00445854": 126, "013911915": 126, "008015852": 126, "0056739287": 126, "010281616": 126, "0057659554": 126, "00872668": 126, "010649723": 126, "0787844e": 126, "032164957": 126, "023838118": 126, "002641804": 126, "030387888": 126, "029626286": 126, "016602905": 126, "0021784967": 126, "0010519617": 126, "0116524985": 126, "018519603": 126, "007552545": 126, "007419265": 126, "0011090817": 126, "0044331537": 126, "009989669": 126, "007533505": 126, "0061943564": 126, "0057088356": 126, "028230017": 126, "0042554466": 126, "029321646": 126, "024790118": 126, "015676292": 126, "018202268": 126, "0075017717": 126, "00865052": 126, "0063942764": 126, "0020118963": 126, "036963046": 126, "002335577": 126, "020804405": 126, "6888937": 126, "019598536": 126, "0034748053": 126, "0067401705": 126, "02835695": 126, "023393849": 126, "0071527045": 126, "010586256": 126, "0096088685": 126, "009488282": 126, "021337526": 126, "6766098e": 126, "019801632": 126, "0022705235": 126, "009558095": 126, "0020753632": 126, "708839e": 126, "0066449703": 126, "04130417": 126, "011220924": 126, "013391487": 126, "027722282": 126, "011366897": 126, "4434706e": 126, "015460504": 126, "549375e": 126, "01449581": 126, "008529933": 126, "018875016": 126, "017745307": 126, "009437508": 126, "024587024": 126, "013010687": 126, "008993241": 126, "005093208": 126, "024218917": 126, "024066597": 126, "0037857925": 126, "031047942": 126, "015003543": 126, "023266915": 126, "03021018": 126, "0069115306": 126, "010154682": 126, "011430364": 126, "030311726": 126, "01764376": 126, "0020975766": 126, "006746517": 126, "009748495": 126, "01665368": 126, "003658859": 126, "02789999": 126, "0040682196": 126, "0031289116": 126, "029905539": 126, "016882159": 126, "0021689767": 126, "023228835": 126, "011773085": 126, "014292715": 126, "019827018": 126, "029575512": 126, "0015803224": 126, "018405361": 126, "002776671": 126, "019370057": 126, "027569963": 126, "008460119": 126, "012445833": 126, "0028322043": 126, "0052804346": 126, "006422837": 126, "009335961": 126, "02354617": 126, "0010345082": 126, "018900402": 126, "0029908712": 126, "0068544107": 126, "010148335": 126, "007939693": 126, "0072796377": 126, "020537846": 126, "010928977": 126, "029880153": 126, "0038492593": 126, "002795711": 126, "01892579": 126, "029956313": 126, "024612412": 126, "00446806": 126, "026452947": 126, "017605681": 126, "041177236": 126, "02018243": 126, "014648129": 126, "021553313": 126, "0015017823": 126, "0034874987": 126, "034170505": 126, "036125284": 126, "02805231": 126, "018430749": 126, "003404992": 126, "009329614": 126, "020766325": 126, "012560072": 126, "01707256": 126, "011538258": 126, "007711212": 126, "01332802": 126, "007412918": 126, "022492621": 126, "0059055826": 126, "025754813": 126, "01904003": 126, "013353407": 126, "0026005507": 126, "022530701": 126, "007895266": 126, "842112e": 126, "028103083": 126, "013962688": 126, "019979337": 126, "02115982": 126, "0029305778": 126, "01340418": 126, "01609517": 126, "011880978": 126, "016793307": 126, "0048837676": 126, "013036073": 126, "025767507": 126, "030337114": 126, "022454541": 126, "018824242": 126, "0019785764": 126, "006146756": 126, "0021055099": 126, "0014525956": 126, "011157458": 126, "005293128": 126, "011468444": 126, "021591393": 126, "0051535014": 126, "005597769": 126, "1935701e": 126, "012731433": 126, "0034208586": 126, "024688572": 126, "0018103895": 126, "001299482": 126, "005461315": 126, "024878971": 126, "030565593": 126, "016717145": 126, "013226474": 126, "008764761": 126, "007355798": 126, "0070638508": 126, "005734222": 126, "012084072": 126, "023749264": 126, "028813912": 126, "015892077": 126, "0033573918": 126, "0052201413": 126, "01672984": 126, "0014105488": 126, "02184526": 126, "019560456": 126, "0063752364": 126, "008777454": 126, "00418246": 126, "013861141": 126, "012877407": 126, "009500975": 126, "005804036": 126, "0013859555": 126, "025335932": 126, "01779608": 126, "01537165": 126, "0019722297": 126, "011081297": 126, "0073875315": 126, "0015795291": 126, "015968239": 126, "013454954": 126, "0026592575": 126, "0020944031": 126, "014140395": 126, "0023339903": 126, "0064989966": 126, "0030828982": 126, "0046870206": 126, "013239168": 126, "017491441": 126, "011106684": 126, "029702445": 126, "003696939": 126, "013784981": 126, "017250266": 126, "0037762725": 126, "021413686": 126, "017047172": 126, "019268509": 126, "006898837": 126, "013924608": 126, "009266147": 126, "0023577902": 126, "020905953": 126, "005264568": 126, "0014875022": 126, "0064513967": 126, "003044818": 126, "0073431046": 126, "0012431552": 126, "0021166166": 126, "0019404964": 126, "018646536": 126, "6913787e": 126, "01518125": 126, "0013581888": 126, "016755225": 126, "5418405e": 126, "0076921717": 126, "016780613": 126, "56008e": 126, "010948017": 126, "956349e": 126, "006108676": 126, "011290737": 126, "027443029": 126, "008910734": 126, "012858367": 126, "016844079": 126, "017592987": 126, "01476237": 126, "0039793663": 126, "008066626": 126, "0018421229": 126, "03422128": 126, "016526746": 126, "022200674": 126, "0010051549": 126, "004474407": 126, "6767073e": 126, "007749292": 126, "026249854": 126, "006670357": 126, "014775063": 126, "02589444": 126, "0023530303": 126, "0066068904": 126, "0067147836": 126, "0012542619": 126, "018671922": 126, "0022498968": 126, "0048552076": 126, "0031463648": 126, "0217691": 126, "011849245": 126, "0026735375": 126, "011024177": 126, "01733912": 126, "0073621445": 126, "012407753": 126, "0032939252": 126, "0072288644": 126, "014457729": 126, "0011781019": 126, "009615215": 126, "0141150085": 126, "025376e": 126, "04615303": 126, "031631835": 126, "005131288": 126, "006594197": 126, "025386706": 126, "028204631": 126, "023482703": 126, "013086847": 126, "022314915": 126, "2082416e": 126, "023457317": 126, "006013476": 126, "0125029525": 126, "0021404168": 126, "023977743": 126, "0033542186": 126, "029423192": 126, "0019960299": 126, "0076477453": 126, "080113e": 126, "030413274": 126, "008790147": 126, "013493034": 126, "078089505": 126, "004842514": 126, "015232024": 126, "00825068": 126, "036785338": 126, "335175e": 126, "03891782": 126, "004680674": 126, "005451795": 126, "012134845": 126, "02490436": 126, "007101931": 126, "026351402": 126, "0043093935": 126, "0059595294": 126, "024561638": 126, "019331977": 126, "02385081": 126, "008206253": 126, "015942851": 126, "027138388": 126, "01521933": 126, "0043728603": 126, "025500946": 126, "026173694": 126, "0011558884": 126, "023381157": 126, "0016207825": 126, "001237602": 126, "0049916613": 126, "0024085636": 126, "015587438": 126, "0048203007": 126, "35144e": 126, "012255432": 126, "0048742476": 126, "0062546497": 126, "04051718": 126, "0051090745": 126, "016932933": 126, "0016660026": 126, "02774767": 126, "050976507": 126, "03043866": 126, "0028655245": 126, "0023292303": 126, "0104275895": 126, "004360167": 126, "011144764": 126, "024282385": 126, "013988075": 126, "016234798": 126, "014698903": 126, "037673872": 126, "0054644886": 126, "020461684": 126, "012598153": 126, "012363326": 126, "002833791": 126, "0029274046": 126, "01243314": 126, "0037413659": 126, "012820287": 126, "0070511578": 126, "017364508": 126, "0025545373": 126, "0034843255": 126, "009773882": 126, "0010368882": 126, "009894469": 126, "330013e": 126, "008237986": 126, "0013804021": 126, "0035890455": 126, "029194713": 126, "022721102": 126, "026605267": 126, "011151111": 126, "0054200618": 126, "0043919003": 126, "0022181633": 126, "0025402573": 126, "015562051": 126, "021984888": 126, "025145533": 126, "008422039": 126, "0032590183": 126, "008130092": 126, "0019309763": 126, "009278841": 126, "981743e": 126, "04363975": 126, "008510893": 126, "011360551": 126, "025069373": 126, "004252273": 126, "011132071": 126, "020474378": 126, "014889303": 126, "01896387": 126, "0075461986": 126, "012096765": 126, "030489434": 126, "012166579": 126, "032393437": 126, "0035763523": 126, "009018627": 126, "007438305": 126, "0064196633": 126, "025056679": 126, "012230045": 126, "821482e": 126, "0124839125": 126, "0014454556": 126, "012744127": 126, "007159051": 126, "010402203": 126, "010053135": 126, "0042808335": 126, "0025307373": 126, "004128513": 126, "010890896": 126, "025716733": 126, "024155451": 126, "04023793": 126, "015257411": 126, "0129154865": 126, "013264554": 126, "028636204": 126, "023520783": 126, "004890114": 126, "008022199": 126, "016184025": 126, "051535014": 126, "011792125": 126, "009291534": 126, "031707995": 126, "039476328": 126, "004699714": 126, "014216555": 126, "01480045": 126, "0065053436": 126, "0044997935": 126, "021705633": 126, "0904366e": 126, "019585844": 126, "0036842457": 126, "455769e": 126, "006727477": 126, "0108718565": 126, "0046076872": 126, "0303625": 126, "02967706": 126, "026554495": 126, "014825836": 126, "009786575": 126, "009285187": 126, "020931339": 126, "003630299": 126, "004693367": 126, "009589829": 126, "013886528": 126, "017694535": 126, "027493803": 126, "004982141": 126, "0071717445": 126, "03297733": 126, "007571585": 126, "006276863": 126, "016069785": 126, "0464047e": 126, "0025450173": 126, "015358957": 126, "018494215": 126, "7068556e": 126, "027646123": 126, "0011114617": 126, "013429567": 126, "007920653": 126, "0050011813": 126, "013543808": 126, "014381569": 126, "0047346205": 126, "018798856": 126, "019674698": 126, "012629886": 126, "029803993": 126, "009862735": 126, "0033732585": 126, "013048767": 126, "009456548": 126, "03815622": 126, "286778e": 126, "0040301397": 126, "014254635": 126, "0038809928": 126, "016666373": 126, "6997105e": 126, "017351814": 126, "015549357": 126, "02952474": 126, "00431574": 126, "009818309": 126, "470635e": 126, "011404978": 126, "025082065": 126, "021908727": 126, "018951176": 126, "022936888": 126, "013658048": 126, "004671154": 126, "0296009": 126, "0127949": 126, "018341895": 126, "6842424e": 126, "01292818": 126, "0036429923": 126, "030083247": 126, "00215311": 126, "024206225": 126, "02619908": 126, "009837349": 126, "010256229": 126, "008168173": 126, "0100340955": 126, "013150314": 126, "02188334": 126, "010935323": 126, "008371267": 126, "00857436": 126, "0036144322": 126, "009697721": 126, "007863532": 126, "018100722": 126, "019446217": 126, "023495397": 126, "0037032857": 126, "009380388": 126, "027265321": 126, "007140011": 126, "015193944": 126, "004556914": 126, "013632661": 126, "0056358487": 126, "01040855": 126, "0050519546": 126, "008155479": 126, "9020106e": 126, "032571144": 126, "0048076073": 126, "0060293428": 126, "016031705": 126, "021781793": 126, "0015866691": 126, "0016088824": 126, "024752038": 126, "0019547765": 126, "012369673": 126, "015320877": 126, "012706046": 126, "009082094": 126, "010249883": 126, "019128883": 126, "02543748": 126, "0084982": 126, "0032970984": 126, "012991647": 126, "022479929": 126, "02316537": 126, "0012312552": 126, "0042840065": 126, "018227655": 126, "005731049": 126, "02604676": 126, "006689397": 126, "006305423": 126, "018075334": 126, "019484296": 126, "01783416": 126, "0012130085": 126, "015866691": 126, "020626698": 126, "039882515": 126, "008682254": 126, "0022546567": 126, "009323268": 126, "035871416": 126, "014330796": 126, "0145465825": 126, "023216143": 126, "011531911": 126, "020372832": 126, "00641649": 126, "013531114": 126, "016437892": 126, "013124927": 126, "019814324": 126, "0015136823": 126, "016247492": 126, "004753661": 126, "013823061": 126, "007907959": 126, "027113002": 126, "009932549": 126, "009659641": 126, "0044807536": 126, "009850042": 126, "014191168": 126, "042954307": 126, "024701266": 126, "01059895": 126, "0047885673": 126, "021629473": 126, "006651317": 126, "031098714": 126, "0058262493": 126, "0051249415": 126, "0065180366": 126, "0519563e": 126, "009792922": 126, "0423958": 126, "010992444": 126, "008739374": 126, "002449817": 126, "012045992": 126, "014089622": 126, "0018310162": 126, "014406956": 126, "033180423": 126, "0052709146": 126, "0016802826": 126, "012750473": 126, "018329201": 126, "005750089": 126, "048234742": 126, "01771992": 126, "009240761": 126, "789961e": 126, "017669147": 126, "01730104": 126, "0026529108": 126, "022543395": 126, "017288346": 126, "007971426": 126, "019065415": 126, "007857186": 126, "0481933e": 126, "016488666": 126, "709636e": 126, "009348654": 126, "0049281945": 126, "0059436625": 126, "020956725": 126, "003538272": 126, "0038905127": 126, "0016485492": 126, "0044141137": 126, "01271874": 126, "01483853": 126, "01245218": 126, "0023657237": 126, "0037794458": 126, "5497736e": 126, "00882188": 126, "015815917": 126, "016767919": 126, "005185235": 126, "018049948": 126, "007685825": 126, "21934114": 126, "012007912": 126, "005039261": 126, "037445392": 126, "4307736e": 126, "031403355": 126, "0018468829": 126, "0024656837": 126, "01722488": 126, "013213781": 126, "011512871": 126, "0015811158": 126, "0035287521": 126, "0062419563": 126, "0048456877": 126, "025120145": 126, "023800036": 126, "0269697e": 126, "03554139": 126, "01071319": 126, "2110125e": 126, "017313734": 126, "03777542": 126, "0019944431": 126, "04402055": 126, "02442201": 126, "018976564": 126, "005873849": 126, "006924224": 126, "003865126": 126, "0057437425": 126, "0038206992": 126, "013163007": 126, "01646328": 126, "02446009": 126, "018748082": 126, "027239935": 126, "0032479118": 126, "03653147": 126, "015206637": 126, "018773468": 126, "00643553": 126, "010141989": 126, "009183641": 126, "02025859": 126, "019852404": 126, "006054729": 126, "010630683": 126, "009481935": 126, "059881e": 126, "03005786": 126, "014851223": 126, "014280022": 126, "003274885": 126, "0014168955": 126, "025005905": 126, "9089613e": 126, "022302222": 126, "008999587": 126, "010097562": 126, "024942439": 126, "012807593": 126, "019547764": 126, "034957495": 126, "026833748": 126, "7683392e": 126, "0068417173": 126, "011182844": 126, "016907547": 126, "03013402": 126, "0041062995": 126, "014571969": 126, "02070286": 126, "011335164": 126, "012725086": 126, "8341785e": 126, "0013653288": 126, "017859548": 126, "0056802756": 126, "006556117": 126, "0033002717": 126, "011398631": 126, "010954363": 126, "055139925": 126, "009424815": 126, "004959928": 126, "028788524": 126, "0031241516": 126, "0027465243": 126, "036810722": 126, "0031828582": 126, "005543822": 126, "0026053106": 126, "6973375e": 126, "017935708": 126, "0015406557": 126, "0023911104": 126, "016945627": 126, "0035636588": 126, "02396505": 126, "01911619": 126, "0029448578": 126, "033408906": 126, "020550538": 126, "01294722": 126, "011500178": 126, "011988872": 126, "025424786": 126, "011887325": 126, "038587794": 126, "003395472": 126, "007946039": 126, "019966645": 126, "033713546": 126, "018189576": 126, "026859134": 126, "012223699": 126, "024802811": 126, "099946e": 126, "0010448216": 126, "005020221": 126, "012356979": 126, "007590625": 126, "03089562": 126, "014521196": 126, "017212186": 126, "024917051": 126, "020169739": 126, "044680603": 126, "005658062": 126, "013835755": 126, "3776127e": 126, "0028496578": 126, "006467263": 126, "053007443": 126, "011614418": 126, "0056453687": 126, "16145945": 126, "0091963345": 126, "024548944": 126, "016425198": 126, "015701678": 126, "862344e": 126, "023190755": 126, "0074509983": 126, "018088028": 126, "010205456": 126, "010383163": 126, "033028103": 126, "0023324036": 126, "019052723": 126, "016590212": 126, "4408938e": 126, "02324153": 126, "019623924": 126, "0383847": 126, "002686231": 126, "0010852817": 126, "0076223584": 126, "002762391": 126, "030540207": 126, "0037667525": 126, "011005137": 126, "0017850028": 126, "005984916": 126, "0029353378": 126, "02555172": 126, "00855532": 126, "010287963": 126, "2544602e": 126, "0065624635": 126, "017808774": 126, "03528752": 126, "013188394": 126, "027925376": 126, "0014248289": 126, "009342308": 126, "0017247093": 126, "023596942": 126, "004709234": 126, "037369233": 126, "016082479": 126, "0011963486": 126, "00222451": 126, "014165782": 126, "0014414889": 126, "0058865426": 126, "2633766e": 126, "012274472": 126, "011328817": 126, "0020372833": 126, "0013026553": 126, "00635937": 126, "00651169": 126, "0024672705": 126, "0026640175": 126, "0033669118": 126, "0074763848": 126, "311968e": 126, "023444623": 126, "017656455": 126, "0065243836": 126, "021832567": 126, "02320345": 126, "015092397": 126, "034119733": 126, "025983294": 126, "021324834": 126, "015663598": 126, "00417294": 126, "014965463": 126, "014203862": 126, "0074319583": 126, "007381185": 126, "0035446188": 126, "009310574": 126, "02562788": 126, "01101783": 126, "009050361": 126, "010484709": 126, "005835769": 126, "0036620323": 126, "0055565154": 126, "028712364": 126, "033586614": 126, "027087616": 126, "019509684": 126, "005166195": 126, "020042805": 126, "019903177": 126, "010738577": 126, "038816273": 126, "014990849": 126, "025412092": 126, "030464048": 126, "009158255": 126, "046609994": 126, "9095457e": 126, "0016675893": 126, "012921833": 126, "2828116e": 126, "0033288319": 126, "10784273": 126, "022898808": 126, "020563232": 126, "020487072": 126, "0063117696": 126, "005299475": 126, "013442261": 126, "0112590045": 126, "015282797": 126, "013581888": 126, "023723876": 126, "00847916": 126, "025221692": 126, "028686978": 126, "8655227e": 126, "005169368": 126, "0765446e": 126, "011436711": 126, "004963101": 126, "0067592105": 126, "007527158": 126, "029854767": 126, "0072098244": 126, "011246311": 126, "009945242": 126, "017326428": 126, "004052353": 126, "011684231": 126, "311375e": 126, "026986068": 126, "012801247": 126, "0023815904": 126, "047600072": 126, "006886144": 126, "004464887": 126, "9809546e": 126, "018684616": 126, "022924196": 126, "0070575043": 126, "0037730993": 126, "025830973": 126, "029651672": 126, "0046140337": 126, "041710358": 126, "0058960626": 126, "0018706829": 126, "0065878504": 126, "0067338236": 126, "0011431951": 126, "020233205": 126, "008218946": 126, "015930157": 126, "0024022171": 126, "0051439814": 126, "0120777255": 126, "00895516": 126, "010116602": 126, "038638566": 126, "0056231553": 126, "840722e": 126, "009754842": 126, "0074256114": 126, "0011773085": 126, "7314436e": 126, "02014435": 126, "010186416": 126, "0067211306": 126, "015828611": 126, "0043665133": 126, "0112526575": 126, "031073328": 126, "018126108": 126, "014432343": 126, "0021118566": 126, "017389894": 126, "023635022": 126, "0062736897": 126, "040187154": 126, "006905184": 126, "0068163304": 126, "0087838005": 126, "010072175": 126, "00832684": 126, "01061799": 126, "01268066": 126, "0137088215": 126, "007926999": 126, "01711064": 126, "00885996": 126, "015422424": 126, "0052011013": 126, "022327607": 126, "0092280675": 126, "022251448": 126, "0045251804": 126, "5886433e": 126, "020360138": 126, "021870647": 126, "013251861": 126, "027595349": 126, "01094167": 126, "011550951": 126, "0033034452": 126, "026072146": 126, "030032473": 126, "00411582": 126, "012185619": 126, "0096215615": 126, "002618004": 126, "006575157": 126, "03675995": 126, "010986097": 126, "023673104": 126, "011900018": 126, "016044399": 126, "0040206197": 126, "018722696": 126, "0038873393": 126, "011163804": 126, "01919235": 126, "015790531": 126, "0013692954": 126, "011836552": 126, "005096381": 126, "031200262": 126, "0358968": 126, "009126521": 126, "013696128": 126, "014711596": 126, "018608455": 126, "03922246": 126, "0179484": 126, "0069178776": 126, "010909937": 126, "013569194": 126, "019839711": 126, "024447398": 126, "01086551": 126, "010294309": 126, "024726652": 126, "016679065": 126, "0013145554": 126, "004617207": 126, "004690194": 126, "013315327": 126, "0112653505": 126, "0016009491": 126, "003998406": 126, "025272466": 126, "0030051514": 126, "007869879": 126, "031251036": 126, "005375635": 126, "0046203807": 126, "0030099114": 126, "0071273176": 126, "012020606": 126, "016285572": 126, "033865865": 126, "04290353": 126, "009107481": 126, "007400225": 126, "018253041": 126, "016704453": 126, "003957153": 126, "022644943": 126, "0074446513": 126, "012122152": 126, "0013796088": 126, "019014644": 126, "026909908": 126, "003035298": 126, "012153885": 126, "020499766": 126, "006010303": 126, "004026966": 126, "3466855e": 126, "001078935": 126, "0051725414": 126, "0014906756": 126, "009526362": 126, "016310958": 126, "010357776": 126, "0145338895": 126, "015993625": 126, "025259772": 126, "036937658": 126, "0044014202": 126, "008713987": 126, "003931766": 126, "0053597684": 126, "02797615": 126, "020093577": 126, "004550567": 126, "024434704": 126, "0029956312": 126, "6632223e": 126, "51248e": 126, "028915457": 126, "023470009": 126, "008675907": 126, "014013462": 126, "0031527115": 126, "0018865496": 126, "0033986452": 126, "040974144": 126, "002589444": 126, "0018516429": 126, "049504075": 126, "00884092": 126, "004541047": 126, "014076929": 126, "015473197": 126, "0027211376": 126, "031327195": 126, "041126464": 126, "018595763": 126, "0104593225": 126, "01938275": 126, "0027592175": 126, "classifierencod": 127, "attach": [127, 128, 189, 194, 205, 207], "evaluationdlparam": 128, "setevaluationlogextend": 128, "setenableoutputlog": [128, 207, 225], "setoutputlogspath": [128, 134, 207, 225], "assum": 128, "perceptronapproach": [131, 218, 235], "member": [131, 210], "datasetpath": 131, "pierr": [131, 218], "vinken": [131, 218], "34": [131, 218, 220], "md": [131, 218], "vb": [131, 215, 218, 235], "41": [131, 133, 218, 220], "43": [131, 133, 218, 220], "dt": [131, 218, 219, 235], "49": [131, 218], "poscol": [131, 170, 215], "niter": [131, 170], "anc": [131, 218, 235], "trainingperceptrondf": 131, "trainedpo": 131, "setposcolumn": [131, 170], "cd": [131, 215, 218], "setiter": 131, "getniter": [131, 170], "pos_anc": 131, "25": [131, 133, 218, 220], "33": [131, 220], "sentencedetectorparam": 133, "ii": 133, "abbrevi": 133, "period": 133, "geo": 133, "1026": 133, "253": 133, "553": 133, "ellipsi": 133, "quotat": 133, "mark": [133, 134, 170], "exclam": 133, "breaker": 133, "pragmaticcontentformatt": 133, "custombound": [133, 134], "setcustombound": [133, 134], "usecustomboundsonli": [133, 134], "explodesent": [133, 134, 215, 216], "useabbrevi": 133, "explicitli": [133, 134, 161, 199, 229], "customboundsstrategi": 133, "prepend": [133, 172], "break": [133, 148], "append": [133, 156, 229], "parallel": [133, 134, 181, 215, 233], "splitlength": [133, 134], "forcibli": [133, 134], "99999": [133, 134, 167], "detectlist": 133, "nhow": 133, "setcustomboundsstrategi": 133, "setuseabbrevi": 133, "setdetectlist": 133, "setusecustomboundsonli": [133, 134], "setexplodesent": [133, 134], "setsplitlength": [133, 134], "sentencedetectordl": [134, 146], "sentencedetectordlapproach": 134, "sentencedetectordlmodel": [134, 146], "modelarchitectur": 134, "impossiblepenultim": 134, "imposs": [134, 170], "penultim": 134, "epochsnumb": 134, "eo": 134, "stefan": 134, "schweter": 134, "sajawel": 134, "ahm": 134, "cover": [134, 139, 145, 148, 153, 170], "broken": 134, "moder": 134, "lack": 134, "easier": [134, 175, 231, 235], "polit": 134, "successor": 134, "great": 134, "heritag": [134, 152], "bequeath": 134, "nelson": 134, "mandela": 134, "setepochsnumb": 134, "model_architectur": 134, "validation_split": 134, "epochs_numb": 134, "output_logs_path": 134, "setimpossiblepenultim": 134, "impossible_penultim": 134, "sentencedl": 134, "sentencesdl": 134, "helen": 134, "peopl": 134, "sentimentdetector": 136, "els": 136, "viveknsentimentapproach": [136, 137], "cool": 136, "superb": 136, "uninspir": 136, "sentimentscor": 136, "nice": [136, 207, 225], "entri": [136, 173, 182, 211], "sttr": 136, "sentimentdetectormodel": 136, "sda": [136, 137], "pragmat": 136, "viveknsenti": 137, "analys": 137, "vivek": 137, "narayanan": 137, "give": 137, "transit": [137, 156], "sentimentcol": 137, "prunecorpu": 137, "unfrequ": 137, "scope": 137, "naiv": 137, "bay": 137, "vivekn": 137, "setsentimentcol": 137, "train_senti": 137, "result_senti": 137, "finish": [137, 154, 174, 176, 180, 184, 200], "final_senti": 137, "cast": [137, 171], "horribl": 137, "go": [137, 229], "again": [137, 165], "anyon": 137, "protagonist": 137, "music": 137, "setprunecorpu": 137, "viveknsentimentmodel": 137, "sentiment_vivekn": 137, "autoggufmodel": 138, "settabl": 138, "explan": [138, 156, 232], "phi3": [138, 150], "5_mini_4k_instruct_q4_gguf": 138, "autoggufmodeltest": 138, "nthreadsdraft": 138, "draft": 138, "nthreadsbatchdraft": 138, "ndraft": 138, "specul": 138, "psplit": 138, "ngpulayersdraft": 138, "modeldraft": 138, "modelalia": 138, "alia": [138, 199], "lookupcachestaticfilepath": 138, "updat": [138, 156], "lookupcachedynamicfilepath": 138, "inputprefixbo": 138, "bo": 138, "preced": [138, 229], "systemprompt": 138, "chattempl": [138, 183], "chat": [138, 140, 143, 144, 149, 150, 151, 183], "templat": [138, 183], "inputprefix": 138, "inputsuffix": 138, "infil": 138, "cacheprompt": 138, "rememb": [138, 156], "reprocess": 138, "npredict": 138, "minp": 138, "min": [138, 156], "tfsz": 138, "tail": 138, "free": [138, 146], "typicalp": 138, "typic": [138, 141], "dynatemprang": 138, "dynatempexpon": 138, "expon": 138, "repeatlastn": 138, "repeatpenalti": 138, "presenc": 138, "mirostat": 138, "mirostattau": 138, "entropi": 138, "tau": 138, "mirostateta": 138, "eta": 138, "penalizenl": 138, "newlin": [138, 156], "nkeep": 138, "rng": 138, "nprob": 138, "minkeep": 138, "sampler": 138, "least": [138, 170], "bnf": 138, "penaltyprompt": 138, "ignoreeo": 138, "impli": 138, "inf": 138, "disabletokenid": 138, "stopstr": 138, "usechattempl": 138, "setnpredict": 138, "settopk": [138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "setpenalizenl": 138, "78": [138, 150, 218], "setnthreadsdraft": 138, "setnthreadsbatchdraft": 138, "setndraft": 138, "setpsplit": 138, "setngpulayersdraft": 138, "setmodeldraft": 138, "setmodelalia": 138, "setlookupcachestaticfilepath": 138, "setlookupcachedynamicfilepath": 138, "setembed": 138, "setinputprefixbo": 138, "setsystemprompt": 138, "setchattempl": [138, 183], "setinputprefix": 138, "setinputsuffix": 138, "setcacheprompt": 138, "setminp": 138, "settfsz": 138, "settypicalp": 138, "setdynamictemperaturerang": 138, "dynamictemperaturerang": 138, "setdynamictemperatureexpon": 138, "dynamictemperatureexpon": 138, "setrepeatlastn": 138, "setrepeatpenalti": 138, "setmirostat": 138, "setmirostattau": 138, "setmirostateta": 138, "setnkeep": 138, "setnprob": 138, "setminkeep": 138, "setgrammar": 138, "setpenaltyprompt": 138, "setignoreeo": 138, "setdisabletokenid": 138, "setstopstr": 138, "setsampl": 138, "setusechattempl": 138, "settokenidbia": 138, "tokenidbia": 138, "settokenbia": 138, "tokenbia": 138, "setloraadapt": 138, "loraadapt": 138, "barttransform": 139, "handl": [139, 147, 197, 217], "captur": [139, 154], "past": [139, 146, 211], "incorpor": [139, 150], "versatil": [139, 147, 152], "valuabl": [139, 152], "summari": [139, 140, 141, 143, 145, 147, 148, 149, 150, 151, 153], "distilbart_xsum_12_6": 139, "barttestspec": 139, "cumul": [139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "ignoretokenid": [139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153], "usecach": 139, "ab": 139, "1910": 139, "13461": 139, "pytorch": [139, 145, 148], "fairseq": [139, 145, 148], "arbitrari": 139, "nois": 139, "reconstruct": [139, 186], "tranform": 139, "randomli": 139, "dialogu": [139, 143, 144, 149], "roug": 139, "bleu": [139, 145, 148], "ablat": 139, "influenc": [139, 156], "setmaxoutputlength": [139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "200": [139, 148, 153], "rich": [139, 153], "rise": [139, 153], "methodologi": [139, 153], "landscap": [139, 153], "unifi": [139, 153], "systemat": [139, 153], "dozen": [139, 153], "insight": [139, 153], "coloss": [139, 153], "facilit": [139, 153], "setignoretokenid": [139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "setminoutputlength": [139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 194], "setrepetitionpenalti": [139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "ctrl": [139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "setnorepeatngrams": [139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 194], "setcach": 139, "use_cach": 139, "cpmtransform": 140, "minicpm": 140, "unveil": 140, "seri": [140, 151], "2b": 140, "4b": [140, 151], "close": [140, 143, 144, 149], "mistral": [140, 147], "7b": [140, 143, 144, 147, 149, 150, 151, 152], "chines": [140, 145, 148, 170], "llama2": [140, 143], "13b": [140, 143, 147, 151, 152], "mpt": 140, "30b": 140, "falcon": 140, "40b": 140, "mtbench": 140, "closest": 140, "70b": [140, 143, 144], "vicuna": 140, "33b": [140, 152], "v0": 140, "zephyr": 140, "dpo": 140, "multimodel": 140, "multimod": 140, "phi": [140, 149, 150], "6b": 140, "qwen": [140, 151], "vl": 140, "deploi": [140, 146, 150, 226], "smartphon": 140, "verbal": 140, "cpm": 140, "mini_cpm_2b_8bit": 140, "shengdinghu": 140, "notion": 140, "d4d3a8c426424654a4e80e42a711cb20": 140, "openbmb": 140, "leonardo": [140, 141, 143, 147, 149, 150, 151], "student": [140, 149, 150, 151], "california": [140, 149, 150, 151], "lo": [140, 145], "passion": [140, 149, 150, 151], "cultur": 140, "plai": 140, "basketbal": 140, "gpt2transform": 141, "caus": [141, 167], "goal": [141, 148, 170], "direct": [141, 145, 148, 150], "10x": 141, "synthet": [141, 149, 150], "unpreced": 141, "prime": 141, "lengthi": 141, "benefit": 141, "suffici": 141, "learner": 141, "taskspecif": 141, "webpag": [141, 226], "webtext": 141, "coqa": 141, "exceed": [141, 144], "127": 141, "fashion": [141, 154], "5b": [141, 151], "underfit": 141, "reflect": [141, 145], "paragraph": [141, 156], "promis": 141, "1776": [141, 143], "came": [141, 143], "kingdom": [141, 143], "llama2transform": 143, "4k": [143, 150], "excit": 143, "reinforc": [143, 144, 149], "feedback": [143, 144, 149], "rlhf": [143, 144], "safeti": [143, 144, 148, 149, 150], "chatgpt": 143, "llam2": [143, 149], "facebookresearch": [143, 144], "suitabl": [143, 149], "substitut": [143, 149], "llama_2_7b_chat_hf_int4": [143, 144], "llama3transform": 144, "cut": 144, "8b": [144, 151], "expans": 144, "offer": [144, 147, 229, 231, 234], "known": 144, "llama3": 144, "latest": 144, "meta": [144, 207, 227], "commerci": [144, 146], "aim": [144, 148, 154], "foster": 144, "collabor": [144, 152], "llama_3_7b_chat_hf_int8": 144, "start_header_id": [144, 183], "end_header_id": [144, 183], "minion": 144, "chatbot": 144, "respond": 144, "speak": 144, "assist": [144, 152, 183, 199], "oooh": 144, "yeah": 144, "bana": 144, "na": 144, "setstoptokenid": 144, "llama_3_7b_chat_hf_int4": 144, "m2m100transform": 145, "m2m100": 145, "seq": [145, 148], "900": 145, "m2m100_418m": 145, "srclang": [145, 148], "tgtlang": [145, 148], "afrikaan": [145, 148], "af": 145, "amhar": [145, 148], "arab": [145, 148], "asturian": [145, 148], "ast": 145, "azerbaijani": [145, 148], "az": 145, "bashkir": [145, 148], "ba": 145, "belarusian": [145, 148], "bulgarian": [145, 148], "bg": 145, "bengali": [145, 148], "breton": 145, "br": 145, "bosnian": [145, 148], "catalan": [145, 148], "valencian": 145, "ca": 145, "cebuano": [145, 148], "ceb": 145, "czech": [145, 148], "welsh": [145, 148], "cy": 145, "da": [145, 147], "greeek": 145, "el": 145, "estonian": [145, 148], "persian": [145, 148], "fa": 145, "fulah": 145, "ff": 145, "fi": 145, "western": [145, 148], "frisian": 145, "fy": 145, "irish": [145, 148], "ga": 145, "gaelic": [145, 148], "scottish": [145, 148], "gd": 145, "galician": [145, 148], "gl": 145, "gujarati": [145, 148], "gu": 145, "hausa": [145, 148], "hebrew": [145, 148], "hindi": [145, 148], "croatian": [145, 148], "hr": 145, "haitian": [145, 148], "creol": [145, 148], "ht": 145, "armenian": [145, 148], "hy": 145, "indonesian": [145, 148], "igbo": [145, 148], "ig": 145, "iloko": 145, "ilo": 145, "iceland": [145, 148], "japanes": [145, 148, 170], "ja": 145, "javanes": [145, 148], "jv": 145, "georgian": [145, 148], "ka": 145, "kazakh": [145, 148], "kk": 145, "central": [145, 148, 226], "khmer": [145, 148], "km": 145, "kannada": [145, 148], "kn": 145, "korean": [145, 148, 170], "ko": 145, "luxembourgish": [145, 148], "letzeburgesch": 145, "lb": 145, "ganda": [145, 148], "lg": 145, "lingala": [145, 148], "ln": 145, "lao": [145, 148], "lithuanian": [145, 148], "lt": 145, "latvian": [145, 148], "lv": 145, "malagasi": [145, 148], "mg": 145, "macedonian": [145, 148], "mk": 145, "malayalam": [145, 148], "mongolian": [145, 148], "mn": 145, "marathi": [145, 148], "malai": [145, 148], "burmes": [145, 148], "nepali": [145, 148], "ne": 145, "flemish": 145, "nl": 145, "northern": [145, 148], "sotho": [145, 148], "occitan": [145, 148], "post": [145, 150], "oc": 145, "oriya": 145, "panjabi": [145, 148], "punjabi": 145, "pa": [145, 219, 235], "polish": [145, 148], "pushto": 145, "pashto": [145, 148], "romanian": [145, 148], "moldavian": 145, "moldovan": 145, "ro": 145, "ru": 145, "sindhi": [145, 148], "sd": 145, "sinhala": [145, 148], "sinhales": 145, "si": 145, "slovak": [145, 148], "sk": 145, "slovenian": [145, 148], "sl": 145, "somali": [145, 148], "albanian": [145, 148], "sq": 145, "serbian": [145, 148], "sr": 145, "swati": [145, 148], "ss": 145, "sundanes": [145, 148], "su": 145, "sw": 145, "tamil": [145, 148], "ta": [145, 148], "thai": [145, 148], "th": 145, "tagalog": [145, 148], "tl": 145, "tswana": [145, 148], "tn": 145, "tr": 145, "ukrainian": [145, 148], "uk": 145, "ur": 145, "uzbek": [145, 148], "uz": 145, "vietnames": [145, 148], "vi": 145, "wolof": [145, 148], "wo": 145, "xhosa": [145, 148], "xh": 145, "yiddish": [145, 148], "yi": 145, "yoruba": [145, 148], "yo": 145, "zh": [145, 170], "zulu": [145, 148], "zu": 145, "beyond": [145, 148], "massiv": 145, "worldwid": 145, "mine": [145, 148], "spars": [145, 148], "focu": [145, 148, 150], "wmt": 145, "m2m": 145, "setsrclang": [145, 148], "settgtlang": [145, 148], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [145, 148], "life": [145, 148], "chocol": [145, 148], "mariantransform": 146, "marian": 146, "mainli": 146, "academ": [146, 150], "notabl": [146, 147], "edinburgh": 146, "adam": 146, "mickiewicz": 146, "pozna\u0144": 146, "contributor": 146, "mariannmt": 146, "engin": [146, 163], "behind": [146, 148, 149], "opus_mt_en_fr": 146, "langid": 146, "maxinputlength": 146, "differenti": 146, "toolkit": 146, "setmaxinputlength": 146, "capit": [146, 156], "quell": 146, "capital": 146, "devrait": 146, "savoir": 146, "fran\u00e7ai": 146, "setlangid": 146, "mistraltransform": 147, "34b": [147, 152], "aspect": 147, "strike": 147, "balanc": 147, "rival": [147, 150], "codellama": [147, 152], "latter": 147, "gqa": [147, 151], "quicker": 147, "compromis": 147, "streamlin": [147, 207, 225], "smoother": 147, "slide": [147, 151], "swa": [147, 151], "reliabl": [147, 207, 225], "mistral_7b": 147, "vinci": 147, "invent": 147, "microscop": 147, "No": [147, 148, 216, 228], "late": 147, "16th": 147, "nllbtransform": 148, "nllb": 148, "nllb_distilled_600m_8int": 148, "acehnes": 148, "ace_arab": 148, "latin": 148, "ace_latn": 148, "mesopotamian": 148, "acm_arab": 148, "izzi": 148, "adeni": 148, "acq_arab": 148, "tunisian": 148, "aeb_arab": 148, "afr_latn": 148, "south": 148, "levantin": 148, "ajp_arab": 148, "akan": 148, "aka_latn": 148, "amh_ethi": 148, "north": 148, "apc_arab": 148, "arb_arab": 148, "roman": 148, "arb_latn": 148, "najdi": 148, "ars_arab": 148, "moroccan": 148, "ary_arab": 148, "arz_arab": 148, "assames": 148, "asm_beng": 148, "ast_latn": 148, "awadhi": 148, "awa_deva": 148, "aymara": 148, "ayr_latn": 148, "azb_arab": 148, "azj_latn": 148, "bak_cyrl": 148, "bambara": 148, "bam_latn": 148, "balines": 148, "ban_latn": 148, "bel_cyrl": 148, "bemba": 148, "bem_latn": 148, "ben_beng": 148, "bhojpuri": 148, "bho_deva": 148, "banjar": 148, "bjn_arab": 148, "bjn_latn": 148, "tibetan": 148, "bod_tibt": 148, "bos_latn": 148, "bugines": 148, "bug_latn": 148, "bul_cyrl": 148, "cat_latn": 148, "ceb_latn": 148, "ces_latn": 148, "chokw": 148, "cjk_latn": 148, "kurdish": 148, "ckb_arab": 148, "crimean": 148, "tatar": 148, "crh_latn": 148, "cym_latn": 148, "dan_latn": 148, "deu_latn": 148, "southwestern": 148, "dinka": 148, "dik_latn": 148, "dyula": 148, "dyu_latn": 148, "dzongkha": 148, "dzo_tibt": 148, "greek": 148, "ell_grek": 148, "eng_latn": 148, "esperanto": 148, "epo_latn": 148, "est_latn": 148, "basqu": 148, "eus_latn": 148, "ew": 148, "ewe_latn": 148, "faroes": 148, "fao_latn": 148, "fijian": 148, "fij_latn": 148, "fin_latn": 148, "fon": 148, "fon_latn": 148, "fra_latn": 148, "friulian": 148, "fur_latn": 148, "nigerian": 148, "fulfuld": 148, "fuv_latn": 148, "gla_latn": 148, "gle_latn": 148, "glg_latn": 148, "guarani": 148, "grn_latn": 148, "guj_gujr": 148, "hat_latn": 148, "hau_latn": 148, "heb_hebr": 148, "hin_deva": 148, "chhattisgarhi": 148, "hne_deva": 148, "hrv_latn": 148, "hun_latn": 148, "hye_armn": 148, "ibo_latn": 148, "ilocano": 148, "ilo_latn": 148, "ind_latn": 148, "isl_latn": 148, "ita_latn": 148, "jav_latn": 148, "jpn_jpan": 148, "kabyl": 148, "kab_latn": 148, "jingpho": 148, "kac_latn": 148, "kamba": 148, "kam_latn": 148, "kan_knda": 148, "kashmiri": 148, "kas_arab": 148, "devanagari": 148, "kas_deva": 148, "kat_geor": 148, "kanuri": 148, "knc_arab": 148, "knc_latn": 148, "kaz_cyrl": 148, "kabiy\u00e8": 148, "kbp_latn": 148, "kabuverdianu": 148, "kea_latn": 148, "khm_khmr": 148, "kikuyu": 148, "kik_latn": 148, "kinyarwanda": 148, "kin_latn": 148, "kyrgyz": 148, "kir_cyrl": 148, "kimbundu": 148, "kmb_latn": 148, "kmr_latn": 148, "kikongo": 148, "kon_latn": 148, "kor_hang": 148, "lao_laoo": 148, "ligurian": 148, "lij_latn": 148, "limburgish": 148, "lim_latn": 148, "lin_latn": 148, "lit_latn": 148, "lombard": 148, "lmo_latn": 148, "latgalian": 148, "ltg_latn": 148, "ltz_latn": 148, "luba": 148, "kasai": 148, "lua_latn": 148, "lug_latn": 148, "luo": 148, "luo_latn": 148, "mizo": 148, "lus_latn": 148, "lvs_latn": 148, "magahi": 148, "mag_deva": 148, "maithili": 148, "mai_deva": 148, "mal_mlym": 148, "mar_deva": 148, "minangkabau": 148, "min_arab": 148, "min_latn": 148, "mkd_cyrl": 148, "plateau": 148, "plt_latn": 148, "maltes": 148, "mlt_latn": 148, "meitei": 148, "mni_beng": 148, "halh": 148, "khk_cyrl": 148, "mossi": 148, "mos_latn": 148, "maori": 148, "mri_latn": 148, "mya_mymr": 148, "nld_latn": 148, "nynorsk": 148, "nno_latn": 148, "bokm\u00e5l": 148, "nob_latn": 148, "npi_deva": 148, "nso_latn": 148, "nuer": 148, "nus_latn": 148, "nyanja": 148, "nya_latn": 148, "oci_latn": 148, "west": 148, "oromo": 148, "gaz_latn": 148, "odia": 148, "ory_orya": 148, "pangasinan": 148, "pag_latn": 148, "eastern": 148, "pan_guru": 148, "papiamento": 148, "pap_latn": 148, "pes_arab": 148, "pol_latn": 148, "por_latn": 148, "dari": 148, "prs_arab": 148, "southern": 148, "pbt_arab": 148, "ayacucho": 148, "quechua": 148, "quy_latn": 148, "ron_latn": 148, "rundi": 148, "run_latn": 148, "rus_cyrl": 148, "sango": 148, "sag_latn": 148, "sanskrit": 148, "san_deva": 148, "santali": 148, "sat_olck": 148, "sicilian": 148, "scn_latn": 148, "shan": 148, "shn_mymr": 148, "sin_sinh": 148, "slk_latn": 148, "slv_latn": 148, "samoan": 148, "smo_latn": 148, "shona": 148, "sna_latn": 148, "snd_arab": 148, "som_latn": 148, "sot_latn": 148, "spa_latn": 148, "tosk": 148, "als_latn": 148, "sardinian": 148, "srd_latn": 148, "srp_cyrl": 148, "ssw_latn": 148, "sun_latn": 148, "swe_latn": 148, "swh_latn": 148, "silesian": 148, "szl_latn": 148, "tam_taml": 148, "tat_cyrl": 148, "telugu": 148, "tel_telu": 148, "tajik": 148, "tgk_cyrl": 148, "tgl_latn": 148, "tha_thai": 148, "tigrinya": 148, "tir_ethi": 148, "tamasheq": 148, "taq_latn": 148, "tifinagh": 148, "taq_tfng": 148, "tok": 148, "pisin": 148, "tpi_latn": 148, "tsn_latn": 148, "tsonga": 148, "tso_latn": 148, "turkmen": 148, "tuk_latn": 148, "tumbuka": 148, "tum_latn": 148, "tur_latn": 148, "twi": 148, "twi_latn": 148, "atla": 148, "tamazight": 148, "tzm_tfng": 148, "uyghur": 148, "uig_arab": 148, "ukr_cyrl": 148, "umbundu": 148, "umb_latn": 148, "urd_arab": 148, "uzn_latn": 148, "venetian": 148, "vec_latn": 148, "vie_latn": 148, "warai": 148, "war_latn": 148, "wol_latn": 148, "xho_latn": 148, "ydd_hebr": 148, "yor_latn": 148, "yue_hant": 148, "simplifi": [148, 214], "zho_han": 148, "tradit": 148, "zho_hant": 148, "zsm_latn": 148, "zul_latn": 148, "driven": 148, "erad": 148, "barrier": 148, "solidifi": 148, "artifici": [148, 149, 150, 151], "intellig": [148, 149, 150, 151], "effort": 148, "coalesc": 148, "leav": 148, "vast": 148, "major": 148, "mostli": 148, "safe": 148, "ethic": 148, "consider": 148, "exploratori": 148, "interview": 148, "nativ": [148, 226], "speaker": 148, "narrow": 148, "gap": 148, "gate": 148, "expert": 148, "counteract": 148, "overfit": 148, "critic": 148, "flore": 148, "assess": [148, 149, 150], "groundwork": 148, "realiz": 148, "phi2transform": 149, "textbook": 149, "augment": 149, "websit": [149, 150], "educ": 149, "sens": [149, 150, 234], "showcas": [149, 150], "nearli": 149, "hasn": 149, "intent": [149, 184], "craft": 149, "vital": 149, "societ": 149, "phi2": 149, "skill": [149, 150, 151], "phi3transform": 150, "medium": 150, "14b": [150, 151], "lightweight": 150, "128k": 150, "underw": 150, "math": [150, 152], "phi_3_mini_128k_instruct": 150, "big": 150, "trillion": [150, 152], "mixtral": 150, "8x7b": 150, "69": [150, 218], "mmlu": 150, "mt": 150, "bench": 150, "enough": 150, "innov": 150, "compos": 150, "heavili": 150, "8t": 150, "moreov": 150, "qwentransform": 151, "qwen1": 151, "qwen2": 151, "72b": 151, "stabl": 151, "32k": 151, "swiglu": 151, "qkv": 151, "temporarili": [151, 200], "qwen_7": 151, "5b_chat": 151, "starcodertransform": 152, "starcoder2": 152, "predecessor": 152, "starcoder2transform": 152, "bigcod": 152, "starcod": 152, "scientif": 152, "partnership": 152, "swh": 152, "stack": 152, "digit": 152, "archiv": 152, "alongsid": 152, "619": 152, "3b": 152, "15b": 152, "thoroughli": 152, "starcoderbas": 152, "twice": 152, "although": 152, "deepseekcod": 152, "openrail": 152, "transpar": 152, "regard": [152, 193], "persist": [152, 215], "swhid": 152, "def": [152, 199], "t5transform": 153, "t5": 153, "reconsid": 153, "hyper": 153, "t5_small": 153, "setstopateo": 153, "encount": 153, "setmaxnewtoken": 153, "setusecach": 153, "documentsimilarityrank": 154, "documentsimilarityrankerapproach": 154, "lsh": 154, "lib": 154, "approxim": 154, "ranker": 154, "documentsimilarityrankermodel": 154, "doc_similarity_rank": 154, "enablecach": 154, "rdd": 154, "similaritymethod": 154, "neighbour": 154, "brp": 154, "bucket": 154, "euclidean": 154, "numberofneighbour": 154, "bucketlength": 154, "hash": 154, "numhasht": 154, "visibledist": 154, "identityrank": 154, "ident": 154, "debug": 154, "setsimilaritymethod": 154, "setnumberofneighbour": 154, "setbucketlength": 154, "setnumhasht": 154, "setvisibledist": 154, "setidentityrank": 154, "document_similarity_ranker_finish": 154, "documentsimilarityrankerfinish": 154, "finished_doc_similarity_rankings_id": 154, "finished_doc_similarity_rankings_neighbor": 154, "setextractnearestneighbor": 154, "docsimrankerpipelin": 154, "1510101612": 154, "1634839239": 154, "12448559591306324": 154, "612640902": 154, "1274183715": 154, "1220122862046063": 154, "1320876223": 154, "1293373212": 154, "17848855164122393": 154, "1548374770": 154, "1719102856": 154, "23297156732534166": 154, "visibl": 154, "inclus": 154, "asretriev": 154, "rag": 154, "setaggregationmethod": 154, "wise": 154, "py": [154, 187, 188, 196, 202, 206], "ins": [154, 188, 206], "uid": [154, 188, 206], "extractnearestneighbor": 154, "getinputcol": [154, 162, 174, 175, 189], "getoutputcol": [154, 171, 173, 174, 175, 179, 182, 189], "document_similarity_rank": 155, "contextspellcheck": 156, "contextspellcheckerapproach": [156, 158, 159], "noisi": 156, "spell": [156, 157, 158, 159, 181, 186, 232, 233, 234], "contextspellcheckermodel": [156, 158, 159], "surround": [156, 185], "edit": [156, 158, 159], "subword": 156, "checker": [156, 158, 159, 232], "languagemodelclass": 156, "lm": 156, "wordmaxdist": 156, "maxcandid": 156, "casestrategi": 156, "uppercas": 156, "errorthreshold": 156, "perplex": 156, "nlm": 156, "initialr": 156, "finalr": 156, "validationfract": 156, "datapoint": 156, "vocab": 156, "compoundcount": 156, "compound": 156, "classcount": 156, "tradeoff": 156, "weighteddistpath": 156, "levenshtein": [156, 158, 159], "maxwindowlen": 156, "maxsentlen": 156, "norvigsweetingapproach": [156, 158, 159, 235], "symmetricdeleteapproach": [156, 158, 159, 235], "depth": [156, 232], "sherlock": 156, "spellcheck": [156, 158, 159], "setwordmaxdist": 156, "setepoch": 156, "setlanguagemodelclass": 156, "1650": 156, "addvocabclass": 156, "_name_": 156, "extra": [156, 158, 229], "dist": 156, "setmaxcandid": 156, "setcasestrategi": 156, "seterrorthreshold": 156, "setinitialr": 156, "setfinalr": 156, "setvalidationfract": 156, "fraction": 156, "setcompoundcount": 156, "setclasscount": 156, "settradeoff": 156, "setweighteddistpath": 156, "setmaxwindowlen": 156, "setmaxsentlen": 156, "sentlen": 156, "userdist": 156, "addregexclass": 156, "spellcheck_dl": 156, "gamma": 156, "decis": 156, "correctsymbol": 156, "comparelowcas": 156, "vocabfreq": 156, "idsvocab": 156, "vocabid": 156, "usenewlin": 156, "norvigsweetingmodel": [156, 158, 159], "symmetricdeletemodel": [156, 158, 159], "cold": 156, "dreari": 156, "white": 156, "smow": 156, "setweight": 156, "setgamma": 156, "setvocabfreq": 156, "setidsvocab": 156, "setvocabid": 156, "setclass": 156, "getwordclass": 156, "updateregexclass": 156, "updatevocabclass": 156, "setcorrectsymbol": 156, "setcomparelowcas": 156, "norvigsweet": 158, "norvig": 158, "bayesian": 158, "tokenpattern": 158, "sensit": [158, 161, 167], "doublevari": 158, "shortcircuit": 158, "frequencyprior": 158, "ham": 158, "intersect": 158, "wordsizeignor": 158, "dupslimit": 158, "duplic": 158, "reductlimit": 158, "vowelswaplimit": 158, "vowel": 158, "corrector": 158, "gummi": [158, 159], "gummic": [158, 159], "gummier": [158, 159], "gummiest": [158, 159], "gummifer": [158, 159], "basi": [158, 159], "token_pattern": [158, 159], "setdoublevari": 158, "setshortcircuit": 158, "setfrequencyprior": 158, "symmetr": [158, 159], "delet": [158, 159, 229], "damerau": [158, 159], "transpos": [158, 159], "spellcheck_norvig": 158, "symspel": [158, 159], "somtim": 158, "wrrite": [158, 159], "wordz": [158, 159], "erong": [158, 159], "sometim": [158, 159, 229], "wrong": [158, 159], "symmetricdelet": 159, "deriv": 159, "teach": 159, "maxeditdist": 159, "frequencythreshold": [159, 170], "deletesthreshold": 159, "patttern": 159, "setmaxeditdist": 159, "setfrequencythreshold": [159, 170], "setdeletesthreshold": 159, "spellcheck_sd": 159, "spmetim": 159, "employ": 160, "stopwordsclean": [161, 174, 186], "mllib": [161, 226], "stopwordsremov": 161, "cleantoken": [161, 174, 186], "stopwords_en": 161, "jvm": [161, 200], "forth": 161, "setlocal": 161, "tfnerdlgraphbuildermodel": 162, "tfnerdlgraphbuild": 162, "sethiddenunitsnumb": 162, "assertiondlapproach": 162, "medicalnerapproach": 162, "gethiddenunitsnumb": 162, "srt": 162, "getgraphfold": 162, "setgraphfil": 162, "greaph": 162, "getgraphfil": 162, "chunktoken": 163, "flatten": 163, "artist": 163, "benezar": 163, "robert": 163, "farendel": 163, "graduat": 163, "luca": 163, "chunktokenizermodel": 163, "recursivetoken": 165, "recurs": [165, 184, 196, 200, 204], "infix": [165, 167], "qam": 165, "setprefix": 165, "setinfix": 165, "recursivetokenizermodel": 165, "regextoken": [166, 170, 230], "tolowercas": [166, 170], "positionalmask": 166, "guarante": 166, "increment": 166, "flag": 166, "eventu": 166, "settolowercas": [166, 170], "nthi": 166, "setpositionalmask": 166, "tokenizedsent": 167, "rulefactori": [167, 193], "targetpattern": 167, "grab": 167, "prefixpattern": 167, "suffixpattern": 167, "infixpattern": 167, "sub": 167, "won": 167, "exceptionspath": 167, "casesensitiveexcept": 167, "contextchar": 167, "splitchar": 167, "didn": 167, "jane": 167, "boyfriend": 167, "getinfixpattern": 167, "getsuffixpattern": 167, "getprefixpattern": 167, "getcontextchar": 167, "getsplitchar": 167, "settargetpattern": 167, "setprefixpattern": 167, "setsuffixpattern": 167, "setinfixpattern": 167, "addinfixpattern": 167, "setexcept": 167, "getexcept": 167, "setexceptionspath": 167, "addexcept": 167, "setcasesensitiveexcept": 167, "getcasesensitiveexcept": 167, "addcontextchar": 167, "setsplitchar": 167, "addsplitchar": 167, "piec": 167, "token_rul": 167, "token2chunk": 168, "17": [168, 218, 220], "wordsegment": 170, "wordsegmenterapproach": 170, "correspond": [170, 207], "rr": 170, "likewis": 170, "themselv": 170, "\u4e0a\u6d77": 170, "\u8ba1\u5212": 170, "\u5230": 170, "\u672c": 170, "\u4e16\u7eaa": 170, "\u672b": 170, "\u5b9e\u73b0": 170, "\u4eba\u5747": 170, "\u56fd\u5185": 170, "\u751f\u4ea7": 170, "\u603b\u503c": 170, "\u4e94\u5343": 170, "\u7f8e\u5143": 170, "\u4e0a": 170, "\u6d77": 170, "\u8ba1": 170, "\u5212": 170, "\u4e16": 170, "\u7eaa": 170, "\u5b9e": 170, "\u73b0": 170, "\u4eba": 170, "\u5747": 170, "\u56fd": 170, "\u5185": 170, "\u751f": 170, "\u4ea7": 170, "\u603b": 170, "ll\u503c": 170, "\u4e94": 170, "\u5343": 170, "\u7f8e": 170, "\u5143": 170, "shanghai": 170, "plan": 170, "dollar": 170, "capita": 170, "gdp": 170, "wordsegmentermodel": 170, "tip": 170, "frame": 170, "frequent": 170, "ambiguitythreshold": 170, "enableregextoken": 170, "xue": 170, "nianwen": 170, "volum": 170, "februari": 170, "aclweb": 170, "aclanthologi": 170, "o03": 170, "4002": 170, "chinese_train": 170, "utf8": 170, "\u5341": 170, "\u56db": 170, "\u4e0d": 170, "\u662f": 170, "setniter": 170, "trainingdataset": 170, "setambiguitythreshold": 170, "getfrequencythreshold": 170, "getambiguitythreshold": 170, "setenableregextoken": 170, "plit": 170, "words_seg": 170, "wordseg_pku": 170, "\u7136\u800c": 170, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 170, "\u9019\u6a23": 170, "\u7684": 170, "\u8655\u7406": 170, "\u4e5f": 170, "\u884d\u751f": 170, "\u4e86": 170, "\u4e00\u4e9b": 170, "\u554f\u984c": 170, "outputcol": [171, 173, 174, 175, 176, 179, 182, 183], "inferschema": 171, "tmp": [171, 179, 200, 225], "librispeech_asr_dummy_clean_audio_array_parquet": 171, "float_arrai": 171, "chunkcol": 172, "stringtyp": 172, "setisarrai": 172, "startcol": 172, "startcolbytokenindex": 172, "isarrai": 172, "failonmiss": 172, "chunkassembl": 172, "setchunkcol": 172, "setstartcol": 172, "setstartcolbytokenindex": 172, "setfailonmiss": 172, "idcol": [173, 182], "metadatacol": [173, 182], "cleanupmod": [173, 182], "cleanup": [173, 182], "inplac": [173, 182], "inplace_ful": [173, 182], "shrink_ful": [173, 182], "each_ful": [173, 182], "delete_ful": [173, 182], "setidcol": [173, 182], "setmetadatacol": [173, 182], "usabl": 174, "lda": 174, "forest": 174, "featurecol": 174, "cleanannot": [174, 175, 176], "outputasvector": 174, "gloveembed": 174, "finished_sentence_embed": 174, "resultwiths": 174, "1619900017976761": 174, "045552998781204224": 174, "03229299932718277": 174, "685609996318": 174, "42416998744010925": 174, "1378999948501587": 174, "5717899799346924": 174, "5078899860382": 174, "08621499687433243": 174, "15772999823093414": 174, "06067200005054474": 174, "395359992980": 174, "4970499873161316": 174, "7164199948310852": 174, "40119001269340515": 174, "05761000141501": 174, "08170200139284134": 174, "7159299850463867": 174, "20677000284194946": 174, "0295659992843": 174, "valuesplitsymbol": 175, "annotationsplitsymbol": 175, "includemetadata": 175, "outputasarrai": [175, 176], "parseembeddingsvector": 175, "setvaluesplitsymbol": 175, "setannotationsplitsymbol": 175, "setincludemetadata": [175, 230], "setoutputasarrai": [175, 176], "setparseembeddingsvector": 175, "finishedresult": 176, "hasrecursivefit": [177, 178], "java_obj": [177, 203, 206], "py4j": [177, 178, 206], "java_gatewai": [177, 178, 206], "javaobject": [177, 178, 206], "recursivepipelin": [177, 178, 184, 189], "hasrecursivetransform": 178, "settextcol": 179, "doc2_chunk": [180, 200], "embeddings_finish": [180, 200], "graph_finish": [180, 200], "has_recursive_fit": [180, 200], "has_recursive_transform": [180, 200], "light_pipelin": [180, 200], "prompt_assembl": [180, 200], "recursive_pipelin": [180, 200], "token_assembl": [180, 200], "lightpipelin": [181, 210, 233], "parse_embed": [181, 210], "hold": [181, 233], "principl": [181, 233], "everyth": [181, 233, 234], "fullannot": [181, 210], "happi": [181, 228, 230, 233, 234], "prp": [181, 216, 218, 228, 233, 234, 235], "rb": [181, 218, 228, 233, 234, 235], "optional_target": [181, 210], "explain_document_pipelin": [181, 199, 210, 228, 233, 234], "dict_kei": [181, 210], "fullannotateimag": [181, 210], "path_to_imag": [181, 210], "setignoreunsupport": 181, "unsupport": 181, "annotatormodel": [181, 188, 211], "getignoreunsupport": 181, "text2": 182, "document1": 182, "document2": 182, "promptassembl": 183, "assembl": 183, "role": 183, "setaddassist": 183, "At": [183, 230], "addassist": 183, "eot_id": 183, "arg": [184, 203], "kwarg": 184, "decid": 184, "behav": 184, "exactli": 184, "recursivepipelinemodel": 184, "pipeline_model": [184, 207, 225], "intend": 184, "tab": [185, 207, 225], "escap": 185, "quot": 185, "inputformat": 185, "csvdelimit": 185, "defailt": 185, "comma": 185, "escapecsvdelimit": 185, "table_csv": 185, "csv_data": 185, "input_format": 185, "setcsvdelimit": 185, "setescapecsvdelimit": 185, "tokenassembl": 186, "cleantext": 186, "opensourc": 186, "annotatorapproach": [187, 196, 207], "annotatorproperti": 189, "setlazyannot": 189, "lazili": 189, "getlazyannot": 189, "annotator_approach": [192, 200], "annotator_model": [192, 200], "annotator_properti": [192, 200], "coverage_result": [192, 200], "match_strategi": [192, 200], "recursive_annotator_approach": [192, 200], "constant": [193, 195], "hasembeddingsproperti": 194, "getdimens": 194, "setnreturnsequ": 194, "recursiveannotatorapproach": 196, "fo": 198, "map_annot": 199, "f": [199, 207, 225], "output_typ": 199, "udf": 199, "userdefinedfunct": 199, "nnp_token": 199, "lambda": 199, "epeu": 199, "map_annotations_arrai": 199, "map_annotations_strict": 199, "map_annotations_col": 199, "output_column": 199, "annotatyon_typ": 199, "chunks_df": 199, "pos_chunk": 199, "vbz": [199, 215, 235], "filter_by_annotations_col": 199, "filter_po": 199, "explode_annotations_col": 199, "annotator_java_ml": [200, 204], "annotator_transform": [200, 204], "extended_java_wrapp": [200, 204], "params_getters_sett": [200, 204], "comet": [200, 208, 227], "pretrained_pipelin": [200, 209], "resource_download": [200, 209], "reader": [200, 211], "pub_tat": [200, 217], "annotation_audio": 200, "annotation_imag": 200, "apple_silicon": 200, "aarch64": 200, "cache_fold": 200, "log_fold": 200, "cluster_tmp_dir": 200, "real_time_output": 200, "output_level": 200, "correctli": 200, "maco": 200, "linux": 200, "alloc": 200, "directori": [200, 211, 214, 225], "cache_pretrain": 200, "unpack": 200, "hadoop": 200, "dir": 200, "s3": [200, 211], "hdf": 200, "dbf": 200, "annotator_log": 200, "annotatorjavamlread": 201, "mixin": 201, "javamlread": 201, "classmethod": 201, "mlreader": 201, "clazz": 201, "rl": 201, "javaparam": 201, "annotatortransform": 202, "_java_obj": 202, "javawrapp": 203, "extendedjavawrapp": 203, "new_java_arrai": 203, "pylist": 203, "java_class": 203, "todo": 203, "paramsgetterssett": 205, "getparamvalu": 205, "paramnam": 205, "setparamvalu": 205, "recursiveestim": 206, "recursivetransform": 206, "cometlogg": [207, 225], "workspac": 207, "project_nam": [207, 225], "comet_mod": [207, 225], "experiment_id": 207, "experiment_kwarg": 207, "logger": [207, 225], "practition": [207, 225], "lifecycl": [207, 225, 227], "track": [207, 225, 226], "outputlogpath": [207, 225], "onlin": [207, 225], "reus": 207, "importerror": 207, "output_log_path": [207, 225], "embd": [207, 225], "setshuffleperepoch": [207, 225], "logdir": [207, 225], "interfac": [207, 225, 233], "comet_ml": [207, 225], "log_pipeline_paramet": [207, 225], "log_visu": [207, 225], "html": [207, 214, 225], "viz": [207, 225], "upload": 207, "colum": [207, 225], "ner_chunk": [207, 225], "sparknlp_displai": [207, 225], "nervisu": [207, 225], "idx": [207, 225], "enumer": [207, 225], "label_col": [207, 225], "document_col": [207, 225], "return_html": [207, 225], "log_metr": [207, 225], "sklearn": [207, 225], "preprocess": [207, 225], "multilabelbinar": [207, 225], "classification_report": [207, 225], "preds_df": [207, 225], "topanda": [207, 225], "mlb": [207, 225], "y_true": [207, 225], "fit_transform": [207, 225], "y_pred": [207, 225], "output_dict": [207, 225], "log_paramet": 207, "log_completed_run": 207, "log_file_path": 207, "log_asset": 207, "asset_path": 207, "asset": 207, "log_asset_data": 207, "interv": 207, "refresh": 207, "outstand": 207, "disk_loc": 210, "light_model": 210, "gather": 210, "resourcedownload": [211, 229, 234], "showpublicmodel": [211, 229], "onto_100": 211, "onto_300": 211, "ner_dl_bert": 211, "similarli": 211, "showpublicpipelin": [211, 234], "check_spel": [211, 234], "match_datetim": [211, 234], "downloadmodel": 211, "j_dwn": 211, "pythonresourcedownload": 211, "obj": [211, 216], "downloadmodeldirectli": 211, "unzip": 211, "downloadpipelin": 211, "clearcach": 211, "clear": 211, "filer": 211, "showuncategorizedresourc": 211, "showavailableannot": 211, "sparknlpread": 214, "email": 214, "htmlpath": 214, "html_df": 214, "filepath": 214, "email_df": 214, "docpath": 214, "documentcol": [215, 216], "sentencecol": [215, 216], "tokencol": 215, "conlllabelindex": 215, "conllposindex": 215, "conlldocidcol": 215, "doc_id": [215, 219], "textcol": [215, 216], "labelcol": 215, "includedocid": 215, "docstart": [215, 235], "eu": [215, 235], "np": [215, 235], "reject": [215, 235], "vp": [215, 235], "misc": [215, 235], "boycott": [215, 235], "british": [215, 235], "lamb": [215, 235], "blackburn": 215, "brussel": 215, "1996": 215, "08": 215, "storage_level": 215, "storagelevel": 215, "disk_onli": 215, "lift": 215, "uposcol": 216, "upo": 216, "xposcol": 216, "xpo": 216, "lemmacol": 216, "sent_id": 216, "sell": 216, "pron": 216, "nom": 216, "plur": 216, "_": 216, "tens": 216, "conj": 216, "cc": 216, "spaceaft": 216, "punct": 216, "conllufil": [216, 235], "conlldataset": [216, 235], "morph": 216, "Into": 216, "googleo": 216, "sconj": 216, "propn": 216, "adp": 216, "wp": 216, "vbd": [216, 218, 235], "ago": [218, 235], "posdf": 218, "61": 218, "67": [218, 219, 235], "nonexecut": 218, "76": 218, "director": 218, "81": 218, "84": 218, "outputposcol": 218, "outputdocumentcol": 218, "outputtextcol": 218, "pubtat": [219, 232], "medic": [219, 235], "titl": [219, 235], "medment": [219, 235], "25763772": [219, 235], "dctn4": [219, 235], "t116": [219, 235], "t123": [219, 235], "c4308010": [219, 235], "63": [219, 235], "chronic": [219, 235], "pseudomona": [219, 235], "aeruginosa": [219, 235], "infect": [219, 235], "t047": [219, 235], "c0854135": [219, 235], "82": [219, 235], "cystic": [219, 235], "fibrosi": [219, 235], "c0010674": [219, 235], "120": [219, 235], "124": [219, 235], "139": [219, 235], "pubtatorfil": 219, "corpus_pubtator_sampl": 219, "pubtatordataset": 219, "finished_token": [219, 230], "finished_po": 219, "finished_n": 219, "finished_token_metadata": 219, "finished_pos_metadata": 219, "finished_label_metadata": 219, "mo": 219, "ispaddedtoken": 219, "pad": 219, "spacytoannot": 220, "token_spac": 220, "sentence_end": 220, "spaci": 220, "multi_doc_token": 220, "went": 220, "night": 220, "bought": 220, "bread": 220, "54": 220, "overview": [224, 232], "workflow": 225, "dedic": 225, "account": 225, "inspect": 225, "init": 225, "sparknlp_experi": 225, "offline_directori": 225, "later": 225, "record": 226, "registri": 226, "send": 227, "mlflow": 227, "content": [228, 234], "clearli": 228, "explain_document_ml": [228, 233, 234], "approx": [228, 233, 234], "mb": [228, 233, 234], "ok": [228, 233, 234], "spearhead": 229, "produc": 229, "declar": 229, "accordingli": 229, "extra_loc": 229, "classifierdl_use_trec50": 229, "classifierdl_use_spam": 229, "column_nam": 229, "interchang": 230, "road": 230, "proce": 230, "constantli": 234, "train_po": 235, "training_conl": 235, "train_corpu": 235, "withcolumnrenam": 235, "trainingpubtatordf": 235, "corpus_pubt": 235}, "objects": {"": [[200, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [103, 0, 0, "-", "annotator"], [180, 0, 0, "-", "base"], [192, 0, 0, "-", "common"], [199, 0, 0, "-", "functions"], [204, 0, 0, "-", "internal"], [208, 0, 0, "-", "logging"], [209, 0, 0, "-", "pretrained"], [213, 0, 0, "-", "reader"], [200, 3, 1, "", "start"], [217, 0, 0, "-", "training"], [222, 0, 0, "-", "upload_to_hub"], [223, 0, 0, "-", "util"], [200, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [34, 0, 0, "-", "classifier_dl"], [54, 0, 0, "-", "coref"], [59, 0, 0, "-", "cv"], [63, 0, 0, "-", "date2_chunk"], [65, 0, 0, "-", "dependency"], [67, 0, 0, "-", "document_character_text_splitter"], [68, 0, 0, "-", "document_normalizer"], [69, 0, 0, "-", "document_token_splitter"], [70, 0, 0, "-", "document_token_splitter_test"], [83, 0, 0, "-", "embeddings"], [101, 0, 0, "-", "er"], [102, 0, 0, "-", "graph_extraction"], [104, 0, 0, "-", "keyword_extraction"], [106, 0, 0, "-", "ld_dl"], [108, 0, 0, "-", "lemmatizer"], [111, 0, 0, "-", "matcher"], [115, 0, 0, "-", "n_gram_generator"], [116, 0, 0, "-", "ner"], [123, 0, 0, "-", "normalizer"], [124, 0, 0, "-", "openai"], [129, 0, 0, "-", "param"], [130, 0, 0, "-", "pos"], [132, 0, 0, "-", "sentence"], [135, 0, 0, "-", "sentiment"], [142, 0, 0, "-", "seq2seq"], [155, 0, 0, "-", "similarity"], [157, 0, 0, "-", "spell_check"], [160, 0, 0, "-", "stemmer"], [161, 0, 0, "-", "stop_words_cleaner"], [162, 0, 0, "-", "tf_ner_dl_graph_builder"], [164, 0, 0, "-", "token"], [168, 0, 0, "-", "token2_chunk"], [169, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "albert_for_zero_shot_classification"], [15, 0, 0, "-", "bart_for_zero_shot_classification"], [16, 0, 0, "-", "bert_for_multiple_choice"], [17, 0, 0, "-", "bert_for_question_answering"], [18, 0, 0, "-", "bert_for_sequence_classification"], [19, 0, 0, "-", "bert_for_token_classification"], [20, 0, 0, "-", "bert_for_zero_shot_classification"], [21, 0, 0, "-", "camembert_for_question_answering"], [22, 0, 0, "-", "camembert_for_sequence_classification"], [23, 0, 0, "-", "camembert_for_token_classification"], [24, 0, 0, "-", "camembert_for_zero_shot_classification"], [25, 0, 0, "-", "classifier_dl"], [26, 0, 0, "-", "deberta_for_question_answering"], [27, 0, 0, "-", "deberta_for_sequence_classification"], [28, 0, 0, "-", "deberta_for_token_classification"], [29, 0, 0, "-", "deberta_for_zero_shot_classification"], [30, 0, 0, "-", "distil_bert_for_question_answering"], [31, 0, 0, "-", "distil_bert_for_sequence_classification"], [32, 0, 0, "-", "distil_bert_for_token_classification"], [33, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [35, 0, 0, "-", "longformer_for_question_answering"], [36, 0, 0, "-", "longformer_for_sequence_classification"], [37, 0, 0, "-", "longformer_for_token_classification"], [38, 0, 0, "-", "mpnet_for_question_answering"], [39, 0, 0, "-", "mpnet_for_sequence_classification"], [40, 0, 0, "-", "mpnet_for_token_classification"], [41, 0, 0, "-", "multi_classifier_dl"], [42, 0, 0, "-", "roberta_for_question_answering"], [43, 0, 0, "-", "roberta_for_sequence_classification"], [44, 0, 0, "-", "roberta_for_token_classification"], [45, 0, 0, "-", "roberta_for_zero_shot_classification"], [46, 0, 0, "-", "sentiment_dl"], [47, 0, 0, "-", "tapas_for_question_answering"], [48, 0, 0, "-", "xlm_roberta_for_question_answering"], [49, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [50, 0, 0, "-", "xlm_roberta_for_token_classification"], [51, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [52, 0, 0, "-", "xlnet_for_sequence_classification"], [53, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setCoalesceSentences"], [15, 2, 1, "", "setConfigProtoBytes"], [15, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[16, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[20, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[21, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[22, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[23, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[24, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[25, 1, 1, "", "ClassifierDLApproach"], [25, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[25, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[26, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[27, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[28, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[29, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setCoalesceSentences"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[33, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[35, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[36, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[37, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[38, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[39, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[40, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[41, 1, 1, "", "MultiClassifierDLApproach"], [41, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[41, 2, 1, "", "setThreshold"], [41, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[42, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[43, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setCoalesceSentences"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[44, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[45, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"], [45, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[46, 1, 1, "", "SentimentDLApproach"], [46, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[46, 2, 1, "", "setDropout"], [46, 2, 1, "", "setThreshold"], [46, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setThreshold"], [46, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[47, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[48, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[49, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setCoalesceSentences"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[50, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[51, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setCoalesceSentences"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[52, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[52, 2, 1, "", "getClasses"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setCoalesceSentences"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[53, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[53, 2, 1, "", "getClasses"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[55, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[55, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"], [55, 2, 1, "", "setMaxSegmentLength"], [55, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[56, 0, 0, "-", "blip_for_question_answering"], [57, 0, 0, "-", "clip_for_zero_shot_classification"], [58, 0, 0, "-", "convnext_for_image_classification"], [60, 0, 0, "-", "swin_for_image_classification"], [61, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [62, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[56, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[57, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[57, 2, 1, "", "getCandidateLabels"], [57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[58, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[58, 2, 1, "", "getClasses"], [58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"], [58, 2, 1, "", "setCropPct"], [58, 2, 1, "", "setDoRescale"], [58, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[60, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[60, 2, 1, "", "getClasses"], [60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[61, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[62, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[62, 2, 1, "", "getClasses"], [62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[63, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[63, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[64, 0, 0, "-", "dependency_parser"], [66, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[64, 1, 1, "", "DependencyParserApproach"], [64, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[64, 2, 1, "", "setConllU"], [64, 2, 1, "", "setDependencyTreeBank"], [64, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[64, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[66, 1, 1, "", "TypedDependencyParserApproach"], [66, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[66, 2, 1, "", "setConll2009"], [66, 2, 1, "", "setConllU"], [66, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[66, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[67, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[67, 2, 1, "", "setChunkOverlap"], [67, 2, 1, "", "setChunkSize"], [67, 2, 1, "", "setExplodeSplits"], [67, 2, 1, "", "setKeepSeparators"], [67, 2, 1, "", "setPatternsAreRegex"], [67, 2, 1, "", "setSplitPatterns"], [67, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[68, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[68, 2, 1, "", "setAction"], [68, 2, 1, "", "setEncoding"], [68, 2, 1, "", "setLowercase"], [68, 2, 1, "", "setPatterns"], [68, 2, 1, "", "setPolicy"], [68, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[69, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[69, 2, 1, "", "setExplodeSplits"], [69, 2, 1, "", "setNumTokens"], [69, 2, 1, "", "setTokenOverlap"], [69, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[70, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[70, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[71, 0, 0, "-", "albert_embeddings"], [72, 0, 0, "-", "auto_gguf_embeddings"], [73, 0, 0, "-", "bert_embeddings"], [74, 0, 0, "-", "bert_sentence_embeddings"], [75, 0, 0, "-", "bge_embeddings"], [76, 0, 0, "-", "camembert_embeddings"], [77, 0, 0, "-", "chunk_embeddings"], [78, 0, 0, "-", "deberta_embeddings"], [79, 0, 0, "-", "distil_bert_embeddings"], [80, 0, 0, "-", "doc2vec"], [81, 0, 0, "-", "e5_embeddings"], [82, 0, 0, "-", "elmo_embeddings"], [84, 0, 0, "-", "instructor_embeddings"], [85, 0, 0, "-", "longformer_embeddings"], [86, 0, 0, "-", "mpnet_embeddings"], [87, 0, 0, "-", "mxbai_embeddings"], [88, 0, 0, "-", "nomic_embeddings"], [89, 0, 0, "-", "roberta_embeddings"], [90, 0, 0, "-", "roberta_sentence_embeddings"], [91, 0, 0, "-", "sentence_embeddings"], [92, 0, 0, "-", "snowflake_embeddings"], [93, 0, 0, "-", "uae_embeddings"], [94, 0, 0, "-", "universal_sentence_encoder"], [95, 0, 0, "-", "word2vec"], [96, 0, 0, "-", "word_embeddings"], [97, 0, 0, "-", "xlm_roberta_embeddings"], [98, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [99, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[71, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[72, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[72, 2, 1, "", "getMetadata"], [72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setDefragmentationThreshold"], [72, 2, 1, "", "setFlashAttention"], [72, 2, 1, "", "setGpuSplitMode"], [72, 2, 1, "", "setGrpAttnN"], [72, 2, 1, "", "setGrpAttnW"], [72, 2, 1, "", "setMainGpu"], [72, 2, 1, "", "setNBatch"], [72, 2, 1, "", "setNChunks"], [72, 2, 1, "", "setNCtx"], [72, 2, 1, "", "setNGpuLayers"], [72, 2, 1, "", "setNSequences"], [72, 2, 1, "", "setNThreads"], [72, 2, 1, "", "setNThreadsBatch"], [72, 2, 1, "", "setNUbatch"], [72, 2, 1, "", "setNoKvOffload"], [72, 2, 1, "", "setNumaStrategy"], [72, 2, 1, "", "setPoolingType"], [72, 2, 1, "", "setRopeFreqBase"], [72, 2, 1, "", "setRopeFreqScale"], [72, 2, 1, "", "setRopeScalingType"], [72, 2, 1, "", "setTensorSplit"], [72, 2, 1, "", "setUseMlock"], [72, 2, 1, "", "setUseMmap"], [72, 2, 1, "", "setYarnAttnFactor"], [72, 2, 1, "", "setYarnBetaFast"], [72, 2, 1, "", "setYarnBetaSlow"], [72, 2, 1, "", "setYarnExtFactor"], [72, 2, 1, "", "setYarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[73, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[74, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"], [74, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[75, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[76, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[77, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[77, 2, 1, "", "setPoolingStrategy"], [77, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[78, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[79, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[80, 1, 1, "", "Doc2VecApproach"], [80, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[80, 2, 1, "", "setMaxIter"], [80, 2, 1, "", "setMaxSentenceLength"], [80, 2, 1, "", "setMinCount"], [80, 2, 1, "", "setNumPartitions"], [80, 2, 1, "", "setSeed"], [80, 2, 1, "", "setStepSize"], [80, 2, 1, "", "setVectorSize"], [80, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[80, 2, 1, "", "getVectors"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[81, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[82, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setBatchSize"], [82, 2, 1, "", "setConfigProtoBytes"], [82, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[84, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setConfigProtoBytes"], [84, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[85, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[86, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[86, 2, 1, "", "loadSavedModel"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[87, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[87, 2, 1, "", "loadSavedModel"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[88, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[88, 2, 1, "", "loadSavedModel"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[89, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[89, 2, 1, "", "loadSavedModel"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[90, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[90, 2, 1, "", "loadSavedModel"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[91, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[91, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[92, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[92, 2, 1, "", "loadSavedModel"], [92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[93, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[93, 2, 1, "", "loadSavedModel"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[94, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[94, 2, 1, "", "loadSavedModel"], [94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setConfigProtoBytes"], [94, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[95, 1, 1, "", "Word2VecApproach"], [95, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[95, 2, 1, "", "setMaxIter"], [95, 2, 1, "", "setMaxSentenceLength"], [95, 2, 1, "", "setMinCount"], [95, 2, 1, "", "setNumPartitions"], [95, 2, 1, "", "setSeed"], [95, 2, 1, "", "setStepSize"], [95, 2, 1, "", "setVectorSize"], [95, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[95, 2, 1, "", "getVectors"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[96, 1, 1, "", "WordEmbeddings"], [96, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[96, 2, 1, "", "setReadCacheSize"], [96, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[96, 2, 1, "", "loadStorage"], [96, 2, 1, "", "overallCoverage"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setReadCacheSize"], [96, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[97, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[97, 2, 1, "", "loadSavedModel"], [97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[98, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[98, 2, 1, "", "loadSavedModel"], [98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[99, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[99, 2, 1, "", "loadSavedModel"], [99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[100, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[100, 1, 1, "", "EntityRulerApproach"], [100, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[100, 2, 1, "", "setAlphabetResource"], [100, 2, 1, "", "setPatternsResource"], [100, 2, 1, "", "setSentenceMatch"], [100, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[102, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[102, 2, 1, "", "setDelimiter"], [102, 2, 1, "", "setDependencyParserModel"], [102, 2, 1, "", "setEntityTypes"], [102, 2, 1, "", "setExplodeEntities"], [102, 2, 1, "", "setIncludeEdges"], [102, 2, 1, "", "setMaxSentenceSize"], [102, 2, 1, "", "setMergeEntities"], [102, 2, 1, "", "setMergeEntitiesIOBFormat"], [102, 2, 1, "", "setMinSentenceSize"], [102, 2, 1, "", "setPosModel"], [102, 2, 1, "", "setRelationshipTypes"], [102, 2, 1, "", "setRootTokens"], [102, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[105, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[105, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[105, 2, 1, "", "getStopWords"], [105, 2, 1, "", "loadDefaultStopWords"], [105, 2, 1, "", "setMaxNGrams"], [105, 2, 1, "", "setMinNGrams"], [105, 2, 1, "", "setNKeywords"], [105, 2, 1, "", "setStopWords"], [105, 2, 1, "", "setThreshold"], [105, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[107, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[107, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[107, 2, 1, "", "pretrained"], [107, 2, 1, "", "setCoalesceSentences"], [107, 2, 1, "", "setConfigProtoBytes"], [107, 2, 1, "", "setThreshold"], [107, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[108, 1, 1, "", "Lemmatizer"], [108, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[108, 2, 1, "", "setDictionary"], [108, 2, 1, "", "setFormCol"], [108, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[108, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[109, 0, 0, "-", "big_text_matcher"], [110, 0, 0, "-", "date_matcher"], [112, 0, 0, "-", "multi_date_matcher"], [113, 0, 0, "-", "regex_matcher"], [114, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[109, 1, 1, "", "BigTextMatcher"], [109, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[109, 2, 1, "", "setCaseSensitive"], [109, 2, 1, "", "setEntities"], [109, 2, 1, "", "setMergeOverlapping"], [109, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[109, 2, 1, "", "loadStorage"], [109, 2, 1, "", "pretrained"], [109, 2, 1, "", "setCaseSensitive"], [109, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[110, 1, 1, "", "DateMatcher"], [110, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[110, 2, 1, "", "setAggressiveMatching"], [110, 2, 1, "", "setAnchorDateDay"], [110, 2, 1, "", "setAnchorDateMonth"], [110, 2, 1, "", "setAnchorDateYear"], [110, 2, 1, "", "setDefaultDayWhenMissing"], [110, 2, 1, "", "setInputFormats"], [110, 2, 1, "", "setOutputFormat"], [110, 2, 1, "", "setReadMonthFirst"], [110, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[112, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[113, 1, 1, "", "RegexMatcher"], [113, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[113, 2, 1, "", "setDelimiter"], [113, 2, 1, "", "setExternalRules"], [113, 2, 1, "", "setRules"], [113, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[114, 1, 1, "", "TextMatcher"], [114, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[114, 2, 1, "", "setBuildFromTokens"], [114, 2, 1, "", "setCaseSensitive"], [114, 2, 1, "", "setEntities"], [114, 2, 1, "", "setEntityValue"], [114, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setBuildFromTokens"], [114, 2, 1, "", "setEntityValue"], [114, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[115, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[115, 2, 1, "", "setDelimiter"], [115, 2, 1, "", "setEnableCumulative"], [115, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[117, 0, 0, "-", "ner_approach"], [118, 0, 0, "-", "ner_converter"], [119, 0, 0, "-", "ner_crf"], [120, 0, 0, "-", "ner_dl"], [121, 0, 0, "-", "ner_overwriter"], [122, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[117, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[117, 2, 1, "", "getLabelColumn"], [117, 2, 1, "", "setEntities"], [117, 2, 1, "", "setLabelColumn"], [117, 2, 1, "", "setMaxEpochs"], [117, 2, 1, "", "setMinEpochs"], [117, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[118, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[118, 2, 1, "", "setNerHasNoSchema"], [118, 2, 1, "", "setPreservePosition"], [118, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[119, 1, 1, "", "NerCrfApproach"], [119, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[119, 2, 1, "", "setC0"], [119, 2, 1, "", "setExternalFeatures"], [119, 2, 1, "", "setIncludeConfidence"], [119, 2, 1, "", "setL2"], [119, 2, 1, "", "setLossEps"], [119, 2, 1, "", "setMinW"], [119, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[120, 1, 1, "", "NerDLApproach"], [120, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[120, 2, 1, "", "setBatchSize"], [120, 2, 1, "", "setBestModelMetric"], [120, 2, 1, "", "setConfigProtoBytes"], [120, 2, 1, "", "setDropout"], [120, 2, 1, "", "setEnableMemoryOptimizer"], [120, 2, 1, "", "setGraphFolder"], [120, 2, 1, "", "setIncludeAllConfidenceScores"], [120, 2, 1, "", "setIncludeConfidence"], [120, 2, 1, "", "setLr"], [120, 2, 1, "", "setPo"], [120, 2, 1, "", "setUseBestModel"], [120, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setConfigProtoBytes"], [120, 2, 1, "", "setIncludeAllConfidenceScores"], [120, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[121, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[121, 2, 1, "", "setNerWords"], [121, 2, 1, "", "setNewNerEntity"], [121, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[122, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[122, 2, 1, "", "getClasses"], [122, 2, 1, "", "load"], [122, 2, 1, "", "pretrained"], [122, 2, 1, "", "setEntityDefinitions"], [122, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[123, 1, 1, "", "Normalizer"], [123, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[123, 2, 1, "", "setCleanupPatterns"], [123, 2, 1, "", "setLowercase"], [123, 2, 1, "", "setMaxLength"], [123, 2, 1, "", "setMinLength"], [123, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[125, 0, 0, "-", "openai_completion"], [126, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[125, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[125, 2, 1, "", "setBestOf"], [125, 2, 1, "", "setEcho"], [125, 2, 1, "", "setFrequencyPenalty"], [125, 2, 1, "", "setLogitBias"], [125, 2, 1, "", "setLogprobs"], [125, 2, 1, "", "setMaxTokens"], [125, 2, 1, "", "setModel"], [125, 2, 1, "", "setNumberOfCompletions"], [125, 2, 1, "", "setPresencePenalty"], [125, 2, 1, "", "setStop"], [125, 2, 1, "", "setSuffix"], [125, 2, 1, "", "setTemperature"], [125, 2, 1, "", "setTopP"], [125, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[126, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[126, 2, 1, "", "setModel"], [126, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[127, 0, 0, "-", "classifier_encoder"], [128, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[127, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[127, 2, 1, "", "setBatchSize"], [127, 2, 1, "", "setConfigProtoBytes"], [127, 2, 1, "", "setLabelColumn"], [127, 2, 1, "", "setLr"], [127, 2, 1, "", "setMaxEpochs"], [127, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[128, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[128, 2, 1, "", "setEnableOutputLogs"], [128, 2, 1, "", "setEvaluationLogExtended"], [128, 2, 1, "", "setOutputLogsPath"], [128, 2, 1, "", "setTestDataset"], [128, 2, 1, "", "setValidationSplit"], [128, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[131, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[131, 1, 1, "", "PerceptronApproach"], [131, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[131, 2, 1, "", "getNIterations"], [131, 2, 1, "", "setIterations"], [131, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[131, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[133, 0, 0, "-", "sentence_detector"], [134, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[133, 1, 1, "", "SentenceDetector"], [133, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[133, 2, 1, "", "setCustomBounds"], [133, 2, 1, "", "setCustomBoundsStrategy"], [133, 2, 1, "", "setDetectLists"], [133, 2, 1, "", "setExplodeSentences"], [133, 2, 1, "", "setMaxLength"], [133, 2, 1, "", "setMinLength"], [133, 2, 1, "", "setSplitLength"], [133, 2, 1, "", "setUseAbbreviations"], [133, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[134, 1, 1, "", "SentenceDetectorDLApproach"], [134, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[134, 2, 1, "", "setEpochsNumber"], [134, 2, 1, "", "setExplodeSentences"], [134, 2, 1, "", "setImpossiblePenultimates"], [134, 2, 1, "", "setModel"], [134, 2, 1, "", "setOutputLogsPath"], [134, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[134, 2, 1, "", "pretrained"], [134, 2, 1, "", "setCustomBounds"], [134, 2, 1, "", "setExplodeSentences"], [134, 2, 1, "", "setImpossiblePenultimates"], [134, 2, 1, "", "setMaxLength"], [134, 2, 1, "", "setMinLength"], [134, 2, 1, "", "setModel"], [134, 2, 1, "", "setSplitLength"], [134, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[136, 0, 0, "-", "sentiment_detector"], [137, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[136, 1, 1, "", "SentimentDetector"], [136, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[136, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[137, 1, 1, "", "ViveknSentimentApproach"], [137, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[137, 2, 1, "", "setPruneCorpus"], [137, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[137, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[138, 0, 0, "-", "auto_gguf_model"], [139, 0, 0, "-", "bart_transformer"], [140, 0, 0, "-", "cpm_transformer"], [141, 0, 0, "-", "gpt2_transformer"], [143, 0, 0, "-", "llama2_transformer"], [144, 0, 0, "-", "llama3_transformer"], [145, 0, 0, "-", "m2m100_transformer"], [146, 0, 0, "-", "marian_transformer"], [147, 0, 0, "-", "mistral_transformer"], [148, 0, 0, "-", "nllb_transformer"], [149, 0, 0, "-", "phi2_transformer"], [150, 0, 0, "-", "phi3_transformer"], [151, 0, 0, "-", "qwen_transformer"], [152, 0, 0, "-", "starcoder_transformer"], [153, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[138, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[138, 2, 1, "", "getMetadata"], [138, 2, 1, "", "loadSavedModel"], [138, 2, 1, "", "pretrained"], [138, 2, 1, "", "setCachePrompt"], [138, 2, 1, "", "setChatTemplate"], [138, 2, 1, "", "setDefragmentationThreshold"], [138, 2, 1, "", "setDisableTokenIds"], [138, 2, 1, "", "setDynamicTemperatureExponent"], [138, 2, 1, "", "setDynamicTemperatureRange"], [138, 2, 1, "", "setEmbedding"], [138, 2, 1, "", "setFlashAttention"], [138, 2, 1, "", "setFrequencyPenalty"], [138, 2, 1, "", "setGpuSplitMode"], [138, 2, 1, "", "setGrammar"], [138, 2, 1, "", "setGrpAttnN"], [138, 2, 1, "", "setGrpAttnW"], [138, 2, 1, "", "setIgnoreEos"], [138, 2, 1, "", "setInputPrefix"], [138, 2, 1, "", "setInputPrefixBos"], [138, 2, 1, "", "setInputSuffix"], [138, 2, 1, "", "setLookupCacheDynamicFilePath"], [138, 2, 1, "", "setLookupCacheStaticFilePath"], [138, 2, 1, "", "setLoraAdapters"], [138, 2, 1, "", "setMainGpu"], [138, 2, 1, "", "setMinKeep"], [138, 2, 1, "", "setMinP"], [138, 2, 1, "", "setMiroStat"], [138, 2, 1, "", "setMiroStatEta"], [138, 2, 1, "", "setMiroStatTau"], [138, 2, 1, "", "setModelAlias"], [138, 2, 1, "", "setModelDraft"], [138, 2, 1, "", "setNBatch"], [138, 2, 1, "", "setNChunks"], [138, 2, 1, "", "setNCtx"], [138, 2, 1, "", "setNDraft"], [138, 2, 1, "", "setNGpuLayers"], [138, 2, 1, "", "setNGpuLayersDraft"], [138, 2, 1, "", "setNKeep"], [138, 2, 1, "", "setNPredict"], [138, 2, 1, "", "setNProbs"], [138, 2, 1, "", "setNSequences"], [138, 2, 1, "", "setNThreads"], [138, 2, 1, "", "setNThreadsBatch"], [138, 2, 1, "", "setNThreadsBatchDraft"], [138, 2, 1, "", "setNThreadsDraft"], [138, 2, 1, "", "setNUbatch"], [138, 2, 1, "", "setNoKvOffload"], [138, 2, 1, "", "setNumaStrategy"], [138, 2, 1, "", "setPSplit"], [138, 2, 1, "", "setPenalizeNl"], [138, 2, 1, "", "setPenaltyPrompt"], [138, 2, 1, "", "setPoolingType"], [138, 2, 1, "", "setPresencePenalty"], [138, 2, 1, "", "setRepeatLastN"], [138, 2, 1, "", "setRepeatPenalty"], [138, 2, 1, "", "setRopeFreqBase"], [138, 2, 1, "", "setRopeFreqScale"], [138, 2, 1, "", "setRopeScalingType"], [138, 2, 1, "", "setSamplers"], [138, 2, 1, "", "setSeed"], [138, 2, 1, "", "setStopStrings"], [138, 2, 1, "", "setSystemPrompt"], [138, 2, 1, "", "setTemperature"], [138, 2, 1, "", "setTensorSplit"], [138, 2, 1, "", "setTfsZ"], [138, 2, 1, "", "setTokenBias"], [138, 2, 1, "", "setTokenIdBias"], [138, 2, 1, "", "setTopK"], [138, 2, 1, "", "setTopP"], [138, 2, 1, "", "setTypicalP"], [138, 2, 1, "", "setUseChatTemplate"], [138, 2, 1, "", "setUseMlock"], [138, 2, 1, "", "setUseMmap"], [138, 2, 1, "", "setYarnAttnFactor"], [138, 2, 1, "", "setYarnBetaFast"], [138, 2, 1, "", "setYarnBetaSlow"], [138, 2, 1, "", "setYarnExtFactor"], [138, 2, 1, "", "setYarnOrigCtx"]], "sparknlp.annotator.seq2seq.bart_transformer": [[139, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[139, 2, 1, "", "loadSavedModel"], [139, 2, 1, "", "pretrained"], [139, 2, 1, "", "setBeamSize"], [139, 2, 1, "", "setCache"], [139, 2, 1, "", "setConfigProtoBytes"], [139, 2, 1, "", "setDoSample"], [139, 2, 1, "", "setIgnoreTokenIds"], [139, 2, 1, "", "setMaxOutputLength"], [139, 2, 1, "", "setMinOutputLength"], [139, 2, 1, "", "setNoRepeatNgramSize"], [139, 2, 1, "", "setRepetitionPenalty"], [139, 2, 1, "", "setTask"], [139, 2, 1, "", "setTemperature"], [139, 2, 1, "", "setTopK"], [139, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[140, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[140, 2, 1, "", "loadSavedModel"], [140, 2, 1, "", "pretrained"], [140, 2, 1, "", "setConfigProtoBytes"], [140, 2, 1, "", "setDoSample"], [140, 2, 1, "", "setIgnoreTokenIds"], [140, 2, 1, "", "setMaxOutputLength"], [140, 2, 1, "", "setMinOutputLength"], [140, 2, 1, "", "setNoRepeatNgramSize"], [140, 2, 1, "", "setRepetitionPenalty"], [140, 2, 1, "", "setTemperature"], [140, 2, 1, "", "setTopK"], [140, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[141, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[141, 2, 1, "", "loadSavedModel"], [141, 2, 1, "", "pretrained"], [141, 2, 1, "", "setConfigProtoBytes"], [141, 2, 1, "", "setDoSample"], [141, 2, 1, "", "setIgnoreTokenIds"], [141, 2, 1, "", "setMaxOutputLength"], [141, 2, 1, "", "setMinOutputLength"], [141, 2, 1, "", "setNoRepeatNgramSize"], [141, 2, 1, "", "setRepetitionPenalty"], [141, 2, 1, "", "setTask"], [141, 2, 1, "", "setTemperature"], [141, 2, 1, "", "setTopK"], [141, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[143, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[143, 2, 1, "", "loadSavedModel"], [143, 2, 1, "", "pretrained"], [143, 2, 1, "", "setConfigProtoBytes"], [143, 2, 1, "", "setDoSample"], [143, 2, 1, "", "setIgnoreTokenIds"], [143, 2, 1, "", "setMaxOutputLength"], [143, 2, 1, "", "setMinOutputLength"], [143, 2, 1, "", "setNoRepeatNgramSize"], [143, 2, 1, "", "setRepetitionPenalty"], [143, 2, 1, "", "setTemperature"], [143, 2, 1, "", "setTopK"], [143, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[144, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[144, 2, 1, "", "loadSavedModel"], [144, 2, 1, "", "pretrained"], [144, 2, 1, "", "setBeamSize"], [144, 2, 1, "", "setConfigProtoBytes"], [144, 2, 1, "", "setDoSample"], [144, 2, 1, "", "setIgnoreTokenIds"], [144, 2, 1, "", "setMaxOutputLength"], [144, 2, 1, "", "setMinOutputLength"], [144, 2, 1, "", "setNoRepeatNgramSize"], [144, 2, 1, "", "setRepetitionPenalty"], [144, 2, 1, "", "setStopTokenIds"], [144, 2, 1, "", "setTemperature"], [144, 2, 1, "", "setTopK"], [144, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[145, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[145, 2, 1, "", "loadSavedModel"], [145, 2, 1, "", "pretrained"], [145, 2, 1, "", "setBeamSize"], [145, 2, 1, "", "setConfigProtoBytes"], [145, 2, 1, "", "setDoSample"], [145, 2, 1, "", "setIgnoreTokenIds"], [145, 2, 1, "", "setMaxOutputLength"], [145, 2, 1, "", "setMinOutputLength"], [145, 2, 1, "", "setNoRepeatNgramSize"], [145, 2, 1, "", "setRepetitionPenalty"], [145, 2, 1, "", "setSrcLang"], [145, 2, 1, "", "setTemperature"], [145, 2, 1, "", "setTgtLang"], [145, 2, 1, "", "setTopK"], [145, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[146, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[146, 2, 1, "", "loadSavedModel"], [146, 2, 1, "", "pretrained"], [146, 2, 1, "", "setConfigProtoBytes"], [146, 2, 1, "", "setDoSample"], [146, 2, 1, "", "setIgnoreTokenIds"], [146, 2, 1, "", "setLangId"], [146, 2, 1, "", "setMaxInputLength"], [146, 2, 1, "", "setMaxOutputLength"], [146, 2, 1, "", "setNoRepeatNgramSize"], [146, 2, 1, "", "setRandomSeed"], [146, 2, 1, "", "setRepetitionPenalty"], [146, 2, 1, "", "setTemperature"], [146, 2, 1, "", "setTopK"], [146, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[147, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[147, 2, 1, "", "loadSavedModel"], [147, 2, 1, "", "pretrained"], [147, 2, 1, "", "setConfigProtoBytes"], [147, 2, 1, "", "setDoSample"], [147, 2, 1, "", "setIgnoreTokenIds"], [147, 2, 1, "", "setMaxOutputLength"], [147, 2, 1, "", "setMinOutputLength"], [147, 2, 1, "", "setNoRepeatNgramSize"], [147, 2, 1, "", "setRepetitionPenalty"], [147, 2, 1, "", "setTemperature"], [147, 2, 1, "", "setTopK"], [147, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[148, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[148, 2, 1, "", "loadSavedModel"], [148, 2, 1, "", "pretrained"], [148, 2, 1, "", "setBeamSize"], [148, 2, 1, "", "setConfigProtoBytes"], [148, 2, 1, "", "setDoSample"], [148, 2, 1, "", "setIgnoreTokenIds"], [148, 2, 1, "", "setMaxOutputLength"], [148, 2, 1, "", "setMinOutputLength"], [148, 2, 1, "", "setNoRepeatNgramSize"], [148, 2, 1, "", "setRepetitionPenalty"], [148, 2, 1, "", "setSrcLang"], [148, 2, 1, "", "setTemperature"], [148, 2, 1, "", "setTgtLang"], [148, 2, 1, "", "setTopK"], [148, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[149, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[149, 2, 1, "", "loadSavedModel"], [149, 2, 1, "", "pretrained"], [149, 2, 1, "", "setConfigProtoBytes"], [149, 2, 1, "", "setDoSample"], [149, 2, 1, "", "setIgnoreTokenIds"], [149, 2, 1, "", "setMaxOutputLength"], [149, 2, 1, "", "setMinOutputLength"], [149, 2, 1, "", "setNoRepeatNgramSize"], [149, 2, 1, "", "setRepetitionPenalty"], [149, 2, 1, "", "setTemperature"], [149, 2, 1, "", "setTopK"], [149, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[150, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[150, 2, 1, "", "loadSavedModel"], [150, 2, 1, "", "pretrained"], [150, 2, 1, "", "setConfigProtoBytes"], [150, 2, 1, "", "setDoSample"], [150, 2, 1, "", "setIgnoreTokenIds"], [150, 2, 1, "", "setMaxOutputLength"], [150, 2, 1, "", "setMinOutputLength"], [150, 2, 1, "", "setNoRepeatNgramSize"], [150, 2, 1, "", "setRepetitionPenalty"], [150, 2, 1, "", "setTemperature"], [150, 2, 1, "", "setTopK"], [150, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[151, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[151, 2, 1, "", "loadSavedModel"], [151, 2, 1, "", "pretrained"], [151, 2, 1, "", "setConfigProtoBytes"], [151, 2, 1, "", "setDoSample"], [151, 2, 1, "", "setIgnoreTokenIds"], [151, 2, 1, "", "setMaxOutputLength"], [151, 2, 1, "", "setMinOutputLength"], [151, 2, 1, "", "setNoRepeatNgramSize"], [151, 2, 1, "", "setRepetitionPenalty"], [151, 2, 1, "", "setTemperature"], [151, 2, 1, "", "setTopK"], [151, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[152, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[152, 2, 1, "", "loadSavedModel"], [152, 2, 1, "", "pretrained"], [152, 2, 1, "", "setConfigProtoBytes"], [152, 2, 1, "", "setDoSample"], [152, 2, 1, "", "setIgnoreTokenIds"], [152, 2, 1, "", "setMaxOutputLength"], [152, 2, 1, "", "setMinOutputLength"], [152, 2, 1, "", "setNoRepeatNgramSize"], [152, 2, 1, "", "setRepetitionPenalty"], [152, 2, 1, "", "setTemperature"], [152, 2, 1, "", "setTopK"], [152, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[153, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[153, 2, 1, "", "loadSavedModel"], [153, 2, 1, "", "pretrained"], [153, 2, 1, "", "setConfigProtoBytes"], [153, 2, 1, "", "setDoSample"], [153, 2, 1, "", "setIgnoreTokenIds"], [153, 2, 1, "", "setMaxNewTokens"], [153, 2, 1, "", "setMaxOutputLength"], [153, 2, 1, "", "setMinOutputLength"], [153, 2, 1, "", "setNoRepeatNgramSize"], [153, 2, 1, "", "setRepetitionPenalty"], [153, 2, 1, "", "setStopAtEos"], [153, 2, 1, "", "setTask"], [153, 2, 1, "", "setTemperature"], [153, 2, 1, "", "setTopK"], [153, 2, 1, "", "setTopP"], [153, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[154, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[154, 1, 1, "", "DocumentSimilarityRankerApproach"], [154, 1, 1, "", "DocumentSimilarityRankerFinisher"], [154, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[154, 2, 1, "", "asRetriever"], [154, 2, 1, "", "setAggregationMethod"], [154, 2, 1, "", "setBucketLength"], [154, 2, 1, "", "setIdentityRanking"], [154, 2, 1, "", "setNumHashTables"], [154, 2, 1, "", "setNumberOfNeighbours"], [154, 2, 1, "", "setSimilarityMethod"], [154, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[154, 2, 1, "", "getInputCols"], [154, 2, 1, "", "getOutputCols"], [154, 2, 1, "", "setExtractNearestNeighbor"], [154, 2, 1, "", "setInputCols"], [154, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[156, 0, 0, "-", "context_spell_checker"], [158, 0, 0, "-", "norvig_sweeting"], [159, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[156, 1, 1, "", "ContextSpellCheckerApproach"], [156, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[156, 2, 1, "", "addRegexClass"], [156, 2, 1, "", "addVocabClass"], [156, 2, 1, "", "setBatchSize"], [156, 2, 1, "", "setCaseStrategy"], [156, 2, 1, "", "setClassCount"], [156, 2, 1, "", "setCompoundCount"], [156, 2, 1, "", "setConfigProtoBytes"], [156, 2, 1, "", "setEpochs"], [156, 2, 1, "", "setErrorThreshold"], [156, 2, 1, "", "setFinalRate"], [156, 2, 1, "", "setGraphFolder"], [156, 2, 1, "", "setInitialRate"], [156, 2, 1, "", "setLanguageModelClasses"], [156, 2, 1, "", "setMaxCandidates"], [156, 2, 1, "", "setMaxSentLen"], [156, 2, 1, "", "setMaxWindowLen"], [156, 2, 1, "", "setMinCount"], [156, 2, 1, "", "setTradeoff"], [156, 2, 1, "", "setValidationFraction"], [156, 2, 1, "", "setWeightedDistPath"], [156, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[156, 2, 1, "", "getWordClasses"], [156, 2, 1, "", "pretrained"], [156, 2, 1, "", "setCaseStrategy"], [156, 2, 1, "", "setClasses"], [156, 2, 1, "", "setCompareLowcase"], [156, 2, 1, "", "setConfigProtoBytes"], [156, 2, 1, "", "setCorrectSymbols"], [156, 2, 1, "", "setErrorThreshold"], [156, 2, 1, "", "setGamma"], [156, 2, 1, "", "setIdsVocab"], [156, 2, 1, "", "setMaxCandidates"], [156, 2, 1, "", "setMaxWindowLen"], [156, 2, 1, "", "setTradeoff"], [156, 2, 1, "", "setVocabFreq"], [156, 2, 1, "", "setVocabIds"], [156, 2, 1, "", "setWeights"], [156, 2, 1, "", "setWordMaxDistance"], [156, 2, 1, "", "updateRegexClass"], [156, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[158, 1, 1, "", "NorvigSweetingApproach"], [158, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[158, 2, 1, "", "setCaseSensitive"], [158, 2, 1, "", "setDictionary"], [158, 2, 1, "", "setDoubleVariants"], [158, 2, 1, "", "setFrequencyPriority"], [158, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[158, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[159, 1, 1, "", "SymmetricDeleteApproach"], [159, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[159, 2, 1, "", "setDeletesThreshold"], [159, 2, 1, "", "setDictionary"], [159, 2, 1, "", "setFrequencyThreshold"], [159, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[159, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[160, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[161, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[161, 2, 1, "", "loadDefaultStopWords"], [161, 2, 1, "", "pretrained"], [161, 2, 1, "", "setCaseSensitive"], [161, 2, 1, "", "setLocale"], [161, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[162, 1, 1, "", "TFNerDLGraphBuilder"], [162, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[162, 2, 1, "", "getGraphFile"], [162, 2, 1, "", "getGraphFolder"], [162, 2, 1, "", "getHiddenUnitsNumber"], [162, 2, 1, "", "getInputCols"], [162, 2, 1, "", "getLabelColumn"], [162, 2, 1, "", "setGraphFile"], [162, 2, 1, "", "setGraphFolder"], [162, 2, 1, "", "setHiddenUnitsNumber"], [162, 2, 1, "", "setInputCols"], [162, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[163, 0, 0, "-", "chunk_tokenizer"], [165, 0, 0, "-", "recursive_tokenizer"], [166, 0, 0, "-", "regex_tokenizer"], [167, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[163, 1, 1, "", "ChunkTokenizer"], [163, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[165, 1, 1, "", "RecursiveTokenizer"], [165, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[165, 2, 1, "", "setInfixes"], [165, 2, 1, "", "setPrefixes"], [165, 2, 1, "", "setSuffixes"], [165, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[166, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[166, 2, 1, "", "setMaxLength"], [166, 2, 1, "", "setMinLength"], [166, 2, 1, "", "setPattern"], [166, 2, 1, "", "setPositionalMask"], [166, 2, 1, "", "setPreservePosition"], [166, 2, 1, "", "setToLowercase"], [166, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[167, 1, 1, "", "Tokenizer"], [167, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[167, 2, 1, "", "addContextChars"], [167, 2, 1, "", "addException"], [167, 2, 1, "", "addInfixPattern"], [167, 2, 1, "", "addSplitChars"], [167, 2, 1, "", "getCaseSensitiveExceptions"], [167, 2, 1, "", "getContextChars"], [167, 2, 1, "", "getExceptions"], [167, 2, 1, "", "getInfixPatterns"], [167, 2, 1, "", "getPrefixPattern"], [167, 2, 1, "", "getSplitChars"], [167, 2, 1, "", "getSuffixPattern"], [167, 2, 1, "", "setCaseSensitiveExceptions"], [167, 2, 1, "", "setContextChars"], [167, 2, 1, "", "setExceptions"], [167, 2, 1, "", "setExceptionsPath"], [167, 2, 1, "", "setInfixPatterns"], [167, 2, 1, "", "setMaxLength"], [167, 2, 1, "", "setMinLength"], [167, 2, 1, "", "setPrefixPattern"], [167, 2, 1, "", "setSplitChars"], [167, 2, 1, "", "setSplitPattern"], [167, 2, 1, "", "setSuffixPattern"], [167, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[167, 2, 1, "", "addSplitChars"], [167, 2, 1, "", "pretrained"], [167, 2, 1, "", "setSplitChars"], [167, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[168, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[170, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[170, 1, 1, "", "WordSegmenterApproach"], [170, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[170, 2, 1, "", "getAmbiguityThreshold"], [170, 2, 1, "", "getFrequencyThreshold"], [170, 2, 1, "", "getNIterations"], [170, 2, 1, "", "setAmbiguityThreshold"], [170, 2, 1, "", "setEnableRegexTokenizer"], [170, 2, 1, "", "setFrequencyThreshold"], [170, 2, 1, "", "setNIterations"], [170, 2, 1, "", "setPattern"], [170, 2, 1, "", "setPosColumn"], [170, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[170, 2, 1, "", "pretrained"], [170, 2, 1, "", "setEnableRegexTokenizer"], [170, 2, 1, "", "setPattern"], [170, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[171, 0, 0, "-", "audio_assembler"], [172, 0, 0, "-", "doc2_chunk"], [173, 0, 0, "-", "document_assembler"], [174, 0, 0, "-", "embeddings_finisher"], [175, 0, 0, "-", "finisher"], [176, 0, 0, "-", "graph_finisher"], [177, 0, 0, "-", "has_recursive_fit"], [178, 0, 0, "-", "has_recursive_transform"], [179, 0, 0, "-", "image_assembler"], [181, 0, 0, "-", "light_pipeline"], [182, 0, 0, "-", "multi_document_assembler"], [183, 0, 0, "-", "prompt_assembler"], [184, 0, 0, "-", "recursive_pipeline"], [185, 0, 0, "-", "table_assembler"], [186, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[171, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[171, 2, 1, "", "getOutputCol"], [171, 2, 1, "", "setInputCol"], [171, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[172, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[172, 2, 1, "", "setChunkCol"], [172, 2, 1, "", "setFailOnMissing"], [172, 2, 1, "", "setIsArray"], [172, 2, 1, "", "setLowerCase"], [172, 2, 1, "", "setStartCol"], [172, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[173, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[173, 2, 1, "", "getOutputCol"], [173, 2, 1, "", "setCleanupMode"], [173, 2, 1, "", "setIdCol"], [173, 2, 1, "", "setInputCol"], [173, 2, 1, "", "setMetadataCol"], [173, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[174, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[174, 2, 1, "", "getInputCols"], [174, 2, 1, "", "getOutputCols"], [174, 2, 1, "", "setCleanAnnotations"], [174, 2, 1, "", "setInputCols"], [174, 2, 1, "", "setOutputAsVector"], [174, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[175, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[175, 2, 1, "", "getInputCols"], [175, 2, 1, "", "getOutputCols"], [175, 2, 1, "", "setAnnotationSplitSymbol"], [175, 2, 1, "", "setCleanAnnotations"], [175, 2, 1, "", "setIncludeMetadata"], [175, 2, 1, "", "setInputCols"], [175, 2, 1, "", "setOutputAsArray"], [175, 2, 1, "", "setOutputCols"], [175, 2, 1, "", "setParseEmbeddingsVectors"], [175, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[176, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[176, 2, 1, "", "setCleanAnnotations"], [176, 2, 1, "", "setInputCol"], [176, 2, 1, "", "setOutputAsArray"], [176, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[177, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[178, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[179, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[179, 2, 1, "", "getOutputCol"], [179, 2, 1, "", "setInputCol"], [179, 2, 1, "", "setOutputCol"], [179, 2, 1, "", "setTextCol"]], "sparknlp.base.light_pipeline": [[181, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[181, 2, 1, "", "annotate"], [181, 2, 1, "", "fullAnnotate"], [181, 2, 1, "", "fullAnnotateImage"], [181, 2, 1, "", "getIgnoreUnsupported"], [181, 2, 1, "", "setIgnoreUnsupported"], [181, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[182, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[182, 2, 1, "", "getOutputCols"], [182, 2, 1, "", "setCleanupMode"], [182, 2, 1, "", "setIdCol"], [182, 2, 1, "", "setInputCols"], [182, 2, 1, "", "setMetadataCol"], [182, 2, 1, "", "setOutputCols"]], "sparknlp.base.prompt_assembler": [[183, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[183, 2, 1, "", "setAddAssistant"], [183, 2, 1, "", "setChatTemplate"], [183, 2, 1, "", "setInputCol"], [183, 2, 1, "", "setOutputCol"]], "sparknlp.base.recursive_pipeline": [[184, 1, 1, "", "RecursivePipeline"], [184, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[185, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[185, 2, 1, "", "setCsvDelimiter"], [185, 2, 1, "", "setEscapeCsvDelimiter"], [185, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[186, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[186, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[187, 0, 0, "-", "annotator_approach"], [188, 0, 0, "-", "annotator_model"], [189, 0, 0, "-", "annotator_properties"], [190, 0, 0, "-", "annotator_type"], [191, 0, 0, "-", "coverage_result"], [193, 0, 0, "-", "match_strategy"], [194, 0, 0, "-", "properties"], [195, 0, 0, "-", "read_as"], [196, 0, 0, "-", "recursive_annotator_approach"], [197, 0, 0, "-", "storage"], [198, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[187, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[188, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[189, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[189, 2, 1, "", "getInputCols"], [189, 2, 1, "", "getLazyAnnotator"], [189, 2, 1, "", "getOutputCol"], [189, 2, 1, "", "setInputCols"], [189, 2, 1, "", "setLazyAnnotator"], [189, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[193, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[194, 1, 1, "", "HasEmbeddingsProperties"], [194, 3, 1, "", "setBeamSize"], [194, 3, 1, "", "setDoSample"], [194, 3, 1, "", "setMaxOutputLength"], [194, 3, 1, "", "setMinOutputLength"], [194, 3, 1, "", "setNReturnSequences"], [194, 3, 1, "", "setNoRepeatNgramSize"], [194, 3, 1, "", "setRepetitionPenalty"], [194, 3, 1, "", "setTask"], [194, 3, 1, "", "setTemperature"], [194, 3, 1, "", "setTopK"], [194, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[194, 2, 1, "", "getDimension"], [194, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[195, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[196, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[198, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[199, 3, 1, "", "explode_annotations_col"], [199, 3, 1, "", "filter_by_annotations_col"], [199, 3, 1, "", "map_annotations"], [199, 3, 1, "", "map_annotations_array"], [199, 3, 1, "", "map_annotations_col"], [199, 3, 1, "", "map_annotations_cols"], [199, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[201, 0, 0, "-", "annotator_java_ml"], [202, 0, 0, "-", "annotator_transformer"], [203, 0, 0, "-", "extended_java_wrapper"], [205, 0, 0, "-", "params_getters_setters"], [206, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[201, 1, 1, "", "AnnotatorJavaMLReadable"], [201, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[201, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[202, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[203, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[203, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[205, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[205, 2, 1, "", "getParamValue"], [205, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[206, 1, 1, "", "RecursiveEstimator"], [206, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[206, 2, 1, "", "fit"]], "sparknlp.logging": [[207, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[207, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[207, 2, 1, "", "end"], [207, 2, 1, "", "log_asset"], [207, 2, 1, "", "log_asset_data"], [207, 2, 1, "", "log_completed_run"], [207, 2, 1, "", "log_metrics"], [207, 2, 1, "", "log_parameters"], [207, 2, 1, "", "log_pipeline_parameters"], [207, 2, 1, "", "log_visualization"], [207, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[210, 0, 0, "-", "pretrained_pipeline"], [211, 0, 0, "-", "resource_downloader"], [212, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[210, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[210, 2, 1, "", "annotate"], [210, 2, 1, "", "fullAnnotate"], [210, 2, 1, "", "fullAnnotateImage"], [210, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[211, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[211, 2, 1, "", "clearCache"], [211, 2, 1, "", "downloadModel"], [211, 2, 1, "", "downloadModelDirectly"], [211, 2, 1, "", "downloadPipeline"], [211, 2, 1, "", "showAvailableAnnotators"], [211, 2, 1, "", "showPublicModels"], [211, 2, 1, "", "showPublicPipelines"], [211, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.reader": [[214, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.sparknlp_reader": [[214, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[214, 2, 1, "", "doc"], [214, 2, 1, "", "email"], [214, 2, 1, "", "html"]], "sparknlp.training": [[215, 0, 0, "-", "conll"], [216, 0, 0, "-", "conllu"], [218, 0, 0, "-", "pos"], [219, 0, 0, "-", "pub_tator"], [220, 0, 0, "-", "spacy_to_annotation"], [221, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[215, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[215, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[216, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[216, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[218, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[218, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[219, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[219, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[220, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 230], "start": 0, "spark": [0, 1, 225, 230, 234], "nlp": [0, 1, 225, 234], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 225], "us": [0, 225, 234], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 214, 215, 216, 218, 219, 220], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 228, 229, 230], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 210, 211, 214, 215, 216, 218, 219, 220, 224], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 201, 202, 203, 205, 206, 207, 210, 211, 214, 215, 216, 218, 219, 220], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 34, 54, 59, 65, 83, 101, 103, 104, 106, 111, 116, 124, 130, 132, 135, 142, 155, 157, 164, 169, 180, 192, 200, 204, 208, 209, 217], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "albert_for_zero_shot_classif": 14, "bart_for_zero_shot_classif": 15, "bert_for_multiple_choic": 16, "bert_for_question_answ": 17, "bert_for_sequence_classif": 18, "bert_for_token_classif": 19, "bert_for_zero_shot_classif": 20, "camembert_for_question_answ": 21, "camembert_for_sequence_classif": 22, "camembert_for_token_classif": 23, "camembert_for_zero_shot_classif": 24, "exampl": [24, 29], "deberta_for_question_answ": 26, "deberta_for_sequence_classif": 27, "deberta_for_token_classif": 28, "deberta_for_zero_shot_classif": 29, "return": 29, "distil_bert_for_question_answ": 30, "distil_bert_for_sequence_classif": 31, "distil_bert_for_token_classif": 32, "distil_bert_for_zero_shot_classif": 33, "longformer_for_question_answ": 35, "longformer_for_sequence_classif": 36, "longformer_for_token_classif": 37, "mpnet_for_question_answ": 38, "mpnet_for_sequence_classif": 39, "mpnet_for_token_classif": 40, "multi_classifier_dl": 41, "roberta_for_question_answ": 42, "roberta_for_sequence_classif": 43, "roberta_for_token_classif": 44, "roberta_for_zero_shot_classif": 45, "sentiment_dl": 46, "tapas_for_question_answ": 47, "xlm_roberta_for_question_answ": 48, "xlm_roberta_for_sequence_classif": 49, "xlm_roberta_for_token_classif": 50, "xlm_roberta_for_zero_shot_classif": 51, "xlnet_for_sequence_classif": 52, "xlnet_for_token_classif": 53, "coref": [54, 55], "spanbert_coref": 55, "cv": [56, 57, 58, 59, 60, 61, 62], "blip_for_question_answ": 56, "clip_for_zero_shot_classif": 57, "convnext_for_image_classif": 58, "swin_for_image_classif": 60, "vision_encoder_decoder_for_image_capt": 61, "vit_for_image_classif": 62, "date2_chunk": 63, "depend": [64, 65, 66], "dependency_pars": 64, "typed_dependency_pars": 66, "document_character_text_splitt": 67, "document_norm": 68, "document_token_splitt": 69, "document_token_splitter_test": 70, "embed": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "albert_embed": 71, "auto_gguf_embed": 72, "bert_embed": 73, "bert_sentence_embed": 74, "bge_embed": 75, "camembert_embed": 76, "chunk_embed": 77, "deberta_embed": 78, "distil_bert_embed": 79, "doc2vec": 80, "e5_embed": 81, "elmo_embed": 82, "instructor_embed": 84, "longformer_embed": 85, "mpnet_embed": 86, "mxbai_embed": 87, "nomic_embed": 88, "roberta_embed": 89, "roberta_sentence_embed": 90, "sentence_embed": 91, "snowflake_embed": 92, "uae_embed": 93, "universal_sentence_encod": 94, "word2vec": 95, "word_embed": 96, "xlm_roberta_embed": 97, "xlm_roberta_sentence_embed": 98, "xlnet_embed": 99, "er": [100, 101], "entity_rul": 100, "graph_extract": 102, "subpackag": [103, 200], "keyword_extract": [104, 105], "yake_keyword_extract": 105, "ld_dl": [106, 107], "language_detector_dl": 107, "lemmat": 108, "matcher": [109, 110, 111, 112, 113, 114], "big_text_match": 109, "date_match": 110, "multi_date_match": 112, "regex_match": 113, "text_match": 114, "n_gram_gener": 115, "ner": [116, 117, 118, 119, 120, 121, 122], "ner_approach": 117, "ner_convert": 118, "ner_crf": 119, "ner_dl": 120, "ner_overwrit": 121, "zero_shot_ner_model": 122, "normal": 123, "openai": [124, 125, 126], "openai_complet": 125, "openai_embed": 126, "param": [127, 128, 129], "classifier_encod": 127, "evaluation_dl_param": 128, "po": [130, 131, 218, 235], "perceptron": 131, "sentenc": [132, 133, 134, 230], "sentence_detector": 133, "sentence_detector_dl": 134, "sentiment": [135, 136, 137], "sentiment_detector": 136, "vivekn_senti": 137, "seq2seq": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "auto_gguf_model": 138, "bart_transform": 139, "cpm_transform": 140, "gpt2_transform": 141, "llama2_transform": 143, "llama3_transform": 144, "m2m100_transform": 145, "marian_transform": 146, "mistral_transform": 147, "nllb_transform": 148, "phi2_transform": 149, "phi3_transform": 150, "qwen_transform": 151, "starcoder_transform": 152, "t5_transform": 153, "similar": [154, 155], "document_similarity_rank": 154, "spell_check": [156, 157, 158, 159], "context_spell_check": 156, "norvig_sweet": 158, "symmetric_delet": 159, "stemmer": 160, "stop_words_clean": 161, "tf_ner_dl_graph_build": 162, "token": [163, 164, 165, 166, 167, 230], "chunk_token": 163, "recursive_token": 165, "regex_token": 166, "token2_chunk": 168, "w": [169, 170], "word_segment": 170, "base": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "audio_assembl": 171, "doc2_chunk": 172, "document_assembl": 173, "embeddings_finish": 174, "finish": [175, 230], "graph_finish": 176, "has_recursive_fit": 177, "has_recursive_transform": 178, "image_assembl": 179, "light_pipelin": 181, "multi_document_assembl": 182, "prompt_assembl": 183, "recursive_pipelin": 184, "table_assembl": 185, "token_assembl": 186, "common": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 229], "annotator_approach": 187, "annotator_model": 188, "annotator_properti": 189, "annotator_typ": 190, "coverage_result": 191, "match_strategi": 193, "properti": 194, "function": [194, 198, 199, 200, 229, 231], "read_a": 195, "recursive_annotator_approach": 196, "storag": 197, "util": [198, 212, 223], "packag": 200, "intern": [201, 202, 203, 204, 205, 206], "annotator_java_ml": 201, "annotator_transform": 202, "extended_java_wrapp": 203, "params_getters_sett": 205, "recurs": 206, "log": [207, 208, 225, 227], "comet": [207, 225], "pretrain": [209, 210, 211, 212, 229, 233, 234], "pretrained_pipelin": 210, "resource_download": 211, "reader": [213, 214], "sparknlp_read": 214, "train": [215, 216, 217, 218, 219, 220, 221, 235], "conll": [215, 235], "conllu": [216, 235], "pub_tat": 219, "spacy_to_annot": 220, "tfgraph": 221, "upload_to_hub": 222, "api": 224, "refer": 224, "A": 225, "meta": 225, "machin": [225, 226], "learn": [225, 226], "platform": [225, 226], "pipelin": [225, 230, 233, 234], "paramet": 225, "evalu": 225, "metric": 225, "visual": 225, "run": 225, "an": 225, "offlin": 225, "experi": 225, "mlflow": 226, "lifecycl": 226, "third": 227, "parti": 227, "project": 227, "approach": 229, "model": 229, "note": 229, "avail": [229, 234], "set": 230, "up": 230, "your": 230, "own": 230, "type": 230, "necessari": 230, "import": 230, "construct": 230, "documentassembl": 230, "data": 230, "detect": 230, "out": 230, "put": 230, "all": 230, "togeth": 230, "ml": [230, 234], "helper": 231, "user": 232, "guid": 232, "light": 233, "convert": 233, "pipelinemodel": 233, "download": 234, "As": 234, "lightpipelin": 234, "load": 235, "dataset": 235, "spell": 235, "checker": 235, "pubtat": 235}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [225, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [210, "module-contents"], [211, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [156, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [210, "classes"], [211, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [218, "classes"], [219, "classes"], [220, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [34, "submodules"], [54, "submodules"], [59, "submodules"], [65, "submodules"], [83, "submodules"], [101, "submodules"], [103, "submodules"], [104, "submodules"], [106, "submodules"], [111, "submodules"], [116, "submodules"], [124, "submodules"], [130, "submodules"], [132, "submodules"], [135, "submodules"], [142, "submodules"], [155, "submodules"], [157, "submodules"], [164, "submodules"], [169, "submodules"], [180, "submodules"], [192, "submodules"], [200, "submodules"], [204, "submodules"], [208, "submodules"], [209, "submodules"], [217, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[24, "examples"], [29, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[25, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[29, "returns"], [29, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[41, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[43, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[44, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[46, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[47, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[51, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[52, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[53, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[54, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[55, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.blip_for_question_answering": [[56, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[57, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[58, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[59, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[60, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[61, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[62, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[63, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[64, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[65, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[66, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[67, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[68, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[69, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[70, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[71, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[72, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[73, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[75, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[76, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[77, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[78, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[79, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[80, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[81, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[82, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[83, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[84, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[85, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[86, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[87, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[88, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[89, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[90, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[91, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[92, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[93, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[94, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[95, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[96, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[97, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[98, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[99, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[100, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[101, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[102, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[103, "module-sparknlp.annotator"]], "Subpackages": [[103, "subpackages"], [200, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[104, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[105, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[106, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[107, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[108, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[109, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[110, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[111, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[112, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[113, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[114, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[115, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[116, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[117, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[118, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[119, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[120, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[121, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[122, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[123, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[124, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[125, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[126, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[127, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[128, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[129, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[130, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[131, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[132, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[133, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[134, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[135, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[136, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[137, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[138, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[139, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[140, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[141, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[142, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[143, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[144, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[145, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[146, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[147, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[148, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[149, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[150, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[151, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[152, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[153, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[154, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[155, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[156, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[157, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[158, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[159, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[160, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[161, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[162, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[163, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[164, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[165, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[166, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[167, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[168, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[169, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[170, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[171, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[172, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[173, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[174, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[175, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[176, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[177, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[178, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[179, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[180, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[181, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[182, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler": [[183, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline": [[184, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[185, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[186, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[187, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[188, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[189, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[190, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[191, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[192, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[193, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[194, "module-sparknlp.common.properties"]], "Functions": [[194, "functions"], [198, "functions"], [199, "functions"], [200, "functions"]], "sparknlp.common.read_as": [[195, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[196, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[197, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[198, "module-sparknlp.common.utils"]], "sparknlp.functions": [[199, "module-sparknlp.functions"]], "sparknlp": [[200, "module-sparknlp"]], "Package Contents": [[200, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[201, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[202, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[203, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[204, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[205, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[206, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[207, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[208, "module-sparknlp.logging"]], "sparknlp.pretrained": [[209, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[210, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[211, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[212, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[213, "module-sparknlp.reader"]], "sparknlp.reader.sparknlp_reader": [[214, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training.conll": [[215, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[216, "module-sparknlp.training.conllu"]], "sparknlp.training": [[217, "module-sparknlp.training"]], "sparknlp.training.pos": [[218, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[219, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[220, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[221, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[222, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[223, "module-sparknlp.util"]], "API Reference": [[224, "api-reference"]], "Modules": [[224, "modules"]], "Comet - A meta machine learning platform": [[225, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[225, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[225, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[225, "logging-evaluation-metrics"]], "Logging Visualizations": [[225, "logging-visualizations"]], "Running An Offline Experiment": [[225, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[226, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[227, "third-party-projects"]], "Logging": [[227, "logging"]], "Annotation": [[228, "annotation"]], "Annotators": [[229, "annotators"]], "Annotator Approaches": [[229, "annotator-approaches"]], "Annotator Models": [[229, "annotator-models"]], "Note": [[229, "note"]], "Pretrained Models": [[229, "pretrained-models"]], "Common Functions": [[229, "common-functions"]], "Available Annotators": [[229, "available-annotators"]], "Setting up your own pipeline": [[230, "setting-up-your-own-pipeline"]], "Annotator types": [[230, "annotator-types"]], "Necessary imports": [[230, "necessary-imports"]], "Constructing the Pipeline": [[230, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[230, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[230, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[230, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[230, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[231, "helper-functions"]], "User Guide": [[232, "user-guide"]], "Light Pipelines": [[233, "light-pipelines"]], "Converting PipelineModels": [[233, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[233, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[234, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[234, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[234, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[234, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[234, "available-pipelines"]], "Loading datasets for training": [[235, "loading-datasets-for-training"]], "POS Dataset": [[235, "pos-dataset"]], "CoNLL Dataset": [[235, "conll-dataset"]], "CoNLLU Dataset": [[235, "conllu-dataset"]], "Spell Checkers Dataset": [[235, "spell-checkers-dataset"]], "PubTator Dataset": [[235, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [22, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [23, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [25, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [26, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [34, "module-sparknlp.annotator.classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [42, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [43, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [44, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [46, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [47, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [51, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [52, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [53, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [54, "module-sparknlp.annotator.coref"], [55, "module-sparknlp.annotator.coref.spanbert_coref"], [56, "module-sparknlp.annotator.cv.blip_for_question_answering"], [57, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [58, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [59, "module-sparknlp.annotator.cv"], [60, "module-sparknlp.annotator.cv.swin_for_image_classification"], [61, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [62, "module-sparknlp.annotator.cv.vit_for_image_classification"], [63, "module-sparknlp.annotator.date2_chunk"], [64, "module-sparknlp.annotator.dependency.dependency_parser"], [65, "module-sparknlp.annotator.dependency"], [66, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [67, "module-sparknlp.annotator.document_character_text_splitter"], [68, "module-sparknlp.annotator.document_normalizer"], [69, "module-sparknlp.annotator.document_token_splitter"], [70, "module-sparknlp.annotator.document_token_splitter_test"], [71, "module-sparknlp.annotator.embeddings.albert_embeddings"], [72, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [73, "module-sparknlp.annotator.embeddings.bert_embeddings"], [74, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [75, "module-sparknlp.annotator.embeddings.bge_embeddings"], [76, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [77, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [78, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [79, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [80, "module-sparknlp.annotator.embeddings.doc2vec"], [81, "module-sparknlp.annotator.embeddings.e5_embeddings"], [82, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [83, "module-sparknlp.annotator.embeddings"], [84, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [85, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [86, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [87, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [88, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [89, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [90, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [91, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [92, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [93, "module-sparknlp.annotator.embeddings.uae_embeddings"], [94, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [95, "module-sparknlp.annotator.embeddings.word2vec"], [96, "module-sparknlp.annotator.embeddings.word_embeddings"], [97, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [98, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [99, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [100, "module-sparknlp.annotator.er.entity_ruler"], [101, "module-sparknlp.annotator.er"], [102, "module-sparknlp.annotator.graph_extraction"], [103, "module-sparknlp.annotator"], [104, "module-sparknlp.annotator.keyword_extraction"], [105, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [106, "module-sparknlp.annotator.ld_dl"], [107, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [108, "module-sparknlp.annotator.lemmatizer"], [109, "module-sparknlp.annotator.matcher.big_text_matcher"], [110, "module-sparknlp.annotator.matcher.date_matcher"], [111, "module-sparknlp.annotator.matcher"], [112, "module-sparknlp.annotator.matcher.multi_date_matcher"], [113, "module-sparknlp.annotator.matcher.regex_matcher"], [114, "module-sparknlp.annotator.matcher.text_matcher"], [115, "module-sparknlp.annotator.n_gram_generator"], [116, "module-sparknlp.annotator.ner"], [117, "module-sparknlp.annotator.ner.ner_approach"], [118, "module-sparknlp.annotator.ner.ner_converter"], [119, "module-sparknlp.annotator.ner.ner_crf"], [120, "module-sparknlp.annotator.ner.ner_dl"], [121, "module-sparknlp.annotator.ner.ner_overwriter"], [122, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [123, "module-sparknlp.annotator.normalizer"], [124, "module-sparknlp.annotator.openai"], [125, "module-sparknlp.annotator.openai.openai_completion"], [126, "module-sparknlp.annotator.openai.openai_embeddings"], [127, "module-sparknlp.annotator.param.classifier_encoder"], [128, "module-sparknlp.annotator.param.evaluation_dl_params"], [129, "module-sparknlp.annotator.param"], [130, "module-sparknlp.annotator.pos"], [131, "module-sparknlp.annotator.pos.perceptron"], [132, "module-sparknlp.annotator.sentence"], [133, "module-sparknlp.annotator.sentence.sentence_detector"], [134, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [135, "module-sparknlp.annotator.sentiment"], [136, "module-sparknlp.annotator.sentiment.sentiment_detector"], [137, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [138, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [139, "module-sparknlp.annotator.seq2seq.bart_transformer"], [140, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [141, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [142, "module-sparknlp.annotator.seq2seq"], [143, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [144, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [145, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [146, "module-sparknlp.annotator.seq2seq.marian_transformer"], [147, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [148, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [149, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [150, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [151, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [152, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [153, "module-sparknlp.annotator.seq2seq.t5_transformer"], [154, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [155, "module-sparknlp.annotator.similarity"], [156, "module-sparknlp.annotator.spell_check.context_spell_checker"], [157, "module-sparknlp.annotator.spell_check"], [158, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [159, "module-sparknlp.annotator.spell_check.symmetric_delete"], [160, "module-sparknlp.annotator.stemmer"], [161, "module-sparknlp.annotator.stop_words_cleaner"], [162, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [163, "module-sparknlp.annotator.token.chunk_tokenizer"], [164, "module-sparknlp.annotator.token"], [165, "module-sparknlp.annotator.token.recursive_tokenizer"], [166, "module-sparknlp.annotator.token.regex_tokenizer"], [167, "module-sparknlp.annotator.token.tokenizer"], [168, "module-sparknlp.annotator.token2_chunk"], [169, "module-sparknlp.annotator.ws"], [170, "module-sparknlp.annotator.ws.word_segmenter"], [171, "module-sparknlp.base.audio_assembler"], [172, "module-sparknlp.base.doc2_chunk"], [173, "module-sparknlp.base.document_assembler"], [174, "module-sparknlp.base.embeddings_finisher"], [175, "module-sparknlp.base.finisher"], [176, "module-sparknlp.base.graph_finisher"], [177, "module-sparknlp.base.has_recursive_fit"], [178, "module-sparknlp.base.has_recursive_transform"], [179, "module-sparknlp.base.image_assembler"], [180, "module-sparknlp.base"], [181, "module-sparknlp.base.light_pipeline"], [182, "module-sparknlp.base.multi_document_assembler"], [183, "module-sparknlp.base.prompt_assembler"], [184, "module-sparknlp.base.recursive_pipeline"], [185, "module-sparknlp.base.table_assembler"], [186, "module-sparknlp.base.token_assembler"], [187, "module-sparknlp.common.annotator_approach"], [188, "module-sparknlp.common.annotator_model"], [189, "module-sparknlp.common.annotator_properties"], [190, "module-sparknlp.common.annotator_type"], [191, "module-sparknlp.common.coverage_result"], [192, "module-sparknlp.common"], [193, "module-sparknlp.common.match_strategy"], [194, "module-sparknlp.common.properties"], [195, "module-sparknlp.common.read_as"], [196, "module-sparknlp.common.recursive_annotator_approach"], [197, "module-sparknlp.common.storage"], [198, "module-sparknlp.common.utils"], [199, "module-sparknlp.functions"], [200, "module-sparknlp"], [201, "module-sparknlp.internal.annotator_java_ml"], [202, "module-sparknlp.internal.annotator_transformer"], [203, "module-sparknlp.internal.extended_java_wrapper"], [204, "module-sparknlp.internal"], [205, "module-sparknlp.internal.params_getters_setters"], [206, "module-sparknlp.internal.recursive"], [207, "module-sparknlp.logging.comet"], [208, "module-sparknlp.logging"], [209, "module-sparknlp.pretrained"], [210, "module-sparknlp.pretrained.pretrained_pipeline"], [211, "module-sparknlp.pretrained.resource_downloader"], [212, "module-sparknlp.pretrained.utils"], [213, "module-sparknlp.reader"], [214, "module-sparknlp.reader.sparknlp_reader"], [215, "module-sparknlp.training.conll"], [216, "module-sparknlp.training.conllu"], [217, "module-sparknlp.training"], [218, "module-sparknlp.training.pos"], [219, "module-sparknlp.training.pub_tator"], [220, "module-sparknlp.training.spacy_to_annotation"], [221, "module-sparknlp.training.tfgraphs"], [222, "module-sparknlp.upload_to_hub"], [223, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "getclasses() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "pretrained() (albertforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "loadsavedmodel() (bertformultiplechoice static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "pretrained() (bertformultiplechoice static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "getclasses() (camembertforzeroshotclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "pretrained() (camembertforzeroshotclassification static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[25, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[25, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "getclasses() (debertaforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (debertaforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "pretrained() (mpnetforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "getclasses() (mpnetforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "pretrained() (mpnetforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "getclasses() (mpnetfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "pretrained() (mpnetfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[41, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[43, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[44, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[46, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[46, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[47, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[47, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[47, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[47, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[51, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[52, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[53, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[53, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[54, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[55, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[55, "module-sparknlp.annotator.coref.spanbert_coref"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[56, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "loadsavedmodel() (blipforquestionanswering static method)": [[56, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "pretrained() (blipforquestionanswering static method)": [[56, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[56, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[56, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[57, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[57, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[57, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[57, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[57, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[58, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[58, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[59, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[60, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[60, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[60, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[60, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[60, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[60, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[61, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[61, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[61, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[61, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[61, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[62, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[62, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[62, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[62, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[62, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[62, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[63, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[63, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[63, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[64, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[64, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[64, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[64, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[64, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[64, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[64, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[65, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[66, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[66, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[66, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[66, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[66, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[66, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[66, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[67, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[67, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[68, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[68, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[69, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[69, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[69, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[69, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[69, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[69, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[70, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[70, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[70, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[71, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[71, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[71, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[71, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[71, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "getmetadata() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "loadsavedmodel() (autoggufembeddings static method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "pretrained() (autoggufembeddings static method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnsequences() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[72, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[72, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[73, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[73, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[73, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[73, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[73, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[74, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[74, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[74, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[74, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[74, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[75, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[75, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[75, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[75, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[75, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[76, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[76, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[76, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[76, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[76, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[77, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[77, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[77, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[77, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[78, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[78, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[78, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[78, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[78, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[79, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[79, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[79, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[79, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[79, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[80, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[80, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[81, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[81, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[81, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[81, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[81, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[82, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[82, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[82, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[82, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[82, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[82, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[82, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[83, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[84, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[84, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[84, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[84, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[84, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[84, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[85, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[85, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[85, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[85, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[85, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[86, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[86, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[86, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[86, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[86, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[87, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "loadsavedmodel() (mxbaiembeddings static method)": [[87, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "pretrained() (mxbaiembeddings static method)": [[87, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[87, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[87, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[88, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "loadsavedmodel() (nomicembeddings static method)": [[88, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "pretrained() (nomicembeddings static method)": [[88, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[88, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[88, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[89, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[89, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[89, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[89, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[89, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[90, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[90, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[90, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[90, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[90, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[91, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[91, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[91, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[92, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "loadsavedmodel() (snowflakeembeddings static method)": [[92, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "pretrained() (snowflakeembeddings static method)": [[92, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[92, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[92, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[93, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "loadsavedmodel() (uaeembeddings static method)": [[93, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "pretrained() (uaeembeddings static method)": [[93, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[93, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[93, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[94, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[94, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[94, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[94, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[94, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[94, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[95, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[95, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[96, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[96, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[97, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[97, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[97, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[97, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[97, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[98, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[98, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[98, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[98, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[98, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[99, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[99, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[99, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[99, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[99, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[100, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[100, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[100, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[100, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[100, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[100, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[100, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[101, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[102, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[102, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[103, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[104, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[105, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[105, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[106, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[107, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[107, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[107, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[107, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[107, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[107, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[107, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[108, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[108, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[108, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[108, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[108, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[108, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[108, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[109, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[109, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setaggressivematching() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[110, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[110, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[111, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[112, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[112, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[113, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[113, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[113, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[113, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[113, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[113, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[113, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[114, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[114, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[115, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[115, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[115, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[115, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[115, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[116, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[117, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[117, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[118, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[118, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[118, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[118, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[118, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[119, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[119, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[120, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[120, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[121, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[121, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[121, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[121, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[121, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[122, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[122, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[122, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[122, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[122, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[122, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[122, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[123, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[123, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[123, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[123, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[123, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[123, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[123, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[123, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[124, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[125, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[125, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[126, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[126, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[126, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[126, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[127, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[127, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[128, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[128, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[129, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[130, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[131, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[131, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[131, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[131, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[131, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[131, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[131, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[132, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[133, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[133, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[134, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[134, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[135, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[136, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[136, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[136, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[136, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[137, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[137, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[137, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[137, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[137, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[137, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "getmetadata() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.getMetadata"]], "loadsavedmodel() (autoggufmodel static method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "pretrained() (autoggufmodel static method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "setcacheprompt() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setCachePrompt"]], "setchattemplate() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setChatTemplate"]], "setdefragmentationthreshold() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDefragmentationThreshold"]], "setdisabletokenids() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDisableTokenIds"]], "setdynamictemperatureexponent() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDynamicTemperatureRange"]], "setembedding() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setEmbedding"]], "setflashattention() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setFlashAttention"]], "setfrequencypenalty() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setFrequencyPenalty"]], "setgpusplitmode() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGpuSplitMode"]], "setgrammar() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrammar"]], "setgrpattnn() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrpAttnN"]], "setgrpattnw() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrpAttnW"]], "setignoreeos() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setIgnoreEos"]], "setinputprefix() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputPrefix"]], "setinputprefixbos() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputPrefixBos"]], "setinputsuffix() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputSuffix"]], "setlookupcachedynamicfilepath() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLookupCacheStaticFilePath"]], "setloraadapters() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLoraAdapters"]], "setmaingpu() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMainGpu"]], "setminkeep() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMinKeep"]], "setminp() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMinP"]], "setmirostat() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStat"]], "setmirostateta() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStatEta"]], "setmirostattau() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStatTau"]], "setmodelalias() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setModelAlias"]], "setmodeldraft() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setModelDraft"]], "setnbatch() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNBatch"]], "setnchunks() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNChunks"]], "setnctx() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNCtx"]], "setndraft() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNDraft"]], "setngpulayers() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNGpuLayers"]], "setngpulayersdraft() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNGpuLayersDraft"]], "setnkeep() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNKeep"]], "setnpredict() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNPredict"]], "setnprobs() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNProbs"]], "setnsequences() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNSequences"]], "setnthreads() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreads"]], "setnthreadsbatch() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsBatch"]], "setnthreadsbatchdraft() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsBatchDraft"]], "setnthreadsdraft() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsDraft"]], "setnubatch() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNUbatch"]], "setnokvoffload() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNoKvOffload"]], "setnumastrategy() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNumaStrategy"]], "setpsplit() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPSplit"]], "setpenalizenl() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPenalizeNl"]], "setpenaltyprompt() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPenaltyPrompt"]], "setpoolingtype() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPoolingType"]], "setpresencepenalty() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPresencePenalty"]], "setrepeatlastn() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRepeatLastN"]], "setrepeatpenalty() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRepeatPenalty"]], "setropefreqbase() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeFreqBase"]], "setropefreqscale() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeFreqScale"]], "setropescalingtype() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeScalingType"]], "setsamplers() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSamplers"]], "setseed() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSeed"]], "setstopstrings() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setStopStrings"]], "setsystemprompt() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSystemPrompt"]], "settemperature() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTemperature"]], "settensorsplit() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTensorSplit"]], "settfsz() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTfsZ"]], "settokenbias() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTokenBias"]], "settokenidbias() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTokenIdBias"]], "settopk() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTopK"]], "settopp() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTopP"]], "settypicalp() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTypicalP"]], "setusechattemplate() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseChatTemplate"]], "setusemlock() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseMlock"]], "setusemmap() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseMmap"]], "setyarnattnfactor() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnAttnFactor"]], "setyarnbetafast() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnBetaFast"]], "setyarnbetaslow() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnBetaSlow"]], "setyarnextfactor() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnExtFactor"]], "setyarnorigctx() (autoggufmodel method)": [[138, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnOrigCtx"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[138, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[139, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[139, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "loadsavedmodel() (cpmtransformer static method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "pretrained() (cpmtransformer static method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "setconfigprotobytes() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[140, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[140, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[141, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[141, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[142, "module-sparknlp.annotator.seq2seq"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "loadsavedmodel() (llama2transformer static method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "pretrained() (llama2transformer static method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "setconfigprotobytes() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[143, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[143, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "loadsavedmodel() (llama3transformer static method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "pretrained() (llama3transformer static method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "setbeamsize() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[144, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[144, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "loadsavedmodel() (m2m100transformer static method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "pretrained() (m2m100transformer static method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "setbeamsize() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[145, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[145, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[146, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[146, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "loadsavedmodel() (mistraltransformer static method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "pretrained() (mistraltransformer static method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "setconfigprotobytes() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[147, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[147, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "loadsavedmodel() (nllbtransformer static method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "pretrained() (nllbtransformer static method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "setbeamsize() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[148, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[148, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "loadsavedmodel() (phi2transformer static method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "pretrained() (phi2transformer static method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "setconfigprotobytes() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[149, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[149, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "loadsavedmodel() (phi3transformer static method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "pretrained() (phi3transformer static method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "setconfigprotobytes() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[150, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[150, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "loadsavedmodel() (qwentransformer static method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "pretrained() (qwentransformer static method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "setconfigprotobytes() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[151, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[151, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "loadsavedmodel() (starcodertransformer static method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "pretrained() (starcodertransformer static method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "setconfigprotobytes() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[152, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[152, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[153, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[153, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "asretriever() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[154, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[154, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[155, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[156, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[156, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[157, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[158, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[158, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[159, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[159, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[160, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[160, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[161, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[161, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[161, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[161, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[161, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[161, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[161, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[162, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[162, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[163, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[163, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[163, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[164, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[165, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[165, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[165, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[165, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[165, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[165, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[165, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[166, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[166, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[167, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[167, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[167, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[167, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[167, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[167, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[167, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[168, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[168, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[169, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[170, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[170, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[171, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[171, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[171, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[171, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[171, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[172, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[172, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[173, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[173, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[173, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[173, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[173, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[173, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[173, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[173, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[174, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[174, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[175, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[175, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[175, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[176, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[176, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[176, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[176, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[176, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[176, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[177, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[177, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[178, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[178, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[179, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[179, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[179, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[179, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "settextcol() (imageassembler method)": [[179, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[179, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[180, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[181, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[181, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[181, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[181, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[181, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[181, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[181, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[181, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[182, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[182, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[183, "sparknlp.base.prompt_assembler.PromptAssembler"]], "setaddassistant() (promptassembler method)": [[183, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[183, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[183, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[183, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "sparknlp.base.prompt_assembler": [[183, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[184, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[184, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[184, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[185, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[185, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[185, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[185, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[185, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[186, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[186, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[186, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[187, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[187, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[188, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[188, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[189, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[189, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[190, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[191, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[192, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[193, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[193, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[194, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[194, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[194, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[194, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[194, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[195, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[195, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[196, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[196, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[197, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[198, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[198, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[199, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[199, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[199, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[199, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[199, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[199, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[199, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[199, "module-sparknlp.functions"]], "sparknlp": [[200, "module-sparknlp"]], "start() (in module sparknlp)": [[200, "sparknlp.start"]], "version() (in module sparknlp)": [[200, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[201, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[201, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[201, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[201, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[202, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[202, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[203, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[203, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[203, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[204, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[205, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[205, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[205, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[205, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[206, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[206, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[206, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[206, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[207, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[207, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[207, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[208, "module-sparknlp.logging"]], "sparknlp.pretrained": [[209, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[210, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[210, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[210, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[210, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[210, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[210, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[211, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[211, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[212, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[213, "module-sparknlp.reader"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[214, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "doc() (sparknlpreader method)": [[214, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[214, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[214, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "sparknlp.reader.sparknlp_reader": [[214, "module-sparknlp.reader.sparknlp_reader"]], "conll (class in sparknlp.training.conll)": [[215, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[215, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[215, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[216, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[216, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[216, "module-sparknlp.training.conllu"]], "sparknlp.training": [[217, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[218, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[218, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[218, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[219, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[219, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[219, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[220, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[220, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[221, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[222, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[223, "module-sparknlp.util"]]}})