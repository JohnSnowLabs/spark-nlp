Search.setIndex({"docnames": ["_templates/_autoapi/base/base", "_templates/_autoapi/index", "_templates/_autoapi/python/attribute", "_templates/_autoapi/python/class", "_templates/_autoapi/python/data", "_templates/_autoapi/python/exception", "_templates/_autoapi/python/function", "_templates/_autoapi/python/method", "_templates/_autoapi/python/module", "_templates/_autoapi/python/package", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/token2_chunk/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/chunk2_doc/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_templates/_autoapi/base/base.rst", "_templates/_autoapi/index.rst", "_templates/_autoapi/python/attribute.rst", "_templates/_autoapi/python/class.rst", "_templates/_autoapi/python/data.rst", "_templates/_autoapi/python/exception.rst", "_templates/_autoapi/python/function.rst", "_templates/_autoapi/python/method.rst", "_templates/_autoapi/python/module.rst", "_templates/_autoapi/python/package.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/chunk2_doc/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["&lt;no title&gt;", "API Reference", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "7": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "thi": [1, 10, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 124, 125, 126, 128, 129, 132, 133, 135, 138, 140, 141, 142, 143, 144, 146, 147, 151, 157, 158, 162, 163, 164, 167, 170, 178, 179, 180, 181, 182, 183, 184, 185, 196, 201, 202, 205, 206, 207, 209, 210, 211], "page": [1, 11, 55, 110, 167, 201, 209, 211], "list": [1, 3, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 76, 78, 81, 83, 86, 89, 93, 94, 96, 97, 98, 99, 105, 106, 110, 112, 113, 114, 119, 123, 126, 133, 134, 140, 141, 147, 156, 163, 164, 167, 182, 183, 201, 206], "an": [1, 12, 16, 17, 26, 37, 41, 42, 51, 52, 55, 59, 61, 64, 66, 75, 76, 81, 83, 85, 86, 88, 89, 90, 91, 95, 96, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 121, 126, 128, 131, 132, 133, 134, 135, 140, 141, 144, 147, 151, 155, 156, 158, 162, 163, 164, 178, 179, 182, 183, 184, 193, 194, 196, 197, 201, 203, 205, 206, 207, 209, 210], "overview": [1, 201, 209], "all": [1, 8, 10, 12, 13, 14, 19, 22, 24, 28, 31, 35, 39, 42, 44, 46, 55, 56, 57, 58, 59, 69, 72, 75, 76, 79, 83, 86, 96, 98, 110, 113, 114, 119, 124, 128, 133, 135, 164, 170, 181, 184, 185, 201, 206, 211], "spark": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 150, 152, 156, 157, 159, 160, 161, 164, 167, 170, 185, 193, 194, 196, 197, 201, 203, 204, 205, 206, 208, 209, 210, 212], "nlp": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 126, 128, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 150, 157, 161, 164, 167, 170, 185, 193, 194, 196, 197, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212], "modul": [1, 8, 9, 11, 33, 53, 65, 77, 79, 80, 82, 87, 92, 101, 102, 104, 107, 111, 115, 122, 127, 139, 150, 161, 166, 181, 195], "class": [1, 3, 5, 8, 79, 150, 154, 161, 168, 195, 201, 202, 210, 212], "function": [1, 6, 8, 11, 64, 72, 113, 133, 181, 201, 209], "method": [1, 3, 7, 26, 37, 41, 56, 62, 63, 71, 75, 81, 96, 170, 182, 185, 201], "extend": [2, 5, 9, 16, 17, 26, 37, 41, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 67, 69, 70, 72, 73, 75, 81, 83, 84, 86, 88, 89, 90, 91, 95, 96, 98, 100, 103, 105, 106, 108, 109, 112, 113, 114, 116, 118, 119, 123, 126, 128, 130, 131, 132, 133, 134, 141, 144, 167], "python": [2, 5, 9, 11, 83, 179, 180, 181, 184], "data": [2, 8, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 156, 164, 167, 182, 183, 184, 193, 194, 195, 196, 197, 203, 205, 206, 210, 211, 212], "rst": [2, 5, 8, 9], "obj": [3, 4, 6, 7, 8, 194], "displai": [3, 4, 6, 7, 8, 26, 37, 41, 100, 110, 164, 202], "py": [3, 4, 6, 7, 145, 146, 153, 159, 163], "type": [3, 4, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 156, 158, 167, 182, 183, 184, 196, 205, 206, 209], "short_nam": [3, 6, 7, 8], "arg": [3, 6, 7, 142, 160, 182, 183, 184], "endif": [3, 4, 6, 7, 8], "return_annot": [3, 6, 7], "overload": [3, 6, 7], "length": [3, 7, 8, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 71, 73, 74, 75, 91, 98, 105, 106, 110, 112, 113, 114, 124, 126, 182, 183], "endfor": [3, 6, 7, 8], "base": [3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 145, 146, 147, 150, 153, 157, 159, 163, 164, 170, 180, 182, 184, 185, 202, 206, 207, 210], "show": [3, 4, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 143, 144, 156, 193, 194, 196, 197, 202, 205, 206, 207, 211], "inherit": [3, 146, 163], "autoapi_opt": [3, 8], "link_obj": 3, "loop": [3, 179], "last": [3, 12, 86, 88, 121, 210], "diagram": 3, "object": [3, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 95, 96, 103, 106, 110, 112, 113, 114, 116, 117, 118, 119, 128, 152, 159, 160, 164, 179, 205, 206], "autoapi": [3, 8], "full_nam": 3, "part": [3, 17, 59, 81, 84, 102, 103, 118, 128, 131, 184, 196, 212], "1": [3, 4, 6, 7, 8, 10, 17, 19, 22, 24, 26, 28, 31, 35, 37, 39, 41, 44, 46, 49, 52, 54, 56, 57, 58, 61, 63, 64, 68, 71, 72, 73, 74, 75, 81, 85, 86, 88, 89, 90, 91, 94, 95, 96, 99, 100, 105, 106, 109, 110, 112, 113, 114, 120, 124, 130, 133, 134, 147, 151, 157, 162, 163, 164, 167, 170, 180, 181, 182, 183, 184, 185, 193, 194, 197, 202, 205, 206, 210, 211], "privat": [3, 67, 68, 158], "member": [3, 103, 167], "docstr": [3, 4, 6, 7, 8], "indent": [3, 4, 6, 7, 8], "set": [3, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 146, 147, 151, 155, 157, 162, 163, 164, 184, 193, 202, 206, 209, 210], "visible_class": [3, 8], "selectattr": [3, 8], "els": [3, 4, 6, 7, 8, 108], "rejectattr": [3, 8], "klass": [3, 8], "render": [3, 8], "visible_attribut": [3, 8], "attribut": [3, 8, 164], "visible_method": 3, "name": [4, 8, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 90, 92, 93, 95, 96, 99, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 120, 121, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 143, 144, 147, 156, 162, 164, 167, 170, 180, 182, 184, 185, 193, 196, 202, 206], "valu": [4, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 76, 78, 81, 83, 84, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 109, 110, 112, 113, 114, 116, 119, 120, 124, 126, 128, 129, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 147, 151, 152, 162, 164, 182, 183, 202, 212], "i": [4, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 155, 156, 157, 163, 164, 179, 180, 181, 182, 183, 184, 193, 196, 197, 202, 203, 205, 206, 207, 209, 210, 211, 212], "none": [4, 6, 7, 8, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 89, 90, 95, 96, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 146, 163, 164, 167, 178, 180, 182, 183, 184, 207], "annot": [4, 11, 13, 14, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 155, 156, 157, 158, 159, 161, 163, 164, 167, 169, 170, 185, 196, 202, 203, 208, 209, 210, 211, 212], "string": [4, 12, 26, 37, 41, 49, 52, 55, 76, 89, 91, 97, 98, 106, 113, 117, 119, 123, 131, 132, 134, 138, 140, 141, 184, 210], "splitlin": 4, "count": [4, 42, 114], "multilin": 4, "width": [4, 14, 138], "8": [4, 10, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 54, 55, 56, 57, 58, 59, 61, 62, 66, 67, 68, 73, 74, 75, 86, 91, 96, 97, 100, 110, 114, 125, 184, 193], "truncat": [4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 54, 55, 72, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 134, 135, 141, 143, 144, 156, 196, 205, 206, 207], "100": [4, 26, 37, 42, 51, 63, 71, 73, 81, 106, 143], "sphinx_vers": [6, 7], "properti": [6, 7, 56, 136, 137, 147, 150, 157, 182, 183], "method_typ": 7, "orphan": 8, "nest": [8, 183], "pars": [8, 17, 52, 53, 54, 59, 76, 84, 86, 88, 114, 116, 117, 140, 143, 167, 196], "block": [8, 180, 182], "subpackag": 8, "visible_subpackag": 8, "toctre": 8, "titlesonli": 8, "maxdepth": 8, "index": [8, 12, 81, 85, 124, 157, 193], "endblock": 8, "submodul": 8, "visible_submodul": 8, "content": [8, 205, 211], "visible_children": 8, "children": 8, "elif": 8, "equalto": 8, "packag": [8, 10, 56, 61, 164, 203, 204], "import": [8, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 156, 164, 167, 170, 185, 193, 194, 196, 197, 202, 205, 206, 209, 210, 211, 212], "titl": [8, 197, 212], "visible_funct": 8, "summari": [8, 110, 113], "scope": [8, 109, 182, 183, 184], "id": [8, 37, 55, 73, 76, 110, 112, 113, 130, 131, 132, 134, 141, 144, 164, 184], "obj_item": 8, "0": [8, 10, 16, 17, 26, 37, 41, 49, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 83, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 110, 113, 114, 117, 120, 125, 126, 128, 130, 132, 133, 134, 140, 141, 143, 144, 147, 151, 156, 157, 160, 162, 163, 164, 167, 170, 180, 182, 184, 185, 194, 196, 197, 202, 205, 206, 211, 212], "can": [10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 89, 94, 95, 96, 97, 103, 105, 106, 108, 110, 112, 113, 114, 116, 117, 119, 125, 128, 132, 133, 141, 142, 143, 155, 164, 167, 183, 193, 194, 196, 202, 204, 206, 207, 209, 210, 211, 212], "quick": [10, 202, 207], "refer": [10, 11, 49, 51, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 75, 81, 105, 106, 109, 110, 112, 113, 114, 116, 117, 131, 132, 141, 206, 208, 209], "how": [10, 11, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 66, 67, 69, 73, 75, 76, 78, 83, 84, 85, 89, 90, 94, 95, 96, 98, 100, 105, 108, 116, 117, 124, 126, 128, 132, 135, 141, 152, 155, 157, 193, 194, 202, 206, 211], "up": [10, 11, 26, 37, 63, 66, 69, 71, 81, 110, 113, 157, 202, 206, 209, 210], "your": [10, 11, 26, 37, 41, 52, 62, 63, 67, 69, 71, 84, 85, 89, 90, 95, 96, 98, 103, 108, 109, 114, 116, 121, 123, 128, 133, 178, 204, 206, 209, 210, 212], "environ": [10, 203], "pypi": 10, "pip": 10, "anaconda": 10, "c": [10, 59, 63, 71, 81, 112, 180, 184], "johnsnowlab": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 89, 90, 95, 96, 98, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 126, 128, 143, 157], "load": [10, 11, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 81, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 138, 167, 206, 209], "shell": 10, "com": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 89, 90, 95, 96, 98, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 126, 128, 143, 157, 184], "nlp_2": [10, 157], "12": [10, 56, 73, 74, 75, 81, 86, 88, 94, 103, 114, 125, 140, 156, 157, 167, 170, 185, 196, 205], "pyspark": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 138, 140, 141, 143, 144, 156, 157, 160, 163, 164, 167, 193, 194, 196, 197, 206, 207], "submit": [10, 164, 184, 202], "extern": [10, 81, 84, 89, 90, 96, 120, 142, 155, 193, 194, 196, 197], "jar": [10, 157], "after": [10, 52, 54, 63, 67, 68, 71, 86, 88, 94, 123, 144, 164, 184, 205, 206], "compil": 10, "build": [10, 61, 62, 67, 68, 78, 81, 85, 110, 164, 170, 180, 184, 185, 202], "sbt": 10, "assembli": 10, "built": [10, 26, 37, 141, 184], "top": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 56, 81, 110, 113, 141], "apach": [10, 141, 157], "x": [10, 37, 156, 180, 181, 184, 193, 212], "For": [10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 126, 128, 130, 131, 132, 133, 134, 141, 144, 164, 167, 179, 184, 197, 202, 203, 205, 206, 207, 208, 209, 210], "you": [10, 52, 54, 60, 62, 67, 69, 78, 86, 97, 133, 135, 140, 164, 170, 185, 196, 202, 204, 206, 207, 210, 211, 212], "need": [10, 16, 17, 52, 54, 62, 67, 72, 76, 78, 81, 86, 89, 95, 96, 98, 100, 103, 106, 109, 110, 114, 116, 117, 124, 126, 129, 138, 140, 164, 178, 183, 184, 193, 194, 196, 202, 204, 206, 207, 210, 212], "java": [10, 83, 145, 146, 153, 159, 160, 163], "ar": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 54, 56, 57, 59, 61, 62, 64, 66, 67, 70, 72, 73, 74, 75, 76, 78, 81, 83, 84, 86, 89, 91, 94, 96, 97, 98, 103, 105, 106, 109, 110, 112, 113, 114, 118, 120, 128, 130, 133, 140, 142, 143, 152, 156, 164, 179, 180, 181, 183, 184, 197, 202, 203, 204, 205, 206, 207, 210, 211, 212], "6": [10, 26, 41, 57, 58, 61, 64, 81, 85, 90, 91, 97, 103, 116, 125, 170, 184, 185, 194, 206], "It": [10, 19, 22, 26, 28, 31, 35, 37, 39, 41, 42, 44, 46, 55, 57, 58, 59, 61, 62, 63, 66, 67, 68, 71, 73, 74, 76, 81, 91, 109, 112, 114, 116, 117, 123, 134, 140, 182, 184, 205, 210], "recommend": [10, 64, 75, 108, 109, 110, 112, 113], "have": [10, 26, 37, 41, 56, 59, 62, 67, 68, 72, 81, 89, 91, 95, 96, 97, 103, 105, 106, 110, 117, 125, 144, 159, 183, 184, 206, 207, 210], "basic": [10, 81, 105, 182, 184, 205], "knowledg": [10, 62, 81, 135], "framework": [10, 16, 112, 113], "work": [10, 62, 66, 83, 113, 121, 205, 207, 211], "befor": [10, 55, 72, 86, 88, 113, 116, 124, 128, 146, 163, 184, 202], "pleas": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 57, 58, 59, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 83, 84, 85, 86, 89, 90, 95, 96, 98, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 128, 132, 141, 142, 203, 204, 208, 211], "document": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 140, 141, 143, 144, 164, 167, 193, 194, 196, 202, 206, 207, 209, 210, 211], "first": [10, 12, 61, 63, 64, 71, 73, 74, 81, 89, 95, 96, 97, 105, 113, 114, 119, 124, 133, 144, 183, 184, 202, 206, 207, 211], "let": [10, 62, 123, 206], "": [10, 11, 18, 21, 27, 30, 34, 38, 43, 55, 56, 59, 61, 62, 63, 66, 67, 68, 71, 73, 74, 76, 81, 89, 96, 98, 109, 110, 112, 113, 114, 116, 117, 123, 124, 126, 128, 129, 134, 140, 145, 146, 153, 156, 159, 163, 164, 184, 202, 205, 206, 207, 210], "make": [10, 55, 59, 66, 73, 74, 81, 106, 109, 116, 208, 212], "sure": [10, 109], "version": [10, 55, 62, 99, 100, 120, 147, 151, 157, 162, 163, 167, 170, 206], "oracl": 10, "openjdk": 10, "0_292": 10, "creat": [10, 12, 13, 14, 26, 37, 41, 57, 58, 63, 67, 71, 72, 78, 96, 100, 103, 121, 128, 140, 142, 156, 170, 182, 183, 185, 193, 194, 196, 197, 206, 207, 210, 212], "new": [10, 12, 13, 14, 41, 49, 56, 57, 58, 61, 64, 66, 72, 75, 97, 99, 100, 110, 113, 114, 120, 130, 134, 147, 151, 162, 163, 184, 205, 206], "manag": [10, 81, 203], "depend": [10, 12, 49, 59, 69, 75, 76, 78, 79, 81, 83, 96, 112, 114, 157, 183, 184], "Then": [10, 26, 37, 95, 96, 144, 164, 206], "we": [10, 16, 26, 37, 51, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 75, 81, 95, 96, 98, 106, 110, 112, 113, 114, 116, 126, 140, 156, 182, 184, 202, 205, 206, 207, 210, 211, 212], "sparknlp": [10, 202, 205, 206, 207, 208, 210, 211, 212], "n": [10, 74, 81, 91, 94, 95, 96, 105, 106, 110, 113, 123, 140, 143, 156, 167, 184], "y": [10, 37, 184], "activ": [10, 19, 22, 24, 31, 35, 39, 44, 46, 81, 178, 184], "jupyt": [10, 164, 202], "now": [10, 59, 106, 140, 207], "should": [10, 12, 13, 14, 17, 26, 37, 41, 63, 71, 73, 81, 83, 90, 91, 95, 96, 100, 105, 106, 112, 114, 124, 140, 146, 147, 159, 163, 167, 182, 184, 193, 194], "readi": [10, 26, 167, 206], "notebook": [10, 164, 202], "run": [10, 62, 81, 164, 178, 182, 183, 184, 203, 211], "also": [10, 26, 37, 41, 51, 55, 56, 64, 66, 72, 73, 74, 76, 78, 81, 86, 89, 94, 95, 96, 99, 100, 106, 109, 119, 140, 143, 147, 151, 162, 184, 202, 206, 207, 208, 209], "python3": 10, "sourc": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 170, 178, 179, 180, 181, 182, 183, 184, 185, 193, 194, 196, 197, 203], "bin": 10, "A": [10, 16, 41, 49, 56, 67, 68, 72, 76, 81, 84, 85, 89, 90, 91, 98, 108, 110, 112, 113, 116, 117, 124, 126, 164, 179, 182, 183, 184, 196, 204, 206, 212], "retriev": [10, 72, 84, 116, 117, 118, 164, 167, 202, 206, 207], "If": [10, 19, 22, 24, 26, 28, 31, 35, 37, 39, 41, 44, 46, 69, 72, 76, 83, 86, 88, 94, 95, 96, 98, 100, 105, 106, 110, 113, 114, 120, 157, 163, 164, 170, 182, 183, 184, 185, 202, 204, 206], "manual": [10, 205], "sparksess": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 85, 110, 112, 113, 157, 193, 194, 196, 197], "becaus": [10, 108, 146, 163, 183], "other": [10, 37, 59, 69, 70, 78, 81, 98, 108, 110, 113, 121, 123, 130, 133, 134, 141, 206], "configur": [10, 69, 126, 157, 170, 185], "includ": [10, 55, 57, 58, 63, 64, 71, 73, 74, 75, 78, 81, 86, 94, 95, 96, 110, 113, 114, 134, 164, 181, 197, 203, 205, 206, 207, 212], "them": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 51, 56, 57, 59, 61, 62, 66, 67, 73, 75, 76, 78, 81, 86, 89, 106, 114, 119, 128, 142, 144, 206, 207], "builder": [10, 120, 157], "appnam": [10, 157], "master": [10, 157], "local": [10, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 81, 110, 112, 113, 119, 140, 157, 167, 210], "config": [10, 157, 203], "driver": [10, 157], "memori": [10, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 56, 64, 72, 157, 182, 183, 184], "16g": [10, 157], "maxresults": [10, 157], "kryoseri": [10, 157], "buffer": [10, 58, 72, 157], "max": [10, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 66, 67, 68, 73, 74, 75, 81, 117, 157], "2000m": [10, 157], "getorcr": [10, 157], "main": [11, 76, 126, 205, 209, 212], "github": [11, 61, 67, 112, 167], "issu": 11, "workshop": [11, 17, 26, 37, 41, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 67, 69, 70, 72, 73, 75, 81, 83, 84, 86, 88, 89, 90, 91, 95, 96, 98, 103, 105, 106, 108, 109, 112, 113, 114, 116, 118, 119, 123, 126, 128, 130, 131, 132, 133, 134, 141, 144, 164, 184, 202, 209], "model": [11, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 89, 90, 95, 96, 98, 100, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 121, 123, 126, 128, 146, 157, 163, 164, 167, 170, 183, 184, 185, 202, 203, 205, 209, 211, 212], "hub": [11, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 83, 84, 95, 96, 103, 106, 110, 112, 113, 114, 116, 117, 119, 128], "welcom": [11, 16], "contain": [11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 182, 183, 184, 193, 194, 196, 197, 200, 202, 205, 206], "inform": [11, 52, 54, 72, 73, 81, 86, 94, 114, 132, 141, 183, 184, 197, 202, 203, 204, 205, 206, 212], "us": [11, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 100, 103, 105, 106, 109, 110, 112, 113, 114, 116, 117, 119, 120, 124, 125, 126, 128, 130, 131, 132, 133, 134, 140, 141, 142, 143, 144, 156, 157, 164, 167, 178, 179, 180, 182, 183, 184, 193, 194, 196, 197, 203, 204, 205, 206, 207, 209], "librari": [11, 51, 83, 131, 132, 133, 141, 144, 211], "exampl": [11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 156, 164, 167, 170, 179, 184, 185, 193, 194, 196, 197, 202, 205, 206, 207, 209, 210, 211, 212], "get": [11, 26, 37, 81, 93, 103, 114, 120, 126, 128, 129, 132, 138, 140, 141, 147, 151, 162, 202, 206, 211, 212], "start": [11, 18, 21, 27, 30, 34, 38, 43, 66, 78, 81, 95, 96, 106, 131, 157, 164, 178, 182, 202, 205, 207, 210, 211], "cheat": 11, "sheet": [11, 55], "requir": [11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 54, 56, 58, 61, 64, 70, 73, 74, 81, 96, 98, 109, 114, 125, 128, 131, 133, 144, 182, 183, 184, 205, 206, 207], "instal": [11, 164, 204], "session": [11, 157, 193, 194, 196, 197], "from": [11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 99, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 146, 156, 157, 160, 163, 164, 167, 170, 178, 180, 182, 183, 184, 185, 193, 194, 196, 197, 202, 205, 206, 207, 210, 211, 212], "user": [11, 94, 95, 126, 142, 157, 164, 202], "guid": [11, 203], "own": [11, 26, 37, 41, 52, 63, 71, 84, 85, 89, 90, 95, 96, 98, 103, 108, 109, 114, 116, 121, 123, 128, 184, 209, 210, 212], "pipelin": [11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 138, 140, 141, 142, 143, 144, 157, 163, 164, 166, 167, 169, 203, 205, 206, 209], "pretrain": [11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 83, 84, 85, 86, 89, 90, 95, 96, 97, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 130, 133, 134, 140, 156, 157, 164, 202, 205, 209], "dataset": [11, 26, 37, 41, 52, 54, 59, 63, 66, 67, 68, 71, 72, 81, 83, 95, 96, 100, 106, 110, 114, 128, 163, 167, 193, 194, 196, 197, 209], "train": [11, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 70, 71, 73, 74, 75, 81, 83, 84, 85, 89, 90, 93, 95, 96, 98, 99, 100, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 121, 123, 128, 131, 140, 157, 164, 167, 202, 206, 207, 209, 210], "light": [11, 62, 75, 81, 140, 209, 211], "helper": [11, 103, 128, 135, 156, 182, 183, 196, 197, 209, 212], "third": [11, 105, 119, 165], "parti": [11, 165], "project": [11, 81, 112, 164, 178, 184, 203], "log": [11, 26, 37, 41, 96, 100, 106, 110, 157], "api": [11, 202, 206, 209], "format": [12, 13, 14, 51, 52, 54, 76, 78, 84, 85, 86, 88, 89, 90, 95, 96, 98, 100, 108, 113, 116, 117, 126, 129, 132, 134, 135, 138, 141, 143, 183, 193, 194, 196, 197, 203, 212], "annotatortyp": [12, 13, 14, 60, 91, 131, 132, 138, 141, 205], "begin": [12, 49, 94, 110, 123, 126, 131, 132, 141, 156, 182, 183, 184, 205], "end": [12, 18, 21, 27, 30, 34, 38, 43, 49, 96, 106, 123, 126, 132, 141, 156, 164, 183, 193, 202, 205, 207], "result": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 156, 157, 164, 167, 184, 193, 194, 202, 203, 205, 206, 207, 210, 211], "metadata": [12, 13, 14, 42, 49, 81, 90, 95, 96, 103, 132, 134, 138, 140, 141, 156, 164, 205, 207], "embed": [12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 78, 79, 95, 96, 97, 132, 133, 134, 140, 141, 151, 156, 157, 163, 167, 170, 178, 185, 205], "repres": [12, 13, 14, 52, 54, 56, 61, 75, 76, 78, 85, 90, 91, 126, 164, 167, 179, 184, 206], "output": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 147, 156, 157, 164, 178, 182, 183, 184, 196, 202, 205, 206, 207], "detail": [12, 13, 14, 73, 74, 81, 110, 113, 184], "paramet": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 147, 151, 155, 156, 157, 162, 163, 164, 167, 170, 183, 185, 193, 194, 196, 197], "annotator_typ": [12, 13, 14], "str": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 147, 155, 156, 157, 162, 164, 167, 170, 185, 193, 194, 196, 197], "The": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 124, 126, 128, 132, 134, 140, 141, 143, 156, 157, 164, 167, 170, 180, 181, 182, 183, 184, 185, 193, 194, 196, 197, 202, 205, 206, 207, 209, 210, 212], "possibl": [12, 13, 14, 60, 62, 73, 74, 76, 105, 114, 117, 132, 141, 152, 164, 202], "token": [12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 84, 85, 90, 91, 93, 94, 95, 96, 97, 98, 100, 103, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 128, 130, 131, 133, 140, 142, 144, 157, 167, 170, 185, 193, 197, 206, 210, 211], "wordpiec": 12, "word_embed": [12, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 73, 75, 79, 95, 96, 100], "sentence_embed": [12, 26, 37, 41, 58, 63, 65, 68, 70, 74, 79, 164, 202, 206], "categori": [12, 19, 22, 24, 26, 28, 31, 35, 37, 39, 41, 44, 46, 51, 164, 202, 206], "date": [12, 86, 88, 89], "entiti": [12, 20, 23, 25, 29, 32, 36, 40, 45, 47, 49, 59, 76, 77, 78, 85, 90, 92, 93, 94, 95, 96, 97, 121, 125, 130, 134, 140, 167], "sentiment": [12, 26, 37, 41, 64, 75, 79, 113, 157, 206, 207], "po": [12, 17, 19, 22, 24, 28, 31, 35, 39, 44, 46, 52, 54, 78, 79, 95, 96, 123, 128, 140, 156, 157, 167, 193, 195, 205, 209, 210, 211], "chunk": [12, 17, 18, 21, 27, 30, 34, 38, 43, 60, 63, 71, 76, 81, 85, 89, 90, 91, 94, 121, 125, 130, 131, 134, 156, 164, 197, 202, 212], "named_ent": [12, 20, 23, 25, 29, 32, 36, 40, 45, 47, 78, 94, 95, 96, 97, 100, 140, 167], "negex": 12, "labeled_depend": [12, 54], "languag": [12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 131, 141, 144, 206], "keyword": [12, 80, 81, 108, 184], "dummi": [12, 55], "int": [12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 78, 81, 83, 86, 91, 93, 95, 96, 98, 99, 100, 103, 105, 106, 109, 110, 112, 113, 114, 117, 120, 124, 126, 128, 151, 157, 164, 184, 193], "charact": [12, 55, 64, 66, 76, 83, 89, 91, 98, 105, 106, 114, 116, 117, 124, 126, 128, 134], "under": [12, 62, 75, 81, 157], "dict": [12, 13, 14, 52, 54, 76, 84, 85, 89, 90, 95, 97, 98, 100, 108, 114, 116, 117, 126, 140, 155, 163, 164, 167, 170, 185], "associ": [12, 13, 14, 37, 70, 76, 89, 94, 164], "vector": [12, 37, 57, 58, 60, 61, 63, 64, 70, 71, 72, 133, 134, 141, 182, 183, 184, 205], "where": [12, 37, 61, 64, 76, 81, 84, 85, 89, 90, 91, 103, 106, 108, 110, 113, 116, 117, 128, 131, 170, 183, 184, 185, 196], "applic": [12, 51, 81, 164, 165, 202, 204], "copi": [12, 13, 14], "differ": [12, 13, 14, 52, 54, 64, 67, 68, 73, 75, 81, 86, 105, 106, 114, 126, 140, 164, 170, 180, 184, 185, 210], "return": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 83, 84, 85, 90, 91, 93, 95, 96, 103, 105, 106, 109, 110, 112, 113, 114, 116, 117, 118, 119, 123, 126, 128, 131, 140, 155, 156, 157, 158, 163, 167, 170, 182, 183, 184, 185, 193, 194, 196, 197], "newli": [12, 13, 14], "static": [12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 170, 184, 185, 206], "datatyp": [12, 156], "structtyp": 12, "schema": [12, 94, 164, 202], "look": [12, 96, 116, 205], "like": [12, 18, 21, 26, 27, 30, 34, 38, 43, 49, 55, 56, 60, 62, 66, 69, 75, 78, 81, 89, 94, 106, 109, 110, 114, 126, 128, 164, 202, 204, 205], "struct": [12, 132, 138, 141], "containsnul": [12, 37, 129, 132, 138, 141], "true": [12, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 51, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 83, 85, 86, 88, 90, 94, 96, 98, 105, 106, 114, 116, 124, 126, 128, 129, 131, 132, 133, 134, 135, 138, 141, 143, 164, 170, 179, 183, 184, 185, 193, 194, 197, 202, 206, 207], "nullabl": [12, 37, 129, 132, 138, 141], "fals": [12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 140, 141, 143, 144, 156, 157, 164, 167, 179, 182, 183, 184, 193, 194, 196, 202, 205, 206, 207, 212], "integ": [12, 132, 138, 141], "map": [12, 17, 37, 72, 76, 99, 100, 103, 114, 132, 138, 141, 147, 151, 156, 162, 163, 184, 205], "kei": [12, 52, 54, 67, 68, 73, 74, 84, 132, 138, 140, 141, 164, 167, 202], "valuecontainsnul": [12, 132, 138, 141], "arrai": [12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 83, 84, 91, 96, 99, 103, 105, 106, 110, 112, 113, 114, 121, 123, 128, 129, 131, 132, 133, 134, 135, 138, 140, 141, 156, 207, 210], "element": [12, 37, 91, 129, 132, 138, 141, 182, 183], "float": [12, 13, 16, 26, 37, 41, 83, 95, 96, 99, 100, 106, 110, 113, 114, 128, 129, 132, 133, 140, 141], "sql": [12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 85, 110, 112, 113, 140, 156, 163, 167, 193, 194, 196, 197], "arraytyp": [12, 131, 156], "fromrow": 12, "row": [12, 42, 72, 105, 106, 109, 132, 141, 143, 156, 193], "column": [12, 26, 37, 41, 55, 72, 84, 93, 95, 96, 99, 100, 103, 109, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 144, 147, 156, 167, 184, 193, 196, 206], "torow": 12, "transform": [12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 144, 156, 159, 163, 164, 167, 202, 205, 206, 207, 210, 211, 212], "annotationaudio": 13, "audio": [13, 129, 164], "alreadi": [13, 78, 81, 95, 96, 97, 125, 126, 140, 167, 184, 210], "process": [13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 71, 73, 74, 75, 78, 81, 83, 94, 95, 96, 100, 106, 110, 113, 129, 130, 131, 132, 133, 134, 138, 141, 142, 144, 164, 184, 202, 205, 206, 207, 208], "file": [13, 16, 26, 37, 41, 52, 54, 55, 70, 72, 76, 84, 85, 89, 90, 95, 96, 98, 100, 106, 108, 114, 116, 117, 120, 126, 129, 143, 152, 157, 164, 170, 181, 185, 193, 194, 196, 197, 202, 212], "byte": [13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 83, 96, 99, 110, 112, 113, 114, 164], "annotationimag": [14, 140, 167], "origin": [14, 56, 63, 66, 67, 71, 94, 106, 138, 181, 184], "height": [14, 138], "nchannel": [14, 138], "mode": [14, 26, 37, 41, 96, 100, 116, 132, 138, 141, 164], "imag": [14, 51, 138, 140, 167], "uri": 14, "pixel": 14, "number": [14, 26, 37, 41, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 91, 93, 95, 96, 99, 103, 105, 106, 110, 113, 114, 120, 128, 182, 183, 184, 193, 194], "color": 14, "channel": [14, 114], "opencv": 14, "wav2vec2_for_ctc": 15, "concern": [16, 19, 51, 56], "wav2vec2forctc": 16, "classnam": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 89, 90, 95, 96, 98, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 126, 128, 143, 145, 146, 153, 159], "java_model": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 89, 90, 95, 96, 98, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 123, 126, 128, 137, 143, 146, 163], "wav2vec2": 16, "head": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 49, 56, 75, 94, 95, 96, 140, 156, 167], "connectionist": 16, "tempor": [16, 183], "classif": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 51, 56, 70, 109, 113, 206], "ctc": 16, "wa": [16, 19, 20, 22, 23, 26, 28, 29, 31, 32, 35, 36, 39, 40, 41, 44, 45, 46, 47, 55, 59, 61, 62, 66, 67, 68, 72, 73, 74, 81, 109, 110, 114, 167, 184, 206, 207], "propos": [16, 56, 59, 61, 62, 67, 68, 73, 74, 75], "wav2vec": 16, "self": [16, 56, 66, 112, 182, 184], "supervis": [16, 56, 64, 70, 81, 110], "learn": [16, 26, 37, 41, 56, 62, 63, 64, 67, 68, 70, 71, 73, 74, 75, 81, 95, 96, 99, 106, 110, 113, 114, 164, 184, 204], "speech": [16, 17, 59, 102, 103, 128, 196, 212], "represent": [16, 56, 57, 58, 62, 63, 64, 71, 72, 73, 74, 75, 94, 113, 141, 143, 155], "alexei": 16, "baevski": 16, "henri": 16, "zhou": 16, "abdelrahman": 16, "moham": 16, "michael": [16, 121], "auli": 16, "take": [16, 42, 59, 78, 90, 99, 100, 116, 119, 126, 142, 147, 151, 162, 183, 193, 205, 206, 210, 211], "transcrib": 16, "text": [16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 141, 143, 144, 152, 155, 156, 164, 193, 194, 196, 197, 202, 205, 206, 207, 211, 212], "provid": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 83, 84, 85, 86, 88, 89, 90, 95, 96, 98, 99, 100, 103, 106, 108, 110, 112, 113, 114, 116, 117, 128, 140, 147, 151, 156, 158, 162, 167, 182, 183, 184, 207], "pre": [16, 26, 37, 41, 51, 57, 58, 61, 62, 64, 70, 96, 100, 113, 130, 131, 132, 134, 141, 144, 194, 206], "note": [16, 26, 37, 41, 56, 62, 64, 67, 69, 72, 73, 75, 81, 96, 110, 112, 113, 140, 157, 178, 211], "current": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 81, 85, 86, 88, 106, 110, 112, 113, 120, 140, 143, 147, 157, 184, 205, 206, 207], "support": [16, 26, 37, 56, 66, 81, 96, 98, 106, 119, 143, 157, 203], "appl": [16, 58, 68, 74], "silicon": 16, "processor": 16, "m1": [16, 157], "due": [16, 19, 22, 24, 28, 31, 35, 39, 44, 46, 56, 66], "instruct": 16, "xla": [16, 184], "companion": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 95, 96, 103, 106, 110, 112, 113, 114, 116, 117, 119, 128, 160], "speechtotext": 16, "setinputcol": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 143, 144, 147, 164, 170, 185, 202, 206, 207], "audio_assembl": [16, 139, 157], "setoutputcol": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 143, 144, 147, 164, 170, 185, 202, 206, 207], "default": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 123, 124, 126, 128, 131, 132, 133, 134, 135, 140, 141, 143, 155, 156, 157, 164, 167, 182, 183, 184, 193, 194, 196, 197, 206], "asr_wav2vec2_base_960h": 16, "avail": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 79, 81, 83, 84, 86, 89, 95, 96, 103, 106, 110, 112, 113, 114, 116, 117, 119, 128, 159, 167, 170, 181, 185, 202, 209], "see": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 126, 128, 130, 131, 132, 133, 134, 135, 141, 144, 164, 167, 184, 197, 202, 203, 204, 209, 211, 212], "To": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 56, 57, 59, 61, 62, 66, 67, 73, 75, 76, 81, 86, 89, 103, 105, 110, 113, 128, 135, 140, 142, 164, 184, 202, 210], "which": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 75, 78, 81, 86, 88, 89, 96, 98, 105, 106, 108, 110, 112, 113, 116, 124, 128, 133, 140, 156, 179, 183, 184, 193, 194, 206, 207], "compat": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 51, 56, 57, 59, 61, 62, 66, 67, 73, 75, 96, 133, 179, 182], "5669": [16, 51, 59], "more": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 55, 59, 62, 64, 69, 73, 74, 78, 81, 91, 94, 106, 110, 113, 116, 124, 126, 130, 131, 132, 133, 134, 141, 144, 164, 167, 178, 179, 182, 183, 197, 202, 203, 204, 206, 209, 212], "wav2vec2forctctestspec": 16, "input": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 147, 156, 163, 167, 178, 179, 180, 182, 183, 184, 193, 194, 196, 197, 206, 207, 210, 212], "batchsiz": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 73, 74, 75, 96, 112, 114], "size": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 78, 81, 96, 99, 110, 112, 113, 114, 116, 182, 183, 184, 205, 210, 211], "each": [16, 26, 37, 41, 61, 63, 69, 71, 72, 76, 78, 81, 84, 85, 86, 89, 90, 91, 93, 95, 96, 98, 100, 103, 105, 106, 108, 114, 116, 117, 124, 126, 132, 141, 156, 163, 182, 183, 184, 196, 207], "batch": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 73, 74, 75, 96, 99, 112, 114, 178, 183, 184], "ml": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 138, 140, 141, 142, 143, 144, 164, 202, 206, 210], "audioassembl": [16, 129], "audio_cont": [16, 129], "setstag": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 131, 133, 143, 144, 206, 207], "processedaudiofloat": 16, "createdatafram": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 141, 143, 144, 156, 164, 202, 205, 206, 207, 211], "rawfloat": 16, "todf": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 138, 141, 143, 144, 156, 205, 206, 207, 211], "fit": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 131, 133, 140, 142, 143, 144, 163, 164, 183, 202, 206, 207, 210], "select": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 60, 62, 72, 78, 81, 83, 95, 96, 109, 110, 113, 114, 116, 117, 123, 128, 129, 132, 134, 135, 138, 141, 143, 144, 156, 164, 202, 207], "mister": 16, "quilter": 16, "THE": [16, 55], "apostl": 16, "OF": [16, 56], "midl": 16, "clase": 16, "AND": 16, "glad": 16, "TO": [16, 193, 212], "hi": [16, 106], "gospel": 16, "setconfigprotobyt": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 83, 96, 99, 110, 112, 113, 114], "b": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 83, 85, 90, 94, 95, 96, 97, 99, 105, 110, 112, 113, 114, 140, 156, 167, 184, 193, 197, 212], "configproto": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 83, 96, 99, 110, 112, 113, 114], "tensorflow": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 81, 83, 96, 99, 110, 112, 113, 114, 170, 181, 183, 185], "serial": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 76, 83, 96, 99, 110, 112, 113, 114, 157], "loadsavedmodel": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 110, 112, 113], "folder": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 96, 100, 106, 110, 112, 113, 117, 120, 193], "spark_sess": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 110, 112, 113], "save": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 96, 100, 106, 110, 112, 113, 157, 164, 170, 185, 202, 206], "restor": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128], "lang": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 167], "en": [16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 75, 78, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 167, 194, 212], "remote_loc": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 167], "download": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 83, 84, 85, 90, 95, 96, 97, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 157, 167, 205, 206, 209, 210], "option": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 81, 83, 84, 85, 89, 90, 95, 96, 98, 100, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 129, 132, 136, 137, 140, 141, 155, 156, 157, 163, 164, 167, 183, 184, 193, 194, 196, 197, 206], "remot": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 167], "address": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128], "resourc": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 83, 84, 85, 89, 90, 95, 96, 98, 100, 103, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 126, 128, 142, 152, 155, 166, 193, 194, 196, 197, 206, 212], "Will": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 105, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128], "repositori": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 167, 203], "otherwis": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 84, 85, 90, 95, 96, 103, 106, 109, 110, 112, 113, 114, 116, 117, 119, 126, 128, 131, 164, 184], "match": [17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 71, 73, 74, 75, 76, 85, 86, 87, 88, 89, 90, 98, 103, 105, 110, 126, 128, 131, 182, 183, 205], "pattern": [17, 55, 76, 86, 89, 98, 116, 117, 124, 126, 128, 184], "tag": [17, 26, 37, 41, 55, 59, 93, 94, 95, 96, 97, 102, 103, 128, 156, 164, 193, 196, 197, 212], "order": [17, 75, 76, 81, 116, 117, 140, 144, 156, 182, 184, 206, 207, 210, 212], "meaning": [17, 118], "phrase": [17, 59, 63, 71, 85, 90], "extract": [17, 18, 21, 27, 30, 34, 38, 43, 52, 60, 72, 76, 77, 78, 80, 81, 85, 86, 88, 90, 94, 95, 96, 97, 105, 106, 108, 114, 117, 121, 125, 130, 133, 134, 135, 140, 157, 164, 167, 202], "onto": [17, 156, 207], "sentenc": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 103, 109, 112, 114, 119, 121, 124, 125, 128, 130, 132, 134, 140, 141, 143, 144, 157, 167, 170, 185, 193, 194, 196, 197, 206, 210, 211], "regular": [17, 89, 95, 105, 184], "express": [17, 41, 49, 86, 89, 105], "wrap": [17, 145, 146, 153, 159, 163, 184], "angl": 17, "bracket": 17, "easili": [17, 64, 103, 133, 202], "distinguish": 17, "itself": [17, 81, 113, 142, 207], "form": [17, 26, 37, 41, 72, 76, 84, 85, 86, 89, 90, 106, 108, 116, 117, 128, 133, 164, 183, 193, 194, 206], "peter": [17, 66, 84, 98, 103, 106, 116, 118, 193], "piper": [17, 84, 103, 118], "employe": [17, 84, 103, 118], "pick": [17, 84, 103, 118], "peck": [17, 84, 103, 118], "pickl": [17, 84, 103, 118], "pepper": [17, 84, 103, 118], "nnp": [17, 103, 140, 156, 193, 194, 196, 197, 205, 210, 211, 212], "nn": [17, 103, 179, 193, 194, 196, 197, 212], "vbp": [17, 103, 140, 194, 205, 210, 211], "vbg": [17, 103], "IN": [17, 103, 140, 156, 194, 196, 197, 205, 210, 211], "jj": [17, 103, 140, 156, 193, 196, 205, 210, 211, 212], "regexpars": 17, "e": [17, 19, 20, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 39, 40, 44, 45, 46, 47, 54, 55, 64, 66, 76, 78, 95, 96, 110, 112, 113, 114, 119, 143, 164, 184, 202], "g": [17, 19, 20, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 39, 40, 44, 45, 46, 47, 54, 55, 64, 78, 95, 96, 110, 112, 113, 114, 119, 143, 164, 184, 202], "setregexpars": 17, "when": [17, 19, 22, 28, 31, 35, 39, 44, 46, 51, 55, 56, 78, 86, 88, 91, 96, 110, 114, 116, 119, 123, 128, 130, 140, 184, 193, 206, 207, 210], "defin": [17, 94, 95, 96, 119, 123, 130, 134, 156, 164, 167, 182, 202, 206, 210], "enclos": 17, "treat": 17, "group": [17, 126, 184], "so": [17, 26, 41, 81, 94, 106, 142, 164, 183, 184, 202], "here": [17, 84, 156, 184, 206], "specif": [17, 42, 52, 54, 55, 57, 58, 62, 70, 78, 81, 96, 110, 120, 140, 142, 164, 170, 185, 210], "mean": [17, 37, 73, 81, 83, 86, 88, 110, 112, 113, 124, 133, 140, 184, 206, 207, 210], "noun": [17, 194], "success": [17, 59, 110], "grammar": 17, "parser": [17, 52, 54, 78], "perceptronmodel": [17, 52, 54, 78, 95, 103, 193], "Of": [17, 56, 128], "documentassembl": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 131, 132, 133, 141, 142, 143, 144, 164, 193, 202, 206], "sentencedetector": [17, 26, 42, 49, 52, 54, 58, 60, 68, 70, 74, 78, 81, 84, 89, 91, 95, 96, 97, 103, 105, 106, 119, 121, 142, 144, 193, 206, 207], "postag": 17, "selectexpr": [17, 26, 42, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 84, 85, 86, 88, 89, 90, 91, 94, 97, 98, 103, 105, 106, 108, 112, 118, 119, 121, 124, 125, 126, 130, 131, 133, 134, 156, 193, 194, 196, 205, 206, 211], "explod": [17, 26, 42, 49, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 85, 88, 89, 90, 91, 94, 97, 103, 105, 106, 112, 125, 130, 133, 134, 156, 193, 196, 205, 206, 211], "11": [17, 73, 74, 86, 88, 91, 103], "13": [17, 49, 73, 74, 78, 103, 130, 134], "21": [17, 86, 88, 97, 103], "35": [17, 103], "39": [17, 97, 103, 196], "52": [17, 97, 103, 196], "58": [17, 103], "albertforquestionansw": 18, "classifi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 81, 133, 206], "dl": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 83, 96, 116, 117], "albert": [18, 19, 20, 56], "span": [18, 21, 27, 30, 34, 38, 43, 113], "question": [18, 21, 27, 30, 34, 38, 42, 43, 52, 54, 57, 58, 64, 67, 68, 75, 103, 110, 113, 140], "answer": [18, 21, 27, 30, 34, 38, 42, 43, 52, 54, 57, 58, 64, 75, 110, 113, 140], "task": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 56, 57, 58, 59, 61, 62, 66, 70, 73, 74, 75, 81, 110, 112, 113, 142, 184], "squad": [18, 21, 27, 30, 34, 38, 43, 56, 57, 58, 61, 67, 68], "linear": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 110, 184], "layer": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 56, 57, 58, 61, 64, 75, 183, 184], "hidden": [18, 20, 21, 23, 25, 27, 29, 30, 32, 34, 36, 38, 40, 43, 45, 47, 56, 64, 75, 120, 184], "state": [18, 20, 21, 23, 25, 26, 27, 29, 30, 32, 34, 36, 37, 38, 40, 41, 43, 45, 47, 51, 56, 57, 58, 59, 64, 66, 67, 68, 75, 81, 96, 110, 113, 141, 178, 182, 183, 184, 203, 206], "comput": [18, 21, 27, 30, 34, 38, 43, 51, 56, 61, 62, 70, 110, 112, 117, 140, 180, 183, 184, 210], "logit": [18, 19, 21, 22, 24, 27, 30, 31, 34, 35, 38, 39, 43, 44, 46], "spanclassifi": [18, 21, 27, 30, 34, 38, 43], "document_quest": [18, 21, 27, 30, 34, 38, 42, 43], "document_context": [18, 21, 27, 30, 34, 38, 43], "albert_base_qa_squad2": 18, "larg": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 56, 61, 62, 64, 73, 74, 75, 81, 83, 85, 90, 96, 110, 184], "allow": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 64, 70, 95, 96, 98, 105, 106, 124, 126, 142, 170, 183, 184, 185], "faster": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 62, 64, 116, 117, 182], "casesensit": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 73, 74, 75, 85, 90, 116, 119], "whether": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 76, 78, 85, 86, 88, 90, 91, 94, 95, 96, 98, 100, 105, 106, 110, 113, 114, 116, 119, 124, 126, 128, 131, 133, 134, 135, 140, 143, 144, 147, 157, 167, 184, 193, 197, 207], "ignor": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 73, 74, 75, 85, 91, 94, 110, 112, 113, 116, 119, 140], "case": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 73, 74, 75, 76, 83, 85, 90, 114, 116, 119, 126, 131, 178, 182, 184, 193, 194, 206], "configprotobyt": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 83, 96, 110, 112, 113, 114], "maxsentencelength": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 71, 73, 74, 75], "128": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 56, 57, 58, 59, 61, 62, 67, 68, 73, 74, 75, 164, 184, 202], "multidocumentassembl": [18, 21, 27, 30, 34, 38, 42, 43, 141], "context": [18, 21, 27, 30, 34, 38, 43, 57, 58, 63, 64, 71, 75, 109, 114, 126], "setcasesensit": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 60, 62, 66, 67, 73, 85, 90, 95, 116, 119, 133, 144], "what": [18, 21, 27, 30, 34, 38, 41, 43, 52, 54, 81, 83, 112, 114, 123, 194, 203], "my": [18, 20, 21, 23, 26, 27, 29, 30, 32, 34, 36, 38, 40, 41, 43, 45, 47, 55, 89, 91, 105, 110, 119, 121, 124, 206], "clara": [18, 21, 27, 30, 34, 38, 43], "live": [18, 20, 21, 23, 27, 29, 30, 32, 34, 36, 38, 40, 43, 45, 47, 110, 164, 202], "berkelei": [18, 21, 27, 30, 34, 38, 43], "setmaxsentencelength": [18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 49, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 71, 73, 74, 75], "albertforsequenceclassif": [19, 28], "sequenc": [19, 22, 24, 28, 31, 35, 39, 44, 46, 51, 66, 110, 111, 112, 113, 114, 119, 178, 179, 182, 183], "regress": [19, 22, 24, 28, 31, 35, 39, 44, 46, 113], "pool": [19, 22, 24, 28, 31, 35, 39, 44, 46, 60, 64, 69], "multi": [19, 22, 24, 26, 28, 31, 35, 37, 39, 41, 44, 46, 56, 70, 73, 74, 81, 83, 112], "sequenceclassifi": [19, 22, 24, 28, 31, 35, 39, 44, 46], "label": [19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 51, 52, 54, 76, 83, 93, 94, 95, 96, 99, 100, 108, 109, 113, 114, 120, 164, 170, 185, 193, 202, 206], "albert_base_sequence_classifier_imdb": 19, "coalescesent": [19, 22, 24, 28, 31, 35, 39, 44, 46, 83], "instead": [19, 22, 24, 28, 31, 35, 39, 44, 46, 58, 81, 83, 86, 88, 113, 133, 134, 140, 178, 180, 210], "per": [19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 73, 74, 83, 86, 91, 93, 94, 95, 96, 140, 156, 167, 183, 184, 193], "inputcol": [19, 22, 24, 26, 28, 31, 35, 37, 39, 41, 44, 46, 69, 83, 129, 132, 133, 134, 135, 138, 141], "averag": [19, 22, 24, 28, 31, 35, 39, 42, 44, 46, 60, 69, 73, 74, 83, 96, 103], "probabl": [19, 22, 24, 28, 31, 35, 39, 44, 46, 81, 110, 113, 116], "calcul": [19, 22, 24, 26, 31, 35, 37, 39, 41, 44, 46, 72, 91, 96, 100, 108, 183, 184], "via": [19, 22, 24, 31, 35, 39, 44, 46, 70, 138, 157, 184], "softmax": [19, 22, 24, 31, 35, 39, 44, 46, 61, 63, 71, 114, 178], "sigmoid": [19, 22, 24, 31, 35, 39, 44, 46, 180], "love": [19, 22, 26, 28, 31, 35, 39, 44, 46, 58, 68, 74, 106, 109, 206], "movi": [19, 22, 26, 28, 31, 35, 39, 41, 44, 46, 109, 206], "child": [19, 22, 28, 31, 35, 39, 44, 46], "pretti": [19, 22, 28, 31, 35, 37, 39, 44, 46, 81], "bore": [19, 22, 28, 31, 35, 39, 44, 46], "neg": [19, 22, 24, 28, 31, 35, 39, 41, 44, 46, 108, 109, 164, 202], "getclass": [19, 20, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 39, 40, 44, 45, 46, 47, 51], "setcoalescesent": [19, 22, 24, 28, 31, 35, 39, 44, 46, 83], "limit": [19, 22, 24, 28, 31, 35, 39, 44, 46, 51, 56, 59, 66, 72, 75, 81, 113, 116], "almost": [19, 22, 24, 28, 31, 35, 39, 44, 46], "bert": [19, 21, 22, 23, 24, 28, 31, 32, 35, 39, 42, 44, 46, 56, 57, 58, 61, 62, 66, 67, 68, 73, 74, 75, 96, 97, 113], "512": [19, 22, 24, 28, 31, 35, 39, 42, 44, 46, 64], "help": [19, 22, 24, 28, 31, 35, 39, 44, 46, 52, 54, 56, 112, 126, 164, 202, 207, 211], "feed": [19, 22, 24, 28, 31, 35, 39, 44, 46, 178], "entir": [19, 22, 24, 28, 31, 35, 39, 44, 46, 112, 179, 182], "bool": [19, 22, 24, 28, 31, 35, 39, 44, 46, 55, 58, 60, 70, 76, 78, 83, 85, 86, 90, 91, 94, 95, 96, 98, 100, 105, 106, 110, 113, 114, 116, 119, 124, 126, 128, 131, 133, 134, 135, 140, 143, 147, 157, 164, 167, 193], "one": [19, 22, 24, 28, 31, 35, 37, 39, 44, 46, 49, 52, 54, 55, 57, 58, 69, 73, 74, 75, 81, 83, 86, 89, 94, 106, 116, 121, 144, 183, 184, 202, 206], "albertfortokenclassif": [20, 56], "recognit": [20, 23, 25, 29, 32, 36, 40, 45, 47, 51, 59, 92, 95, 96, 184], "ner": [20, 23, 25, 29, 32, 36, 40, 45, 47, 73, 74, 78, 79, 121, 140, 156, 157, 164, 167, 170, 185, 202], "token_classifi": [20, 25, 36, 40, 45, 47], "albert_base_token_classifier_conll03": 20, "albertembed": [20, 56], "level": [20, 26, 37, 41, 57, 58, 66, 67, 68, 70, 72, 74, 76, 95, 96, 100, 114, 157, 193], "tokenclassifi": [20, 23, 25, 29, 32, 36, 40, 45, 47], "john": [20, 23, 29, 32, 36, 40, 45, 47, 49, 58, 68, 74, 76, 78, 97, 98, 106, 135], "lenon": [20, 23, 29, 32, 36, 40, 45, 47], "born": [20, 23, 29, 32, 36, 40, 45, 47, 110], "london": [20, 23, 29, 32, 36, 40, 45, 47], "pari": [20, 23, 29, 32, 36, 40, 45, 47], "sarah": [20, 23, 29, 32, 36, 40, 45, 47], "o": [20, 23, 25, 29, 32, 36, 40, 45, 47, 94, 95, 96, 97, 140, 156, 167, 184, 193, 197, 212], "loc": [20, 23, 25, 29, 32, 36, 40, 45, 47, 78, 94, 95, 96, 130, 134, 140, 156, 167, 193], "bertforquestionansw": [21, 42], "bert_base_cased_qa_squad2": 21, "bertforsequenceclassif": 22, "bert_base_sequence_classifier_imdb": 22, "bertfortokenclassif": 23, "bert_base_token_classifier_conll03": 23, "camembertforsequenceclassif": 24, "camembert": [24, 25, 59], "sequence_classifi": 24, "camembert_base_sequence_classifier_allocin": 24, "j": [24, 76, 184], "ai": [24, 164, 202], "ador\u00e9": 24, "ce": 24, "film": 24, "lorsqu": 24, "\u00e9tai": 24, "enfant": 24, "je": 24, "d\u00e9test": 24, "\u00e7a": 24, "fr": [24, 59, 83], "camembertfortokenclassif": 25, "camembert_base_token_classifier_wikin": 25, "georg": 25, "washington": 25, "est": [25, 59, 83, 112], "all\u00e9": 25, "\u00e0": 25, "classifierdl": [26, 206], "classifierdlapproach": [26, 37, 206], "gener": [26, 37, 56, 60, 62, 66, 69, 75, 78, 81, 95, 96, 106, 110, 113, 114, 116, 117, 134, 135, 164, 170, 185, 202, 205, 206, 207], "art": [26, 37, 51, 56, 57, 58, 59, 64, 66, 67, 68, 75, 81, 96, 110, 113, 141], "univers": [26, 52, 54, 70, 112], "encod": [26, 55, 57, 58, 61, 66, 70, 112, 164], "deep": [26, 57, 58, 64, 81, 95, 106, 114, 184], "dnn": 26, "insid": [26, 37, 94, 103, 126, 179, 193], "instanti": [26, 37, 41, 52, 54, 63, 71, 72, 76, 84, 85, 89, 90, 95, 96, 98, 103, 106, 108, 109, 114, 116, 117, 121, 123, 128, 193, 194], "classifierdlmodel": [26, 37, 206], "test": [26, 37, 41, 51, 52, 54, 57, 58, 70, 72, 84, 85, 89, 90, 95, 96, 100, 103, 110, 116, 117, 121, 128, 193, 194, 196, 197, 206, 212], "monitor": [26, 37, 41, 96, 164, 202], "metric": [26, 37, 41, 96, 117, 164], "done": [26, 37, 41, 67, 68, 95, 96, 207], "settestdataset": [26, 37, 41, 96, 100], "expect": [26, 37, 41, 75, 96, 126, 156, 182], "path": [26, 37, 41, 52, 54, 63, 71, 72, 76, 78, 84, 85, 89, 90, 95, 96, 98, 100, 106, 108, 110, 114, 116, 117, 120, 126, 138, 140, 155, 164, 167, 170, 185, 193, 194, 196, 197, 202], "parquet": [26, 37, 41, 96, 100, 129], "datafram": [26, 37, 41, 51, 72, 96, 100, 103, 128, 140, 152, 156, 163, 164, 167, 193, 194, 196, 197, 202, 206, 210, 212], "ha": [26, 37, 41, 42, 51, 55, 56, 61, 62, 64, 67, 68, 72, 81, 84, 89, 96, 100, 106, 108, 113, 116, 117, 128, 129, 131, 138, 140, 164, 182, 183, 184, 196, 202, 206, 207], "same": [26, 37, 41, 49, 56, 67, 72, 73, 76, 78, 96, 100, 113, 142, 164, 183, 184, 207], "step": [26, 37, 41, 63, 71, 96, 100, 164, 180, 184, 202, 206], "appli": [26, 37, 41, 51, 55, 76, 78, 96, 97, 100, 105, 113, 114, 116, 130, 134, 156, 184, 193], "follow": [26, 37, 41, 49, 55, 64, 66, 72, 81, 86, 88, 89, 94, 96, 98, 105, 125, 143, 179, 180, 202, 204, 207], "universalsentenceencod": [26, 37, 41, 70, 164, 202, 206], "preprocessingpipelin": [26, 37, 41, 96, 100], "randomsplit": [26, 37, 41, 96, 100], "write": [26, 37, 41, 72, 96, 100, 116, 117, 207], "overwrit": [26, 37, 41, 96, 97, 100, 164], "test_data": [26, 37, 41, 96, 100], "setlabelcolumn": [26, 37, 41, 93, 95, 96, 99, 120, 164, 170, 185, 202, 206], "usag": [26, 37, 41, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 67, 70, 72, 73, 75, 76, 81, 83, 84, 86, 88, 89, 90, 95, 96, 98, 103, 105, 106, 108, 109, 112, 113, 114, 116, 118, 119, 123, 126, 128], "64": [26, 37, 41, 56, 96, 99, 170, 185, 206], "dropout": [26, 41, 96, 184], "coeffici": [26, 41, 95, 96], "5": [26, 37, 41, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 83, 86, 88, 91, 94, 96, 103, 110, 128, 133, 140, 156, 164, 167, 184, 194, 196, 197, 202, 205, 206, 212], "enableoutputlog": [26, 37, 41, 96], "stdout": [26, 37, 41, 96, 100], "addit": [26, 37, 41, 52, 54, 57, 58, 76, 95, 96, 100, 105, 110, 126, 164, 184, 205, 206], "evaluationlogextend": [26, 37, 41, 96], "valid": [26, 37, 41, 86, 96, 100, 106, 114, 202], "time": [26, 37, 41, 56, 63, 71, 73, 74, 81, 86, 100, 109, 114, 128, 157, 178, 179, 180, 183, 184, 205, 206, 210, 211], "evalu": [26, 37, 41, 59, 66, 73, 74, 100, 147, 164], "labelcolumn": [26, 37, 41, 95, 96], "lr": [26, 37, 41, 96], "rate": [26, 37, 41, 63, 67, 68, 71, 72, 96, 99, 114], "005": [26, 41, 96, 99], "maxepoch": [26, 37, 41, 95, 96], "maximum": [26, 37, 41, 49, 63, 71, 78, 81, 93, 95, 96, 98, 99, 105, 106, 110, 112, 113, 114, 116, 124, 126], "epoch": [26, 37, 41, 93, 95, 96, 99, 100, 106, 114, 164], "30": [26, 41, 81, 86, 88, 94, 99, 112, 140, 156, 167, 205], "outputlogspath": [26, 37, 41, 96, 106], "randomse": [26, 37, 41, 95, 96], "random": [26, 37, 41, 63, 71, 93, 95, 96, 99, 133], "seed": [26, 37, 41, 63, 71, 93, 95, 96, 99], "shuffl": [26, 37, 93, 99], "testdataset": [26, 37, 41, 96, 164, 202], "statist": [26, 37, 41, 72, 81, 96, 100], "dure": [26, 37, 41, 62, 95, 96, 100, 105, 114, 157, 164, 202], "validationsplit": [26, 37, 41, 96, 106], "choos": [26, 37, 41, 60, 69, 96, 106, 116], "proport": [26, 37, 41, 96, 100, 106], "against": [26, 37, 41, 76, 81, 85, 90, 96, 100, 106, 142], "between": [26, 37, 41, 52, 54, 67, 68, 70, 73, 74, 75, 78, 96, 100, 105, 106, 114, 183, 184], "off": [26, 37, 41, 70, 73, 74, 96, 100, 106, 183], "verbos": [26, 37, 41, 95, 96, 100], "multiclassifierdlapproach": [26, 37, 164, 202], "sentimentdlapproach": [26, 37, 41], "analysi": [26, 37, 41, 64, 75, 107, 108, 113, 130, 149, 184, 207], "accept": [26, 37, 41, 183], "singl": [26, 37, 41, 72, 78, 81, 121, 123, 126, 182, 183, 184, 193], "item": [26, 41, 72, 164, 202], "either": [26, 41, 51, 54, 59, 60, 69, 76, 81, 83, 89, 108, 109, 113, 131, 132, 140, 141, 143, 167, 183, 207], "doubl": [26, 41, 129, 143], "sentenceembed": [26, 37, 41, 69, 72, 133], "In": [26, 37, 41, 51, 59, 61, 62, 66, 72, 75, 76, 81, 83, 84, 85, 89, 90, 105, 106, 108, 110, 113, 116, 117, 128, 164, 170, 179, 184, 196, 202, 206, 207, 211, 212], "csv": [26, 41, 76, 100, 143, 206], "best": [26, 41, 56, 59, 67, 68, 81, 83, 96, 184, 206], "wach": [26, 206], "ever": [26, 41, 55, 206], "opinion": [26, 41, 206], "win": [26, 41, 206], "award": [26, 41, 206], "terribl": [26, 41, 206], "act": [26, 41, 184, 206], "bad": [26, 41, 108, 164, 202, 206], "realli": [26, 41, 109, 206], "trane": 26, "smallcorpu": [26, 41, 206], "read": [26, 41, 51, 52, 54, 63, 71, 81, 84, 85, 86, 88, 89, 90, 95, 98, 100, 106, 108, 110, 114, 116, 117, 126, 128, 129, 132, 138, 141, 152, 155, 158, 164, 184, 193, 194, 196, 197, 202, 206, 212], "header": [26, 41, 42, 143, 206], "src": [26, 41, 51, 52, 54, 72, 84, 85, 89, 90, 95, 96, 103, 116, 117, 121, 128, 193, 194, 196, 197, 206, 212], "useembed": [26, 37, 41, 70, 206], "docclassifi": [26, 37, 41, 206], "setbatchs": [26, 37, 41, 64, 96, 99, 114, 164, 170, 185, 202, 206], "setmaxepoch": [26, 37, 41, 93, 95, 96, 99, 164, 170, 185, 202, 206], "20": [26, 42, 75, 94, 110, 140, 143, 156, 167, 184, 206], "setlr": [26, 37, 41, 96, 99, 164, 202, 206], "5e": [26, 41, 206], "setdropout": [26, 41, 96, 206], "pipelinemodel": [26, 37, 41, 52, 54, 55, 63, 71, 95, 96, 109, 114, 116, 117, 128, 140, 142, 164, 206, 209], "v": [26, 37, 41, 61, 72, 81, 83, 85, 96, 99, 100, 117, 156, 184], "classifierdl_use_trec6": 26, "trec": 26, "multiclassifierdlmodel": [26, 37], "sentimentdlmodel": [26, 37, 41], "sarcasmdl": [26, 206], "classifierdl_use_sarcasm": [26, 206], "sarcasm": [26, 206], "m": [26, 86, 88, 206], "could": [26, 62, 81, 89, 100, 114, 205, 206, 207], "put": [26, 156, 170, 179, 185, 206], "word": [26, 51, 52, 54, 56, 60, 61, 63, 64, 67, 69, 70, 71, 72, 75, 76, 78, 81, 84, 91, 94, 97, 98, 103, 108, 110, 112, 113, 114, 116, 117, 118, 119, 123, 126, 127, 128, 140, 156, 167, 196, 197, 205, 206], "much": [26, 42, 56, 67, 68, 98, 128, 157, 179, 182, 206], "wake": [26, 206], "am": [26, 86, 88, 110, 121, 206], "mondai": [26, 206], "would": [26, 49, 60, 69, 86, 106, 157, 183, 206], "arrays_zip": [26, 52, 54, 81, 206], "out": [26, 81, 84, 98, 110, 112, 113, 118, 119, 206], "normal": [26, 55, 79, 85, 106, 109, 119, 133, 142, 144, 157, 184, 206, 207], "debertaforquestionansw": 27, "deberta": [27, 28, 29, 61], "deberta_v3_xsmall_qa_squad2": 27, "debertaforsequenceclassif": 28, "v2": [28, 29, 57, 58, 61], "v3": [28, 29], "deberta_v3_xsmall_sequence_classifier_imdb": 28, "deberta_base_sequence_classifier_imdb": 28, "debertafortokenclassif": 29, "deberta_v3_xsmall_token_classifier_conll03": 29, "distilbertforquestionansw": 30, "distilbert": [30, 31, 62], "distilbert_base_cased_qa_squad2": 30, "distilbertforsequenceclassif": 31, "distilbert_base_sequence_classifier_imdb": 31, "distilbertfortokenclassif": 32, "distilbert_base_token_classifier_conll03": 32, "albert_for_sequence_classif": [33, 79], "albert_for_token_classif": [33, 79], "bert_for_sequence_classif": [33, 79], "bert_for_token_classif": [33, 79], "camembert_for_sequence_classif": [33, 79], "camembert_for_token_classif": [33, 79], "deberta_for_sequence_classif": [33, 79], "deberta_for_token_classif": [33, 79], "distil_bert_for_sequence_classif": [33, 79], "distil_bert_for_token_classif": [33, 79], "longformer_for_sequence_classif": [33, 79], "longformer_for_token_classif": [33, 79], "multi_classifier_dl": [33, 79], "roberta_for_sequence_classif": [33, 79], "roberta_for_token_classif": [33, 79], "sentiment_dl": [33, 79], "xlm_roberta_for_sequence_classif": [33, 79], "xlm_roberta_for_token_classif": [33, 79], "xlnet_for_sequence_classif": [33, 79], "xlnet_for_token_classif": [33, 79], "longformerforquestionansw": 34, "longform": [34, 35, 36, 66], "longformer_base_base_qa_squad2": 34, "longformerforsequenceclassif": 35, "longformer_base_sequence_classifier_imdb": 35, "4096": [35, 56, 66], "longformerfortokenclassif": 36, "xlnet_base_token_classifier_conll03": [36, 47], "longformer_base_token_classifier_conll03": 36, "multiclassifierdl": 37, "bidirect": [37, 57, 58, 64, 75, 183, 184], "gru": [37, 180, 184], "convolut": [37, 51, 184], "machin": [37, 63, 71, 81, 95, 110, 112, 113, 164, 184, 204], "strongli": 37, "relat": [37, 52, 54, 78, 211], "problem": [37, 56, 64, 113, 114], "variant": [37, 66, 70], "multipl": [37, 51, 59, 76, 81, 86, 105, 126, 156, 164, 184, 193], "mai": [37, 131, 178, 182, 184, 205, 206, 207, 210, 211], "assign": [37, 76, 97, 108], "instanc": [37, 99, 100, 147, 151, 157, 158, 162, 183], "multiclass": 37, "categor": 37, "precis": [37, 52, 54], "than": [37, 41, 62, 63, 71, 73, 74, 75, 81, 83, 91, 95, 110, 116, 117, 182, 206], "two": [37, 52, 54, 56, 61, 70, 72, 73, 74, 78, 125, 184, 193, 206], "constraint": 37, "mani": [37, 61, 67, 68, 81, 110, 112, 113, 128, 178], "formal": 37, "find": [37, 52, 54, 67, 68, 70, 76, 78, 84, 86, 110], "binari": [37, 138, 152, 164], "bertsentenceembed": [37, 41, 58, 68, 74], "multiclassifi": [37, 164, 202], "001": [37, 95, 96, 184], "10": [37, 49, 52, 81, 86, 88, 97, 116, 164, 179, 205], "44": [37, 63, 71, 103], "shuffleperepoch": 37, "threshold": [37, 41, 63, 71, 81, 83, 95, 114, 128], "minimum": [37, 41, 63, 71, 78, 81, 83, 93, 95, 96, 98, 105, 106, 110, 113, 116, 117, 124, 126, 193], "ed58abb40640f983": 37, "pn": 37, "newsyou": 37, "toxic": 37, "a1237f726b5f5d89": 37, "dude": 37, "place": [37, 51], "obscen": 37, "insult": 37, "24b0d6c8733c2abe": 37, "thank": [37, 75, 81], "8c4478fb239bcfc0": 37, "gee": 37, "minut": 37, "traindataset": [37, 164, 202], "printschema": [37, 129, 132, 138, 141], "root": [37, 49, 52, 54, 78, 129, 132, 138, 141, 194], "setcleanupmod": [37, 132, 141], "shrink": [37, 132, 141], "1e": [37, 164, 202], "setthreshold": [37, 41, 81, 83, 164, 202], "setvalidationsplit": [37, 100, 106, 170, 185], "setverbos": [37, 95, 96, 100, 170, 185], "multiclassifierdl_use_tox": 37, "comment": [37, 81], "jigsaw": 37, "challeng": [37, 62, 64, 67, 68, 81], "good": [37, 59, 62, 70, 109], "stuff": 37, "wtf": 37, "kind": [37, 81, 86, 88], "crap": 37, "robertaforquestionansw": 38, "roberta": [38, 39, 40, 43, 44, 45, 59, 61, 66, 67, 68, 73, 74], "roberta_base_qa_squad2": 38, "robertaforsequenceclassif": 39, "roberta_base_sequence_classifier_imdb": 39, "robertafortokenclassif": 40, "roberta_base_token_classifier_conll03": 40, "sentimentdl": 41, "natur": [41, 51, 56, 57, 58, 59, 61, 62, 63, 70, 71, 75, 83, 110, 113, 131, 141, 144], "affect": [41, 126, 184], "subject": [41, 52, 54], "view": 41, "common": [41, 76, 121, 131, 157, 170, 185, 209], "product": [41, 184], "review": [41, 160], "tweet": 41, "interpret": [41, 76], "posit": [41, 61, 62, 73, 74, 75, 81, 94, 108, 109, 124, 144, 164, 202], "final": [41, 66, 67, 68, 73, 74, 83, 96, 114, 182, 183, 206], "otheriws": [41, 83], "neutral": [41, 83], "thresholdlabel": [41, 83], "score": [41, 57, 58, 73, 74, 81, 83, 95, 96, 108, 109, 110], "less": [41, 62, 83, 91, 95, 116, 179, 183], "watch": [41, 109], "32": [41, 56, 64, 183, 184, 205, 211], "setthresholdlabel": [41, 83], "p": [41, 55, 63, 71, 83, 96, 100, 123, 184], "sentimentdl_use_imdb": 41, "english": [41, 59, 81, 116, 119, 128], "imdb": 41, "sentimentdl_use_twitt": 41, "wow": 41, "video": [41, 81], "awesom": 41, "bruh": 41, "damn": 41, "wast": [41, 109], "tapasforquestionansw": 42, "implement": [42, 63, 71, 73, 106, 114, 136, 137, 145, 146, 153, 159, 163, 178, 179, 180, 182, 184], "tapa": 42, "design": [42, 57, 58, 67, 68, 85, 112, 164, 184, 202], "about": [42, 52, 54, 67, 68, 72, 81, 105, 117, 140, 142, 205, 207, 210, 211], "tabular": [42, 143], "tabl": [42, 143], "tri": 42, "share": [42, 81, 183, 184, 207], "its": [42, 51, 61, 62, 66, 75, 81, 103, 108, 112, 119, 164, 184, 196], "table_qa_tapas_base_finetuned_wtq": 42, "document_assembl": [42, 139, 143, 157], "table_json": 42, "document_t": [42, 143], "sentence_detector": [42, 79, 104], "table_assembl": [42, 139, 157], "tableassembl": [42, 143], "stage": [42, 140, 142, 164, 202, 206, 207, 210], "json_data": 42, "monei": [42, 143], "ag": [42, 143], "donald": [42, 143], "trump": [42, 143], "000": [42, 81, 110, 143], "75": [42, 81, 143], "elon": [42, 143], "musk": [42, 143], "55": [42, 97, 143], "AS": [42, 49], "who": [42, 123, 206], "earn": 42, "thei": [42, 52, 54, 96, 98, 110, 142, 159, 194, 206], "old": [42, 49, 196], "xlmrobertaforquestionansw": 43, "xlm": [43, 44, 45, 73, 74], "xlm_roberta_base_qa_squad2": 43, "xlmrobertaforsequenceclassif": 44, "xlm_roberta_base_sequence_classifier_imdb": 44, "xlmrobertafortokenclassif": 45, "xlm_roberta_base_token_classifier_conll03": 45, "xlnetforsequenceclassif": 46, "xlnet": [46, 47, 75], "xlnet_base_sequence_classifier_imdb": 46, "xlnetfortokenclassif": 47, "spanbert_coref": 48, "spanbertcorefmodel": 49, "corefer": 49, "resolut": 49, "spanbert": 49, "identifi": [49, 72, 81, 85, 89, 124, 126, 164, 207], "given": [49, 76, 81, 110, 113, 114, 116, 117, 119, 163, 164, 178, 182, 184], "told": [49, 88], "mari": [49, 58, 68, 74, 106], "he": [49, 61, 88, 123], "borrow": 49, "book": [49, 55, 110, 114, 194], "her": 49, "link": [49, 167], "fine": [49, 57, 58, 62, 113], "tune": [49, 57, 58, 62, 113], "ontonot": 49, "corefresolut": 49, "spanbert_base_coref": 49, "maxsegmentlength": 49, "segment": [49, 62, 67, 127, 128], "textgenr": 49, "genr": 49, "One": [49, 81, 123, 125], "bc": 49, "broadcast": 49, "convers": 49, "bn": 49, "nw": 49, "wire": 49, "pt": 49, "pivot": 49, "testament": 49, "tc": 49, "telephon": 49, "wb": 49, "web": [49, 55, 59, 110, 164, 202], "setmaxsegmentlength": 49, "settextgenr": 49, "code": [49, 61, 63, 66, 67, 68, 71, 73, 74, 81, 83, 113, 181, 184, 203, 211], "vit_for_image_classif": 50, "vitforimageclassif": 51, "vision": 51, "vit": 51, "altern": [51, 81, 108, 114, 116, 117, 140, 143, 182], "neural": [51, 57, 58, 61, 96, 106, 112, 183, 184], "network": [51, 57, 58, 64, 96, 106, 179, 182, 183, 184], "usual": [51, 144, 179], "imageclassifi": 51, "image_assembl": [51, 139, 157], "image_classifier_vit_base_patch16_224": 51, "huggingfac": [51, 59], "vitimageclassificationtestspec": 51, "paper": [51, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 75, 81, 106, 109, 110, 112, 113, 184, 197, 212], "abstract": [51, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 75, 81, 110, 112, 113, 120, 179, 182, 197, 212], "while": [51, 56, 62, 72, 81, 100, 110, 164, 183, 202, 207], "architectur": [51, 56, 57, 58, 61, 67, 83, 96, 106, 113, 184], "becom": [51, 56, 62, 81], "de": [51, 59, 81, 83, 112], "facto": [51, 81], "standard": [51, 55, 66, 86, 88, 116, 117, 126], "remain": [51, 55, 56, 62, 81], "attent": [51, 61, 66, 184], "conjunct": 51, "replac": [51, 55, 61, 66, 83, 84, 97, 106, 116, 117, 184, 206], "certain": [51, 114], "compon": [51, 99, 100, 129, 138, 147, 151, 162, 210], "keep": [51, 81, 98, 110, 113], "overal": [51, 72, 75], "structur": [51, 144, 205], "relianc": 51, "cnn": [51, 83, 96, 106, 184], "necessari": [51, 62, 202, 209], "pure": [51, 112], "directli": [51, 140, 164, 178, 202], "patch": 51, "perform": [51, 55, 56, 59, 61, 62, 64, 67, 68, 70, 72, 73, 74, 75, 96, 109, 110, 116, 183, 184], "veri": [51, 59, 64, 73, 74, 75, 110, 112, 113, 140, 183, 205, 207, 210, 211], "well": [51, 52, 54, 70, 73, 74, 81, 143, 184], "amount": [51, 70, 81, 90, 110, 128, 140, 210], "transfer": [51, 62, 70, 73, 74, 110, 113], "mid": 51, "small": [51, 55, 56, 59, 62, 63, 71, 84, 103, 140, 196, 210], "benchmark": [51, 56, 61, 62, 64, 73, 74, 113], "imagenet": 51, "cifar": 51, "vtab": 51, "etc": [51, 60, 133, 144, 202], "attain": 51, "excel": [51, 75], "compar": [51, 56, 61, 62, 64, 75, 81, 106, 113, 114, 164, 202], "substanti": [51, 57, 58], "fewer": [51, 56], "worth": 51, "16x16": 51, "scale": [51, 56, 62, 66, 73, 74, 110, 113, 182, 184], "imagedf": 51, "dropinvalid": 51, "imageassembl": [51, 138], "pipelinedf": 51, "dependencypars": [52, 54, 78], "dependencyparserapproach": [52, 194, 212], "unlabel": [52, 57, 58, 110, 113], "grammat": [52, 54], "dependencyparsermodel": [52, 54, 78], "relationship": [52, 54, 70, 78], "tell": [52, 54, 81, 156], "verb": [52, 54, 194], "modifi": [52, 54, 67, 68, 94, 106, 181], "describ": [52, 54, 78, 81, 112, 183, 184], "wai": [52, 54, 76, 78, 142, 167], "onli": [52, 54, 55, 64, 70, 75, 86, 89, 98, 105, 106, 110, 113, 123, 128, 142, 180, 181, 184, 193], "chosen": [52, 54, 96], "particular": [52, 54, 81], "treebank": 52, "penn": 52, "setdependencytreebank": 52, "conll": [52, 54, 95, 96, 157, 194, 195, 209], "u": [52, 54, 61, 62, 81, 88, 94, 95, 96, 140, 156, 167, 180, 184, 194, 204, 207, 212], "setconllu": [52, 54], "apart": [52, 54, 130, 134], "dependencytreebank": 52, "conllu": [52, 54, 84, 157, 195, 209], "numberofiter": [52, 54], "iter": [52, 54, 56, 63, 71, 103, 128, 164, 183, 202], "converg": [52, 54, 103, 128], "better": [52, 54, 56, 61, 75, 81, 95, 103, 105, 106, 109, 128], "accuraci": [52, 54, 57, 58, 63, 70, 71, 73, 74, 95, 96, 103, 116, 128, 202], "typeddependencyparserapproach": [52, 54], "postagg": [52, 54, 78, 95, 103], "dependency_treebank": 52, "emptydataset": [52, 54], "reli": [52, 54, 75, 81], "tree": [52, 78], "bank": 52, "setnumberofiter": [52, 54], "read_a": [52, 54, 76, 84, 85, 89, 90, 95, 98, 100, 108, 116, 117, 126, 150, 155, 157, 193, 194], "reada": [52, 54, 72, 76, 84, 85, 89, 90, 95, 98, 100, 108, 116, 117, 121, 126, 152, 155, 193, 194], "dep": 52, "dependency_conllu": [52, 78], "perceptron": [52, 79, 102], "featur": [52, 63, 71, 81, 91, 95, 100, 164, 184, 209], "typeddependencyparsermdoel": 52, "union": [52, 54], "worker": [52, 54], "turner": [52, 54], "newal": [52, 54], "sai": [52, 54, 81, 126], "disappoint": [52, 54], "talk": [52, 54], "stricken": [52, 54], "parent": [52, 54], "firm": [52, 54], "feder": [52, 54], "mogul": [52, 54], "col": [52, 54, 76, 85, 94, 97, 130, 134, 156, 205], "dependency_pars": [53, 79], "typed_dependency_pars": [53, 79], "typeddependencypars": [54, 78], "Its": 54, "conll2009": 54, "typeddependencyparsermodel": [54, 78], "beforehand": 54, "2009": 54, "setconll2009": 54, "dependency_typ": [54, 78], "train_smal": 54, "txt": [54, 63, 71, 72, 84, 85, 89, 90, 103, 106, 108, 114, 116, 117, 121, 126, 196, 197, 212], "descript": [54, 69, 81, 86, 116, 123, 152, 170, 185], "typdep": 54, "dependency_typed_conllu": [54, 78], "amod": 54, "flat": [54, 78, 135], "nsubj": [54, 78, 135, 194], "parataxi": 54, "documentnorm": 55, "raw": [55, 110, 123, 126, 205, 207], "scrape": 55, "xml": 55, "remov": [55, 67, 68, 98, 109, 124, 133, 134, 135], "dirti": [55, 98], "regex": [55, 76, 86, 89, 98, 114, 116, 117, 124, 126, 128], "want": [55, 76, 97, 170, 185, 207], "polici": 55, "lower": [55, 56, 81, 114, 131], "action": 55, "clean": [55, 98, 113, 144, 207], "lowercas": [55, 98, 124, 128, 131], "convert": [55, 60, 69, 72, 86, 88, 91, 94, 98, 113, 124, 125, 128, 130, 131, 134, 135, 164, 202, 209], "pretty_al": 55, "utf": 55, "cleanuppattern": [55, 98], "normalizeddocu": 55, "setact": 55, "setpattern": [55, 124, 128], "setreplac": 55, "setpolici": 55, "setlowercas": [55, 98, 131, 144], "div": 55, "theworldsgreatest": 55, "right": [55, 57, 58], "hide": 55, "wide": [55, 57, 58, 61, 62, 73, 74], "toptext": 55, "style": [55, 83, 113], "font": 55, "famili": 55, "sego": 55, "ui": 55, "arial": 55, "san": [55, 81], "serif": 55, "world": [55, 121, 164, 202], "largest": [55, 81, 110], "develop": [55, 81, 112, 161], "site": [55, 81], "h1": 55, "300": 55, "160": 55, "lorem": [55, 85, 90], "ipsum": [55, 85, 90], "simpli": [55, 207], "print": 55, "typeset": 55, "industri": 55, "been": [55, 59, 110, 125, 144], "sinc": [55, 81, 110, 206, 207, 211], "1500": 55, "unknown": [55, 83], "printer": 55, "took": 55, "gallei": 55, "scrambl": 55, "specimen": 55, "surviv": 55, "five": [55, 97], "centuri": 55, "leap": 55, "electron": 55, "essenti": [55, 110], "unchang": 55, "popularis": 55, "1960": 55, "releas": [55, 56, 59, 61, 67, 68, 73, 74, 113, 157], "letraset": 55, "passag": 55, "recent": [55, 57, 58, 61, 67, 68, 81], "desktop": 55, "publish": [55, 67, 68], "softwar": 55, "aldu": 55, "pagemak": 55, "setencod": 55, "lite": 56, "googl": [56, 57, 58, 61, 63, 64, 67, 68, 70, 71, 81, 113, 184, 194], "research": [56, 57, 58, 61, 63, 71, 112, 113, 184], "toyota": 56, "technolog": 56, "institut": 56, "chicago": 56, "These": [56, 67, 68, 75, 81, 95, 110, 167, 204], "offici": [56, 81, 94, 95, 96, 140, 156, 167, 203], "tf": [56, 70, 170, 179, 181, 182, 183, 185], "wrapper": [56, 160, 178, 180, 184], "port": 56, "albert_base_uncas": 56, "albert_bas": 56, "768": [56, 57, 58, 59, 61, 62, 66, 67, 68, 73, 74, 75], "emb": 56, "dim": [56, 184], "12m": 56, "albert_large_uncas": 56, "albert_larg": 56, "1024": [56, 64, 66, 75], "24": [56, 75, 85, 90, 94, 114, 140, 156, 167, 205], "16": [56, 75, 97, 196, 205], "18m": 56, "albert_xlarge_uncas": 56, "albert_xlarg": 56, "2048": 56, "60m": 56, "albert_xxlarge_uncas": 56, "albert_xxlarg": 56, "235m": 56, "sentencepiec": [56, 61, 70], "everi": [56, 57, 58, 59, 61, 62, 66, 67, 68, 73, 74, 75, 96, 109, 112, 114, 132, 141, 142, 170, 179, 185, 207], "dimens": [56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 151, 179, 182, 184], "repeat": 56, "footprint": 56, "howev": [56, 69, 75, 81, 98, 183, 205], "cost": [56, 114, 116], "similar": [56, 70, 81, 83, 182, 184], "through": [56, 78, 81, 135, 184, 207], "FOR": 56, "http": [56, 59, 61, 63, 64, 70, 71, 180, 182, 183, 184, 203], "tfhub": [56, 64, 70], "dev": [56, 64, 70], "q": 56, "increas": [56, 72, 81, 110, 116], "often": [56, 67, 68, 75], "improv": [56, 57, 58, 59, 61, 64, 67, 68, 73, 74, 95, 96, 110, 184, 211], "downstream": [56, 59, 61, 64, 66, 75, 110, 113], "some": [56, 58, 73, 81, 96, 106, 110, 142, 164, 205, 206, 210, 211], "point": [56, 57, 58, 105, 106, 132, 141, 193], "further": [56, 81, 95, 96, 130, 144], "harder": 56, "gpu": [56, 110, 112, 113, 157, 183], "tpu": 56, "longer": [56, 63, 66, 71, 83, 183, 211], "present": [56, 64, 66, 67, 68, 70, 73, 74, 78, 100, 106, 112], "reduct": [56, 116], "techniqu": [56, 61, 110, 113], "consumpt": [56, 70, 72], "speed": [56, 95, 112], "devlin": [56, 67, 68], "et": [56, 67, 68, 83, 184], "al": [56, 67, 68, 184], "2019": [56, 59, 61, 67, 68, 73, 74], "comprehens": [56, 110], "empir": [56, 57, 58, 73, 74, 75], "evid": 56, "our": [56, 59, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 81, 106, 110, 113, 156, 167, 211], "lead": [56, 59, 73, 74, 179], "loss": [56, 62, 96, 113, 184, 202], "focus": [56, 81], "inter": 56, "coher": [56, 110], "consist": [56, 61, 66, 89, 103, 109, 128, 143, 182, 184, 196], "As": [56, 57, 58, 62, 81, 183, 184], "establish": 56, "glue": [56, 57, 58, 62, 67, 68, 73, 74], "race": [56, 61, 67, 68], "embeddingsfinish": [56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 133], "finished_embed": [56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "setoutputasvector": [56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 133], "setcleanannot": [56, 61, 62, 64, 66, 67, 69, 70, 72, 73, 75, 133, 134, 135], "80": [56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 89, 133, 144], "1342473030090332": [56, 61], "3855540752410889": [56, 61], "9818322062492371": [56, 61], "784737348556518": [56, 61], "847029983997345": [56, 61], "047153353691101": [56, 61], "1520637571811676": [56, 61], "6245765686035156": [56, 61], "009860038757324219": [56, 61], "13450059294700623": [56, 61], "707749128341675": [56, 61], "2916892766952": [56, 61], "04192575812339783": [56, 61], "5764210224151611": [56, 61], "3196685314178467": [56, 61], "527840495109": [56, 61], "15583214163780212": [56, 61], "1614152491092682": [56, 61], "28423872590065": [56, 61], "135491415858268": [56, 61], "bertembed": [57, 60, 69, 96, 133], "dens": [57, 58], "small_bert_l2_768": 57, "understand": [57, 58, 62, 73, 75, 81, 113, 128, 205], "introduc": [57, 58, 62, 64, 66, 113], "call": [57, 58, 62, 76, 81, 110, 163, 178, 180, 182, 184, 193, 206, 212], "stand": [57, 58], "unlik": [57, 58, 73, 81, 123, 179, 182], "jointli": [57, 58], "condit": [57, 58, 110, 113], "both": [57, 58, 64, 70, 78, 182, 183, 184, 206, 207], "left": [57, 58], "just": [57, 58, 62, 67, 91, 96, 181], "rang": [57, 58, 61, 62, 73, 74], "infer": [57, 58, 59, 62, 75, 183, 184], "without": [57, 58, 73, 74, 81, 110, 128, 184], "modif": [57, 58], "conceptu": [57, 58], "simpl": [57, 58, 76, 110, 184, 207], "power": [57, 58, 113], "obtain": [57, 58, 59, 70], "eleven": [57, 58], "push": [57, 58], "absolut": [57, 58], "multinli": [57, 58], "86": [57, 58, 61], "v1": [57, 58, 179], "f1": [57, 58, 73, 74, 96, 110], "93": [57, 58], "83": [57, 58, 61, 170, 185, 196, 197, 212], "small_bert_l2_128": 57, "3497989177703857": 57, "480538547039032": 57, "3238905668258667": 57, "612930893898010": 57, "1357314586639404": 57, "32984697818756104": 57, "6032363176345825": 57, "6791689395904": 57, "8244884014129639": 57, "27088963985443115": 57, "059438943862915": 57, "9817547798156": 57, "1648050546646118": 57, "4725411534309387": 57, "5938255786895752": 57, "5780693292617": 57, "9125322699546814": 57, "4563939869403839": 57, "3975459933280945": 57, "81611204147338": 57, "sentence_bert_embed": 58, "sent_small_bert_l2_768": 58, "islong": 58, "long": [58, 66, 75, 182, 184], "sent_small_bert_l2_128": 58, "orang": [58, 68, 74], "8951074481010437": [58, 68, 74], "13753940165042877": [58, 68, 74], "3108254075050354": [58, 68, 74], "65693199634552": [58, 68, 74], "6180210709571838": [58, 68, 74], "12179657071828842": [58, 68, 74], "191165953874588": [58, 68, 74], "4497021436691": [58, 68, 74], "822715163230896": [58, 68, 74], "7568016648292542": [58, 68, 74], "1165061742067337": [58, 68, 74], "59048593044281": [58, 68, 74], "setislong": 58, "camembertembed": 59, "tasti": 59, "french": [59, 81, 112, 119], "loui": 59, "martin": 59, "benjamin": 59, "muller": 59, "pedro": 59, "javier": 59, "ortiz": 59, "su\u00e1rez": 59, "yoann": 59, "dupont": 59, "laurent": [59, 184], "romari": 59, "\u00e9ric": 59, "villemont": 59, "la": [59, 112], "clergeri": 59, "djam\u00e9": 59, "seddah": 59, "beno\u00eet": 59, "sagot": 59, "facebook": [59, 61, 73, 74], "138gb": 59, "camembert_bas": 59, "camembertembeddingstestspec": 59, "co": [59, 81], "ubiquit": 59, "despit": 59, "most": [59, 62, 66, 81, 96, 110, 112, 113, 183], "concaten": [59, 128, 178, 183], "practic": [59, 113], "except": [59, 91, 96, 126, 170, 185], "investig": [59, 62, 70], "feasibl": 59, "monolingu": [59, 73, 74], "crawl": [59, 113], "prefer": [59, 78, 135], "wikipedia": [59, 83, 110], "surprisingli": [59, 70], "rel": [59, 61, 73, 86, 88, 95, 114, 205], "4gb": 59, "those": [59, 78, 97, 183, 206, 207], "larger": [59, 62, 67, 68, 110, 112, 113], "130": 59, "gb": 59, "reach": [59, 81, 110], "four": [59, 106, 125], "un": [59, 83], "08442357927560806": 59, "12863239645957947": 59, "03835778683423996": 59, "200479581952": 59, "048462312668561935": 59, "12637358903884888": 59, "27429091930389404": 59, "07516729831": 59, "02690504491329193": 59, "12104076147079468": 59, "012526623904705048": 59, "031543646007": 59, "05877285450696945": 59, "08773420006036758": 59, "06381352990865707": 59, "122621834278": 59, "chunkembed": [60, 133], "util": [60, 95, 105, 106, 117, 142, 149, 150, 152, 154, 157, 158, 162, 166], "wordembed": [60, 69, 72, 96, 133, 157], "chunker": [60, 79, 157], "ngramgener": [60, 91], "nerconvert": [60, 94, 95, 96, 164, 202], "poolingstrategi": [60, 69], "aggreg": [60, 69], "sum": [60, 64, 69, 184], "skipoov": 60, "discard": 60, "oov": 60, "ngram": [60, 91, 110, 113], "setn": [60, 91], "wordembeddingsmodel": [60, 69, 72, 78, 95, 96, 97, 133], "setpoolingstrategi": [60, 69], "55661": 60, "42829502": 60, "86661": 60, "409785": 60, "06316501": 60, "120775": 60, "0732005": 60, "40674996": 60, "22938299": 60, "50597": 60, "288195": 60, "555655": 60, "465145": 60, "140118": 60, "17417": 60, "095253006": 60, "0530925": 60, "218465": 60, "714395": 60, "79860497": 60, "0129999": 60, "139705": 60, "177955": 60, "1887775": 60, "45545": 60, "20030999": 60, "461557": 60, "07891501": 60, "strategi": [60, 69, 89, 105, 114], "setskipoov": 60, "debertaembed": 61, "decod": [61, 66, 110, 112, 113], "enhanc": [61, 109], "disentangl": 61, "pengcheng": 61, "xiaodong": 61, "liu": [61, 67, 68], "jianfeng": 61, "gao": 61, "weizhu": 61, "chen": [61, 67, 68, 184], "2018": [61, 67, 68, 184], "mask": [61, 73, 74, 75, 124], "half": [61, 81], "deberta_v3_bas": 61, "microsoft": [61, 112], "www": 61, "blog": 61, "surpass": 61, "human": [61, 81], "superglu": 61, "progress": [61, 106, 124], "significantli": [61, 64, 67, 68, 73, 74, 81], "novel": [61, 75, 81], "mechan": [61, 66], "respect": [61, 72, 95, 96, 184, 196], "weight": [61, 64, 81, 95, 97, 114, 182, 184], "among": 61, "matric": [61, 182, 184], "second": [61, 64, 89, 105, 119, 124, 184, 206], "predict": [61, 96, 110, 113, 164, 184, 202], "effici": [61, 63, 70, 71, 112, 178, 179, 182, 183, 205], "achiev": [61, 66, 67, 68, 73, 74, 75, 96, 110, 112, 113, 140, 184, 210], "mnli": 61, "9": [61, 73, 74, 91, 205, 210, 211], "90": 61, "91": 61, "88": 61, "made": [61, 70, 202], "publicli": [61, 73, 74], "distilbertembed": 62, "fast": [62, 109, 112, 140, 184, 210], "cheap": 62, "distil": 62, "40": [62, 97, 112], "uncas": 62, "60": [62, 105], "preserv": [62, 94, 124, 144], "over": [62, 73, 74, 75, 116, 126, 156, 164, 179, 202], "95": 62, "measur": [62, 67, 68, 164], "distilbert_base_cas": 62, "doesn": [62, 67, 184], "t": [62, 67, 84, 98, 106, 108, 126, 130, 134, 183, 184], "token_type_id": [62, 67], "don": [62, 67, 98], "indic": [62, 67, 124, 128], "belong": [62, 67], "separ": [62, 67, 89, 91, 105, 106, 116, 126, 128, 134, 156, 193, 204], "sep_token": [62, 67], "sep": 62, "position_id": 62, "ad": [62, 64, 114, 178], "though": [62, 81], "know": [62, 112, 142], "smaller": [62, 63, 71, 183], "cheaper": 62, "lighter": 62, "preval": 62, "oper": [62, 66, 114, 123, 178, 179, 183, 184, 205], "edg": [62, 78], "constrain": 62, "budget": 62, "purpos": [62, 106], "counterpart": 62, "prior": [62, 66, 114], "leverag": [62, 164, 202], "phase": [62, 184], "reduc": [62, 116, 117, 144, 182, 184], "retain": 62, "97": [62, 86, 88, 128], "capabl": [62, 75, 110], "being": [62, 96, 100, 112, 113, 184], "induct": 62, "bias": [62, 180, 182, 184], "tripl": [62, 78], "combin": [62, 66, 72, 81, 113, 114, 116, 183, 184], "cosin": 62, "distanc": [62, 114, 116, 117], "demonstr": [62, 66, 81, 110, 112], "devic": 62, "proof": 62, "concept": [62, 207], "experi": [62, 75, 164, 203], "studi": [62, 67, 68, 113], "1127224713563919": 62, "1982710212469101": 62, "5360898375511169": 62, "272536993026733": 62, "35534414649009705": 62, "13215228915214539": 62, "40981462597846985": 62, "14036104083061": 62, "328085333108902": 62, "06269335001707077": 62, "017595693469047546": 62, "024373905733": 62, "15617232024669647": 62, "2967822253704071": 62, "22324979305267334": 62, "04568954557180": 62, "45411425828933716": 62, "01173491682857275": 62, "190129816532135": 62, "1178255230188369": 62, "doc2vecapproach": 63, "word2vec": [63, 65, 79], "corpu": [63, 64, 71, 81, 84, 103, 113, 114, 196, 212], "algorithm": [63, 71, 81, 95, 109, 114, 116, 117], "construct": [63, 71, 126, 167, 179, 184, 209], "vocabulari": [63, 71, 110, 113, 114], "skip": [63, 71, 78, 114], "gram": [63, 71, 81, 91, 110, 113], "hierarch": [63, 71], "variabl": [63, 71, 180, 182, 184], "doc2vecmodel": 63, "vectors": [63, 71], "windows": [63, 71, 81], "window": [63, 66, 71, 81, 96, 114], "numpartit": [63, 71], "partit": [63, 71, 193], "mincount": [63, 71, 114], "must": [63, 71, 84, 85, 89, 90, 100, 108, 109, 116, 117, 131, 156, 157, 164, 179, 182, 183, 184, 193], "appear": [63, 71, 114], "ani": [63, 70, 71, 76, 81, 96, 110, 113, 133, 134, 183, 203, 206, 207, 212], "divid": [63, 71], "1000": [63, 71, 78, 95, 184], "stepsiz": [63, 71], "optim": [63, 67, 68, 71, 96, 106], "025": [63, 71], "maxit": [63, 71], "estim": [63, 71, 120, 136, 145, 153, 163, 206], "space": [63, 71, 72, 91, 144, 183, 184], "distribut": [63, 71, 181], "composition": [63, 71], "sherlockholm": [63, 71, 114, 212], "setvectors": [63, 71], "setwindows": [63, 71, 81], "setsteps": [63, 71], "initi": [63, 71, 114, 124, 142, 157, 178, 180, 182, 183, 184, 193, 194, 196, 197, 202], "setnumpartit": [63, 71], "setmaxit": [63, 71], "numiter": [63, 71], "equal": [63, 71, 184], "setse": [63, 71], "setmincount": [63, 71, 114], "doc2vec_gigaword_300": 63, "06222493574023247": [63, 71], "011579325422644615": [63, 71], "009919632226228714": [63, 71], "109361454844": [63, 71], "doc2vec_wiki": 63, "elmoembed": 64, "elmo": 64, "billion": [64, 110], "computation": [64, 67, 68, 75, 110, 112, 113], "expens": [64, 67, 68, 75, 108, 110, 112, 113, 116], "lookup": [64, 72, 75, 85, 116, 117], "acceler": [64, 75, 110, 112, 113, 157, 184], "setpoolinglay": 64, "word_emb": 64, "shape": [64, 182, 183, 184], "batch_siz": [64, 182, 183, 184], "max_length": 64, "lstm_outputs1": 64, "lstm": [64, 96, 182, 184], "lstm_outputs2": 64, "trainabl": [64, 184], "tensor": [64, 182, 183, 184], "poolinglay": 64, "contextu": [64, 114], "complex": [64, 70, 81, 116, 117, 179], "characterist": 64, "syntax": 64, "semant": [64, 70, 128], "vari": 64, "across": [64, 110], "linguist": 64, "polysemi": 64, "intern": [64, 99, 100, 126, 143, 147, 151, 157, 184], "bilm": 64, "exist": [64, 114, 133, 135, 164, 184], "six": [64, 116, 117], "textual": 64, "entail": 64, "expos": 64, "crucial": 64, "mix": [64, 146, 163], "semi": 64, "signal": [64, 184], "662458181381226e": 64, "2541114091873169": 64, "6275503039360046": 64, "5787073969841": 64, "19154725968837738": 64, "22998669743537903": 64, "2894386649131775": 64, "21524395048618": 64, "10400570929050446": 64, "12288510054349899": 64, "07056470215320587": 64, "246389418840": 64, "49932169914245605": 64, "12706467509269714": 64, "30969417095184326": 64, "2643227577209": 64, "8871506452560425": 64, "20039963722229004": 64, "0601330995559692": 64, "0348707810044": 64, "albert_embed": [65, 79], "bert_embed": [65, 79], "bert_sentence_embed": [65, 79], "camembert_embed": [65, 79], "chunk_embed": [65, 79], "deberta_embed": [65, 79], "distil_bert_embed": [65, 79], "doc2vec": [65, 79], "elmo_embed": [65, 79], "longformer_embed": [65, 79], "roberta_embed": [65, 79], "roberta_sentence_embed": [65, 79], "universal_sentence_encod": [65, 79], "xlm_roberta_embed": [65, 79], "xlm_roberta_sentence_embed": [65, 79], "xlnet_embed": [65, 79], "longformerembed": 66, "iz": 66, "beltagi": 66, "matthew": 66, "arman": 66, "cohan": 66, "checkpoint": 66, "mlm": 66, "096": 66, "longformer_base_4096": 66, "unabl": 66, "quadrat": 66, "linearli": 66, "easi": 66, "thousand": 66, "drop": [66, 119], "motiv": 66, "global": 66, "text8": 66, "enwik8": 66, "contrast": [66, 85, 113], "finetun": [66, 75], "varieti": [66, 73, 74, 211], "outperform": [66, 70, 73, 74, 75, 81, 110], "wikihop": 66, "triviaqa": 66, "led": [66, 67, 68, 81], "effect": [66, 105, 113, 179], "arxiv": [66, 180, 182, 183, 184], "summar": [66, 81, 110, 112, 113], "found": [66, 72, 81, 116, 123, 131, 209], "18792399764060974": [66, 67], "14591649174690247": [66, 67], "20547787845134735": [66, 67], "1468472778797": [66, 67], "22845706343650818": [66, 67], "18073144555091858": [66, 67], "09725798666477203": [66, 67], "0417917296290": [66, 67], "07037967443466187": [66, 67], "14801117777824402": [66, 67], "03603338822722435": [66, 67], "17893412709": [66, 67], "08734266459941864": [66, 67], "2486150562763214": [66, 67], "009067727252840996": [66, 67], "24408400058": [66, 67], "22409197688102722": [66, 67], "4312366545200348": [66, 67], "1401449590921402": [66, 67], "356410235166549": [66, 67], "robertaembed": [67, 73], "robustli": [67, 68], "approach": [67, 68, 75, 81, 93, 95, 96, 106, 108, 110, 113, 114, 116, 117, 145, 209], "yinhan": [67, 68], "myle": [67, 68, 73, 74], "ott": [67, 68, 73, 74], "naman": [67, 68, 73, 74], "goyal": [67, 68, 73, 74], "jingfei": [67, 68], "du": [67, 68, 83], "mandar": [67, 68], "joshi": [67, 68], "danqi": [67, 68], "omer": [67, 68], "levi": [67, 68], "mike": [67, 68], "lewi": [67, 68], "luke": [67, 68, 73, 74], "zettlemoy": [67, 68, 73, 74], "veselin": [67, 68, 73, 74], "stoyanov": [67, 68, 73, 74], "hyperparamet": [67, 68], "next": [67, 68, 81, 86, 88, 110, 113, 183], "mini": [67, 68], "roberta_bas": 67, "bpe": 67, "gpt": [67, 110], "scheme": [67, 180], "signific": [67, 68, 73, 74, 81, 84], "gain": [67, 68, 73, 74, 184], "care": [67, 68, 126], "comparison": [67, 68, 70, 119], "choic": [67, 68, 89], "impact": [67, 68], "replic": [67, 68], "carefulli": [67, 68], "undertrain": [67, 68], "exce": [67, 68], "highlight": [67, 68], "previous": [67, 68, 81], "overlook": [67, 68], "rais": [67, 68, 81, 91, 96, 164, 182, 183, 184], "report": [67, 68, 70, 164, 202], "robertasentenceembed": 68, "sent_roberta_bas": 68, "embeddingssent": 69, "22093398869037628": 69, "25130119919776917": 69, "41810303926467896": 69, "380883991718": 69, "high": [70, 73, 74, 112], "dimension": [70, 184], "cluster": [70, 157], "tfhub_us": 70, "loadsp": 70, "op": [70, 180, 181, 182], "lingual": [70, 73, 74, 81, 83, 112], "target": [70, 112, 126, 131, 140, 167], "accur": [70, 109, 116], "divers": [70, 110, 113, 203], "trade": [70, 73, 74, 183], "baselin": [70, 110, 184], "do": [70, 81, 94, 119, 126, 130, 140, 178, 183, 202, 206, 210], "tend": 70, "With": [70, 75, 81], "observ": 70, "minim": [70, 112, 183], "encourag": 70, "weat": 70, "detect": [70, 82, 83, 104, 105, 106], "bia": [70, 182, 184], "freeli": 70, "04616805538535118": 70, "022307956591248512": 70, "044395286589860916": 70, "0016493503": 70, "setloadsp": 70, "word2vecapproach": 71, "word2vecmodel": 71, "word2vec_gigaword_300": 71, "word2vec_wiki": 71, "custom": [72, 95, 96, 105, 106, 126, 164], "dictionari": [72, 81, 84, 89, 95, 97, 98, 108, 116, 117, 164], "setstoragepath": [72, 85], "line": [72, 76, 85, 90, 106, 108, 167, 196], "delimit": [72, 76, 78, 84, 89, 91, 95, 98, 108, 124, 143, 193, 196], "39658191506190343": 72, "630968081620067": 72, "5393722253731201": 72, "8428180123359783": 72, "were": [72, 96, 164, 202], "7535235923631415": 72, "9699218875629833": 72, "10397182122983872": 72, "11833962569383116": 72, "stress": 72, "0492683418305907": 72, "9415954572751959": 72, "47624463167525755": 72, "16790967216778263": 72, "induc": 72, "1535748762292387": 72, "33498936903209897": 72, "9235178224122094": 72, "1158772920395934": 72, "zero": [72, 110, 182, 183], "withcoveragecolumn": 72, "overallcoverag": 72, "writebuffers": 72, "dump": 72, "disk": [72, 206, 207], "storag": [72, 76, 85, 150, 157], "10000": 72, "readcaches": 72, "cach": 72, "higher": [72, 81, 109, 110, 113], "random_embeddings_dim4": 72, "abov": [72, 78, 182, 196], "setstorageref": 72, "glove_4d": 72, "setdimens": [72, 151], "patient": 72, "diagnos": 72, "diabet": 72, "9439099431037903": 72, "4707513153553009": 72, "806300163269043": 72, "16176554560661316": 72, "7966810464859009": 72, "5551124811172485": 72, "8861005902290344": 72, "28284206986427307": 72, "025029370561242104": 72, "35177749395370483": 72, "052506182342767715": 72, "1887107789516449": 72, "08617766946554184": 72, "8399239182472229": 72, "5395117998123169": 72, "7864698767662048": 72, "6599600911140442": 72, "16109347343444824": 72, "6041093468666077": 72, "8913561105728149": 72, "5955275893211365": 72, "01899011991918087": 72, "4397728443145752": 72, "8911281824111938": 72, "9840458631515503": 72, "7599489092826843": 72, "9417727589607239": 72, "8624503016471863": 72, "setwritebuffers": 72, "setreadcaches": 72, "glove_100d": [72, 96], "There": [72, 76, 78, 123, 184, 204, 206, 207, 212], "conveni": 72, "coverag": [72, 149], "add": [72, 86, 88, 105, 110, 113, 114, 126, 182, 184, 206], "stat": 72, "field": [72, 76, 90, 184], "whole": [72, 167, 178], "consid": [72, 78, 81, 114, 116, 117, 119, 123], "570580005645752": 72, "44183000922203064": 72, "7010200023651123": 72, "417129993438720": 72, "542639970779419": 72, "4147599935531616": 72, "0321999788284302": 72, "4024400115013122": 72, "2708599865436554": 72, "04400600120425224": 72, "020260000601410866": 72, "17395000159": 72, "6191999912261963": 72, "14650000631809235": 72, "08592499792575836": 72, "2629800140857": 72, "3397899866104126": 72, "20940999686717987": 72, "46347999572753906": 72, "6479200124740": 72, "embeddings_col": 72, "coverageresult": 72, "coverateresult": 72, "wordsoverallcoverag": 72, "resultdf": 72, "percentag": [72, 114, 128], "output_col": 72, "wordscoverag": 72, "cov_embed": 72, "loadstorag": [72, 85], "storage_ref": [72, 85], "xlmrobertaembed": 73, "unsupervis": [73, 74, 75, 81, 110], "cross": [73, 74, 97], "alexi": [73, 74], "conneau": [73, 74], "kartikai": [73, 74], "khandelw": [73, 74], "vishrav": [73, 74], "chaudhari": [73, 74], "guillaum": [73, 74], "wenzek": [73, 74], "francisco": [73, 74, 81], "guzman": 73, "edouard": [73, 74], "grave": [73, 74, 184], "5tb": [73, 74], "filter": [73, 74, 81, 94, 95, 110, 112, 113, 119, 156], "commoncrawl": [73, 74], "xlm_roberta_bas": 73, "xx": [73, 74, 83, 112], "multilingu": [73, 74, 128], "doe": [73, 81, 94, 140, 142, 183, 184, 207, 210, 211], "abl": [73, 113, 164, 205], "determin": [73, 184], "correct": [73, 114, 116, 117, 128], "hundr": [73, 74], "terabyt": [73, 74], "dub": [73, 74], "r": [73, 74, 81, 180, 184], "mbert": [73, 74], "xnli": [73, 74], "mlqa": [73, 74], "particularli": [73, 74], "low": [73, 74, 114], "swahili": [73, 74], "urdu": [73, 74], "previou": [73, 74, 110, 184, 206], "factor": [73, 74, 75, 113, 114, 184], "capac": [73, 74, 110, 184], "dilut": [73, 74], "sacrif": [73, 74], "ri": [73, 74], "competit": [73, 74, 81], "strong": [73, 74], "05969233065843582": 73, "030789051204919815": 73, "04443822056055069": 73, "09564960747": 73, "038839809596538544": 73, "011712731793522835": 73, "019954433664679527": 73, "0667808502": 73, "03952755779027939": 73, "03455188870429993": 73, "019103847444057465": 73, "04311436787": 73, "09579929709434509": 73, "02494969218969345": 73, "014753809198737144": 73, "10259044915": 73, "004710011184215546": 73, "022148698568344116": 73, "011723337695002556": 73, "013356896": 73, "xlmrobertasentenceembed": 74, "guzm\u00e3": 74, "sent_xlm_roberta_bas": 74, "xlnetembed": 75, "autoregress": 75, "permut": 75, "addition": [75, 96, 103, 132, 141, 167], "emploi": 75, "xl": 75, "backbon": 75, "exhibit": 75, "involv": [75, 106], "sota": 75, "variou": [75, 200], "rank": [75, 114], "xlnet_large_cas": 75, "xlnet_base_cas": 75, "full": [75, 206], "zihangdai": 75, "denois": 75, "autoencod": 75, "corrupt": 75, "neglect": 75, "suffer": 75, "discrep": 75, "pro": 75, "con": 75, "enabl": [75, 76, 96, 116, 157, 181, 184], "maxim": [75, 114], "likelihood": 75, "overcom": 75, "formul": 75, "furthermor": 75, "integr": [75, 81, 112, 164, 184, 202, 204], "idea": [75, 184], "margin": 75, "6287205219268799": 75, "4865287244319916": 75, "186111718416214": 75, "234187275171279": 75, "1967450380325317": 75, "2746637463569641": 75, "9481253027915955": 75, "3431355059146881": 75, "0777631998062134": 75, "092679977416992": 75, "5331977605819702": 75, "11190271377563": 75, "8349916934967041": 75, "45627787709236145": 75, "7890847325325012": 75, "028069257736": 75, "134845569729805": 75, "11672890186309814": 75, "4945235550403595": 75, "66587203741073": 75, "entityrul": 76, "entityrulerapproach": 76, "exact": [76, 85, 90], "definit": [76, 193], "json": [76, 143, 164], "jsonl": 76, "setpatternsresourc": 76, "might": [76, 96, 128, 211], "setenablepatternregex": 76, "rule": [76, 89, 108, 123, 126], "person": [76, 194], "w": [76, 79, 89, 95, 98, 123, 126, 157, 184], "locat": [76, 105, 130, 157, 167, 206], "winterfel": 76, "jon": 76, "snow": [76, 97, 114], "stark": 76, "eddard": 76, "patternsresourc": 76, "enablepatternregex": 76, "usestorag": 76, "rocksdb": 76, "lord": 76, "29": [76, 97, 196], "38": 76, "setusestorag": 76, "setsentencematch": 76, "setalphabetresourc": 76, "alphabet": [76, 98], "plain": [76, 212], "entityrulermodel": 76, "entity_rul": [77, 79], "graphextract": [78, 135], "graph": [78, 96, 112, 120, 135, 170, 185], "nerdlmodel": [78, 94, 95, 96, 97, 164, 202], "store": [78, 99, 100, 143, 147, 151, 162, 167, 184, 203], "node": [78, 184], "relev": [78, 81], "taken": 78, "implicitli": 78, "setmergeent": 78, "automat": [78, 81, 112, 116, 205, 206], "setdependencyparsermodel": 78, "settypeddependencyparsermodel": 78, "setrelationshiptyp": 78, "public": [78, 206], "relationshiptyp": 78, "pair": [78, 164, 182, 184], "entitytyp": 78, "explodeent": 78, "roottoken": 78, "travers": 78, "along": 78, "maxsentences": 78, "minsentences": 78, "below": [78, 211], "mergeent": 78, "merg": [78, 85, 90], "neighbor": 78, "includeedg": 78, "symbol": [78, 114, 128], "posmodel": 78, "coordin": [78, 105], "remoteloc": 78, "graphfinish": [78, 135], "rdf": [78, 135], "nertagg": [78, 95, 96, 97, 170, 185], "morn": [78, 135], "flight": [78, 135], "denver": [78, 135], "18": [78, 86, 88, 91, 94, 97, 140, 156, 167, 205], "path1": 78, "setentitytyp": 78, "setexplodeent": 78, "setroottoken": 78, "setmaxsentences": 78, "setminsentences": 78, "setmergeentitiesiobformat": 78, "iob": [78, 94, 95, 96], "iob2": [78, 94], "setincludeedg": 78, "setdelimit": [78, 89, 91], "setposmodel": 78, "classifier_dl": [79, 157], "er": [79, 157], "keyword_extract": [79, 157], "yake_keyword_extract": [79, 80], "ld_dl": [79, 157], "language_detector_dl": [79, 82], "matcher": [79, 157], "big_text_match": [79, 87], "date_match": [79, 87], "multi_date_match": [79, 87], "regex_match": [79, 87], "text_match": [79, 87], "ner_approach": [79, 92], "ner_convert": [79, 92], "ner_crf": [79, 92], "ner_dl": [79, 92, 170, 185], "ner_overwrit": [79, 92], "param": [79, 95, 146, 147, 151, 157, 162, 163, 170, 185], "sentence_detector_dl": [79, 104, 112], "sentiment_detector": [79, 107], "vivekn_senti": [79, 107], "seq2seq": [79, 157], "gpt2_transform": [79, 111], "marian_transform": [79, 111], "t5_transform": [79, 111], "spell_check": [79, 157], "context_spell_check": [79, 115], "norvig_sweet": [79, 115], "symmetric_delet": [79, 115], "chunk_token": [79, 122], "recursive_token": [79, 122], "regex_token": [79, 122], "token2_chunk": [79, 122], "word_segment": [79, 127], "document_norm": [79, 157], "graph_extract": [79, 157], "lemmat": [79, 108, 119, 142, 144, 157], "n_gram_gener": [79, 157], "stemmer": [79, 119, 157], "stop_words_clean": [79, 157], "yakekeywordextract": 81, "yake": 81, "independ": [81, 116, 117, 123, 184], "domain": [81, 110], "individu": [81, 114], "organ": [81, 112], "grow": 81, "autom": 81, "adequ": 81, "manner": 81, "emerg": [81, 113], "tool": 81, "system": [81, 110, 184], "nor": 81, "thesauri": 81, "neither": 81, "corpora": [81, 85], "upon": 81, "thu": 81, "written": [81, 112], "benefici": 81, "plethora": 81, "situat": [81, 106], "access": 81, "restrict": 81, "therefor": [81, 181, 184, 210], "sent": 81, "boundari": [81, 105, 106, 109, 126], "detector": [81, 86, 108], "section": [81, 132, 141, 202, 204, 210], "tweakabl": 81, "greater": 81, "upper": 81, "bound": [81, 105, 106, 109], "minngram": 81, "maxngram": 81, "occurr": 81, "nkeyword": 81, "stopword": [81, 97, 119], "stop": [81, 95, 119], "campo": 81, "mangaravit": 81, "pasquali": 81, "jatowt": 81, "jorg": 81, "nune": 81, "2020": [81, 86, 88, 106], "scienc": [81, 203], "journal": 81, "elsevi": 81, "vol": 81, "509": 81, "pp": 81, "257": 81, "289": 81, "collect": [81, 164, 202], "turn": [81, 144, 184, 206], "come": 81, "term": [81, 182, 184], "fly": 81, "demand": 81, "abil": [81, 110], "within": [81, 103, 109, 110, 126, 131], "resort": 81, "alwai": [81, 113], "solut": 81, "articl": [81, 114], "rest": [81, 94], "merit": 81, "ten": 81, "experiment": 81, "carri": 81, "twenti": 81, "setcontextchar": [81, 126], "setminngram": 81, "setnkeyword": 81, "acquir": 81, "kaggl": 81, "platform": [81, 164, 204], "host": 81, "transact": 81, "somewhat": 81, "vagu": 81, "cloud": 81, "confer": 81, "week": [81, 86, 88, 121], "announc": [81, 97], "earli": 81, "tomorrow": [81, 86, 88], "phone": 81, "founder": 81, "ceo": 81, "anthoni": 81, "goldbloom": 81, "declin": 81, "deni": 81, "acquisit": 81, "happen": 81, "rumor": 81, "million": [81, 97, 110], "scientist": 81, "ben": 81, "hamner": 81, "2010": 81, "servic": [81, 112], "got": 81, "even": [81, 113], "few": [81, 126, 196, 212], "competitor": 81, "drivendata": 81, "topcod": 81, "hackerrank": 81, "stai": 81, "ahead": 81, "nich": 81, "home": [81, 157], "bui": [81, 194], "commun": 81, "mindshar": 81, "too": [81, 108, 205], "plenti": 81, "bit": [81, 106, 183, 211], "histori": [81, 106, 114], "earlier": 81, "month": [81, 86, 88, 196, 212], "team": [81, 112, 164, 202], "around": 81, "youtub": 81, "That": [81, 123, 164, 202, 207], "had": 81, "technologi": 81, "did": 81, "interest": 81, "kernel": [81, 180], "On": [81, 110, 112], "analyz": [81, 109], "compani": [81, 112], "script": 81, "centric": 81, "job": [81, 131], "board": [81, 103, 196], "unclear": 81, "accord": [81, 114, 193], "crunchbas": 81, "pitchbook": 81, "launch": 81, "investor": 81, "ventur": 81, "sv": 81, "angel": 81, "levchin": 81, "naravik": 81, "chie": 81, "economist": 81, "hal": 81, "varian": 81, "khosla": 81, "yuri": 81, "milner": 81, "resulttupl": 81, "ascend": 81, "orderbi": 81, "32051516486864573": 81, "37786450577630676": 81, "39922830978423146": 81, "40224744669493756": 81, "41584827825302534": 81, "setmaxngram": 81, "setstopword": [81, 97, 119], "getstopword": 81, "loaddefaultstopword": [81, 119], "danish": [81, 119], "dutch": [81, 119], "finnish": [81, 119], "german": [81, 119, 193, 212], "hungarian": [81, 119], "italian": [81, 114, 119], "norwegian": [81, 119], "portugues": [81, 119], "russian": [81, 119], "spanish": [81, 119], "swedish": [81, 119], "turkish": [81, 119], "languagedetectordl": 83, "ld": 83, "identif": 83, "rnn": [83, 171, 178, 179, 181, 182, 184], "tatoeba": 83, "140": 83, "wiki": 83, "languagedetector": 83, "ld_wiki_tatoeba_cnn_21": 83, "open": [83, 126, 131, 132, 133, 141, 144, 203], "advanc": [83, 131, 144], "scala": [83, 145, 146, 153, 159, 163], "program": 83, "biblioth\u00e8qu": 83, "traitement": 83, "pour": 83, "le": [83, 112, 184], "avanc\u00e9": 83, "langag": 83, "naturel": 83, "programm": 83, "ist": 83, "ein": 83, "textverarbeitungsbibliothek": 83, "f\u00fcr": 83, "fortgeschritten": 83, "nat\u00fcrlich": 83, "sprachverarbeitung": 83, "die": 83, "programmiersprachen": 83, "und": 83, "lemma": [84, 108, 140, 167, 194, 207, 210, 211], "predefin": [84, 85, 89, 90, 108], "setdictionari": [84, 108, 116, 117], "lemmatizermodel": 84, "lemmas_smal": [84, 108], "setformcol": 84, "correspend": 84, "formcol": [84, 194], "setlemmacol": 84, "fromlemma": 84, "key_delimit": 84, "value_delimit": 84, "lemma_antbnc": 84, "bigtextmatch": [85, 90], "textmatch": [85, 90, 121], "externalresourc": [85, 90, 155], "mergeoverlap": [85, 90], "overlap": [85, 90], "tokenizermodel": [85, 126], "trie": 85, "dolor": [85, 90], "magna": [85, 90], "aliqua": [85, 90], "sit": [85, 90], "laborum": [85, 90], "hello": [85, 90, 121], "entityextractor": [85, 90, 121], "extractor": [85, 90, 121], "53": [85, 90], "59": [85, 86, 88, 90], "setent": [85, 90, 93, 121], "setmergeoverlap": [85, 90], "settoken": 85, "tokenizer_model": 85, "bigtextmatchermodel": 85, "btm": 85, "textmatchermodel": [85, 90], "searchtri": 85, "datematch": 86, "datematcherutil": 86, "setinputformat": [86, 143], "setoutputformat": [86, 88], "desir": [86, 88], "yyyi": [86, 88], "mm": [86, 88], "dd": [86, 88, 89], "Not": [86, 96, 142], "setreadmonthfirst": 86, "juli": 86, "5th": 86, "2015": [86, 184], "07": 86, "05": 86, "setdefaultdaywhenmiss": 86, "dai": [86, 88, 114], "miss": [86, 88, 131], "setanchordateyear": [86, 88], "anchor": [86, 88], "year": [86, 88, 110, 121, 196], "2021": [86, 88], "setanchordatemonth": [86, 88], "januari": [86, 88], "setanchordatedai": [86, 88], "multidatematch": [86, 88], "1978": [86, 88], "01": [86, 88, 89], "28": [86, 88, 94, 140, 156, 167, 205], "1984": [86, 88], "04": [86, 88], "02": [86, 88], "1980": [86, 88], "79": [86, 88], "31st": [86, 88], "april": [86, 88], "2008": [86, 88], "fri": [86, 88], "nov": [86, 88, 196], "1997": [86, 88], "jan": [86, 88], "sun": [86, 88], "1st": [86, 88], "thursdai": [86, 88], "wednesdai": [86, 88], "todai": [86, 88], "yesterdai": [86, 88], "0600h": [86, 88], "06": [86, 88], "00": [86, 88], "hour": [86, 88], "6pm": [86, 88], "23": [86, 88, 89, 97, 103, 196, 197, 212], "1988": [86, 88], "31": [86, 88, 89, 97, 103, 196], "dateformat": [86, 88], "readmonthfirst": [86, 88], "defaultdaywhenmiss": [86, 88], "anchordateyear": [86, 88], "anchordatemonth": [86, 88], "anchordatedai": [86, 88], "15": 86, "saw": 88, "him": 88, "me": 88, "visit": 88, "57": [88, 97], "65": [88, 97], "regexmatch": 89, "d": [89, 98, 126, 182, 184, 204], "1970": 89, "setrul": 89, "setexternalrul": 89, "match_first": 89, "match_al": 89, "match_complet": 89, "externalrul": 89, "ceremoni": 89, "setstrategi": 89, "71": 89, "short_dat": 89, "regexmatchermodel": 89, "regardless": 90, "entityvalu": 90, "buildfromtoken": 90, "27": [90, 103, 105, 196], "48": 90, "setentityvalu": 90, "setbuildfromtoken": 90, "null": 91, "empti": [91, 131, 183], "enablecumul": 91, "actual": [91, 130, 134, 144, 183], "join": [91, 103, 143, 196], "19": [91, 196], "setenablecumul": 91, "nerapproach": 93, "recogn": [93, 94, 95, 96, 97], "setminepoch": [93, 95], "setrandomse": [93, 96, 99, 170, 185], "getlabelcolumn": [93, 120], "friendli": [94, 112], "whitelist": [94, 123], "setwhitelist": [94, 123], "outsid": 94, "prefix": [94, 123, 126, 164, 202], "preserveposit": [94, 124, 144], "continu": [94, 110, 135, 184, 202], "org": [94, 95, 96, 97, 140, 156, 157, 167, 180, 182, 183, 184, 193, 203, 212], "14": [94, 103, 125, 140, 156, 167, 196], "ekeu": [94, 95, 96, 140, 156, 167], "26": [94, 140, 156, 167], "36": [94, 103, 140, 156, 167, 196], "baghdad": [94, 95, 96, 140, 156, 167], "37": [94, 140, 156, 167], "setpreserveposit": [94, 124, 144], "nercrf": 95, "nercrfapproach": [95, 96], "nercrfmodel": [95, 96], "crf": [95, 96], "2003": [95, 96, 193, 212], "exclud": [95, 96], "setexternalfeatur": 95, "minepoch": [95, 96], "l2": 95, "c0": 95, "decai": [95, 96], "gradient": 95, "2250000": 95, "lossep": 95, "ep": 95, "minw": 95, "includeconfid": [95, 96], "confid": [95, 96], "externalfeatur": 95, "nerdlapproach": [95, 96, 185, 193, 212], "trainingdata": [95, 96, 106, 116, 117, 193], "readdataset": [95, 96, 103, 128, 193, 194, 196, 197, 212], "conll2003": [95, 96, 193, 212], "eng": [95, 96, 193, 212], "setl2": 95, "l2valu": 95, "setc0": 95, "c0valu": 95, "setlossep": 95, "setminw": 95, "setincludeconfid": [95, 96, 170, 185], "verbosevalu": 95, "prerequisit": [95, 96, 97, 206], "nerdl": 96, "char": [96, 98, 106], "bilstm": 96, "tagger": [96, 196, 212], "50": [96, 97, 103, 110, 184], "real": [96, 157, 164, 184, 202], "rage": 96, "graphfold": 96, "usecontrib": 96, "contrib": [96, 179, 181], "cell": [96, 143, 178, 179, 180, 182, 183, 184], "slightli": [96, 106], "includeallconfidencescor": 96, "enablememoryoptim": 96, "slow": 96, "down": [96, 206, 207], "usebestmodel": 96, "bestmodelmetr": 96, "check": [96, 105, 114, 115, 116, 117, 140, 144, 167], "micro": 96, "macro": 96, "setgraphfold": [96, 120, 170, 185], "setusecontrib": 96, "setpo": 96, "setincludeallconfidencescor": 96, "setenablememoryoptim": [96, 170, 185], "setusebestmodel": 96, "setbestmodelmetr": 96, "nermodel": 96, "neroverwrit": 97, "specifi": [97, 106, 182, 184, 193, 194], "setnewresult": 97, "nerword": 97, "overwritten": 97, "newnerent": 97, "lab": 97, "42": [97, 103], "45": [97, 103, 196], "47": [97, 196], "66": 97, "ner_overwritten": 97, "setnerword": 97, "setnewnerent": 97, "cardin": 97, "setreplaceent": 97, "rw": 97, "stem": [98, 118, 140, 167, 210, 211], "henc": [98, 184], "pl": 98, "slangdictionari": 98, "slang": 98, "minlength": [98, 105, 106, 124, 126], "maxlength": [98, 105, 106, 124, 126], "setcleanuppattern": 98, "punctuat": [98, 105], "alphanumer": 98, "letter": [98, 110, 114, 196, 212], "za": 98, "z": [98, 126], "brother": 98, "dont": [98, 109], "setslangdictionari": 98, "setminlength": [98, 105, 106, 124, 126], "setmaxlength": [98, 105, 106, 124, 126], "normalizermodel": 98, "classifierencod": 99, "attach": [99, 100, 147, 151, 162, 164], "evaluationdlparam": 100, "setevaluationlogextend": [100, 170, 185], "setenableoutputlog": [100, 164, 170, 185, 202], "setoutputlogspath": [100, 106, 164, 170, 185, 202], "assum": 100, "perceptronapproach": [103, 196, 212], "datasetpath": 103, "pierr": [103, 196], "vinken": [103, 196], "34": [103, 196], "md": [103, 196], "vb": [103, 193, 196, 212], "41": [103, 105, 196], "43": [103, 105, 196], "dt": [103, 196, 197, 212], "49": [103, 196], "poscol": [103, 128, 193], "niter": [103, 128], "anc": [103, 196, 212], "trainingperceptrondf": 103, "trainedpo": 103, "setposcolumn": [103, 128], "cd": [103, 193, 196], "setiter": 103, "getniter": [103, 128], "pos_anc": 103, "25": [103, 105, 196], "33": 103, "sentencedetectorparam": 105, "ii": 105, "abbrevi": 105, "period": 105, "geo": 105, "1026": 105, "253": 105, "553": 105, "ellipsi": 105, "quotat": 105, "mark": [105, 106, 128, 184], "exclam": 105, "breaker": 105, "explicit": [105, 110], "pragmaticcontentformatt": 105, "custombound": [105, 106], "setcustombound": [105, 106], "usecustomboundsonli": [105, 106], "explodesent": [105, 106, 193, 194], "useabbrevi": 105, "explicitli": [105, 106, 119, 156, 206], "customboundsstrategi": 105, "prepend": [105, 131], "break": 105, "append": [105, 114, 206], "parallel": [105, 106, 140, 183, 193, 210], "splitlength": [105, 106], "forcibli": [105, 106], "split": [105, 106, 121, 123, 124, 128, 178, 184], "99999": [105, 106, 126], "detectlist": 105, "nhow": 105, "setcustomboundsstrategi": 105, "setuseabbrevi": 105, "setdetectlist": 105, "setusecustomboundsonli": [105, 106], "setexplodesent": [105, 106], "setsplitlength": [105, 106], "sentencedetectordl": 106, "sentencedetectordlapproach": 106, "futur": [106, 113], "setmodel": 106, "sentencedetectordlmodel": [106, 112], "modelarchitectur": 106, "impossiblepenultim": 106, "imposs": [106, 128], "penultim": 106, "epochsnumb": 106, "eo": 106, "stefan": 106, "schweter": 106, "sajawel": 106, "ahm": 106, "littl": [106, 211], "cover": [106, 113, 128], "broken": 106, "moder": 106, "lack": 106, "easier": [106, 134, 208, 212], "polit": 106, "successor": 106, "great": 106, "respons": 106, "heritag": 106, "bequeath": 106, "nelson": 106, "mandela": 106, "setepochsnumb": 106, "model_architectur": 106, "validation_split": 106, "epochs_numb": 106, "output_logs_path": 106, "setimpossiblepenultim": 106, "impossible_penultim": 106, "sentencedl": 106, "sentencesdl": 106, "helen": 106, "total": [106, 128], "peopl": 106, "sentimentdetector": 108, "By": [108, 113, 119, 124, 133, 157, 164, 202], "viveknsentimentapproach": [108, 109], "cool": 108, "superb": 108, "uninspir": 108, "sentimentscor": 108, "staff": 108, "restaur": 108, "nice": [108, 164, 202], "avoid": [108, 183, 184], "entri": [108, 132, 141], "sttr": 108, "sentimentdetectormodel": 108, "sda": [108, 109], "pragmat": 108, "viveknsenti": 109, "analys": 109, "inspir": [109, 116, 117, 160], "vivek": 109, "narayanan": 109, "give": 109, "transit": [109, 114], "sentimentcol": 109, "prunecorpu": 109, "unfrequ": 109, "scenario": 109, "naiv": 109, "bay": 109, "vivekn": 109, "setsentimentcol": 109, "train_senti": 109, "result_senti": 109, "finish": [109, 133, 135, 139, 142, 157], "final_senti": 109, "cast": [109, 129], "horribl": 109, "never": [109, 206], "go": [109, 206], "again": [109, 123], "anyon": 109, "protagonist": 109, "music": 109, "setprunecorpu": 109, "frequenc": [109, 114, 116, 117, 128, 184], "viveknsentimentmodel": 109, "sentiment_vivekn": 109, "gpt2transform": 110, "gpt2": 110, "openai": 110, "caus": [110, 126], "goal": 110, "occur": [110, 113], "direct": [110, 183, 184], "10x": 110, "broad": 110, "synthet": 110, "sampl": [110, 113], "unpreced": 110, "qualiti": 110, "prime": 110, "lengthi": 110, "translat": [110, 112, 113], "far": [110, 130, 134], "suggest": 110, "benefit": 110, "suffici": 110, "minoutputlength": [110, 113], "maxoutputlength": [110, 112, 113], "dosampl": [110, 113], "greedi": [110, 113], "temperatur": [110, 113], "topk": [110, 113], "highest": [110, 113, 116], "k": [110, 113, 133, 184], "topp": [110, 113], "cumul": [110, 113], "kept": [110, 113], "repetitionpenalti": [110, 113], "repetit": [110, 113], "penalti": [110, 113, 183], "norepeatngrams": [110, 113], "onc": [110, 113, 179], "ignoretokenid": [110, 113], "especi": [110, 112, 113], "multitask": 110, "learner": 110, "typic": [110, 183], "taskspecif": 110, "webpag": [110, 203], "webtext": 110, "plu": 110, "coqa": 110, "exceed": 110, "127": 110, "shot": 110, "fashion": 110, "5b": 110, "still": [110, 164], "underfit": 110, "reflect": 110, "paragraph": 110, "promis": 110, "toward": 110, "setmaxoutputlength": [110, 112, 113], "leonardo": 110, "man": 110, "1776": 110, "came": 110, "unit": [110, 120, 182, 184], "kingdom": 110, "settask": [110, 113], "setignoretokenid": [110, 112, 113], "setminoutputlength": [110, 113], "setdosampl": [110, 113], "settemperatur": [110, 113], "settopk": [110, 113], "settopp": [110, 113], "setrepetitionpenalti": [110, 113], "ctrl": [110, 113], "control": [110, 112, 113, 114, 184], "setnorepeatngrams": [110, 113], "mariantransform": 112, "marian": 112, "free": [112, 184], "mainli": 112, "academ": 112, "notabl": 112, "edinburgh": 112, "past": 112, "adam": 112, "mickiewicz": 112, "pozna\u0144": 112, "commerci": 112, "contributor": 112, "mariannmt": 112, "engin": [112, 121], "behind": 112, "deploi": [112, 203], "opus_mt_en_fr": 112, "langid": 112, "maxinputlength": 112, "differenti": 112, "dynam": [112, 183, 184], "toolkit": 112, "setmaxinputlength": 112, "capit": [112, 114], "franc": 112, "quell": 112, "capital": 112, "devrait": 112, "savoir": 112, "fran\u00e7ai": 112, "setlangid": 112, "t5transform": 113, "t5": 113, "reconsid": 113, "unifi": 113, "hyper": 113, "t5_small": 113, "explor": 113, "rich": 113, "rise": 113, "methodologi": 113, "landscap": 113, "systemat": 113, "dozen": 113, "insight": 113, "coloss": 113, "facilit": 113, "200": [113, 170, 184, 185], "contextspellcheck": 114, "contextspellcheckerapproach": [114, 116, 117], "noisi": 114, "spell": [114, 115, 116, 117, 140, 144, 209, 210, 211], "candid": [114, 116, 117, 126], "contextspellcheckermodel": [114, 116, 117], "potenti": 114, "error": [114, 184], "three": [114, 125], "thing": [114, 130, 134], "surround": [114, 143], "edit": [114, 116, 117], "subword": 114, "checker": [114, 116, 117, 209], "languagemodelclass": 114, "lm": 114, "wordmaxdist": 114, "maxcandid": 114, "casestrategi": 114, "try": [114, 130], "uppercas": 114, "errorthreshold": 114, "perplex": 114, "nlm": 114, "initialr": 114, "finalr": 114, "validationfract": 114, "datapoint": 114, "min": 114, "vocab": 114, "compoundcount": 114, "compound": 114, "classcount": 114, "special": [114, 158, 207], "tradeoff": 114, "weighteddistpath": 114, "levenshtein": [114, 116, 117], "maxwindowlen": 114, "rememb": 114, "norvigsweetingapproach": [114, 116, 117, 212], "symmetricdeleteapproach": [114, 116, 117, 212], "depth": [114, 183, 184, 209], "explan": [114, 209], "awar": 114, "sherlock": 114, "holm": 114, "spellcheck": [114, 116, 117], "setwordmaxdist": 114, "setepoch": 114, "setlanguagemodelclass": 114, "1650": 114, "addvocabclass": 114, "_name_": 114, "extra": [114, 116, 206], "dist": 114, "setmaxcandid": 114, "setcasestrategi": 114, "seterrorthreshold": 114, "setinitialr": 114, "setfinalr": 114, "setvalidationfract": 114, "fraction": 114, "setcompoundcount": 114, "setclasscount": 114, "settradeoff": 114, "alpha": 114, "setweighteddistpath": 114, "setmaxwindowlen": 114, "userdist": 114, "addregexclass": 114, "spellcheck_dl": 114, "gamma": 114, "influenc": 114, "decis": 114, "correctsymbol": 114, "comparelowcas": 114, "norvigsweetingmodel": [114, 116, 117], "symmetricdeletemodel": [114, 116, 117], "doc": [114, 197, 212], "cold": 114, "dreari": 114, "countri": 114, "white": 114, "smow": 114, "setweight": 114, "setgamma": 114, "getwordclass": 114, "updateregexclass": 114, "updat": [114, 184], "updatevocabclass": 114, "setcorrectsymbol": 114, "setcomparelowcas": 114, "norvigsweet": 116, "norvig": 116, "bayesian": 116, "tokenpattern": 116, "sensit": [116, 119, 126], "doublevari": 116, "search": [116, 184], "shortcircuit": 116, "frequencyprior": 116, "ham": 116, "intersect": [116, 184], "prioriti": [116, 126], "wordsizeignor": 116, "dupslimit": 116, "duplic": 116, "reductlimit": 116, "attempt": 116, "vowelswaplimit": 116, "vowel": 116, "swap": [116, 183], "corrector": 116, "gummi": [116, 117], "gummic": [116, 117], "gummier": [116, 117], "gummiest": [116, 117], "gummifer": [116, 117], "basi": [116, 117], "token_pattern": [116, 117], "setdoublevari": 116, "setshortcircuit": 116, "setfrequencyprior": 116, "symmetr": [116, 117], "delet": [116, 117, 206], "damerau": [116, 117], "magnitud": [116, 117], "transpos": [116, 117, 183], "insert": [116, 117, 206], "spellcheck_norvig": 116, "symspel": [116, 117], "somtim": 116, "wrrite": [116, 117], "wordz": [116, 117], "erong": [116, 117], "sometim": [116, 117, 206], "wrong": [116, 117], "symmetricdelet": 117, "deriv": 117, "teach": 117, "maxeditdist": 117, "frequencythreshold": [117, 128], "deletesthreshold": 117, "patttern": 117, "setmaxeditdist": 117, "setfrequencythreshold": [117, 128], "setdeletesthreshold": 117, "spellcheck_sd": 117, "spmetim": 117, "hard": 118, "employ": 118, "stopwordsclean": [119, 133, 144], "mllib": [119, 203], "stopwordsremov": 119, "cleantoken": [119, 133, 144], "stopwords_en": 119, "jvm": 119, "forth": 119, "setlocal": 119, "tfnerdlgraphbuildermodel": 120, "tfnerdlgraphbuild": 120, "sethiddenunitsnumb": 120, "assertiondlapproach": 120, "medicalnerapproach": [120, 170, 185], "gethiddenunitsnumb": 120, "getinputcol": [120, 147], "srt": 120, "getgraphfold": 120, "setgraphfil": 120, "greaph": 120, "auto": [120, 170, 185], "getgraphfil": 120, "chunktoken": 121, "flatten": 121, "artist": 121, "benezar": 121, "robert": 121, "farendel": 121, "graduat": 121, "luca": 121, "chunktokenizermodel": 121, "recursivetoken": 123, "recurs": [123, 142, 153, 157, 161], "hand": 123, "suffix": [123, 126, 206], "infix": [123, 126], "middl": 123, "she": 123, "qam": 123, "setprefix": 123, "setsuffix": 123, "setinfix": 123, "recursivetokenizermodel": 123, "regextoken": [124, 128, 207], "whitespac": [124, 128, 131], "tolowercas": [124, 128], "positionalmask": 124, "guarante": 124, "increment": 124, "trimwhitespac": 124, "flag": [124, 184], "eventu": 124, "settolowercas": [124, 128], "nthi": 124, "setpositionalmask": 124, "settrimwhitespac": 124, "token2chunk": 125, "17": [125, 196], "tokenizedsent": 126, "non": [126, 128, 170, 184, 185], "rulefactori": 126, "targetpattern": 126, "grab": 126, "prefixpattern": 126, "suffixpattern": 126, "infixpattern": 126, "sub": [126, 184], "won": 126, "exceptionspath": 126, "casesensitiveexcept": 126, "contextchar": 126, "splitpattern": 126, "splitchar": 126, "didn": 126, "jane": 126, "boyfriend": 126, "getinfixpattern": 126, "getsuffixpattern": 126, "getprefixpattern": 126, "getcontextchar": 126, "getsplitchar": 126, "settargetpattern": 126, "setprefixpattern": 126, "setsuffixpattern": 126, "setinfixpattern": 126, "addinfixpattern": 126, "setexcept": 126, "getexcept": 126, "setexceptionspath": 126, "addexcept": 126, "setcasesensitiveexcept": 126, "getcasesensitiveexcept": 126, "addcontextchar": 126, "setsplitpattern": 126, "setsplitchar": 126, "addsplitchar": 126, "piec": 126, "token_rul": 126, "wordsegment": 128, "wordsegmenterapproach": 128, "korean": 128, "japanes": 128, "chines": 128, "correspond": [128, 164, 183], "wordsegmentermodel": 128, "tip": 128, "frame": 128, "least": 128, "frequent": 128, "ambiguitythreshold": 128, "enableregextoken": 128, "chinese_train": 128, "utf8": 128, "\u5341": 128, "ll": 128, "\u56db": 128, "rr": 128, "\u4e0d": 128, "\u662f": 128, "setniter": 128, "trainingdataset": 128, "setambiguitythreshold": 128, "getfrequencythreshold": 128, "getambiguitythreshold": 128, "setenableregextoken": 128, "plit": 128, "words_seg": 128, "wordseg_pku": 128, "zh": 128, "\u7136\u800c": 128, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 128, "\u9019\u6a23": 128, "\u7684": 128, "\u8655\u7406": 128, "\u4e5f": 128, "\u884d\u751f": 128, "\u4e86": 128, "\u4e00\u4e9b": 128, "\u554f\u984c": 128, "prepar": [129, 132, 138, 141], "outputcol": [129, 132, 133, 134, 135, 138, 141], "inferschema": 129, "tmp": [129, 138, 157, 202], "librispeech_asr_dummy_clean_audio_array_parquet": 129, "float_arrai": 129, "getoutputcol": [129, 132, 138, 141, 147], "chunk2doc": [130, 131], "back": [130, 183], "re": [130, 206], "doc2chunk": [130, 131], "pretrainedpipelin": [130, 134, 140, 156, 167, 205, 210, 211], "york": [130, 134], "jersei": [130, 134], "aren": [130, 134], "amongst": [130, 134], "explain_document_dl": [130, 134, 140, 156, 167], "chunktodoc": 130, "chunkconvert": 130, "explainresult": [130, 134], "22": [130, 134, 193, 205], "chunkcol": 131, "stringtyp": 131, "setisarrai": 131, "startcol": 131, "startcolbytokenindex": 131, "isarrai": 131, "failonmiss": 131, "fail": 131, "chunkassembl": 131, "setchunkcol": 131, "setstartcol": 131, "setstartcolbytokenindex": 131, "setfailonmiss": 131, "disabl": [132, 141], "idcol": [132, 141], "metadatacol": [132, 141], "cleanupmod": [132, 141], "cleanup": [132, 141], "inplac": [132, 141], "inplace_ful": [132, 141], "shrink_ful": [132, 141], "each_ful": [132, 141], "delete_ful": [132, 141], "51": [132, 141, 196], "setidcol": [132, 141], "setmetadatacol": [132, 141], "usabl": 133, "lda": 133, "forest": 133, "featurecol": 133, "cleanannot": [133, 134, 135], "outputasvector": 133, "gloveembed": 133, "finished_sentence_embed": 133, "resultwiths": 133, "1619900017976761": 133, "045552998781204224": 133, "03229299932718277": 133, "685609996318": 133, "42416998744010925": 133, "1378999948501587": 133, "5717899799346924": 133, "5078899860382": 133, "08621499687433243": 133, "15772999823093414": 133, "06067200005054474": 133, "395359992980": 133, "4970499873161316": 133, "7164199948310852": 133, "40119001269340515": 133, "05761000141501": 133, "08170200139284134": 133, "7159299850463867": 133, "20677000284194946": 133, "0295659992843": 133, "valuesplitsymbol": 134, "annotationsplitsymbol": 134, "includemetadata": 134, "outputasarrai": [134, 135], "parseembeddingsvector": 134, "setvaluesplitsymbol": 134, "setannotationsplitsymbol": 134, "setincludemetadata": [134, 207], "setoutputasarrai": [134, 135], "setparseembeddingsvector": 134, "finishedresult": 135, "hasrecursivefit": [136, 137], "java_obj": [136, 160, 163], "py4j": [136, 137, 163], "java_gatewai": [136, 137, 163], "javaobject": [136, 137, 163], "recursivepipelin": [136, 137, 142, 147], "hasrecursivetransform": 137, "chunk2_doc": [139, 157], "doc2_chunk": [139, 157], "embeddings_finish": [139, 157], "graph_finish": [139, 157], "has_recursive_fit": [139, 157], "has_recursive_transform": [139, 157], "light_pipelin": [139, 157], "recursive_pipelin": [139, 157], "token_assembl": [139, 157], "lightpipelin": [140, 167, 210], "parse_embed": [140, 167], "equival": [140, 157, 210], "execut": [140, 184, 206, 210], "hold": [140, 210], "principl": [140, 210], "everyth": [140, 210, 211], "deal": [140, 210], "fullannot": [140, 167], "happi": [140, 205, 207, 210, 211], "prp": [140, 194, 196, 205, 210, 211, 212], "rb": [140, 170, 185, 196, 205, 210, 211, 212], "optional_target": [140, 167], "explain_document_pipelin": [140, 156, 167, 205, 210, 211], "dict_kei": [140, 167], "fullannotateimag": [140, 167], "path_to_imag": [140, 167], "setignoreunsupport": 140, "unsupport": 140, "annotatormodel": [140, 146], "getignoreunsupport": 140, "calculationscol": 141, "text2": 141, "document1": 141, "document2": 141, "kwarg": [142, 184], "decid": 142, "advantag": 142, "behav": 142, "exactli": 142, "intent": 142, "recursivepipelinemodel": 142, "pipeline_model": [142, 164, 202], "intend": 142, "tab": [143, 164, 202], "escap": 143, "quot": 143, "inputformat": 143, "csvdelimit": 143, "defailt": 143, "comma": 143, "escapecsvdelimit": 143, "table_csv": 143, "csv_data": 143, "118": 143, "input_format": 143, "setcsvdelimit": 143, "setescapecsvdelimit": 143, "tokenassembl": 144, "reconstruct": 144, "cleantext": 144, "opensourc": 144, "annotatorapproach": [145, 153, 164], "subclass": [146, 159, 163, 179, 182], "ins": [146, 163], "uid": [146, 163], "annotatorproperti": 147, "setlazyannot": 147, "lazili": 147, "getlazyannot": 147, "annotator_approach": [150, 157], "annotator_model": [150, 157], "annotator_properti": [150, 157], "coverage_result": [150, 157], "recursive_annotator_approach": [150, 157], "hasembeddingsproperti": 151, "getdimens": 151, "constant": 152, "recursiveannotatorapproach": 153, "handl": [154, 195], "fo": 155, "assist": 156, "map_annot": 156, "f": [156, 164, 202], "output_typ": 156, "udf": 156, "userdefinedfunct": 156, "def": 156, "nnp_token": 156, "lambda": 156, "alia": 156, "epeu": 156, "map_annotations_arrai": 156, "map_annotations_strict": 156, "map_annotations_col": 156, "output_column": 156, "annotatyon_typ": 156, "chunks_df": 156, "pos_chunk": 156, "vbz": [156, 193, 212], "filter_by_annotations_col": 156, "filter_po": 156, "explode_annotations_col": 156, "annotator_java_ml": [157, 161], "annotator_transform": [157, 161], "extended_java_wrapp": [157, 161], "params_getters_sett": [157, 161], "comet": [157, 165, 204], "pretrained_pipelin": [157, 166], "resource_download": [157, 166], "pub_tat": [157, 195], "annotation_audio": 157, "annotation_imag": 157, "aarch64": 157, "cache_fold": 157, "log_fold": 157, "cluster_tmp_dir": 157, "real_time_output": 157, "output_level": 157, "correctli": 157, "maco": 157, "linux": 157, "alloc": 157, "directori": [157, 202], "cache_pretrain": 157, "temporarili": 157, "unpack": 157, "hadoop": 157, "dir": 157, "s3": 157, "hdf": 157, "dbf": 157, "annotator_log": 157, "annotatorjavamlread": 158, "mixin": 158, "javamlread": 158, "classmethod": 158, "mlreader": 158, "clazz": 158, "rl": 158, "javaparam": 158, "annotatortransform": 159, "ensur": 159, "_java_obj": 159, "extens": 160, "javawrapp": 160, "extendedjavawrapp": 160, "new_java_arrai": 160, "pylist": 160, "java_class": 160, "todo": 160, "chang": [160, 181, 184], "paramsgetterssett": 162, "getparamvalu": 162, "paramnam": 162, "setparamvalu": 162, "recursiveestim": 163, "tupl": [163, 182, 183, 184], "overrid": 163, "recursivetransform": 163, "cometlogg": [164, 202], "workspac": 164, "project_nam": [164, 202], "comet_mod": [164, 202], "experiment_id": 164, "experiment_kwarg": 164, "logger": [164, 202], "meta": [164, 204], "practition": [164, 202], "reliabl": [164, 202], "streamlin": [164, 202], "lifecycl": [164, 202, 204], "track": [164, 202, 203], "explain": [164, 202, 209, 211], "reproduc": [164, 202, 203], "outputlogpath": [164, 202], "offlin": 164, "onlin": [164, 184, 202], "reus": [164, 178, 180, 182, 184], "importerror": 164, "output_log_path": [164, 202], "embd": [164, 202], "setshuffleperepoch": [164, 202], "logdir": [164, 202], "interfac": [164, 202, 210], "chart": [164, 202], "comet_ml": [164, 202], "log_pipeline_paramet": [164, 202], "log_visu": [164, 202], "html": [164, 202], "viz": [164, 202], "upload": 164, "visual": 164, "colum": [164, 202], "ner_chunk": [164, 202], "sparknlp_displai": [164, 202], "nervisu": [164, 202], "idx": [164, 202], "enumer": [164, 202], "label_col": [164, 202], "document_col": [164, 202], "return_html": [164, 202], "log_metr": [164, 202], "sklearn": [164, 202], "preprocess": [164, 202], "multilabelbinar": [164, 202], "classification_report": [164, 202], "preds_df": [164, 202], "topanda": [164, 202], "mlb": [164, 202], "y_true": [164, 202], "fit_transform": [164, 202], "y_pred": [164, 202], "output_dict": [164, 202], "log_paramet": 164, "log_completed_run": 164, "log_file_path": 164, "complet": [164, 203], "log_asset": 164, "asset_path": 164, "asset": 164, "log_asset_data": 164, "interv": 164, "refresh": 164, "outstand": 164, "disk_loc": 167, "fulli": 167, "light_model": 167, "gather": 167, "langaug": 167, "resourcedownload": 168, "wrongtfvers": [170, 185], "exit": [170, 185], "tensorflowaddonsneed": 170, "tfgraphbuild": [170, 185], "build_param": [170, 185], "generic_classifi": [170, 185], "assertion_dl": [170, 185], "relation_extract": [170, 185], "healthcar": [170, 185], "tfgraph": [170, 185], "tf_graph": [170, 185], "get_model": [170, 185], "nertfgraphbuild": [170, 185], "feat_siz": [170, 185], "n_class": [170, 185], "embeddings_dim": [170, 185], "nchar": [170, 185], "ntag": [170, 185], "model_loc": [170, 185], "medical_ner_graph": [170, 185], "model_filenam": [170, 185], "ner_log": [170, 185], "tfgraphbuilderfactori": [170, 185], "factori": [170, 185], "model_nam": [170, 185], "filenam": [170, 185], "ner_graph": [170, 185], "print_model_param": [170, 185], "tf2contrib": 171, "core_rnn_cel": [171, 181], "fused_rnn_cel": [171, 181], "gru_op": [171, 181], "lstm_op": [171, 181], "rnn_cell": [171, 179, 181], "core": 178, "embeddingwrapp": 178, "inputprojectionwrapp": 178, "outputprojectionwrapp": 178, "embedding_class": 178, "embedding_s": 178, "num_proj": [178, 184], "input_s": [178, 182, 183, 184], "output_s": [178, 182], "fuse": 179, "fusedrnncel": [179, 182], "expand": 179, "recurr": [179, 182, 183, 184], "rnncell": [179, 183, 184], "flexibl": 179, "__call__": 179, "signatur": 179, "fusedrnncelladaptor": 179, "use_dynamic_rnn": 179, "adaptor": 179, "timereversedfusedrnn": 179, "revers": 179, "basicrnncel": 179, "fw_lstm": 179, "bw_lstm": 179, "fw_out": 179, "fw_state": 179, "bw_out": 179, "bw_state": 179, "grublockcel": 180, "num_unit": [180, 182, 184], "cell_siz": 180, "gru_cel": 180, "deprec": 180, "grublockcellv2": 180, "ab": [180, 182, 183, 184], "1406": [180, 184], "1078": [180, 184], "forward": [180, 183], "propag": [180, 184], "mathemat": 180, "equat": [180, 184], "b_ru": 180, "constant_initi": 180, "b_c": 180, "x_h_prev": 180, "h_prev": 180, "r_bar": 180, "u_bar": 180, "w_ru": 180, "h_prevr": 180, "circ": [180, 184], "x_h_prevr": 180, "c_bar": 180, "w_c": [180, 184], "tanh": [180, 184], "h": [180, 184], "temporari": 180, "impl": 180, "input_shap": [180, 184], "lstmblockcel": 182, "forget_bia": [182, 184], "cell_clip": [182, 184], "use_peephol": [182, 184], "dtype": [182, 183, 184], "lstm_cell": 182, "1409": 182, "2329": 182, "forget": [182, 184], "gate": [182, 184], "rnn_cell_impl": [182, 184], "lstmcell": [182, 184], "monolith": 182, "short": [182, 184], "lstmblockwrapp": 182, "housekeep": 182, "_call_cel": 182, "initial_st": 182, "sequence_length": [182, 183], "time_len": 182, "initial_cell_st": 182, "initial_output": 182, "_num_unit": 182, "heterogen": 182, "int32": [182, 183], "int64": [182, 183], "cell_stat": 182, "valueerror": [182, 183, 184], "mismatch": 182, "lstmblockfusedcel": 182, "lstm_fused_cel": 182, "extrem": 182, "stack_bidirectional_rnn": 183, "cells_fw": 183, "cells_bw": 183, "initial_states_fw": 183, "initial_states_bw": 183, "stack": [183, 184], "sever": [183, 212], "backward": 183, "bidirectional_rnn": 183, "intermedi": 183, "1303": 183, "5778": 183, "appropri": 183, "cell_fw": 183, "state_s": [183, 184], "variablescop": 183, "subgraph": 183, "output_state_fw": 183, "output_state_bw": 183, "output_states_fw": 183, "output_states_bw": 183, "typeerror": 183, "cell_bw": 183, "stack_bidirectional_dynamic_rnn": 183, "parallel_iter": 183, "time_major": 183, "swap_memori": 183, "max_tim": 183, "major": 183, "emit": 183, "transpar": 183, "produc": [183, 184, 206], "prop": 183, "cpu": 183, "layers_output": 183, "coupledinputforgetgatelstmcel": 184, "proj_clip": 184, "num_unit_shard": 184, "num_proj_shard": 184, "state_is_tupl": 184, "math_op": 184, "layer_norm": 184, "norm_gain": 184, "norm_shift": 184, "peephol": 184, "pdf": 184, "semanticscholar": 184, "1154": 184, "0131eae85b2e11d53df7f1360eeb6476e7f4": 184, "felix": 184, "ger": 184, "jurgen": 184, "schmidhub": 184, "fred": 184, "cummin": 184, "iet": 184, "850": 184, "855": 184, "1999": 184, "pub": 184, "archiv": 184, "43905": 184, "hasim": 184, "sak": 184, "andrew": 184, "senior": 184, "francois": 184, "beaufai": 184, "acoust": 184, "interspeech": 184, "2014": 184, "coupl": 184, "1503": 184, "04069": 184, "greff": 184, "odyssei": 184, "peep": 184, "hole": 184, "connect": 184, "1607": 184, "06450": 184, "jimmi": 184, "lei": 184, "ba": 184, "jami": 184, "ryan": 184, "kiro": 184, "geoffrei": 184, "hinton": 184, "nonlinear": 184, "2d": 184, "c_state": 184, "m_state": 184, "output_dim": 184, "cannot": 184, "timefreqlstmcel": 184, "feature_s": 184, "frequency_skip": 184, "tara": 184, "sainath": 184, "bo": 184, "li": 184, "lvcsr": 184, "2016": 184, "clip": 184, "gridlstmcel": 184, "share_time_frequency_weight": 184, "num_frequency_block": 184, "start_freqindex_list": 184, "end_freqindex_list": 184, "couple_input_forget_g": 184, "grid": 184, "nal": 184, "kalchbrenn": 184, "ivo": 184, "danihelka": 184, "alex": 184, "proc": 184, "iclr": 184, "1507": 184, "01526": 184, "shared_weight": 184, "_state_is_tupl": 184, "bidirectionalgridlstmcel": 184, "backward_slice_offset": 184, "gridlstm": 184, "attentioncellwrapp": 184, "attn_length": 184, "attn_siz": 184, "attn_vec_s": 184, "1601": 184, "06733": 184, "lstma": 184, "highwaywrapp": 184, "couple_carry_transform_g": 184, "carry_bias_init": 184, "highwai": 184, "srivastava": 184, "preprint": 184, "1505": 184, "00387": 184, "layernormbasiclstmcel": 184, "dropout_keep_prob": 184, "dropout_prob_se": 184, "1603": 184, "05118": 184, "stanislau": 184, "semeniuta": 184, "aliaksei": 184, "severyn": 184, "erhardt": 184, "barth": 184, "nascel": 184, "use_bia": 184, "na": 184, "1611": 184, "01578": 184, "barret": 184, "zoph": 184, "quoc": 184, "reinforc": 184, "2017": 184, "ugrnncel": 184, "ugrnn": 184, "compromis": 184, "vanilla": 184, "instantan": 184, "feedforward": 184, "09913": 184, "jasmin": 184, "collin": 184, "jascha": 184, "sohl": 184, "dickstein": 184, "david": 184, "sussillo": 184, "num": 184, "new_output": 184, "ident": 184, "new_stat": 184, "intersectionrnncel": 184, "num_in_proj": 184, "y_activ": 184, "nn_op": 184, "relu": 184, "flow": 184, "subsequ": 184, "deepli": 184, "new_i": 184, "compiledwrapp": 184, "compile_st": 184, "jit": 184, "phasedlstmcel": 184, "leak": 184, "ratio_on": 184, "trainable_ratio_on": 184, "period_init_min": 184, "period_init_max": 184, "1610": 184, "09513v1": 184, "float32": 184, "float64": 184, "features_s": 184, "lstmstatetupl": 184, "timestep": 184, "convlstmcel": 184, "conv_ndim": 184, "output_channel": 184, "kernel_shap": 184, "skip_connect": 184, "conv_lstm_cel": 184, "1506": 184, "04214v1": 184, "conv1dlstmcel": 184, "conv_1d_lstm_cel": 184, "1d": 184, "conv2dlstmcel": 184, "conv_2d_lstm_cel": 184, "conv3dlstmcel": 184, "conv_3d_lstm_cel": 184, "3d": 184, "glstmcell": 184, "number_of_group": 184, "1703": 184, "10722": 184, "kuchaiev": 184, "ginsburg": 184, "trick": 184, "brief": 184, "evenli": 184, "fed": 184, "receiv": [184, 196, 212], "num_input": 184, "known": 184, "divis": 184, "innermost": 184, "incompat": 184, "layernormlstmcel": 184, "srucel": 184, "sru": 184, "cf": 184, "1709": 184, "02755": 184, "variat": 184, "character": 184, "simplifi": 184, "consecut": 184, "tradition": 184, "multipli": 184, "matrix": 184, "w_hh": 184, "ensu": 184, "flavor": 184, "h_": 184, "pointwis": 184, "boolean": 184, "mistak": 184, "argument": 184, "weightnormlstmcel": 184, "norm": 184, "adapt": 184, "1602": 184, "07868": 184, "tim": 184, "saliman": 184, "diederik": 184, "kingma": 184, "reparameter": 184, "indrnncel": 184, "indrnn": 184, "1803": 184, "04831": 184, "indygrucel": 184, "kernel_initi": 184, "bias_initi": 184, "grucel": 184, "yet": 184, "u_r": 184, "u_z": 184, "diagon": 184, "hadamard": 184, "r_j": 184, "sigmaleft": 184, "mathbf": 184, "w_rmathbf": 184, "_j": 184, "u_rcirc": 184, "_jright": 184, "z_j": 184, "w_zmathbf": 184, "u_zcirc": 184, "tild": 184, "phileft": 184, "denot": 184, "indygru": 184, "oppos": 184, "nunit": 184, "indylstmcel": 184, "indylstm": 184, "basiclstmcel": 184, "u_f": 184, "u_i": 184, "u_o": 184, "u_c": 184, "f_t": 184, "sigma_gleft": 184, "w_f": 184, "x_t": 184, "b_fright": 184, "i_t": 184, "w_i": 184, "b_iright": 184, "o_t": 184, "w_o": 184, "b_oright": 184, "c_t": 184, "c_": 184, "sigma_cleft": 184, "b_cright": 184, "1903": 184, "08023": 184, "ntmcell": 184, "memory_s": 184, "memory_vector_dim": 184, "read_head_num": 184, "write_head_num": 184, "shift_rang": 184, "clip_valu": 184, "ture": 184, "1807": 184, "08518": 184, "collier": 184, "joeran": 184, "beel": 184, "snowkylin": 184, "ntm": 184, "cours": 184, "1410": 184, "5401": 184, "wayn": 184, "minimalrnncel": 184, "glorot_uniform": 184, "ones": 184, "minimalrnn": 184, "1806": 184, "05394v2": 184, "minmin": 184, "jeffrei": 184, "pennington": 184, "samuel": 184, "schoenholz": 184, "isometri": 184, "theori": 184, "icml": 184, "cfncell": 184, "chao": 184, "openreview": 184, "net": 184, "s1dizvclg": 184, "thoma": 184, "jame": 184, "von": 184, "brecht": 184, "cfn": 184, "goe": 184, "contract": 184, "decoupl": 184, "tf_graph_1x": 185, "documentcol": [193, 194], "sentencecol": [193, 194], "tokencol": 193, "conlllabelindex": 193, "conllposindex": 193, "textcol": [193, 194], "labelcol": 193, "docstart": [193, 212], "eu": [193, 212], "np": [193, 212], "reject": [193, 212], "vp": [193, 212], "misc": [193, 212], "boycott": [193, 212], "british": [193, 212], "lamb": [193, 212], "blackburn": 193, "brussel": 193, "1996": 193, "08": 193, "storage_level": 193, "storagelevel": 193, "disk_onli": 193, "lift": 193, "persist": 193, "uposcol": 194, "upo": 194, "xposcol": 194, "xpo": 194, "lemmacol": 194, "sent_id": 194, "sell": 194, "pron": 194, "nom": 194, "plur": 194, "_": 194, "tens": 194, "conj": 194, "cc": 194, "spaceaft": 194, "No": [194, 205], "punct": 194, "conllufil": [194, 212], "conlldataset": [194, 212], "morph": 194, "Into": 194, "googleo": 194, "sconj": 194, "propn": 194, "adp": 194, "wp": 194, "vbd": [194, 196, 212], "ago": [196, 212], "posdf": 196, "61": 196, "56": 196, "67": [196, 197, 212], "nonexecut": 196, "69": 196, "76": 196, "director": 196, "78": 196, "81": 196, "84": 196, "outputposcol": 196, "outputdocumentcol": 196, "outputtextcol": 196, "pubtat": [197, 209], "medic": [197, 212], "medment": [197, 212], "25763772": [197, 212], "dctn4": [197, 212], "t116": [197, 212], "t123": [197, 212], "c4308010": [197, 212], "63": [197, 212], "chronic": [197, 212], "pseudomona": [197, 212], "aeruginosa": [197, 212], "infect": [197, 212], "t047": [197, 212], "c0854135": [197, 212], "82": [197, 212], "cystic": [197, 212], "fibrosi": [197, 212], "c0010674": [197, 212], "120": [197, 212], "pa": [197, 212], "124": [197, 212], "139": [197, 212], "pubtatorfil": 197, "corpus_pubtator_sampl": 197, "pubtatordataset": 197, "doc_id": 197, "finished_token": [197, 207], "finished_po": 197, "finished_n": 197, "finished_token_metadata": 197, "finished_pos_metadata": 197, "finished_label_metadata": 197, "mo": 197, "ispaddedtoken": 197, "pad": 197, "workflow": 202, "dedic": 202, "account": 202, "inspect": 202, "init": 202, "sparknlp_experi": 202, "offline_directori": 202, "later": 202, "nativ": 203, "record": 203, "queri": 203, "serv": 203, "registri": 203, "discov": 203, "central": 203, "send": 204, "messag": 204, "mlflow": 204, "clearli": 205, "explain_document_ml": [205, 210, 211], "approx": [205, 210, 211], "mb": [205, 210, 211], "ok": [205, 210, 211], "spearhead": 206, "declar": 206, "accordingli": 206, "extra_loc": 206, "bring": 206, "offer": [206, 208, 211], "column_nam": 206, "preced": 206, "interchang": 207, "anoth": 207, "road": 207, "proce": 207, "At": 207, "sens": 211, "constantli": 211, "server": 211, "train_po": 212, "training_conl": 212, "train_corpu": 212, "withcolumnrenam": 212, "trainingpubtatordf": 212, "corpus_pubt": 212}, "objects": {"": [[157, 0, 0, "-", "sparknlp"]], "sparknlp": [[12, 0, 0, "-", "annotation"], [13, 0, 0, "-", "annotation_audio"], [14, 0, 0, "-", "annotation_image"], [79, 0, 0, "-", "annotator"], [139, 0, 0, "-", "base"], [150, 0, 0, "-", "common"], [156, 0, 0, "-", "functions"], [161, 0, 0, "-", "internal"], [165, 0, 0, "-", "logging"], [166, 0, 0, "-", "pretrained"], [157, 3, 1, "", "start"], [195, 0, 0, "-", "training"], [199, 0, 0, "-", "upload_to_hub"], [200, 0, 0, "-", "util"], [157, 3, 1, "", "version"]], "sparknlp.annotation": [[12, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[12, 2, 1, "", "arrayType"], [12, 2, 1, "", "copy"], [12, 2, 1, "", "dataType"], [12, 2, 1, "", "fromRow"], [12, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[13, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[13, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[14, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[14, 2, 1, "", "copy"]], "sparknlp.annotator": [[15, 0, 0, "-", "audio"], [17, 0, 0, "-", "chunker"], [33, 0, 0, "-", "classifier_dl"], [48, 0, 0, "-", "coref"], [50, 0, 0, "-", "cv"], [53, 0, 0, "-", "dependency"], [55, 0, 0, "-", "document_normalizer"], [65, 0, 0, "-", "embeddings"], [77, 0, 0, "-", "er"], [78, 0, 0, "-", "graph_extraction"], [80, 0, 0, "-", "keyword_extraction"], [82, 0, 0, "-", "ld_dl"], [84, 0, 0, "-", "lemmatizer"], [87, 0, 0, "-", "matcher"], [91, 0, 0, "-", "n_gram_generator"], [92, 0, 0, "-", "ner"], [98, 0, 0, "-", "normalizer"], [101, 0, 0, "-", "param"], [102, 0, 0, "-", "pos"], [104, 0, 0, "-", "sentence"], [107, 0, 0, "-", "sentiment"], [111, 0, 0, "-", "seq2seq"], [115, 0, 0, "-", "spell_check"], [118, 0, 0, "-", "stemmer"], [119, 0, 0, "-", "stop_words_cleaner"], [120, 0, 0, "-", "tf_ner_dl_graph_builder"], [122, 0, 0, "-", "token"], [127, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[16, 0, 0, "-", "wav2vec2_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[16, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.chunker": [[17, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[17, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[18, 0, 0, "-", "albert_for_question_answering"], [19, 0, 0, "-", "albert_for_sequence_classification"], [20, 0, 0, "-", "albert_for_token_classification"], [21, 0, 0, "-", "bert_for_question_answering"], [22, 0, 0, "-", "bert_for_sequence_classification"], [23, 0, 0, "-", "bert_for_token_classification"], [24, 0, 0, "-", "camembert_for_sequence_classification"], [25, 0, 0, "-", "camembert_for_token_classification"], [26, 0, 0, "-", "classifier_dl"], [27, 0, 0, "-", "deberta_for_question_answering"], [28, 0, 0, "-", "deberta_for_sequence_classification"], [29, 0, 0, "-", "deberta_for_token_classification"], [30, 0, 0, "-", "distil_bert_for_question_answering"], [31, 0, 0, "-", "distil_bert_for_sequence_classification"], [32, 0, 0, "-", "distil_bert_for_token_classification"], [34, 0, 0, "-", "longformer_for_question_answering"], [35, 0, 0, "-", "longformer_for_sequence_classification"], [36, 0, 0, "-", "longformer_for_token_classification"], [37, 0, 0, "-", "multi_classifier_dl"], [38, 0, 0, "-", "roberta_for_question_answering"], [39, 0, 0, "-", "roberta_for_sequence_classification"], [40, 0, 0, "-", "roberta_for_token_classification"], [41, 0, 0, "-", "sentiment_dl"], [42, 0, 0, "-", "tapas_for_question_answering"], [43, 0, 0, "-", "xlm_roberta_for_question_answering"], [44, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [45, 0, 0, "-", "xlm_roberta_for_token_classification"], [46, 0, 0, "-", "xlnet_for_sequence_classification"], [47, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[18, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setConfigProtoBytes"], [18, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[19, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setCoalesceSentences"], [19, 2, 1, "", "setConfigProtoBytes"], [19, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[20, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"], [20, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[21, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"], [21, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[22, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"], [22, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[23, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"], [23, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[24, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"], [24, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[25, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"], [25, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[26, 1, 1, "", "ClassifierDLApproach"], [26, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[26, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[27, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setConfigProtoBytes"], [27, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[28, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setCoalesceSentences"], [28, 2, 1, "", "setConfigProtoBytes"], [28, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[29, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"], [29, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setConfigProtoBytes"], [30, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setCoalesceSentences"], [31, 2, 1, "", "setConfigProtoBytes"], [31, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[34, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[35, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[35, 2, 1, "", "getClasses"], [35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setCoalesceSentences"], [35, 2, 1, "", "setConfigProtoBytes"], [35, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[36, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setConfigProtoBytes"], [36, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, 1, 1, "", "MultiClassifierDLApproach"], [37, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"], [40, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[41, 1, 1, "", "SentimentDLApproach"], [41, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[41, 2, 1, "", "setDropout"], [41, 2, 1, "", "setThreshold"], [41, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setThreshold"], [41, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[42, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[43, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[44, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[45, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setConfigProtoBytes"], [45, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[46, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setCoalesceSentences"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[47, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[47, 2, 1, "", "getClasses"], [47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setConfigProtoBytes"], [47, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.coref": [[49, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[49, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setMaxSegmentLength"], [49, 2, 1, "", "setMaxSentenceLength"], [49, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[51, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.vit_for_image_classification": [[51, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.dependency": [[52, 0, 0, "-", "dependency_parser"], [54, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[52, 1, 1, "", "DependencyParserApproach"], [52, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[52, 2, 1, "", "setConllU"], [52, 2, 1, "", "setDependencyTreeBank"], [52, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[52, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[54, 1, 1, "", "TypedDependencyParserApproach"], [54, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[54, 2, 1, "", "setConll2009"], [54, 2, 1, "", "setConllU"], [54, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[54, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[55, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[55, 2, 1, "", "setAction"], [55, 2, 1, "", "setEncoding"], [55, 2, 1, "", "setLowercase"], [55, 2, 1, "", "setPatterns"], [55, 2, 1, "", "setPolicy"], [55, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[56, 0, 0, "-", "albert_embeddings"], [57, 0, 0, "-", "bert_embeddings"], [58, 0, 0, "-", "bert_sentence_embeddings"], [59, 0, 0, "-", "camembert_embeddings"], [60, 0, 0, "-", "chunk_embeddings"], [61, 0, 0, "-", "deberta_embeddings"], [62, 0, 0, "-", "distil_bert_embeddings"], [63, 0, 0, "-", "doc2vec"], [64, 0, 0, "-", "elmo_embeddings"], [66, 0, 0, "-", "longformer_embeddings"], [67, 0, 0, "-", "roberta_embeddings"], [68, 0, 0, "-", "roberta_sentence_embeddings"], [69, 0, 0, "-", "sentence_embeddings"], [70, 0, 0, "-", "universal_sentence_encoder"], [71, 0, 0, "-", "word2vec"], [72, 0, 0, "-", "word_embeddings"], [73, 0, 0, "-", "xlm_roberta_embeddings"], [74, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [75, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[56, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"], [56, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_embeddings": [[57, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[58, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"], [58, 2, 1, "", "setIsLong"], [58, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[59, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"], [59, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[60, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[60, 2, 1, "", "setPoolingStrategy"], [60, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[61, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"], [61, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[62, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setConfigProtoBytes"], [62, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.doc2vec": [[63, 1, 1, "", "Doc2VecApproach"], [63, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[63, 2, 1, "", "setMaxIter"], [63, 2, 1, "", "setMaxSentenceLength"], [63, 2, 1, "", "setMinCount"], [63, 2, 1, "", "setNumPartitions"], [63, 2, 1, "", "setSeed"], [63, 2, 1, "", "setStepSize"], [63, 2, 1, "", "setVectorSize"], [63, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[64, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setBatchSize"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[66, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"], [66, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[67, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"], [67, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[68, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[69, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[69, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[70, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"], [70, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[71, 1, 1, "", "Word2VecApproach"], [71, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[71, 2, 1, "", "setMaxIter"], [71, 2, 1, "", "setMaxSentenceLength"], [71, 2, 1, "", "setMinCount"], [71, 2, 1, "", "setNumPartitions"], [71, 2, 1, "", "setSeed"], [71, 2, 1, "", "setStepSize"], [71, 2, 1, "", "setVectorSize"], [71, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[72, 1, 1, "", "WordEmbeddings"], [72, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[72, 2, 1, "", "setReadCacheSize"], [72, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[72, 2, 1, "", "loadStorage"], [72, 2, 1, "", "overallCoverage"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setReadCacheSize"], [72, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[73, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"], [73, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[74, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"], [74, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[75, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"], [75, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.er": [[76, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[76, 1, 1, "", "EntityRulerApproach"], [76, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[76, 2, 1, "", "setAlphabetResource"], [76, 2, 1, "", "setEnablePatternRegex"], [76, 2, 1, "", "setPatternsResource"], [76, 2, 1, "", "setSentenceMatch"], [76, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[78, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[78, 2, 1, "", "setDelimiter"], [78, 2, 1, "", "setDependencyParserModel"], [78, 2, 1, "", "setEntityTypes"], [78, 2, 1, "", "setExplodeEntities"], [78, 2, 1, "", "setIncludeEdges"], [78, 2, 1, "", "setMaxSentenceSize"], [78, 2, 1, "", "setMergeEntities"], [78, 2, 1, "", "setMergeEntitiesIOBFormat"], [78, 2, 1, "", "setMinSentenceSize"], [78, 2, 1, "", "setPosModel"], [78, 2, 1, "", "setRelationshipTypes"], [78, 2, 1, "", "setRootTokens"], [78, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[81, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[81, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[81, 2, 1, "", "getStopWords"], [81, 2, 1, "", "loadDefaultStopWords"], [81, 2, 1, "", "setMaxNGrams"], [81, 2, 1, "", "setMinNGrams"], [81, 2, 1, "", "setNKeywords"], [81, 2, 1, "", "setStopWords"], [81, 2, 1, "", "setThreshold"], [81, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[83, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[83, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setCoalesceSentences"], [83, 2, 1, "", "setConfigProtoBytes"], [83, 2, 1, "", "setThreshold"], [83, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[84, 1, 1, "", "Lemmatizer"], [84, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[84, 2, 1, "", "setDictionary"], [84, 2, 1, "", "setFormCol"], [84, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[84, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[85, 0, 0, "-", "big_text_matcher"], [86, 0, 0, "-", "date_matcher"], [88, 0, 0, "-", "multi_date_matcher"], [89, 0, 0, "-", "regex_matcher"], [90, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[85, 1, 1, "", "BigTextMatcher"], [85, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[85, 2, 1, "", "setCaseSensitive"], [85, 2, 1, "", "setEntities"], [85, 2, 1, "", "setMergeOverlapping"], [85, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[85, 2, 1, "", "loadStorage"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setCaseSensitive"], [85, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[86, 1, 1, "", "DateMatcher"], [86, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[86, 2, 1, "", "setAnchorDateDay"], [86, 2, 1, "", "setAnchorDateMonth"], [86, 2, 1, "", "setAnchorDateYear"], [86, 2, 1, "", "setDefaultDayWhenMissing"], [86, 2, 1, "", "setInputFormats"], [86, 2, 1, "", "setOutputFormat"], [86, 2, 1, "", "setReadMonthFirst"]], "sparknlp.annotator.matcher.multi_date_matcher": [[88, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[89, 1, 1, "", "RegexMatcher"], [89, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[89, 2, 1, "", "setDelimiter"], [89, 2, 1, "", "setExternalRules"], [89, 2, 1, "", "setRules"], [89, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[90, 1, 1, "", "TextMatcher"], [90, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[90, 2, 1, "", "setBuildFromTokens"], [90, 2, 1, "", "setCaseSensitive"], [90, 2, 1, "", "setEntities"], [90, 2, 1, "", "setEntityValue"], [90, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setBuildFromTokens"], [90, 2, 1, "", "setEntityValue"], [90, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[91, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[91, 2, 1, "", "setDelimiter"], [91, 2, 1, "", "setEnableCumulative"], [91, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[93, 0, 0, "-", "ner_approach"], [94, 0, 0, "-", "ner_converter"], [95, 0, 0, "-", "ner_crf"], [96, 0, 0, "-", "ner_dl"], [97, 0, 0, "-", "ner_overwriter"]], "sparknlp.annotator.ner.ner_approach": [[93, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[93, 2, 1, "", "getLabelColumn"], [93, 2, 1, "", "setEntities"], [93, 2, 1, "", "setLabelColumn"], [93, 2, 1, "", "setMaxEpochs"], [93, 2, 1, "", "setMinEpochs"], [93, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[94, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[94, 2, 1, "", "setPreservePosition"], [94, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[95, 1, 1, "", "NerCrfApproach"], [95, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[95, 2, 1, "", "setC0"], [95, 2, 1, "", "setExternalFeatures"], [95, 2, 1, "", "setIncludeConfidence"], [95, 2, 1, "", "setL2"], [95, 2, 1, "", "setLossEps"], [95, 2, 1, "", "setMinW"], [95, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[96, 1, 1, "", "NerDLApproach"], [96, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[96, 2, 1, "", "setBatchSize"], [96, 2, 1, "", "setBestModelMetric"], [96, 2, 1, "", "setConfigProtoBytes"], [96, 2, 1, "", "setDropout"], [96, 2, 1, "", "setEnableMemoryOptimizer"], [96, 2, 1, "", "setGraphFolder"], [96, 2, 1, "", "setIncludeAllConfidenceScores"], [96, 2, 1, "", "setIncludeConfidence"], [96, 2, 1, "", "setLr"], [96, 2, 1, "", "setPo"], [96, 2, 1, "", "setUseBestModel"], [96, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setConfigProtoBytes"], [96, 2, 1, "", "setIncludeAllConfidenceScores"], [96, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[97, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[97, 2, 1, "", "setNerWords"], [97, 2, 1, "", "setNewNerEntity"], [97, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.normalizer": [[98, 1, 1, "", "Normalizer"], [98, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[98, 2, 1, "", "setCleanupPatterns"], [98, 2, 1, "", "setLowercase"], [98, 2, 1, "", "setMaxLength"], [98, 2, 1, "", "setMinLength"], [98, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.param": [[99, 0, 0, "-", "classifier_encoder"], [100, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[99, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[99, 2, 1, "", "setBatchSize"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setLabelColumn"], [99, 2, 1, "", "setLr"], [99, 2, 1, "", "setMaxEpochs"], [99, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[100, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[100, 2, 1, "", "setEnableOutputLogs"], [100, 2, 1, "", "setEvaluationLogExtended"], [100, 2, 1, "", "setOutputLogsPath"], [100, 2, 1, "", "setTestDataset"], [100, 2, 1, "", "setValidationSplit"], [100, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[103, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[103, 1, 1, "", "PerceptronApproach"], [103, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[103, 2, 1, "", "getNIterations"], [103, 2, 1, "", "setIterations"], [103, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[103, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[105, 0, 0, "-", "sentence_detector"], [106, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[105, 1, 1, "", "SentenceDetector"], [105, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[105, 2, 1, "", "setCustomBounds"], [105, 2, 1, "", "setCustomBoundsStrategy"], [105, 2, 1, "", "setDetectLists"], [105, 2, 1, "", "setExplodeSentences"], [105, 2, 1, "", "setMaxLength"], [105, 2, 1, "", "setMinLength"], [105, 2, 1, "", "setSplitLength"], [105, 2, 1, "", "setUseAbbreviations"], [105, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[106, 1, 1, "", "SentenceDetectorDLApproach"], [106, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[106, 2, 1, "", "setEpochsNumber"], [106, 2, 1, "", "setExplodeSentences"], [106, 2, 1, "", "setImpossiblePenultimates"], [106, 2, 1, "", "setModel"], [106, 2, 1, "", "setOutputLogsPath"], [106, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setCustomBounds"], [106, 2, 1, "", "setExplodeSentences"], [106, 2, 1, "", "setImpossiblePenultimates"], [106, 2, 1, "", "setMaxLength"], [106, 2, 1, "", "setMinLength"], [106, 2, 1, "", "setModel"], [106, 2, 1, "", "setSplitLength"], [106, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[108, 0, 0, "-", "sentiment_detector"], [109, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[108, 1, 1, "", "SentimentDetector"], [108, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[108, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[109, 1, 1, "", "ViveknSentimentApproach"], [109, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[109, 2, 1, "", "setPruneCorpus"], [109, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[109, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[110, 0, 0, "-", "gpt2_transformer"], [112, 0, 0, "-", "marian_transformer"], [113, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[110, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[110, 2, 1, "", "loadSavedModel"], [110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setConfigProtoBytes"], [110, 2, 1, "", "setDoSample"], [110, 2, 1, "", "setIgnoreTokenIds"], [110, 2, 1, "", "setMaxOutputLength"], [110, 2, 1, "", "setMinOutputLength"], [110, 2, 1, "", "setNoRepeatNgramSize"], [110, 2, 1, "", "setRepetitionPenalty"], [110, 2, 1, "", "setTask"], [110, 2, 1, "", "setTemperature"], [110, 2, 1, "", "setTopK"], [110, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[112, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[112, 2, 1, "", "loadSavedModel"], [112, 2, 1, "", "pretrained"], [112, 2, 1, "", "setConfigProtoBytes"], [112, 2, 1, "", "setIgnoreTokenIds"], [112, 2, 1, "", "setLangId"], [112, 2, 1, "", "setMaxInputLength"], [112, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[113, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[113, 2, 1, "", "loadSavedModel"], [113, 2, 1, "", "pretrained"], [113, 2, 1, "", "setConfigProtoBytes"], [113, 2, 1, "", "setDoSample"], [113, 2, 1, "", "setIgnoreTokenIds"], [113, 2, 1, "", "setMaxOutputLength"], [113, 2, 1, "", "setMinOutputLength"], [113, 2, 1, "", "setNoRepeatNgramSize"], [113, 2, 1, "", "setRepetitionPenalty"], [113, 2, 1, "", "setTask"], [113, 2, 1, "", "setTemperature"], [113, 2, 1, "", "setTopK"], [113, 2, 1, "", "setTopP"]], "sparknlp.annotator.spell_check": [[114, 0, 0, "-", "context_spell_checker"], [116, 0, 0, "-", "norvig_sweeting"], [117, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[114, 1, 1, "", "ContextSpellCheckerApproach"], [114, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[114, 2, 1, "", "addRegexClass"], [114, 2, 1, "", "addVocabClass"], [114, 2, 1, "", "setBatchSize"], [114, 2, 1, "", "setCaseStrategy"], [114, 2, 1, "", "setClassCount"], [114, 2, 1, "", "setCompoundCount"], [114, 2, 1, "", "setConfigProtoBytes"], [114, 2, 1, "", "setEpochs"], [114, 2, 1, "", "setErrorThreshold"], [114, 2, 1, "", "setFinalRate"], [114, 2, 1, "", "setInitialRate"], [114, 2, 1, "", "setLanguageModelClasses"], [114, 2, 1, "", "setMaxCandidates"], [114, 2, 1, "", "setMaxWindowLen"], [114, 2, 1, "", "setMinCount"], [114, 2, 1, "", "setTradeoff"], [114, 2, 1, "", "setValidationFraction"], [114, 2, 1, "", "setWeightedDistPath"], [114, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[114, 2, 1, "", "getWordClasses"], [114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setCaseStrategy"], [114, 2, 1, "", "setCompareLowcase"], [114, 2, 1, "", "setConfigProtoBytes"], [114, 2, 1, "", "setCorrectSymbols"], [114, 2, 1, "", "setErrorThreshold"], [114, 2, 1, "", "setGamma"], [114, 2, 1, "", "setMaxCandidates"], [114, 2, 1, "", "setMaxWindowLen"], [114, 2, 1, "", "setTradeoff"], [114, 2, 1, "", "setWeights"], [114, 2, 1, "", "setWordMaxDistance"], [114, 2, 1, "", "updateRegexClass"], [114, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[116, 1, 1, "", "NorvigSweetingApproach"], [116, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[116, 2, 1, "", "setCaseSensitive"], [116, 2, 1, "", "setDictionary"], [116, 2, 1, "", "setDoubleVariants"], [116, 2, 1, "", "setFrequencyPriority"], [116, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[116, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[117, 1, 1, "", "SymmetricDeleteApproach"], [117, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[117, 2, 1, "", "setDeletesThreshold"], [117, 2, 1, "", "setDictionary"], [117, 2, 1, "", "setFrequencyThreshold"], [117, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[117, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[118, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[119, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[119, 2, 1, "", "loadDefaultStopWords"], [119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setCaseSensitive"], [119, 2, 1, "", "setLocale"], [119, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[120, 1, 1, "", "TFNerDLGraphBuilder"], [120, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[120, 2, 1, "", "getGraphFile"], [120, 2, 1, "", "getGraphFolder"], [120, 2, 1, "", "getHiddenUnitsNumber"], [120, 2, 1, "", "getInputCols"], [120, 2, 1, "", "getLabelColumn"], [120, 2, 1, "", "setGraphFile"], [120, 2, 1, "", "setGraphFolder"], [120, 2, 1, "", "setHiddenUnitsNumber"], [120, 2, 1, "", "setInputCols"], [120, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[121, 0, 0, "-", "chunk_tokenizer"], [123, 0, 0, "-", "recursive_tokenizer"], [124, 0, 0, "-", "regex_tokenizer"], [125, 0, 0, "-", "token2_chunk"], [126, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[121, 1, 1, "", "ChunkTokenizer"], [121, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[123, 1, 1, "", "RecursiveTokenizer"], [123, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[123, 2, 1, "", "setInfixes"], [123, 2, 1, "", "setPrefixes"], [123, 2, 1, "", "setSuffixes"], [123, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[124, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[124, 2, 1, "", "setMaxLength"], [124, 2, 1, "", "setMinLength"], [124, 2, 1, "", "setPattern"], [124, 2, 1, "", "setPositionalMask"], [124, 2, 1, "", "setPreservePosition"], [124, 2, 1, "", "setToLowercase"], [124, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.token2_chunk": [[125, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token.tokenizer": [[126, 1, 1, "", "Tokenizer"], [126, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[126, 2, 1, "", "addContextChars"], [126, 2, 1, "", "addException"], [126, 2, 1, "", "addInfixPattern"], [126, 2, 1, "", "addSplitChars"], [126, 2, 1, "", "getCaseSensitiveExceptions"], [126, 2, 1, "", "getContextChars"], [126, 2, 1, "", "getExceptions"], [126, 2, 1, "", "getInfixPatterns"], [126, 2, 1, "", "getPrefixPattern"], [126, 2, 1, "", "getSplitChars"], [126, 2, 1, "", "getSuffixPattern"], [126, 2, 1, "", "setCaseSensitiveExceptions"], [126, 2, 1, "", "setContextChars"], [126, 2, 1, "", "setExceptions"], [126, 2, 1, "", "setExceptionsPath"], [126, 2, 1, "", "setInfixPatterns"], [126, 2, 1, "", "setMaxLength"], [126, 2, 1, "", "setMinLength"], [126, 2, 1, "", "setPrefixPattern"], [126, 2, 1, "", "setSplitChars"], [126, 2, 1, "", "setSplitPattern"], [126, 2, 1, "", "setSuffixPattern"], [126, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[126, 2, 1, "", "addSplitChars"], [126, 2, 1, "", "pretrained"], [126, 2, 1, "", "setSplitChars"], [126, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.ws": [[128, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[128, 1, 1, "", "WordSegmenterApproach"], [128, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[128, 2, 1, "", "getAmbiguityThreshold"], [128, 2, 1, "", "getFrequencyThreshold"], [128, 2, 1, "", "getNIterations"], [128, 2, 1, "", "setAmbiguityThreshold"], [128, 2, 1, "", "setEnableRegexTokenizer"], [128, 2, 1, "", "setFrequencyThreshold"], [128, 2, 1, "", "setNIterations"], [128, 2, 1, "", "setPattern"], [128, 2, 1, "", "setPosColumn"], [128, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[128, 2, 1, "", "pretrained"], [128, 2, 1, "", "setEnableRegexTokenizer"], [128, 2, 1, "", "setPattern"], [128, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[129, 0, 0, "-", "audio_assembler"], [130, 0, 0, "-", "chunk2_doc"], [131, 0, 0, "-", "doc2_chunk"], [132, 0, 0, "-", "document_assembler"], [133, 0, 0, "-", "embeddings_finisher"], [134, 0, 0, "-", "finisher"], [135, 0, 0, "-", "graph_finisher"], [136, 0, 0, "-", "has_recursive_fit"], [137, 0, 0, "-", "has_recursive_transform"], [138, 0, 0, "-", "image_assembler"], [140, 0, 0, "-", "light_pipeline"], [141, 0, 0, "-", "multi_document_assembler"], [142, 0, 0, "-", "recursive_pipeline"], [143, 0, 0, "-", "table_assembler"], [144, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[129, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[129, 2, 1, "", "getOutputCol"], [129, 2, 1, "", "setInputCol"], [129, 2, 1, "", "setOutputCol"]], "sparknlp.base.chunk2_doc": [[130, 1, 1, "", "Chunk2Doc"]], "sparknlp.base.doc2_chunk": [[131, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[131, 2, 1, "", "setChunkCol"], [131, 2, 1, "", "setFailOnMissing"], [131, 2, 1, "", "setIsArray"], [131, 2, 1, "", "setLowerCase"], [131, 2, 1, "", "setStartCol"], [131, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[132, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[132, 2, 1, "", "getOutputCol"], [132, 2, 1, "", "setCleanupMode"], [132, 2, 1, "", "setIdCol"], [132, 2, 1, "", "setInputCol"], [132, 2, 1, "", "setMetadataCol"], [132, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[133, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[133, 2, 1, "", "setCleanAnnotations"], [133, 2, 1, "", "setInputCols"], [133, 2, 1, "", "setOutputAsVector"], [133, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[134, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[134, 2, 1, "", "setAnnotationSplitSymbol"], [134, 2, 1, "", "setCleanAnnotations"], [134, 2, 1, "", "setIncludeMetadata"], [134, 2, 1, "", "setInputCols"], [134, 2, 1, "", "setOutputAsArray"], [134, 2, 1, "", "setOutputCols"], [134, 2, 1, "", "setParseEmbeddingsVectors"], [134, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[135, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[135, 2, 1, "", "setCleanAnnotations"], [135, 2, 1, "", "setInputCol"], [135, 2, 1, "", "setOutputAsArray"], [135, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[136, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[137, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[138, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[138, 2, 1, "", "getOutputCol"], [138, 2, 1, "", "setInputCol"], [138, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[140, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[140, 2, 1, "", "annotate"], [140, 2, 1, "", "fullAnnotate"], [140, 2, 1, "", "fullAnnotateImage"], [140, 2, 1, "", "getIgnoreUnsupported"], [140, 2, 1, "", "setIgnoreUnsupported"], [140, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[141, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[141, 2, 1, "", "getOutputCols"], [141, 2, 1, "", "setCleanupMode"], [141, 2, 1, "", "setIdCol"], [141, 2, 1, "", "setInputCols"], [141, 2, 1, "", "setMetadataCol"], [141, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[142, 1, 1, "", "RecursivePipeline"], [142, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[143, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[143, 2, 1, "", "setCsvDelimiter"], [143, 2, 1, "", "setEscapeCsvDelimiter"], [143, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[144, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[144, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[145, 0, 0, "-", "annotator_approach"], [146, 0, 0, "-", "annotator_model"], [147, 0, 0, "-", "annotator_properties"], [148, 0, 0, "-", "annotator_type"], [149, 0, 0, "-", "coverage_result"], [151, 0, 0, "-", "properties"], [152, 0, 0, "-", "read_as"], [153, 0, 0, "-", "recursive_annotator_approach"], [154, 0, 0, "-", "storage"], [155, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[145, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[146, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[147, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[147, 2, 1, "", "getInputCols"], [147, 2, 1, "", "getLazyAnnotator"], [147, 2, 1, "", "getOutputCol"], [147, 2, 1, "", "setInputCols"], [147, 2, 1, "", "setLazyAnnotator"], [147, 2, 1, "", "setOutputCol"]], "sparknlp.common.properties": [[151, 1, 1, "", "HasEmbeddingsProperties"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[151, 2, 1, "", "getDimension"], [151, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[152, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[153, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[155, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[156, 3, 1, "", "explode_annotations_col"], [156, 3, 1, "", "filter_by_annotations_col"], [156, 3, 1, "", "map_annotations"], [156, 3, 1, "", "map_annotations_array"], [156, 3, 1, "", "map_annotations_col"], [156, 3, 1, "", "map_annotations_cols"], [156, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[158, 0, 0, "-", "annotator_java_ml"], [159, 0, 0, "-", "annotator_transformer"], [160, 0, 0, "-", "extended_java_wrapper"], [162, 0, 0, "-", "params_getters_setters"], [163, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[158, 1, 1, "", "AnnotatorJavaMLReadable"], [158, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[158, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[159, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[160, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[160, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[162, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[162, 2, 1, "", "getParamValue"], [162, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[163, 1, 1, "", "RecursiveEstimator"], [163, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[163, 2, 1, "", "fit"]], "sparknlp.logging": [[164, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[164, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[164, 2, 1, "", "end"], [164, 2, 1, "", "log_asset"], [164, 2, 1, "", "log_asset_data"], [164, 2, 1, "", "log_completed_run"], [164, 2, 1, "", "log_metrics"], [164, 2, 1, "", "log_parameters"], [164, 2, 1, "", "log_pipeline_parameters"], [164, 2, 1, "", "log_visualization"], [164, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[167, 0, 0, "-", "pretrained_pipeline"], [168, 0, 0, "-", "resource_downloader"], [169, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[167, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[167, 2, 1, "", "annotate"], [167, 2, 1, "", "fullAnnotate"], [167, 2, 1, "", "fullAnnotateImage"], [167, 2, 1, "", "transform"]], "sparknlp.training": [[171, 0, 0, "-", "_tf_graph_builders"], [186, 0, 0, "-", "_tf_graph_builders_1x"], [193, 0, 0, "-", "conll"], [194, 0, 0, "-", "conllu"], [196, 0, 0, "-", "pos"], [197, 0, 0, "-", "pub_tator"], [198, 0, 0, "-", "tfgraphs"]], "sparknlp.training._tf_graph_builders": [[170, 0, 0, "-", "graph_builders"], [174, 0, 0, "-", "ner_dl"], [181, 0, 0, "-", "tf2contrib"]], "sparknlp.training._tf_graph_builders.graph_builders": [[170, 1, 1, "", "NerTFGraphBuilder"], [170, 1, 1, "", "TFGraphBuilder"], [170, 1, 1, "", "TFGraphBuilderFactory"], [170, 4, 1, "", "TensorflowAddonsNeeded"], [170, 4, 1, "", "WrongTFVersion"]], "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[170, 2, 1, "", "build"], [170, 2, 1, "", "get_models"], [170, 2, 1, "", "print_model_params"]], "sparknlp.training._tf_graph_builders.ner_dl": [[172, 0, 0, "-", "create_graph"], [173, 0, 0, "-", "dataset_encoder"], [175, 0, 0, "-", "ner_model"], [176, 0, 0, "-", "ner_model_saver"], [177, 0, 0, "-", "sentence_grouper"]], "sparknlp.training._tf_graph_builders.tf2contrib": [[178, 0, 0, "-", "core_rnn_cell"], [179, 0, 0, "-", "fused_rnn_cell"], [180, 0, 0, "-", "gru_ops"], [182, 0, 0, "-", "lstm_ops"], [183, 0, 0, "-", "rnn"], [184, 0, 0, "-", "rnn_cell"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell": [[178, 1, 1, "", "EmbeddingWrapper"], [178, 1, 1, "", "InputProjectionWrapper"], [178, 1, 1, "", "OutputProjectionWrapper"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[178, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[178, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[178, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell": [[179, 1, 1, "", "FusedRNNCell"], [179, 1, 1, "", "FusedRNNCellAdaptor"], [179, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops": [[180, 1, 1, "", "GRUBlockCell"], [180, 1, 1, "", "GRUBlockCellV2"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[180, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[180, 2, 1, "", "build"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops": [[182, 1, 1, "", "LSTMBlockCell"], [182, 1, 1, "", "LSTMBlockFusedCell"], [182, 1, 1, "", "LSTMBlockWrapper"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[182, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[182, 2, 1, "", "call"], [182, 2, 1, "", "num_units"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn": [[183, 3, 1, "", "stack_bidirectional_dynamic_rnn"], [183, 3, 1, "", "stack_bidirectional_rnn"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell": [[184, 1, 1, "", "AttentionCellWrapper"], [184, 1, 1, "", "BidirectionalGridLSTMCell"], [184, 1, 1, "", "CFNCell"], [184, 1, 1, "", "CompiledWrapper"], [184, 1, 1, "", "Conv1DLSTMCell"], [184, 1, 1, "", "Conv2DLSTMCell"], [184, 1, 1, "", "Conv3DLSTMCell"], [184, 1, 1, "", "ConvLSTMCell"], [184, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [184, 1, 1, "", "GLSTMCell"], [184, 1, 1, "", "GridLSTMCell"], [184, 1, 1, "", "HighwayWrapper"], [184, 1, 1, "", "IndRNNCell"], [184, 1, 1, "", "IndyGRUCell"], [184, 1, 1, "", "IndyLSTMCell"], [184, 1, 1, "", "IntersectionRNNCell"], [184, 1, 1, "", "LayerNormBasicLSTMCell"], [184, 1, 1, "", "LayerNormLSTMCell"], [184, 1, 1, "", "MinimalRNNCell"], [184, 1, 1, "", "NASCell"], [184, 1, 1, "", "NTMCell"], [184, 1, 1, "", "PhasedLSTMCell"], [184, 1, 1, "", "SRUCell"], [184, 1, 1, "", "TimeFreqLSTMCell"], [184, 1, 1, "", "UGRNNCell"], [184, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[184, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders_1x": [[185, 0, 0, "-", "graph_builders"], [189, 0, 0, "-", "ner_dl"]], "sparknlp.training._tf_graph_builders_1x.graph_builders": [[185, 1, 1, "", "NerTFGraphBuilder"], [185, 1, 1, "", "TFGraphBuilder"], [185, 1, 1, "", "TFGraphBuilderFactory"], [185, 4, 1, "", "WrongTFVersion"]], "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[185, 2, 1, "", "build"], [185, 2, 1, "", "get_models"], [185, 2, 1, "", "print_model_params"]], "sparknlp.training._tf_graph_builders_1x.ner_dl": [[187, 0, 0, "-", "create_graph"], [188, 0, 0, "-", "dataset_encoder"], [190, 0, 0, "-", "ner_model"], [191, 0, 0, "-", "ner_model_saver"], [192, 0, 0, "-", "sentence_grouper"]], "sparknlp.training.conll": [[193, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[193, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[194, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[194, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[196, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[196, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[197, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[197, 2, 1, "", "readDataset"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"api": [1, 201], "refer": [1, 201], "get": [10, 207], "start": 10, "spark": [10, 11, 202, 207, 211], "nlp": [10, 11, 202, 211], "cheat": 10, "sheet": 10, "requir": 10, "instal": [10, 202], "us": [10, 202, 211], "conda": 10, "virtualenv": 10, "session": 10, "from": 10, "python": 10, "document": 11, "content": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 170, 178, 179, 180, 182, 183, 184, 185, 193, 194, 196, 197], "sparknlp": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "annot": [12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 205, 206, 207], "modul": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 156, 158, 159, 160, 162, 163, 164, 167, 170, 178, 179, 180, 182, 183, 184, 185, 193, 194, 196, 197, 201], "class": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 158, 159, 160, 162, 163, 164, 167, 170, 178, 179, 180, 182, 184, 185, 193, 194, 196, 197], "annotation_audio": 13, "annotation_imag": 14, "audio": [15, 16], "submodul": [15, 33, 48, 50, 53, 65, 77, 79, 80, 82, 87, 92, 102, 104, 107, 111, 115, 122, 127, 139, 150, 157, 161, 165, 166, 181, 195], "wav2vec2_for_ctc": 16, "chunker": 17, "classifier_dl": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "albert_for_question_answ": 18, "albert_for_sequence_classif": 19, "albert_for_token_classif": 20, "bert_for_question_answ": 21, "bert_for_sequence_classif": 22, "bert_for_token_classif": 23, "camembert_for_sequence_classif": 24, "camembert_for_token_classif": 25, "deberta_for_question_answ": 27, "deberta_for_sequence_classif": 28, "deberta_for_token_classif": 29, "distil_bert_for_question_answ": 30, "distil_bert_for_sequence_classif": 31, "distil_bert_for_token_classif": 32, "longformer_for_question_answ": 34, "longformer_for_sequence_classif": 35, "longformer_for_token_classif": 36, "multi_classifier_dl": 37, "roberta_for_question_answ": 38, "roberta_for_sequence_classif": 39, "roberta_for_token_classif": 40, "sentiment_dl": 41, "tapas_for_question_answ": 42, "xlm_roberta_for_question_answ": 43, "xlm_roberta_for_sequence_classif": 44, "xlm_roberta_for_token_classif": 45, "xlnet_for_sequence_classif": 46, "xlnet_for_token_classif": 47, "coref": [48, 49], "spanbert_coref": 49, "cv": [50, 51], "vit_for_image_classif": 51, "depend": [52, 53, 54], "dependency_pars": 52, "typed_dependency_pars": 54, "document_norm": 55, "embed": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "albert_embed": 56, "bert_embed": 57, "bert_sentence_embed": 58, "camembert_embed": 59, "chunk_embed": 60, "deberta_embed": 61, "distil_bert_embed": 62, "doc2vec": 63, "elmo_embed": 64, "longformer_embed": 66, "roberta_embed": 67, "roberta_sentence_embed": 68, "sentence_embed": 69, "universal_sentence_encod": 70, "word2vec": 71, "word_embed": 72, "xlm_roberta_embed": 73, "xlm_roberta_sentence_embed": 74, "xlnet_embed": 75, "er": [76, 77], "entity_rul": 76, "graph_extract": 78, "subpackag": [79, 157, 171], "keyword_extract": [80, 81], "yake_keyword_extract": 81, "ld_dl": [82, 83], "language_detector_dl": 83, "lemmat": 84, "matcher": [85, 86, 87, 88, 89, 90], "big_text_match": 85, "date_match": 86, "multi_date_match": 88, "regex_match": 89, "text_match": 90, "n_gram_gener": 91, "ner": [92, 93, 94, 95, 96, 97], "ner_approach": 93, "ner_convert": 94, "ner_crf": 95, "ner_dl": [96, 172, 173, 174, 175, 176, 177, 187, 188, 189, 190, 191, 192], "ner_overwrit": 97, "normal": 98, "param": [99, 100, 101], "classifier_encod": 99, "evaluation_dl_param": 100, "po": [102, 103, 196, 212], "perceptron": 103, "sentenc": [104, 105, 106, 207], "sentence_detector": 105, "sentence_detector_dl": 106, "sentiment": [107, 108, 109], "sentiment_detector": 108, "vivekn_senti": 109, "seq2seq": [110, 111, 112, 113], "gpt2_transform": 110, "marian_transform": 112, "t5_transform": 113, "spell_check": [114, 115, 116, 117], "context_spell_check": 114, "norvig_sweet": 116, "symmetric_delet": 117, "stemmer": 118, "stop_words_clean": 119, "tf_ner_dl_graph_build": 120, "token": [121, 122, 123, 124, 125, 126, 207], "chunk_token": 121, "recursive_token": 123, "regex_token": 124, "token2_chunk": 125, "w": [127, 128], "word_segment": 128, "base": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "audio_assembl": 129, "chunk2_doc": 130, "doc2_chunk": 131, "document_assembl": 132, "embeddings_finish": 133, "finish": [134, 207], "graph_finish": 135, "has_recursive_fit": 136, "has_recursive_transform": 137, "image_assembl": 138, "light_pipelin": 140, "multi_document_assembl": 141, "recursive_pipelin": 142, "table_assembl": 143, "token_assembl": 144, "common": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 206], "annotator_approach": 145, "annotator_model": 146, "annotator_properti": 147, "annotator_typ": 148, "coverage_result": 149, "properti": 151, "read_a": 152, "recursive_annotator_approach": 153, "storag": 154, "util": [155, 169, 200], "function": [155, 156, 157, 183, 206, 208], "packag": 157, "intern": [158, 159, 160, 161, 162, 163], "annotator_java_ml": 158, "annotator_transform": 159, "extended_java_wrapp": 160, "params_getters_sett": 162, "recurs": 163, "log": [164, 165, 202, 204], "comet": [164, 202], "pretrain": [166, 167, 168, 169, 206, 210, 211], "pretrained_pipelin": 167, "resource_download": 168, "train": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 212], "_tf_graph_build": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "graph_build": [170, 185], "create_graph": [172, 187], "dataset_encod": [173, 188], "ner_model": [175, 190], "ner_model_sav": [176, 191], "sentence_group": [177, 192], "tf2contrib": [178, 179, 180, 181, 182, 183, 184], "core_rnn_cel": 178, "fused_rnn_cel": 179, "gru_op": 180, "lstm_op": 182, "rnn": 183, "rnn_cell": 184, "_tf_graph_builders_1x": [185, 186, 187, 188, 189, 190, 191, 192], "conll": [193, 212], "conllu": [194, 212], "pub_tat": 197, "tfgraph": 198, "upload_to_hub": 199, "A": 202, "meta": 202, "machin": [202, 203], "learn": [202, 203], "platform": [202, 203], "pipelin": [202, 207, 210, 211], "paramet": 202, "evalu": 202, "metric": 202, "visual": 202, "run": 202, "an": 202, "offlin": 202, "experi": 202, "mlflow": 203, "lifecycl": 203, "third": 204, "parti": 204, "project": 204, "approach": 206, "model": 206, "note": 206, "avail": [206, 211], "set": 207, "up": 207, "your": 207, "own": 207, "type": 207, "necessari": 207, "import": 207, "construct": 207, "documentassembl": 207, "data": 207, "detect": 207, "out": 207, "put": 207, "all": 207, "togeth": 207, "ml": [207, 211], "helper": 208, "user": 209, "guid": 209, "light": 210, "convert": 210, "pipelinemodel": 210, "download": 211, "As": 211, "lightpipelin": 211, "load": 212, "dataset": 212, "spell": 212, "checker": 212, "pubtat": 212}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"API Reference": [[1, "api-reference"], [201, "api-reference"]], "Getting Started": [[10, "getting-started"]], "Spark NLP Cheat Sheet": [[10, "spark-nlp-cheat-sheet"]], "Requirements": [[10, "requirements"]], "Installation": [[10, "installation"], [202, "installation"]], "Using Conda": [[10, "using-conda"]], "Using Virtualenv": [[10, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[10, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[11, "spark-nlp-documentation"]], "Content": [[11, "content"]], "sparknlp.annotation": [[12, "module-sparknlp.annotation"]], "Module Contents": [[12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [81, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [167, "module-contents"], [170, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"]], "Classes": [[12, "classes"], [13, "classes"], [14, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [78, "classes"], [81, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [170, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [184, "classes"], [185, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [197, "classes"]], "sparknlp.annotation_audio": [[13, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[14, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio": [[15, "module-sparknlp.annotator.audio"]], "Submodules": [[15, "submodules"], [33, "submodules"], [48, "submodules"], [50, "submodules"], [53, "submodules"], [65, "submodules"], [77, "submodules"], [79, "submodules"], [80, "submodules"], [82, "submodules"], [87, "submodules"], [92, "submodules"], [102, "submodules"], [104, "submodules"], [107, "submodules"], [111, "submodules"], [115, "submodules"], [122, "submodules"], [127, "submodules"], [139, "submodules"], [150, "submodules"], [157, "submodules"], [161, "submodules"], [165, "submodules"], [166, "submodules"], [181, "submodules"], [195, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[16, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.chunker": [[17, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[18, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[19, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[20, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[26, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl": [[33, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[41, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[42, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[48, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[49, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.vit_for_image_classification": [[51, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.dependency.dependency_parser": [[52, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[53, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[54, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_normalizer": [[55, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[56, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[58, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[59, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[60, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[61, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[62, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[63, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[64, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[65, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[66, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[67, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[69, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[70, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[71, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[72, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[73, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[75, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[76, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[77, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[78, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[79, "module-sparknlp.annotator"]], "Subpackages": [[79, "subpackages"], [157, "subpackages"], [171, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[80, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[81, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[82, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[83, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[84, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[85, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[86, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[87, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[88, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[89, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[90, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[91, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[92, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[93, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[94, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[95, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[96, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[97, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.normalizer": [[98, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.param.classifier_encoder": [[99, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[100, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[101, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[102, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[103, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[104, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[105, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[106, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[107, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[108, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[109, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[110, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[111, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[112, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[113, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.spell_check.context_spell_checker": [[114, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[115, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[116, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[117, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[118, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[119, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[120, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[121, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[122, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[123, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[124, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.token2_chunk": [[125, "module-sparknlp.annotator.token.token2_chunk"]], "sparknlp.annotator.token.tokenizer": [[126, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[127, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[128, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[129, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.chunk2_doc": [[130, "module-sparknlp.base.chunk2_doc"]], "sparknlp.base.doc2_chunk": [[131, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[132, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[133, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[134, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[135, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[136, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[137, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[138, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[139, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[140, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[141, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[142, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[143, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[144, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[145, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[146, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[147, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[148, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[149, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[150, "module-sparknlp.common"]], "sparknlp.common.properties": [[151, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[152, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[153, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[154, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[155, "module-sparknlp.common.utils"]], "Functions": [[155, "functions"], [156, "functions"], [157, "functions"], [183, "functions"]], "sparknlp.functions": [[156, "module-sparknlp.functions"]], "sparknlp": [[157, "module-sparknlp"]], "Package Contents": [[157, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[158, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[159, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[160, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[161, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[162, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[163, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[164, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[165, "module-sparknlp.logging"]], "sparknlp.pretrained": [[166, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[167, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[168, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[169, "module-sparknlp.pretrained.utils"]], "sparknlp.training._tf_graph_builders.graph_builders": [[170, "module-sparknlp.training._tf_graph_builders.graph_builders"]], "sparknlp.training._tf_graph_builders": [[171, "module-sparknlp.training._tf_graph_builders"]], "sparknlp.training._tf_graph_builders.ner_dl.create_graph": [[172, "module-sparknlp.training._tf_graph_builders.ner_dl.create_graph"]], "sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder": [[173, "module-sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp.training._tf_graph_builders.ner_dl": [[174, "module-sparknlp.training._tf_graph_builders.ner_dl"]], "sparknlp.training._tf_graph_builders.ner_dl.ner_model": [[175, "module-sparknlp.training._tf_graph_builders.ner_dl.ner_model"]], "sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver": [[176, "module-sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper": [[177, "module-sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell": [[178, "module-sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell"]], "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell": [[179, "module-sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops": [[180, "module-sparknlp.training._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp.training._tf_graph_builders.tf2contrib": [[181, "module-sparknlp.training._tf_graph_builders.tf2contrib"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops": [[182, "module-sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn": [[183, "module-sparknlp.training._tf_graph_builders.tf2contrib.rnn"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell": [[184, "module-sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp.training._tf_graph_builders_1x.graph_builders": [[185, "module-sparknlp.training._tf_graph_builders_1x.graph_builders"]], "sparknlp.training._tf_graph_builders_1x": [[186, "module-sparknlp.training._tf_graph_builders_1x"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph": [[187, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder": [[188, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp.training._tf_graph_builders_1x.ner_dl": [[189, "module-sparknlp.training._tf_graph_builders_1x.ner_dl"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model": [[190, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver": [[191, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper": [[192, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp.training.conll": [[193, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[194, "module-sparknlp.training.conllu"]], "sparknlp.training": [[195, "module-sparknlp.training"]], "sparknlp.training.pos": [[196, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[197, "module-sparknlp.training.pub_tator"]], "sparknlp.training.tfgraphs": [[198, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[199, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[200, "module-sparknlp.util"]], "Modules": [[201, "modules"]], "Comet - A meta machine learning platform": [[202, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[202, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[202, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[202, "logging-evaluation-metrics"]], "Logging Visualizations": [[202, "logging-visualizations"]], "Running An Offline Experiment": [[202, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[203, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[204, "third-party-projects"]], "Logging": [[204, "logging"]], "Annotation": [[205, "annotation"]], "Annotators": [[206, "annotators"]], "Annotator Approaches": [[206, "annotator-approaches"]], "Annotator Models": [[206, "annotator-models"]], "Note": [[206, "note"]], "Pretrained Models": [[206, "pretrained-models"]], "Common Functions": [[206, "common-functions"]], "Available Annotators": [[206, "available-annotators"]], "Setting up your own pipeline": [[207, "setting-up-your-own-pipeline"]], "Annotator types": [[207, "annotator-types"]], "Necessary imports": [[207, "necessary-imports"]], "Constructing the Pipeline": [[207, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[207, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[207, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[207, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[207, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[208, "helper-functions"]], "User Guide": [[209, "user-guide"]], "Light Pipelines": [[210, "light-pipelines"]], "Converting PipelineModels": [[210, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[210, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[211, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[211, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[211, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[211, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[211, "available-pipelines"]], "Loading datasets for training": [[212, "loading-datasets-for-training"]], "POS Dataset": [[212, "pos-dataset"]], "CoNLL Dataset": [[212, "conll-dataset"]], "CoNLLU Dataset": [[212, "conllu-dataset"]], "Spell Checkers Dataset": [[212, "spell-checkers-dataset"]], "PubTator Dataset": [[212, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[12, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[12, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[12, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[12, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[12, "sparknlp.annotation.Annotation.fromRow"]], "module": [[12, "module-sparknlp.annotation"], [13, "module-sparknlp.annotation_audio"], [14, "module-sparknlp.annotation_image"], [15, "module-sparknlp.annotator.audio"], [16, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [17, "module-sparknlp.annotator.chunker"], [18, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [19, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [20, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [27, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [28, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [33, "module-sparknlp.annotator.classifier_dl"], [34, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [35, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [36, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [42, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [47, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [48, "module-sparknlp.annotator.coref"], [49, "module-sparknlp.annotator.coref.spanbert_coref"], [50, "module-sparknlp.annotator.cv"], [51, "module-sparknlp.annotator.cv.vit_for_image_classification"], [52, "module-sparknlp.annotator.dependency.dependency_parser"], [53, "module-sparknlp.annotator.dependency"], [54, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [55, "module-sparknlp.annotator.document_normalizer"], [56, "module-sparknlp.annotator.embeddings.albert_embeddings"], [57, "module-sparknlp.annotator.embeddings.bert_embeddings"], [58, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [59, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [60, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [61, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [62, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [63, "module-sparknlp.annotator.embeddings.doc2vec"], [64, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [65, "module-sparknlp.annotator.embeddings"], [66, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [67, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [68, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [69, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [70, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [71, "module-sparknlp.annotator.embeddings.word2vec"], [72, "module-sparknlp.annotator.embeddings.word_embeddings"], [73, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [74, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [75, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [76, "module-sparknlp.annotator.er.entity_ruler"], [77, "module-sparknlp.annotator.er"], [78, "module-sparknlp.annotator.graph_extraction"], [79, "module-sparknlp.annotator"], [80, "module-sparknlp.annotator.keyword_extraction"], [81, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [82, "module-sparknlp.annotator.ld_dl"], [83, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [84, "module-sparknlp.annotator.lemmatizer"], [85, "module-sparknlp.annotator.matcher.big_text_matcher"], [86, "module-sparknlp.annotator.matcher.date_matcher"], [87, "module-sparknlp.annotator.matcher"], [88, "module-sparknlp.annotator.matcher.multi_date_matcher"], [89, "module-sparknlp.annotator.matcher.regex_matcher"], [90, "module-sparknlp.annotator.matcher.text_matcher"], [91, "module-sparknlp.annotator.n_gram_generator"], [92, "module-sparknlp.annotator.ner"], [93, "module-sparknlp.annotator.ner.ner_approach"], [94, "module-sparknlp.annotator.ner.ner_converter"], [95, "module-sparknlp.annotator.ner.ner_crf"], [96, "module-sparknlp.annotator.ner.ner_dl"], [97, "module-sparknlp.annotator.ner.ner_overwriter"], [98, "module-sparknlp.annotator.normalizer"], [99, "module-sparknlp.annotator.param.classifier_encoder"], [100, "module-sparknlp.annotator.param.evaluation_dl_params"], [101, "module-sparknlp.annotator.param"], [102, "module-sparknlp.annotator.pos"], [103, "module-sparknlp.annotator.pos.perceptron"], [104, "module-sparknlp.annotator.sentence"], [105, "module-sparknlp.annotator.sentence.sentence_detector"], [106, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [107, "module-sparknlp.annotator.sentiment"], [108, "module-sparknlp.annotator.sentiment.sentiment_detector"], [109, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [110, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [111, "module-sparknlp.annotator.seq2seq"], [112, "module-sparknlp.annotator.seq2seq.marian_transformer"], [113, "module-sparknlp.annotator.seq2seq.t5_transformer"], [114, "module-sparknlp.annotator.spell_check.context_spell_checker"], [115, "module-sparknlp.annotator.spell_check"], [116, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [117, "module-sparknlp.annotator.spell_check.symmetric_delete"], [118, "module-sparknlp.annotator.stemmer"], [119, "module-sparknlp.annotator.stop_words_cleaner"], [120, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [121, "module-sparknlp.annotator.token.chunk_tokenizer"], [122, "module-sparknlp.annotator.token"], [123, "module-sparknlp.annotator.token.recursive_tokenizer"], [124, "module-sparknlp.annotator.token.regex_tokenizer"], [125, "module-sparknlp.annotator.token.token2_chunk"], [126, "module-sparknlp.annotator.token.tokenizer"], [127, "module-sparknlp.annotator.ws"], [128, "module-sparknlp.annotator.ws.word_segmenter"], [129, "module-sparknlp.base.audio_assembler"], [130, "module-sparknlp.base.chunk2_doc"], [131, "module-sparknlp.base.doc2_chunk"], [132, "module-sparknlp.base.document_assembler"], [133, "module-sparknlp.base.embeddings_finisher"], [134, "module-sparknlp.base.finisher"], [135, "module-sparknlp.base.graph_finisher"], [136, "module-sparknlp.base.has_recursive_fit"], [137, "module-sparknlp.base.has_recursive_transform"], [138, "module-sparknlp.base.image_assembler"], [139, "module-sparknlp.base"], [140, "module-sparknlp.base.light_pipeline"], [141, "module-sparknlp.base.multi_document_assembler"], [142, "module-sparknlp.base.recursive_pipeline"], [143, "module-sparknlp.base.table_assembler"], [144, "module-sparknlp.base.token_assembler"], [145, "module-sparknlp.common.annotator_approach"], [146, "module-sparknlp.common.annotator_model"], [147, "module-sparknlp.common.annotator_properties"], [148, "module-sparknlp.common.annotator_type"], [149, "module-sparknlp.common.coverage_result"], [150, "module-sparknlp.common"], [151, "module-sparknlp.common.properties"], [152, "module-sparknlp.common.read_as"], [153, "module-sparknlp.common.recursive_annotator_approach"], [154, "module-sparknlp.common.storage"], [155, "module-sparknlp.common.utils"], [156, "module-sparknlp.functions"], [157, "module-sparknlp"], [158, "module-sparknlp.internal.annotator_java_ml"], [159, "module-sparknlp.internal.annotator_transformer"], [160, "module-sparknlp.internal.extended_java_wrapper"], [161, "module-sparknlp.internal"], [162, "module-sparknlp.internal.params_getters_setters"], [163, "module-sparknlp.internal.recursive"], [164, "module-sparknlp.logging.comet"], [165, "module-sparknlp.logging"], [166, "module-sparknlp.pretrained"], [167, "module-sparknlp.pretrained.pretrained_pipeline"], [168, "module-sparknlp.pretrained.resource_downloader"], [169, "module-sparknlp.pretrained.utils"], [170, "module-sparknlp.training._tf_graph_builders.graph_builders"], [171, "module-sparknlp.training._tf_graph_builders"], [172, "module-sparknlp.training._tf_graph_builders.ner_dl.create_graph"], [173, "module-sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder"], [174, "module-sparknlp.training._tf_graph_builders.ner_dl"], [175, "module-sparknlp.training._tf_graph_builders.ner_dl.ner_model"], [176, "module-sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver"], [177, "module-sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper"], [178, "module-sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell"], [179, "module-sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell"], [180, "module-sparknlp.training._tf_graph_builders.tf2contrib.gru_ops"], [181, "module-sparknlp.training._tf_graph_builders.tf2contrib"], [182, "module-sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops"], [183, "module-sparknlp.training._tf_graph_builders.tf2contrib.rnn"], [184, "module-sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell"], [185, "module-sparknlp.training._tf_graph_builders_1x.graph_builders"], [186, "module-sparknlp.training._tf_graph_builders_1x"], [187, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph"], [188, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder"], [189, "module-sparknlp.training._tf_graph_builders_1x.ner_dl"], [190, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model"], [191, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver"], [192, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper"], [193, "module-sparknlp.training.conll"], [194, "module-sparknlp.training.conllu"], [195, "module-sparknlp.training"], [196, "module-sparknlp.training.pos"], [197, "module-sparknlp.training.pub_tator"], [198, "module-sparknlp.training.tfgraphs"], [199, "module-sparknlp.upload_to_hub"], [200, "module-sparknlp.util"]], "sparknlp.annotation": [[12, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[12, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[13, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[13, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[13, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[14, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[14, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[14, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio": [[15, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[16, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[16, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[16, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[16, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[16, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "chunker (class in sparknlp.annotator.chunker)": [[17, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[17, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[17, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[18, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[18, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[18, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[18, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (albertforquestionanswering method)": [[18, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[18, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (albertforsequenceclassification method)": [[19, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[19, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[20, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[20, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[20, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[20, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[20, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (albertfortokenclassification method)": [[20, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[20, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[21, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (bertforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bertforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bertfortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (camembertforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (camembertfortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[26, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[26, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[26, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[26, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[26, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[26, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (debertaforquestionanswering method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (debertaforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (debertafortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (distilbertforquestionanswering method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (distilbertforsequenceclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (distilbertfortokenclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl": [[33, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (longformerforquestionanswering method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (longformerfortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[41, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[41, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[42, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[42, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[42, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[42, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforquestionanswering method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforsequenceclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertafortokenclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlnetforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[47, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlnetfortokenclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[48, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "setmaxsentencelength() (spanbertcorefmodel method)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSentenceLength"]], "settextgenre() (spanbertcorefmodel method)": [[49, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[49, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[51, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[51, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[51, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[51, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[51, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[51, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[52, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[52, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[53, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[54, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[55, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[55, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (albertembeddings method)": [[56, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.albert_embeddings": [[56, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (bertembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "setmaxsentencelength() (bertsentenceembeddings method)": [[58, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[58, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (camembertembeddings method)": [[59, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[59, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[60, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[60, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[60, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[60, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (debertaembeddings method)": [[61, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[61, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (distilbertembeddings method)": [[62, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[62, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "pretrained() (doc2vecmodel static method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[63, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[63, "module-sparknlp.annotator.embeddings.doc2vec"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[64, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[65, "module-sparknlp.annotator.embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[66, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[66, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[66, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[66, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (longformerembeddings method)": [[66, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[66, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[67, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[67, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[67, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[67, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (robertaembeddings method)": [[67, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[67, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[68, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[68, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[68, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (robertasentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[69, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[69, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[69, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[70, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[70, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[70, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[70, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[70, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[70, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "pretrained() (word2vecmodel static method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[71, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[71, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[72, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[72, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaembeddings method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[73, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertasentenceembeddings method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[75, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[75, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[75, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[75, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "setmaxsentencelength() (xlnetembeddings method)": [[75, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[75, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setenablepatternregex() (entityrulerapproach method)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setEnablePatternRegex"]], "setpatternsresource() (entityrulerapproach method)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[76, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[76, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[77, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[78, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[78, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[79, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[80, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[81, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[81, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[82, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[83, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[83, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[83, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[83, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[83, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[83, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[83, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[84, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[84, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[84, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[84, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[84, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[84, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[84, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[85, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[85, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[86, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "sparknlp.annotator.matcher.date_matcher": [[86, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[87, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[88, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[88, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[89, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[89, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[89, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[89, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[89, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[89, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[89, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[90, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[90, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[91, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[91, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[91, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[91, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[91, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[92, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[93, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[93, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[94, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setpreserveposition() (nerconverter method)": [[94, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[94, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[94, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[95, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[95, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[96, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[96, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[97, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[97, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[97, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[97, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[97, "module-sparknlp.annotator.ner.ner_overwriter"]], "normalizer (class in sparknlp.annotator.normalizer)": [[98, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[98, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[98, "module-sparknlp.annotator.normalizer"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[99, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[100, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[101, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[102, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[103, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[104, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[105, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[106, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[107, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[108, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[108, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[108, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[108, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[109, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[110, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[110, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[111, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[112, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[112, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[113, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[113, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setcomparelowcase() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setinitialrate() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[114, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[114, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[115, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[116, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[116, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[117, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[117, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[118, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[118, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[119, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[119, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[119, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[119, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[119, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[119, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[119, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[120, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[120, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[121, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[121, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[121, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[122, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[123, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[123, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[123, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[123, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[123, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[123, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[123, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[124, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[124, "module-sparknlp.annotator.token.regex_tokenizer"]], "token2chunk (class in sparknlp.annotator.token.token2_chunk)": [[125, "sparknlp.annotator.token.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token.token2_chunk": [[125, "module-sparknlp.annotator.token.token2_chunk"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[126, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[127, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[128, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[129, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[129, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[129, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[129, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[129, "module-sparknlp.base.audio_assembler"]], "chunk2doc (class in sparknlp.base.chunk2_doc)": [[130, "sparknlp.base.chunk2_doc.Chunk2Doc"]], "sparknlp.base.chunk2_doc": [[130, "module-sparknlp.base.chunk2_doc"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[131, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[131, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[132, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[132, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[132, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[132, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[132, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[132, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[132, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[132, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[133, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "setcleanannotations() (embeddingsfinisher method)": [[133, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[133, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[133, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[133, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[133, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[134, "sparknlp.base.finisher.Finisher"]], "setannotationsplitsymbol() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[134, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[134, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[135, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[135, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[135, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[135, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[135, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[135, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[136, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[136, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[137, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[137, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[138, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[138, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[138, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[138, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[138, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[139, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[140, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[140, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[140, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[140, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[140, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[140, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[140, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[140, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[141, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[141, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[142, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[142, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[142, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[143, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[143, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[143, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[143, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[143, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[144, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[144, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[144, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[145, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[145, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[146, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[146, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[147, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[148, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[149, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[150, "module-sparknlp.common"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[151, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[151, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setdimension() (hasembeddingsproperties method)": [[151, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "sparknlp.common.properties": [[151, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[152, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[152, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[153, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[153, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[154, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[155, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[155, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[156, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[156, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[156, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[156, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[156, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[156, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[156, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[156, "module-sparknlp.functions"]], "sparknlp": [[157, "module-sparknlp"]], "start() (in module sparknlp)": [[157, "sparknlp.start"]], "version() (in module sparknlp)": [[157, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[158, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[158, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[158, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[158, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[159, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[159, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[160, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[160, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[160, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[161, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[162, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[162, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[162, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[162, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[163, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[163, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[163, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[163, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[164, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[164, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[164, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[165, "module-sparknlp.logging"]], "sparknlp.pretrained": [[166, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[167, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[167, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[167, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[167, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[167, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[167, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "sparknlp.pretrained.resource_downloader": [[168, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[169, "module-sparknlp.pretrained.utils"]], "nertfgraphbuilder (class in sparknlp.training._tf_graph_builders.graph_builders)": [[170, "sparknlp.training._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp.training._tf_graph_builders.graph_builders)": [[170, "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp.training._tf_graph_builders.graph_builders)": [[170, "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[170, "sparknlp.training._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[170, "sparknlp.training._tf_graph_builders.graph_builders.WrongTFVersion"], [185, "sparknlp.training._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (tfgraphbuilderfactory static method)": [[170, "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [185, "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "get_models() (tfgraphbuilderfactory static method)": [[170, "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [185, "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[170, "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [185, "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp.training._tf_graph_builders.graph_builders": [[170, "module-sparknlp.training._tf_graph_builders.graph_builders"]], "sparknlp.training._tf_graph_builders": [[171, "module-sparknlp.training._tf_graph_builders"]], "sparknlp.training._tf_graph_builders.ner_dl.create_graph": [[172, "module-sparknlp.training._tf_graph_builders.ner_dl.create_graph"]], "sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder": [[173, "module-sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp.training._tf_graph_builders.ner_dl": [[174, "module-sparknlp.training._tf_graph_builders.ner_dl"]], "sparknlp.training._tf_graph_builders.ner_dl.ner_model": [[175, "module-sparknlp.training._tf_graph_builders.ner_dl.ner_model"]], "sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver": [[176, "module-sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper": [[177, "module-sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell)": [[178, "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell)": [[178, "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell)": [[178, "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "call() (embeddingwrapper method)": [[178, "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[178, "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[178, "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell": [[178, "module-sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell"]], "fusedrnncell (class in sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[179, "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[179, "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[179, "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell": [[179, "module-sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp.training._tf_graph_builders.tf2contrib.gru_ops)": [[180, "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp.training._tf_graph_builders.tf2contrib.gru_ops)": [[180, "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "build() (grublockcellv2 method)": [[180, "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[180, "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops": [[180, "module-sparknlp.training._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp.training._tf_graph_builders.tf2contrib": [[181, "module-sparknlp.training._tf_graph_builders.tf2contrib"]], "lstmblockcell (class in sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops)": [[182, "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops)": [[182, "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops)": [[182, "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "call() (lstmblockcell method)": [[182, "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[182, "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[182, "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops": [[182, "module-sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn": [[183, "module-sparknlp.training._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp.training._tf_graph_builders.tf2contrib.rnn)": [[183, "sparknlp.training._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp.training._tf_graph_builders.tf2contrib.rnn)": [[183, "sparknlp.training._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "phasedlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "call() (attentioncellwrapper method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (phasedlstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[184, "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell": [[184, "module-sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell"]], "nertfgraphbuilder (class in sparknlp.training._tf_graph_builders_1x.graph_builders)": [[185, "sparknlp.training._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp.training._tf_graph_builders_1x.graph_builders)": [[185, "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp.training._tf_graph_builders_1x.graph_builders)": [[185, "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp.training._tf_graph_builders_1x.graph_builders": [[185, "module-sparknlp.training._tf_graph_builders_1x.graph_builders"]], "sparknlp.training._tf_graph_builders_1x": [[186, "module-sparknlp.training._tf_graph_builders_1x"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph": [[187, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder": [[188, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp.training._tf_graph_builders_1x.ner_dl": [[189, "module-sparknlp.training._tf_graph_builders_1x.ner_dl"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model": [[190, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver": [[191, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper": [[192, "module-sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "conll (class in sparknlp.training.conll)": [[193, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[193, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[193, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[194, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[194, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[194, "module-sparknlp.training.conllu"]], "sparknlp.training": [[195, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[196, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[196, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[196, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[197, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[197, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[197, "module-sparknlp.training.pub_tator"]], "sparknlp.training.tfgraphs": [[198, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[199, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[200, "module-sparknlp.util"]]}})