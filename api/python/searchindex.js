Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token2_chunk/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token2_chunk/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "thi": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 83, 84, 85, 88, 89, 90, 93, 94, 95, 96, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 125, 126, 128, 129, 131, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 147, 151, 152, 158, 159, 163, 164, 165, 168, 169, 174, 176, 180, 181, 184, 185, 186, 188, 189, 190], "can": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 88, 93, 94, 95, 96, 97, 103, 105, 106, 108, 110, 111, 113, 114, 115, 117, 118, 120, 128, 131, 132, 140, 141, 142, 143, 156, 165, 168, 169, 171, 172, 174, 181, 183, 185, 186, 188, 189, 190, 191], "quick": [0, 181, 186], "refer": [0, 1, 5, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 80, 97, 105, 106, 109, 110, 111, 113, 114, 115, 117, 118, 128, 130, 131, 140, 185, 187, 188], "how": [0, 1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 56, 58, 59, 60, 61, 63, 65, 66, 68, 72, 74, 75, 77, 82, 83, 84, 88, 89, 93, 94, 95, 98, 100, 105, 108, 117, 118, 125, 126, 128, 131, 134, 140, 151, 153, 156, 158, 171, 172, 176, 181, 185, 190], "set": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 144, 146, 147, 152, 156, 158, 163, 164, 165, 169, 171, 181, 185, 188, 189], "up": [0, 1, 5, 20, 32, 62, 65, 68, 70, 80, 110, 111, 113, 114, 158, 181, 185, 188, 189], "your": [0, 1, 20, 32, 37, 51, 61, 62, 66, 68, 70, 83, 84, 88, 89, 93, 94, 95, 98, 103, 108, 109, 115, 117, 122, 124, 128, 132, 183, 185, 188, 189, 191], "environ": [0, 182], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 58, 62, 70, 80, 113, 128], "johnsnowlab": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 88, 89, 94, 95, 97, 98, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 126, 128, 132, 133, 142, 158], "load": [0, 1, 3, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 80, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 137, 168, 169, 176, 185, 188], "shell": 0, "packag": [0, 55, 60, 165, 182, 183], "com": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 88, 89, 94, 95, 97, 98, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 126, 128, 142, 158], "nlp_2": [0, 158], "12": [0, 55, 72, 73, 74, 80, 85, 87, 93, 103, 115, 139, 143, 157, 158, 168, 174, 176, 184], "pyspark": [0, 2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 137, 139, 140, 142, 143, 144, 157, 158, 161, 164, 165, 168, 171, 172, 174, 175, 185, 186], "submit": [0, 165, 181], "extern": [0, 80, 83, 88, 89, 95, 115, 121, 141, 156, 171, 172, 174, 175], "jar": [0, 158], "after": [0, 50, 51, 53, 62, 66, 67, 70, 85, 87, 93, 124, 144, 165, 184, 185], "compil": 0, "build": [0, 60, 61, 66, 67, 77, 80, 84, 111, 165, 181], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 144, 156, 157, 158, 164, 165, 169, 171, 174, 175, 176, 181, 182, 184, 185, 186, 188, 189, 190, 191], "built": [0, 20, 32, 140], "top": [0, 5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 55, 80, 110, 111, 114, 140], "apach": [0, 140, 158], "x": [0, 32, 157, 171, 191], "For": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 131, 132, 133, 140, 144, 165, 168, 175, 181, 182, 184, 185, 186, 187, 188, 189], "you": [0, 51, 53, 59, 61, 66, 68, 77, 85, 96, 113, 132, 134, 139, 158, 165, 169, 174, 176, 181, 183, 185, 186, 189, 190, 191], "need": [0, 5, 7, 9, 51, 53, 61, 66, 71, 75, 77, 80, 85, 88, 94, 95, 98, 100, 103, 106, 109, 111, 115, 117, 118, 125, 126, 129, 137, 139, 165, 169, 171, 172, 174, 181, 183, 185, 186, 189, 191], "java": [0, 82, 145, 146, 154, 160, 161, 164, 169], "8": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 46, 51, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 72, 73, 74, 85, 90, 95, 96, 100, 111, 115, 128, 143, 171, 176], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 56, 58, 60, 61, 63, 65, 66, 69, 71, 72, 73, 74, 75, 77, 80, 82, 83, 85, 88, 90, 93, 95, 96, 97, 98, 103, 105, 106, 109, 110, 111, 113, 114, 115, 119, 121, 128, 132, 139, 141, 142, 151, 153, 157, 158, 165, 169, 175, 176, 181, 182, 183, 184, 185, 186, 189, 190, 191], "note": [0, 5, 7, 20, 32, 37, 55, 61, 63, 66, 68, 71, 72, 74, 80, 95, 110, 111, 113, 114, 139, 158, 190], "sinc": [0, 54, 80, 111, 158, 185, 186, 190], "version": [0, 54, 61, 99, 100, 121, 147, 152, 158, 163, 164, 168, 169, 185, 190], "6": [0, 20, 37, 48, 56, 57, 60, 63, 80, 84, 89, 90, 96, 103, 110, 117, 143, 158, 172, 176, 185], "deprec": [0, 158], "If": [0, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 46, 48, 49, 68, 71, 75, 82, 85, 87, 93, 94, 95, 98, 100, 105, 106, 110, 111, 113, 114, 115, 121, 158, 164, 165, 169, 181, 183, 185], "consid": [0, 71, 77, 80, 113, 115, 117, 118, 120, 124, 158, 169], "stick": [0, 158], "lower": [0, 54, 55, 80, 115, 130, 158], "7": [0, 8, 37, 48, 56, 57, 60, 85, 87, 103, 111, 133, 174, 176, 184], "we": [0, 5, 7, 20, 32, 46, 48, 49, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 80, 94, 95, 98, 106, 110, 111, 113, 114, 115, 117, 126, 139, 157, 181, 184, 185, 186, 189, 190, 191], "recommend": [0, 63, 74, 108, 109, 110, 111, 113, 114], "It": [0, 11, 14, 16, 20, 22, 25, 27, 30, 32, 33, 35, 37, 38, 40, 42, 46, 48, 54, 56, 57, 58, 60, 61, 62, 65, 66, 67, 70, 72, 73, 75, 80, 90, 109, 110, 113, 115, 117, 118, 124, 133, 139, 169, 184, 189], "have": [0, 5, 20, 32, 37, 55, 58, 61, 66, 67, 71, 80, 88, 90, 93, 94, 95, 96, 103, 105, 106, 111, 118, 143, 144, 160, 185, 186, 189], "basic": [0, 48, 80, 105, 184], "knowledg": [0, 61, 80, 134], "framework": [0, 7, 110, 113, 114], "work": [0, 46, 61, 65, 82, 110, 113, 114, 122, 184, 186, 190], "befor": [0, 54, 71, 85, 87, 110, 114, 117, 125, 128, 146, 164, 181], "pleas": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 56, 57, 58, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 82, 83, 84, 85, 88, 89, 94, 95, 98, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 128, 131, 140, 141, 182, 183, 187, 190], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 139, 140, 142, 143, 144, 165, 168, 171, 172, 174, 176, 181, 185, 186, 188, 189, 190], "first": [0, 2, 60, 62, 63, 70, 72, 73, 80, 88, 94, 95, 96, 105, 110, 113, 114, 115, 120, 125, 132, 144, 151, 181, 185, 186, 190], "let": [0, 61, 124, 185], "": [0, 1, 10, 13, 16, 17, 21, 24, 27, 29, 33, 34, 39, 46, 48, 49, 54, 55, 58, 60, 61, 62, 65, 66, 67, 70, 72, 73, 75, 80, 88, 95, 98, 109, 110, 111, 113, 114, 115, 117, 118, 124, 125, 126, 128, 129, 133, 139, 145, 146, 154, 157, 160, 164, 165, 181, 184, 185, 186, 189], "make": [0, 46, 48, 54, 58, 65, 72, 73, 80, 106, 109, 110, 117, 187, 191], "sure": [0, 109], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 45, 46, 48, 50, 51, 53, 55, 56, 57, 60, 62, 63, 67, 70, 71, 72, 73, 74, 80, 84, 85, 87, 88, 89, 90, 93, 94, 95, 97, 99, 100, 105, 106, 109, 110, 111, 113, 114, 115, 121, 125, 128, 132, 133, 147, 152, 158, 163, 164, 165, 168, 169, 171, 172, 175, 176, 181, 184, 185, 189, 190], "0_292": 0, "creat": [0, 2, 3, 4, 20, 32, 37, 56, 57, 62, 66, 70, 71, 77, 95, 100, 103, 122, 128, 139, 141, 157, 171, 172, 174, 175, 185, 186, 189, 191], "new": [0, 2, 3, 4, 8, 37, 45, 48, 50, 55, 56, 57, 60, 63, 65, 71, 74, 96, 97, 99, 100, 110, 111, 114, 115, 121, 133, 147, 152, 163, 164, 184, 185], "manag": [0, 80, 169, 182], "all": [0, 2, 3, 4, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 48, 54, 55, 56, 57, 58, 68, 71, 74, 75, 78, 82, 85, 95, 98, 110, 111, 114, 115, 120, 125, 128, 132, 134, 151, 165, 169, 180, 185, 190], "depend": [0, 2, 45, 58, 68, 74, 75, 77, 78, 80, 82, 95, 113, 115, 128, 158], "Then": [0, 20, 32, 94, 95, 144, 165, 185], "sparknlp": [0, 181, 184, 185, 186, 187, 189, 190, 191], "n": [0, 73, 80, 90, 93, 94, 95, 105, 106, 110, 111, 114, 124, 139, 142, 157, 168], "y": [0, 32], "activ": [0, 11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 80], "jupyt": [0, 165, 181], "now": [0, 58, 106, 139, 186], "should": [0, 2, 3, 4, 9, 20, 32, 37, 46, 48, 49, 62, 70, 72, 80, 82, 89, 90, 94, 95, 100, 105, 106, 113, 115, 125, 139, 146, 147, 160, 164, 168, 171, 172], "readi": [0, 20, 168, 185], "notebook": [0, 165, 181], "run": [0, 61, 80, 165, 169, 182, 190], "also": [0, 20, 32, 37, 46, 48, 49, 54, 55, 63, 65, 71, 72, 73, 75, 77, 80, 85, 88, 93, 94, 95, 99, 100, 106, 109, 110, 120, 139, 142, 147, 152, 163, 181, 185, 186, 187, 188, 190], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 171, 172, 174, 175, 176, 182], "bin": 0, "A": [0, 5, 7, 37, 45, 46, 55, 66, 67, 71, 75, 80, 83, 84, 88, 89, 90, 97, 98, 108, 110, 111, 113, 114, 117, 118, 125, 126, 165, 174, 183, 185, 191], "retriev": [0, 71, 83, 117, 118, 119, 165, 168, 181, 185, 186], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 157, 165, 168, 171, 172, 174, 175, 176, 181, 184, 185, 188, 189, 190, 191], "manual": [0, 184], "sparksess": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 71, 72, 73, 74, 84, 110, 111, 113, 114, 158, 171, 172, 174, 175], "becaus": [0, 108, 146, 164], "other": [0, 5, 8, 32, 46, 58, 68, 69, 77, 80, 98, 108, 110, 111, 114, 115, 122, 124, 132, 133, 185], "configur": [0, 46, 68, 126, 158], "includ": [0, 48, 54, 56, 57, 62, 63, 70, 72, 73, 74, 77, 80, 85, 93, 94, 95, 110, 111, 114, 115, 133, 165, 175, 182, 184, 185, 186, 191], "them": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 58, 60, 61, 65, 66, 72, 74, 75, 77, 80, 85, 88, 106, 113, 115, 120, 128, 141, 144, 185, 186], "builder": [0, 121, 158], "appnam": [0, 158], "master": [0, 158], "local": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 80, 110, 111, 113, 114, 120, 139, 158, 168, 189], "config": [0, 158, 182], "driver": [0, 158], "memori": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 55, 63, 71, 158], "16g": [0, 158], "maxresults": [0, 158], "0": [0, 5, 7, 8, 9, 20, 32, 37, 45, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 82, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 110, 111, 114, 115, 118, 121, 126, 128, 131, 132, 133, 139, 140, 142, 143, 144, 147, 152, 157, 158, 161, 163, 164, 165, 168, 169, 172, 174, 175, 176, 181, 184, 185, 190, 191], "kryoseri": [0, 158], "buffer": [0, 57, 71, 158], "max": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 58, 60, 61, 65, 66, 67, 72, 73, 74, 80, 118, 158], "2000m": [0, 158], "getorcr": [0, 158], "main": [1, 75, 126, 184, 188, 191], "page": [1, 54, 111, 168, 180, 188, 190], "github": [1, 60, 66, 113, 168], "issu": [1, 128], "workshop": [1, 188], "model": [1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 88, 89, 93, 94, 95, 97, 98, 100, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 121, 122, 124, 126, 128, 146, 158, 164, 165, 168, 169, 181, 182, 184, 188, 190, 191], "hub": [1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 82, 83, 94, 95, 103, 106, 110, 111, 113, 114, 115, 117, 118, 120, 128], "welcom": [1, 5, 7], "python": [1, 82, 158], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 179, 181, 184, 185], "inform": [1, 51, 53, 71, 72, 80, 85, 93, 110, 115, 131, 140, 175, 181, 182, 183, 184, 185, 191], "us": [1, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 97, 100, 103, 105, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 121, 125, 126, 128, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 151, 157, 158, 165, 168, 169, 171, 172, 174, 175, 182, 183, 184, 185, 186, 188], "librari": [1, 46, 48, 49, 82, 130, 131, 132, 140, 144, 190], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 157, 165, 168, 169, 171, 172, 174, 175, 176, 181, 184, 185, 186, 188, 189, 190, 191], "get": [1, 20, 32, 80, 92, 103, 115, 121, 126, 128, 129, 131, 132, 133, 137, 139, 140, 147, 152, 163, 181, 185, 190, 191], "start": [1, 5, 10, 13, 17, 21, 24, 29, 34, 39, 65, 77, 80, 94, 95, 106, 130, 158, 165, 181, 184, 186, 189, 190], "cheat": 1, "sheet": [1, 54], "requir": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 53, 55, 57, 60, 63, 69, 72, 73, 80, 95, 98, 109, 115, 128, 130, 132, 143, 144, 184, 185, 186], "instal": [1, 165, 183], "session": [1, 158, 171, 172, 174, 175], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 146, 157, 158, 161, 164, 165, 168, 171, 172, 174, 175, 176, 181, 184, 185, 186, 189, 190, 191], "user": [1, 93, 94, 126, 141, 158, 165, 181], "guid": [1, 182], "annot": [1, 3, 4, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 156, 157, 158, 159, 160, 162, 164, 165, 168, 169, 170, 174, 176, 181, 182, 187, 188, 189, 190, 191], "own": [1, 20, 32, 37, 51, 62, 70, 83, 84, 88, 89, 94, 95, 98, 103, 108, 109, 115, 117, 122, 124, 128, 188, 189, 191], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 158, 164, 165, 167, 168, 169, 170, 182, 184, 185, 188], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 82, 83, 84, 85, 88, 89, 94, 95, 96, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 132, 133, 139, 157, 158, 165, 181, 184, 188], "dataset": [1, 20, 32, 37, 51, 53, 58, 62, 65, 66, 67, 70, 71, 80, 82, 94, 95, 100, 106, 111, 115, 128, 164, 168, 171, 172, 174, 175, 188], "train": [1, 5, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 69, 70, 72, 73, 74, 80, 82, 83, 84, 88, 89, 92, 94, 95, 98, 99, 100, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 122, 124, 128, 130, 139, 158, 165, 168, 181, 185, 186, 188, 189], "light": [1, 5, 61, 74, 80, 139, 188, 190], "helper": [1, 103, 128, 134, 157, 174, 175, 176, 188, 191], "function": [1, 63, 71, 110, 114, 132, 169, 180, 188], "third": [1, 105, 120, 166, 171], "parti": [1, 166], "project": [1, 80, 113, 165, 182], "log": [1, 20, 32, 37, 95, 100, 106, 111, 158], "api": [1, 181, 185, 188], "modul": [1, 28, 52, 64, 76, 78, 79, 81, 86, 91, 101, 102, 104, 107, 112, 116, 123, 127, 138, 150, 162, 167, 173], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 157, 165, 168, 171, 172, 173, 174, 175, 182, 184, 185, 189, 190, 191], "format": [2, 3, 4, 46, 48, 49, 51, 53, 75, 77, 83, 84, 85, 87, 88, 89, 94, 95, 98, 100, 108, 110, 114, 117, 118, 126, 128, 129, 131, 133, 134, 137, 140, 142, 171, 172, 174, 175, 176, 182, 191], "annotatortyp": [2, 3, 4, 59, 90, 130, 131, 137, 140, 184], "begin": [2, 45, 93, 111, 124, 126, 130, 131, 140, 157, 184], "end": [2, 10, 13, 17, 21, 24, 29, 34, 39, 45, 95, 106, 110, 124, 126, 128, 131, 140, 157, 165, 171, 181, 184, 186], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 143, 144, 157, 158, 165, 168, 171, 172, 176, 181, 182, 184, 185, 186, 189, 190], "metadata": [2, 3, 4, 38, 45, 50, 80, 89, 94, 95, 97, 103, 131, 133, 137, 139, 140, 157, 165, 169, 184, 186], "embed": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 77, 78, 94, 95, 96, 131, 132, 133, 139, 140, 152, 157, 158, 164, 168, 184], "repres": [2, 3, 4, 51, 53, 55, 60, 74, 75, 77, 84, 89, 90, 126, 165, 168, 185], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 143, 144, 147, 157, 158, 165, 174, 181, 184, 185, 186], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 150, 153, 157, 158, 160, 161, 162, 165, 168, 169, 171, 172, 174, 175, 176, 180, 182, 183, 184, 185, 187, 188, 189, 191], "nlp": [2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 82, 83, 84, 88, 89, 94, 95, 96, 97, 98, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 126, 128, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 150, 158, 162, 165, 168, 169, 171, 172, 174, 175, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191], "detail": [2, 3, 4, 72, 73, 80, 97, 110, 111, 114], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 143, 144, 147, 152, 156, 157, 158, 163, 164, 165, 168, 169, 171, 172, 174, 175], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 144, 147, 156, 157, 158, 163, 165, 168, 169, 171, 172, 174, 175], "The": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 125, 126, 128, 131, 133, 139, 140, 142, 157, 158, 165, 168, 169, 171, 172, 174, 175, 176, 181, 184, 185, 186, 188, 189, 191], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 143, 144, 157, 159, 168, 174, 184, 185, 188], "possibl": [2, 3, 4, 59, 61, 72, 73, 75, 105, 115, 118, 131, 140, 151, 153, 165, 181], "valu": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 57, 59, 63, 69, 72, 75, 77, 80, 82, 83, 85, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 109, 110, 111, 113, 114, 115, 117, 120, 121, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 144, 147, 151, 152, 153, 163, 165, 181, 191], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 80, 83, 84, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 103, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 128, 130, 132, 139, 141, 143, 144, 158, 168, 171, 175, 176, 185, 189, 190], "wordpiec": 2, "word_embed": [2, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 78, 94, 95, 100], "sentence_embed": [2, 20, 32, 37, 57, 62, 64, 67, 69, 73, 78, 165, 181, 185], "categori": [2, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 46, 48, 49, 165, 181, 185], "date": [2, 50, 85, 87, 88], "entiti": [2, 8, 12, 15, 19, 23, 26, 31, 36, 41, 43, 45, 48, 50, 58, 75, 76, 77, 84, 89, 91, 92, 93, 94, 95, 96, 97, 122, 133, 139, 143, 168], "sentiment": [2, 20, 32, 37, 63, 74, 78, 114, 158, 185, 186], "po": [2, 9, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 51, 53, 77, 78, 94, 95, 124, 128, 139, 157, 158, 168, 171, 173, 184, 188, 189, 190], "chunk": [2, 8, 9, 10, 13, 17, 21, 24, 29, 34, 38, 39, 50, 59, 62, 70, 75, 80, 84, 88, 89, 90, 93, 122, 130, 133, 143, 157, 165, 175, 181, 191], "named_ent": [2, 12, 15, 19, 23, 26, 31, 36, 41, 43, 77, 93, 94, 95, 96, 97, 100, 139, 168], "negex": 2, "labeled_depend": [2, 53], "languag": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 130, 140, 144, 169, 185], "keyword": [2, 79, 80, 108], "dummi": [2, 54], "int": [2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 71, 72, 73, 74, 77, 80, 82, 85, 90, 92, 94, 95, 98, 99, 100, 103, 105, 106, 109, 110, 111, 113, 114, 115, 118, 121, 125, 126, 128, 152, 158, 165, 171], "index": [2, 80, 84, 125, 158, 171], "charact": [2, 54, 63, 65, 75, 82, 88, 90, 98, 105, 106, 115, 117, 118, 125, 126, 128, 133], "under": [2, 61, 74, 80, 158], "last": [2, 85, 87, 122, 176, 189], "string": [2, 20, 32, 37, 45, 51, 54, 75, 88, 90, 96, 98, 106, 114, 118, 120, 124, 130, 131, 133, 137, 139, 140, 189], "dict": [2, 3, 4, 51, 53, 75, 83, 84, 88, 89, 94, 96, 97, 98, 100, 108, 115, 117, 118, 126, 139, 156, 158, 164, 165, 168], "associ": [2, 3, 4, 32, 69, 75, 88, 93, 165], "list": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 75, 77, 80, 82, 85, 88, 92, 93, 95, 96, 97, 98, 99, 105, 106, 110, 111, 113, 114, 115, 120, 124, 126, 132, 133, 139, 140, 147, 157, 164, 165, 168, 169, 176, 180, 185], "vector": [2, 32, 56, 57, 59, 60, 62, 63, 69, 70, 71, 132, 133, 184], "where": [2, 32, 60, 63, 75, 80, 83, 84, 88, 89, 90, 103, 106, 108, 110, 111, 114, 117, 118, 128, 130, 174], "applic": [2, 49, 80, 110, 151, 165, 166, 181, 183], "copi": [2, 3, 4], "differ": [2, 3, 4, 46, 48, 51, 53, 63, 66, 67, 72, 74, 80, 85, 105, 106, 115, 126, 128, 139, 165, 189], "return": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 82, 83, 84, 89, 90, 92, 94, 95, 97, 103, 105, 106, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 124, 126, 128, 130, 139, 156, 157, 158, 159, 164, 168, 169, 171, 172, 174, 175], "newli": [2, 3, 4], "static": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 169, 185], "datatyp": [2, 157], "structtyp": 2, "schema": [2, 93, 165, 181], "look": [2, 95, 117, 184], "like": [2, 5, 10, 13, 17, 20, 21, 24, 29, 34, 39, 45, 54, 55, 59, 61, 65, 68, 74, 77, 80, 88, 93, 106, 109, 111, 115, 126, 128, 165, 181, 183, 184], "struct": [2, 131, 137, 140], "containsnul": [2, 32, 129, 131, 137, 140], "true": [2, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 49, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 82, 84, 85, 87, 89, 93, 95, 98, 105, 106, 115, 117, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 140, 142, 165, 171, 172, 175, 176, 181, 185, 186], "nullabl": [2, 32, 129, 131, 137, 140], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 139, 140, 142, 143, 144, 157, 158, 165, 168, 171, 172, 174, 176, 181, 184, 185, 186, 191], "integ": [2, 46, 48, 49, 131, 137, 140], "map": [2, 9, 32, 71, 75, 99, 100, 103, 115, 131, 137, 140, 147, 152, 157, 163, 164, 184], "kei": [2, 5, 46, 51, 53, 66, 67, 72, 73, 83, 97, 131, 137, 139, 140, 165, 168, 181], "valuecontainsnul": [2, 131, 137, 140], "arrai": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 72, 73, 74, 82, 83, 90, 95, 99, 103, 105, 106, 110, 111, 113, 114, 115, 122, 124, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 157, 186, 189], "element": [2, 32, 90, 129, 131, 137, 140], "float": [2, 3, 5, 7, 20, 32, 37, 46, 50, 82, 94, 95, 97, 99, 100, 106, 110, 111, 114, 115, 128, 129, 131, 132, 139, 140], "sql": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 71, 72, 73, 74, 84, 110, 111, 113, 114, 139, 157, 164, 168, 171, 172, 174, 175], "arraytyp": [2, 130, 157], "fromrow": 2, "row": [2, 38, 71, 105, 106, 109, 131, 140, 142, 157, 171], "column": [2, 8, 20, 32, 37, 54, 71, 83, 92, 94, 95, 99, 100, 103, 109, 121, 126, 128, 129, 130, 131, 132, 133, 134, 137, 140, 144, 147, 157, 168, 171, 174, 185], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 142, 143, 144, 157, 160, 164, 165, 168, 181, 184, 185, 186, 189, 190, 191], "an": [2, 5, 7, 9, 20, 32, 37, 38, 46, 48, 49, 51, 54, 58, 60, 63, 65, 74, 75, 80, 82, 84, 85, 87, 88, 89, 90, 94, 95, 97, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 122, 126, 128, 130, 131, 132, 133, 134, 139, 140, 144, 147, 152, 156, 157, 159, 163, 164, 165, 171, 172, 174, 175, 180, 182, 184, 185, 186, 188, 189], "annotationaudio": 3, "audio": [3, 129, 165], "alreadi": [3, 77, 80, 94, 95, 96, 126, 139, 143, 168, 189], "process": [3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 70, 72, 73, 74, 77, 80, 82, 93, 94, 95, 100, 106, 110, 111, 114, 128, 129, 130, 131, 132, 133, 137, 140, 141, 144, 165, 181, 184, 185, 186, 187], "file": [3, 5, 7, 20, 32, 37, 51, 53, 54, 69, 71, 75, 83, 84, 88, 89, 94, 95, 98, 100, 106, 108, 115, 117, 118, 121, 126, 129, 142, 153, 158, 165, 171, 172, 174, 175, 181, 191], "byte": [3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 82, 95, 99, 110, 111, 113, 114, 115, 165], "annotationimag": [4, 139, 168], "origin": [4, 46, 48, 49, 55, 62, 65, 66, 70, 93, 106, 110, 137], "height": [4, 46, 48, 49, 137], "width": [4, 46, 48, 49, 137], "nchannel": [4, 137], "mode": [4, 20, 32, 37, 95, 100, 117, 131, 137, 140, 165], "imag": [4, 46, 48, 49, 137, 139, 168], "uri": 4, "pixel": [4, 48], "number": [4, 16, 20, 27, 32, 33, 37, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 90, 92, 94, 95, 99, 103, 105, 106, 110, 111, 114, 115, 121, 128, 171, 172], "color": 4, "channel": [4, 46, 48, 49, 115], "opencv": 4, "concern": [5, 7, 11, 46, 48, 49, 50, 55], "hubertforctc": 5, "classnam": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 88, 89, 94, 95, 97, 98, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 126, 128, 142, 145, 146, 154, 160], "java_model": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 88, 89, 94, 95, 97, 98, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 124, 126, 128, 136, 142, 146, 164], "none": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 88, 89, 94, 95, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 140, 142, 143, 146, 158, 164, 165, 168, 169, 186], "hubert": 5, "head": [5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 45, 55, 74, 93, 94, 95, 139, 157, 168, 185], "connectionist": [5, 7], "tempor": [5, 7], "classif": [5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 69, 109, 110, 114, 185], "ctc": [5, 7], "wa": [5, 7, 11, 12, 14, 15, 16, 20, 22, 23, 25, 26, 27, 30, 31, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 54, 58, 60, 61, 65, 66, 67, 71, 72, 73, 80, 109, 110, 111, 115, 168, 185, 186], "propos": [5, 7, 46, 48, 55, 58, 60, 61, 66, 67, 72, 73, 74], "self": [5, 7, 48, 55, 65, 113], "supervis": [5, 7, 55, 63, 69, 80, 110, 111], "speech": [5, 7, 9, 58, 102, 103, 128, 174, 191], "represent": [5, 7, 48, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 93, 114, 142, 156], "learn": [5, 7, 20, 32, 37, 50, 55, 61, 62, 63, 66, 67, 69, 70, 72, 73, 74, 80, 94, 95, 99, 106, 110, 111, 114, 115, 165, 183], "mask": [5, 48, 60, 72, 73, 74, 110, 125], "predict": [5, 48, 60, 95, 111, 114, 165, 181], "hidden": [5, 10, 12, 13, 15, 17, 19, 21, 23, 24, 26, 29, 31, 34, 36, 39, 41, 43, 55, 63, 74, 121], "unit": [5, 111, 121], "wei": [5, 48], "ning": 5, "hsu": 5, "benjamin": [5, 58], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 38, 58, 77, 89, 99, 100, 117, 120, 126, 141, 147, 152, 163, 171, 184, 185, 189, 190], "transcrib": [5, 7], "text": [5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 45, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 140, 142, 143, 144, 151, 153, 156, 157, 165, 171, 172, 174, 175, 181, 184, 185, 186, 190, 191], "provid": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 82, 83, 84, 85, 87, 88, 89, 94, 95, 98, 99, 100, 103, 106, 108, 110, 111, 113, 114, 115, 117, 118, 128, 139, 147, 152, 157, 159, 163, 168, 186], "pre": [5, 7, 20, 32, 37, 49, 56, 57, 60, 61, 63, 69, 95, 100, 110, 114, 131, 133, 140, 144, 172, 185], "current": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 71, 72, 73, 74, 80, 84, 85, 87, 106, 110, 111, 113, 114, 121, 139, 142, 147, 158, 184, 185, 186], "support": [5, 7, 20, 32, 55, 65, 80, 95, 98, 106, 113, 120, 142, 158, 182], "appl": [5, 7, 57, 67, 73, 158], "silicon": [5, 7, 158], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 55, 65, 110], "instruct": [5, 7], "xla": [5, 7], "companion": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 94, 95, 97, 103, 106, 110, 111, 113, 114, 115, 117, 118, 120, 128, 161], "object": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 94, 95, 97, 103, 106, 110, 111, 113, 114, 115, 117, 118, 119, 120, 128, 151, 153, 160, 161, 165, 184, 185], "speechtotext": [5, 7], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 140, 142, 143, 144, 147, 165, 181, 185, 186], "audio_assembl": [5, 7, 138, 158], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 140, 142, 143, 144, 147, 165, 181, 185, 186], "default": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 121, 124, 125, 126, 128, 130, 131, 132, 133, 134, 139, 140, 142, 156, 157, 158, 165, 168, 169, 171, 172, 174, 175, 185], "asr_hubert_large_ls960": 5, "name": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 89, 91, 92, 94, 95, 97, 99, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 137, 140, 142, 144, 147, 157, 163, 165, 168, 169, 171, 174, 181, 185], "avail": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 78, 80, 82, 83, 85, 88, 94, 95, 103, 106, 110, 111, 113, 114, 115, 117, 118, 120, 128, 160, 168, 169, 181, 188], "see": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 131, 132, 133, 134, 140, 144, 165, 168, 175, 181, 182, 183, 188, 190, 191], "To": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 58, 60, 61, 65, 66, 72, 74, 80, 85, 88, 103, 105, 110, 111, 114, 128, 134, 139, 141, 165, 181, 189], "which": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 74, 77, 80, 85, 87, 88, 95, 97, 98, 105, 106, 108, 110, 111, 113, 114, 117, 125, 128, 132, 139, 157, 169, 171, 172, 185, 186], "compat": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 58, 60, 61, 65, 66, 72, 74, 95, 132, 169], "5669": [5, 7, 46, 48, 49, 58], "more": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 54, 58, 61, 63, 68, 72, 73, 77, 80, 85, 90, 93, 97, 106, 110, 111, 114, 117, 125, 126, 131, 132, 133, 140, 144, 165, 168, 175, 181, 182, 183, 185, 188, 191], "extend": [5, 7, 9, 20, 32, 37, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 66, 68, 69, 71, 72, 74, 80, 82, 83, 85, 87, 88, 89, 90, 94, 95, 97, 98, 100, 103, 105, 106, 108, 109, 110, 113, 114, 115, 117, 119, 120, 124, 126, 128, 131, 132, 133, 140, 144, 168], "hubertforctctestspec": 5, "paper": [5, 46, 48, 49, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 80, 106, 109, 110, 111, 113, 114, 128, 175, 191], "abstract": [5, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 80, 110, 111, 113, 114, 121, 175, 191], "approach": [5, 46, 48, 66, 67, 74, 80, 92, 94, 95, 97, 106, 108, 110, 111, 114, 115, 117, 118, 145, 188], "challeng": [5, 32, 48, 61, 63, 66, 67, 80], "three": [5, 115, 143], "uniqu": [5, 110], "problem": [5, 32, 55, 63, 110, 114, 115, 128], "multipl": [5, 32, 49, 58, 75, 80, 85, 105, 110, 126, 157, 165, 171], "sound": 5, "each": [5, 7, 16, 20, 27, 32, 33, 37, 46, 48, 49, 60, 62, 68, 70, 71, 75, 77, 80, 83, 84, 85, 88, 89, 90, 92, 94, 95, 97, 98, 100, 103, 105, 106, 108, 110, 115, 117, 118, 125, 126, 128, 131, 140, 151, 157, 164, 174, 186], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 142, 143, 144, 147, 157, 164, 168, 171, 172, 174, 175, 185, 186, 189, 191], "utter": 5, "lexicon": 5, "dure": [5, 20, 32, 37, 61, 94, 95, 100, 105, 115, 158, 165, 181], "phase": [5, 61, 110], "variabl": [5, 62, 70], "length": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 70, 72, 73, 74, 90, 98, 105, 106, 110, 111, 113, 114, 115, 125, 126], "explicit": [5, 105, 111], "segment": [5, 45, 46, 48, 61, 66, 127, 128], "deal": [5, 139, 189], "bert": [5, 11, 13, 14, 15, 16, 18, 22, 25, 26, 30, 35, 38, 40, 42, 55, 56, 57, 60, 61, 65, 66, 67, 72, 73, 74, 95, 96, 97, 110, 114], "util": [5, 59, 94, 97, 105, 106, 118, 141, 149, 150, 153, 155, 158, 159, 163, 167], "offlin": [5, 165], "cluster": [5, 69, 158], "step": [5, 20, 32, 37, 62, 70, 95, 100, 165, 181, 185], "align": 5, "target": [5, 69, 110, 113, 126, 130, 139, 168], "label": [5, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 49, 51, 53, 75, 82, 92, 93, 94, 95, 97, 99, 100, 108, 109, 114, 115, 121, 128, 165, 171, 181, 185], "loss": [5, 55, 61, 95, 114, 181], "ingredi": 5, "our": [5, 55, 58, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 80, 106, 110, 111, 114, 157, 168, 190], "appli": [5, 8, 20, 32, 37, 46, 49, 54, 75, 77, 95, 96, 100, 105, 114, 115, 117, 133, 157, 171], "over": [5, 61, 72, 73, 74, 110, 117, 126, 157, 165, 181], "region": 5, "onli": [5, 46, 48, 49, 51, 53, 54, 63, 69, 74, 85, 88, 98, 105, 106, 110, 111, 113, 114, 124, 128, 141, 151, 171], "forc": 5, "combin": [5, 16, 27, 33, 61, 65, 71, 80, 110, 114, 115, 117, 128], "acoust": 5, "continu": [5, 93, 111, 134, 181], "reli": [5, 51, 53, 74, 80], "primarili": 5, "consist": [5, 55, 60, 65, 88, 103, 109, 128, 142, 174], "unsupervis": [5, 72, 73, 74, 80, 110, 111], "rather": [5, 46], "than": [5, 32, 37, 46, 61, 62, 70, 72, 73, 74, 80, 82, 90, 94, 111, 113, 117, 118, 185], "intrins": [5, 46], "qualiti": [5, 48, 111], "assign": [5, 32, 75, 96, 108], "simpl": [5, 56, 57, 75, 111, 186], "k": [5, 110, 111, 114, 132], "mean": [5, 9, 16, 27, 32, 33, 46, 48, 49, 72, 80, 82, 85, 87, 110, 111, 113, 114, 125, 132, 139, 185, 186, 189], "teacher": 5, "100": [5, 20, 32, 38, 49, 62, 70, 72, 80, 106, 142], "two": [5, 32, 48, 51, 53, 55, 60, 69, 71, 72, 73, 77, 143, 171, 185], "iter": [5, 51, 53, 55, 62, 70, 103, 128, 165, 181], "either": [5, 20, 37, 49, 53, 58, 59, 68, 75, 80, 82, 88, 108, 109, 114, 128, 130, 131, 139, 140, 142, 168, 186], "match": [5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 70, 72, 73, 74, 75, 84, 85, 86, 87, 88, 89, 98, 103, 105, 110, 111, 126, 128, 130, 151, 184], "improv": [5, 55, 56, 57, 58, 60, 63, 66, 67, 72, 73, 94, 95, 111, 190], "upon": [5, 80], "state": [5, 10, 12, 13, 15, 17, 19, 20, 21, 23, 24, 26, 29, 31, 32, 34, 36, 37, 39, 41, 43, 46, 48, 49, 55, 56, 57, 58, 63, 65, 66, 67, 74, 80, 95, 110, 111, 114, 140, 182, 185], "art": [5, 20, 32, 46, 48, 49, 55, 56, 57, 58, 63, 65, 66, 67, 74, 80, 95, 110, 111, 114, 140], "wav2vec": [5, 7], "perform": [5, 46, 48, 49, 54, 55, 58, 60, 61, 63, 66, 67, 69, 71, 72, 73, 74, 95, 109, 110, 111, 117], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 61, 105], "000h": 5, "benchmark": [5, 49, 55, 60, 61, 63, 72, 73, 110, 114], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 45, 56, 57, 61, 97, 110, 114, 176], "tune": [5, 45, 56, 57, 61, 97, 110, 114], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 140, 142, 143, 144, 157, 169, 171, 172, 174, 175, 176, 181, 184, 185, 186, 190], "19": [5, 50, 90, 174, 176], "13": [5, 8, 9, 45, 72, 73, 77, 103, 133, 176], "rel": [5, 58, 60, 72, 85, 87, 94, 115, 184], "wer": 5, "reduct": [5, 55, 117], "dev": [5, 48, 55, 63, 69], "test": [5, 20, 32, 37, 46, 48, 49, 51, 53, 56, 57, 69, 71, 83, 84, 88, 89, 94, 95, 100, 103, 111, 117, 118, 122, 128, 171, 172, 174, 175, 176, 185, 191], "evalu": [5, 20, 32, 37, 58, 65, 72, 73, 100, 110, 147, 165], "batchsiz": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 72, 73, 74, 95, 110, 113, 115], "size": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 70, 71, 72, 73, 74, 77, 80, 95, 99, 110, 111, 113, 114, 115, 117, 184, 189, 190], "batch": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 72, 73, 74, 95, 99, 110, 113, 115], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 145, 146, 147, 150, 154, 158, 160, 164, 165, 181, 185, 186, 189], "ml": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 137, 139, 140, 141, 142, 143, 144, 165, 181, 185, 189], "audioassembl": [5, 7, 129], "audio_cont": [5, 7, 129], "setstag": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 132, 142, 143, 144, 185, 186], "processedaudiofloat": [5, 7], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 140, 142, 143, 144, 157, 165, 181, 184, 185, 186, 190], "rawfloat": [5, 7], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 137, 140, 142, 143, 144, 157, 184, 185, 186, 190], "fit": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 132, 139, 141, 142, 143, 144, 164, 165, 181, 185, 186, 189], "select": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 59, 61, 71, 77, 80, 82, 94, 95, 97, 109, 110, 111, 114, 115, 117, 118, 124, 128, 129, 131, 133, 134, 137, 140, 142, 144, 157, 165, 181, 186], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 71, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 133, 134, 140, 142, 143, 144, 157, 174, 184, 185, 186], "mister": [5, 7], "quilter": [5, 7], "THE": [5, 7, 54], "apostl": [5, 7], "OF": [5, 7, 55], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7], "TO": [5, 7, 171, 191], "hi": [5, 7, 97, 106], "gospel": [5, 7], "setconfigprotobyt": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 82, 95, 99, 110, 111, 113, 114, 115], "b": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 82, 84, 89, 93, 94, 95, 96, 97, 99, 105, 110, 111, 113, 114, 115, 128, 139, 157, 168, 171, 175, 191], "configproto": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 82, 95, 99, 110, 111, 113, 114, 115], "tensorflow": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 80, 82, 95, 99, 110, 111, 113, 114, 115], "serial": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 75, 82, 95, 99, 110, 111, 113, 114, 115, 158], "loadsavedmodel": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 110, 111, 113, 114], "folder": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 95, 100, 106, 110, 111, 113, 114, 115, 118, 121, 169, 171], "spark_sess": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 110, 111, 113, 114], "save": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 95, 100, 106, 110, 111, 113, 114, 158, 165, 181, 185], "restor": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128], "lang": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 77, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 168, 169, 185, 190], "en": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 74, 77, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 168, 169, 172, 185, 190, 191], "remote_loc": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 168, 169], "download": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 77, 82, 83, 84, 89, 94, 95, 96, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 158, 168, 169, 184, 185, 188, 189], "option": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 80, 82, 83, 84, 88, 89, 94, 95, 97, 98, 100, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 129, 131, 135, 136, 139, 140, 156, 157, 158, 164, 165, 168, 169, 171, 172, 174, 175, 185], "remot": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 168, 169], "address": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128], "resourc": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 82, 83, 84, 88, 89, 94, 95, 97, 98, 100, 103, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 126, 128, 141, 153, 156, 167, 169, 171, 172, 174, 175, 176, 185, 191], "Will": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 105, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128], "repositori": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 168, 182], "otherwis": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 82, 83, 84, 89, 94, 95, 97, 103, 106, 109, 110, 111, 113, 114, 115, 117, 118, 120, 126, 128, 130, 165], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 122], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "chunk2doc": [8, 130], "convert": [8, 50, 54, 59, 68, 71, 85, 87, 90, 93, 98, 110, 114, 125, 128, 130, 133, 134, 143, 165, 181, 188], "back": [8, 110], "when": [8, 9, 11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42, 46, 48, 49, 54, 55, 77, 85, 87, 90, 95, 110, 111, 115, 117, 120, 124, 128, 139, 171, 185, 186, 189], "try": [8, 115, 171], "re": [8, 185], "do": [8, 69, 80, 93, 120, 126, 139, 181, 185, 189], "further": [8, 55, 80, 94, 95, 144], "analysi": [8, 20, 32, 37, 63, 74, 107, 108, 114, 149, 186], "doc2chunk": [8, 130], "pretrainedpipelin": [8, 133, 139, 157, 168, 184, 189, 190], "locat": [8, 75, 105, 158, 168, 185], "extract": [8, 9, 10, 13, 17, 21, 24, 29, 34, 39, 46, 48, 49, 51, 59, 71, 75, 76, 77, 79, 80, 84, 85, 87, 89, 93, 94, 95, 96, 105, 106, 108, 115, 118, 122, 132, 133, 134, 139, 143, 158, 165, 168, 181], "york": [8, 97, 133], "jersei": [8, 133], "aren": [8, 133], "t": [8, 16, 27, 33, 61, 66, 83, 98, 106, 108, 126, 133], "far": [8, 111, 133], "apart": [8, 51, 53, 133], "actual": [8, 90, 133, 144], "id": [8, 32, 54, 72, 75, 110, 111, 113, 114, 115, 130, 131, 133, 140, 144, 165, 171], "defin": [8, 9, 93, 94, 95, 115, 120, 124, 133, 157, 165, 168, 181, 185, 189], "amongst": [8, 133], "thing": [8, 115, 133], "explain_document_dl": [8, 133, 139, 157, 168], "chunktodoc": 8, "chunkconvert": 8, "explainresult": [8, 133], "selectexpr": [8, 9, 20, 38, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 83, 84, 85, 87, 88, 89, 90, 93, 96, 97, 98, 103, 105, 106, 108, 113, 119, 120, 122, 125, 126, 130, 132, 133, 143, 157, 171, 172, 174, 184, 185, 190], "explod": [8, 9, 20, 38, 45, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 84, 87, 88, 89, 90, 93, 96, 97, 103, 105, 106, 113, 132, 133, 143, 157, 171, 174, 184, 185, 190], "col": [8, 51, 53, 75, 84, 93, 96, 133, 157, 184], "loc": [8, 12, 15, 19, 23, 26, 31, 36, 41, 43, 77, 93, 94, 95, 133, 139, 157, 168, 171], "sentenc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 103, 109, 110, 113, 115, 120, 122, 125, 128, 131, 133, 139, 140, 142, 143, 144, 158, 168, 171, 172, 174, 175, 176, 185, 189, 190], "22": [8, 133, 171, 184], "pattern": [9, 54, 75, 85, 88, 98, 117, 118, 125, 126, 128], "part": [9, 58, 80, 83, 102, 103, 119, 128, 130, 174, 191], "tag": [9, 20, 32, 37, 54, 58, 92, 93, 94, 95, 96, 102, 103, 128, 157, 165, 171, 174, 175, 191], "order": [9, 74, 75, 80, 85, 110, 117, 118, 139, 144, 157, 185, 186, 189, 191], "meaning": [9, 119], "phrase": [9, 58, 62, 70, 84, 89], "onto": [9, 157, 186], "pars": [9, 51, 52, 53, 58, 75, 83, 85, 87, 115, 117, 118, 139, 142, 168, 171, 174], "regular": [9, 88, 94, 105], "express": [9, 37, 45, 85, 88, 105], "wrap": [9, 145, 146, 154, 160, 164], "angl": 9, "bracket": 9, "easili": [9, 63, 103, 132, 181], "distinguish": 9, "itself": [9, 80, 114, 128, 141, 186], "form": [9, 20, 32, 37, 71, 75, 83, 84, 85, 88, 89, 106, 108, 117, 118, 128, 132, 165, 171, 172, 185], "peter": [9, 65, 83, 98, 103, 106, 117, 119, 171], "piper": [9, 83, 103, 119], "employe": [9, 83, 103, 119], "pick": [9, 83, 103, 119], "peck": [9, 83, 103, 119], "pickl": [9, 83, 103, 119], "pepper": [9, 83, 103, 119], "nnp": [9, 103, 139, 157, 171, 172, 174, 175, 184, 189, 190, 191], "nn": [9, 103, 171, 172, 174, 175, 191], "vbp": [9, 103, 139, 172, 184, 189, 190], "vbg": [9, 103], "IN": [9, 103, 139, 157, 172, 174, 175, 184, 189, 190], "jj": [9, 103, 139, 157, 171, 174, 184, 189, 190, 191], "regexpars": 9, "e": [9, 11, 12, 14, 15, 18, 19, 22, 23, 25, 26, 30, 31, 35, 36, 40, 41, 42, 43, 46, 53, 54, 63, 65, 75, 77, 94, 95, 110, 111, 113, 114, 115, 120, 142, 165, 181], "g": [9, 11, 12, 14, 15, 18, 19, 22, 23, 25, 26, 30, 31, 35, 36, 40, 41, 42, 43, 46, 53, 54, 63, 77, 94, 95, 110, 111, 113, 114, 115, 120, 142, 165, 181], "setregexpars": 9, "enclos": 9, "treat": [9, 115, 128], "group": [9, 126], "so": [9, 20, 37, 80, 93, 106, 141, 165, 181], "here": [9, 83, 157, 185], "specif": [9, 38, 51, 53, 54, 56, 57, 61, 69, 77, 80, 95, 110, 111, 121, 139, 141, 165, 189], "noun": [9, 172], "success": [9, 58, 111], "grammar": 9, "parser": [9, 51, 53, 77], "perceptronmodel": [9, 51, 53, 77, 94, 103, 171], "Of": [9, 55, 128], "documentassembl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 94, 95, 96, 97, 98, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 140, 141, 142, 143, 144, 165, 171, 181, 185], "sentencedetector": [9, 20, 38, 45, 51, 53, 57, 59, 67, 69, 73, 77, 80, 83, 88, 90, 94, 95, 96, 97, 103, 105, 106, 120, 122, 141, 144, 171, 185, 186], "postag": 9, "11": [9, 50, 72, 73, 85, 87, 90, 103, 176], "21": [9, 85, 87, 96, 103, 176], "35": [9, 103, 176], "39": [9, 96, 103, 174, 176], "52": [9, 96, 103, 174], "58": [9, 48, 103], "albertforquestionansw": 10, "classifi": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 80, 132, 185], "dl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 82, 95, 97, 117, 118], "albert": [10, 11, 12, 55], "span": [10, 13, 17, 21, 24, 29, 34, 39, 110, 114], "question": [10, 13, 17, 21, 24, 29, 34, 38, 39, 51, 53, 56, 57, 63, 66, 67, 74, 97, 103, 110, 111, 114, 139], "answer": [10, 13, 17, 21, 24, 29, 34, 38, 39, 51, 53, 56, 57, 63, 74, 97, 110, 111, 114, 139], "task": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 57, 58, 60, 61, 65, 69, 72, 73, 74, 80, 97, 110, 111, 113, 114, 141], "squad": [10, 13, 17, 21, 24, 29, 34, 39, 55, 56, 57, 60, 66, 67, 110], "linear": [10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 48, 111], "layer": [10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 55, 56, 57, 60, 63, 74], "comput": [10, 13, 17, 21, 24, 29, 34, 39, 46, 48, 49, 55, 60, 61, 69, 111, 113, 118, 128, 139, 189], "logit": [10, 11, 13, 14, 16, 17, 18, 21, 24, 25, 27, 29, 30, 33, 34, 35, 39, 40, 42], "spanclassifi": [10, 13, 17, 21, 24, 29, 34, 39], "document_quest": [10, 13, 17, 21, 24, 29, 34, 38, 39], "document_context": [10, 13, 17, 21, 24, 29, 34, 39], "albert_base_qa_squad2": 10, "larg": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 55, 60, 61, 63, 72, 73, 74, 80, 82, 84, 89, 95, 110, 111], "allow": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 48, 63, 69, 94, 95, 98, 105, 106, 110, 125, 126, 141, 151], "faster": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 61, 63, 117, 118], "casesensit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 72, 73, 74, 84, 89, 117, 120], "whether": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 75, 77, 84, 85, 87, 89, 90, 93, 94, 95, 98, 100, 105, 106, 110, 111, 114, 115, 117, 120, 125, 126, 128, 130, 132, 133, 134, 139, 142, 144, 147, 158, 168, 171, 175, 186], "ignor": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 72, 73, 74, 84, 90, 93, 110, 111, 113, 114, 117, 120, 139], "case": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 72, 73, 74, 75, 82, 84, 89, 115, 117, 120, 126, 130, 171, 172, 185], "configprotobyt": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 74, 82, 95, 110, 111, 113, 114, 115], "maxsentencelength": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 70, 72, 73, 74], "128": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 66, 67, 72, 73, 74, 165, 181], "multidocumentassembl": [10, 13, 17, 21, 24, 29, 34, 38, 39, 140], "context": [10, 13, 17, 21, 24, 29, 34, 39, 56, 57, 62, 63, 70, 74, 109, 115, 126], "setcasesensit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 59, 61, 65, 66, 72, 84, 89, 94, 117, 120, 132, 144], "what": [10, 13, 17, 21, 24, 29, 34, 37, 39, 46, 51, 53, 80, 82, 97, 113, 115, 124, 172, 182], "my": [10, 12, 13, 15, 17, 20, 21, 23, 24, 26, 29, 31, 34, 36, 37, 39, 41, 43, 54, 88, 90, 97, 105, 111, 120, 122, 125, 185], "clara": [10, 13, 17, 21, 24, 29, 34, 39, 97], "live": [10, 12, 13, 15, 17, 21, 23, 24, 26, 29, 31, 34, 36, 39, 41, 43, 97, 111, 165, 181], "berkelei": [10, 13, 17, 21, 24, 29, 34, 39], "albertforsequenceclassif": [11, 22], "sequenc": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 46, 48, 49, 65, 110, 111, 112, 113, 114, 115, 120], "regress": [11, 14, 18, 22, 25, 30, 35, 40, 42, 110, 114], "pool": [11, 14, 18, 22, 25, 30, 35, 40, 42, 59, 63, 68], "multi": [11, 14, 18, 20, 22, 25, 30, 32, 35, 37, 40, 42, 55, 69, 72, 73, 80, 82, 113], "sequenceclassifi": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42], "albert_base_sequence_classifier_imdb": 11, "coalescesent": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 82], "instead": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 57, 80, 82, 85, 87, 114, 132, 133, 139, 189], "per": [11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 72, 73, 82, 85, 90, 92, 93, 94, 95, 128, 139, 157, 168, 171], "inputcol": [11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 68, 82, 129, 131, 132, 133, 134, 137, 140], "averag": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 59, 68, 72, 73, 82, 95, 103], "probabl": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 80, 110, 111, 114, 117], "calcul": [11, 14, 16, 18, 20, 25, 27, 30, 32, 33, 35, 37, 40, 42, 71, 90, 95, 100, 108], "via": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 69, 137, 158], "softmax": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 60, 62, 70, 115], "sigmoid": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42], "love": [11, 14, 16, 20, 22, 25, 27, 30, 33, 35, 40, 42, 57, 67, 73, 106, 109, 185], "movi": [11, 14, 16, 20, 22, 25, 27, 30, 33, 35, 37, 40, 42, 109, 185], "child": [11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42], "pretti": [11, 14, 16, 22, 25, 27, 30, 32, 33, 35, 40, 42, 80], "bore": [11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42], "neg": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 37, 40, 42, 108, 109, 165, 181], "getclass": [11, 12, 14, 15, 16, 18, 19, 22, 23, 25, 26, 27, 30, 31, 33, 35, 36, 40, 41, 42, 43, 46, 48, 49, 97], "setcoalescesent": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 82], "limit": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 46, 48, 49, 55, 58, 65, 71, 74, 80, 114, 117], "almost": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42], "512": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 63, 113], "help": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 51, 53, 55, 113, 126, 165, 181, 186, 190], "feed": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42], "entir": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 46, 113], "bool": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 54, 57, 59, 69, 75, 77, 82, 84, 85, 89, 90, 93, 94, 95, 98, 100, 105, 106, 110, 111, 114, 115, 117, 120, 125, 126, 128, 130, 132, 133, 134, 139, 142, 147, 158, 165, 168, 171], "one": [11, 14, 16, 18, 22, 25, 27, 30, 32, 33, 35, 40, 42, 45, 46, 48, 49, 51, 53, 54, 56, 57, 68, 72, 73, 74, 80, 82, 85, 88, 93, 106, 117, 122, 144, 181, 185], "albertfortokenclassif": [12, 55], "recognit": [12, 15, 19, 23, 26, 31, 36, 41, 43, 46, 49, 58, 91, 94, 95, 97], "ner": [12, 15, 19, 23, 26, 31, 36, 41, 43, 72, 73, 77, 78, 122, 139, 157, 158, 165, 168, 181], "token_classifi": [12, 19, 31, 36, 41, 43], "albert_base_token_classifier_conll03": 12, "albertembed": [12, 55], "level": [12, 20, 32, 37, 56, 57, 65, 66, 67, 69, 71, 73, 75, 94, 95, 100, 115, 158, 171], "tokenclassifi": [12, 15, 19, 23, 26, 31, 36, 41, 43], "john": [12, 15, 23, 26, 31, 36, 41, 43, 45, 57, 67, 73, 75, 77, 96, 98, 106, 134, 176], "lenon": [12, 15, 23, 26, 31, 36, 41, 43], "born": [12, 15, 23, 26, 31, 36, 41, 43, 111], "london": [12, 15, 23, 26, 31, 36, 41, 43], "pari": [12, 15, 23, 26, 31, 36, 41, 43, 97], "sarah": [12, 15, 23, 26, 31, 36, 41, 43], "o": [12, 15, 19, 23, 26, 31, 36, 41, 43, 93, 94, 95, 96, 139, 157, 168, 171, 175, 191], "bertforquestionansw": [13, 38], "bert_base_cased_qa_squad2": 13, "questionansw": 13, "bertforsequenceclassif": [14, 16], "bert_base_sequence_classifier_imdb": 14, "bertfortokenclassif": 15, "bert_base_token_classifier_conll03": 15, "bertforzeroshotclassif": 16, "modelforsequenceclassif": [16, 27, 33], "nli": [16, 27, 33], "natur": [16, 27, 33, 37, 49, 55, 56, 57, 58, 60, 61, 62, 69, 70, 74, 82, 110, 111, 114, 130, 140, 144], "infer": [16, 27, 33, 56, 57, 58, 61, 74], "equival": [16, 27, 33, 139, 158, 189], "don": [16, 27, 33, 61, 66, 98], "hardcod": [16, 27, 33], "potenti": [16, 27, 33, 48, 115], "thei": [16, 27, 33, 38, 51, 53, 95, 98, 111, 141, 160, 172, 185], "chosen": [16, 27, 33, 51, 53, 95], "runtim": [16, 27, 33], "usual": [16, 27, 33, 49, 144, 169], "slower": [16, 27, 33], "much": [16, 20, 27, 33, 38, 55, 66, 67, 98, 128, 158, 185], "flexibl": [16, 27, 33, 48], "ani": [16, 27, 33, 62, 69, 70, 75, 80, 95, 111, 114, 115, 132, 133, 169, 182, 185, 186, 191], "pass": [16, 27, 33], "pose": [16, 27, 33], "premis": [16, 27, 33], "hypothesi": [16, 27, 33], "pair": [16, 27, 33, 77, 165], "bert_base_cased_zero_shot_classifier_xnli": 16, "camembertforquestionansw": 17, "camembert": [17, 18, 19, 58], "camembert_base_qa_fquad": 17, "fr": [17, 18, 58, 82], "camembertforsequenceclassif": 18, "sequence_classifi": 18, "camembert_base_sequence_classifier_allocin": 18, "j": [18, 75], "ai": [18, 110, 165, 181], "ador\u00e9": 18, "ce": 18, "film": 18, "lorsqu": 18, "\u00e9tai": 18, "enfant": 18, "je": 18, "d\u00e9test": 18, "\u00e7a": 18, "camembertfortokenclassif": 19, "camembert_base_token_classifier_wikin": 19, "georg": 19, "washington": 19, "est": [19, 58, 82, 113], "all\u00e9": 19, "\u00e0": 19, "classifierdl": [20, 185], "classifierdlapproach": [20, 32, 185], "gener": [20, 32, 46, 48, 55, 59, 61, 65, 68, 74, 77, 80, 94, 95, 97, 106, 110, 111, 114, 115, 117, 118, 133, 134, 165, 181, 184, 185, 186], "univers": [20, 51, 53, 69, 113], "encod": [20, 54, 56, 57, 60, 65, 69, 97, 110, 113, 165], "deep": [20, 56, 57, 63, 80, 94, 106, 115], "dnn": 20, "insid": [20, 32, 93, 103, 126, 171], "instanti": [20, 32, 37, 51, 53, 62, 70, 71, 75, 83, 84, 88, 89, 94, 95, 98, 103, 106, 108, 109, 115, 117, 118, 122, 124, 128, 171, 172], "classifierdlmodel": [20, 32, 185], "monitor": [20, 32, 37, 95, 165, 181], "metric": [20, 32, 37, 95, 118, 165], "done": [20, 32, 37, 66, 67, 94, 95, 186], "settestdataset": [20, 32, 37, 95, 100], "method": [20, 32, 37, 55, 61, 62, 70, 74, 80, 95, 169, 180], "expect": [20, 32, 37, 74, 95, 126, 157], "path": [20, 32, 37, 51, 53, 62, 70, 71, 75, 77, 83, 84, 88, 89, 94, 95, 97, 98, 100, 106, 108, 111, 115, 117, 118, 121, 126, 137, 139, 156, 165, 168, 171, 172, 174, 175, 181], "parquet": [20, 32, 37, 95, 100, 129], "datafram": [20, 32, 37, 49, 71, 95, 100, 103, 128, 139, 153, 157, 164, 165, 168, 171, 172, 174, 175, 181, 185, 189, 191], "ha": [20, 32, 37, 38, 46, 48, 49, 54, 55, 60, 61, 63, 66, 67, 71, 80, 83, 88, 95, 100, 106, 108, 110, 114, 117, 118, 128, 129, 130, 137, 139, 165, 169, 174, 181, 185, 186], "same": [20, 32, 37, 45, 55, 66, 71, 72, 75, 77, 95, 100, 114, 141, 165, 186], "follow": [20, 32, 37, 45, 50, 54, 63, 65, 71, 80, 85, 87, 88, 93, 95, 98, 105, 142, 143, 181, 183, 186], "universalsentenceencod": [20, 32, 37, 69, 165, 181, 185], "preprocessingpipelin": [20, 32, 37, 95, 100], "randomsplit": [20, 32, 37, 95, 100], "write": [20, 32, 37, 71, 95, 100, 117, 118, 186], "overwrit": [20, 32, 37, 95, 96, 100, 165], "test_data": [20, 32, 37, 95, 100], "setlabelcolumn": [20, 32, 37, 92, 94, 95, 99, 121, 165, 181, 185], "usag": [20, 32, 37, 45, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 66, 69, 71, 72, 74, 75, 80, 82, 83, 85, 87, 88, 89, 94, 95, 98, 103, 105, 106, 108, 109, 110, 113, 114, 115, 117, 119, 120, 124, 126, 128], "64": [20, 32, 37, 55, 95, 99, 185], "dropout": [20, 37, 95], "coeffici": [20, 37, 94, 95], "5": [20, 32, 37, 45, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 82, 85, 87, 90, 93, 95, 103, 111, 128, 132, 139, 157, 165, 168, 172, 174, 175, 176, 181, 184, 185, 191], "enableoutputlog": [20, 32, 37, 95], "stdout": [20, 32, 37, 95, 100], "addit": [20, 32, 37, 51, 53, 56, 57, 75, 94, 95, 100, 105, 111, 126, 165, 184, 185], "evaluationlogextend": [20, 32, 37, 95], "valid": [20, 32, 37, 85, 95, 100, 106, 115, 181], "displai": [20, 32, 37, 100, 111, 165, 181], "time": [20, 32, 37, 55, 62, 70, 72, 73, 80, 85, 100, 109, 115, 128, 158, 184, 185, 189, 190], "labelcolumn": [20, 32, 37, 94, 95], "lr": [20, 32, 37, 95, 128], "rate": [20, 32, 37, 50, 62, 66, 67, 70, 71, 95, 99, 115], "005": [20, 37, 95, 99], "maxepoch": [20, 32, 37, 94, 95], "maximum": [20, 32, 37, 45, 62, 70, 77, 80, 92, 94, 95, 98, 99, 105, 106, 110, 111, 113, 114, 115, 117, 125, 126], "epoch": [20, 32, 37, 92, 94, 95, 99, 100, 106, 115, 165], "30": [20, 37, 80, 85, 87, 93, 99, 113, 139, 157, 168, 176, 184], "outputlogspath": [20, 32, 37, 95, 106], "randomse": [20, 32, 37, 94, 95], "random": [20, 32, 37, 62, 70, 92, 94, 95, 99, 132], "seed": [20, 32, 37, 62, 70, 92, 94, 95, 99], "shuffl": [20, 32, 92, 99, 110], "testdataset": [20, 32, 37, 95, 165, 181], "statist": [20, 32, 37, 71, 80, 95, 100], "validationsplit": [20, 32, 37, 95, 106], "choos": [20, 32, 37, 59, 68, 95, 106, 117], "proport": [20, 32, 37, 95, 100, 106], "against": [20, 32, 37, 75, 80, 84, 89, 95, 100, 106, 141], "between": [20, 32, 37, 48, 51, 53, 66, 67, 69, 72, 73, 74, 77, 95, 100, 105, 106, 115], "off": [20, 32, 37, 69, 72, 73, 95, 100, 106], "verbos": [20, 32, 37, 94, 95, 100], "multiclassifierdlapproach": [20, 32, 165, 181], "sentimentdlapproach": [20, 32, 37], "accept": [20, 32, 37], "singl": [20, 32, 37, 71, 77, 80, 110, 122, 124, 126, 171], "item": [20, 37, 71, 165, 171, 181], "doubl": [20, 37, 129, 142], "sentenceembed": [20, 32, 37, 68, 71, 132], "In": [20, 32, 37, 46, 49, 58, 60, 61, 65, 71, 74, 75, 80, 82, 83, 84, 88, 89, 105, 106, 108, 110, 111, 114, 117, 118, 128, 165, 174, 181, 185, 186, 190, 191], "csv": [20, 37, 75, 100, 142, 185], "best": [20, 37, 55, 58, 66, 67, 80, 82, 95, 110, 185], "wach": [20, 185], "ever": [20, 37, 54, 185], "opinion": [20, 37, 185], "win": [20, 37, 185], "award": [20, 37, 185], "terribl": [20, 37, 185], "act": [20, 37, 185], "bad": [20, 37, 108, 165, 181, 185], "realli": [20, 37, 109, 185], "trane": 20, "smallcorpu": [20, 37, 185], "read": [20, 37, 46, 48, 49, 51, 53, 62, 70, 80, 83, 84, 85, 87, 88, 89, 94, 97, 98, 100, 106, 108, 111, 115, 117, 118, 126, 128, 129, 131, 137, 140, 153, 156, 158, 159, 165, 169, 171, 172, 174, 175, 181, 185, 191], "header": [20, 37, 38, 142, 185], "src": [20, 37, 46, 48, 49, 51, 53, 71, 83, 84, 88, 89, 94, 95, 103, 117, 118, 122, 128, 171, 172, 174, 175, 176, 185, 191], "useembed": [20, 32, 37, 69, 185], "docclassifi": [20, 32, 37, 185], "setbatchs": [20, 32, 37, 63, 95, 99, 115, 165, 181, 185], "setmaxepoch": [20, 32, 37, 92, 94, 95, 99, 165, 181, 185], "20": [20, 38, 46, 74, 93, 110, 111, 139, 142, 157, 168, 185], "setlr": [20, 32, 37, 95, 99, 165, 181, 185], "5e": [20, 37, 185], "setdropout": [20, 37, 95, 185], "pipelinemodel": [20, 32, 37, 51, 53, 54, 62, 70, 94, 95, 109, 115, 117, 118, 128, 139, 141, 165, 169, 185, 188], "v": [20, 32, 37, 50, 60, 71, 80, 82, 84, 95, 99, 100, 118, 157], "classifierdl_use_trec6": [20, 185], "trec": 20, "multiclassifierdlmodel": [20, 32], "sentimentdlmodel": [20, 32, 37], "sarcasmdl": [20, 185], "classifierdl_use_sarcasm": [20, 185], "sarcasm": [20, 185], "m": [20, 85, 87, 176, 185], "could": [20, 61, 80, 88, 100, 115, 184, 185, 186], "put": [20, 157, 185], "word": [20, 48, 49, 51, 53, 55, 59, 60, 62, 63, 66, 68, 69, 70, 71, 74, 75, 77, 80, 83, 90, 93, 96, 97, 98, 103, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 124, 126, 127, 128, 139, 157, 168, 174, 175, 184, 185], "wake": [20, 185], "am": [20, 85, 87, 111, 122, 185], "mondai": [20, 185], "would": [20, 45, 59, 68, 85, 106, 158, 185], "arrays_zip": [20, 51, 53, 80, 185], "out": [20, 80, 83, 98, 110, 111, 113, 114, 119, 120, 185], "normal": [20, 46, 48, 49, 54, 78, 84, 106, 109, 120, 132, 141, 144, 158, 185, 186], "debertaforquestionansw": 21, "deberta": [21, 22, 23, 60], "deberta_v3_xsmall_qa_squad2": 21, "debertaforsequenceclassif": 22, "v2": [22, 23, 56, 57, 60], "v3": [22, 23], "deberta_v3_xsmall_sequence_classifier_imdb": 22, "deberta_base_sequence_classifier_imdb": 22, "debertafortokenclassif": 23, "deberta_v3_xsmall_token_classifier_conll03": 23, "distilbertforquestionansw": 24, "distilbert": [24, 25, 27, 61], "distilbert_base_cased_qa_squad2": 24, "distilbertforsequenceclassif": [25, 27], "distilbert_base_sequence_classifier_imdb": 25, "distilbertfortokenclassif": 26, "distilbert_base_token_classifier_conll03": 26, "distilbertforzeroshotclassif": 27, "distilbert_base_zero_shot_classifier_uncased_mnli": 27, "albert_for_sequence_classif": [28, 78], "albert_for_token_classif": [28, 78], "bert_for_sequence_classif": [28, 78], "bert_for_token_classif": [28, 78], "bert_for_zero_shot_classif": [28, 78], "camembert_for_sequence_classif": [28, 78], "camembert_for_token_classif": [28, 78], "deberta_for_sequence_classif": [28, 78], "deberta_for_token_classif": [28, 78], "distil_bert_for_sequence_classif": [28, 78], "distil_bert_for_token_classif": [28, 78], "distil_bert_for_zero_shot_classif": [28, 78], "longformer_for_sequence_classif": [28, 78], "longformer_for_token_classif": [28, 78], "multi_classifier_dl": [28, 78], "roberta_bert_for_zero_shot_classif": [28, 78], "roberta_for_sequence_classif": [28, 78], "roberta_for_token_classif": [28, 78], "sentiment_dl": [28, 78], "xlm_roberta_for_sequence_classif": [28, 78], "xlm_roberta_for_token_classif": [28, 78], "xlnet_for_sequence_classif": [28, 78], "xlnet_for_token_classif": [28, 78], "longformerforquestionansw": 29, "longform": [29, 30, 31, 65], "longformer_base_base_qa_squad2": 29, "longformerforsequenceclassif": 30, "longformer_base_sequence_classifier_imdb": 30, "4096": [30, 55, 65], "longformerfortokenclassif": 31, "xlnet_base_token_classifier_conll03": [31, 43], "longformer_base_token_classifier_conll03": 31, "multiclassifierdl": 32, "bidirect": [32, 56, 57, 63, 74, 110], "gru": 32, "convolut": [32, 46, 49], "machin": [32, 46, 62, 70, 80, 94, 110, 111, 113, 114, 165, 183], "strongli": 32, "relat": [32, 51, 53, 77, 190], "variant": [32, 50, 65, 69], "mai": [32, 130, 184, 185, 186, 189, 190], "instanc": [32, 97, 99, 100, 147, 152, 158, 159, 163], "multiclass": 32, "categor": [32, 169], "precis": [32, 51, 53], "constraint": 32, "mani": [32, 60, 66, 67, 80, 110, 111, 113, 114, 128], "formal": 32, "find": [32, 51, 53, 66, 67, 69, 75, 77, 83, 85, 110, 111], "binari": [32, 137, 153, 165], "bertsentenceembed": [32, 37, 57, 67, 73], "multiclassifi": [32, 165, 181], "001": [32, 50, 94, 95], "10": [32, 45, 51, 80, 85, 87, 96, 117, 165, 176, 184], "44": [32, 62, 70, 103], "shuffleperepoch": 32, "threshold": [32, 37, 62, 70, 80, 82, 94, 97, 115, 128], "minimum": [32, 37, 62, 70, 77, 80, 82, 92, 94, 95, 98, 105, 106, 110, 111, 114, 117, 118, 125, 126, 171], "ed58abb40640f983": 32, "pn": 32, "newsyou": 32, "toxic": 32, "a1237f726b5f5d89": 32, "dude": 32, "place": [32, 49], "obscen": 32, "insult": 32, "24b0d6c8733c2abe": 32, "thank": [32, 74, 80, 176], "8c4478fb239bcfc0": 32, "gee": 32, "minut": 32, "traindataset": [32, 165, 181], "printschema": [32, 129, 131, 137, 140], "root": [32, 45, 51, 53, 77, 129, 131, 137, 140, 172], "setcleanupmod": [32, 131, 140], "shrink": [32, 131, 140], "1e": [32, 165, 181], "setthreshold": [32, 37, 80, 82, 165, 181], "setvalidationsplit": [32, 100, 106], "setverbos": [32, 94, 95, 100], "multiclassifierdl_use_tox": 32, "comment": [32, 80], "jigsaw": 32, "good": [32, 58, 61, 69, 109], "stuff": 32, "wtf": 32, "kind": [32, 80, 85, 87], "crap": 32, "robertaforzeroshotclassif": 33, "robertaforsequenceclassif": [33, 35], "roberta_base_zero_shot_classifier_nli": 33, "setmaxsentencelength": [33, 36, 62, 70], "roberta": [33, 34, 35, 36, 39, 40, 41, 58, 60, 65, 66, 67, 72, 73, 97, 110], "robertaforquestionansw": [34, 97], "roberta_base_qa_squad2": [34, 97], "roberta_base_sequence_classifier_imdb": 35, "robertafortokenclassif": 36, "roberta_base_token_classifier_conll03": 36, "sentimentdl": 37, "affect": [37, 126], "subject": [37, 51, 53], "view": 37, "common": [37, 75, 122, 130, 158, 188], "product": 37, "review": [37, 161], "tweet": 37, "interpret": [37, 75], "posit": [37, 60, 61, 72, 73, 74, 80, 93, 108, 109, 125, 128, 144, 165, 181], "final": [37, 65, 66, 67, 72, 73, 82, 95, 115, 185], "otheriws": [37, 82], "neutral": [37, 82], "thresholdlabel": [37, 82], "score": [37, 56, 57, 72, 73, 80, 82, 94, 95, 97, 108, 109, 111], "less": [37, 61, 82, 85, 90, 94, 113, 117], "watch": [37, 109], "32": [37, 55, 63, 176, 184, 190], "setthresholdlabel": [37, 82], "p": [37, 54, 62, 70, 82, 95, 100, 124], "sentimentdl_use_imdb": 37, "english": [37, 58, 80, 117, 120, 128, 169], "imdb": 37, "sentimentdl_use_twitt": 37, "wow": 37, "video": [37, 80], "awesom": 37, "bruh": 37, "damn": 37, "wast": [37, 109], "tapasforquestionansw": 38, "implement": [38, 62, 70, 72, 97, 106, 115, 135, 136, 145, 146, 154, 160, 164], "tapa": 38, "design": [38, 46, 48, 50, 56, 57, 66, 67, 84, 110, 113, 165, 181], "about": [38, 51, 53, 66, 67, 71, 80, 97, 105, 118, 139, 141, 184, 186, 189, 190], "tabular": [38, 142], "tabl": [38, 142], "tri": 38, "share": [38, 80, 186], "its": [38, 49, 60, 61, 65, 74, 80, 103, 108, 110, 113, 120, 165, 174], "table_qa_tapas_base_finetuned_wtq": 38, "document_assembl": [38, 97, 138, 142, 158], "table_json": 38, "document_t": [38, 142], "sentence_detector": [38, 78, 97, 104], "table_assembl": [38, 138, 158], "tableassembl": [38, 142], "stage": [38, 139, 141, 165, 181, 185, 186, 189], "json_data": 38, "monei": [38, 142], "ag": [38, 142], "donald": [38, 142], "trump": [38, 142], "000": [38, 80, 111, 128, 142], "75": [38, 80, 142], "elon": [38, 142], "musk": [38, 142], "55": [38, 96, 142, 176], "AS": [38, 45, 97], "who": [38, 124, 185], "earn": 38, "count": [38, 115], "old": [38, 45, 174], "xlmrobertaforquestionansw": 39, "xlm": [39, 40, 41, 72, 73], "xlm_roberta_base_qa_squad2": 39, "xlmrobertaforsequenceclassif": 40, "xlm_roberta_base_sequence_classifier_imdb": 40, "xlmrobertafortokenclassif": 41, "xlm_roberta_base_token_classifier_conll03": 41, "xlnetforsequenceclassif": 42, "xlnet": [42, 43, 74], "xlnet_base_sequence_classifier_imdb": 42, "xlnetfortokenclassif": 43, "spanbert_coref": 44, "spanbertcorefmodel": 45, "corefer": 45, "resolut": [45, 48], "spanbert": 45, "identifi": [45, 71, 80, 84, 88, 125, 126, 165, 186], "given": [45, 46, 48, 49, 75, 80, 97, 110, 111, 114, 115, 117, 118, 120, 151, 164, 165], "told": [45, 87], "mari": [45, 57, 67, 73, 106], "he": [45, 60, 87, 124, 176], "borrow": 45, "book": [45, 54, 111, 115, 172], "her": [45, 97], "link": [45, 168], "ontonot": 45, "corefresolut": 45, "spanbert_base_coref": 45, "maxsegmentlength": 45, "textgenr": 45, "genr": 45, "One": [45, 80, 124, 143], "bc": 45, "broadcast": 45, "convers": 45, "bn": 45, "nw": 45, "wire": 45, "pt": 45, "pivot": 45, "testament": 45, "tc": 45, "telephon": 45, "wb": 45, "web": [45, 54, 58, 111, 165, 181], "setmaxsegmentlength": 45, "settextgenr": 45, "code": [45, 60, 62, 65, 66, 67, 70, 72, 73, 80, 82, 110, 114, 182, 190], "convnextforimageclassif": 46, "convnet": 46, "convnext": 46, "2020": [46, 80, 85, 87, 106], "zhuang": 46, "liu": [46, 48, 60, 66, 67], "hanzi": 46, "mao": 46, "chao": 46, "yuan": 46, "wu": 46, "christoph": 46, "feichtenhof": 46, "trevor": 46, "darrel": 46, "sain": 46, "xie": 46, "pure": [46, 49, 113], "inspir": [46, 109, 117, 118, 161], "vision": [46, 48, 49], "claim": 46, "outperform": [46, 65, 69, 72, 73, 74, 80, 111], "huggingfac": [46, 48, 49, 58], "convnextforimageclassificationtestspec": 46, "roar": 46, "visual": [46, 48, 165], "began": 46, "introduct": 46, "vit": [46, 49], "quickli": 46, "supersed": 46, "vanilla": 46, "hand": [46, 124], "face": 46, "difficulti": 46, "detect": [46, 48, 69, 81, 82, 104, 105, 106], "semant": [46, 48, 63, 69, 128], "hierarch": [46, 48, 62, 70], "swin": [46, 48], "reintroduc": 46, "sever": [46, 191], "prior": [46, 61, 65, 115], "practic": [46, 58, 110, 114], "viabl": 46, "backbon": [46, 48, 74], "demonstr": [46, 48, 61, 65, 80, 111, 113], "remark": 46, "wide": [46, 54, 56, 57, 60, 61, 72, 73, 110], "varieti": [46, 65, 72, 73, 190], "howev": [46, 55, 68, 74, 80, 98, 169, 184], "effect": [46, 48, 49, 65, 105, 110, 114], "hybrid": 46, "still": [46, 111, 165], "credit": 46, "superior": 46, "inher": 46, "induct": [46, 61], "bias": [46, 61], "reexamin": 46, "space": [46, 62, 70, 71, 90, 144], "achiev": [46, 60, 65, 66, 67, 72, 73, 74, 95, 110, 111, 113, 114, 139, 189], "gradual": 46, "modern": 46, "standard": [46, 48, 49, 54, 65, 85, 87, 110, 117, 118, 126], "resnet": 46, "toward": [46, 111], "discov": [46, 182], "compon": [46, 49, 99, 100, 129, 137, 147, 152, 163, 189], "contribut": 46, "along": [46, 77], "wai": [46, 51, 53, 75, 77, 141, 168], "outcom": 46, "explor": [46, 110, 114], "famili": [46, 54], "dub": [46, 72, 73], "construct": [46, 62, 70, 126, 168, 188], "compet": 46, "favor": 46, "term": [46, 80], "accuraci": [46, 48, 51, 53, 56, 57, 62, 69, 70, 72, 73, 94, 95, 103, 117, 128, 181], "scalabl": 46, "87": [46, 48], "imagenet": [46, 48, 49], "coco": [46, 48], "ade20k": [46, 48], "while": [46, 48, 49, 55, 61, 71, 80, 100, 111, 165, 181, 186], "maintain": 46, "simplic": [46, 110], "effici": [46, 48, 60, 62, 69, 70, 113, 184], "dores": [46, 48, 49], "resiz": [46, 48, 49], "certain": [46, 48, 49, 115], "donorm": [46, 48, 49], "deviat": [46, 48, 49], "featureextractortyp": [46, 48, 49], "architectur": [46, 48, 49, 55, 56, 57, 60, 66, 82, 95, 106, 110, 114], "featur": [46, 48, 49, 51, 62, 70, 80, 90, 94, 100, 165, 188], "imagemean": [46, 48, 49], "imagestd": [46, 48, 49], "resampl": [46, 48, 49], "filter": [46, 48, 49, 72, 73, 80, 93, 94, 110, 111, 113, 114, 120, 157, 169], "pil": [46, 48, 49], "nearest": [46, 48, 49], "bilinear": [46, 48, 49], "bicub": [46, 48, 49], "do_res": [46, 48, 49], "tupl": [46, 48, 49, 164], "dorescal": [46, 48], "rescal": [46, 48], "rescalefactor": [46, 48], "factor": [46, 48, 72, 73, 74, 110, 114, 115], "scale": [46, 48, 49, 55, 61, 65, 72, 73, 110, 111, 114], "croppct": 46, "percentag": [46, 71, 115, 128], "crop": 46, "imagedf": [46, 48, 49], "dropinvalid": [46, 48, 49], "imageassembl": [46, 48, 49, 137], "image_assembl": [46, 48, 49, 138, 158], "imageclassifi": [46, 48, 49], "pipelinedf": [46, 48, 49], "revers": [46, 48, 49], "split": [46, 48, 49, 105, 106, 113, 122, 124, 125, 128], "image_nam": [46, 48, 49], "bluetick": [46, 48, 49], "jpg": [46, 48, 49], "chihuahua": [46, 48, 49], "egyptian_cat": [46, 48, 49], "jpeg": [46, 48, 49], "tabbi": [46, 48], "cat": [46, 48, 49], "hen": [46, 48, 49], "hippopotamu": [46, 48, 49], "hippo": [46, 48, 49], "river": [46, 48, 49], "hors": [46, 48, 49], "amphibiu": [46, 48, 49], "junco": [46, 48, 49], "snowbird": [46, 48, 49], "ostrich": [46, 48, 49], "struthio": [46, 48, 49], "camelu": [46, 48, 49], "ox": [46, 48, 49], "palac": [46, 48, 49], "tractor": [46, 48, 49], "thresher": 46, "thrasher": 46, "thresh": 46, "setdorescal": [46, 48], "boolean": [46, 48], "setrescalefactor": [46, 48], "255": [46, 48], "setcroppct": 46, "determin": [46, 72], "smaller": [46, 61, 62, 70], "224": 46, "256": 46, "specifi": [46, 96, 97, 106, 171, 172], "edg": [46, 61, 77], "afterward": 46, "image_classifier_convnext_tiny_224_loc": 46, "convnext_for_image_classif": 47, "swin_for_image_classif": 47, "vit_for_image_classif": 47, "swinforimageclassif": 48, "swinimageclassif": 48, "shift": 48, "window": [48, 62, 65, 70, 80, 95, 115], "ze": 48, "yutong": 48, "lin": 48, "yue": 48, "cao": 48, "han": 48, "hu": 48, "yixuan": 48, "zheng": 48, "zhang": 48, "stephen": 48, "bain": 48, "guo": 48, "whose": 48, "scheme": [48, 66, 110], "bring": [48, 185], "greater": [48, 80], "attent": [48, 49, 60, 65], "non": [48, 126, 128], "overlap": [48, 84, 89], "cross": [48, 72, 73, 96], "connect": 48, "image_classifier_swin_base_patch4_window7_224": 48, "swinforimageclassificationtest": 48, "present": [48, 55, 63, 65, 66, 67, 69, 72, 73, 77, 100, 106, 110, 113], "call": [48, 56, 57, 61, 80, 111, 164, 169, 171, 185, 191], "capabl": [48, 61, 74, 111], "serv": [48, 182], "purpos": [48, 61, 106], "adapt": 48, "aris": 48, "domain": [48, 80, 111], "variat": 48, "high": [48, 69, 72, 73, 110, 113], "compar": [48, 49, 55, 60, 61, 63, 74, 80, 106, 110, 114, 115, 165, 181], "variou": [48, 74, 179], "complex": [48, 63, 69, 80, 117, 118], "respect": [48, 60, 71, 94, 95, 174], "These": [48, 55, 66, 67, 74, 80, 94, 111, 168, 183], "broad": [48, 111], "rang": [48, 56, 57, 60, 61, 72, 73, 110], "1k": 48, "dens": [48, 56, 57], "box": 48, "ap": 48, "51": [48, 131, 140, 174], "53": [48, 84, 89], "miou": 48, "val": 48, "Its": [48, 53, 97, 110], "surpass": [48, 60], "previou": [48, 72, 73, 111, 185], "margin": [48, 74], "prove": 48, "benefici": [48, 80], "mlp": 48, "vitforimageclassif": 49, "altern": [49, 80, 108, 115, 117, 118, 139, 142, 185, 190], "neural": [49, 56, 57, 60, 95, 106, 110, 113], "network": [49, 56, 57, 63, 95, 106], "image_classifier_vit_base_patch16_224": 49, "vitimageclassificationtestspec": 49, "becom": [49, 55, 61, 80], "de": [49, 58, 80, 82, 113], "facto": [49, 80], "remain": [49, 54, 55, 61, 80], "conjunct": 49, "replac": [49, 54, 60, 65, 82, 83, 96, 106, 110, 117, 118, 151, 185], "keep": [49, 80, 98, 110, 111, 114], "overal": [49, 71, 74], "structur": [49, 97, 144, 184], "relianc": 49, "cnn": [49, 82, 95, 106], "necessari": [49, 61, 181, 188], "directli": [49, 139, 165, 169, 181], "patch": 49, "veri": [49, 58, 63, 72, 73, 74, 110, 111, 113, 114, 139, 184, 186, 189, 190], "well": [49, 51, 53, 69, 72, 73, 80, 110, 142], "amount": [49, 69, 80, 89, 111, 128, 139, 189], "transfer": [49, 61, 69, 72, 73, 110, 111, 114], "mid": 49, "small": [49, 54, 55, 58, 61, 62, 70, 83, 103, 139, 174, 189], "cifar": 49, "vtab": 49, "etc": [49, 59, 132, 144, 181], "attain": 49, "excel": [49, 74], "substanti": [49, 56, 57], "fewer": [49, 55], "worth": 49, "16x16": 49, "egyptian": 49, "date2chunk": 50, "datematch": [50, 85], "multidatematch": [50, 85, 87], "entitynam": 50, "date_chunk": 50, "omicron": 50, "covid": 50, "world": [50, 54, 122, 165, 176, 181], "health": 50, "organ": [50, 80, 113], "nov": [50, 85, 87, 174], "26": [50, 93, 139, 157, 168, 176], "2021": [50, 85, 87], "118": [50, 142], "121": 50, "01": [50, 85, 87, 88], "setentitynam": 50, "dependencypars": [51, 53, 77], "dependencyparserapproach": [51, 172, 191], "unlabel": [51, 56, 57, 110, 111, 114], "grammat": [51, 53], "dependencyparsermodel": [51, 53, 77], "relationship": [51, 53, 69, 77], "tell": [51, 53, 80, 157], "verb": [51, 53, 172], "modifi": [51, 53, 66, 67, 93, 106], "describ": [51, 53, 77, 80, 113], "particular": [51, 53, 80, 169, 185], "treebank": 51, "penn": 51, "setdependencytreebank": 51, "conll": [51, 53, 94, 95, 158, 172, 173, 188], "u": [51, 53, 60, 61, 80, 87, 93, 94, 95, 139, 157, 168, 172, 183, 186, 191], "setconllu": [51, 53], "dependencytreebank": 51, "conllu": [51, 53, 83, 158, 173, 188], "numberofiter": [51, 53], "converg": [51, 53, 103, 128], "better": [51, 53, 55, 60, 74, 80, 94, 103, 105, 106, 109, 110, 128], "typeddependencyparserapproach": [51, 53], "postagg": [51, 53, 77, 94, 103], "dependency_treebank": 51, "emptydataset": [51, 53], "tree": [51, 77], "bank": 51, "setnumberofiter": [51, 53], "read_a": [51, 53, 75, 83, 84, 88, 89, 94, 98, 100, 108, 117, 118, 126, 150, 156, 158, 171, 172], "reada": [51, 53, 71, 75, 83, 84, 88, 89, 94, 98, 100, 108, 117, 118, 122, 126, 153, 156, 171, 172], "dep": 51, "dependency_conllu": [51, 77], "perceptron": [51, 78, 102], "typeddependencyparsermdoel": 51, "union": [51, 53], "worker": [51, 53], "turner": [51, 53], "newal": [51, 53], "sai": [51, 53, 80, 126], "disappoint": [51, 53], "talk": [51, 53], "stricken": [51, 53], "parent": [51, 53], "firm": [51, 53], "feder": [51, 53], "mogul": [51, 53], "dependency_pars": [52, 78, 169, 190], "typed_dependency_pars": [52, 78], "typeddependencypars": [53, 77], "conll2009": 53, "typeddependencyparsermodel": [53, 77], "beforehand": 53, "2009": 53, "setconll2009": 53, "dependency_typ": [53, 77], "train_smal": 53, "txt": [53, 62, 70, 71, 83, 84, 88, 89, 103, 106, 108, 115, 117, 118, 122, 126, 174, 175, 191], "descript": [53, 68, 80, 85, 117, 124, 151, 153], "typdep": 53, "dependency_typed_conllu": [53, 77], "amod": 53, "flat": [53, 77, 134], "nsubj": [53, 77, 134, 172], "parataxi": 53, "documentnorm": 54, "raw": [54, 111, 124, 126, 128, 184, 186], "scrape": 54, "xml": 54, "remov": [54, 66, 67, 98, 109, 125, 132, 133, 134], "dirti": [54, 98], "regex": [54, 75, 85, 88, 98, 115, 117, 118, 125, 126, 128], "want": [54, 75, 96, 169, 186], "polici": 54, "__": [54, 110, 132, 133], "action": 54, "clean": [54, 98, 110, 114, 144, 186], "lowercas": [54, 98, 125, 128, 130], "pretty_al": 54, "utf": 54, "cleanuppattern": [54, 98], "normalizeddocu": 54, "setact": 54, "setpattern": [54, 125, 128], "setreplac": 54, "setpolici": 54, "setlowercas": [54, 98, 130, 144], "div": 54, "theworldsgreatest": 54, "right": [54, 56, 57, 110, 128], "hide": 54, "toptext": 54, "style": [54, 82, 114], "font": 54, "sego": 54, "ui": 54, "arial": 54, "san": [54, 80], "serif": 54, "largest": [54, 80, 111], "develop": [54, 80, 113, 162], "site": [54, 80], "h1": 54, "300": 54, "160": 54, "lorem": [54, 84, 89], "ipsum": [54, 84, 89], "simpli": [54, 186], "print": [54, 158, 169], "typeset": 54, "industri": 54, "been": [54, 58, 111, 143, 144, 169], "1500": 54, "unknown": [54, 82], "printer": 54, "took": 54, "gallei": 54, "scrambl": 54, "specimen": 54, "surviv": 54, "five": [54, 96], "centuri": [54, 128], "leap": 54, "electron": 54, "essenti": [54, 111], "unchang": 54, "popularis": 54, "1960": 54, "releas": [54, 55, 58, 60, 66, 67, 72, 73, 110, 114, 158], "letraset": 54, "passag": 54, "recent": [54, 56, 57, 60, 66, 67, 80, 110], "desktop": 54, "publish": [54, 66, 67], "softwar": 54, "aldu": 54, "pagemak": 54, "setencod": 54, "lite": 55, "googl": [55, 56, 57, 60, 62, 63, 66, 67, 69, 70, 80, 114, 172], "research": [55, 56, 57, 60, 62, 70, 113, 114], "toyota": 55, "technolog": 55, "institut": 55, "chicago": 55, "offici": [55, 80, 93, 94, 95, 139, 157, 168, 182], "tf": [55, 69], "wrapper": [55, 161], "port": 55, "properti": [55, 135, 136, 147, 150, 158], "albert_base_uncas": 55, "albert_bas": 55, "768": [55, 56, 57, 58, 60, 61, 65, 66, 67, 72, 73, 74], "emb": 55, "dim": 55, "12m": 55, "albert_large_uncas": 55, "albert_larg": 55, "1024": [55, 63, 65, 74], "24": [55, 74, 84, 89, 93, 115, 139, 157, 168, 184], "16": [55, 74, 96, 174, 184], "18m": 55, "albert_xlarge_uncas": 55, "albert_xlarg": 55, "2048": 55, "60m": 55, "albert_xxlarge_uncas": 55, "albert_xxlarg": 55, "235m": 55, "sentencepiec": [55, 60, 69], "everi": [55, 56, 57, 58, 60, 61, 65, 66, 67, 72, 73, 74, 95, 109, 113, 115, 131, 140, 141, 186], "dimens": [55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 152], "repeat": 55, "footprint": 55, "cost": [55, 115, 117], "similar": [55, 69, 80, 82], "through": [55, 77, 80, 134, 186], "FOR": 55, "http": [55, 58, 60, 62, 63, 69, 70, 110, 128, 182], "tfhub": [55, 63, 69], "q": 55, "increas": [55, 71, 80, 110, 111, 117], "often": [55, 66, 67, 74], "downstream": [55, 58, 60, 63, 65, 74, 110, 111, 114], "some": [55, 57, 72, 80, 95, 106, 111, 141, 165, 176, 184, 185, 189, 190], "point": [55, 56, 57, 105, 106, 131, 140, 171], "harder": 55, "gpu": [55, 110, 111, 113, 114, 158], "tpu": 55, "longer": [55, 62, 65, 70, 82, 113, 190], "techniqu": [55, 60, 110, 111, 114], "consumpt": [55, 69, 71], "speed": [55, 94, 113], "devlin": [55, 66, 67], "et": [55, 66, 67, 82], "al": [55, 66, 67], "2019": [55, 58, 60, 66, 67, 72, 73, 110], "comprehens": [55, 110, 111], "empir": [55, 56, 57, 72, 73, 74], "evid": 55, "lead": [55, 58, 72, 73], "focus": [55, 80], "inter": 55, "coher": [55, 111], "As": [55, 56, 57, 61, 80], "establish": 55, "glue": [55, 56, 57, 61, 66, 67, 72, 73, 110], "race": [55, 60, 66, 67], "embeddingsfinish": [55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 132], "finished_embed": [55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "setoutputasvector": [55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 132], "setcleanannot": [55, 60, 61, 63, 65, 66, 68, 69, 71, 72, 74, 132, 133, 134], "80": [55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 88, 132, 144], "1342473030090332": [55, 60], "3855540752410889": [55, 60], "9818322062492371": [55, 60], "784737348556518": [55, 60], "847029983997345": [55, 60], "047153353691101": [55, 60], "1520637571811676": [55, 60], "6245765686035156": [55, 60], "009860038757324219": [55, 60], "13450059294700623": [55, 60], "707749128341675": [55, 60], "2916892766952": [55, 60], "04192575812339783": [55, 60], "5764210224151611": [55, 60], "3196685314178467": [55, 60], "527840495109": [55, 60], "15583214163780212": [55, 60], "1614152491092682": [55, 60], "28423872590065": [55, 60], "135491415858268": [55, 60], "bertembed": [56, 59, 68, 95, 132], "small_bert_l2_768": 56, "understand": [56, 57, 61, 72, 74, 80, 110, 114, 128, 184], "introduc": [56, 57, 61, 63, 65, 110, 114], "stand": [56, 57], "unlik": [56, 57, 72, 80, 124], "jointli": [56, 57], "condit": [56, 57, 110, 111, 114], "both": [56, 57, 63, 69, 77, 110, 185, 186], "left": [56, 57, 110, 128], "just": [56, 57, 61, 66, 90, 95], "without": [56, 57, 72, 73, 80, 111, 128], "modif": [56, 57], "conceptu": [56, 57], "power": [56, 57, 110, 114], "obtain": [56, 57, 58, 69], "eleven": [56, 57], "push": [56, 57], "absolut": [56, 57], "multinli": [56, 57], "86": [56, 57, 60], "v1": [56, 57], "f1": [56, 57, 72, 73, 95, 111], "93": [56, 57], "83": [56, 57, 60, 174, 175, 191], "small_bert_l2_128": 56, "3497989177703857": 56, "480538547039032": 56, "3238905668258667": 56, "612930893898010": 56, "1357314586639404": 56, "32984697818756104": 56, "6032363176345825": 56, "6791689395904": 56, "8244884014129639": 56, "27088963985443115": 56, "059438943862915": 56, "9817547798156": 56, "1648050546646118": 56, "4725411534309387": 56, "5938255786895752": 56, "5780693292617": 56, "9125322699546814": 56, "4563939869403839": 56, "3975459933280945": 56, "81611204147338": 56, "sentence_bert_embed": 57, "sent_small_bert_l2_768": 57, "islong": 57, "long": [57, 65, 74], "sent_small_bert_l2_128": 57, "orang": [57, 67, 73], "8951074481010437": [57, 67, 73], "13753940165042877": [57, 67, 73], "3108254075050354": [57, 67, 73], "65693199634552": [57, 67, 73], "6180210709571838": [57, 67, 73], "12179657071828842": [57, 67, 73], "191165953874588": [57, 67, 73], "4497021436691": [57, 67, 73], "822715163230896": [57, 67, 73], "7568016648292542": [57, 67, 73], "1165061742067337": [57, 67, 73], "59048593044281": [57, 67, 73], "setislong": 57, "camembertembed": 58, "tasti": 58, "french": [58, 80, 113, 120], "loui": 58, "martin": 58, "muller": 58, "pedro": 58, "javier": 58, "ortiz": 58, "su\u00e1rez": 58, "yoann": 58, "dupont": 58, "laurent": 58, "romari": 58, "\u00e9ric": 58, "villemont": 58, "la": [58, 113], "clergeri": 58, "djam\u00e9": 58, "seddah": 58, "beno\u00eet": 58, "sagot": 58, "facebook": [58, 60, 72, 73, 110], "138gb": 58, "camembert_bas": 58, "camembertembeddingstestspec": 58, "co": [58, 80], "ubiquit": 58, "despit": [58, 110], "most": [58, 61, 65, 80, 95, 110, 111, 113, 114], "concaten": [58, 128], "except": [58, 90, 95, 126], "investig": [58, 61, 69], "feasibl": 58, "monolingu": [58, 72, 73], "crawl": [58, 110, 114], "prefer": [58, 77, 134], "wikipedia": [58, 82, 111], "surprisingli": [58, 69], "4gb": 58, "those": [58, 77, 96, 185, 186], "larger": [58, 61, 66, 67, 110, 111, 113, 114], "130": 58, "gb": 58, "reach": [58, 80, 111, 128], "four": [58, 106, 128, 143], "un": [58, 82], "08442357927560806": 58, "12863239645957947": 58, "03835778683423996": 58, "200479581952": 58, "048462312668561935": 58, "12637358903884888": 58, "27429091930389404": 58, "07516729831": 58, "02690504491329193": 58, "12104076147079468": 58, "012526623904705048": 58, "031543646007": 58, "05877285450696945": 58, "08773420006036758": 58, "06381352990865707": 58, "122621834278": 58, "chunkembed": [59, 132], "wordembed": [59, 68, 71, 95, 132, 158], "chunker": [59, 78, 158], "ngramgener": [59, 90], "nerconvert": [59, 93, 94, 95, 165, 181], "poolingstrategi": [59, 68], "aggreg": [59, 68], "sum": [59, 63, 68], "skipoov": 59, "discard": [59, 97], "oov": 59, "ngram": [59, 90, 110, 111, 114], "setn": [59, 90], "wordembeddingsmodel": [59, 68, 71, 77, 94, 95, 96, 132], "setpoolingstrategi": [59, 68], "55661": 59, "42829502": 59, "86661": 59, "409785": 59, "06316501": 59, "120775": 59, "0732005": 59, "40674996": 59, "22938299": 59, "50597": 59, "288195": 59, "555655": 59, "465145": 59, "140118": 59, "17417": 59, "095253006": 59, "0530925": 59, "218465": 59, "714395": 59, "79860497": 59, "0129999": 59, "139705": 59, "177955": 59, "1887775": 59, "45545": 59, "20030999": 59, "461557": 59, "07891501": 59, "strategi": [59, 68, 85, 88, 105, 115, 151], "setskipoov": 59, "debertaembed": 60, "decod": [60, 65, 110, 111, 113, 114], "enhanc": [60, 109, 110], "disentangl": 60, "pengcheng": 60, "xiaodong": 60, "jianfeng": 60, "gao": 60, "weizhu": 60, "chen": [60, 66, 67], "2018": [60, 66, 67], "half": [60, 80], "deberta_v3_bas": 60, "microsoft": [60, 113], "www": 60, "blog": 60, "human": [60, 80], "superglu": 60, "progress": [60, 106, 125], "significantli": [60, 63, 66, 67, 72, 73, 80], "novel": [60, 74, 80, 110], "mechan": [60, 65], "weight": [60, 63, 80, 94, 96, 115], "among": 60, "matric": 60, "second": [60, 63, 88, 105, 120, 125, 185], "mnli": 60, "9": [60, 72, 73, 90, 184, 189, 190], "90": 60, "91": 60, "88": 60, "made": [60, 69, 181], "publicli": [60, 72, 73], "distilbertembed": 61, "fast": [61, 109, 113, 139, 189], "cheap": 61, "distil": 61, "40": [61, 96, 113], "uncas": 61, "preserv": [61, 93, 125, 144], "95": 61, "measur": [61, 66, 67, 110, 165], "distilbert_base_cas": 61, "doesn": [61, 66], "token_type_id": [61, 66], "indic": [61, 66, 125, 128], "belong": [61, 66], "separ": [61, 66, 88, 90, 105, 106, 117, 126, 128, 133, 157, 171, 183], "sep_token": [61, 66], "sep": 61, "position_id": 61, "ad": [61, 63, 115], "though": [61, 80], "know": [61, 113, 141], "cheaper": 61, "lighter": 61, "preval": 61, "oper": [61, 65, 115, 124, 184], "constrain": 61, "budget": 61, "counterpart": 61, "leverag": [61, 165, 181], "reduc": [61, 117, 118, 144], "retain": 61, "97": [61, 85, 87, 128], "being": [61, 95, 100, 110, 113, 114], "tripl": [61, 77], "cosin": 61, "distanc": [61, 115, 117, 118], "devic": 61, "proof": 61, "concept": [61, 186], "experi": [61, 74, 110, 165, 182], "studi": [61, 66, 67, 110, 114], "1127224713563919": 61, "1982710212469101": 61, "5360898375511169": 61, "272536993026733": 61, "35534414649009705": 61, "13215228915214539": 61, "40981462597846985": 61, "14036104083061": 61, "328085333108902": 61, "06269335001707077": 61, "017595693469047546": 61, "024373905733": 61, "15617232024669647": 61, "2967822253704071": 61, "22324979305267334": 61, "04568954557180": 61, "45411425828933716": 61, "01173491682857275": 61, "190129816532135": 61, "1178255230188369": 61, "doc2vecapproach": 62, "word2vec": [62, 64, 78], "corpu": [62, 63, 70, 80, 83, 103, 110, 114, 115, 174, 191], "algorithm": [62, 70, 80, 94, 109, 115, 117, 118], "vocabulari": [62, 70, 110, 111, 114, 115], "skip": [62, 70, 77, 115], "gram": [62, 70, 80, 90, 110, 111, 114], "doc2vecmodel": 62, "vectors": [62, 70], "windows": [62, 70, 80], "numpartit": [62, 70], "partit": [62, 70, 171], "mincount": [62, 70, 115], "must": [62, 70, 83, 84, 88, 89, 100, 108, 109, 117, 118, 130, 157, 158, 165, 171], "appear": [62, 70, 115], "divid": [62, 70], "1000": [62, 70, 77, 94], "stepsiz": [62, 70], "optim": [62, 66, 67, 70, 95, 97, 106], "025": [62, 70], "maxit": [62, 70], "estim": [62, 70, 121, 135, 145, 154, 164, 185], "distribut": [62, 70], "composition": [62, 70], "sherlockholm": [62, 70, 115, 191], "setvectors": [62, 70], "setwindows": [62, 70, 80], "setsteps": [62, 70], "initi": [62, 70, 115, 125, 141, 158, 171, 172, 174, 175, 181], "setnumpartit": [62, 70], "setmaxit": [62, 70], "numiter": [62, 70], "equal": [62, 70], "setse": [62, 70], "setmincount": [62, 70, 115], "doc2vec_gigaword_300": 62, "06222493574023247": [62, 70], "011579325422644615": [62, 70], "009919632226228714": [62, 70], "109361454844": [62, 70], "doc2vec_wiki": 62, "elmoembed": 63, "elmo": 63, "billion": [63, 111], "computation": [63, 66, 67, 74, 110, 111, 113, 114], "expens": [63, 66, 67, 74, 108, 110, 111, 113, 114, 117], "lookup": [63, 71, 74, 84, 117, 118], "acceler": [63, 74, 110, 111, 113, 114, 158], "setpoolinglay": 63, "word_emb": 63, "shape": 63, "batch_siz": 63, "max_length": 63, "lstm_outputs1": 63, "lstm": [63, 95], "lstm_outputs2": 63, "trainabl": 63, "tensor": 63, "poolinglay": 63, "contextu": [63, 110, 115], "characterist": 63, "syntax": 63, "vari": 63, "across": [63, 111], "linguist": [63, 128], "polysemi": 63, "intern": [63, 99, 100, 115, 126, 128, 142, 147, 152, 158], "bilm": 63, "exist": [63, 115, 132, 134, 165], "six": [63, 117, 118], "textual": 63, "entail": 63, "expos": 63, "crucial": 63, "mix": [63, 146, 164], "semi": 63, "signal": 63, "662458181381226e": 63, "2541114091873169": 63, "6275503039360046": 63, "5787073969841": 63, "19154725968837738": 63, "22998669743537903": 63, "2894386649131775": 63, "21524395048618": 63, "10400570929050446": 63, "12288510054349899": 63, "07056470215320587": 63, "246389418840": 63, "49932169914245605": 63, "12706467509269714": 63, "30969417095184326": 63, "2643227577209": 63, "8871506452560425": 63, "20039963722229004": 63, "0601330995559692": 63, "0348707810044": 63, "albert_embed": [64, 78], "bert_embed": [64, 78], "bert_sentence_embed": [64, 78], "camembert_embed": [64, 78], "chunk_embed": [64, 78], "deberta_embed": [64, 78], "distil_bert_embed": [64, 78], "doc2vec": [64, 78], "elmo_embed": [64, 78], "longformer_embed": [64, 78], "roberta_embed": [64, 78], "roberta_sentence_embed": [64, 78], "universal_sentence_encod": [64, 78], "xlm_roberta_embed": [64, 78], "xlm_roberta_sentence_embed": [64, 78], "xlnet_embed": [64, 78], "longformerembed": 65, "iz": 65, "beltagi": 65, "matthew": 65, "arman": 65, "cohan": 65, "checkpoint": 65, "mlm": 65, "096": 65, "longformer_base_4096": 65, "unabl": 65, "quadrat": 65, "linearli": 65, "easi": 65, "thousand": 65, "drop": [65, 120], "motiv": 65, "global": 65, "text8": 65, "enwik8": 65, "contrast": [65, 84, 114], "finetun": [65, 74], "wikihop": 65, "triviaqa": 65, "led": [65, 66, 67, 80], "arxiv": [65, 110], "summar": [65, 80, 110, 111, 113, 114], "found": [65, 71, 80, 117, 124, 130, 171, 188], "18792399764060974": [65, 66], "14591649174690247": [65, 66], "20547787845134735": [65, 66], "1468472778797": [65, 66], "22845706343650818": [65, 66], "18073144555091858": [65, 66], "09725798666477203": [65, 66], "0417917296290": [65, 66], "07037967443466187": [65, 66], "14801117777824402": [65, 66], "03603338822722435": [65, 66], "17893412709": [65, 66], "08734266459941864": [65, 66], "2486150562763214": [65, 66], "009067727252840996": [65, 66], "24408400058": [65, 66], "22409197688102722": [65, 66], "4312366545200348": [65, 66], "1401449590921402": [65, 66], "356410235166549": [65, 66], "robertaembed": [66, 72], "robustli": [66, 67, 97], "yinhan": [66, 67], "myle": [66, 67, 72, 73], "ott": [66, 67, 72, 73], "naman": [66, 67, 72, 73], "goyal": [66, 67, 72, 73], "jingfei": [66, 67], "du": [66, 67, 82], "mandar": [66, 67], "joshi": [66, 67], "danqi": [66, 67], "omer": [66, 67], "levi": [66, 67], "mike": [66, 67], "lewi": [66, 67], "luke": [66, 67, 72, 73], "zettlemoy": [66, 67, 72, 73], "veselin": [66, 67, 72, 73], "stoyanov": [66, 67, 72, 73], "hyperparamet": [66, 67], "next": [66, 67, 80, 85, 87, 110, 111, 114], "mini": [66, 67], "roberta_bas": 66, "bpe": 66, "gpt": [66, 110, 111], "signific": [66, 67, 72, 73, 80, 83], "gain": [66, 67, 72, 73, 110], "care": [66, 67, 126], "comparison": [66, 67, 69, 120], "privat": [66, 67, 159], "choic": [66, 67, 88], "impact": [66, 67], "replic": [66, 67, 110], "carefulli": [66, 67], "undertrain": [66, 67], "exce": [66, 67], "highlight": [66, 67], "previous": [66, 67, 80], "overlook": [66, 67], "rais": [66, 67, 80, 90, 95, 165], "report": [66, 67, 69, 110, 165, 181], "robertasentenceembed": 67, "sent_roberta_bas": 67, "embeddingssent": 68, "22093398869037628": 68, "25130119919776917": 68, "41810303926467896": 68, "380883991718": 68, "dimension": 69, "tfhub_us": 69, "loadsp": 69, "op": 69, "lingual": [69, 72, 73, 80, 82, 113], "accur": [69, 109, 110, 117], "divers": [69, 110, 111, 114, 182], "trade": [69, 72, 73], "baselin": [69, 111], "tend": 69, "With": [69, 74, 80], "observ": 69, "minim": [69, 97, 113], "encourag": 69, "weat": 69, "bia": 69, "freeli": 69, "04616805538535118": 69, "022307956591248512": 69, "044395286589860916": 69, "0016493503": 69, "setloadsp": 69, "word2vecapproach": 70, "word2vecmodel": 70, "word2vec_gigaword_300": 70, "word2vec_wiki": 70, "custom": [71, 94, 95, 105, 106, 126, 158, 165], "dictionari": [71, 80, 83, 88, 94, 96, 97, 98, 108, 117, 118, 165], "setstoragepath": [71, 84], "line": [71, 75, 84, 89, 106, 108, 115, 168, 171, 174], "delimit": [71, 75, 77, 83, 88, 90, 94, 98, 108, 125, 142, 171, 174], "39658191506190343": 71, "630968081620067": 71, "5393722253731201": 71, "8428180123359783": 71, "were": [71, 95, 165, 181], "7535235923631415": 71, "9699218875629833": 71, "10397182122983872": 71, "11833962569383116": 71, "stress": 71, "0492683418305907": 71, "9415954572751959": 71, "47624463167525755": 71, "16790967216778263": 71, "induc": 71, "1535748762292387": 71, "33498936903209897": 71, "9235178224122094": 71, "1158772920395934": 71, "zero": [71, 97, 111], "withcoveragecolumn": 71, "overallcoverag": 71, "writebuffers": 71, "dump": 71, "disk": [71, 185, 186], "storag": [71, 75, 84, 150, 158], "10000": 71, "readcaches": 71, "cach": [71, 110, 169], "higher": [71, 80, 109, 110, 111, 114], "random_embeddings_dim4": 71, "abov": [71, 77, 174], "setstorageref": 71, "glove_4d": 71, "setdimens": [71, 152], "patient": 71, "diagnos": 71, "diabet": 71, "9439099431037903": 71, "4707513153553009": 71, "806300163269043": 71, "16176554560661316": 71, "7966810464859009": 71, "5551124811172485": 71, "8861005902290344": 71, "28284206986427307": 71, "025029370561242104": 71, "35177749395370483": 71, "052506182342767715": 71, "1887107789516449": 71, "08617766946554184": 71, "8399239182472229": 71, "5395117998123169": 71, "7864698767662048": 71, "6599600911140442": 71, "16109347343444824": 71, "6041093468666077": 71, "8913561105728149": 71, "5955275893211365": 71, "01899011991918087": 71, "4397728443145752": 71, "8911281824111938": 71, "9840458631515503": 71, "7599489092826843": 71, "9417727589607239": 71, "8624503016471863": 71, "setwritebuffers": 71, "setreadcaches": 71, "glove_100d": [71, 95], "There": [71, 75, 77, 124, 183, 185, 186, 191], "conveni": 71, "coverag": [71, 149], "add": [71, 85, 87, 105, 110, 111, 114, 115, 126, 185], "stat": 71, "field": [71, 75, 89], "whole": [71, 168], "570580005645752": 71, "44183000922203064": 71, "7010200023651123": 71, "417129993438720": 71, "542639970779419": 71, "4147599935531616": 71, "0321999788284302": 71, "4024400115013122": 71, "2708599865436554": 71, "04400600120425224": 71, "020260000601410866": 71, "17395000159": 71, "6191999912261963": 71, "14650000631809235": 71, "08592499792575836": 71, "2629800140857": 71, "3397899866104126": 71, "20940999686717987": 71, "46347999572753906": 71, "6479200124740": 71, "embeddings_col": 71, "coverageresult": 71, "coverateresult": 71, "wordsoverallcoverag": 71, "resultdf": 71, "output_col": 71, "wordscoverag": 71, "cov_embed": 71, "loadstorag": [71, 84], "storage_ref": [71, 84], "xlmrobertaembed": 72, "alexi": [72, 73], "conneau": [72, 73], "kartikai": [72, 73], "khandelw": [72, 73], "vishrav": [72, 73], "chaudhari": [72, 73], "guillaum": [72, 73], "wenzek": [72, 73], "francisco": [72, 73, 80], "guzman": 72, "edouard": [72, 73], "grave": [72, 73], "5tb": [72, 73], "commoncrawl": [72, 73], "xlm_roberta_bas": 72, "xx": [72, 73, 82, 113], "multilingu": [72, 73, 128], "doe": [72, 80, 93, 113, 139, 141, 169, 186, 189, 190], "abl": [72, 114, 165, 184], "correct": [72, 115, 117, 118, 128], "hundr": [72, 73], "terabyt": [72, 73], "r": [72, 73, 80], "mbert": [72, 73], "xnli": [72, 73], "mlqa": [72, 73], "particularli": [72, 73, 110], "low": [72, 73, 115], "swahili": [72, 73], "urdu": [72, 73], "capac": [72, 73, 111], "dilut": [72, 73], "sacrif": [72, 73], "ri": [72, 73], "competit": [72, 73, 80], "strong": [72, 73], "05969233065843582": 72, "030789051204919815": 72, "04443822056055069": 72, "09564960747": 72, "038839809596538544": 72, "011712731793522835": 72, "019954433664679527": 72, "0667808502": 72, "03952755779027939": 72, "03455188870429993": 72, "019103847444057465": 72, "04311436787": 72, "09579929709434509": 72, "02494969218969345": 72, "014753809198737144": 72, "10259044915": 72, "004710011184215546": 72, "022148698568344116": 72, "011723337695002556": 72, "013356896": 72, "xlmrobertasentenceembed": 73, "guzm\u00e3": 73, "sent_xlm_roberta_bas": 73, "xlnetembed": 74, "autoregress": 74, "permut": 74, "addition": [74, 95, 103, 131, 140, 168], "emploi": 74, "xl": 74, "exhibit": 74, "involv": [74, 106], "sota": 74, "rank": [74, 115], "xlnet_large_cas": 74, "xlnet_base_cas": 74, "full": [74, 185], "zihangdai": 74, "denois": [74, 110], "autoencod": [74, 110], "corrupt": [74, 110], "neglect": 74, "suffer": 74, "discrep": 74, "pro": 74, "con": 74, "enabl": [74, 95, 117, 158], "maxim": [74, 115], "likelihood": 74, "overcom": 74, "formul": 74, "furthermor": 74, "integr": [74, 80, 113, 165, 181, 183], "idea": 74, "6287205219268799": 74, "4865287244319916": 74, "186111718416214": 74, "234187275171279": 74, "1967450380325317": 74, "2746637463569641": 74, "9481253027915955": 74, "3431355059146881": 74, "0777631998062134": 74, "092679977416992": 74, "5331977605819702": 74, "11190271377563": 74, "8349916934967041": 74, "45627787709236145": 74, "7890847325325012": 74, "028069257736": 74, "134845569729805": 74, "11672890186309814": 74, "4945235550403595": 74, "66587203741073": 74, "entityrul": 75, "entityrulerapproach": 75, "exact": [75, 84, 89], "definit": [75, 97, 171], "json": [75, 142, 165, 176], "jsonl": 75, "setpatternsresourc": 75, "might": [75, 95, 128, 190], "rule": [75, 85, 88, 108, 124, 126, 151], "person": [75, 172], "w": [75, 78, 88, 94, 98, 124, 126, 158], "winterfel": 75, "jon": 75, "snow": [75, 96, 115], "stark": 75, "eddard": 75, "patternsresourc": 75, "usestorag": 75, "rocksdb": 75, "lord": 75, "29": [75, 96, 128, 174, 176], "38": [75, 176], "setusestorag": 75, "setsentencematch": 75, "setalphabetresourc": 75, "alphabet": [75, 98], "plain": [75, 191], "entityrulermodel": 75, "entity_rul": [76, 78], "graphextract": [77, 134], "graph": [77, 95, 113, 115, 121, 134], "nerdlmodel": [77, 93, 94, 95, 96, 165, 169, 181], "store": [77, 99, 100, 142, 147, 152, 163, 168, 176, 182], "node": 77, "relev": [77, 80], "taken": 77, "implicitli": 77, "setmergeent": 77, "automat": [77, 80, 97, 113, 117, 184, 185], "setdependencyparsermodel": 77, "settypeddependencyparsermodel": 77, "setrelationshiptyp": 77, "public": [77, 169, 185], "relationshiptyp": 77, "entitytyp": 77, "explodeent": 77, "roottoken": 77, "travers": 77, "maxsentences": 77, "minsentences": 77, "below": [77, 190], "mergeent": 77, "merg": [77, 84, 89], "neighbor": 77, "includeedg": 77, "symbol": [77, 115, 128], "posmodel": 77, "coordin": [77, 105], "remoteloc": 77, "graphfinish": [77, 134], "rdf": [77, 134], "nertagg": [77, 94, 95, 96], "morn": [77, 134], "flight": [77, 134], "denver": [77, 134], "18": [77, 85, 87, 90, 93, 96, 139, 157, 168, 184], "path1": 77, "setentitytyp": 77, "setexplodeent": 77, "setroottoken": 77, "setmaxsentences": 77, "setminsentences": 77, "setmergeentitiesiobformat": 77, "iob": [77, 93, 94, 95], "iob2": [77, 93], "setincludeedg": 77, "setdelimit": [77, 88, 90], "setposmodel": 77, "class": [78, 150, 155, 162, 173, 180, 181, 189, 191], "classifier_dl": [78, 158], "er": [78, 158], "keyword_extract": [78, 158], "yake_keyword_extract": [78, 79], "ld_dl": [78, 158], "language_detector_dl": [78, 81], "matcher": [78, 158], "big_text_match": [78, 86], "date_match": [78, 86], "multi_date_match": [78, 86], "regex_match": [78, 86], "text_match": [78, 86], "ner_approach": [78, 91], "ner_convert": [78, 91], "ner_crf": [78, 91], "ner_dl": [78, 91], "ner_overwrit": [78, 91], "param": [78, 94, 146, 147, 152, 158, 163, 164], "sentence_detector_dl": [78, 104, 113], "sentiment_detector": [78, 107], "vivekn_senti": [78, 107], "seq2seq": [78, 158], "bart_transform": [78, 112], "gpt2_transform": [78, 112], "marian_transform": [78, 112], "t5_transform": [78, 112], "spell_check": [78, 158], "context_spell_check": [78, 116], "norvig_sweet": [78, 116], "symmetric_delet": [78, 116], "chunk_token": [78, 123], "recursive_token": [78, 123], "regex_token": [78, 123], "word_segment": [78, 127], "chunk2_doc": [78, 158], "date2_chunk": [78, 158], "document_norm": [78, 158], "graph_extract": [78, 158], "lemmat": [78, 108, 120, 141, 144, 158], "n_gram_gener": [78, 158], "stemmer": [78, 120, 158], "stop_words_clean": [78, 158], "yakekeywordextract": 80, "yake": 80, "independ": [80, 117, 118, 124], "individu": [80, 115], "grow": 80, "autom": 80, "adequ": 80, "manner": 80, "emerg": [80, 110, 114], "tool": [80, 110], "system": [80, 110, 111], "nor": 80, "thesauri": 80, "neither": 80, "corpora": [80, 84], "thu": 80, "written": [80, 113], "plethora": 80, "situat": [80, 106], "access": 80, "restrict": 80, "therefor": [80, 189], "sent": 80, "boundari": [80, 105, 106, 109, 126, 128], "detector": [80, 85, 108], "section": [80, 131, 140, 181, 183, 189], "tweakabl": 80, "upper": 80, "bound": [80, 105, 106, 109], "minngram": 80, "maxngram": 80, "occurr": [80, 151], "nkeyword": 80, "stopword": [80, 96, 120], "stop": [80, 94, 120], "campo": 80, "mangaravit": 80, "pasquali": 80, "jatowt": 80, "jorg": 80, "nune": 80, "scienc": [80, 182], "journal": [80, 128], "elsevi": 80, "vol": 80, "509": 80, "pp": [80, 128], "257": 80, "289": 80, "collect": [80, 165, 181], "turn": [80, 144, 185], "come": [80, 93], "fly": 80, "demand": 80, "abil": [80, 110, 111], "within": [80, 103, 109, 110, 111, 126, 130], "resort": 80, "alwai": [80, 114], "solut": 80, "articl": [80, 115], "rest": [80, 93], "merit": 80, "ten": 80, "experiment": 80, "carri": 80, "twenti": 80, "setcontextchar": [80, 126], "setminngram": 80, "setnkeyword": 80, "acquir": 80, "kaggl": 80, "platform": [80, 165, 183], "host": 80, "transact": 80, "somewhat": 80, "vagu": 80, "cloud": 80, "confer": 80, "week": [80, 85, 87, 122], "announc": [80, 96], "earli": 80, "tomorrow": [80, 85, 87], "phone": 80, "founder": 80, "ceo": 80, "anthoni": 80, "goldbloom": 80, "declin": 80, "deni": 80, "acquisit": 80, "happen": 80, "rumor": 80, "million": [80, 96, 111], "scientist": 80, "ben": 80, "hamner": 80, "2010": 80, "servic": [80, 113], "got": 80, "even": [80, 114], "few": [80, 126, 174, 191], "competitor": 80, "drivendata": 80, "topcod": 80, "hackerrank": 80, "stai": 80, "ahead": 80, "nich": 80, "home": [80, 158], "bui": [80, 172], "commun": 80, "mindshar": 80, "too": [80, 108, 184], "plenti": 80, "bit": [80, 106, 190], "histori": [80, 106, 115], "earlier": 80, "month": [80, 85, 87, 174, 191], "team": [80, 113, 165, 181], "around": 80, "youtub": 80, "That": [80, 124, 165, 181, 186], "had": 80, "technologi": 80, "did": 80, "interest": 80, "kernel": 80, "On": [80, 111, 113], "analyz": [80, 109], "compani": [80, 113], "script": 80, "centric": 80, "job": [80, 130], "board": [80, 103, 174], "unclear": 80, "accord": [80, 115, 171], "crunchbas": 80, "pitchbook": 80, "launch": 80, "investor": 80, "ventur": 80, "sv": 80, "angel": 80, "levchin": 80, "naravik": 80, "chie": 80, "economist": 80, "hal": 80, "varian": 80, "khosla": 80, "yuri": 80, "milner": 80, "resulttupl": 80, "ascend": 80, "orderbi": 80, "32051516486864573": 80, "37786450577630676": 80, "39922830978423146": 80, "40224744669493756": 80, "41584827825302534": 80, "setmaxngram": 80, "setstopword": [80, 96, 120], "getstopword": 80, "loaddefaultstopword": [80, 120], "danish": [80, 120], "dutch": [80, 120], "finnish": [80, 120], "german": [80, 120, 171, 191], "hungarian": [80, 120], "italian": [80, 115, 120], "norwegian": [80, 120], "portugues": [80, 120], "russian": [80, 120], "spanish": [80, 120], "swedish": [80, 120], "turkish": [80, 120], "languagedetectordl": 82, "ld": 82, "identif": 82, "rnn": 82, "tatoeba": 82, "140": 82, "wiki": 82, "languagedetector": 82, "ld_wiki_tatoeba_cnn_21": 82, "open": [82, 126, 130, 131, 132, 140, 144, 182], "advanc": [82, 130, 144], "scala": [82, 145, 146, 154, 160, 164], "program": 82, "biblioth\u00e8qu": 82, "traitement": 82, "pour": 82, "le": [82, 113], "avanc\u00e9": 82, "langag": 82, "naturel": 82, "programm": 82, "ist": 82, "ein": 82, "textverarbeitungsbibliothek": 82, "f\u00fcr": 82, "fortgeschritten": 82, "nat\u00fcrlich": 82, "sprachverarbeitung": 82, "die": 82, "programmiersprachen": 82, "und": 82, "lemma": [83, 108, 139, 168, 172, 186, 189, 190], "predefin": [83, 84, 88, 89, 108], "setdictionari": [83, 108, 117, 118], "lemmatizermodel": 83, "lemmas_smal": [83, 108], "setformcol": 83, "correspend": 83, "formcol": [83, 172], "setlemmacol": 83, "fromlemma": 83, "key_delimit": 83, "value_delimit": 83, "lemma_antbnc": 83, "bigtextmatch": [84, 89], "textmatch": [84, 89, 122], "externalresourc": [84, 89, 156], "mergeoverlap": [84, 89], "tokenizermodel": [84, 126], "trie": 84, "dolor": [84, 89], "magna": [84, 89], "aliqua": [84, 89], "sit": [84, 89], "laborum": [84, 89], "hello": [84, 89, 122, 176], "entityextractor": [84, 89, 122], "extractor": [84, 89, 122], "59": [84, 85, 87, 89], "setent": [84, 89, 92, 122], "setmergeoverlap": [84, 89], "settoken": 84, "tokenizer_model": 84, "bigtextmatchermodel": 84, "btm": 84, "textmatchermodel": [84, 89], "searchtri": 84, "datematcherutil": 85, "setinputformat": [85, 142], "setoutputformat": [85, 87], "desir": [85, 87], "yyyi": [85, 87], "mm": [85, 87, 128], "dd": [85, 87, 88], "Not": [85, 95, 141], "setreadmonthfirst": 85, "juli": 85, "5th": 85, "2015": 85, "07": 85, "05": 85, "setdefaultdaywhenmiss": 85, "dai": [85, 87, 115], "miss": [85, 87, 130], "setanchordateyear": [85, 87], "anchor": [85, 87], "year": [85, 87, 111, 122, 174], "setanchordatemonth": [85, 87], "januari": [85, 87], "setanchordatedai": [85, 87], "setrelaxedfactorystrategi": 85, "matchstrategi": [85, 151], "match_first": [85, 88, 151], "search": [85, 110, 117], "relax": 85, "exhaust": 85, "1978": [85, 87], "28": [85, 87, 93, 139, 157, 168, 176, 184], "1984": [85, 87], "04": [85, 87], "02": [85, 87], "1980": [85, 87], "79": [85, 87], "31st": [85, 87], "april": [85, 87], "2008": [85, 87], "fri": [85, 87], "1997": [85, 87], "jan": [85, 87], "sun": [85, 87], "1st": [85, 87], "thursdai": [85, 87], "wednesdai": [85, 87], "todai": [85, 87, 176], "yesterdai": [85, 87], "0600h": [85, 87], "06": [85, 87], "00": [85, 87], "hour": [85, 87], "6pm": [85, 87], "23": [85, 87, 88, 96, 103, 174, 175, 176, 191], "1988": [85, 87], "31": [85, 87, 88, 96, 103, 174], "dateformat": [85, 87], "readmonthfirst": [85, 87], "defaultdaywhenmiss": [85, 87], "anchordateyear": [85, 87], "anchordatemonth": [85, 87], "anchordatedai": [85, 87], "15": [85, 176], "saw": 87, "him": 87, "me": 87, "visit": 87, "57": [87, 96], "65": [87, 96], "regexmatch": 88, "d": [88, 98, 126, 183], "1970": 88, "setrul": 88, "setexternalrul": 88, "match_al": [88, 151], "match_complet": [88, 151], "externalrul": 88, "ceremoni": 88, "setstrategi": 88, "71": 88, "short_dat": 88, "regexmatchermodel": 88, "regardless": 89, "entityvalu": 89, "buildfromtoken": 89, "27": [89, 103, 105, 174], "48": [89, 128, 176], "setentityvalu": 89, "setbuildfromtoken": 89, "null": 90, "empti": [90, 130], "enablecumul": 90, "join": [90, 103, 142, 174], "setenablecumul": 90, "nerapproach": 92, "recogn": [92, 93, 94, 95, 96, 97, 115], "setminepoch": [92, 94], "setrandomse": [92, 95, 99], "getlabelcolumn": [92, 121], "friendli": [93, 113], "whitelist": [93, 124], "setwhitelist": [93, 124], "outsid": 93, "prefix": [93, 124, 126, 165, 181], "preserveposit": [93, 125, 144], "org": [93, 94, 95, 96, 110, 128, 139, 157, 158, 168, 171, 182, 191], "14": [93, 103, 139, 143, 157, 168, 174], "ekeu": [93, 94, 95, 139, 157, 168], "36": [93, 103, 139, 157, 168, 174, 176], "baghdad": [93, 94, 95, 139, 157, 168], "37": [93, 139, 157, 168], "setpreserveposit": [93, 125, 144], "setnerhasnoschema": 93, "nercrf": 94, "nercrfapproach": [94, 95], "nercrfmodel": [94, 95], "crf": [94, 95], "2003": [94, 95, 128, 171, 191], "exclud": [94, 95], "setexternalfeatur": 94, "minepoch": [94, 95], "l2": 94, "c0": 94, "decai": [94, 95], "gradient": 94, "2250000": 94, "lossep": 94, "ep": 94, "minw": 94, "includeconfid": [94, 95], "confid": [94, 95, 97], "externalfeatur": 94, "nerdlapproach": [94, 95, 171, 191], "trainingdata": [94, 95, 106, 117, 118, 171], "readdataset": [94, 95, 103, 128, 171, 172, 174, 175, 176, 191], "conll2003": [94, 95, 171, 191], "eng": [94, 95, 171, 191], "setl2": 94, "l2valu": 94, "setc0": 94, "c0valu": 94, "setlossep": 94, "setminw": 94, "setincludeconfid": [94, 95], "verbosevalu": 94, "prerequisit": [94, 95, 96, 185], "nerdl": 95, "char": [95, 98, 106], "bilstm": 95, "tagger": [95, 174, 191], "50": [95, 96, 103, 110, 111, 176], "real": [95, 158, 165, 181], "rage": 95, "graphfold": [95, 115], "usecontrib": 95, "contrib": 95, "cell": [95, 142], "slightli": [95, 106], "includeallconfidencescor": 95, "enablememoryoptim": 95, "slow": 95, "down": [95, 185, 186], "usebestmodel": 95, "bestmodelmetr": 95, "check": [95, 105, 115, 116, 117, 118, 139, 144, 168, 185, 190], "micro": 95, "macro": 95, "setgraphfold": [95, 115, 121], "setusecontrib": 95, "setpo": 95, "setincludeallconfidencescor": 95, "setenablememoryoptim": 95, "setusebestmodel": 95, "setbestmodelmetr": 95, "nermodel": 95, "neroverwrit": 96, "setnewresult": 96, "nerword": 96, "overwritten": 96, "newnerent": 96, "lab": 96, "42": [96, 103], "45": [96, 103, 174, 176], "47": [96, 174, 176], "66": 96, "ner_overwritten": 96, "setnerword": 96, "setnewnerent": 96, "cardin": 96, "setreplaceent": 96, "rw": 96, "zeroshotnermodel": 97, "shot": [97, 111], "zeroshotn": 97, "zer_shot_n": 97, "entitydefinit": 97, "citi": 97, "town": 97, "predictionthreshold": 97, "01f": 97, "ignoreent": 97, "zero_shot_n": 97, "setentitydefinit": 97, "hellen": 97, "5328949": 97, "9360068": 97, "83294415": 97, "45366877": 97, "setpredictionthreshold": 97, "zero_shot_ner_roberta": 97, "shortcut": 97, "stem": [98, 119, 139, 168, 189, 190], "henc": 98, "pl": 98, "slangdictionari": 98, "slang": 98, "minlength": [98, 105, 106, 125, 126], "maxlength": [98, 105, 106, 125, 126], "setcleanuppattern": 98, "punctuat": [98, 105], "alphanumer": 98, "letter": [98, 111, 115, 174, 191], "za": 98, "z": [98, 126], "brother": 98, "dont": [98, 109], "setslangdictionari": 98, "setminlength": [98, 105, 106, 125, 126], "setmaxlength": [98, 105, 106, 125, 126], "normalizermodel": 98, "classifierencod": 99, "attach": [99, 100, 147, 152, 163, 165], "evaluationdlparam": 100, "setevaluationlogextend": 100, "setenableoutputlog": [100, 165, 181], "setoutputlogspath": [100, 106, 165, 181], "assum": 100, "perceptronapproach": [103, 174, 191], "member": [103, 168], "datasetpath": 103, "pierr": [103, 174], "vinken": [103, 174], "34": [103, 174, 176], "md": [103, 174], "vb": [103, 171, 174, 191], "41": [103, 105, 174, 176], "43": [103, 105, 174, 176], "dt": [103, 174, 175, 191], "49": [103, 174], "poscol": [103, 128, 171], "niter": [103, 128], "anc": [103, 174, 191], "trainingperceptrondf": 103, "trainedpo": 103, "setposcolumn": [103, 128], "cd": [103, 171, 174], "setiter": 103, "getniter": [103, 128], "pos_anc": 103, "25": [103, 105, 174, 176], "33": [103, 176], "sentencedetectorparam": 105, "ii": 105, "abbrevi": 105, "period": 105, "geo": 105, "1026": 105, "253": 105, "553": 105, "ellipsi": 105, "quotat": 105, "mark": [105, 106, 128], "exclam": 105, "breaker": 105, "pragmaticcontentformatt": 105, "custombound": [105, 106], "setcustombound": [105, 106], "usecustomboundsonli": [105, 106], "explodesent": [105, 106, 171, 172], "useabbrevi": 105, "explicitli": [105, 106, 120, 157, 185], "customboundsstrategi": 105, "prepend": [105, 130], "break": 105, "append": [105, 115, 185], "parallel": [105, 106, 139, 171, 189], "splitlength": [105, 106], "forcibli": [105, 106], "99999": [105, 106, 126], "detectlist": 105, "nhow": 105, "setcustomboundsstrategi": 105, "setuseabbrevi": 105, "setdetectlist": 105, "setusecustomboundsonli": [105, 106], "setexplodesent": [105, 106], "setsplitlength": [105, 106], "sentencedetectordl": [106, 113], "sentencedetectordlapproach": 106, "futur": [106, 110, 114], "setmodel": 106, "sentencedetectordlmodel": [106, 113], "modelarchitectur": 106, "impossiblepenultim": 106, "imposs": [106, 128], "penultim": 106, "epochsnumb": 106, "eo": 106, "stefan": 106, "schweter": 106, "sajawel": 106, "ahm": 106, "littl": [106, 190], "cover": [106, 110, 114, 128], "broken": 106, "moder": 106, "lack": 106, "easier": [106, 133, 187, 191], "polit": 106, "successor": 106, "great": 106, "respons": 106, "heritag": 106, "bequeath": 106, "nelson": 106, "mandela": 106, "setepochsnumb": 106, "model_architectur": 106, "validation_split": 106, "epochs_numb": 106, "output_logs_path": 106, "setimpossiblepenultim": 106, "impossible_penultim": 106, "sentencedl": 106, "sentencesdl": 106, "helen": 106, "total": [106, 128], "peopl": 106, "sentimentdetector": 108, "By": [108, 110, 114, 120, 125, 132, 158, 165, 181], "els": 108, "viveknsentimentapproach": [108, 109], "cool": 108, "superb": 108, "uninspir": 108, "sentimentscor": 108, "staff": 108, "restaur": 108, "nice": [108, 165, 181], "avoid": 108, "entri": [108, 131, 140, 169], "sttr": 108, "sentimentdetectormodel": 108, "sda": [108, 109], "pragmat": 108, "viveknsenti": 109, "analys": 109, "vivek": 109, "narayanan": 109, "give": 109, "transit": [109, 115], "sentimentcol": 109, "prunecorpu": 109, "unfrequ": 109, "scenario": 109, "scope": 109, "naiv": 109, "bay": 109, "vivekn": 109, "setsentimentcol": 109, "train_senti": 109, "result_senti": 109, "finish": [109, 132, 134, 138, 141, 158], "final_senti": 109, "cast": [109, 129], "horribl": 109, "never": [109, 185], "go": [109, 185], "again": [109, 124], "anyon": 109, "protagonist": 109, "music": 109, "setprunecorpu": 109, "frequenc": [109, 115, 117, 118, 128], "viveknsentimentmodel": 109, "sentiment_vivekn": 109, "barttransform": 110, "bart": 110, "translat": [110, 111, 113, 114, 128], "auto": [110, 121], "handl": [110, 155, 173], "captur": 110, "past": [110, 113], "incorpor": 110, "versatil": 110, "valuabl": 110, "settask": [110, 111, 114], "summari": [110, 111, 114], "distilbart_xsum_12_6": 110, "barttestspec": 110, "minoutputlength": [110, 111, 114], "maxoutputlength": [110, 111, 113, 114], "dosampl": [110, 111, 114], "sampl": [110, 111, 114], "greedi": [110, 111, 114], "temperatur": [110, 111, 114], "topk": [110, 111, 114], "highest": [110, 111, 114, 117], "beamsiz": 110, "beam": 110, "topp": [110, 111, 114], "cumul": [110, 111, 114], "kept": [110, 111, 114], "repetitionpenalti": [110, 111, 114], "repetit": [110, 111, 114], "penalti": [110, 111, 114], "norepeatngrams": [110, 111, 114], "occur": [110, 111, 114], "onc": [110, 111, 114], "ignoretokenid": [110, 111, 114], "usecach": 110, "especi": [110, 111, 113, 114], "ab": 110, "1910": 110, "13461": 110, "pytorch": 110, "fairseq": 110, "arbitrari": 110, "nois": 110, "reconstruct": [110, 144], "tranform": 110, "seen": 110, "randomli": 110, "fill": 110, "dialogu": 110, "roug": 110, "bleu": 110, "ablat": 110, "influenc": [110, 115], "setmaxoutputlength": [110, 111, 113, 114], "200": [110, 114], "rich": [110, 114], "rise": [110, 114], "methodologi": [110, 114], "landscap": [110, 114], "unifi": [110, 114], "systemat": [110, 114], "dozen": [110, 114], "insight": [110, 114], "coloss": [110, 114], "facilit": [110, 114], "setignoretokenid": [110, 111, 113, 114], "setminoutputlength": [110, 111, 114], "setdosampl": [110, 111, 114], "settemperatur": [110, 111, 114], "settopk": [110, 111, 114], "settopp": [110, 111, 114], "setrepetitionpenalti": [110, 111, 114], "ctrl": [110, 111, 114], "control": [110, 111, 113, 114, 115], "setnorepeatngrams": [110, 111, 114], "setbeams": 110, "setcach": 110, "use_cach": 110, "gpt2transform": 111, "gpt2": 111, "openai": 111, "caus": [111, 126], "goal": [111, 128], "direct": 111, "10x": 111, "synthet": 111, "unpreced": 111, "prime": 111, "lengthi": 111, "suggest": 111, "benefit": 111, "suffici": 111, "multitask": 111, "learner": 111, "typic": 111, "taskspecif": 111, "webpag": [111, 182], "webtext": 111, "plu": 111, "coqa": 111, "exceed": 111, "127": 111, "fashion": 111, "5b": 111, "underfit": 111, "reflect": 111, "paragraph": [111, 115], "promis": 111, "leonardo": 111, "man": 111, "1776": 111, "came": 111, "kingdom": 111, "mariantransform": 113, "marian": 113, "free": 113, "mainli": 113, "academ": 113, "notabl": 113, "edinburgh": 113, "adam": 113, "mickiewicz": 113, "pozna\u0144": 113, "commerci": 113, "contributor": 113, "mariannmt": 113, "engin": [113, 122], "behind": 113, "deploi": [113, 182], "opus_mt_en_fr": 113, "langid": 113, "maxinputlength": 113, "differenti": 113, "dynam": 113, "toolkit": 113, "setmaxinputlength": 113, "capit": [113, 115], "franc": 113, "quell": 113, "capital": 113, "devrait": 113, "savoir": 113, "fran\u00e7ai": 113, "setlangid": 113, "t5transform": 114, "t5": 114, "reconsid": 114, "hyper": 114, "t5_small": 114, "contextspellcheck": 115, "contextspellcheckerapproach": [115, 117, 118], "noisi": 115, "spell": [115, 116, 117, 118, 139, 144, 188, 189, 190], "candid": [115, 117, 118, 126], "contextspellcheckermodel": [115, 117, 118], "error": 115, "surround": [115, 142], "edit": [115, 117, 118], "subword": 115, "checker": [115, 117, 118, 188], "languagemodelclass": 115, "lm": 115, "wordmaxdist": 115, "maxcandid": 115, "casestrategi": 115, "uppercas": 115, "errorthreshold": 115, "perplex": 115, "nlm": 115, "initialr": 115, "finalr": 115, "validationfract": 115, "datapoint": 115, "min": 115, "vocab": 115, "compoundcount": 115, "compound": 115, "classcount": 115, "special": [115, 128, 159, 186], "tradeoff": 115, "weighteddistpath": 115, "levenshtein": [115, 117, 118], "maxwindowlen": 115, "rememb": 115, "maxsentlen": 115, "norvigsweetingapproach": [115, 117, 118, 191], "symmetricdeleteapproach": [115, 117, 118, 191], "depth": [115, 188], "explan": [115, 188], "awar": 115, "sherlock": 115, "holm": 115, "spellcheck": [115, 117, 118], "setwordmaxdist": 115, "setepoch": 115, "setlanguagemodelclass": 115, "1650": 115, "addvocabclass": 115, "_name_": 115, "extra": [115, 117, 185], "dist": 115, "setmaxcandid": 115, "setcasestrategi": 115, "seterrorthreshold": 115, "setinitialr": 115, "setfinalr": 115, "setvalidationfract": 115, "fraction": 115, "setcompoundcount": 115, "setclasscount": 115, "settradeoff": 115, "alpha": 115, "setweighteddistpath": 115, "setmaxwindowlen": 115, "setmaxsentlen": 115, "sentlen": 115, "userdist": 115, "addregexclass": 115, "spellcheck_dl": 115, "gamma": 115, "decis": 115, "correctsymbol": 115, "comparelowcas": 115, "vocabfreq": 115, "idsvocab": 115, "vocabid": 115, "usenewlin": 115, "newlin": 115, "norvigsweetingmodel": [115, 117, 118], "symmetricdeletemodel": [115, 117, 118], "doc": [115, 175, 191], "cold": 115, "dreari": 115, "countri": 115, "white": 115, "smow": 115, "setweight": 115, "setgamma": 115, "setvocabfreq": 115, "setidsvocab": 115, "setvocabid": 115, "setclass": 115, "getwordclass": 115, "updateregexclass": 115, "updat": 115, "updatevocabclass": 115, "setcorrectsymbol": 115, "setcomparelowcas": 115, "norvigsweet": 117, "norvig": 117, "bayesian": 117, "tokenpattern": 117, "sensit": [117, 120, 126], "doublevari": 117, "shortcircuit": 117, "frequencyprior": 117, "ham": 117, "intersect": 117, "prioriti": [117, 126], "wordsizeignor": 117, "dupslimit": 117, "duplic": 117, "reductlimit": 117, "attempt": 117, "vowelswaplimit": 117, "vowel": 117, "swap": 117, "corrector": 117, "gummi": [117, 118], "gummic": [117, 118], "gummier": [117, 118], "gummiest": [117, 118], "gummifer": [117, 118], "basi": [117, 118], "token_pattern": [117, 118], "setdoublevari": 117, "setshortcircuit": 117, "setfrequencyprior": 117, "symmetr": [117, 118], "delet": [117, 118, 185], "damerau": [117, 118], "magnitud": [117, 118], "transpos": [117, 118], "insert": [117, 118, 185], "spellcheck_norvig": 117, "symspel": [117, 118], "somtim": 117, "wrrite": [117, 118], "wordz": [117, 118], "erong": [117, 118], "sometim": [117, 118, 185], "wrong": [117, 118], "symmetricdelet": 118, "deriv": 118, "teach": 118, "maxeditdist": 118, "frequencythreshold": [118, 128], "deletesthreshold": 118, "patttern": 118, "setmaxeditdist": 118, "setfrequencythreshold": [118, 128], "setdeletesthreshold": 118, "spellcheck_sd": 118, "spmetim": 118, "hard": 119, "employ": 119, "stopwordsclean": [120, 132, 144], "mllib": [120, 182], "stopwordsremov": 120, "cleantoken": [120, 132, 144], "stopwords_en": 120, "jvm": [120, 158], "forth": 120, "setlocal": 120, "tfnerdlgraphbuildermodel": 121, "tfnerdlgraphbuild": 121, "sethiddenunitsnumb": 121, "assertiondlapproach": 121, "medicalnerapproach": 121, "gethiddenunitsnumb": 121, "getinputcol": [121, 132, 133, 147], "srt": 121, "getgraphfold": 121, "setgraphfil": 121, "greaph": 121, "getgraphfil": 121, "chunktoken": 122, "flatten": 122, "artist": 122, "benezar": 122, "robert": 122, "farendel": 122, "graduat": 122, "luca": 122, "chunktokenizermodel": 122, "recursivetoken": 124, "recurs": [124, 141, 154, 158, 162], "suffix": [124, 126, 185], "infix": [124, 126], "middl": [124, 128], "she": 124, "qam": 124, "setprefix": 124, "setsuffix": 124, "setinfix": 124, "recursivetokenizermodel": 124, "regextoken": [125, 128, 186], "whitespac": [125, 128, 130], "tolowercas": [125, 128], "positionalmask": 125, "guarante": 125, "increment": 125, "trimwhitespac": 125, "flag": 125, "eventu": 125, "settolowercas": [125, 128], "nthi": 125, "setpositionalmask": 125, "settrimwhitespac": 125, "tokenizedsent": 126, "rulefactori": [126, 151], "targetpattern": 126, "grab": 126, "prefixpattern": 126, "suffixpattern": 126, "infixpattern": 126, "sub": 126, "won": 126, "exceptionspath": 126, "casesensitiveexcept": 126, "contextchar": 126, "splitpattern": 126, "splitchar": 126, "didn": 126, "jane": 126, "boyfriend": 126, "getinfixpattern": 126, "getsuffixpattern": 126, "getprefixpattern": 126, "getcontextchar": 126, "getsplitchar": 126, "settargetpattern": 126, "setprefixpattern": 126, "setsuffixpattern": 126, "setinfixpattern": 126, "addinfixpattern": 126, "setexcept": 126, "getexcept": 126, "setexceptionspath": 126, "addexcept": 126, "setcasesensitiveexcept": 126, "getcasesensitiveexcept": 126, "addcontextchar": 126, "setsplitpattern": 126, "setsplitchar": 126, "addsplitchar": 126, "piec": 126, "token_rul": 126, "wordsegment": 128, "wordsegmenterapproach": 128, "korean": 128, "japanes": 128, "chines": 128, "correspond": [128, 165], "ll": 128, "rr": 128, "likewis": 128, "side": 128, "themselv": 128, "\u4e0a\u6d77": 128, "\u8ba1\u5212": 128, "\u5230": 128, "\u672c": 128, "\u4e16\u7eaa": 128, "\u672b": 128, "\u5b9e\u73b0": 128, "\u4eba\u5747": 128, "\u56fd\u5185": 128, "\u751f\u4ea7": 128, "\u603b\u503c": 128, "\u4e94\u5343": 128, "\u7f8e\u5143": 128, "\u4e0a": 128, "\u6d77": 128, "\u8ba1": 128, "\u5212": 128, "\u4e16": 128, "\u7eaa": 128, "\u5b9e": 128, "\u73b0": 128, "\u4eba": 128, "\u5747": 128, "\u56fd": 128, "\u5185": 128, "\u751f": 128, "\u4ea7": 128, "\u603b": 128, "ll\u503c": 128, "\u4e94": 128, "\u5343": 128, "\u7f8e": 128, "\u5143": 128, "shanghai": 128, "plan": 128, "dollar": 128, "capita": 128, "gdp": 128, "wordsegmentermodel": 128, "tip": 128, "frame": 128, "least": 128, "frequent": 128, "ambiguitythreshold": 128, "enableregextoken": 128, "xue": 128, "nianwen": 128, "volum": 128, "februari": 128, "aclweb": 128, "aclanthologi": 128, "o03": 128, "4002": 128, "chinese_train": 128, "utf8": 128, "\u5341": 128, "\u56db": 128, "\u4e0d": 128, "\u662f": 128, "setniter": 128, "trainingdataset": 128, "setambiguitythreshold": 128, "getfrequencythreshold": 128, "getambiguitythreshold": 128, "setenableregextoken": 128, "plit": 128, "words_seg": 128, "wordseg_pku": 128, "zh": 128, "\u7136\u800c": 128, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 128, "\u9019\u6a23": 128, "\u7684": 128, "\u8655\u7406": 128, "\u4e5f": 128, "\u884d\u751f": 128, "\u4e86": 128, "\u4e00\u4e9b": 128, "\u554f\u984c": 128, "prepar": [129, 131, 137, 140], "outputcol": [129, 131, 132, 133, 134, 137, 140], "inferschema": 129, "tmp": [129, 137, 158, 181], "librispeech_asr_dummy_clean_audio_array_parquet": 129, "float_arrai": 129, "getoutputcol": [129, 131, 132, 133, 137, 140, 147], "chunkcol": 130, "stringtyp": 130, "setisarrai": 130, "startcol": 130, "startcolbytokenindex": 130, "isarrai": 130, "failonmiss": 130, "fail": 130, "chunkassembl": 130, "setchunkcol": 130, "setstartcol": 130, "setstartcolbytokenindex": 130, "setfailonmiss": 130, "disabl": [131, 140], "idcol": [131, 140], "metadatacol": [131, 140], "cleanupmod": [131, 140], "cleanup": [131, 140], "inplac": [131, 140], "inplace_ful": [131, 140], "shrink_ful": [131, 140], "each_ful": [131, 140], "delete_ful": [131, 140], "setidcol": [131, 140], "setmetadatacol": [131, 140], "usabl": 132, "lda": 132, "forest": 132, "featurecol": 132, "cleanannot": [132, 133, 134], "outputasvector": 132, "gloveembed": 132, "finished_sentence_embed": 132, "resultwiths": 132, "1619900017976761": 132, "045552998781204224": 132, "03229299932718277": 132, "685609996318": 132, "42416998744010925": 132, "1378999948501587": 132, "5717899799346924": 132, "5078899860382": 132, "08621499687433243": 132, "15772999823093414": 132, "06067200005054474": 132, "395359992980": 132, "4970499873161316": 132, "7164199948310852": 132, "40119001269340515": 132, "05761000141501": 132, "08170200139284134": 132, "7159299850463867": 132, "20677000284194946": 132, "0295659992843": 132, "valuesplitsymbol": 133, "annotationsplitsymbol": 133, "includemetadata": 133, "outputasarrai": [133, 134], "parseembeddingsvector": 133, "setvaluesplitsymbol": 133, "setannotationsplitsymbol": 133, "setincludemetadata": [133, 186], "setoutputasarrai": [133, 134], "setparseembeddingsvector": 133, "finishedresult": 134, "hasrecursivefit": [135, 136], "java_obj": [135, 161, 164], "py4j": [135, 136, 164], "java_gatewai": [135, 136, 164], "javaobject": [135, 136, 164], "recursivepipelin": [135, 136, 141, 147], "hasrecursivetransform": 136, "doc2_chunk": [138, 158], "embeddings_finish": [138, 158], "graph_finish": [138, 158], "has_recursive_fit": [138, 158], "has_recursive_transform": [138, 158], "light_pipelin": [138, 158], "recursive_pipelin": [138, 158], "token2_chunk": [138, 158], "token_assembl": [138, 158], "lightpipelin": [139, 168, 189], "parse_embed": [139, 168], "execut": [139, 185, 189], "hold": [139, 189], "principl": [139, 189], "everyth": [139, 189, 190], "fullannot": [139, 168], "happi": [139, 184, 186, 189, 190], "prp": [139, 172, 174, 184, 189, 190, 191], "rb": [139, 174, 184, 189, 190, 191], "optional_target": [139, 168], "explain_document_pipelin": [139, 157, 168, 184, 189, 190], "dict_kei": [139, 168], "fullannotateimag": [139, 168], "path_to_imag": [139, 168], "setignoreunsupport": 139, "unsupport": 139, "annotatormodel": [139, 146, 169], "getignoreunsupport": 139, "text2": 140, "document1": 140, "document2": 140, "arg": [141, 161], "kwarg": 141, "decid": 141, "advantag": 141, "behav": 141, "exactli": 141, "intent": 141, "recursivepipelinemodel": 141, "pipeline_model": [141, 165, 181], "intend": 141, "tab": [142, 165, 181], "escap": 142, "quot": 142, "inputformat": 142, "csvdelimit": 142, "defailt": 142, "comma": 142, "escapecsvdelimit": 142, "table_csv": 142, "csv_data": 142, "input_format": 142, "setcsvdelimit": 142, "setescapecsvdelimit": 142, "token2chunk": 143, "17": [143, 174, 176], "tokenassembl": 144, "cleantext": 144, "opensourc": 144, "annotatorapproach": [145, 154, 165], "py": [145, 146, 154, 160, 164], "subclass": [146, 160, 164], "inherit": [146, 164], "ins": [146, 164], "uid": [146, 164], "annotatorproperti": 147, "setlazyannot": 147, "lazili": 147, "getlazyannot": 147, "annotator_approach": [150, 158], "annotator_model": [150, 158], "annotator_properti": [150, 158], "coverage_result": [150, 158], "match_strategi": [150, 158], "recursive_annotator_approach": [150, 158], "regard": 151, "constant": [151, 153], "hasembeddingsproperti": 152, "getdimens": 152, "recursiveannotatorapproach": 154, "fo": 156, "assist": 157, "map_annot": 157, "f": [157, 165, 181], "output_typ": 157, "udf": 157, "userdefinedfunct": 157, "def": 157, "nnp_token": 157, "lambda": 157, "alia": 157, "epeu": 157, "map_annotations_arrai": 157, "map_annotations_strict": 157, "map_annotations_col": 157, "output_column": 157, "annotatyon_typ": 157, "chunks_df": 157, "pos_chunk": 157, "vbz": [157, 171, 191], "filter_by_annotations_col": 157, "filter_po": 157, "explode_annotations_col": 157, "annotator_java_ml": [158, 162], "annotator_transform": [158, 162], "extended_java_wrapp": [158, 162], "params_getters_sett": [158, 162], "comet": [158, 166, 183], "pretrained_pipelin": [158, 167], "resource_download": [158, 167], "pub_tat": [158, 173], "annotation_audio": 158, "annotation_imag": 158, "apple_silicon": 158, "aarch64": 158, "cache_fold": 158, "log_fold": 158, "cluster_tmp_dir": 158, "real_time_output": 158, "output_level": 158, "correctli": 158, "maco": 158, "linux": 158, "alloc": 158, "directori": [158, 169, 181], "cache_pretrain": 158, "temporarili": 158, "unpack": 158, "hadoop": 158, "dir": 158, "s3": 158, "hdf": 158, "dbf": 158, "annotator_log": 158, "annotatorjavamlread": 159, "mixin": 159, "javamlread": 159, "classmethod": 159, "mlreader": 159, "clazz": 159, "rl": 159, "javaparam": 159, "annotatortransform": 160, "ensur": 160, "_java_obj": 160, "extens": 161, "javawrapp": 161, "extendedjavawrapp": 161, "new_java_arrai": 161, "pylist": 161, "java_class": 161, "todo": 161, "chang": 161, "paramsgetterssett": 163, "getparamvalu": 163, "paramnam": 163, "setparamvalu": 163, "recursiveestim": 164, "overrid": 164, "recursivetransform": 164, "cometlogg": [165, 181], "workspac": 165, "project_nam": [165, 181], "comet_mod": [165, 181], "experiment_id": 165, "experiment_kwarg": 165, "logger": [165, 181], "meta": [165, 183], "practition": [165, 181], "reliabl": [165, 181], "streamlin": [165, 181], "lifecycl": [165, 181, 183], "track": [165, 181, 182], "explain": [165, 181, 188, 190], "reproduc": [165, 181, 182], "outputlogpath": [165, 181], "onlin": [165, 181], "reus": 165, "importerror": 165, "output_log_path": [165, 181], "embd": [165, 181], "setshuffleperepoch": [165, 181], "logdir": [165, 181], "interfac": [165, 181, 189], "chart": [165, 181], "attribut": 165, "comet_ml": [165, 181], "log_pipeline_paramet": [165, 181], "log_visu": [165, 181], "html": [165, 181], "viz": [165, 181], "upload": 165, "colum": [165, 181], "ner_chunk": [165, 181], "sparknlp_displai": [165, 181], "nervisu": [165, 181], "idx": [165, 181], "enumer": [165, 181], "label_col": [165, 181], "document_col": [165, 181], "return_html": [165, 181], "log_metr": [165, 181], "sklearn": [165, 181], "preprocess": [165, 181], "multilabelbinar": [165, 181], "classification_report": [165, 181], "preds_df": [165, 181], "topanda": [165, 181], "mlb": [165, 181], "y_true": [165, 181], "fit_transform": [165, 181], "y_pred": [165, 181], "output_dict": [165, 181], "log_paramet": 165, "log_completed_run": 165, "log_file_path": 165, "complet": [165, 182, 185], "log_asset": 165, "asset_path": 165, "asset": 165, "log_asset_data": 165, "interv": 165, "refresh": 165, "outstand": 165, "disk_loc": 168, "fulli": 168, "light_model": 168, "gather": 168, "langaug": 168, "resourcedownload": [169, 185, 190], "showpublicmodel": [169, 185], "onto_100": 169, "onto_300": 169, "ner_dl_bert": 169, "similarli": 169, "showpublicpipelin": [169, 190], "check_spel": [169, 190], "match_datetim": [169, 190], "downloadmodel": 169, "reader": 169, "j_dwn": 169, "pythonresourcedownload": 169, "downloadmodeldirectli": 169, "downloadpipelin": 169, "clearcach": 169, "clear": 169, "argument": 169, "filer": 169, "showuncategorizedresourc": 169, "yet": 169, "showavailableannot": 169, "documentcol": [171, 172], "sentencecol": [171, 172], "tokencol": 171, "conlllabelindex": 171, "conllposindex": 171, "conlldocidcol": 171, "doc_id": [171, 175], "textcol": [171, 172], "labelcol": 171, "includedocid": 171, "docstart": [171, 191], "eu": [171, 191], "np": [171, 191], "reject": [171, 191], "vp": [171, 191], "misc": [171, 191], "boycott": [171, 191], "british": [171, 191], "lamb": [171, 191], "blackburn": 171, "brussel": 171, "1996": 171, "08": 171, "storage_level": 171, "storagelevel": 171, "disk_onli": 171, "lift": 171, "persist": 171, "uposcol": 172, "upo": 172, "xposcol": 172, "xpo": 172, "lemmacol": 172, "sent_id": 172, "sell": 172, "pron": 172, "nom": 172, "plur": 172, "_": 172, "tens": 172, "conj": 172, "cc": 172, "obj": 172, "spaceaft": 172, "No": [172, 184], "punct": 172, "conllufil": [172, 191], "conlldataset": [172, 191], "morph": 172, "Into": 172, "googleo": 172, "sconj": 172, "propn": 172, "adp": 172, "wp": 172, "vbd": [172, 174, 191], "ago": [174, 191], "receiv": [174, 191], "posdf": 174, "61": 174, "56": 174, "67": [174, 175, 191], "nonexecut": 174, "69": 174, "76": 174, "director": 174, "78": 174, "81": 174, "84": 174, "outputposcol": 174, "outputdocumentcol": 174, "outputtextcol": 174, "pubtat": [175, 188], "medic": [175, 191], "titl": [175, 191], "medment": [175, 191], "25763772": [175, 191], "dctn4": [175, 191], "t116": [175, 191], "t123": [175, 191], "c4308010": [175, 191], "63": [175, 191], "chronic": [175, 191], "pseudomona": [175, 191], "aeruginosa": [175, 191], "infect": [175, 191], "t047": [175, 191], "c0854135": [175, 191], "82": [175, 191], "cystic": [175, 191], "fibrosi": [175, 191], "c0010674": [175, 191], "120": [175, 191], "pa": [175, 191], "124": [175, 191], "139": [175, 191], "pubtatorfil": 175, "corpus_pubtator_sampl": 175, "pubtatordataset": 175, "finished_token": [175, 186], "finished_po": 175, "finished_n": 175, "finished_token_metadata": 175, "finished_pos_metadata": 175, "finished_label_metadata": 175, "mo": 175, "ispaddedtoken": 175, "pad": 175, "spacytoannot": 176, "token_spac": 176, "sentence_end": 176, "spaci": 176, "multi_doc_token": 176, "went": 176, "night": 176, "bought": 176, "bread": 176, "54": 176, "46": 176, "overview": [180, 188], "workflow": 181, "dedic": 181, "account": 181, "inspect": 181, "init": 181, "sparknlp_experi": 181, "offline_directori": 181, "later": 181, "nativ": 182, "record": 182, "queri": 182, "registri": 182, "central": 182, "send": 183, "messag": 183, "mlflow": 183, "content": [184, 190], "clearli": 184, "explain_document_ml": [184, 189, 190], "approx": [184, 189, 190], "mb": [184, 189, 190], "ok": [184, 189, 190], "spearhead": 185, "produc": 185, "declar": 185, "accordingli": 185, "extra_loc": 185, "offer": [185, 187, 190], "classifierdl_use_trec50": 185, "classifierdl_use_spam": 185, "column_nam": 185, "preced": 185, "interchang": 186, "anoth": 186, "road": 186, "proce": 186, "At": 186, "sens": 190, "constantli": 190, "server": 190, "train_po": 191, "training_conl": 191, "train_corpu": 191, "withcolumnrenam": 191, "trainingpubtatordf": 191, "corpus_pubt": 191}, "objects": {"": [[158, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [78, 0, 0, "-", "annotator"], [138, 0, 0, "-", "base"], [150, 0, 0, "-", "common"], [157, 0, 0, "-", "functions"], [162, 0, 0, "-", "internal"], [166, 0, 0, "-", "logging"], [167, 0, 0, "-", "pretrained"], [158, 3, 1, "", "start"], [173, 0, 0, "-", "training"], [178, 0, 0, "-", "upload_to_hub"], [179, 0, 0, "-", "util"], [158, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [8, 0, 0, "-", "chunk2_doc"], [9, 0, 0, "-", "chunker"], [28, 0, 0, "-", "classifier_dl"], [44, 0, 0, "-", "coref"], [47, 0, 0, "-", "cv"], [50, 0, 0, "-", "date2_chunk"], [52, 0, 0, "-", "dependency"], [54, 0, 0, "-", "document_normalizer"], [64, 0, 0, "-", "embeddings"], [76, 0, 0, "-", "er"], [77, 0, 0, "-", "graph_extraction"], [79, 0, 0, "-", "keyword_extraction"], [81, 0, 0, "-", "ld_dl"], [83, 0, 0, "-", "lemmatizer"], [86, 0, 0, "-", "matcher"], [90, 0, 0, "-", "n_gram_generator"], [91, 0, 0, "-", "ner"], [98, 0, 0, "-", "normalizer"], [101, 0, 0, "-", "param"], [102, 0, 0, "-", "pos"], [104, 0, 0, "-", "sentence"], [107, 0, 0, "-", "sentiment"], [112, 0, 0, "-", "seq2seq"], [116, 0, 0, "-", "spell_check"], [119, 0, 0, "-", "stemmer"], [120, 0, 0, "-", "stop_words_cleaner"], [121, 0, 0, "-", "tf_ner_dl_graph_builder"], [123, 0, 0, "-", "token"], [127, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.chunk2_doc": [[8, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[9, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[9, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[10, 0, 0, "-", "albert_for_question_answering"], [11, 0, 0, "-", "albert_for_sequence_classification"], [12, 0, 0, "-", "albert_for_token_classification"], [13, 0, 0, "-", "bert_for_question_answering"], [14, 0, 0, "-", "bert_for_sequence_classification"], [15, 0, 0, "-", "bert_for_token_classification"], [16, 0, 0, "-", "bert_for_zero_shot_classification"], [17, 0, 0, "-", "camembert_for_question_answering"], [18, 0, 0, "-", "camembert_for_sequence_classification"], [19, 0, 0, "-", "camembert_for_token_classification"], [20, 0, 0, "-", "classifier_dl"], [21, 0, 0, "-", "deberta_for_question_answering"], [22, 0, 0, "-", "deberta_for_sequence_classification"], [23, 0, 0, "-", "deberta_for_token_classification"], [24, 0, 0, "-", "distil_bert_for_question_answering"], [25, 0, 0, "-", "distil_bert_for_sequence_classification"], [26, 0, 0, "-", "distil_bert_for_token_classification"], [27, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [29, 0, 0, "-", "longformer_for_question_answering"], [30, 0, 0, "-", "longformer_for_sequence_classification"], [31, 0, 0, "-", "longformer_for_token_classification"], [32, 0, 0, "-", "multi_classifier_dl"], [33, 0, 0, "-", "roberta_bert_for_zero_shot_classification"], [34, 0, 0, "-", "roberta_for_question_answering"], [35, 0, 0, "-", "roberta_for_sequence_classification"], [36, 0, 0, "-", "roberta_for_token_classification"], [37, 0, 0, "-", "sentiment_dl"], [38, 0, 0, "-", "tapas_for_question_answering"], [39, 0, 0, "-", "xlm_roberta_for_question_answering"], [40, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [41, 0, 0, "-", "xlm_roberta_for_token_classification"], [42, 0, 0, "-", "xlnet_for_sequence_classification"], [43, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[10, 2, 1, "", "loadSavedModel"], [10, 2, 1, "", "pretrained"], [10, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[11, 2, 1, "", "getClasses"], [11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setCoalesceSentences"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, 1, 1, "", "ClassifierDLApproach"], [20, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[20, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setCoalesceSentences"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, 1, 1, "", "MultiClassifierDLApproach"], [32, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[32, 2, 1, "", "setThreshold"], [32, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"], [33, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[35, 2, 1, "", "getClasses"], [35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setCoalesceSentences"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setConfigProtoBytes"], [36, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, 1, 1, "", "SentimentDLApproach"], [37, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[37, 2, 1, "", "setDropout"], [37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setCoalesceSentences"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[41, 2, 1, "", "getClasses"], [41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[42, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[43, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[45, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[45, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setConfigProtoBytes"], [45, 2, 1, "", "setMaxSegmentLength"], [45, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[46, 0, 0, "-", "convnext_for_image_classification"], [48, 0, 0, "-", "swin_for_image_classification"], [49, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[46, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setCropPct"], [46, 2, 1, "", "setDoRescale"], [46, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[48, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[48, 2, 1, "", "getClasses"], [48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setDoRescale"], [48, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.vit_for_image_classification": [[49, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[50, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[50, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[51, 0, 0, "-", "dependency_parser"], [53, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[51, 1, 1, "", "DependencyParserApproach"], [51, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[51, 2, 1, "", "setConllU"], [51, 2, 1, "", "setDependencyTreeBank"], [51, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[51, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[53, 1, 1, "", "TypedDependencyParserApproach"], [53, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[53, 2, 1, "", "setConll2009"], [53, 2, 1, "", "setConllU"], [53, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[53, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[54, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[54, 2, 1, "", "setAction"], [54, 2, 1, "", "setEncoding"], [54, 2, 1, "", "setLowercase"], [54, 2, 1, "", "setPatterns"], [54, 2, 1, "", "setPolicy"], [54, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[55, 0, 0, "-", "albert_embeddings"], [56, 0, 0, "-", "bert_embeddings"], [57, 0, 0, "-", "bert_sentence_embeddings"], [58, 0, 0, "-", "camembert_embeddings"], [59, 0, 0, "-", "chunk_embeddings"], [60, 0, 0, "-", "deberta_embeddings"], [61, 0, 0, "-", "distil_bert_embeddings"], [62, 0, 0, "-", "doc2vec"], [63, 0, 0, "-", "elmo_embeddings"], [65, 0, 0, "-", "longformer_embeddings"], [66, 0, 0, "-", "roberta_embeddings"], [67, 0, 0, "-", "roberta_sentence_embeddings"], [68, 0, 0, "-", "sentence_embeddings"], [69, 0, 0, "-", "universal_sentence_encoder"], [70, 0, 0, "-", "word2vec"], [71, 0, 0, "-", "word_embeddings"], [72, 0, 0, "-", "xlm_roberta_embeddings"], [73, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [74, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[55, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[56, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[57, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[58, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[59, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[59, 2, 1, "", "setPoolingStrategy"], [59, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[60, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[61, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[62, 1, 1, "", "Doc2VecApproach"], [62, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[62, 2, 1, "", "setMaxIter"], [62, 2, 1, "", "setMaxSentenceLength"], [62, 2, 1, "", "setMinCount"], [62, 2, 1, "", "setNumPartitions"], [62, 2, 1, "", "setSeed"], [62, 2, 1, "", "setStepSize"], [62, 2, 1, "", "setVectorSize"], [62, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[63, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setBatchSize"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[65, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[66, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[67, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[68, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[68, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[69, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"], [69, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[70, 1, 1, "", "Word2VecApproach"], [70, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[70, 2, 1, "", "setMaxIter"], [70, 2, 1, "", "setMaxSentenceLength"], [70, 2, 1, "", "setMinCount"], [70, 2, 1, "", "setNumPartitions"], [70, 2, 1, "", "setSeed"], [70, 2, 1, "", "setStepSize"], [70, 2, 1, "", "setVectorSize"], [70, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[71, 1, 1, "", "WordEmbeddings"], [71, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[71, 2, 1, "", "setReadCacheSize"], [71, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[71, 2, 1, "", "loadStorage"], [71, 2, 1, "", "overallCoverage"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setReadCacheSize"], [71, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[72, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[73, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[74, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[75, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[75, 1, 1, "", "EntityRulerApproach"], [75, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[75, 2, 1, "", "setAlphabetResource"], [75, 2, 1, "", "setPatternsResource"], [75, 2, 1, "", "setSentenceMatch"], [75, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[77, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[77, 2, 1, "", "setDelimiter"], [77, 2, 1, "", "setDependencyParserModel"], [77, 2, 1, "", "setEntityTypes"], [77, 2, 1, "", "setExplodeEntities"], [77, 2, 1, "", "setIncludeEdges"], [77, 2, 1, "", "setMaxSentenceSize"], [77, 2, 1, "", "setMergeEntities"], [77, 2, 1, "", "setMergeEntitiesIOBFormat"], [77, 2, 1, "", "setMinSentenceSize"], [77, 2, 1, "", "setPosModel"], [77, 2, 1, "", "setRelationshipTypes"], [77, 2, 1, "", "setRootTokens"], [77, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[80, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[80, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[80, 2, 1, "", "getStopWords"], [80, 2, 1, "", "loadDefaultStopWords"], [80, 2, 1, "", "setMaxNGrams"], [80, 2, 1, "", "setMinNGrams"], [80, 2, 1, "", "setNKeywords"], [80, 2, 1, "", "setStopWords"], [80, 2, 1, "", "setThreshold"], [80, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[82, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[82, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setCoalesceSentences"], [82, 2, 1, "", "setConfigProtoBytes"], [82, 2, 1, "", "setThreshold"], [82, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[83, 1, 1, "", "Lemmatizer"], [83, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[83, 2, 1, "", "setDictionary"], [83, 2, 1, "", "setFormCol"], [83, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[83, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[84, 0, 0, "-", "big_text_matcher"], [85, 0, 0, "-", "date_matcher"], [87, 0, 0, "-", "multi_date_matcher"], [88, 0, 0, "-", "regex_matcher"], [89, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[84, 1, 1, "", "BigTextMatcher"], [84, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[84, 2, 1, "", "setCaseSensitive"], [84, 2, 1, "", "setEntities"], [84, 2, 1, "", "setMergeOverlapping"], [84, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[84, 2, 1, "", "loadStorage"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setCaseSensitive"], [84, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[85, 1, 1, "", "DateMatcher"], [85, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[85, 2, 1, "", "setAnchorDateDay"], [85, 2, 1, "", "setAnchorDateMonth"], [85, 2, 1, "", "setAnchorDateYear"], [85, 2, 1, "", "setDefaultDayWhenMissing"], [85, 2, 1, "", "setInputFormats"], [85, 2, 1, "", "setOutputFormat"], [85, 2, 1, "", "setReadMonthFirst"], [85, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[87, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[88, 1, 1, "", "RegexMatcher"], [88, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[88, 2, 1, "", "setDelimiter"], [88, 2, 1, "", "setExternalRules"], [88, 2, 1, "", "setRules"], [88, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[89, 1, 1, "", "TextMatcher"], [89, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[89, 2, 1, "", "setBuildFromTokens"], [89, 2, 1, "", "setCaseSensitive"], [89, 2, 1, "", "setEntities"], [89, 2, 1, "", "setEntityValue"], [89, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setBuildFromTokens"], [89, 2, 1, "", "setEntityValue"], [89, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[90, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[90, 2, 1, "", "setDelimiter"], [90, 2, 1, "", "setEnableCumulative"], [90, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[92, 0, 0, "-", "ner_approach"], [93, 0, 0, "-", "ner_converter"], [94, 0, 0, "-", "ner_crf"], [95, 0, 0, "-", "ner_dl"], [96, 0, 0, "-", "ner_overwriter"], [97, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[92, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[92, 2, 1, "", "getLabelColumn"], [92, 2, 1, "", "setEntities"], [92, 2, 1, "", "setLabelColumn"], [92, 2, 1, "", "setMaxEpochs"], [92, 2, 1, "", "setMinEpochs"], [92, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[93, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[93, 2, 1, "", "setNerHasNoSchema"], [93, 2, 1, "", "setPreservePosition"], [93, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[94, 1, 1, "", "NerCrfApproach"], [94, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[94, 2, 1, "", "setC0"], [94, 2, 1, "", "setExternalFeatures"], [94, 2, 1, "", "setIncludeConfidence"], [94, 2, 1, "", "setL2"], [94, 2, 1, "", "setLossEps"], [94, 2, 1, "", "setMinW"], [94, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[95, 1, 1, "", "NerDLApproach"], [95, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[95, 2, 1, "", "setBatchSize"], [95, 2, 1, "", "setBestModelMetric"], [95, 2, 1, "", "setConfigProtoBytes"], [95, 2, 1, "", "setDropout"], [95, 2, 1, "", "setEnableMemoryOptimizer"], [95, 2, 1, "", "setGraphFolder"], [95, 2, 1, "", "setIncludeAllConfidenceScores"], [95, 2, 1, "", "setIncludeConfidence"], [95, 2, 1, "", "setLr"], [95, 2, 1, "", "setPo"], [95, 2, 1, "", "setUseBestModel"], [95, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setConfigProtoBytes"], [95, 2, 1, "", "setIncludeAllConfidenceScores"], [95, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[96, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[96, 2, 1, "", "setNerWords"], [96, 2, 1, "", "setNewNerEntity"], [96, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[97, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[97, 2, 1, "", "getClasses"], [97, 2, 1, "", "load"], [97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setEntityDefinitions"], [97, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[98, 1, 1, "", "Normalizer"], [98, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[98, 2, 1, "", "setCleanupPatterns"], [98, 2, 1, "", "setLowercase"], [98, 2, 1, "", "setMaxLength"], [98, 2, 1, "", "setMinLength"], [98, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.param": [[99, 0, 0, "-", "classifier_encoder"], [100, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[99, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[99, 2, 1, "", "setBatchSize"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setLabelColumn"], [99, 2, 1, "", "setLr"], [99, 2, 1, "", "setMaxEpochs"], [99, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[100, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[100, 2, 1, "", "setEnableOutputLogs"], [100, 2, 1, "", "setEvaluationLogExtended"], [100, 2, 1, "", "setOutputLogsPath"], [100, 2, 1, "", "setTestDataset"], [100, 2, 1, "", "setValidationSplit"], [100, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[103, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[103, 1, 1, "", "PerceptronApproach"], [103, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[103, 2, 1, "", "getNIterations"], [103, 2, 1, "", "setIterations"], [103, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[103, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[105, 0, 0, "-", "sentence_detector"], [106, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[105, 1, 1, "", "SentenceDetector"], [105, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[105, 2, 1, "", "setCustomBounds"], [105, 2, 1, "", "setCustomBoundsStrategy"], [105, 2, 1, "", "setDetectLists"], [105, 2, 1, "", "setExplodeSentences"], [105, 2, 1, "", "setMaxLength"], [105, 2, 1, "", "setMinLength"], [105, 2, 1, "", "setSplitLength"], [105, 2, 1, "", "setUseAbbreviations"], [105, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[106, 1, 1, "", "SentenceDetectorDLApproach"], [106, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[106, 2, 1, "", "setEpochsNumber"], [106, 2, 1, "", "setExplodeSentences"], [106, 2, 1, "", "setImpossiblePenultimates"], [106, 2, 1, "", "setModel"], [106, 2, 1, "", "setOutputLogsPath"], [106, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setCustomBounds"], [106, 2, 1, "", "setExplodeSentences"], [106, 2, 1, "", "setImpossiblePenultimates"], [106, 2, 1, "", "setMaxLength"], [106, 2, 1, "", "setMinLength"], [106, 2, 1, "", "setModel"], [106, 2, 1, "", "setSplitLength"], [106, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[108, 0, 0, "-", "sentiment_detector"], [109, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[108, 1, 1, "", "SentimentDetector"], [108, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[108, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[109, 1, 1, "", "ViveknSentimentApproach"], [109, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[109, 2, 1, "", "setPruneCorpus"], [109, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[109, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[110, 0, 0, "-", "bart_transformer"], [111, 0, 0, "-", "gpt2_transformer"], [113, 0, 0, "-", "marian_transformer"], [114, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[110, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[110, 2, 1, "", "loadSavedModel"], [110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setBeamSize"], [110, 2, 1, "", "setCache"], [110, 2, 1, "", "setConfigProtoBytes"], [110, 2, 1, "", "setDoSample"], [110, 2, 1, "", "setIgnoreTokenIds"], [110, 2, 1, "", "setMaxOutputLength"], [110, 2, 1, "", "setMinOutputLength"], [110, 2, 1, "", "setNoRepeatNgramSize"], [110, 2, 1, "", "setRepetitionPenalty"], [110, 2, 1, "", "setTask"], [110, 2, 1, "", "setTemperature"], [110, 2, 1, "", "setTopK"], [110, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[111, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[111, 2, 1, "", "loadSavedModel"], [111, 2, 1, "", "pretrained"], [111, 2, 1, "", "setConfigProtoBytes"], [111, 2, 1, "", "setDoSample"], [111, 2, 1, "", "setIgnoreTokenIds"], [111, 2, 1, "", "setMaxOutputLength"], [111, 2, 1, "", "setMinOutputLength"], [111, 2, 1, "", "setNoRepeatNgramSize"], [111, 2, 1, "", "setRepetitionPenalty"], [111, 2, 1, "", "setTask"], [111, 2, 1, "", "setTemperature"], [111, 2, 1, "", "setTopK"], [111, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[113, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[113, 2, 1, "", "loadSavedModel"], [113, 2, 1, "", "pretrained"], [113, 2, 1, "", "setConfigProtoBytes"], [113, 2, 1, "", "setIgnoreTokenIds"], [113, 2, 1, "", "setLangId"], [113, 2, 1, "", "setMaxInputLength"], [113, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[114, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[114, 2, 1, "", "loadSavedModel"], [114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setConfigProtoBytes"], [114, 2, 1, "", "setDoSample"], [114, 2, 1, "", "setIgnoreTokenIds"], [114, 2, 1, "", "setMaxOutputLength"], [114, 2, 1, "", "setMinOutputLength"], [114, 2, 1, "", "setNoRepeatNgramSize"], [114, 2, 1, "", "setRepetitionPenalty"], [114, 2, 1, "", "setTask"], [114, 2, 1, "", "setTemperature"], [114, 2, 1, "", "setTopK"], [114, 2, 1, "", "setTopP"]], "sparknlp.annotator.spell_check": [[115, 0, 0, "-", "context_spell_checker"], [117, 0, 0, "-", "norvig_sweeting"], [118, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[115, 1, 1, "", "ContextSpellCheckerApproach"], [115, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[115, 2, 1, "", "addRegexClass"], [115, 2, 1, "", "addVocabClass"], [115, 2, 1, "", "setBatchSize"], [115, 2, 1, "", "setCaseStrategy"], [115, 2, 1, "", "setClassCount"], [115, 2, 1, "", "setCompoundCount"], [115, 2, 1, "", "setConfigProtoBytes"], [115, 2, 1, "", "setEpochs"], [115, 2, 1, "", "setErrorThreshold"], [115, 2, 1, "", "setFinalRate"], [115, 2, 1, "", "setGraphFolder"], [115, 2, 1, "", "setInitialRate"], [115, 2, 1, "", "setLanguageModelClasses"], [115, 2, 1, "", "setMaxCandidates"], [115, 2, 1, "", "setMaxSentLen"], [115, 2, 1, "", "setMaxWindowLen"], [115, 2, 1, "", "setMinCount"], [115, 2, 1, "", "setTradeoff"], [115, 2, 1, "", "setValidationFraction"], [115, 2, 1, "", "setWeightedDistPath"], [115, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[115, 2, 1, "", "getWordClasses"], [115, 2, 1, "", "pretrained"], [115, 2, 1, "", "setCaseStrategy"], [115, 2, 1, "", "setClasses"], [115, 2, 1, "", "setCompareLowcase"], [115, 2, 1, "", "setConfigProtoBytes"], [115, 2, 1, "", "setCorrectSymbols"], [115, 2, 1, "", "setErrorThreshold"], [115, 2, 1, "", "setGamma"], [115, 2, 1, "", "setIdsVocab"], [115, 2, 1, "", "setMaxCandidates"], [115, 2, 1, "", "setMaxWindowLen"], [115, 2, 1, "", "setTradeoff"], [115, 2, 1, "", "setVocabFreq"], [115, 2, 1, "", "setVocabIds"], [115, 2, 1, "", "setWeights"], [115, 2, 1, "", "setWordMaxDistance"], [115, 2, 1, "", "updateRegexClass"], [115, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[117, 1, 1, "", "NorvigSweetingApproach"], [117, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[117, 2, 1, "", "setCaseSensitive"], [117, 2, 1, "", "setDictionary"], [117, 2, 1, "", "setDoubleVariants"], [117, 2, 1, "", "setFrequencyPriority"], [117, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[117, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[118, 1, 1, "", "SymmetricDeleteApproach"], [118, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[118, 2, 1, "", "setDeletesThreshold"], [118, 2, 1, "", "setDictionary"], [118, 2, 1, "", "setFrequencyThreshold"], [118, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[118, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[119, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[120, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[120, 2, 1, "", "loadDefaultStopWords"], [120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setCaseSensitive"], [120, 2, 1, "", "setLocale"], [120, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[121, 1, 1, "", "TFNerDLGraphBuilder"], [121, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[121, 2, 1, "", "getGraphFile"], [121, 2, 1, "", "getGraphFolder"], [121, 2, 1, "", "getHiddenUnitsNumber"], [121, 2, 1, "", "getInputCols"], [121, 2, 1, "", "getLabelColumn"], [121, 2, 1, "", "setGraphFile"], [121, 2, 1, "", "setGraphFolder"], [121, 2, 1, "", "setHiddenUnitsNumber"], [121, 2, 1, "", "setInputCols"], [121, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[122, 0, 0, "-", "chunk_tokenizer"], [124, 0, 0, "-", "recursive_tokenizer"], [125, 0, 0, "-", "regex_tokenizer"], [126, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[122, 1, 1, "", "ChunkTokenizer"], [122, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[124, 1, 1, "", "RecursiveTokenizer"], [124, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[124, 2, 1, "", "setInfixes"], [124, 2, 1, "", "setPrefixes"], [124, 2, 1, "", "setSuffixes"], [124, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[125, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[125, 2, 1, "", "setMaxLength"], [125, 2, 1, "", "setMinLength"], [125, 2, 1, "", "setPattern"], [125, 2, 1, "", "setPositionalMask"], [125, 2, 1, "", "setPreservePosition"], [125, 2, 1, "", "setToLowercase"], [125, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[126, 1, 1, "", "Tokenizer"], [126, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[126, 2, 1, "", "addContextChars"], [126, 2, 1, "", "addException"], [126, 2, 1, "", "addInfixPattern"], [126, 2, 1, "", "addSplitChars"], [126, 2, 1, "", "getCaseSensitiveExceptions"], [126, 2, 1, "", "getContextChars"], [126, 2, 1, "", "getExceptions"], [126, 2, 1, "", "getInfixPatterns"], [126, 2, 1, "", "getPrefixPattern"], [126, 2, 1, "", "getSplitChars"], [126, 2, 1, "", "getSuffixPattern"], [126, 2, 1, "", "setCaseSensitiveExceptions"], [126, 2, 1, "", "setContextChars"], [126, 2, 1, "", "setExceptions"], [126, 2, 1, "", "setExceptionsPath"], [126, 2, 1, "", "setInfixPatterns"], [126, 2, 1, "", "setMaxLength"], [126, 2, 1, "", "setMinLength"], [126, 2, 1, "", "setPrefixPattern"], [126, 2, 1, "", "setSplitChars"], [126, 2, 1, "", "setSplitPattern"], [126, 2, 1, "", "setSuffixPattern"], [126, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[126, 2, 1, "", "addSplitChars"], [126, 2, 1, "", "pretrained"], [126, 2, 1, "", "setSplitChars"], [126, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.ws": [[128, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[128, 1, 1, "", "WordSegmenterApproach"], [128, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[128, 2, 1, "", "getAmbiguityThreshold"], [128, 2, 1, "", "getFrequencyThreshold"], [128, 2, 1, "", "getNIterations"], [128, 2, 1, "", "setAmbiguityThreshold"], [128, 2, 1, "", "setEnableRegexTokenizer"], [128, 2, 1, "", "setFrequencyThreshold"], [128, 2, 1, "", "setNIterations"], [128, 2, 1, "", "setPattern"], [128, 2, 1, "", "setPosColumn"], [128, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[128, 2, 1, "", "pretrained"], [128, 2, 1, "", "setEnableRegexTokenizer"], [128, 2, 1, "", "setPattern"], [128, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[129, 0, 0, "-", "audio_assembler"], [130, 0, 0, "-", "doc2_chunk"], [131, 0, 0, "-", "document_assembler"], [132, 0, 0, "-", "embeddings_finisher"], [133, 0, 0, "-", "finisher"], [134, 0, 0, "-", "graph_finisher"], [135, 0, 0, "-", "has_recursive_fit"], [136, 0, 0, "-", "has_recursive_transform"], [137, 0, 0, "-", "image_assembler"], [139, 0, 0, "-", "light_pipeline"], [140, 0, 0, "-", "multi_document_assembler"], [141, 0, 0, "-", "recursive_pipeline"], [142, 0, 0, "-", "table_assembler"], [143, 0, 0, "-", "token2_chunk"], [144, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[129, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[129, 2, 1, "", "getOutputCol"], [129, 2, 1, "", "setInputCol"], [129, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[130, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[130, 2, 1, "", "setChunkCol"], [130, 2, 1, "", "setFailOnMissing"], [130, 2, 1, "", "setIsArray"], [130, 2, 1, "", "setLowerCase"], [130, 2, 1, "", "setStartCol"], [130, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[131, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[131, 2, 1, "", "getOutputCol"], [131, 2, 1, "", "setCleanupMode"], [131, 2, 1, "", "setIdCol"], [131, 2, 1, "", "setInputCol"], [131, 2, 1, "", "setMetadataCol"], [131, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[132, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[132, 2, 1, "", "getInputCols"], [132, 2, 1, "", "getOutputCols"], [132, 2, 1, "", "setCleanAnnotations"], [132, 2, 1, "", "setInputCols"], [132, 2, 1, "", "setOutputAsVector"], [132, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[133, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[133, 2, 1, "", "getInputCols"], [133, 2, 1, "", "getOutputCols"], [133, 2, 1, "", "setAnnotationSplitSymbol"], [133, 2, 1, "", "setCleanAnnotations"], [133, 2, 1, "", "setIncludeMetadata"], [133, 2, 1, "", "setInputCols"], [133, 2, 1, "", "setOutputAsArray"], [133, 2, 1, "", "setOutputCols"], [133, 2, 1, "", "setParseEmbeddingsVectors"], [133, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[134, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[134, 2, 1, "", "setCleanAnnotations"], [134, 2, 1, "", "setInputCol"], [134, 2, 1, "", "setOutputAsArray"], [134, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[135, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[136, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[137, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[137, 2, 1, "", "getOutputCol"], [137, 2, 1, "", "setInputCol"], [137, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[139, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[139, 2, 1, "", "annotate"], [139, 2, 1, "", "fullAnnotate"], [139, 2, 1, "", "fullAnnotateImage"], [139, 2, 1, "", "getIgnoreUnsupported"], [139, 2, 1, "", "setIgnoreUnsupported"], [139, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[140, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[140, 2, 1, "", "getOutputCols"], [140, 2, 1, "", "setCleanupMode"], [140, 2, 1, "", "setIdCol"], [140, 2, 1, "", "setInputCols"], [140, 2, 1, "", "setMetadataCol"], [140, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[141, 1, 1, "", "RecursivePipeline"], [141, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[142, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[142, 2, 1, "", "setCsvDelimiter"], [142, 2, 1, "", "setEscapeCsvDelimiter"], [142, 2, 1, "", "setInputFormat"]], "sparknlp.base.token2_chunk": [[143, 1, 1, "", "Token2Chunk"]], "sparknlp.base.token_assembler": [[144, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[144, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[145, 0, 0, "-", "annotator_approach"], [146, 0, 0, "-", "annotator_model"], [147, 0, 0, "-", "annotator_properties"], [148, 0, 0, "-", "annotator_type"], [149, 0, 0, "-", "coverage_result"], [151, 0, 0, "-", "match_strategy"], [152, 0, 0, "-", "properties"], [153, 0, 0, "-", "read_as"], [154, 0, 0, "-", "recursive_annotator_approach"], [155, 0, 0, "-", "storage"], [156, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[145, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[146, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[147, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[147, 2, 1, "", "getInputCols"], [147, 2, 1, "", "getLazyAnnotator"], [147, 2, 1, "", "getOutputCol"], [147, 2, 1, "", "setInputCols"], [147, 2, 1, "", "setLazyAnnotator"], [147, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[151, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[152, 1, 1, "", "HasEmbeddingsProperties"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[152, 2, 1, "", "getDimension"], [152, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[153, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[154, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[156, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[157, 3, 1, "", "explode_annotations_col"], [157, 3, 1, "", "filter_by_annotations_col"], [157, 3, 1, "", "map_annotations"], [157, 3, 1, "", "map_annotations_array"], [157, 3, 1, "", "map_annotations_col"], [157, 3, 1, "", "map_annotations_cols"], [157, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[159, 0, 0, "-", "annotator_java_ml"], [160, 0, 0, "-", "annotator_transformer"], [161, 0, 0, "-", "extended_java_wrapper"], [163, 0, 0, "-", "params_getters_setters"], [164, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[159, 1, 1, "", "AnnotatorJavaMLReadable"], [159, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[159, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[160, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[161, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[161, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[163, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[163, 2, 1, "", "getParamValue"], [163, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[164, 1, 1, "", "RecursiveEstimator"], [164, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[164, 2, 1, "", "fit"]], "sparknlp.logging": [[165, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[165, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[165, 2, 1, "", "end"], [165, 2, 1, "", "log_asset"], [165, 2, 1, "", "log_asset_data"], [165, 2, 1, "", "log_completed_run"], [165, 2, 1, "", "log_metrics"], [165, 2, 1, "", "log_parameters"], [165, 2, 1, "", "log_pipeline_parameters"], [165, 2, 1, "", "log_visualization"], [165, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[168, 0, 0, "-", "pretrained_pipeline"], [169, 0, 0, "-", "resource_downloader"], [170, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[168, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[168, 2, 1, "", "annotate"], [168, 2, 1, "", "fullAnnotate"], [168, 2, 1, "", "fullAnnotateImage"], [168, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[169, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[169, 2, 1, "", "clearCache"], [169, 2, 1, "", "downloadModel"], [169, 2, 1, "", "downloadModelDirectly"], [169, 2, 1, "", "downloadPipeline"], [169, 2, 1, "", "showAvailableAnnotators"], [169, 2, 1, "", "showPublicModels"], [169, 2, 1, "", "showPublicPipelines"], [169, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[171, 0, 0, "-", "conll"], [172, 0, 0, "-", "conllu"], [174, 0, 0, "-", "pos"], [175, 0, 0, "-", "pub_tator"], [176, 0, 0, "-", "spacy_to_annotation"], [177, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[171, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[171, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[172, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[172, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[174, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[174, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[175, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[175, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[176, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 186], "start": 0, "spark": [0, 1, 181, 186, 190], "nlp": [0, 1, 181, 190], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 181], "us": [0, 181, 190], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 171, 172, 174, 175, 176], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 184, 185, 186], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 159, 160, 161, 163, 164, 165, 168, 169, 171, 172, 174, 175, 176, 180], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 159, 160, 161, 163, 164, 165, 168, 169, 171, 172, 174, 175, 176], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7], "hubert_for_ctc": 5, "submodul": [6, 28, 44, 47, 52, 64, 76, 78, 79, 81, 86, 91, 102, 104, 107, 112, 116, 123, 127, 138, 150, 158, 162, 166, 167, 173], "wav2vec2_for_ctc": 7, "chunk2_doc": 8, "chunker": 9, "classifier_dl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "albert_for_question_answ": 10, "albert_for_sequence_classif": 11, "albert_for_token_classif": 12, "bert_for_question_answ": 13, "bert_for_sequence_classif": 14, "bert_for_token_classif": 15, "bert_for_zero_shot_classif": 16, "camembert_for_question_answ": 17, "camembert_for_sequence_classif": 18, "camembert_for_token_classif": 19, "deberta_for_question_answ": 21, "deberta_for_sequence_classif": 22, "deberta_for_token_classif": 23, "distil_bert_for_question_answ": 24, "distil_bert_for_sequence_classif": 25, "distil_bert_for_token_classif": 26, "distil_bert_for_zero_shot_classif": 27, "longformer_for_question_answ": 29, "longformer_for_sequence_classif": 30, "longformer_for_token_classif": 31, "multi_classifier_dl": 32, "roberta_bert_for_zero_shot_classif": 33, "roberta_for_question_answ": 34, "roberta_for_sequence_classif": 35, "roberta_for_token_classif": 36, "sentiment_dl": 37, "tapas_for_question_answ": 38, "xlm_roberta_for_question_answ": 39, "xlm_roberta_for_sequence_classif": 40, "xlm_roberta_for_token_classif": 41, "xlnet_for_sequence_classif": 42, "xlnet_for_token_classif": 43, "coref": [44, 45], "spanbert_coref": 45, "cv": [46, 47, 48, 49], "convnext_for_image_classif": 46, "swin_for_image_classif": 48, "vit_for_image_classif": 49, "date2_chunk": 50, "depend": [51, 52, 53], "dependency_pars": 51, "typed_dependency_pars": 53, "document_norm": 54, "embed": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "albert_embed": 55, "bert_embed": 56, "bert_sentence_embed": 57, "camembert_embed": 58, "chunk_embed": 59, "deberta_embed": 60, "distil_bert_embed": 61, "doc2vec": 62, "elmo_embed": 63, "longformer_embed": 65, "roberta_embed": 66, "roberta_sentence_embed": 67, "sentence_embed": 68, "universal_sentence_encod": 69, "word2vec": 70, "word_embed": 71, "xlm_roberta_embed": 72, "xlm_roberta_sentence_embed": 73, "xlnet_embed": 74, "er": [75, 76], "entity_rul": 75, "graph_extract": 77, "subpackag": [78, 158], "keyword_extract": [79, 80], "yake_keyword_extract": 80, "ld_dl": [81, 82], "language_detector_dl": 82, "lemmat": 83, "matcher": [84, 85, 86, 87, 88, 89], "big_text_match": 84, "date_match": 85, "multi_date_match": 87, "regex_match": 88, "text_match": 89, "n_gram_gener": 90, "ner": [91, 92, 93, 94, 95, 96, 97], "ner_approach": 92, "ner_convert": 93, "ner_crf": 94, "ner_dl": 95, "ner_overwrit": 96, "zero_shot_ner_model": 97, "normal": 98, "param": [99, 100, 101], "classifier_encod": 99, "evaluation_dl_param": 100, "po": [102, 103, 174, 191], "perceptron": 103, "sentenc": [104, 105, 106, 186], "sentence_detector": 105, "sentence_detector_dl": 106, "sentiment": [107, 108, 109], "sentiment_detector": 108, "vivekn_senti": 109, "seq2seq": [110, 111, 112, 113, 114], "bart_transform": 110, "gpt2_transform": 111, "marian_transform": 113, "t5_transform": 114, "spell_check": [115, 116, 117, 118], "context_spell_check": 115, "norvig_sweet": 117, "symmetric_delet": 118, "stemmer": 119, "stop_words_clean": 120, "tf_ner_dl_graph_build": 121, "token": [122, 123, 124, 125, 126, 186], "chunk_token": 122, "recursive_token": 124, "regex_token": 125, "w": [127, 128], "word_segment": 128, "base": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "audio_assembl": 129, "doc2_chunk": 130, "document_assembl": 131, "embeddings_finish": 132, "finish": [133, 186], "graph_finish": 134, "has_recursive_fit": 135, "has_recursive_transform": 136, "image_assembl": 137, "light_pipelin": 139, "multi_document_assembl": 140, "recursive_pipelin": 141, "table_assembl": 142, "token2_chunk": 143, "token_assembl": 144, "common": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 185], "annotator_approach": 145, "annotator_model": 146, "annotator_properti": 147, "annotator_typ": 148, "coverage_result": 149, "match_strategi": 151, "properti": 152, "read_a": 153, "recursive_annotator_approach": 154, "storag": 155, "util": [156, 170, 179], "function": [156, 157, 158, 185, 187], "packag": 158, "intern": [159, 160, 161, 162, 163, 164], "annotator_java_ml": 159, "annotator_transform": 160, "extended_java_wrapp": 161, "params_getters_sett": 163, "recurs": 164, "log": [165, 166, 181, 183], "comet": [165, 181], "pretrain": [167, 168, 169, 170, 185, 189, 190], "pretrained_pipelin": 168, "resource_download": 169, "train": [171, 172, 173, 174, 175, 176, 177, 191], "conll": [171, 191], "conllu": [172, 191], "pub_tat": 175, "spacy_to_annot": 176, "tfgraph": 177, "upload_to_hub": 178, "api": 180, "refer": 180, "A": 181, "meta": 181, "machin": [181, 182], "learn": [181, 182], "platform": [181, 182], "pipelin": [181, 186, 189, 190], "paramet": 181, "evalu": 181, "metric": 181, "visual": 181, "run": 181, "an": 181, "offlin": 181, "experi": 181, "mlflow": 182, "lifecycl": 182, "third": 183, "parti": 183, "project": 183, "approach": 185, "model": 185, "note": 185, "avail": [185, 190], "set": 186, "up": 186, "your": 186, "own": 186, "type": 186, "necessari": 186, "import": 186, "construct": 186, "documentassembl": 186, "data": 186, "detect": 186, "out": 186, "put": 186, "all": 186, "togeth": 186, "ml": [186, 190], "helper": 187, "user": 188, "guid": 188, "light": 189, "convert": 189, "pipelinemodel": 189, "download": 190, "As": 190, "lightpipelin": 190, "load": 191, "dataset": 191, "spell": 191, "checker": 191, "pubtat": 191}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [181, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [168, "module-contents"], [169, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [176, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [28, "submodules"], [44, "submodules"], [47, "submodules"], [52, "submodules"], [64, "submodules"], [76, "submodules"], [78, "submodules"], [79, "submodules"], [81, "submodules"], [86, "submodules"], [91, "submodules"], [102, "submodules"], [104, "submodules"], [107, "submodules"], [112, "submodules"], [116, "submodules"], [123, "submodules"], [127, "submodules"], [138, "submodules"], [150, "submodules"], [158, "submodules"], [162, "submodules"], [166, "submodules"], [167, "submodules"], [173, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[8, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[9, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[44, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[45, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[46, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[47, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[48, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vit_for_image_classification": [[49, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[50, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[51, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[52, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[53, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_normalizer": [[54, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[55, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[56, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[58, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[59, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[60, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[61, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[62, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[63, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[64, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[65, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[66, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[67, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[69, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[70, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[71, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[73, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[74, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[75, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[76, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[77, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[78, "module-sparknlp.annotator"]], "Subpackages": [[78, "subpackages"], [158, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[79, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[80, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[81, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[82, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[83, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[84, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[85, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[86, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[87, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[88, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[89, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[90, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[91, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[92, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[93, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[94, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[95, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[96, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[97, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[98, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.param.classifier_encoder": [[99, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[100, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[101, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[102, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[103, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[104, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[105, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[106, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[107, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[108, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[109, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[110, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[111, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[112, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[113, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[114, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.spell_check.context_spell_checker": [[115, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[116, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[117, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[118, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[119, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[120, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[121, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[122, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[123, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[124, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[125, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[126, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[127, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[128, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[129, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[130, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[131, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[132, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[133, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[134, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[135, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[136, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[137, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[138, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[139, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[140, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[141, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[142, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token2_chunk": [[143, "module-sparknlp.base.token2_chunk"]], "sparknlp.base.token_assembler": [[144, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[145, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[146, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[147, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[148, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[149, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[150, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[151, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[152, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[153, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[154, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[155, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[156, "module-sparknlp.common.utils"]], "Functions": [[156, "functions"], [157, "functions"], [158, "functions"]], "sparknlp.functions": [[157, "module-sparknlp.functions"]], "sparknlp": [[158, "module-sparknlp"]], "Package Contents": [[158, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[159, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[160, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[161, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[162, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[163, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[164, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[165, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[166, "module-sparknlp.logging"]], "sparknlp.pretrained": [[167, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[168, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[169, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[170, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[171, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[172, "module-sparknlp.training.conllu"]], "sparknlp.training": [[173, "module-sparknlp.training"]], "sparknlp.training.pos": [[174, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[175, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[176, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[177, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[178, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[179, "module-sparknlp.util"]], "API Reference": [[180, "api-reference"]], "Modules": [[180, "modules"]], "Comet - A meta machine learning platform": [[181, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[181, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[181, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[181, "logging-evaluation-metrics"]], "Logging Visualizations": [[181, "logging-visualizations"]], "Running An Offline Experiment": [[181, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[182, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[183, "third-party-projects"]], "Logging": [[183, "logging"]], "Annotation": [[184, "annotation"]], "Annotators": [[185, "annotators"]], "Annotator Approaches": [[185, "annotator-approaches"]], "Annotator Models": [[185, "annotator-models"]], "Note": [[185, "note"]], "Pretrained Models": [[185, "pretrained-models"]], "Common Functions": [[185, "common-functions"]], "Available Annotators": [[185, "available-annotators"]], "Setting up your own pipeline": [[186, "setting-up-your-own-pipeline"]], "Annotator types": [[186, "annotator-types"]], "Necessary imports": [[186, "necessary-imports"]], "Constructing the Pipeline": [[186, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[186, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[186, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[186, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[186, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[187, "helper-functions"]], "User Guide": [[188, "user-guide"]], "Light Pipelines": [[189, "light-pipelines"]], "Converting PipelineModels": [[189, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[189, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[190, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[190, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[190, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[190, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[190, "available-pipelines"]], "Loading datasets for training": [[191, "loading-datasets-for-training"]], "POS Dataset": [[191, "pos-dataset"]], "CoNLL Dataset": [[191, "conll-dataset"]], "CoNLLU Dataset": [[191, "conllu-dataset"]], "Spell Checkers Dataset": [[191, "spell-checkers-dataset"]], "PubTator Dataset": [[191, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.chunk2_doc"], [9, "module-sparknlp.annotator.chunker"], [10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [20, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"], [34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [42, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [44, "module-sparknlp.annotator.coref"], [45, "module-sparknlp.annotator.coref.spanbert_coref"], [46, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [47, "module-sparknlp.annotator.cv"], [48, "module-sparknlp.annotator.cv.swin_for_image_classification"], [49, "module-sparknlp.annotator.cv.vit_for_image_classification"], [50, "module-sparknlp.annotator.date2_chunk"], [51, "module-sparknlp.annotator.dependency.dependency_parser"], [52, "module-sparknlp.annotator.dependency"], [53, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [54, "module-sparknlp.annotator.document_normalizer"], [55, "module-sparknlp.annotator.embeddings.albert_embeddings"], [56, "module-sparknlp.annotator.embeddings.bert_embeddings"], [57, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [58, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [59, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [60, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [61, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [62, "module-sparknlp.annotator.embeddings.doc2vec"], [63, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [64, "module-sparknlp.annotator.embeddings"], [65, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [66, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [67, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [68, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [69, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [70, "module-sparknlp.annotator.embeddings.word2vec"], [71, "module-sparknlp.annotator.embeddings.word_embeddings"], [72, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [73, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [74, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [75, "module-sparknlp.annotator.er.entity_ruler"], [76, "module-sparknlp.annotator.er"], [77, "module-sparknlp.annotator.graph_extraction"], [78, "module-sparknlp.annotator"], [79, "module-sparknlp.annotator.keyword_extraction"], [80, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [81, "module-sparknlp.annotator.ld_dl"], [82, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [83, "module-sparknlp.annotator.lemmatizer"], [84, "module-sparknlp.annotator.matcher.big_text_matcher"], [85, "module-sparknlp.annotator.matcher.date_matcher"], [86, "module-sparknlp.annotator.matcher"], [87, "module-sparknlp.annotator.matcher.multi_date_matcher"], [88, "module-sparknlp.annotator.matcher.regex_matcher"], [89, "module-sparknlp.annotator.matcher.text_matcher"], [90, "module-sparknlp.annotator.n_gram_generator"], [91, "module-sparknlp.annotator.ner"], [92, "module-sparknlp.annotator.ner.ner_approach"], [93, "module-sparknlp.annotator.ner.ner_converter"], [94, "module-sparknlp.annotator.ner.ner_crf"], [95, "module-sparknlp.annotator.ner.ner_dl"], [96, "module-sparknlp.annotator.ner.ner_overwriter"], [97, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [98, "module-sparknlp.annotator.normalizer"], [99, "module-sparknlp.annotator.param.classifier_encoder"], [100, "module-sparknlp.annotator.param.evaluation_dl_params"], [101, "module-sparknlp.annotator.param"], [102, "module-sparknlp.annotator.pos"], [103, "module-sparknlp.annotator.pos.perceptron"], [104, "module-sparknlp.annotator.sentence"], [105, "module-sparknlp.annotator.sentence.sentence_detector"], [106, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [107, "module-sparknlp.annotator.sentiment"], [108, "module-sparknlp.annotator.sentiment.sentiment_detector"], [109, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [110, "module-sparknlp.annotator.seq2seq.bart_transformer"], [111, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [112, "module-sparknlp.annotator.seq2seq"], [113, "module-sparknlp.annotator.seq2seq.marian_transformer"], [114, "module-sparknlp.annotator.seq2seq.t5_transformer"], [115, "module-sparknlp.annotator.spell_check.context_spell_checker"], [116, "module-sparknlp.annotator.spell_check"], [117, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [118, "module-sparknlp.annotator.spell_check.symmetric_delete"], [119, "module-sparknlp.annotator.stemmer"], [120, "module-sparknlp.annotator.stop_words_cleaner"], [121, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [122, "module-sparknlp.annotator.token.chunk_tokenizer"], [123, "module-sparknlp.annotator.token"], [124, "module-sparknlp.annotator.token.recursive_tokenizer"], [125, "module-sparknlp.annotator.token.regex_tokenizer"], [126, "module-sparknlp.annotator.token.tokenizer"], [127, "module-sparknlp.annotator.ws"], [128, "module-sparknlp.annotator.ws.word_segmenter"], [129, "module-sparknlp.base.audio_assembler"], [130, "module-sparknlp.base.doc2_chunk"], [131, "module-sparknlp.base.document_assembler"], [132, "module-sparknlp.base.embeddings_finisher"], [133, "module-sparknlp.base.finisher"], [134, "module-sparknlp.base.graph_finisher"], [135, "module-sparknlp.base.has_recursive_fit"], [136, "module-sparknlp.base.has_recursive_transform"], [137, "module-sparknlp.base.image_assembler"], [138, "module-sparknlp.base"], [139, "module-sparknlp.base.light_pipeline"], [140, "module-sparknlp.base.multi_document_assembler"], [141, "module-sparknlp.base.recursive_pipeline"], [142, "module-sparknlp.base.table_assembler"], [143, "module-sparknlp.base.token2_chunk"], [144, "module-sparknlp.base.token_assembler"], [145, "module-sparknlp.common.annotator_approach"], [146, "module-sparknlp.common.annotator_model"], [147, "module-sparknlp.common.annotator_properties"], [148, "module-sparknlp.common.annotator_type"], [149, "module-sparknlp.common.coverage_result"], [150, "module-sparknlp.common"], [151, "module-sparknlp.common.match_strategy"], [152, "module-sparknlp.common.properties"], [153, "module-sparknlp.common.read_as"], [154, "module-sparknlp.common.recursive_annotator_approach"], [155, "module-sparknlp.common.storage"], [156, "module-sparknlp.common.utils"], [157, "module-sparknlp.functions"], [158, "module-sparknlp"], [159, "module-sparknlp.internal.annotator_java_ml"], [160, "module-sparknlp.internal.annotator_transformer"], [161, "module-sparknlp.internal.extended_java_wrapper"], [162, "module-sparknlp.internal"], [163, "module-sparknlp.internal.params_getters_setters"], [164, "module-sparknlp.internal.recursive"], [165, "module-sparknlp.logging.comet"], [166, "module-sparknlp.logging"], [167, "module-sparknlp.pretrained"], [168, "module-sparknlp.pretrained.pretrained_pipeline"], [169, "module-sparknlp.pretrained.resource_downloader"], [170, "module-sparknlp.pretrained.utils"], [171, "module-sparknlp.training.conll"], [172, "module-sparknlp.training.conllu"], [173, "module-sparknlp.training"], [174, "module-sparknlp.training.pos"], [175, "module-sparknlp.training.pub_tator"], [176, "module-sparknlp.training.spacy_to_annotation"], [177, "module-sparknlp.training.tfgraphs"], [178, "module-sparknlp.upload_to_hub"], [179, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[8, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[8, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[9, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[9, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[9, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[44, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[45, "module-sparknlp.annotator.coref.spanbert_coref"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[46, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[47, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "setdorescale() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setDoRescale"]], "setrescalefactor() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[48, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[49, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[50, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[50, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[50, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[51, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[52, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[53, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[54, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[55, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[56, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[58, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[59, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[59, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[59, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[59, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[60, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[61, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "pretrained() (doc2vecmodel static method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[62, "module-sparknlp.annotator.embeddings.doc2vec"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[63, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[63, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[63, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[63, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[63, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[63, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[63, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[64, "module-sparknlp.annotator.embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[65, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[65, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[65, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[65, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[65, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[66, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[66, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[66, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[66, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[66, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[67, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[67, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[67, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[67, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[67, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[68, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[69, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[69, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[69, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[69, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[69, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[69, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "pretrained() (word2vecmodel static method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[70, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[70, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[71, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[71, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[72, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[72, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[73, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[73, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[74, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[74, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[74, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[74, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[74, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[75, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[75, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[75, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[75, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[75, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[75, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[75, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[76, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[77, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[77, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[78, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[79, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[80, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[80, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[81, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[82, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[82, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[82, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[82, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[82, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[82, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[82, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[83, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[83, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[83, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[83, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[83, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[83, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[83, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[84, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[84, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[85, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[85, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[86, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[87, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[87, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[88, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[88, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[88, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[88, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[88, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[88, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[88, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[89, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[89, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[90, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[90, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[90, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[90, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[90, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[91, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[92, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[92, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[93, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[93, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[93, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[93, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[93, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[94, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[94, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[95, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[95, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[96, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[96, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[96, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[96, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[96, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[97, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[97, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[97, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[97, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[97, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[97, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[97, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[98, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[98, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[98, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[98, "module-sparknlp.annotator.normalizer"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[99, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[99, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[100, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[100, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[101, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[102, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[103, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[103, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[104, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[105, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[105, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[106, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[106, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[107, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[108, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[108, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[108, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[108, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[109, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[109, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[110, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[110, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[111, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[111, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[112, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[113, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[113, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[114, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[114, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[115, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[115, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[116, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[117, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[117, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[118, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[118, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[119, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[119, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[120, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[120, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[120, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[120, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[120, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[120, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[120, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[121, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[121, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[122, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[122, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[122, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[123, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[124, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[124, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[124, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[124, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[124, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[124, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[124, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[125, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[125, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[126, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[126, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[126, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[127, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[128, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[128, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[129, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[129, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[129, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[129, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[129, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[130, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[130, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[131, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[131, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[131, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[131, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[131, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[131, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[131, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[131, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[132, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[132, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[133, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[133, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[133, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[134, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[134, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[134, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[134, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[134, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[134, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[135, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[135, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[136, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[136, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[137, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[137, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[137, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[137, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[137, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[138, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[139, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[139, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[139, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[139, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[139, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[139, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[139, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[139, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[140, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[140, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[141, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[141, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[141, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[142, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[142, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[142, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[142, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[142, "module-sparknlp.base.table_assembler"]], "token2chunk (class in sparknlp.base.token2_chunk)": [[143, "sparknlp.base.token2_chunk.Token2Chunk"]], "sparknlp.base.token2_chunk": [[143, "module-sparknlp.base.token2_chunk"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[144, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[144, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[144, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[145, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[145, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[146, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[146, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[147, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[147, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[148, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[149, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[150, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[151, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[151, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[152, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[152, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setdimension() (hasembeddingsproperties method)": [[152, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "sparknlp.common.properties": [[152, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[153, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[153, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[154, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[154, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[155, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[156, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[156, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[157, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[157, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[157, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[157, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[157, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[157, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[157, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[157, "module-sparknlp.functions"]], "sparknlp": [[158, "module-sparknlp"]], "start() (in module sparknlp)": [[158, "sparknlp.start"]], "version() (in module sparknlp)": [[158, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[159, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[159, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[159, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[159, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[160, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[160, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[161, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[161, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[161, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[162, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[163, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[163, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[163, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[163, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[164, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[164, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[164, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[164, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[165, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[165, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[165, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[166, "module-sparknlp.logging"]], "sparknlp.pretrained": [[167, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[168, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[168, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[168, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[168, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[168, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[168, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[169, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[169, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[170, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[171, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[171, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[171, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[172, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[172, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[172, "module-sparknlp.training.conllu"]], "sparknlp.training": [[173, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[174, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[174, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[174, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[175, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[175, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[175, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[176, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[176, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[177, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[178, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[179, "module-sparknlp.util"]]}})