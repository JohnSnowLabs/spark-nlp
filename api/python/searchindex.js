Search.setIndex({"docnames": ["_templates/_autoapi/base/base", "_templates/_autoapi/index", "_templates/_autoapi/python/attribute", "_templates/_autoapi/python/class", "_templates/_autoapi/python/data", "_templates/_autoapi/python/exception", "_templates/_autoapi/python/function", "_templates/_autoapi/python/method", "_templates/_autoapi/python/module", "_templates/_autoapi/python/package", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camambert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/token2_chunk/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/chunk2_doc/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_templates/_autoapi/base/base.rst", "_templates/_autoapi/index.rst", "_templates/_autoapi/python/attribute.rst", "_templates/_autoapi/python/class.rst", "_templates/_autoapi/python/data.rst", "_templates/_autoapi/python/exception.rst", "_templates/_autoapi/python/function.rst", "_templates/_autoapi/python/method.rst", "_templates/_autoapi/python/module.rst", "_templates/_autoapi/python/package.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camambert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/chunk2_doc/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["&lt;no title&gt;", "API Reference", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camambert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "thi": [1, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 74, 75, 76, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 115, 118, 119, 121, 125, 126, 127, 128, 130, 131, 134, 140, 141, 145, 146, 147, 150, 156, 159, 160, 163, 164, 165, 167, 168, 169], "page": [1, 11, 45, 98, 150, 159, 167, 169], "list": [1, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 66, 68, 71, 73, 76, 83, 84, 86, 87, 88, 92, 93, 96, 98, 100, 101, 102, 107, 110, 113, 119, 120, 125, 126, 139, 146, 147, 150, 159, 164], "an": [1, 12, 13, 20, 31, 42, 45, 51, 54, 56, 65, 66, 71, 73, 75, 76, 78, 80, 81, 85, 86, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 113, 115, 117, 118, 119, 120, 121, 125, 126, 128, 131, 134, 138, 139, 141, 145, 146, 147, 153, 154, 156, 157, 159, 161, 163, 164, 165, 167, 168], "overview": [1, 159, 167], "all": [1, 8, 10, 12, 15, 18, 22, 25, 29, 33, 36, 38, 45, 46, 47, 48, 59, 62, 65, 69, 73, 76, 86, 88, 98, 101, 102, 107, 111, 119, 121, 147, 159, 164, 169], "spark": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 133, 135, 137, 139, 140, 142, 143, 144, 147, 150, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 170], "nlp": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 133, 140, 144, 147, 150, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170], "modul": [1, 8, 9, 11, 27, 43, 55, 67, 69, 70, 72, 77, 82, 89, 91, 94, 99, 103, 109, 114, 124, 133, 144, 149, 155], "class": [1, 3, 5, 8, 69, 133, 144, 155, 159, 160, 168, 170], "function": [1, 6, 8, 11, 54, 62, 101, 119, 159, 167], "method": [1, 3, 7, 46, 52, 53, 61, 65, 71, 159], "extend": [2, 5, 9, 13, 20, 31, 42, 44, 45, 46, 47, 48, 50, 52, 54, 57, 59, 60, 62, 63, 65, 71, 73, 74, 76, 78, 79, 80, 81, 85, 86, 88, 90, 92, 93, 95, 96, 97, 100, 101, 102, 104, 106, 107, 110, 113, 115, 116, 117, 118, 119, 120, 126, 128, 150], "python": [2, 5, 9, 11, 73], "data": [2, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 139, 147, 150, 153, 154, 155, 156, 157, 161, 163, 164, 168, 169, 170], "rst": [2, 5, 8, 9], "obj": [3, 4, 6, 7, 8, 154], "displai": [3, 4, 6, 7, 8, 86, 98, 147, 160], "py": [3, 4, 6, 7, 49, 129, 130, 136, 142, 146], "type": [3, 4, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 139, 141, 150, 156, 163, 164, 167], "short_nam": [3, 6, 7, 8], "arg": [3, 6, 7, 127, 143], "endif": [3, 4, 6, 7, 8], "return_annot": [3, 6, 7], "overload": [3, 6, 7], "length": [3, 7, 8, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 61, 63, 64, 65, 81, 88, 92, 93, 98, 100, 101, 102, 111, 113], "endfor": [3, 6, 7, 8], "base": [3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 129, 130, 131, 133, 136, 140, 142, 146, 147, 160, 164, 165, 168], "show": [3, 4, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 139, 153, 154, 156, 157, 160, 163, 164, 165, 169], "inherit": [3, 49, 130, 146], "autoapi_opt": [3, 8], "link_obj": 3, "loop": 3, "last": [3, 12, 76, 78, 108, 168], "diagram": 3, "object": [3, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 85, 86, 90, 93, 96, 98, 100, 101, 102, 104, 105, 106, 107, 115, 135, 142, 143, 147, 163, 164], "autoapi": [3, 8], "full_nam": 3, "part": [3, 13, 71, 74, 89, 90, 106, 115, 117, 156, 170], "privat": [3, 57, 58, 141], "member": [3, 90, 150], "docstr": [3, 4, 6, 7, 8], "indent": [3, 4, 6, 7, 8], "set": [3, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 110, 111, 113, 115, 117, 118, 119, 120, 121, 125, 126, 128, 130, 131, 134, 137, 138, 140, 145, 146, 147, 153, 160, 164, 167, 168], "visible_class": [3, 8], "selectattr": [3, 8], "els": [3, 4, 6, 7, 8, 95], "rejectattr": [3, 8], "klass": [3, 8], "render": [3, 8], "visible_attribut": [3, 8], "attribut": [3, 8], "visible_method": 3, "name": [4, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 131, 137, 139, 145, 147, 150, 151, 153, 156, 160, 164], "valu": [4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 66, 68, 71, 73, 74, 76, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 96, 97, 98, 100, 101, 102, 104, 107, 111, 113, 115, 117, 118, 119, 120, 121, 125, 126, 128, 131, 134, 135, 137, 145, 147, 160, 170], "none": [4, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 79, 80, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 126, 130, 146, 147, 150, 151, 165], "annot": [4, 11, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 138, 139, 140, 141, 142, 144, 146, 147, 150, 151, 152, 156, 160, 161, 166, 167, 168, 169, 170], "string": [4, 12, 20, 31, 41, 42, 45, 66, 81, 87, 88, 93, 96, 101, 105, 107, 110, 117, 118, 120, 125, 126, 168], "splitlin": 4, "count": [4, 102], "multilin": 4, "width": 4, "8": [4, 10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 51, 52, 56, 57, 58, 63, 64, 65, 76, 81, 86, 87, 98, 102, 112, 153], "truncat": [4, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 62, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 126, 128, 139, 156, 163, 164, 165], "100": [4, 20, 31, 53, 61, 63, 71, 93], "sphinx_vers": [6, 7], "properti": [6, 7, 46, 122, 123, 131, 133, 140], "method_typ": 7, "orphan": 8, "nest": 8, "pars": [8, 13, 42, 43, 44, 66, 74, 76, 78, 102, 104, 125, 150, 156], "block": 8, "subpackag": 8, "visible_subpackag": 8, "toctre": 8, "titlesonli": 8, "maxdepth": 8, "index": [8, 12, 71, 75, 111, 137, 140, 153], "endblock": 8, "submodul": 8, "visible_submodul": 8, "content": [8, 163, 169], "visible_children": 8, "children": 8, "elif": 8, "equalto": 8, "packag": [8, 10, 46, 51, 147, 161, 162], "import": [8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 139, 147, 150, 153, 154, 156, 157, 160, 163, 164, 167, 168, 169, 170], "titl": [8, 157, 170], "visible_funct": 8, "summari": [8, 98, 101], "scope": [8, 97], "id": [8, 31, 45, 63, 66, 98, 100, 101, 116, 117, 118, 120, 126, 128, 147], "obj_item": 8, "can": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 79, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 100, 101, 102, 104, 105, 107, 112, 115, 118, 119, 126, 127, 138, 147, 150, 153, 154, 156, 160, 162, 164, 165, 167, 168, 169, 170], "quick": [10, 160, 165], "refer": [10, 11, 41, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 71, 79, 92, 93, 97, 98, 100, 101, 102, 104, 105, 117, 118, 126, 137, 164, 166, 167], "how": [10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 46, 47, 50, 51, 52, 54, 56, 57, 59, 63, 65, 66, 68, 73, 74, 75, 79, 80, 84, 85, 86, 88, 92, 95, 104, 105, 111, 113, 115, 118, 121, 126, 135, 137, 138, 140, 153, 154, 160, 164, 169], "up": [10, 11, 20, 31, 53, 56, 59, 61, 71, 98, 101, 140, 160, 164, 167, 168], "your": [10, 11, 20, 31, 42, 52, 53, 57, 59, 61, 74, 75, 79, 80, 85, 86, 88, 90, 95, 96, 97, 102, 104, 108, 110, 115, 119, 162, 164, 167, 168, 170], "environ": [10, 161], "pypi": 10, "pip": 10, "anaconda": 10, "c": [10, 53, 61, 71, 100], "johnsnowlab": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 113, 115, 140], "load": [10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 71, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 137, 150, 164, 167], "shell": 10, "com": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 113, 115, 140], "nlp_2": [10, 140], "12": [10, 46, 63, 64, 65, 71, 76, 78, 84, 90, 102, 112, 125, 139, 140, 150, 156, 163], "pyspark": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 118, 119, 125, 126, 128, 137, 139, 140, 143, 146, 147, 150, 153, 154, 156, 157, 164, 165], "submit": [10, 147, 160], "extern": [10, 71, 74, 79, 80, 86, 127, 138, 153, 154, 156, 157], "jar": [10, 140], "after": [10, 42, 44, 53, 57, 58, 61, 76, 78, 84, 110, 128, 147, 163, 164], "compil": 10, "build": [10, 51, 52, 57, 58, 68, 71, 75, 98, 147, 160], "sbt": 10, "assembl": 10, "built": [10, 20, 31, 126], "top": [10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 71, 98, 101, 126], "apach": [10, 126, 140], "x": [10, 31, 139, 153, 170], "For": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 115, 116, 117, 118, 119, 120, 126, 128, 147, 150, 157, 160, 161, 163, 164, 165, 166, 167, 168], "you": [10, 42, 44, 50, 52, 57, 59, 68, 76, 119, 121, 125, 147, 156, 160, 162, 164, 165, 168, 169, 170], "need": [10, 13, 42, 44, 52, 57, 62, 66, 68, 71, 76, 79, 85, 86, 88, 90, 93, 97, 98, 102, 104, 105, 111, 113, 125, 147, 153, 154, 156, 160, 162, 164, 165, 168, 170], "java": [10, 49, 73, 129, 130, 136, 142, 143, 146], "ar": [10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 46, 47, 51, 52, 54, 56, 57, 60, 62, 63, 64, 65, 66, 68, 71, 73, 74, 76, 79, 81, 84, 86, 87, 88, 90, 92, 93, 97, 98, 100, 101, 102, 106, 115, 116, 119, 125, 127, 135, 139, 147, 157, 160, 161, 162, 163, 164, 165, 168, 169, 170], "6": [10, 20, 47, 48, 51, 54, 71, 75, 80, 81, 87, 90, 96, 104, 112, 154, 164], "7": [10, 47, 48, 51, 76, 78, 90, 96, 98, 116, 120, 156, 163], "It": [10, 20, 31, 45, 47, 48, 51, 52, 53, 56, 57, 58, 61, 63, 64, 66, 71, 81, 96, 97, 100, 102, 104, 105, 110, 120, 125, 163, 168], "recommend": [10, 54, 65, 95, 97, 98, 100, 101], "have": [10, 20, 31, 46, 52, 57, 58, 62, 71, 81, 85, 86, 87, 90, 92, 93, 96, 98, 105, 112, 128, 142, 164, 165, 168], "basic": [10, 71, 92, 163], "knowledg": [10, 52, 71, 121], "framework": [10, 100, 101], "work": [10, 52, 56, 73, 101, 108, 163, 165, 169], "befor": [10, 45, 49, 62, 76, 78, 101, 104, 111, 130, 146, 160], "pleas": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 48, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 73, 74, 75, 76, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 115, 118, 126, 127, 161, 162, 166, 169], "document": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 147, 150, 153, 154, 156, 160, 164, 165, 167, 168, 169], "first": [10, 12, 51, 53, 54, 61, 63, 64, 71, 79, 85, 86, 87, 92, 101, 102, 107, 111, 119, 128, 160, 164, 165, 169], "let": [10, 52, 110, 164], "s": [10, 11, 14, 17, 21, 24, 28, 32, 35, 45, 46, 49, 51, 52, 53, 56, 57, 58, 61, 63, 64, 66, 71, 79, 86, 88, 97, 98, 100, 101, 102, 104, 105, 110, 111, 113, 120, 125, 129, 130, 136, 139, 142, 146, 147, 160, 163, 164, 165, 168], "make": [10, 45, 56, 63, 64, 71, 93, 97, 104, 166, 170], "sure": [10, 97], "version": [10, 45, 52, 131, 134, 140, 145, 146, 150, 151, 164], "oracl": 10, "openjdk": 10, "0_292": 10, "creat": [10, 12, 31, 47, 48, 53, 57, 61, 62, 68, 90, 108, 115, 125, 127, 139, 153, 154, 156, 157, 164, 165, 168, 170], "new": [10, 12, 41, 46, 47, 48, 51, 54, 56, 62, 65, 87, 96, 98, 101, 102, 116, 120, 131, 134, 145, 146, 163, 164], "manag": [10, 71, 161], "depend": [10, 12, 41, 59, 65, 66, 68, 69, 71, 73, 86, 100, 102, 140], "Then": [10, 20, 31, 85, 86, 128, 147, 164], "we": [10, 20, 31, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 71, 85, 86, 88, 93, 98, 100, 101, 102, 113, 125, 139, 160, 163, 164, 165, 168, 169, 170], "sparknlp": [10, 160, 163, 164, 165, 166, 168, 169, 170], "n": [10, 64, 71, 81, 84, 85, 86, 92, 93, 98, 101, 110, 125, 139, 150], "y": [10, 31], "activ": [10, 15, 18, 25, 29, 33, 36, 38, 71, 134], "jupyt": [10, 147, 160], "now": [10, 93, 125, 165], "should": [10, 12, 13, 20, 31, 49, 53, 61, 63, 71, 73, 80, 81, 85, 86, 92, 93, 96, 100, 102, 111, 125, 130, 131, 142, 146, 150, 153, 154], "readi": [10, 20, 150, 164], "notebook": [10, 147, 160], "run": [10, 52, 71, 147, 161, 169], "also": [10, 45, 46, 54, 56, 62, 63, 64, 66, 68, 71, 76, 79, 84, 85, 93, 97, 107, 125, 131, 134, 145, 160, 164, 165, 166, 167], "python3": 10, "sourc": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 161], "bin": 10, "A": [10, 41, 46, 57, 58, 62, 66, 71, 74, 75, 79, 80, 81, 88, 95, 96, 98, 100, 101, 104, 111, 113, 147, 156, 162, 164, 170], "retriev": [10, 62, 74, 104, 105, 106, 147, 150, 160, 164, 165], "If": [10, 15, 18, 20, 22, 25, 29, 33, 36, 38, 59, 62, 66, 73, 76, 78, 84, 85, 86, 88, 92, 93, 98, 101, 102, 140, 146, 147, 160, 162, 164], "manual": [10, 163], "sparksess": [10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 65, 75, 98, 100, 101, 137, 140, 153, 154, 156, 157], "becaus": [10, 49, 95, 130, 146], "other": [10, 31, 59, 60, 68, 71, 88, 95, 98, 101, 108, 110, 116, 119, 120, 126, 164], "configur": [10, 59, 113, 140], "includ": [10, 45, 47, 48, 53, 54, 61, 63, 64, 65, 68, 71, 76, 84, 85, 86, 98, 101, 102, 120, 137, 147, 157, 161, 163, 164, 165, 170], "them": [10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 51, 52, 56, 57, 63, 65, 66, 68, 71, 76, 79, 93, 102, 107, 115, 127, 128, 164, 165], "builder": [10, 140], "appnam": [10, 140], "master": [10, 140], "local": [10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 71, 98, 100, 101, 107, 125, 140, 150, 168], "config": [10, 140, 161], "driver": [10, 140], "memori": [10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 54, 62, 137, 140], "16g": [10, 140], "maxresults": [10, 140], "kryoseri": [10, 140], "buffer": [10, 48, 62, 140], "max": [10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 56, 57, 58, 63, 64, 65, 71, 105, 140], "2000m": [10, 140], "getorcr": [10, 140], "main": [11, 66, 113, 163, 167, 170], "github": [11, 46, 47, 48, 51, 57, 65, 97, 98, 100, 101, 150], "issu": 11, "workshop": [11, 13, 20, 31, 42, 44, 45, 46, 47, 48, 50, 52, 54, 57, 59, 60, 62, 63, 65, 71, 73, 74, 76, 78, 79, 80, 81, 85, 86, 88, 90, 92, 93, 95, 96, 97, 100, 101, 102, 104, 106, 107, 110, 113, 115, 116, 117, 118, 119, 120, 126, 128, 147, 160, 167], "model": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 113, 115, 130, 137, 140, 146, 147, 150, 151, 160, 161, 163, 167, 169, 170], "hub": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 73, 74, 85, 86, 90, 93, 96, 98, 100, 101, 102, 104, 105, 107, 115], "welcom": 11, "contain": [11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 160, 163, 164], "inform": [11, 42, 44, 62, 63, 71, 76, 84, 102, 118, 126, 157, 160, 161, 162, 163, 164, 170], "us": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 90, 92, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 111, 112, 113, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 139, 140, 147, 150, 153, 154, 156, 157, 161, 162, 163, 164, 165, 167], "librari": [11, 73, 117, 118, 119, 126, 128, 169], "exampl": [11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 127, 128, 139, 147, 150, 153, 154, 156, 157, 160, 163, 164, 165, 167, 168, 169, 170], "get": [11, 20, 31, 71, 83, 90, 102, 113, 115, 125, 131, 134, 137, 145, 160, 164, 169, 170], "start": [11, 14, 17, 21, 24, 28, 32, 35, 56, 68, 71, 85, 86, 93, 117, 140, 147, 160, 163, 165, 168, 169], "cheat": 11, "sheet": [11, 45], "requir": [11, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 46, 48, 51, 54, 60, 63, 64, 71, 86, 88, 97, 102, 112, 115, 117, 119, 128, 163, 164, 165], "instal": [11, 147, 162], "session": [11, 140, 153, 154, 156, 157], "from": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 127, 128, 130, 139, 140, 143, 146, 147, 150, 153, 154, 156, 157, 160, 163, 164, 165, 168, 169, 170], "user": [11, 84, 85, 113, 127, 140, 147, 160], "guid": [11, 161], "own": [11, 20, 31, 42, 53, 61, 74, 75, 79, 80, 85, 86, 88, 90, 95, 96, 97, 102, 104, 108, 110, 115, 167, 168, 170], "pipelin": [11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 140, 146, 147, 149, 150, 152, 158, 161, 163, 164, 167], "pretrain": [11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 116, 119, 120, 125, 139, 140, 147, 160, 163, 167], "dataset": [11, 20, 31, 42, 44, 53, 56, 57, 58, 61, 62, 71, 73, 85, 86, 93, 96, 98, 102, 115, 146, 150, 153, 154, 156, 157, 167], "train": [11, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 42, 44, 46, 47, 48, 51, 52, 53, 54, 57, 58, 60, 61, 63, 64, 65, 71, 73, 74, 75, 79, 80, 83, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 110, 115, 117, 125, 134, 137, 140, 147, 150, 160, 164, 165, 167, 168], "light": [11, 52, 65, 71, 125, 167, 169], "helper": [11, 90, 115, 121, 139, 156, 157, 167, 170], "third": [11, 92, 107, 148], "parti": [11, 148], "project": [11, 71, 100, 147, 161], "log": [11, 20, 31, 86, 93, 96, 98, 140], "api": [11, 160, 164, 167], "format": [12, 42, 44, 66, 68, 74, 75, 76, 78, 79, 80, 85, 86, 88, 95, 101, 104, 105, 113, 118, 120, 121, 126, 153, 154, 156, 157, 161, 170], "annotator_typ": 12, "begin": [12, 41, 84, 98, 110, 113, 117, 118, 126, 139, 163], "end": [12, 14, 17, 21, 24, 28, 32, 35, 41, 86, 93, 110, 113, 118, 126, 139, 147, 153, 160, 163, 165], "result": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 139, 140, 147, 150, 153, 154, 160, 161, 163, 164, 165, 168, 169], "metadata": [12, 41, 71, 80, 85, 86, 90, 118, 120, 125, 126, 139, 147, 163, 165], "embed": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 68, 69, 85, 86, 87, 118, 119, 120, 125, 126, 134, 139, 140, 146, 150, 163], "repres": [12, 42, 44, 46, 51, 65, 66, 68, 75, 80, 81, 113, 147, 150, 164], "output": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 131, 139, 140, 147, 156, 160, 163, 164, 165], "detail": [12, 63, 64, 71, 98, 101], "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 131, 134, 137, 138, 139, 140, 145, 146, 147, 150, 153, 154, 156, 157], "str": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 110, 111, 113, 115, 117, 118, 119, 120, 121, 125, 126, 128, 131, 134, 137, 138, 139, 140, 145, 147, 150, 153, 154, 156, 157], "The": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 111, 113, 115, 118, 120, 125, 126, 137, 139, 140, 147, 150, 153, 154, 156, 157, 160, 163, 164, 165, 167, 168, 170], "possibl": [12, 50, 52, 63, 64, 66, 92, 102, 105, 118, 126, 135, 147, 160], "token": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 71, 74, 75, 80, 81, 83, 84, 85, 86, 87, 88, 90, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 115, 116, 117, 119, 125, 127, 128, 134, 140, 150, 153, 157, 164, 168, 169], "wordpiec": 12, "word_embed": [12, 46, 47, 50, 51, 52, 54, 55, 56, 57, 59, 61, 63, 65, 69, 85, 86], "sentence_embed": [12, 20, 31, 48, 53, 55, 58, 60, 64, 69, 96, 147, 160, 164], "categori": [12, 15, 18, 20, 22, 25, 29, 31, 33, 36, 38, 96, 147, 160, 164], "date": [12, 76, 78], "entiti": [12, 16, 19, 23, 26, 30, 34, 37, 39, 41, 66, 67, 68, 75, 80, 82, 83, 84, 85, 86, 87, 108, 112, 116, 120, 125, 150], "sentiment": [12, 20, 31, 54, 65, 69, 101, 140, 164, 165], "po": [12, 13, 15, 18, 22, 25, 29, 33, 36, 38, 42, 44, 68, 69, 85, 86, 110, 115, 125, 139, 140, 150, 153, 155, 163, 167, 168, 169], "chunk": [12, 13, 14, 17, 21, 24, 28, 32, 35, 50, 53, 61, 66, 71, 75, 79, 80, 81, 84, 108, 112, 116, 117, 120, 139, 147, 157, 160, 170], "named_ent": [12, 16, 19, 23, 26, 30, 34, 37, 39, 68, 84, 85, 86, 87, 125, 150], "negex": 12, "labeled_depend": [12, 44], "languag": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 113, 115, 117, 126, 128, 151, 164], "keyword": [12, 69, 70, 71, 95], "dummi": [12, 45], "int": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 65, 68, 71, 73, 76, 81, 83, 85, 86, 88, 90, 92, 93, 96, 97, 98, 100, 101, 102, 105, 111, 113, 115, 134, 140, 147, 153], "charact": [12, 45, 54, 56, 73, 81, 88, 92, 93, 102, 104, 105, 111, 113, 120], "under": [12, 52, 65, 71, 140], "dict": [12, 42, 44, 66, 74, 75, 79, 80, 85, 86, 88, 95, 102, 104, 105, 113, 125, 138, 146, 147, 150], "associ": [12, 31, 60, 66, 79, 84, 147], "vector": [12, 31, 47, 48, 50, 51, 53, 54, 60, 61, 62, 119, 120, 126, 163], "where": [12, 31, 51, 54, 66, 71, 74, 75, 79, 80, 81, 90, 93, 95, 98, 101, 104, 115, 117, 156], "applic": [12, 71, 147, 148, 160, 162], "copi": 12, "self": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 130, 131, 134, 137, 143, 145, 146, 147, 150, 153, 154, 156, 157], "differ": [12, 42, 44, 54, 57, 58, 63, 65, 71, 76, 92, 93, 102, 113, 125, 147, 168], "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 73, 74, 75, 80, 81, 83, 85, 86, 90, 92, 93, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 110, 113, 115, 117, 125, 134, 137, 138, 139, 140, 141, 146, 150, 153, 154, 156, 157], "newli": 12, "static": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 137, 150, 151, 158, 164], "datatyp": [12, 139], "structtyp": 12, "schema": [12, 84, 147, 160], "look": [12, 86, 163], "like": [12, 14, 17, 20, 21, 24, 28, 32, 35, 41, 45, 46, 50, 52, 56, 59, 65, 68, 71, 84, 93, 97, 98, 102, 113, 115, 147, 160, 162, 163], "struct": [12, 118, 126], "containsnul": [12, 31, 118, 126], "true": [12, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 75, 76, 78, 80, 86, 88, 92, 93, 96, 102, 104, 111, 113, 117, 118, 119, 120, 121, 126, 147, 153, 154, 157, 160, 164, 165], "annotatortyp": [12, 50, 81, 117, 118, 126, 163], "nullabl": [12, 31, 118, 126], "fals": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 139, 140, 147, 150, 153, 154, 156, 160, 163, 164, 165, 170], "integ": [12, 118, 126], "map": [12, 13, 31, 62, 66, 90, 102, 118, 126, 131, 134, 139, 145, 146, 163], "kei": [12, 42, 44, 57, 58, 63, 64, 74, 118, 125, 126, 147, 150, 160], "valuecontainsnul": [12, 118, 126], "arrai": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 63, 64, 65, 73, 74, 81, 86, 90, 92, 93, 96, 98, 100, 101, 102, 108, 110, 115, 117, 118, 119, 120, 121, 125, 126, 139, 165, 168], "element": [12, 31, 81, 118, 126], "float": [12, 20, 31, 73, 85, 86, 93, 96, 98, 101, 102, 115, 118, 119, 126], "sql": [12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 65, 75, 98, 100, 101, 125, 137, 139, 146, 150, 153, 154, 156, 157], "arraytyp": [12, 117, 139], "fromrow": 12, "row": [12, 62, 92, 93, 97, 118, 126, 139, 153], "column": [12, 20, 31, 45, 62, 74, 83, 85, 86, 90, 96, 97, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 131, 139, 150, 153, 156, 164], "torow": 12, "transform": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 128, 139, 142, 146, 147, 150, 160, 163, 164, 165, 168, 169, 170], "match": [13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 61, 63, 64, 65, 66, 75, 76, 77, 78, 79, 80, 88, 90, 92, 98, 113, 115, 117, 134, 163], "pattern": [13, 45, 66, 76, 88, 104, 111, 113], "speech": [13, 89, 90, 115, 156, 170], "tag": [13, 20, 31, 45, 83, 84, 85, 86, 89, 90, 96, 115, 139, 147, 153, 156, 157, 170], "order": [13, 65, 66, 71, 104, 105, 125, 128, 139, 164, 165, 168, 170], "meaning": [13, 106], "phrase": [13, 53, 61, 75, 80], "extract": [13, 14, 17, 21, 24, 28, 32, 35, 42, 50, 62, 66, 67, 68, 70, 71, 75, 76, 78, 80, 84, 85, 86, 87, 92, 93, 95, 102, 105, 108, 112, 116, 119, 120, 121, 125, 140, 147, 150, 160], "onto": [13, 139, 165], "sentenc": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 90, 97, 100, 102, 107, 108, 111, 112, 115, 116, 118, 120, 125, 126, 128, 140, 150, 153, 154, 156, 157, 164, 168, 169], "which": [13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 65, 68, 71, 76, 78, 86, 88, 92, 93, 95, 98, 100, 101, 104, 111, 115, 119, 125, 139, 153, 154, 164, 165], "regular": [13, 79, 85, 92], "express": [13, 41, 76, 79, 92, 96], "wrap": [13, 49, 129, 130, 136, 142, 146], "angl": 13, "bracket": 13, "easili": [13, 54, 90, 119, 160], "distinguish": 13, "text": [13, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 135, 138, 139, 147, 153, 154, 156, 157, 160, 163, 164, 165, 169, 170], "itself": [13, 71, 101, 127, 165], "form": [13, 20, 31, 62, 66, 74, 75, 76, 79, 80, 93, 95, 96, 104, 105, 115, 119, 147, 153, 154, 164], "peter": [13, 56, 74, 88, 90, 93, 106, 153], "piper": [13, 74, 90, 106], "employe": [13, 74, 90, 106], "pick": [13, 74, 90, 106], "peck": [13, 74, 90, 106], "pickl": [13, 74, 90, 106], "pepper": [13, 74, 90, 106], "nnp": [13, 90, 125, 139, 153, 154, 156, 157, 163, 168, 169, 170], "nn": [13, 90, 153, 154, 156, 157, 170], "vbp": [13, 90, 125, 154, 163, 168, 169], "vbg": [13, 90], "IN": [13, 90, 125, 139, 154, 156, 157, 163, 168, 169], "jj": [13, 90, 125, 139, 153, 156, 163, 168, 169, 170], "To": [13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 51, 52, 56, 57, 63, 65, 66, 71, 76, 90, 92, 98, 101, 115, 121, 125, 127, 147, 160, 168], "regexpars": 13, "e": [13, 15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39, 44, 45, 54, 56, 66, 68, 85, 86, 98, 100, 101, 102, 107, 147, 160], "g": [13, 15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39, 44, 45, 54, 68, 85, 86, 98, 100, 101, 102, 107, 147, 160], "setinputcol": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 131, 147, 160, 164, 165], "setoutputcol": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 131, 147, 160, 164, 165], "setregexpars": 13, "when": [13, 45, 46, 68, 76, 78, 81, 86, 98, 102, 104, 107, 110, 116, 125, 153, 164, 165, 168], "defin": [13, 84, 85, 86, 107, 110, 116, 120, 139, 147, 150, 160, 164, 168], "enclos": 13, "treat": 13, "group": [13, 113], "so": [13, 20, 71, 84, 93, 96, 127, 147, 160], "here": [13, 74, 139, 164], "specif": [13, 42, 44, 45, 47, 48, 52, 60, 68, 71, 86, 98, 125, 127, 147, 168], "mean": [13, 31, 63, 71, 73, 76, 78, 98, 100, 101, 111, 119, 125, 164, 165, 168], "more": [13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 52, 54, 59, 63, 64, 68, 71, 81, 84, 93, 98, 101, 104, 111, 113, 116, 117, 118, 119, 120, 126, 128, 147, 150, 157, 160, 161, 162, 164, 167, 170], "noun": [13, 154], "success": [13, 98], "see": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 115, 116, 117, 118, 119, 120, 121, 126, 128, 137, 147, 150, 157, 160, 161, 162, 167, 169, 170], "input": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 126, 128, 131, 139, 146, 150, 153, 154, 156, 157, 164, 165, 168, 170], "grammar": 13, "parser": [13, 42, 44, 68, 69], "perceptronmodel": [13, 42, 44, 68, 85, 90, 153], "Of": [13, 46, 115], "ml": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 118, 119, 125, 126, 127, 128, 147, 160, 164, 168], "documentassembl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 118, 119, 126, 127, 128, 147, 153, 160, 164], "sentencedetector": [13, 20, 41, 42, 44, 48, 50, 58, 60, 64, 68, 71, 74, 79, 81, 85, 86, 87, 90, 92, 93, 107, 108, 127, 128, 153, 164, 165], "postag": 13, "setstag": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 119, 128, 164, 165], "createdatafram": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 126, 128, 139, 147, 160, 163, 164, 165, 169], "todf": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 126, 128, 139, 163, 164, 165, 169], "fit": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 117, 119, 125, 127, 128, 146, 147, 160, 164, 165, 168], "selectexpr": [13, 20, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 74, 75, 76, 78, 79, 80, 81, 84, 87, 88, 90, 92, 93, 95, 100, 106, 107, 108, 111, 112, 113, 116, 117, 119, 120, 139, 153, 154, 156, 163, 164, 169], "explod": [13, 20, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 75, 78, 79, 80, 81, 84, 87, 90, 92, 93, 100, 112, 116, 119, 120, 139, 153, 156, 163, 164, 169], "11": [13, 63, 64, 76, 78, 81, 90], "13": [13, 41, 63, 64, 68, 90, 116, 120], "21": [13, 76, 78, 87, 90], "35": [13, 90], "39": [13, 87, 90, 156], "52": [13, 87, 90, 156], "58": [13, 90], "albertforquestionansw": 14, "classnam": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 113, 115, 129, 130, 136, 142], "classifi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 69, 71, 96, 119, 164], "dl": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 69, 73, 86, 96, 104, 105], "java_model": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 113, 115, 123, 130, 146], "albert": [14, 15, 16, 46], "span": [14, 17, 21, 24, 28, 32, 35, 101], "classif": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 60, 97, 101, 164], "head": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 65, 84, 85, 86, 125, 139, 150], "question": [14, 17, 21, 24, 28, 32, 35, 42, 44, 47, 48, 54, 57, 58, 65, 90, 98, 101, 125], "answer": [14, 17, 21, 24, 28, 32, 35, 42, 44, 47, 48, 54, 65, 98, 101, 125], "task": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 52, 56, 60, 63, 64, 65, 71, 96, 98, 100, 101, 127], "squad": [14, 17, 21, 24, 28, 32, 35, 46, 47, 48, 51, 57, 58], "linear": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 98], "layer": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 54, 65], "hidden": [14, 16, 17, 19, 21, 23, 24, 26, 28, 30, 32, 34, 35, 37, 39, 46, 54, 65], "state": [14, 16, 17, 19, 20, 21, 23, 24, 26, 28, 30, 31, 32, 34, 35, 37, 39, 46, 47, 48, 54, 56, 57, 58, 65, 71, 86, 96, 98, 101, 126, 161, 164], "comput": [14, 17, 21, 24, 28, 32, 35, 46, 51, 52, 60, 98, 100, 105, 125, 168], "logit": [14, 15, 17, 18, 21, 24, 25, 28, 29, 32, 33, 35, 36, 38, 134], "companion": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 85, 86, 90, 93, 96, 98, 100, 101, 102, 104, 105, 107, 115, 143], "spanclassifi": [14, 17, 21, 24, 28, 32, 35], "document_quest": [14, 17, 21, 24, 28, 32, 35], "document_context": [14, 17, 21, 24, 28, 32, 35], "default": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 110, 111, 113, 115, 117, 118, 119, 120, 121, 125, 126, 134, 138, 139, 140, 147, 150, 153, 154, 156, 157, 164], "albert_base_qa_squad2": 14, "provid": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 76, 78, 79, 80, 85, 86, 88, 90, 93, 95, 96, 98, 100, 101, 102, 104, 105, 115, 125, 131, 134, 139, 141, 145, 150, 165], "avail": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 69, 71, 73, 74, 76, 79, 85, 86, 90, 93, 96, 98, 100, 101, 102, 104, 105, 107, 115, 142, 150, 160, 167], "compat": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 51, 52, 56, 57, 63, 65, 86, 119], "batchsiz": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 52, 54, 56, 57, 58, 63, 64, 65, 86, 96, 100, 102, 134], "batch": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 52, 54, 56, 57, 58, 63, 64, 65, 86, 96, 100, 102, 134], "size": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 64, 65, 68, 71, 86, 96, 98, 100, 101, 102, 104, 134, 163, 168, 169], "larg": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 51, 52, 54, 63, 64, 65, 71, 73, 75, 80, 86, 98], "allow": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 54, 60, 85, 86, 88, 92, 93, 111, 113, 127], "faster": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 52, 54, 104, 105], "process": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 61, 63, 64, 65, 68, 71, 73, 84, 85, 86, 93, 96, 98, 101, 116, 117, 118, 119, 120, 126, 127, 128, 147, 160, 163, 164, 165, 166], "casesensit": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 52, 54, 56, 57, 58, 63, 64, 65, 75, 80, 104, 107, 134], "whether": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 66, 68, 75, 76, 78, 80, 81, 85, 86, 88, 92, 93, 96, 98, 101, 102, 104, 107, 111, 113, 117, 119, 120, 121, 125, 128, 131, 134, 137, 140, 150, 153, 157, 165], "ignor": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 52, 54, 56, 57, 58, 63, 64, 65, 75, 81, 84, 98, 100, 101, 104, 107, 125, 134], "case": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 51, 52, 54, 56, 57, 58, 63, 64, 65, 66, 73, 75, 80, 96, 102, 104, 107, 113, 117, 134, 153, 154, 164], "configprotobyt": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 73, 86, 96, 98, 100, 101, 102], "configproto": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 73, 86, 96, 98, 100, 101, 102], "tensorflow": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 71, 73, 86, 96, 98, 100, 101, 102], "serial": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 66, 73, 86, 96, 98, 100, 101, 102, 140], "byte": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 73, 86, 96, 98, 100, 101, 102, 147], "maxsentencelength": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 61, 63, 64, 65], "128": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 51, 52, 57, 58, 63, 64, 65, 147, 160], "multidocumentassembl": [14, 17, 21, 24, 28, 32, 35, 126], "context": [14, 17, 21, 24, 28, 32, 35, 47, 48, 53, 54, 61, 65, 69, 97, 102, 113], "setcasesensit": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 50, 52, 56, 57, 63, 75, 80, 85, 104, 107, 119, 128, 134], "what": [14, 17, 21, 24, 28, 32, 35, 42, 44, 71, 73, 96, 100, 102, 110, 154, 161], "my": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 45, 79, 81, 92, 96, 98, 107, 108, 111, 164], "clara": [14, 17, 21, 24, 28, 32, 35], "i": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 54, 78, 85, 87, 92, 95, 96, 97, 98, 102, 104, 105, 108, 110, 113, 139, 153, 164, 170], "live": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 98, 147, 160], "berkelei": [14, 17, 21, 24, 28, 32, 35], "select": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 52, 62, 68, 71, 73, 85, 86, 96, 97, 98, 101, 102, 104, 105, 110, 115, 118, 120, 121, 126, 128, 139, 147, 160, 165], "coalescesent": [14, 15, 17, 18, 21, 22, 24, 25, 28, 29, 32, 33, 35, 36, 38, 73], "setconfigprotobyt": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 73, 86, 96, 98, 100, 101, 102], "b": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 73, 75, 80, 84, 85, 86, 87, 92, 96, 98, 100, 101, 102, 125, 139, 150, 153, 157, 170], "setmaxsentencelength": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 61, 63, 64, 65], "loadsavedmodel": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 98, 100, 101], "folder": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 86, 93, 96, 98, 100, 101, 105, 153], "spark_sess": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 98, 100, 101], "save": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 86, 93, 96, 98, 100, 101, 137, 140, 147, 160, 164], "current": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 65, 71, 75, 76, 78, 93, 98, 100, 101, 125, 131, 134, 137, 140, 163, 164, 165], "restor": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115], "lang": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 150, 151], "en": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 65, 66, 68, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 150, 154, 170], "remote_loc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 150, 151], "download": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 68, 73, 74, 75, 80, 85, 86, 87, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 140, 150, 163, 164, 167, 168], "option": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 71, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 118, 125, 126, 137, 138, 139, 140, 146, 147, 150, 153, 154, 156, 157, 164], "remot": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 150], "address": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115], "resourc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 113, 115, 127, 135, 138, 149, 153, 154, 156, 157, 164, 170], "Will": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 75, 80, 85, 86, 90, 92, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115], "repositori": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 150, 161], "otherwis": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 73, 74, 75, 80, 85, 86, 90, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 113, 115, 117, 147], "concern": [15, 46], "albertforsequenceclassif": [15, 22], "sequenc": [15, 18, 22, 25, 29, 33, 36, 38, 56, 98, 99, 100, 101, 102, 107], "regress": [15, 18, 22, 25, 29, 33, 36, 38, 101], "pool": [15, 18, 22, 25, 29, 33, 36, 38, 50, 54, 59], "multi": [15, 18, 20, 22, 25, 29, 31, 33, 36, 38, 46, 60, 63, 64, 71, 73, 96, 100], "sequenceclassifi": [15, 18, 22, 25, 29, 33, 36, 38], "label": [15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 42, 44, 66, 73, 83, 84, 85, 86, 95, 96, 97, 101, 102, 147, 153, 160, 164], "albert_base_sequence_classifier_imdb": 15, "instead": [15, 18, 22, 25, 29, 33, 36, 38, 48, 71, 73, 76, 78, 101, 119, 120, 125, 168], "per": [15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 31, 33, 34, 36, 37, 38, 39, 63, 64, 73, 76, 81, 83, 84, 85, 86, 96, 125, 139, 150, 153], "inputcol": [15, 18, 20, 22, 25, 29, 31, 33, 36, 38, 59, 73, 96, 118, 119, 120, 121, 126, 131], "averag": [15, 18, 22, 25, 29, 33, 36, 38, 50, 59, 63, 64, 73, 86, 90], "probabl": [15, 18, 22, 25, 29, 33, 36, 38, 71, 98, 101], "calcul": [15, 18, 25, 29, 33, 36, 38, 62, 81, 86, 95, 134], "via": [15, 18, 25, 29, 33, 36, 38, 60, 134, 140], "softmax": [15, 18, 25, 29, 33, 36, 38, 51, 53, 61, 102, 134], "sigmoid": [15, 18, 25, 29, 33, 36, 38, 134], "john": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39, 41, 48, 58, 64, 66, 68, 87, 88, 93, 121], "lenon": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39], "wa": [15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39, 45, 51, 52, 56, 57, 58, 62, 63, 64, 71, 96, 97, 98, 102, 150, 164, 165], "born": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39, 98], "london": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39], "pari": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39], "sarah": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39], "neg": [15, 18, 22, 25, 29, 33, 36, 38, 95, 96, 97, 147, 160], "getclass": [15, 16, 18, 19, 22, 23, 25, 26, 29, 30, 33, 34, 36, 37, 38, 39], "setcoalescesent": [15, 18, 22, 25, 29, 33, 36, 38, 73], "due": [15, 18, 22, 25, 29, 33, 36, 38, 46, 56], "limit": [15, 18, 22, 25, 29, 33, 36, 38, 46, 56, 62, 65, 71, 101, 104], "almost": [15, 18, 22, 25, 29, 33, 36, 38], "bert": [15, 17, 18, 19, 22, 25, 26, 29, 33, 36, 38, 46, 47, 48, 51, 52, 56, 57, 58, 63, 64, 65, 86, 87, 101], "512": [15, 18, 22, 25, 29, 33, 36, 38, 54], "help": [15, 18, 22, 25, 29, 33, 36, 38, 42, 44, 46, 100, 113, 147, 160, 165, 169], "feed": [15, 18, 22, 25, 29, 33, 36, 38], "entir": [15, 18, 22, 25, 29, 33, 36, 38, 100], "bool": [15, 18, 20, 22, 25, 29, 31, 33, 36, 38, 45, 48, 50, 60, 66, 68, 73, 75, 76, 80, 81, 85, 86, 88, 92, 93, 96, 98, 101, 102, 104, 107, 111, 113, 117, 119, 120, 121, 125, 131, 134, 137, 140, 147, 150, 153], "one": [15, 18, 22, 25, 29, 31, 33, 36, 38, 41, 42, 44, 45, 47, 48, 59, 63, 64, 65, 71, 73, 76, 84, 93, 108, 128, 160, 164], "albertfortokenclassif": [16, 46], "recognit": [16, 19, 23, 26, 30, 34, 37, 39, 82, 85, 86], "ner": [16, 19, 23, 26, 30, 34, 37, 39, 63, 64, 68, 69, 108, 125, 139, 140, 147, 150, 160], "token_classifi": [16, 30, 34, 37, 39], "albert_base_token_classifier_conll03": 16, "albertembed": [16, 46], "level": [16, 20, 31, 47, 48, 56, 57, 58, 60, 62, 64, 66, 83, 85, 86, 96, 102, 140, 153], "tokenclassifi": [16, 19, 23, 26, 30, 34, 37, 39], "o": [16, 19, 23, 26, 30, 34, 37, 39, 84, 85, 86, 87, 125, 139, 150, 153, 157, 170], "loc": [16, 19, 23, 26, 30, 34, 37, 39, 68, 84, 85, 86, 116, 120, 125, 139, 150, 153], "bertforquestionansw": 17, "bert_base_cased_qa_squad2": 17, "bertforsequenceclassif": 18, "bert_base_sequence_classifier_imdb": 18, "bertfortokenclassif": 19, "bert_base_token_classifier_conll03": 19, "classifierdl": [20, 164], "classifierdlapproach": [20, 31, 164], "gener": [20, 31, 46, 50, 52, 56, 59, 65, 68, 71, 85, 86, 93, 98, 101, 102, 104, 105, 120, 121, 147, 160, 163, 164, 165], "art": [20, 31, 46, 47, 48, 54, 56, 57, 58, 65, 71, 86, 98, 101, 126], "univers": [20, 42, 44, 60, 100], "encod": [20, 45, 47, 48, 51, 56, 60, 100, 147], "deep": [20, 47, 48, 54, 71, 85, 93, 102], "learn": [20, 31, 46, 52, 53, 54, 57, 58, 60, 61, 63, 64, 65, 71, 85, 86, 93, 96, 98, 101, 102, 147, 162], "dnn": 20, "insid": [20, 31, 84, 90, 113, 153], "support": [20, 31, 46, 56, 71, 86, 88, 93, 107, 140, 161], "instanti": [20, 31, 42, 44, 53, 61, 62, 66, 74, 75, 79, 80, 85, 86, 88, 90, 93, 95, 96, 97, 102, 104, 105, 108, 110, 115, 153, 154], "classifierdlmodel": [20, 31, 164], "usag": [20, 31, 42, 44, 45, 46, 47, 48, 50, 52, 54, 57, 60, 62, 63, 65, 66, 71, 73, 74, 76, 78, 79, 80, 85, 86, 88, 90, 92, 93, 95, 96, 97, 100, 101, 102, 104, 106, 107, 110, 113, 115], "lr": [20, 31, 86, 96], "rate": [20, 31, 53, 57, 58, 61, 62, 86, 96, 102], "005": [20, 86, 96], "64": [20, 31, 46, 86, 96, 164], "dropout": [20, 86, 96], "coeffici": [20, 85, 86, 96], "5": [20, 31, 41, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 73, 76, 78, 81, 84, 86, 90, 96, 98, 115, 119, 125, 139, 147, 150, 154, 156, 157, 160, 163, 164, 170], "maxepoch": [20, 31, 83, 85, 86, 96], "maximum": [20, 31, 41, 53, 61, 68, 71, 83, 85, 86, 88, 92, 93, 96, 98, 100, 101, 102, 104, 111, 113], "number": [20, 31, 42, 44, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 81, 83, 85, 86, 90, 92, 93, 96, 98, 101, 102, 115, 153, 154], "epoch": [20, 31, 83, 85, 86, 93, 96, 102, 147], "30": [20, 71, 76, 78, 84, 96, 100, 125, 139, 150, 163], "validationsplit": [20, 31, 86, 93, 96], "choos": [20, 31, 50, 59, 86, 93, 96], "proport": [20, 31, 86, 93, 96], "valid": [20, 31, 76, 86, 93, 96, 102, 160], "against": [20, 31, 66, 71, 75, 80, 86, 93, 96, 127], "each": [20, 31, 51, 53, 59, 61, 62, 66, 68, 71, 74, 75, 76, 79, 80, 81, 83, 85, 86, 88, 90, 92, 93, 95, 96, 102, 104, 111, 113, 118, 126, 139, 146, 156, 165], "between": [20, 31, 42, 44, 57, 58, 60, 63, 64, 65, 68, 86, 92, 93, 96, 102], "off": [20, 31, 60, 63, 64, 86, 93, 96], "enableoutputlog": [20, 31, 86, 96], "stdout": [20, 31, 86, 96], "addit": [20, 31, 42, 44, 47, 48, 66, 85, 86, 92, 96, 98, 113, 147, 163, 164], "outputlogspath": [20, 31, 86, 93, 96], "path": [20, 31, 42, 44, 53, 61, 62, 66, 68, 74, 75, 79, 80, 85, 86, 88, 93, 95, 96, 98, 102, 104, 105, 113, 137, 138, 147, 150, 153, 154, 156, 157, 160], "labelcolumn": [20, 31, 83, 85, 86, 96], "verbos": [20, 31, 83, 85, 86, 96], "dure": [20, 31, 52, 83, 85, 86, 92, 96, 102, 134, 140, 147, 160], "randomse": [20, 31, 83, 85, 86, 96], "random": [20, 31, 53, 61, 83, 85, 86, 96, 119], "seed": [20, 31, 53, 61, 83, 85, 86, 96], "shuffl": [20, 31, 83, 96], "multiclassifierdlapproach": [20, 31, 147, 160], "sentimentdlapproach": [20, 31, 96], "analysi": [20, 31, 54, 65, 94, 95, 96, 101, 116, 132, 165], "note": [20, 31, 46, 52, 54, 57, 59, 62, 63, 65, 71, 86, 96, 98, 100, 101, 125, 137, 140, 169], "accept": [20, 31, 96], "singl": [20, 31, 62, 68, 71, 96, 108, 110, 113, 153], "item": [20, 62, 96, 147, 160], "either": [20, 44, 50, 59, 66, 71, 73, 79, 95, 96, 97, 101, 117, 118, 125, 126, 150, 165], "doubl": [20, 96], "universalsentenceencod": [20, 31, 60, 96, 147, 160, 164], "sentenceembed": [20, 31, 59, 62, 96, 119], "In": [20, 31, 51, 52, 56, 62, 65, 66, 71, 73, 74, 75, 79, 80, 92, 93, 95, 96, 98, 101, 104, 105, 115, 147, 156, 160, 164, 165, 169, 170], "csv": [20, 66, 96, 164], "ha": [20, 31, 45, 46, 51, 52, 54, 57, 58, 62, 71, 74, 79, 86, 93, 95, 101, 104, 105, 115, 117, 125, 147, 156, 160, 164, 165], "movi": [20, 96, 97, 164], "best": [20, 46, 57, 58, 71, 73, 86, 96, 164], "wach": [20, 164], "ever": [20, 45, 96, 164], "opinion": [20, 96, 164], "win": [20, 96, 164], "award": [20, 96, 164], "terribl": [20, 96, 164], "act": [20, 96, 164], "bad": [20, 95, 96, 147, 160, 164], "realli": [20, 96, 97, 164], "trane": 20, "done": [20, 57, 58, 85, 86, 165], "smallcorpu": [20, 96, 164], "read": [20, 42, 44, 53, 61, 71, 74, 75, 76, 78, 79, 80, 85, 86, 88, 93, 95, 96, 98, 102, 104, 105, 113, 115, 118, 126, 135, 137, 138, 141, 147, 153, 154, 156, 157, 160, 164, 170], "header": [20, 96, 164], "src": [20, 42, 44, 62, 74, 75, 79, 80, 85, 86, 90, 96, 104, 105, 108, 115, 153, 154, 156, 157, 164, 170], "test": [20, 42, 44, 47, 48, 60, 62, 74, 75, 79, 80, 85, 86, 90, 96, 98, 104, 105, 108, 115, 153, 154, 156, 157, 164, 170], "useembed": [20, 31, 60, 96, 164], "docclassifi": [20, 31, 96, 164], "setlabelcolumn": [20, 31, 83, 85, 86, 96, 147, 160, 164], "setbatchs": [20, 31, 54, 86, 96, 102, 134, 147, 160, 164], "setmaxepoch": [20, 31, 83, 85, 86, 96, 147, 160, 164], "20": [20, 65, 84, 98, 125, 139, 150, 164], "setlr": [20, 31, 86, 96, 147, 160, 164], "5e": [20, 96, 164], "setdropout": [20, 86, 96, 164], "pipelinemodel": [20, 31, 42, 44, 45, 53, 61, 85, 86, 96, 97, 102, 104, 105, 115, 125, 127, 147, 164, 167], "setverbos": [20, 31, 83, 86, 96], "setrandomse": [20, 31, 83, 86, 96], "v": [20, 31, 62, 71, 73, 75, 86, 96, 105, 134, 139], "setvalidationsplit": [20, 31, 86, 93, 96], "setenableoutputlog": [20, 31, 86, 96, 147, 160], "setoutputlogspath": [20, 31, 86, 93, 96, 147, 160], "p": [20, 45, 53, 61, 73, 86, 96, 110], "classifierdl_use_trec6": 20, "trec": 20, "multiclassifierdlmodel": [20, 31], "sentimentdlmodel": [20, 31, 96], "sarcasmdl": [20, 164], "classifierdl_use_sarcasm": [20, 164], "sarcasm": [20, 164], "m": [20, 76, 78, 164], "could": [20, 52, 71, 102, 163, 164, 165], "put": [20, 139, 164], "word": [20, 42, 44, 46, 50, 51, 53, 54, 57, 59, 60, 61, 62, 65, 66, 68, 71, 74, 81, 84, 87, 88, 90, 95, 98, 100, 101, 102, 104, 105, 106, 107, 110, 113, 114, 115, 125, 139, 150, 156, 157, 163, 164], "much": [20, 46, 57, 58, 88, 115, 140, 164], "love": [20, 48, 58, 64, 93, 97, 164], "wake": [20, 164], "am": [20, 76, 78, 98, 108, 164], "mondai": [20, 164], "would": [20, 41, 50, 59, 76, 93, 140, 164], "arrays_zip": [20, 42, 44, 71, 164], "out": [20, 71, 74, 88, 98, 100, 101, 106, 107, 164], "normal": [20, 45, 69, 75, 93, 97, 107, 119, 127, 128, 140, 164, 165], "debertaforquestionansw": 21, "deberta": [21, 22, 23, 51], "deberta_v3_xsmall_qa_squad2": 21, "debertaforsequenceclassif": 22, "v2": [22, 23, 47, 48, 51], "v3": [22, 23], "deberta_v3_xsmall_sequence_classifier_imdb": 22, "deberta_base_sequence_classifier_imdb": 22, "debertafortokenclassif": 23, "deberta_v3_xsmall_token_classifier_conll03": 23, "distilbertforquestionansw": 24, "distilbert": [24, 25, 52], "distilbert_base_cased_qa_squad2": 24, "distilbertforsequenceclassif": 25, "distilbert_base_sequence_classifier_imdb": 25, "distilbertfortokenclassif": 26, "distilbert_base_token_classifier_conll03": 26, "albert_for_question_answ": [27, 69], "albert_for_sequence_classif": [27, 69], "albert_for_token_classif": [27, 69], "bert_for_question_answ": [27, 69], "bert_for_sequence_classif": [27, 69], "bert_for_token_classif": [27, 69], "deberta_for_question_answ": [27, 69], "deberta_for_sequence_classif": [27, 69], "deberta_for_token_classif": [27, 69], "distil_bert_for_question_answ": [27, 69], "distil_bert_for_sequence_classif": [27, 69], "distil_bert_for_token_classif": [27, 69], "longformer_for_question_answ": [27, 69], "longformer_for_sequence_classif": [27, 69], "longformer_for_token_classif": [27, 69], "multi_classifier_dl": [27, 69], "roberta_for_question_answ": [27, 69], "roberta_for_sequence_classif": [27, 69], "roberta_for_token_classif": [27, 69], "xlm_roberta_for_question_answ": [27, 69], "xlm_roberta_for_sequence_classif": [27, 69], "xlm_roberta_for_token_classif": [27, 69], "xlnet_for_sequence_classif": [27, 69], "xlnet_for_token_classif": [27, 69], "longformerforquestionansw": 28, "longform": [28, 29, 30, 56], "longformer_base_base_qa_squad2": 28, "longformerforsequenceclassif": 29, "longformer_base_sequence_classifier_imdb": 29, "4096": [29, 46, 56], "longformerfortokenclassif": 30, "xlnet_base_token_classifier_conll03": [30, 39], "longformer_base_token_classifier_conll03": 30, "multiclassifierdl": 31, "bidirect": [31, 47, 48, 54, 65], "gru": 31, "convolut": 31, "machin": [31, 53, 61, 71, 85, 98, 100, 101, 147, 162], "strongli": 31, "relat": [31, 42, 44, 68, 169], "problem": [31, 46, 54, 101, 102], "variant": [31, 56, 60], "multipl": [31, 66, 71, 76, 92, 113, 139, 147, 153], "mai": [31, 117, 163, 164, 165, 168, 169], "assign": [31, 66, 87, 95], "instanc": [31, 131, 134, 140, 141, 145], "multiclass": 31, "categor": 31, "precis": [31, 42, 44], "than": [31, 52, 53, 61, 63, 64, 65, 71, 73, 81, 85, 96, 98, 104, 105, 164], "two": [31, 42, 44, 46, 51, 60, 62, 63, 64, 68, 112, 153, 164], "constraint": 31, "mani": [31, 51, 57, 58, 71, 98, 100, 101, 115], "formal": 31, "find": [31, 42, 44, 57, 58, 60, 66, 68, 74, 76, 98], "binari": [31, 135, 147], "bertsentenceembed": [31, 48, 58, 64, 96], "001": [31, 85, 86], "10": [31, 41, 42, 71, 76, 78, 87, 104, 147, 163], "44": [31, 53, 61, 90], "shuffleperepoch": 31, "threshold": [31, 53, 61, 71, 73, 85, 96, 102, 115], "minimum": [31, 53, 61, 68, 71, 73, 83, 85, 86, 88, 92, 93, 96, 98, 101, 104, 105, 111, 113, 153], "ed58abb40640f983": 31, "pn": 31, "newsyou": 31, "toxic": 31, "a1237f726b5f5d89": 31, "dude": 31, "place": 31, "obscen": 31, "insult": 31, "24b0d6c8733c2abe": 31, "thank": [31, 65, 71], "8c4478fb239bcfc0": 31, "gee": 31, "minut": 31, "traindataset": [31, 147, 160], "printschema": [31, 118, 126], "root": [31, 41, 42, 44, 68, 118, 126, 154], "setcleanupmod": [31, 118, 126], "shrink": [31, 118, 126], "1e": [31, 147, 160], "setthreshold": [31, 71, 73, 96, 147, 160], "setshuffleperepoch": [31, 147, 160], "multiclassifi": [31, 147, 160], "multiclassifierdl_use_tox": 31, "comment": [31, 71], "jigsaw": 31, "challeng": [31, 52, 54, 57, 58, 71], "pretti": [31, 71], "good": [31, 52, 60, 97], "stuff": 31, "wtf": 31, "kind": [31, 71, 76, 78], "crap": 31, "robertaforquestionansw": 32, "roberta": [32, 33, 34, 35, 36, 37, 51, 56, 57, 58, 63, 64], "roberta_base_qa_squad2": 32, "robertaforsequenceclassif": 33, "roberta_base_sequence_classifier_imdb": 33, "robertafortokenclassif": 34, "roberta_base_token_classifier_conll03": 34, "xlmrobertaforquestionansw": 35, "xlm": [35, 36, 37, 63, 64], "xlm_roberta_base_qa_squad2": 35, "xlmrobertaforsequenceclassif": 36, "xlm_roberta_base_sequence_classifier_imdb": 36, "xlmrobertafortokenclassif": 37, "xlm_roberta_base_token_classifier_conll03": 37, "xlnetforsequenceclassif": 38, "xlnet": [38, 39, 65], "xlnet_base_sequence_classifier_imdb": 38, "xlnetfortokenclassif": 39, "spanbert_coref": [40, 69], "spanbertcorefmodel": 41, "corefer": 41, "resolut": 41, "spanbert": 41, "identifi": [41, 62, 71, 75, 79, 111, 113, 138, 147, 165], "same": [41, 46, 57, 62, 63, 66, 68, 101, 127, 147, 165], "given": [41, 66, 71, 98, 101, 102, 104, 105, 107, 146, 147], "told": [41, 78], "mari": [41, 48, 58, 64, 93], "he": [41, 51, 78, 110], "borrow": 41, "book": [41, 45, 98, 102, 154], "her": 41, "link": [41, 150], "fine": [41, 47, 48, 52, 101], "tune": [41, 47, 48, 52, 101], "ontonot": 41, "corefresolut": 41, "spanbert_base_coref": 41, "maxsegmentlength": 41, "segment": [41, 52, 57, 114, 115], "textgenr": 41, "genr": 41, "One": [41, 71, 110, 112], "follow": [41, 45, 54, 56, 62, 71, 76, 78, 79, 84, 88, 92, 112, 160, 162, 165], "bc": 41, "broadcast": 41, "convers": 41, "bn": 41, "nw": 41, "wire": 41, "pt": 41, "pivot": 41, "old": [41, 156], "testament": 41, "tc": 41, "telephon": 41, "wb": 41, "web": [41, 45, 98, 147, 160], "AS": 41, "setmaxsegmentlength": 41, "settextgenr": 41, "code": [41, 51, 53, 56, 57, 58, 61, 63, 64, 71, 73, 101, 161, 169], "dependencypars": [42, 44, 68], "dependencyparserapproach": [42, 154, 170], "unlabel": [42, 47, 48, 98, 101], "grammat": [42, 44], "dependencyparsermodel": [42, 44, 68], "about": [42, 44, 57, 58, 62, 71, 92, 105, 125, 127, 163, 165, 168, 169], "relationship": [42, 44, 60, 68], "tell": [42, 44, 71, 139], "subject": [42, 44, 96], "verb": [42, 44, 154], "well": [42, 44, 60, 63, 64, 71], "modifi": [42, 44, 57, 58, 93], "describ": [42, 44, 68, 71, 100], "wai": [42, 44, 66, 68, 127, 150], "onli": [42, 44, 45, 54, 60, 65, 76, 88, 92, 93, 98, 101, 110, 127, 153], "chosen": [42, 44, 86], "particular": [42, 44, 71], "treebank": 42, "penn": 42, "setdependencytreebank": 42, "conll": [42, 44, 85, 86, 140, 154, 155, 167], "u": [42, 44, 84, 85, 86, 125, 139, 150, 154, 170], "setconllu": [42, 44], "apart": [42, 44, 116, 120], "dependencytreebank": 42, "file": [42, 44, 45, 60, 62, 66, 74, 75, 79, 80, 85, 86, 88, 93, 95, 102, 104, 105, 113, 135, 137, 140, 147, 153, 154, 156, 157, 160, 170], "conllu": [42, 44, 74, 140, 155, 167], "numberofiter": [42, 44], "iter": [42, 44, 46, 53, 61, 90, 115, 147, 160], "converg": [42, 44, 90, 115], "better": [42, 44, 46, 51, 65, 71, 85, 90, 92, 93, 97, 115], "accuraci": [42, 44, 47, 48, 53, 60, 61, 63, 64, 85, 86, 90, 104, 115, 160], "typeddependencyparserapproach": [42, 44], "postagg": [42, 44, 68, 85, 90], "dependency_treebank": 42, "emptydataset": [42, 44], "reli": [42, 44, 65, 71], "tree": [42, 68], "bank": 42, "setnumberofiter": [42, 44], "read_a": [42, 44, 66, 74, 75, 79, 80, 85, 86, 88, 95, 104, 105, 113, 133, 137, 138, 140, 153, 154], "reada": [42, 44, 62, 66, 74, 75, 79, 80, 85, 86, 88, 95, 104, 105, 108, 113, 135, 137, 138, 153, 154], "dep": [42, 69], "dependency_conllu": [42, 68], "perceptron": [42, 69, 89], "featur": [42, 53, 61, 71, 81, 85, 147, 167], "typeddependencyparsermdoel": 42, "union": [42, 44], "worker": [42, 44], "turner": [42, 44], "newal": [42, 44], "sai": [42, 44, 71, 113], "thei": [42, 44, 86, 88, 98, 127, 142, 154, 164], "disappoint": [42, 44], "talk": [42, 44], "stricken": [42, 44], "parent": [42, 44], "firm": [42, 44], "feder": [42, 44], "mogul": [42, 44], "col": [42, 44, 66, 75, 84, 87, 116, 120, 139, 163], "dependency_pars": [43, 69], "typed_dependency_pars": [43, 69], "typeddependencypars": [44, 68], "Its": 44, "conll2009": 44, "typeddependencyparsermodel": [44, 68], "beforehand": 44, "2009": 44, "setconll2009": 44, "dependency_typ": [44, 68], "train_smal": 44, "txt": [44, 53, 61, 62, 74, 75, 79, 80, 90, 93, 95, 102, 104, 105, 108, 113, 156, 157, 170], "descript": [44, 59, 71, 76, 104, 110, 135], "typdep": [44, 69], "dependency_typed_conllu": [44, 68], "amod": 44, "flat": [44, 68, 121], "nsubj": [44, 68, 121, 154], "parataxi": 44, "trainopt": 44, "trainparamet": 44, "traindependencypip": 44, "conllformat": 44, "documentnorm": 45, "raw": [45, 98, 110, 113, 163, 165], "scrape": 45, "xml": 45, "remov": [45, 57, 58, 88, 97, 111, 119, 120, 121], "dirti": [45, 88], "regex": [45, 66, 69, 76, 79, 88, 102, 104, 105, 111, 113], "appli": [45, 66, 68, 87, 92, 101, 102, 104, 116, 120, 139, 143, 153], "want": [45, 66, 165], "polici": 45, "lower": [45, 46, 71, 102, 117], "action": 45, "perform": [45, 46, 51, 52, 54, 57, 58, 60, 62, 63, 64, 65, 86, 97, 98, 104], "clean": [45, 88, 101, 128, 165], "replac": [45, 51, 56, 73, 74, 93, 104, 105, 164], "lowercas": [45, 88, 111, 117], "convert": [45, 50, 59, 62, 76, 78, 81, 84, 88, 101, 111, 112, 116, 117, 120, 121, 147, 160, 167], "pretty_al": 45, "utf": 45, "cleanuppattern": [45, 88], "normalizeddocu": 45, "setact": 45, "setpattern": [45, 111], "setreplac": 45, "setpolici": 45, "setlowercas": [45, 88, 117, 128], "div": 45, "theworldsgreatest": 45, "right": [45, 47, 48], "hide": 45, "small": [45, 46, 52, 53, 61, 74, 90, 125, 156, 168], "wide": [45, 47, 48, 51, 52, 63, 64], "toptext": 45, "style": [45, 73, 101], "font": 45, "famili": 45, "sego": 45, "ui": 45, "arial": 45, "san": [45, 71], "serif": 45, "THE": 45, "world": [45, 108, 147, 160], "largest": [45, 71, 98], "develop": [45, 71, 100, 144], "site": [45, 71], "h1": 45, "300": 45, "160": 45, "lorem": [45, 75, 80], "ipsum": [45, 75, 80], "simpli": [45, 165], "print": 45, "typeset": 45, "industri": 45, "been": [45, 98, 112, 128], "standard": [45, 56, 76, 78, 104, 105, 113], "sinc": [45, 71, 98, 164, 165, 169], "1500": 45, "unknown": [45, 73], "printer": 45, "took": 45, "gallei": 45, "scrambl": 45, "specimen": 45, "surviv": 45, "five": [45, 87], "centuri": 45, "leap": 45, "electron": 45, "remain": [45, 46, 52, 71], "essenti": [45, 98], "unchang": 45, "popularis": 45, "1960": 45, "releas": [45, 46, 51, 57, 58, 63, 64, 101, 140], "letraset": 45, "passag": 45, "recent": [45, 47, 48, 51, 57, 58, 71], "desktop": 45, "publish": [45, 57, 58], "softwar": 45, "aldu": 45, "pagemak": 45, "setencod": 45, "lite": 46, "supervis": [46, 54, 60, 71, 98], "represent": [46, 47, 48, 52, 53, 54, 61, 62, 63, 64, 65, 84, 101, 126, 138], "googl": [46, 47, 48, 51, 53, 54, 57, 58, 60, 61, 71, 101, 154], "research": [46, 47, 48, 51, 53, 61, 100, 101], "toyota": 46, "technolog": [46, 71], "institut": 46, "chicago": 46, "These": [46, 57, 58, 65, 71, 85, 98, 150, 162], "offici": [46, 71, 84, 85, 86, 125, 139, 150, 161], "tf": [46, 60], "wrapper": [46, 143], "port": 46, "albert_base_uncas": [46, 49], "albert_bas": 46, "768": [46, 47, 48, 51, 52, 56, 57, 58, 63, 64, 65], "emb": 46, "dim": 46, "12m": 46, "albert_large_uncas": 46, "albert_larg": 46, "1024": [46, 54, 56, 65], "24": [46, 65, 75, 80, 84, 102, 125, 139, 150, 163], "16": [46, 65, 87, 156, 163], "18m": 46, "albert_xlarge_uncas": 46, "albert_xlarg": 46, "2048": 46, "32": [46, 54, 96, 163, 169], "60m": 46, "albert_xxlarge_uncas": 46, "albert_xxlarg": 46, "235m": 46, "sentencepiec": [46, 51, 60], "everi": [46, 47, 48, 51, 52, 56, 57, 58, 63, 64, 65, 86, 97, 100, 102, 118, 126, 127, 165], "dimens": [46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 134], "repeat": 46, "footprint": 46, "howev": [46, 59, 65, 71, 88, 163], "cost": [46, 102, 104], "similar": [46, 60, 71, 73], "architectur": [46, 47, 48, 51, 57, 73, 86, 93, 101], "through": [46, 68, 71, 121, 165], "FOR": 46, "OF": 46, "http": [46, 47, 48, 51, 53, 54, 60, 61, 65, 97, 98, 101, 161], "tfhub": [46, 54, 60], "dev": [46, 54, 60], "q": 46, "paper": [46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 71, 93, 97, 98, 100, 101, 157, 170], "abstract": [46, 47, 48, 51, 52, 54, 56, 57, 58, 60, 63, 64, 65, 71, 98, 100, 101, 137, 157, 170], "increas": [46, 62, 71, 98, 104], "natur": [46, 47, 48, 51, 52, 53, 60, 61, 65, 73, 96, 98, 101, 117, 126, 128], "often": [46, 57, 58, 65], "improv": [46, 47, 48, 51, 54, 57, 58, 63, 64, 85, 86, 98, 169], "downstream": [46, 51, 54, 56, 65, 98, 101], "some": [46, 48, 63, 71, 86, 93, 98, 127, 147, 163, 164, 168, 169], "point": [46, 47, 48, 92, 93, 118, 126, 153], "further": [46, 71, 85, 86, 116, 128], "becom": [46, 52, 71], "harder": 46, "gpu": [46, 98, 100, 101, 140], "tpu": 46, "longer": [46, 53, 56, 61, 73, 169], "time": [46, 53, 61, 63, 64, 71, 76, 86, 96, 97, 102, 115, 140, 163, 164, 168, 169], "present": [46, 54, 56, 57, 58, 60, 63, 64, 68, 93, 100], "reduct": [46, 104], "techniqu": [46, 51, 98, 101], "consumpt": [46, 60, 62], "speed": [46, 85, 100], "devlin": [46, 57, 58], "et": [46, 57, 58, 73], "al": [46, 57, 58], "2019": [46, 51, 57, 58, 63, 64], "comprehens": [46, 98], "empir": [46, 47, 48, 63, 64, 65], "evid": 46, "our": [46, 52, 53, 54, 56, 57, 58, 60, 61, 63, 64, 71, 93, 98, 101, 139, 150, 169], "propos": [46, 51, 52, 57, 58, 63, 64, 65], "lead": [46, 63, 64], "scale": [46, 52, 56, 63, 64, 98, 101], "compar": [46, 51, 52, 54, 65, 71, 93, 101, 102, 147, 160], "origin": [46, 53, 56, 57, 61, 93], "loss": [46, 52, 86, 101, 160], "focus": [46, 71], "inter": 46, "coher": [46, 98], "consist": [46, 51, 56, 90, 97, 115, 156], "As": [46, 47, 48, 52, 71], "establish": 46, "glue": [46, 47, 48, 52, 57, 58, 63, 64], "race": [46, 51, 57, 58], "benchmark": [46, 51, 52, 54, 63, 64, 101], "while": [46, 52, 62, 71, 98, 147, 160, 165], "fewer": 46, "embeddingsfinish": [46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 119], "finished_embed": [46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "setoutputasvector": [46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 119], "setcleanannot": [46, 51, 52, 54, 56, 57, 59, 60, 62, 63, 65, 119, 120, 121], "80": [46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 79, 119, 128], "1342473030090332": [46, 51], "3855540752410889": [46, 51], "9818322062492371": [46, 51], "784737348556518": [46, 51], "847029983997345": [46, 51], "047153353691101": [46, 51], "1520637571811676": [46, 51], "6245765686035156": [46, 51], "009860038757324219": [46, 51], "13450059294700623": [46, 51], "707749128341675": [46, 51], "2916892766952": [46, 51], "04192575812339783": [46, 51], "5764210224151611": [46, 51], "3196685314178467": [46, 51], "527840495109": [46, 51], "15583214163780212": [46, 51], "1614152491092682": [46, 51], "28423872590065": [46, 51], "135491415858268": [46, 51], "bertembed": [47, 50, 59, 86, 119], "dens": [47, 48], "pre": [47, 48, 51, 52, 54, 60, 101, 116, 117, 118, 120, 126, 128, 154, 164], "neural": [47, 48, 51, 86, 93, 100], "network": [47, 48, 54, 86, 93], "small_bert_l2_768": 47, "understand": [47, 48, 52, 63, 65, 71, 101, 115, 163], "introduc": [47, 48, 52, 54, 56, 101], "call": [47, 48, 52, 66, 71, 98, 146, 153, 164, 170], "stand": [47, 48], "unlik": [47, 48, 63, 71, 110], "design": [47, 48, 57, 58, 75, 100, 147, 160], "jointli": [47, 48], "condit": [47, 48, 98, 101], "both": [47, 48, 54, 60, 68, 164, 165], "left": [47, 48], "just": [47, 48, 52, 57, 81, 86], "rang": [47, 48, 51, 52, 63, 64], "infer": [47, 48, 52, 65], "without": [47, 48, 63, 64, 71, 98, 115], "substanti": [47, 48], "modif": [47, 48], "conceptu": [47, 48], "simpl": [47, 48, 98, 165], "power": [47, 48, 101], "obtain": [47, 48, 60], "eleven": [47, 48], "push": [47, 48], "score": [47, 48, 63, 64, 71, 73, 85, 86, 95, 96, 97, 98], "absolut": [47, 48], "multinli": [47, 48], "86": [47, 48, 51], "v1": [47, 48], "f1": [47, 48, 63, 64, 86, 98], "93": [47, 48], "83": [47, 48, 51, 156, 157, 170], "small_bert_l2_128": 47, "3497989177703857": 47, "480538547039032": 47, "3238905668258667": 47, "612930893898010": 47, "1357314586639404": 47, "32984697818756104": 47, "6032363176345825": 47, "6791689395904": 47, "8244884014129639": 47, "27088963985443115": 47, "059438943862915": 47, "9817547798156": 47, "1648050546646118": 47, "4725411534309387": 47, "5938255786895752": 47, "5780693292617": 47, "9125322699546814": 47, "4563939869403839": 47, "3975459933280945": 47, "81611204147338": 47, "sentence_bert_embed": 48, "sent_small_bert_l2_768": 48, "islong": 48, "long": [48, 56, 65], "sent_small_bert_l2_128": 48, "appl": [48, 58, 64], "orang": [48, 58, 64], "8951074481010437": [48, 58, 64], "13753940165042877": [48, 58, 64], "3108254075050354": [48, 58, 64], "65693199634552": [48, 58, 64], "6180210709571838": [48, 58, 64], "12179657071828842": [48, 58, 64], "191165953874588": [48, 58, 64], "4497021436691": [48, 58, 64], "822715163230896": [48, 58, 64], "7568016648292542": [48, 58, 64], "1165061742067337": [48, 58, 64], "59048593044281": [48, 58, 64], "setislong": 48, "camembertembed": 49, "scala": [49, 73, 129, 130, 136, 142, 146], "implement": [49, 53, 61, 63, 93, 102, 122, 123, 129, 130, 136, 142, 146], "subclass": [49, 130, 142, 146], "param": [49, 85, 130, 131, 134, 145, 146], "mix": [49, 54, 130, 146], "ins": [49, 130, 146], "uid": [49, 130, 146], "camembert_bas": 49, "fr": [49, 73], "chunkembed": [50, 119], "util": [50, 85, 92, 93, 105, 127, 132, 133, 135, 137, 140, 141, 145, 149], "wordembed": [50, 59, 62, 86, 119, 140], "etc": [50, 119, 128, 160], "chunker": [50, 69, 140], "ngramgener": [50, 81], "nerconvert": [50, 84, 85, 86, 147, 160], "poolingstrategi": [50, 59], "aggreg": [50, 59], "sum": [50, 54, 59], "skipoov": 50, "discard": 50, "oov": 50, "ngram": [50, 81, 98, 101], "setn": [50, 81], "wordembeddingsmodel": [50, 59, 62, 68, 85, 86, 87, 119], "setpoolingstrategi": [50, 59], "55661": 50, "42829502": 50, "86661": 50, "409785": 50, "06316501": 50, "120775": 50, "0732005": 50, "40674996": 50, "22938299": 50, "50597": 50, "288195": 50, "555655": 50, "465145": 50, "140118": 50, "17417": 50, "095253006": 50, "0530925": 50, "218465": 50, "714395": 50, "79860497": 50, "0129999": 50, "139705": 50, "177955": 50, "1887775": 50, "45545": 50, "20030999": 50, "461557": 50, "07891501": 50, "strategi": [50, 59, 79, 92, 102], "setskipoov": 50, "debertaembed": 51, "decod": [51, 56, 98, 100, 101], "enhanc": [51, 97], "disentangl": 51, "attent": [51, 56], "pengcheng": 51, "xiaodong": 51, "liu": [51, 57, 58], "jianfeng": 51, "gao": 51, "weizhu": 51, "chen": [51, 57, 58], "2018": [51, 57, 58], "facebook": [51, 63, 64], "mask": [51, 63, 64, 65, 111], "half": [51, 71], "deberta_v3_bas": 51, "microsoft": [51, 100], "www": 51, "blog": 51, "surpass": 51, "human": [51, 71], "superglu": 51, "progress": [51, 93, 111], "significantli": [51, 54, 57, 58, 63, 64, 71], "novel": [51, 65, 71], "mechan": [51, 56], "its": [51, 52, 56, 65, 71, 90, 95, 100, 107, 147, 156], "posit": [51, 52, 63, 64, 65, 71, 95, 96, 97, 111, 128, 147, 160], "respect": [51, 62, 85, 86, 156], "weight": [51, 54, 71, 85, 102], "among": 51, "matric": 51, "rel": [51, 63, 76, 78, 85, 102, 163], "second": [51, 54, 79, 92, 107, 111, 164], "predict": [51, 86, 98, 101, 147, 160], "effici": [51, 53, 60, 61, 100, 163], "achiev": [51, 56, 57, 58, 63, 64, 65, 86, 98, 100, 101, 125, 168], "mnli": 51, "9": [51, 63, 64, 81, 163, 168, 169], "90": 51, "vs": 51, "91": 51, "88": 51, "made": [51, 60, 160], "publicli": [51, 63, 64], "distilbertembed": 52, "fast": [52, 97, 100, 125, 168], "cheap": 52, "distil": 52, "40": [52, 87, 100], "less": [52, 73, 81, 85, 96, 104], "uncas": 52, "60": [52, 92], "preserv": [52, 111, 128], "over": [52, 63, 64, 65, 104, 113, 139, 147, 160], "95": 52, "measur": [52, 57, 58, 147], "distilbert_base_cas": 52, "doesn": [52, 57], "t": [52, 57, 74, 88, 93, 95, 113, 116, 120], "token_type_id": [52, 57], "don": [52, 57, 88], "indic": [52, 57, 111], "belong": [52, 57], "separ": [52, 57, 79, 81, 92, 93, 104, 113, 115, 120, 139, 153, 162], "sep_token": [52, 57], "sep": 52, "position_id": 52, "ad": [52, 54, 102], "necessari": [52, 160, 167], "though": [52, 71], "know": [52, 100, 127], "smaller": [52, 53, 61], "cheaper": 52, "lighter": 52, "transfer": [52, 60, 63, 64, 98, 101], "preval": 52, "oper": [52, 56, 102, 110, 163], "edg": [52, 68], "constrain": 52, "budget": 52, "purpos": [52, 93], "larger": [52, 57, 58, 98, 100, 101], "counterpart": 52, "most": [52, 56, 71, 86, 98, 100, 101], "prior": [52, 56, 102], "investig": [52, 60], "leverag": [52, 147, 160], "phase": 52, "reduc": [52, 104, 105, 128], "retain": 52, "97": [52, 76, 78, 115], "capabl": [52, 65, 98], "being": [52, 86, 100, 101], "induct": 52, "bias": 52, "tripl": [52, 68], "combin": [52, 56, 62, 71, 101, 102, 104], "cosin": 52, "distanc": [52, 102, 104, 105], "demonstr": [52, 56, 71, 98, 100], "devic": 52, "proof": 52, "concept": [52, 165], "experi": [52, 65, 147, 161], "studi": [52, 57, 58, 101], "1127224713563919": 52, "1982710212469101": 52, "5360898375511169": 52, "272536993026733": 52, "35534414649009705": 52, "13215228915214539": 52, "40981462597846985": 52, "14036104083061": 52, "328085333108902": 52, "06269335001707077": 52, "017595693469047546": 52, "024373905733": 52, "15617232024669647": 52, "2967822253704071": 52, "22324979305267334": 52, "04568954557180": 52, "45411425828933716": 52, "01173491682857275": 52, "190129816532135": 52, "1178255230188369": 52, "doc2vecapproach": 53, "word2vec": [53, 55, 69], "corpu": [53, 54, 61, 71, 74, 90, 101, 102, 105, 156, 170], "algorithm": [53, 61, 71, 85, 97, 102, 104, 105], "construct": [53, 61, 113, 150, 167], "vocabulari": [53, 61, 98, 101, 102], "skip": [53, 61, 68, 102], "gram": [53, 61, 71, 81, 98, 101], "hierarch": [53, 61], "variabl": [53, 61], "doc2vecmodel": 53, "vectors": [53, 61], "windows": [53, 61, 71], "window": [53, 56, 61, 71, 86, 102], "numpartit": [53, 61], "partit": [53, 61, 153], "mincount": [53, 61, 102], "must": [53, 61, 74, 75, 79, 80, 95, 97, 104, 117, 139, 140, 147, 153], "appear": [53, 61, 102], "ani": [53, 60, 61, 66, 71, 86, 98, 101, 119, 120, 161, 164, 165, 170], "divid": [53, 61], "1000": [53, 61, 68, 85], "stepsiz": [53, 61], "step": [53, 61, 147, 160, 164], "optim": [53, 57, 58, 61, 86, 93], "025": [53, 61], "maxit": [53, 61], "estim": [53, 61, 122, 129, 136, 146, 164], "space": [53, 61, 62, 81, 128], "distribut": [53, 61], "composition": [53, 61], "sherlockholm": [53, 61, 102, 170], "setvectors": [53, 61], "setwindows": [53, 61, 71], "setsteps": [53, 61], "initi": [53, 61, 102, 111, 127, 140, 153, 154, 156, 157, 160], "setnumpartit": [53, 61], "setmaxit": [53, 61], "numiter": [53, 61], "equal": [53, 61], "setse": [53, 61], "setmincount": [53, 61, 102], "doc2vec_gigaword_300": 53, "06222493574023247": [53, 61], "011579325422644615": [53, 61], "009919632226228714": [53, 61], "109361454844": [53, 61], "doc2vec_wiki": 53, "elmoembed": 54, "elmo": 54, "billion": [54, 98], "veri": [54, 63, 64, 65, 98, 100, 101, 125, 163, 165, 168, 169], "computation": [54, 57, 58, 65, 98, 100, 101], "expens": [54, 57, 58, 65, 95, 98, 100, 101, 104], "lookup": [54, 62, 65, 75, 104, 105, 137], "acceler": [54, 65, 98, 100, 101, 140], "setpoolinglay": 54, "word_emb": 54, "shape": 54, "batch_siz": 54, "max_length": 54, "lstm_outputs1": 54, "lstm": [54, 86], "lstm_outputs2": 54, "trainabl": 54, "tensor": 54, "poolinglay": 54, "contextu": [54, 102], "complex": [54, 60, 71, 104, 105], "characterist": 54, "syntax": 54, "semant": [54, 60, 115], "vari": 54, "across": [54, 98], "linguist": 54, "polysemi": 54, "intern": [54, 113, 131, 134, 140], "bilm": 54, "exist": [54, 102, 119, 121, 147], "six": [54, 104, 105], "textual": 54, "entail": 54, "expos": 54, "crucial": 54, "semi": 54, "signal": 54, "662458181381226e": 54, "2541114091873169": 54, "6275503039360046": 54, "5787073969841": 54, "19154725968837738": 54, "22998669743537903": 54, "2894386649131775": 54, "21524395048618": 54, "10400570929050446": 54, "12288510054349899": 54, "07056470215320587": 54, "246389418840": 54, "49932169914245605": 54, "12706467509269714": 54, "30969417095184326": 54, "2643227577209": 54, "8871506452560425": 54, "20039963722229004": 54, "0601330995559692": 54, "0348707810044": 54, "albert_embed": [55, 69], "bert_embed": [55, 69], "bert_sentence_embed": [55, 69], "camambert_embed": [55, 69], "chunk_embed": [55, 69], "deberta_embed": [55, 69], "distil_bert_embed": [55, 69], "doc2vec": [55, 69], "elmo_embed": [55, 69], "longformer_embed": [55, 69], "roberta_embed": [55, 69], "roberta_sentence_embed": [55, 69], "universal_sentence_encod": [55, 69], "xlm_roberta_embed": [55, 69], "xlm_roberta_sentence_embed": [55, 69], "xlnet_embed": [55, 69], "longformerembed": 56, "iz": 56, "beltagi": 56, "matthew": 56, "arman": 56, "cohan": 56, "checkpoint": 56, "mlm": 56, "096": 56, "longformer_base_4096": 56, "unabl": 56, "quadrat": 56, "linearli": 56, "easi": 56, "thousand": 56, "drop": [56, 107], "motiv": 56, "global": 56, "evalu": [56, 63, 64, 86, 131, 147], "text8": 56, "enwik8": 56, "contrast": [56, 75, 101], "finetun": [56, 65], "varieti": [56, 63, 64, 169], "outperform": [56, 60, 63, 64, 65, 71, 98], "wikihop": 56, "triviaqa": 56, "final": [56, 57, 58, 63, 64, 73, 86, 96, 102, 164], "led": [56, 57, 58, 71], "effect": [56, 92, 101], "arxiv": 56, "summar": [56, 71, 98, 100, 101], "found": [56, 62, 71, 104, 110, 117, 167], "18792399764060974": [56, 57], "14591649174690247": [56, 57], "20547787845134735": [56, 57], "1468472778797": [56, 57], "22845706343650818": [56, 57], "18073144555091858": [56, 57], "09725798666477203": [56, 57], "0417917296290": [56, 57], "07037967443466187": [56, 57], "14801117777824402": [56, 57], "03603338822722435": [56, 57], "17893412709": [56, 57], "08734266459941864": [56, 57], "2486150562763214": [56, 57], "009067727252840996": [56, 57], "24408400058": [56, 57], "22409197688102722": [56, 57], "4312366545200348": [56, 57], "1401449590921402": [56, 57], "356410235166549": [56, 57], "robertaembed": [57, 63], "robustli": [57, 58], "approach": [57, 58, 65, 71, 83, 85, 86, 93, 95, 98, 101, 102, 104, 105, 129, 167], "yinhan": [57, 58], "myle": [57, 58, 63, 64], "ott": [57, 58, 63, 64], "naman": [57, 58, 63, 64], "goyal": [57, 58, 63, 64], "jingfei": [57, 58], "du": [57, 58, 73], "mandar": [57, 58], "joshi": [57, 58], "danqi": [57, 58], "omer": [57, 58], "levi": [57, 58], "mike": [57, 58], "lewi": [57, 58], "luke": [57, 58, 63, 64], "zettlemoy": [57, 58, 63, 64], "veselin": [57, 58, 63, 64], "stoyanov": [57, 58, 63, 64], "hyperparamet": [57, 58], "next": [57, 58, 71, 76, 78, 98, 101], "mini": [57, 58], "roberta_bas": 57, "bpe": 57, "gpt": [57, 98], "scheme": 57, "signific": [57, 58, 63, 64, 71, 74], "gain": [57, 58, 63, 64], "care": [57, 58, 113], "comparison": [57, 58, 60, 107], "choic": [57, 58], "impact": [57, 58], "replic": [57, 58], "carefulli": [57, 58], "undertrain": [57, 58], "exce": [57, 58], "highlight": [57, 58], "previous": [57, 58, 71], "overlook": [57, 58], "rais": [57, 58, 71, 81, 86, 147], "report": [57, 58, 60, 147, 160], "robertasentenceembed": 58, "sent_roberta_bas": 58, "embeddingssent": 59, "22093398869037628": 59, "25130119919776917": 59, "41810303926467896": 59, "380883991718": 59, "high": [60, 63, 64, 100], "dimension": 60, "cluster": [60, 140], "tfhub_us": 60, "loadsp": 60, "op": 60, "lingual": [60, 63, 64, 71, 73, 100], "target": [60, 100, 113, 117, 125, 150], "accur": [60, 97, 104], "divers": [60, 98, 101, 161], "trade": [60, 63, 64], "baselin": [60, 98], "do": [60, 71, 84, 107, 113, 116, 125, 160, 164, 168], "tend": 60, "With": [60, 65, 71], "observ": 60, "surprisingli": 60, "minim": [60, 100], "amount": [60, 71, 80, 98, 115, 125, 168], "encourag": 60, "weat": 60, "detect": [60, 72, 73, 91, 92, 93], "bia": 60, "freeli": 60, "04616805538535118": 60, "022307956591248512": 60, "044395286589860916": 60, "0016493503": 60, "setloadsp": 60, "word2vecapproach": 61, "word2vecmodel": 61, "word2vec_gigaword_300": 61, "word2vec_wiki": 61, "custom": [62, 85, 86, 92, 93, 113, 147], "dictionari": [62, 71, 74, 79, 85, 88, 95, 104, 105, 147], "setstoragepath": [62, 75, 137], "line": [62, 66, 75, 80, 93, 95, 150, 156], "delimit": [62, 66, 68, 74, 79, 81, 85, 88, 95, 111, 153, 156], "39658191506190343": 62, "630968081620067": 62, "5393722253731201": 62, "8428180123359783": 62, "were": [62, 86, 147, 160], "7535235923631415": 62, "9699218875629833": 62, "10397182122983872": 62, "11833962569383116": 62, "stress": 62, "0492683418305907": 62, "9415954572751959": 62, "47624463167525755": 62, "16790967216778263": 62, "induc": 62, "1535748762292387": 62, "33498936903209897": 62, "9235178224122094": 62, "1158772920395934": 62, "zero": [62, 98], "statist": [62, 71, 86], "withcoveragecolumn": 62, "overallcoverag": 62, "writebuffers": 62, "dump": 62, "disk": [62, 164, 165], "storag": [62, 66, 75, 133, 140], "write": [62, 104, 105, 165], "10000": 62, "readcaches": 62, "cach": [62, 134], "higher": [62, 71, 97, 98, 101], "random_embeddings_dim4": 62, "abov": [62, 68, 156], "setstorageref": [62, 137], "glove_4d": 62, "setdimens": [62, 134], "patient": 62, "diagnos": 62, "diabet": 62, "9439099431037903": 62, "4707513153553009": 62, "806300163269043": 62, "16176554560661316": 62, "7966810464859009": 62, "5551124811172485": 62, "8861005902290344": 62, "28284206986427307": 62, "025029370561242104": 62, "35177749395370483": 62, "052506182342767715": 62, "1887107789516449": 62, "08617766946554184": 62, "8399239182472229": 62, "5395117998123169": 62, "7864698767662048": 62, "6599600911140442": 62, "16109347343444824": 62, "6041093468666077": 62, "8913561105728149": 62, "5955275893211365": 62, "01899011991918087": 62, "4397728443145752": 62, "8911281824111938": 62, "9840458631515503": 62, "7599489092826843": 62, "9417727589607239": 62, "8624503016471863": 62, "setwritebuffers": 62, "setreadcaches": 62, "glove_100d": [62, 86], "There": [62, 66, 68, 110, 162, 164, 165, 170], "conveni": 62, "coverag": [62, 132], "add": [62, 76, 78, 92, 98, 101, 102, 113, 164], "stat": 62, "field": [62, 66, 80], "overal": [62, 65], "whole": [62, 137, 150], "consid": [62, 68, 71, 102, 104, 105, 107, 110], "570580005645752": 62, "44183000922203064": 62, "7010200023651123": 62, "417129993438720": 62, "542639970779419": 62, "4147599935531616": 62, "0321999788284302": 62, "4024400115013122": 62, "2708599865436554": 62, "04400600120425224": 62, "020260000601410866": 62, "17395000159": 62, "6191999912261963": 62, "14650000631809235": 62, "08592499792575836": 62, "2629800140857": 62, "3397899866104126": 62, "20940999686717987": 62, "46347999572753906": 62, "6479200124740": 62, "databas": [62, 66, 75, 137], "embeddings_col": 62, "datafram": [62, 90, 115, 125, 134, 135, 139, 146, 147, 150, 153, 154, 156, 157, 158, 160, 164, 168, 170], "coverageresult": [62, 132], "coverateresult": 62, "wordsoverallcoverag": 62, "resultdf": 62, "percentag": [62, 102, 115], "output_col": 62, "wordscoverag": 62, "cov_embed": 62, "loadstorag": [62, 66, 75, 137], "storage_ref": [62, 66, 75, 137], "xlmrobertaembed": 63, "unsupervis": [63, 64, 65, 71, 98], "cross": [63, 64, 87], "alexi": [63, 64], "conneau": [63, 64], "kartikai": [63, 64], "khandelw": [63, 64], "vishrav": [63, 64], "chaudhari": [63, 64], "guillaum": [63, 64], "wenzek": [63, 64], "francisco": [63, 64, 71], "guzman": 63, "edouard": [63, 64], "grave": [63, 64], "5tb": [63, 64], "filter": [63, 64, 71, 84, 85, 98, 100, 101, 107, 139], "commoncrawl": [63, 64], "xlm_roberta_bas": 63, "xx": [63, 64, 73, 100], "multilingu": [63, 64], "doe": [63, 71, 84, 125, 127, 165, 168, 169], "abl": [63, 101, 147, 163], "determin": 63, "correct": [63, 102, 104, 105, 115], "hundr": [63, 64], "terabyt": [63, 64], "dub": [63, 64], "r": [63, 64, 71], "mbert": [63, 64], "xnli": [63, 64], "mlqa": [63, 64], "particularli": [63, 64], "low": [63, 64, 102], "swahili": [63, 64], "urdu": [63, 64], "previou": [63, 64, 98, 164], "factor": [63, 64, 65, 101, 102], "capac": [63, 64, 98], "dilut": [63, 64], "sacrif": [63, 64], "ri": [63, 64], "competit": [63, 64, 71], "strong": [63, 64], "monolingu": [63, 64], "05969233065843582": 63, "030789051204919815": 63, "04443822056055069": 63, "09564960747": 63, "038839809596538544": 63, "011712731793522835": 63, "019954433664679527": 63, "0667808502": 63, "03952755779027939": 63, "03455188870429993": 63, "019103847444057465": 63, "04311436787": 63, "09579929709434509": 63, "02494969218969345": 63, "014753809198737144": 63, "10259044915": 63, "004710011184215546": 63, "022148698568344116": 63, "011723337695002556": 63, "013356896": 63, "xlmrobertasentenceembed": 64, "guzm\u00e3": 64, "sent_xlm_roberta_bas": 64, "xlnetembed": 65, "autoregress": 65, "permut": 65, "addition": [65, 86, 90, 118, 126, 150], "emploi": 65, "xl": 65, "backbon": 65, "exhibit": 65, "excel": 65, "involv": [65, 93], "sota": 65, "variou": [65, 158], "rank": [65, 102], "xlnet_large_cas": 65, "xlnet_base_cas": 65, "full": [65, 164], "zihangdai": 65, "denois": 65, "autoencod": 65, "corrupt": 65, "neglect": 65, "suffer": 65, "discrep": 65, "pro": 65, "con": 65, "enabl": [65, 66, 86, 104, 134, 140], "maxim": [65, 102], "expect": [65, 113, 139], "likelihood": 65, "overcom": 65, "formul": 65, "furthermor": 65, "integr": [65, 71, 100, 147, 160, 162], "idea": 65, "margin": 65, "6287205219268799": 65, "4865287244319916": 65, "186111718416214": 65, "234187275171279": 65, "1967450380325317": 65, "2746637463569641": 65, "9481253027915955": 65, "3431355059146881": 65, "0777631998062134": 65, "092679977416992": 65, "5331977605819702": 65, "11190271377563": 65, "8349916934967041": 65, "45627787709236145": 65, "7890847325325012": 65, "028069257736": 65, "134845569729805": 65, "11672890186309814": 65, "4945235550403595": 65, "66587203741073": 65, "entityrul": 66, "entityrulerapproach": 66, "exact": [66, 75, 80], "definit": [66, 153], "json": [66, 147], "jsonl": 66, "setpatternsresourc": 66, "might": [66, 86, 115, 169], "setenablepatternregex": 66, "rule": [66, 79, 95, 110, 113, 138], "person": [66, 154], "w": [66, 79, 85, 88, 110, 113], "locat": [66, 92, 116, 140, 150, 164], "winterfel": 66, "j": 66, "jon": 66, "snow": [66, 87, 102], "stark": 66, "eddard": 66, "patternsresourc": 66, "enablepatternregex": 66, "usestorag": 66, "rocksdb": 66, "common": [66, 96, 108, 117, 140, 167], "lord": 66, "29": [66, 87, 156], "38": 66, "sentencematch": 66, "interpret": [66, 96, 137], "setusestorag": 66, "setsentencematch": 66, "entityrulermodel": 66, "entity_pattern": 66, "entity_rul": [67, 69], "graphextract": [68, 121], "graph": [68, 86, 100, 121], "take": [68, 80, 104, 107, 113, 127, 131, 134, 145, 153, 163, 164, 168, 169], "nerdlmodel": [68, 84, 85, 86, 87, 147, 160], "store": [68, 131, 134, 145, 150, 161], "node": 68, "those": [68, 87, 164, 165], "relev": [68, 71], "alreadi": [68, 71, 85, 86, 87, 112, 113, 125, 150, 168], "taken": 68, "implicitli": 68, "setmergeent": 68, "automat": [68, 71, 100, 104, 163, 164], "setdependencyparsermodel": 68, "settypeddependencyparsermodel": 68, "setrelationshiptyp": 68, "prefer": [68, 121], "public": [68, 151, 164], "relationshiptyp": 68, "pair": [68, 147], "entitytyp": 68, "explodeent": 68, "roottoken": 68, "travers": 68, "along": 68, "maxsentences": 68, "minsentences": 68, "below": [68, 169], "mergeent": 68, "merg": [68, 75, 80], "neighbor": 68, "includeedg": 68, "symbol": [68, 102, 115], "posmodel": 68, "coordin": [68, 92], "remoteloc": 68, "graphfinish": [68, 121], "rdf": [68, 121], "nertagg": [68, 85, 86, 87], "morn": [68, 121], "flight": [68, 121], "denver": [68, 121], "18": [68, 76, 78, 81, 84, 87, 125, 139, 150, 163], "path1": 68, "mergeentitiesiobformat": 68, "setentitytyp": 68, "setexplodeent": 68, "setroottoken": 68, "setmaxsentences": 68, "setminsentences": 68, "setmergeentitiesiobformat": 68, "iob": [68, 84, 85, 86], "iob2": [68, 84], "setincludeedg": 68, "setdelimit": [68, 81], "setposmodel": 68, "classifier_dl": [69, 140], "coref": [69, 140], "er": [69, 140], "keyword_extract": [69, 140], "yake_keyword_extract": [69, 70], "ld_dl": [69, 140], "language_detector_dl": [69, 72], "matcher": [69, 140], "big_text_match": [69, 77], "date_match": [69, 77], "multi_date_match": [69, 77], "regex_match": [69, 77], "text_match": [69, 77], "ner_approach": [69, 82], "ner_convert": [69, 82], "ner_crf": [69, 82], "ner_dl": [69, 82], "ner_overwrit": [69, 82], "sentence_detector": [69, 91], "sentence_detector_dl": [69, 91, 100], "sentiment_detector": [69, 94], "sentiment_dl": [69, 94], "vivekn_senti": [69, 94], "seq2seq": [69, 140], "gpt2_transform": [69, 99], "marian_transform": [69, 99], "t5_transform": [69, 99], "spell_check": [69, 140], "context_spell_check": [69, 103], "norvig_sweet": [69, 103], "symmetric_delet": [69, 103], "chunk_token": [69, 109], "recursive_token": [69, 109], "regex_token": [69, 109], "token2_chunk": [69, 109], "ws": [69, 140], "word_segment": [69, 114], "document_norm": [69, 140], "graph_extract": [69, 140], "lemmat": [69, 95, 107, 127, 128, 140], "n_gram_gener": [69, 140], "stemmer": [69, 107, 140], "stop_words_clean": [69, 140], "crf": [69, 85, 86], "sbd": 69, "pragmat": [69, 95], "sda": [69, 95, 97], "vivekn": [69, 97], "spell": [69, 102, 103, 104, 105, 125, 128, 167, 168, 169], "norvig": [69, 104], "symmetr": [69, 104, 105], "ld": [69, 73], "yake": [69, 71], "yakekeywordextract": 71, "independ": [71, 104, 105, 110], "domain": [71, 98], "individu": [71, 102], "organ": [71, 100], "grow": 71, "autom": 71, "adequ": 71, "manner": 71, "emerg": [71, 101], "tool": 71, "system": [71, 98], "nor": 71, "thesauri": 71, "neither": 71, "corpora": [71, 75], "upon": 71, "thu": 71, "written": [71, 100], "benefici": 71, "plethora": 71, "situat": [71, 93], "access": 71, "restrict": 71, "therefor": [71, 168], "sent": 71, "boundari": [71, 92, 93, 97, 113], "detector": [71, 76, 95], "section": [71, 118, 126, 160, 162, 168], "tweakabl": 71, "greater": 71, "upper": 71, "bound": [71, 92, 93, 97], "minngram": 71, "maxngram": 71, "co": 71, "occurr": 71, "nkeyword": 71, "stopword": [71, 87, 107], "english": [71, 96, 104, 107, 115], "stop": [71, 85, 107, 152], "campo": 71, "mangaravit": 71, "pasquali": 71, "jatowt": 71, "jorg": 71, "nune": 71, "2020": [71, 76, 78, 93], "scienc": [71, 161], "journal": 71, "elsevi": 71, "vol": 71, "509": 71, "pp": 71, "257": 71, "289": 71, "collect": [71, 147, 160], "turn": [71, 128, 164], "come": 71, "term": 71, "fly": 71, "demand": 71, "abil": [71, 98], "within": [71, 90, 97, 98, 113, 117], "resort": 71, "alwai": [71, 101], "altern": [71, 95, 102, 104, 105, 125], "solut": 71, "articl": [71, 102], "rest": [71, 84], "merit": 71, "ten": 71, "experiment": 71, "carri": 71, "twenti": 71, "setcontextchar": [71, 113], "setminngram": 71, "setnkeyword": 71, "acquir": 71, "kaggl": 71, "platform": [71, 147, 162], "host": 71, "transact": 71, "somewhat": 71, "vagu": 71, "cloud": 71, "confer": 71, "week": [71, 76, 78, 108], "announc": [71, 87], "earli": 71, "tomorrow": [71, 76, 78], "reach": [71, 98], "phone": 71, "founder": 71, "ceo": 71, "anthoni": 71, "goldbloom": 71, "declin": 71, "deni": 71, "acquisit": 71, "happen": 71, "rumor": 71, "million": [71, 87, 98], "scientist": 71, "ben": 71, "hamner": 71, "2010": 71, "servic": [71, 100], "got": 71, "even": [71, 101], "few": [71, 113, 156, 170], "competitor": 71, "drivendata": 71, "topcod": 71, "hackerrank": 71, "stai": 71, "ahead": 71, "nich": 71, "de": [71, 73, 100], "facto": 71, "home": [71, 140], "bui": [71, 154], "commun": 71, "mindshar": 71, "too": [71, 95, 163], "plenti": 71, "bit": [71, 93, 169], "histori": [71, 93, 102], "earlier": 71, "month": [71, 76, 78, 156, 170], "team": [71, 100, 147, 160], "000": [71, 98], "around": 71, "youtub": 71, "video": [71, 96], "That": [71, 110, 147, 160, 165], "had": 71, "keep": [71, 88, 98, 101], "did": 71, "interest": 71, "kernel": 71, "On": [71, 98, 100], "analyz": [71, 97], "share": [71, 165], "compani": [71, 100], "script": 71, "centric": 71, "job": [71, 117], "board": [71, 90, 156], "unclear": 71, "accord": [71, 102, 153], "crunchbas": 71, "pitchbook": 71, "75": 71, "launch": 71, "investor": 71, "ventur": 71, "sv": 71, "angel": 71, "levchin": 71, "naravik": 71, "chie": 71, "economist": 71, "hal": 71, "varian": 71, "khosla": 71, "yuri": 71, "milner": 71, "resulttupl": 71, "ascend": 71, "orderbi": 71, "32051516486864573": 71, "37786450577630676": 71, "39922830978423146": 71, "40224744669493756": 71, "41584827825302534": 71, "setmaxngram": 71, "setstopword": [71, 87, 107], "getstopword": 71, "loaddefaultstopword": [71, 107], "danish": [71, 107], "dutch": [71, 107], "finnish": [71, 107], "french": [71, 100, 107], "german": [71, 107, 153, 170], "hungarian": [71, 107], "italian": [71, 102, 107], "norwegian": [71, 107], "portugues": [71, 107], "russian": [71, 107], "spanish": [71, 107], "swedish": [71, 107], "turkish": [71, 107], "languagedetectordl": 73, "identif": [73, 137], "cnn": [73, 86, 93], "rnn": 73, "wikipedia": [73, 98], "tatoeba": 73, "140": 73, "wiki": 73, "languagedetector": 73, "ld_wiki_tatoeba_cnn_21": 73, "otheriws": [73, 96], "neutral": [73, 96], "thresholdlabel": [73, 96], "open": [73, 113, 117, 118, 119, 126, 128, 161], "advanc": [73, 117, 128], "program": 73, "est": [73, 100], "un": 73, "biblioth\u00e8qu": 73, "traitement": 73, "pour": 73, "le": [73, 100], "avanc\u00e9": 73, "langag": 73, "naturel": 73, "programm": 73, "ist": 73, "ein": 73, "textverarbeitungsbibliothek": 73, "f\u00fcr": 73, "fortgeschritten": 73, "nat\u00fcrlich": 73, "sprachverarbeitung": 73, "die": 73, "programmiersprachen": 73, "und": 73, "setthresholdlabel": [73, 96], "lemma": [74, 95, 125, 150, 154, 165, 168, 169], "predefin": [74, 75, 79, 80, 95], "setdictionari": [74, 95, 104, 105], "lemmatizermodel": 74, "lemmas_smal": [74, 95], "formcol": [74, 154], "lemmacol": [74, 154], "setformcol": 74, "correspend": 74, "setlemmacol": 74, "fromlemma": 74, "key_delimit": 74, "value_delimit": 74, "lemma_antbnc": 74, "bigtextmatch": [75, 80], "textmatch": [75, 80, 108], "externalresourc": [75, 80, 138], "mergeoverlap": [75, 80], "overlap": [75, 80], "tokenizermodel": [75, 113], "trie": 75, "dolor": [75, 80], "magna": [75, 80], "aliqua": [75, 80], "sit": [75, 80], "laborum": [75, 80], "hello": [75, 80, 108], "entityextractor": [75, 80, 108], "extractor": [75, 80, 108], "53": [75, 80], "59": [75, 76, 78, 80], "setent": [75, 80, 83, 108], "setmergeoverlap": [75, 80], "settoken": 75, "tokenizer_model": 75, "bigtextmatchermodel": 75, "btm": 75, "textmatchermodel": [75, 80], "searchtri": [75, 80], "tmvocab": 75, "tmedg": 75, "tmnode": 75, "datematch": 76, "datematcherutil": 76, "inputformat": 76, "outputformat": 76, "readmonthfirst": [76, 78], "defaultdaywhenmiss": [76, 78], "anchordateyear": [76, 78], "anchordatemonth": [76, 78], "anchordatedai": [76, 78], "sourcelanguag": 76, "setinputformat": 76, "setoutputformat": [76, 78], "desir": [76, 78], "yyyi": [76, 78], "mm": [76, 78], "dd": [76, 78], "Not": [76, 86, 127], "setreadmonthfirst": 76, "juli": 76, "5th": 76, "2015": 76, "07": 76, "05": 76, "setdefaultdaywhenmiss": 76, "dai": [76, 78, 102], "miss": [76, 78, 117], "setanchordateyear": [76, 78], "anchor": [76, 78], "year": [76, 78, 98, 108, 156], "2021": [76, 78], "setanchordatemonth": [76, 78], "januari": [76, 78], "setsourcelanguag": 76, "setanchordatedai": [76, 78], "multidatematch": [76, 78], "1978": [76, 78], "01": [76, 78], "28": [76, 78, 84, 125, 139, 150, 163], "1984": [76, 78], "04": [76, 78], "02": [76, 78], "1980": [76, 78], "79": [76, 78], "31st": [76, 78], "april": [76, 78], "2008": [76, 78], "fri": [76, 78], "nov": [76, 78, 156], "1997": [76, 78], "jan": [76, 78], "sun": [76, 78], "1st": [76, 78], "thursdai": [76, 78], "wednesdai": [76, 78], "todai": [76, 78], "yesterdai": [76, 78], "0600h": [76, 78], "06": [76, 78], "00": [76, 78], "hour": [76, 78], "6pm": [76, 78], "23": [76, 78, 79, 87, 90, 156, 157, 170], "1988": [76, 78], "31": [76, 78, 79, 87, 90, 156], "dateformat": [76, 78], "15": 76, "saw": 78, "him": 78, "me": 78, "visit": 78, "57": [78, 87], "65": [78, 87], "regexmatch": 79, "setexternalrul": 79, "match_first": 79, "match_al": 79, "match_complet": 79, "externalrul": 79, "ceremoni": 79, "setstrategi": 79, "71": 79, "regexmatchermodel": 79, "regardless": 80, "entityvalu": 80, "buildfromtoken": 80, "27": [80, 90, 92, 156], "48": 80, "setentityvalu": 80, "setbuildfromtoken": 80, "null": 81, "empti": [81, 117], "enablecumul": 81, "actual": [81, 116, 120, 128], "join": [81, 90, 156], "19": [81, 156], "setenablecumul": 81, "except": [81, 86, 113], "nerapproach": 83, "minepoch": [83, 85, 86], "recogn": [83, 84, 85, 86, 87], "setminepoch": [83, 85], "verbosevalu": 83, "getlabelcolumn": 83, "friendli": [84, 100], "whitelist": [84, 110], "setwhitelist": [84, 110], "outsid": 84, "prefix": [84, 110, 113, 147, 160], "continu": [84, 98, 121, 160], "org": [84, 85, 86, 87, 125, 139, 140, 150, 153, 161, 170], "14": [84, 90, 112, 125, 139, 150, 156], "ekeu": [84, 85, 86, 125, 139, 150], "26": [84, 125, 139, 150], "36": [84, 90, 125, 139, 150, 156], "baghdad": [84, 85, 86, 125, 139, 150], "37": [84, 125, 139, 150], "nercrf": 85, "nercrfapproach": [85, 86], "nercrfmodel": [85, 86], "2003": [85, 86, 153, 170], "exclud": [85, 86], "setexternalfeatur": 85, "l2": 85, "c0": 85, "decai": [85, 86], "gradient": 85, "2250000": 85, "lossep": 85, "ep": 85, "minw": 85, "includeconfid": [85, 86], "confid": [85, 86], "externalfeatur": 85, "nerdlapproach": [85, 86, 153, 170], "trainingdata": [85, 86, 93, 104, 105, 153], "readdataset": [85, 86, 90, 115, 153, 154, 156, 157, 170], "conll2003": [85, 86, 153, 170], "eng": [85, 86, 153, 170], "setl2": 85, "l2valu": 85, "setc0": 85, "c0valu": 85, "setlossep": 85, "setminw": 85, "setincludeconfid": [85, 86], "prerequisit": [85, 86, 87, 164], "nerdl": 86, "char": [86, 88, 93], "bilstm": 86, "50": [86, 87, 90, 98], "real": [86, 140, 147, 160], "rage": 86, "graphfold": 86, "usecontrib": 86, "contrib": 86, "cell": 86, "slightli": [86, 93], "evaluationlogextend": 86, "testdataset": [86, 147, 160], "includeallconfidencescor": 86, "enablememoryoptim": 86, "slow": 86, "down": [86, 164, 165], "usebestmodel": 86, "bestmodelmetr": 86, "check": [86, 92, 102, 103, 104, 105, 125, 128, 150], "micro": 86, "macro": 86, "metric": [86, 105, 147], "setgraphfold": 86, "setusecontrib": 86, "setpo": 86, "setevaluationlogextend": 86, "settestdataset": 86, "parquet": 86, "setincludeallconfidencescor": 86, "setenablememoryoptim": 86, "setusebestmodel": 86, "monitor": [86, 147, 160], "setbestmodelmetr": 86, "nermodel": 86, "neroverwrit": 87, "overwrit": [87, 147], "specifi": [87, 93, 153, 154], "setnewresult": 87, "overwritten": 87, "newresult": 87, "lab": 87, "42": [87, 90], "45": [87, 90, 156], "47": [87, 156], "55": 87, "66": 87, "ner_overwritten": 87, "cardin": 87, "stem": [88, 106, 125, 150, 168, 169], "henc": 88, "pl": 88, "slangdictionari": 88, "slang": 88, "minlength": [88, 92, 93, 111, 113], "maxlength": [88, 92, 93, 111, 113], "setcleanuppattern": 88, "d": [88, 113, 162], "punctuat": [88, 92], "alphanumer": 88, "alphabet": 88, "letter": [88, 98, 102, 156, 170], "za": 88, "z": [88, 113], "brother": 88, "dont": [88, 97], "slangmatchcas": 88, "setslangdictionari": 88, "setminlength": [88, 92, 93, 111, 113], "setmaxlength": [88, 92, 93, 111, 113], "normalizermodel": 88, "perceptronapproach": [90, 156, 170], "datasetpath": 90, "pierr": [90, 156], "vinken": [90, 156], "34": [90, 156], "md": [90, 156], "vb": [90, 153, 156, 170], "41": [90, 92, 156], "43": [90, 92, 156], "dt": [90, 156, 157, 170], "49": [90, 156], "poscol": [90, 115, 153], "niter": [90, 115], "anc": [90, 156, 170], "trainingperceptrondf": 90, "trainedpo": 90, "setposcolumn": [90, 115], "cd": [90, 153, 156], "setiter": 90, "getniter": [90, 115], "pos_anc": 90, "25": [90, 92, 156], "33": 90, "sentencedetectorparam": 92, "useabbrevi": 92, "custombound": [92, 93], "usecustomboundsonli": [92, 93], "customboundsstrategi": 92, "explodesent": [92, 93, 153, 154], "splitlength": [92, 93], "ii": 92, "abbrevi": 92, "period": 92, "geo": 92, "1026": 92, "253": 92, "553": 92, "ellipsi": 92, "quotat": 92, "mark": [92, 93, 115], "exclam": 92, "breaker": 92, "explicit": [92, 98], "pragmaticcontentformatt": 92, "setcustombound": [92, 93], "explicitli": [92, 93, 107, 139, 164], "prepend": [92, 117], "break": 92, "append": [92, 102, 164], "parallel": [92, 93, 125, 153, 168], "forcibl": [92, 93], "split": [92, 93, 108, 110, 111, 115], "99999": [92, 93, 113], "detectlist": 92, "nhow": 92, "setcustomboundsstrategi": 92, "setuseabbrevi": 92, "setdetectlist": 92, "setusecustomboundsonli": [92, 93], "setexplodesent": [92, 93], "setsplitlength": [92, 93], "sentencedetectordl": 93, "sentencedetectordlapproach": 93, "futur": [93, 101], "setmodel": 93, "sentencedetectordlmodel": [93, 100], "modelarchitectur": 93, "impossiblepenultim": 93, "imposs": [93, 115], "penultim": 93, "epochsnumb": 93, "eo": 93, "stefan": 93, "schweter": 93, "sajawel": 93, "ahm": 93, "littl": [93, 169], "cover": [93, 101, 115], "broken": 93, "moder": 93, "lack": 93, "easier": [93, 120, 166, 170], "hi": 93, "polit": 93, "successor": 93, "great": 93, "respons": 93, "heritag": 93, "bequeath": 93, "nelson": 93, "mandela": 93, "setepochsnumb": 93, "model_architectur": 93, "validation_split": 93, "epochs_numb": 93, "output_logs_path": 93, "setimpossiblepenultim": 93, "impossible_penultim": 93, "sentencedl": 93, "sentencesdl": 93, "helen": 93, "total": [93, 115], "four": [93, 112], "peopl": 93, "sentimentdetector": 95, "By": [95, 101, 107, 111, 119, 140, 147, 160], "viveknsentimentapproach": [95, 97], "cool": 95, "superb": 95, "uninspir": 95, "sentimentscor": 95, "staff": 95, "restaur": 95, "nice": [95, 147, 160], "avoid": 95, "positivemultipli": 95, "negativemultipli": 95, "incrementmultipli": 95, "decrementmultipli": 95, "reversemultipli": 95, "enablescor": 95, "entri": [95, 118, 126], "sttr": 95, "sentimentdetectormodel": 95, "sentimentdl": 96, "affect": [96, 113], "view": 96, "product": 96, "review": [96, 143], "tweet": 96, "watch": [96, 97], "sentimentdl_use_imdb": 96, "imdb": 96, "sentimentdl_use_twitt": 96, "wow": 96, "awesom": 96, "bruh": 96, "damn": 96, "wast": [96, 97], "viveknsenti": 97, "analys": 97, "inspir": [97, 104, 105, 143], "vivek": 97, "narayanan": 97, "give": 97, "transit": [97, 102], "sentimentcol": 97, "prunecorpu": 97, "unfrequ": 97, "scenario": 97, "naiv": 97, "bay": 97, "setsentimentcol": 97, "train_senti": 97, "result_senti": 97, "finish": [97, 119, 121, 124, 127, 140], "final_senti": 97, "cast": 97, "horribl": 97, "never": [97, 164], "go": [97, 164], "again": [97, 110], "anyon": 97, "protagonist": 97, "music": 97, "importantfeatureratio": 97, "unimportantfeaturestep": 97, "featurelimit": 97, "setprunecorpu": 97, "frequenc": [97, 102, 104, 105, 115], "viveknsentimentmodel": 97, "sentiment_vivekn": 97, "gpt2transform": 98, "gpt2": 98, "openai": 98, "caus": [98, 113], "goal": 98, "occur": [98, 101], "direct": 98, "10x": 98, "broad": 98, "synthet": 98, "sampl": [98, 101], "unpreced": 98, "qualiti": 98, "prime": 98, "lengthi": 98, "translat": [98, 100, 101], "far": [98, 116, 120], "suggest": 98, "benefit": 98, "suffici": 98, "minoutputlength": [98, 101], "maxoutputlength": [98, 100, 101], "dosampl": [98, 101], "greedi": [98, 101], "temperatur": [98, 101], "topk": [98, 101], "highest": [98, 101], "k": [98, 101, 119], "topp": [98, 101], "cumul": [98, 101], "kept": [98, 101], "repetitionpenalti": [98, 101], "repetit": [98, 101], "penalti": [98, 101], "norepeatngrams": [98, 101], "onc": [98, 101], "ignoretokenid": [98, 100, 101], "especi": [98, 100, 101], "multitask": 98, "learner": 98, "typic": 98, "taskspecif": 98, "webpag": [98, 161], "webtext": 98, "plu": 98, "coqa": 98, "exceed": 98, "127": 98, "shot": 98, "fashion": 98, "5b": 98, "still": [98, 147], "underfit": 98, "reflect": 98, "paragraph": 98, "promis": 98, "toward": 98, "setmaxoutputlength": [98, 100, 101], "leonardo": 98, "man": 98, "1776": 98, "came": 98, "unit": 98, "kingdom": 98, "settask": [98, 101], "setignoretokenid": [98, 100, 101], "setminoutputlength": [98, 101], "setdosampl": [98, 101], "settemperatur": [98, 101], "settopk": [98, 101], "settopp": [98, 101], "setrepetitionpenalti": [98, 101], "ctrl": [98, 101], "control": [98, 100, 101, 102], "setnorepeatngrams": [98, 101], "mariantransform": 100, "marian": 100, "free": 100, "pure": 100, "mainli": 100, "academ": 100, "notabl": 100, "edinburgh": 100, "past": 100, "adam": 100, "mickiewicz": 100, "pozna\u0144": 100, "commerci": 100, "contributor": 100, "mariannmt": 100, "engin": [100, 108], "behind": 100, "deploi": [100, 161], "opus_mt_en_fr": 100, "langid": 100, "maxinputlength": 100, "differenti": 100, "dynam": 100, "toolkit": 100, "setmaxinputlength": 100, "capit": [100, 102], "franc": 100, "quell": 100, "la": 100, "capital": 100, "devrait": 100, "savoir": 100, "fran\u00e7ai": 100, "setlangid": 100, "t5transform": 101, "t5": 101, "reconsid": 101, "unifi": 101, "hyper": 101, "t5_small": 101, "explor": 101, "rich": 101, "rise": 101, "methodolog": 101, "practic": 101, "landscap": 101, "systemat": 101, "dozen": 101, "insight": 101, "coloss": 101, "crawl": 101, "facilit": 101, "200": 101, "contextspellcheck": 102, "contextspellcheckerapproach": [102, 104, 105], "noisi": 102, "channel": 102, "candid": [102, 104, 105, 113], "contextspellcheckermodel": [102, 104, 105], "potenti": 102, "certain": 102, "error": 102, "three": [102, 112], "thing": [102, 116, 120], "surround": 102, "edit": [102, 104, 105], "subword": 102, "checker": [102, 104, 105, 167], "languagemodelclass": 102, "lm": 102, "wordmaxdist": 102, "maxcandid": 102, "casestrategi": 102, "try": [102, 116], "uppercas": 102, "errorthreshold": 102, "perplex": 102, "nlm": 102, "initialr": 102, "finalr": 102, "validationfract": 102, "datapoint": 102, "min": 102, "vocab": 102, "compoundcount": 102, "compound": 102, "classcount": 102, "special": [102, 141, 165], "tradeoff": 102, "weighteddistpath": 102, "levenshtein": [102, 104, 105], "maxwindowlen": 102, "rememb": 102, "norvigsweetingapproach": [102, 104, 105, 170], "symmetricdeleteapproach": [102, 104, 105, 170], "depth": [102, 167], "explan": [102, 167], "awar": 102, "sherlock": 102, "holm": 102, "spellcheck": [102, 104, 105], "setwordmaxdist": 102, "setepoch": 102, "setlanguagemodelclass": 102, "1650": 102, "addvocabclass": 102, "_name_": 102, "extra": [102, 104, 164], "dist": 102, "setmaxcandid": 102, "setcasestrategi": 102, "seterrorthreshold": 102, "setinitialr": 102, "setfinalr": 102, "setvalidationfract": 102, "fraction": 102, "setcompoundcount": 102, "setclasscount": 102, "settradeoff": 102, "alpha": 102, "setweighteddistpath": 102, "setmaxwindowlen": 102, "userdist": 102, "addregexclass": 102, "spellcheck_dl": 102, "gamma": 102, "influenc": 102, "decis": 102, "correctsymbol": 102, "comparelowcas": 102, "norvigsweetingmodel": [102, 104, 105], "symmetricdeletemodel": [102, 104, 105], "doc": [102, 157, 170], "cold": 102, "dreari": 102, "countri": 102, "white": 102, "smow": 102, "setweight": 102, "setgamma": 102, "getwordclass": 102, "updateregexclass": 102, "updat": 102, "updatevocabclass": 102, "setcorrectsymbol": 102, "setcomparelowcas": 102, "norvigsweet": 104, "delet": [104, 105, 164], "damerau": [104, 105], "magnitud": [104, 105], "transpos": [104, 105], "insert": [104, 105, 164], "tokenpattern": 104, "sensit": [104, 107, 113], "doublevari": 104, "search": 104, "shortcircuit": 104, "mode": [104, 118, 126, 147], "frequencyprior": 104, "ham": 104, "intersect": 104, "prioriti": [104, 113], "wordsizeignor": 104, "dupslimit": [104, 105], "duplic": 104, "reductlimit": 104, "attempt": 104, "vowelswaplimit": 104, "vowel": 104, "swap": 104, "symspel": [104, 105], "gummi": [104, 105], "gummic": [104, 105], "gummier": [104, 105], "gummiest": [104, 105], "gummifer": [104, 105], "basi": [104, 105], "token_pattern": [104, 105], "setdoublevari": 104, "setshortcircuit": 104, "setfrequencyprior": 104, "spellcheck_norvig": 104, "somtim": 104, "wrrite": [104, 105], "wordz": [104, 105], "erong": [104, 105], "sometim": [104, 105, 164], "wrong": [104, 105], "symmetricdelet": 105, "deriv": 105, "teach": 105, "maxeditdist": 105, "frequencythreshold": [105, 115], "deletesthreshold": 105, "patttern": 105, "setmaxeditdist": 105, "setfrequencythreshold": [105, 115], "setdeletesthreshold": 105, "spellcheck_sd": 105, "spmetim": 105, "hard": 106, "employ": 106, "stopwordsclean": [107, 119, 128], "mllib": [107, 161], "stopwordsremov": 107, "cleantoken": [107, 119, 128], "stopwords_en": 107, "jvm": 107, "forth": 107, "setlocal": 107, "chunktoken": 108, "flatten": 108, "michael": 108, "artist": 108, "benezar": 108, "robert": 108, "farendel": 108, "graduat": 108, "luca": 108, "chunktokenizermodel": 108, "recursivetoken": 110, "recurs": [110, 127, 136, 140, 144], "hand": 110, "suffix": [110, 113, 164], "infix": [110, 113], "middl": 110, "she": 110, "who": [110, 164], "qam": 110, "setprefix": 110, "setsuffix": 110, "setinfix": 110, "recursivetokenizermodel": 110, "regextoken": [111, 165], "whitespac": [111, 115, 117], "tolowercas": 111, "positionalmask": 111, "guarante": 111, "increment": 111, "trimwhitespac": 111, "flag": 111, "preserveposit": [111, 128], "eventu": 111, "settolowercas": 111, "nthi": 111, "setpositionalmask": 111, "settrimwhitespac": 111, "setpreserveposit": [111, 128], "token2chunk": 112, "17": [112, 156], "tokenizedsent": 113, "non": [113, 115], "rulefactori": 113, "targetpattern": 113, "grab": 113, "prefixpattern": 113, "suffixpattern": 113, "infixpattern": 113, "sub": 113, "won": 113, "exceptionspath": 113, "casesensitiveexcept": 113, "contextchar": 113, "splitpattern": 113, "splitchar": 113, "didn": 113, "jane": 113, "boyfriend": 113, "getinfixpattern": 113, "getsuffixpattern": 113, "getprefixpattern": 113, "getcontextchar": 113, "getsplitchar": 113, "settargetpattern": 113, "setprefixpattern": 113, "setsuffixpattern": 113, "setinfixpattern": 113, "addinfixpattern": 113, "setexcept": 113, "getexcept": 113, "setexceptionspath": 113, "addexcept": 113, "setcasesensitiveexcept": 113, "getcasesensitiveexcept": 113, "addcontextchar": 113, "setsplitpattern": 113, "setsplitchar": 113, "addsplitchar": 113, "piec": 113, "token_rul": 113, "wordsegment": 115, "wordsegmenterapproach": 115, "concaten": 115, "korean": 115, "japanes": 115, "chines": 115, "correspond": [115, 147], "wordsegmentermodel": 115, "tip": 115, "frame": 115, "least": 115, "frequent": 115, "ambiguitythreshold": 115, "chinese_train": 115, "utf8": 115, "\u5341": 115, "ll": 115, "\u56db": 115, "rr": 115, "\u4e0d": 115, "\u662f": 115, "setniter": 115, "trainingdataset": 115, "setambiguitythreshold": 115, "getfrequencythreshold": 115, "getambiguitythreshold": 115, "plit": 115, "words_seg": 115, "wordseg_pku": 115, "zh": 115, "\u7136\u800c": 115, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 115, "\u9019\u6a23": 115, "\u7684": 115, "\u8655\u7406": 115, "\u4e5f": 115, "\u884d\u751f": 115, "\u4e86": 115, "\u4e00\u4e9b": 115, "\u554f\u984c": 115, "chunk2doc": [116, 117], "back": 116, "re": [116, 164], "doc2chunk": [116, 117], "pretrainedpipelin": [116, 120, 125, 139, 150, 163, 168, 169], "york": [116, 120], "jersei": [116, 120], "aren": [116, 120], "amongst": [116, 120], "explain_document_dl": [116, 120, 125, 139, 150], "chunktodoc": 116, "chunkconvert": 116, "explainresult": [116, 120], "22": [116, 120, 153, 163], "setparam": [116, 117, 118, 119, 120, 121, 126, 128, 130], "chunkcol": 117, "stringtyp": 117, "setisarrai": 117, "startcol": 117, "startcolbytokenindex": 117, "isarrai": 117, "failonmiss": 117, "fail": 117, "chunkassembl": 117, "setchunkcol": 117, "setstartcol": 117, "setstartcolbytokenindex": 117, "setfailonmiss": 117, "prepar": [118, 126], "disabl": [118, 126], "outputcol": [118, 119, 120, 121, 126, 131], "idcol": [118, 126], "metadatacol": [118, 126], "cleanupmod": [118, 126], "cleanup": [118, 126], "inplac": [118, 126], "inplace_ful": [118, 126], "shrink_ful": [118, 126], "each_ful": [118, 126], "delete_ful": [118, 126], "51": [118, 126, 156], "setidcol": [118, 126], "setmetadatacol": [118, 126], "usabl": 119, "lda": 119, "forest": 119, "featurecol": 119, "cleanannot": [119, 120, 121], "outputasvector": 119, "gloveembed": 119, "finished_sentence_embed": 119, "resultwiths": 119, "1619900017976761": 119, "045552998781204224": 119, "03229299932718277": 119, "685609996318": 119, "42416998744010925": 119, "1378999948501587": 119, "5717899799346924": 119, "5078899860382": 119, "08621499687433243": 119, "15772999823093414": 119, "06067200005054474": 119, "395359992980": 119, "4970499873161316": 119, "7164199948310852": 119, "40119001269340515": 119, "05761000141501": 119, "08170200139284134": 119, "7159299850463867": 119, "20677000284194946": 119, "0295659992843": 119, "valuesplitsymbol": 120, "annotationsplitsymbol": 120, "includemetadata": 120, "outputasarrai": [120, 121], "parseembeddingsvector": 120, "setvaluesplitsymbol": 120, "setannotationsplitsymbol": 120, "setincludemetadata": [120, 165], "setoutputasarrai": [120, 121], "setparseembeddingsvector": 120, "finishedresult": 121, "hasrecursivefit": [122, 123], "java_obj": [122, 143, 146], "recursivepipelin": [122, 123, 127, 131], "hasrecursivetransform": 123, "chunk2_doc": [124, 140], "doc2_chunk": [124, 140], "document_assembl": [124, 140], "embeddings_finish": [124, 140], "graph_finish": [124, 140], "has_recursive_fit": [124, 140], "has_recursive_transform": [124, 140], "light_pipelin": [124, 140], "multi_document_assembl": [124, 140], "recursive_pipelin": [124, 140, 146], "token_assembl": [124, 140], "lightpipelin": [125, 150, 168], "parse_embed": [125, 150], "equival": [125, 140, 168], "execut": [125, 164, 168], "hold": [125, 168], "principl": [125, 168], "everyth": [125, 168, 169], "deal": [125, 168], "directli": [125, 147, 160], "fullannot": [125, 150], "happi": [125, 163, 165, 168, 169], "prp": [125, 154, 156, 163, 168, 169, 170], "rb": [125, 156, 163, 168, 169, 170], "optional_target": 125, "explain_document_pipelin": [125, 139, 150, 163, 168, 169], "dict_kei": [125, 150], "stage": [125, 127, 147, 160, 164, 165, 168], "setignoreunsupport": 125, "unsupport": 125, "annotatormodel": [125, 130], "getignoreunsupport": 125, "calculationscol": 126, "text2": 126, "document1": 126, "document2": 126, "kwarg": 127, "decid": 127, "advantag": 127, "behav": 127, "exactli": 127, "intent": 127, "recursivepipelinemodel": 127, "pipeline_model": [127, 147, 160], "intend": 127, "tokenassembl": 128, "reconstruct": 128, "usual": 128, "structur": [128, 163], "cleantext": 128, "opensourc": 128, "annotatorapproach": [129, 136, 147], "annotatorproperti": 131, "compon": [131, 134, 145, 168], "attach": [131, 134, 145, 147], "lazyannot": 131, "getinputcol": 131, "getoutputcol": 131, "setlazyannot": 131, "lazili": 131, "getlazyannot": 131, "cov_obj": 132, "annotator_approach": [133, 140], "annotator_model": [133, 140], "annotator_properti": [133, 140], "coverage_result": [133, 140], "recursive_annotator_approach": [133, 140], "hasbatchedannot": 134, "getbatchs": 134, "hascasesensitiveproperti": 134, "getcasesensit": 134, "hasclassifieractivationproperti": 134, "setactiv": 134, "getactiv": 134, "hasembeddingsproperti": 134, "getdimens": 134, "hasenablecachingproperti": 134, "enablecach": 134, "setenablecach": 134, "rdd": 134, "getenablecach": 134, "constant": 135, "recursiveannotatorapproach": 136, "handl": [137, 155], "hasstorageref": 137, "storageref": 137, "uniqu": 137, "getstorageref": 137, "hasstorageopt": 137, "includestorag": 137, "enableinmemorystorag": 137, "setincludestorag": 137, "getincludestorag": 137, "setenableinmemorystorag": 137, "getenableinmemorystorag": 137, "hasstoragemodel": 137, "savestorag": 137, "hasstorag": 137, "storagepath": 137, "getstoragepath": 137, "fo": 138, "regexrul": 138, "assist": 139, "map_annot": 139, "f": [139, 147, 160], "output_typ": 139, "udf": 139, "userdefinedfunct": 139, "def": 139, "nnp_token": 139, "lambda": 139, "alia": 139, "epeu": 139, "map_annotations_arrai": 139, "map_annotations_strict": 139, "map_annotations_col": 139, "output_column": 139, "annotatyon_typ": 139, "chunks_df": 139, "pos_chunk": 139, "vbz": [139, 153, 170], "filter_by_annotations_col": 139, "filter_po": 139, "explode_annotations_col": 139, "annotator_java_ml": [140, 144], "annotator_transform": [140, 144], "extended_java_wrapp": [140, 144], "params_getters_sett": [140, 144], "comet": [140, 148, 162], "pretrained_pipelin": [140, 149], "resource_download": [140, 149], "pub_tat": [140, 155], "m1": 140, "cache_fold": 140, "log_fold": 140, "cluster_tmp_dir": 140, "real_time_output": 140, "output_level": 140, "correctli": 140, "maco": 140, "alloc": 140, "directori": [140, 160], "cache_pretrain": 140, "temporarili": 140, "unpack": 140, "hadoop": 140, "tmp": [140, 160], "dir": 140, "s3": 140, "hdf": 140, "dbf": 140, "annotator_log": 140, "annotatorjavamlread": 141, "mixin": 141, "javamlread": 141, "classmethod": 141, "cl": 141, "mlreader": 141, "clazz": 141, "javaparam": 141, "annotatortransform": 142, "ensur": 142, "_java_obj": 142, "extens": 143, "javawrapp": 143, "extendedjavawrapp": 143, "new_java_obj": 143, "java_class": 143, "new_java_arrai": 143, "pylist": 143, "todo": 143, "chang": 143, "new_java_array_str": 143, "new_java_array_integ": 143, "spark_vers": 143, "getdatafram": 143, "jdf": 143, "paramsgetterssett": 145, "getter_attr": 145, "getparamvalu": 145, "paramnam": 145, "setparamvalu": 145, "recursiveestim": 146, "tupl": 146, "overrid": 146, "recursivetransform": 146, "transform_recurs": 146, "comet_ml": [147, 160], "cometlogg": [147, 160], "workspac": 147, "project_nam": [147, 160], "comet_mod": [147, 160], "experiment_id": 147, "experiment_kwarg": 147, "logger": [147, 160], "meta": [147, 162], "ai": [147, 160], "practition": [147, 160], "reliabl": [147, 160], "streamlin": [147, 160], "lifecycl": [147, 160, 162], "track": [147, 160, 161], "explain": [147, 160, 167, 169], "reproduc": [147, 160, 161], "outputlogpath": [147, 160], "offlin": 147, "onlin": [147, 160], "reus": 147, "importerror": 147, "output_log_path": [147, 160], "embd": [147, 160], "logdir": [147, 160], "interfac": [147, 160, 168], "tab": [147, 160], "chart": [147, 160], "log_pipeline_paramet": [147, 160], "log_visu": [147, 160], "html": [147, 160], "viz": [147, 160], "upload": 147, "visual": 147, "colum": [147, 160], "ner_chunk": [147, 160], "sparknlp_displai": [147, 160], "nervisu": [147, 160], "idx": [147, 160], "enumer": [147, 160], "label_col": [147, 160], "document_col": [147, 160], "return_html": [147, 160], "log_metr": [147, 160], "sklearn": [147, 160], "preprocess": [147, 160], "multilabelbinar": [147, 160], "classification_report": [147, 160], "preds_df": [147, 160], "topanda": [147, 160], "mlb": [147, 160], "y_true": [147, 160], "fit_transform": [147, 160], "y_pred": [147, 160], "output_dict": [147, 160], "log_paramet": 147, "log_completed_run": 147, "log_file_path": 147, "complet": [147, 161], "log_asset": 147, "asset_path": 147, "asset": 147, "audio": 147, "log_asset_data": 147, "interv": 147, "refresh": 147, "outstand": 147, "disk_loc": 150, "fulli": 150, "light_model": 150, "gather": 150, "langaug": 150, "from_disk": 150, "resourcedownload": 151, "downloadmodel": 151, "reader": 151, "j_dwn": 151, "pythonresourcedownload": 151, "downloadmodeldirectli": 151, "downloadpipelin": 151, "clearcach": 151, "showpublicmodel": 151, "showpublicpipelin": 151, "showuncategorizedresourc": 151, "showavailableannot": 151, "printprogress": 152, "documentcol": [153, 154], "sentencecol": [153, 154], "tokencol": 153, "conlllabelindex": 153, "conllposindex": 153, "textcol": [153, 154], "labelcol": 153, "docstart": [153, 170], "eu": [153, 170], "np": [153, 170], "reject": [153, 170], "vp": [153, 170], "misc": [153, 170], "TO": [153, 170], "boycott": [153, 170], "british": [153, 170], "lamb": [153, 170], "blackburn": 153, "brussel": 153, "1996": 153, "08": 153, "storage_level": 153, "storagelevel": 153, "disk_onli": 153, "lift": 153, "persist": 153, "uposcol": 154, "upo": 154, "xposcol": 154, "xpo": 154, "sent_id": 154, "sell": 154, "pron": 154, "nom": 154, "plur": 154, "_": 154, "tens": 154, "conj": 154, "cc": 154, "spaceaft": 154, "No": [154, 163], "punct": 154, "conllufil": [154, 170], "conlldataset": [154, 170], "morph": 154, "Into": 154, "googleo": 154, "sconj": 154, "propn": 154, "adp": 154, "wp": 154, "vbd": [154, 156, 170], "tagger": [156, 170], "ago": [156, 170], "receiv": [156, 170], "posdf": 156, "61": 156, "56": 156, "67": [156, 157, 170], "nonexecut": 156, "69": 156, "76": 156, "director": 156, "78": 156, "81": 156, "84": 156, "outputposcol": 156, "outputdocumentcol": 156, "outputtextcol": 156, "pubtat": [157, 167], "medic": [157, 170], "medment": [157, 170], "25763772": [157, 170], "dctn4": [157, 170], "t116": [157, 170], "t123": [157, 170], "c4308010": [157, 170], "63": [157, 170], "chronic": [157, 170], "pseudomona": [157, 170], "aeruginosa": [157, 170], "infect": [157, 170], "t047": [157, 170], "c0854135": [157, 170], "82": [157, 170], "cystic": [157, 170], "fibrosi": [157, 170], "c0010674": [157, 170], "120": [157, 170], "pa": [157, 170], "124": [157, 170], "139": [157, 170], "pubtatorfil": 157, "corpus_pubtator_sampl": 157, "pubtatordataset": 157, "doc_id": 157, "finished_token": [157, 165], "finished_po": 157, "finished_n": 157, "finished_token_metadata": 157, "finished_pos_metadata": 157, "finished_label_metadata": 157, "mo": 157, "ispaddedtoken": 157, "pad": 157, "get_config_path": 158, "conllgener": 158, "exportconllfil": 158, "files_path": 158, "output_path": 158, "workflow": 160, "dedic": 160, "account": 160, "inspect": 160, "init": 160, "sparknlp_experi": 160, "offline_directori": 160, "later": 160, "nativ": 161, "record": 161, "queri": 161, "serv": 161, "registri": 161, "discov": 161, "central": 161, "send": 162, "messag": 162, "mlflow": 162, "clearli": 163, "explain_document_ml": [163, 168, 169], "approx": [163, 168, 169], "mb": [163, 168, 169], "ok": [163, 168, 169], "spearhead": 164, "produc": 164, "declar": 164, "accordingli": 164, "extra_loc": 164, "bring": 164, "offer": [164, 166, 169], "column_nam": 164, "preced": 164, "interchang": 165, "anoth": 165, "road": 165, "proce": 165, "At": 165, "sens": 169, "constantli": 169, "server": 169, "sever": 170, "plain": 170, "train_po": 170, "training_conl": 170, "train_corpu": 170, "withcolumnrenam": 170, "trainingpubtatordf": 170, "corpus_pubt": 170}, "objects": {"": [[140, 0, 0, "-", "sparknlp"]], "sparknlp": [[12, 0, 0, "-", "annotation"], [69, 0, 0, "-", "annotator"], [140, 3, 1, "", "annotators"], [124, 0, 0, "-", "base"], [133, 0, 0, "-", "common"], [140, 3, 1, "", "embeddings"], [139, 0, 0, "-", "functions"], [144, 0, 0, "-", "internal"], [148, 0, 0, "-", "logging"], [149, 0, 0, "-", "pretrained"], [140, 5, 1, "", "start"], [155, 0, 0, "-", "training"], [158, 0, 0, "-", "util"], [140, 5, 1, "", "version"]], "sparknlp.annotation": [[12, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[12, 2, 1, "", "arrayType"], [12, 2, 1, "", "copy"], [12, 2, 1, "", "dataType"], [12, 2, 1, "", "fromRow"], [12, 2, 1, "", "toRow"]], "sparknlp.annotator": [[69, 3, 1, "", "annotators"], [13, 0, 0, "-", "chunker"], [69, 3, 1, "", "classifier"], [27, 0, 0, "-", "classifier_dl"], [69, 3, 1, "", "context"], [69, 3, 1, "", "coref"], [40, 0, 0, "-", "coref"], [69, 3, 1, "", "crf"], [69, 3, 1, "", "dep"], [43, 0, 0, "-", "dependency"], [69, 3, 1, "id2", "dl"], [45, 0, 0, "-", "document_normalizer"], [69, 3, 1, "", "embeddings"], [55, 0, 0, "-", "embeddings"], [69, 3, 1, "", "er"], [67, 0, 0, "-", "er"], [68, 0, 0, "-", "graph_extraction"], [69, 3, 1, "", "keyword"], [70, 0, 0, "-", "keyword_extraction"], [69, 3, 1, "", "ld"], [72, 0, 0, "-", "ld_dl"], [74, 0, 0, "-", "lemmatizer"], [77, 0, 0, "-", "matcher"], [81, 0, 0, "-", "n_gram_generator"], [82, 0, 0, "-", "ner"], [88, 0, 0, "-", "normalizer"], [69, 3, 1, "", "norvig"], [69, 3, 1, "", "parser"], [69, 3, 1, "", "perceptron"], [89, 0, 0, "-", "pos"], [69, 3, 1, "id0", "pragmatic"], [69, 3, 1, "", "regex"], [69, 3, 1, "", "sbd"], [69, 3, 1, "", "sda"], [91, 0, 0, "-", "sentence"], [69, 3, 1, "", "sentence_detector_dl"], [94, 0, 0, "-", "sentiment"], [99, 0, 0, "-", "seq2seq"], [69, 3, 1, "", "spell"], [103, 0, 0, "-", "spell_check"], [106, 0, 0, "-", "stemmer"], [107, 0, 0, "-", "stop_words_cleaner"], [69, 3, 1, "", "symmetric"], [109, 0, 0, "-", "token"], [69, 3, 1, "", "typdep"], [69, 3, 1, "", "vivekn"], [114, 0, 0, "-", "ws"], [69, 3, 1, "", "yake"]], "sparknlp.annotator.chunker": [[13, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[13, 4, 1, "", "name"], [13, 4, 1, "", "regexParsers"], [13, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[14, 0, 0, "-", "albert_for_question_answering"], [15, 0, 0, "-", "albert_for_sequence_classification"], [16, 0, 0, "-", "albert_for_token_classification"], [17, 0, 0, "-", "bert_for_question_answering"], [18, 0, 0, "-", "bert_for_sequence_classification"], [19, 0, 0, "-", "bert_for_token_classification"], [20, 0, 0, "-", "classifier_dl"], [21, 0, 0, "-", "deberta_for_question_answering"], [22, 0, 0, "-", "deberta_for_sequence_classification"], [23, 0, 0, "-", "deberta_for_token_classification"], [24, 0, 0, "-", "distil_bert_for_question_answering"], [25, 0, 0, "-", "distil_bert_for_sequence_classification"], [26, 0, 0, "-", "distil_bert_for_token_classification"], [28, 0, 0, "-", "longformer_for_question_answering"], [29, 0, 0, "-", "longformer_for_sequence_classification"], [30, 0, 0, "-", "longformer_for_token_classification"], [31, 0, 0, "-", "multi_classifier_dl"], [32, 0, 0, "-", "roberta_for_question_answering"], [33, 0, 0, "-", "roberta_for_sequence_classification"], [34, 0, 0, "-", "roberta_for_token_classification"], [35, 0, 0, "-", "xlm_roberta_for_question_answering"], [36, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [37, 0, 0, "-", "xlm_roberta_for_token_classification"], [38, 0, 0, "-", "xlnet_for_sequence_classification"], [39, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[14, 4, 1, "", "coalesceSentences"], [14, 4, 1, "", "configProtoBytes"], [14, 2, 1, "", "loadSavedModel"], [14, 4, 1, "", "maxSentenceLength"], [14, 4, 1, "", "name"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[15, 4, 1, "", "coalesceSentences"], [15, 4, 1, "", "configProtoBytes"], [15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 4, 1, "", "maxSentenceLength"], [15, 4, 1, "", "name"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setCoalesceSentences"], [15, 2, 1, "", "setConfigProtoBytes"], [15, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[16, 4, 1, "", "configProtoBytes"], [16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 4, 1, "", "maxSentenceLength"], [16, 4, 1, "", "name"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setConfigProtoBytes"], [16, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[17, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[17, 4, 1, "", "coalesceSentences"], [17, 4, 1, "", "configProtoBytes"], [17, 2, 1, "", "loadSavedModel"], [17, 4, 1, "", "maxSentenceLength"], [17, 4, 1, "", "name"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"], [17, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[18, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[18, 4, 1, "", "coalesceSentences"], [18, 4, 1, "", "configProtoBytes"], [18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 4, 1, "", "maxSentenceLength"], [18, 4, 1, "", "name"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"], [18, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[19, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[19, 4, 1, "", "configProtoBytes"], [19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 4, 1, "", "maxSentenceLength"], [19, 4, 1, "", "name"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"], [19, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, 1, 1, "", "ClassifierDLApproach"], [20, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[20, 4, 1, "", "batchSize"], [20, 4, 1, "", "configProtoBytes"], [20, 4, 1, "", "dropout"], [20, 4, 1, "", "enableOutputLogs"], [20, 4, 1, "", "labelColumn"], [20, 4, 1, "", "lr"], [20, 4, 1, "", "maxEpochs"], [20, 4, 1, "", "outputLogsPath"], [20, 4, 1, "", "randomSeed"], [20, 2, 1, "", "setBatchSize"], [20, 2, 1, "", "setConfigProtoBytes"], [20, 2, 1, "", "setDropout"], [20, 2, 1, "", "setEnableOutputLogs"], [20, 2, 1, "", "setLabelColumn"], [20, 2, 1, "", "setLr"], [20, 2, 1, "", "setMaxEpochs"], [20, 2, 1, "", "setOutputLogsPath"], [20, 2, 1, "", "setRandomSeed"], [20, 2, 1, "", "setValidationSplit"], [20, 2, 1, "", "setVerbose"], [20, 4, 1, "", "validationSplit"], [20, 4, 1, "", "verbose"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[20, 4, 1, "", "classes"], [20, 4, 1, "", "configProtoBytes"], [20, 4, 1, "", "name"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[21, 4, 1, "", "coalesceSentences"], [21, 4, 1, "", "configProtoBytes"], [21, 2, 1, "", "loadSavedModel"], [21, 4, 1, "", "maxSentenceLength"], [21, 4, 1, "", "name"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"], [21, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[22, 4, 1, "", "coalesceSentences"], [22, 4, 1, "", "configProtoBytes"], [22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 4, 1, "", "maxSentenceLength"], [22, 4, 1, "", "name"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"], [22, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[23, 4, 1, "", "configProtoBytes"], [23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 4, 1, "", "maxSentenceLength"], [23, 4, 1, "", "name"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"], [23, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[24, 4, 1, "", "coalesceSentences"], [24, 4, 1, "", "configProtoBytes"], [24, 2, 1, "", "loadSavedModel"], [24, 4, 1, "", "maxSentenceLength"], [24, 4, 1, "", "name"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"], [24, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[25, 4, 1, "", "coalesceSentences"], [25, 4, 1, "", "configProtoBytes"], [25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 4, 1, "", "maxSentenceLength"], [25, 4, 1, "", "name"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setCoalesceSentences"], [25, 2, 1, "", "setConfigProtoBytes"], [25, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[26, 4, 1, "", "configProtoBytes"], [26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 4, 1, "", "maxSentenceLength"], [26, 4, 1, "", "name"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"], [26, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[28, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[28, 4, 1, "", "coalesceSentences"], [28, 4, 1, "", "configProtoBytes"], [28, 2, 1, "", "loadSavedModel"], [28, 4, 1, "", "maxSentenceLength"], [28, 4, 1, "", "name"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"], [28, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[29, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[29, 4, 1, "", "coalesceSentences"], [29, 4, 1, "", "configProtoBytes"], [29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 4, 1, "", "maxSentenceLength"], [29, 4, 1, "", "name"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"], [29, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[30, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[30, 4, 1, "", "configProtoBytes"], [30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 4, 1, "", "maxSentenceLength"], [30, 4, 1, "", "name"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setConfigProtoBytes"], [30, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[31, 1, 1, "", "MultiClassifierDLApproach"], [31, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[31, 4, 1, "", "batchSize"], [31, 4, 1, "", "configProtoBytes"], [31, 4, 1, "", "enableOutputLogs"], [31, 4, 1, "", "labelColumn"], [31, 4, 1, "", "lr"], [31, 4, 1, "", "maxEpochs"], [31, 4, 1, "", "outputLogsPath"], [31, 4, 1, "", "randomSeed"], [31, 2, 1, "", "setBatchSize"], [31, 2, 1, "", "setConfigProtoBytes"], [31, 2, 1, "", "setEnableOutputLogs"], [31, 2, 1, "", "setLabelColumn"], [31, 2, 1, "", "setLr"], [31, 2, 1, "", "setMaxEpochs"], [31, 2, 1, "", "setOutputLogsPath"], [31, 2, 1, "", "setRandomSeed"], [31, 2, 1, "", "setShufflePerEpoch"], [31, 2, 1, "", "setThreshold"], [31, 2, 1, "", "setValidationSplit"], [31, 2, 1, "", "setVerbose"], [31, 4, 1, "", "shufflePerEpoch"], [31, 4, 1, "", "threshold"], [31, 4, 1, "", "validationSplit"], [31, 4, 1, "", "verbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[31, 4, 1, "", "classes"], [31, 4, 1, "", "configProtoBytes"], [31, 4, 1, "", "name"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"], [31, 2, 1, "", "setThreshold"], [31, 4, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[32, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[32, 4, 1, "", "coalesceSentences"], [32, 4, 1, "", "configProtoBytes"], [32, 2, 1, "", "loadSavedModel"], [32, 4, 1, "", "maxSentenceLength"], [32, 4, 1, "", "name"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[33, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[33, 4, 1, "", "coalesceSentences"], [33, 4, 1, "", "configProtoBytes"], [33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 4, 1, "", "maxSentenceLength"], [33, 4, 1, "", "name"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"], [33, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[34, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[34, 4, 1, "", "configProtoBytes"], [34, 2, 1, "", "getClasses"], [34, 2, 1, "", "loadSavedModel"], [34, 4, 1, "", "maxSentenceLength"], [34, 4, 1, "", "name"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[35, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[35, 4, 1, "", "coalesceSentences"], [35, 4, 1, "", "configProtoBytes"], [35, 2, 1, "", "loadSavedModel"], [35, 4, 1, "", "maxSentenceLength"], [35, 4, 1, "", "name"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"], [35, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[36, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[36, 4, 1, "", "coalesceSentences"], [36, 4, 1, "", "configProtoBytes"], [36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 4, 1, "", "maxSentenceLength"], [36, 4, 1, "", "name"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"], [36, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[37, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[37, 4, 1, "", "configProtoBytes"], [37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 4, 1, "", "maxSentenceLength"], [37, 4, 1, "", "name"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[38, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[38, 4, 1, "", "coalesceSentences"], [38, 4, 1, "", "configProtoBytes"], [38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 4, 1, "", "maxSentenceLength"], [38, 4, 1, "", "name"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[39, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[39, 4, 1, "", "configProtoBytes"], [39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 4, 1, "", "maxSentenceLength"], [39, 4, 1, "", "name"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.coref": [[41, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[41, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[41, 4, 1, "", "configProtoBytes"], [41, 2, 1, "", "loadSavedModel"], [41, 4, 1, "", "maxSegmentLength"], [41, 4, 1, "", "maxSentenceLength"], [41, 4, 1, "", "name"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setMaxSegmentLength"], [41, 2, 1, "", "setMaxSentenceLength"], [41, 2, 1, "", "setTextGenre"], [41, 4, 1, "", "textGenre"]], "sparknlp.annotator.dependency": [[42, 0, 0, "-", "dependency_parser"], [44, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[42, 1, 1, "", "DependencyParserApproach"], [42, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[42, 4, 1, "", "conllU"], [42, 4, 1, "", "dependencyTreeBank"], [42, 4, 1, "", "numberOfIterations"], [42, 2, 1, "", "setConllU"], [42, 2, 1, "", "setDependencyTreeBank"], [42, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[42, 4, 1, "", "name"], [42, 4, 1, "", "perceptron"], [42, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[44, 1, 1, "", "TypedDependencyParserApproach"], [44, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[44, 4, 1, "", "conll2009"], [44, 4, 1, "", "conllU"], [44, 4, 1, "", "numberOfIterations"], [44, 2, 1, "", "setConll2009"], [44, 2, 1, "", "setConllU"], [44, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[44, 4, 1, "", "conllFormat"], [44, 4, 1, "", "name"], [44, 2, 1, "", "pretrained"], [44, 4, 1, "", "trainDependencyPipe"], [44, 4, 1, "", "trainOptions"], [44, 4, 1, "", "trainParameters"]], "sparknlp.annotator.document_normalizer": [[45, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[45, 4, 1, "", "action"], [45, 4, 1, "", "encoding"], [45, 4, 1, "", "lowercase"], [45, 4, 1, "", "patterns"], [45, 4, 1, "", "policy"], [45, 4, 1, "", "replacement"], [45, 2, 1, "", "setAction"], [45, 2, 1, "", "setEncoding"], [45, 2, 1, "", "setLowercase"], [45, 2, 1, "", "setPatterns"], [45, 2, 1, "", "setPolicy"], [45, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[46, 0, 0, "-", "albert_embeddings"], [47, 0, 0, "-", "bert_embeddings"], [48, 0, 0, "-", "bert_sentence_embeddings"], [49, 0, 0, "-", "camambert_embeddings"], [50, 0, 0, "-", "chunk_embeddings"], [51, 0, 0, "-", "deberta_embeddings"], [52, 0, 0, "-", "distil_bert_embeddings"], [53, 0, 0, "-", "doc2vec"], [54, 0, 0, "-", "elmo_embeddings"], [56, 0, 0, "-", "longformer_embeddings"], [57, 0, 0, "-", "roberta_embeddings"], [58, 0, 0, "-", "roberta_sentence_embeddings"], [59, 0, 0, "-", "sentence_embeddings"], [60, 0, 0, "-", "universal_sentence_encoder"], [61, 0, 0, "-", "word2vec"], [62, 0, 0, "-", "word_embeddings"], [63, 0, 0, "-", "xlm_roberta_embeddings"], [64, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [65, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[46, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[46, 4, 1, "", "configProtoBytes"], [46, 2, 1, "", "loadSavedModel"], [46, 4, 1, "", "maxSentenceLength"], [46, 4, 1, "", "name"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_embeddings": [[47, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[47, 4, 1, "", "configProtoBytes"], [47, 2, 1, "", "loadSavedModel"], [47, 4, 1, "", "maxSentenceLength"], [47, 4, 1, "", "name"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setConfigProtoBytes"], [47, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[48, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[48, 4, 1, "", "configProtoBytes"], [48, 4, 1, "", "isLong"], [48, 2, 1, "", "loadSavedModel"], [48, 4, 1, "", "maxSentenceLength"], [48, 4, 1, "", "name"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setIsLong"], [48, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.camambert_embeddings": [[49, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camambert_embeddings.CamemBertEmbeddings": [[49, 4, 1, "", "configProtoBytes"], [49, 2, 1, "", "loadSavedModel"], [49, 4, 1, "", "maxSentenceLength"], [49, 4, 1, "", "name"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[50, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[50, 4, 1, "", "name"], [50, 4, 1, "", "poolingStrategy"], [50, 2, 1, "", "setPoolingStrategy"], [50, 2, 1, "", "setSkipOOV"], [50, 4, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[51, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[51, 4, 1, "", "configProtoBytes"], [51, 2, 1, "", "loadSavedModel"], [51, 4, 1, "", "maxSentenceLength"], [51, 4, 1, "", "name"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[52, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[52, 4, 1, "", "configProtoBytes"], [52, 2, 1, "", "loadSavedModel"], [52, 4, 1, "", "maxSentenceLength"], [52, 4, 1, "", "name"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"], [52, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.doc2vec": [[53, 1, 1, "", "Doc2VecApproach"], [53, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[53, 4, 1, "", "maxIter"], [53, 4, 1, "", "maxSentenceLength"], [53, 4, 1, "", "minCount"], [53, 4, 1, "", "numPartitions"], [53, 4, 1, "", "seed"], [53, 2, 1, "", "setMaxIter"], [53, 2, 1, "", "setMaxSentenceLength"], [53, 2, 1, "", "setMinCount"], [53, 2, 1, "", "setNumPartitions"], [53, 2, 1, "", "setSeed"], [53, 2, 1, "", "setStepSize"], [53, 2, 1, "", "setVectorSize"], [53, 2, 1, "", "setWindowSize"], [53, 4, 1, "", "stepSize"], [53, 4, 1, "", "vectorSize"], [53, 4, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[53, 4, 1, "", "name"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setVectorSize"], [53, 4, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[54, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[54, 4, 1, "", "batchSize"], [54, 4, 1, "", "configProtoBytes"], [54, 2, 1, "", "loadSavedModel"], [54, 4, 1, "", "name"], [54, 4, 1, "", "poolingLayer"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setBatchSize"], [54, 2, 1, "", "setConfigProtoBytes"], [54, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[56, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[56, 4, 1, "", "configProtoBytes"], [56, 2, 1, "", "loadSavedModel"], [56, 4, 1, "", "maxSentenceLength"], [56, 4, 1, "", "name"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"], [56, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[57, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[57, 4, 1, "", "configProtoBytes"], [57, 2, 1, "", "loadSavedModel"], [57, 4, 1, "", "maxSentenceLength"], [57, 4, 1, "", "name"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[58, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[58, 4, 1, "", "configProtoBytes"], [58, 2, 1, "", "loadSavedModel"], [58, 4, 1, "", "maxSentenceLength"], [58, 4, 1, "", "name"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"], [58, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[59, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[59, 4, 1, "", "name"], [59, 4, 1, "", "poolingStrategy"], [59, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[60, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[60, 4, 1, "", "configProtoBytes"], [60, 4, 1, "", "loadSP"], [60, 2, 1, "", "loadSavedModel"], [60, 4, 1, "", "name"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"], [60, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[61, 1, 1, "", "Word2VecApproach"], [61, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[61, 4, 1, "", "maxIter"], [61, 4, 1, "", "maxSentenceLength"], [61, 4, 1, "", "minCount"], [61, 4, 1, "", "numPartitions"], [61, 4, 1, "", "seed"], [61, 2, 1, "", "setMaxIter"], [61, 2, 1, "", "setMaxSentenceLength"], [61, 2, 1, "", "setMinCount"], [61, 2, 1, "", "setNumPartitions"], [61, 2, 1, "", "setSeed"], [61, 2, 1, "", "setStepSize"], [61, 2, 1, "", "setVectorSize"], [61, 2, 1, "", "setWindowSize"], [61, 4, 1, "", "stepSize"], [61, 4, 1, "", "vectorSize"], [61, 4, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[61, 4, 1, "", "name"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setVectorSize"], [61, 4, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[62, 1, 1, "", "WordEmbeddings"], [62, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[62, 4, 1, "", "name"], [62, 4, 1, "", "readCacheSize"], [62, 2, 1, "", "setReadCacheSize"], [62, 2, 1, "", "setWriteBufferSize"], [62, 4, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[62, 4, 1, "", "databases"], [62, 2, 1, "", "loadStorage"], [62, 4, 1, "", "name"], [62, 2, 1, "", "overallCoverage"], [62, 2, 1, "", "pretrained"], [62, 4, 1, "", "readCacheSize"], [62, 2, 1, "", "setReadCacheSize"], [62, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[63, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[63, 4, 1, "", "configProtoBytes"], [63, 2, 1, "", "loadSavedModel"], [63, 4, 1, "", "maxSentenceLength"], [63, 4, 1, "", "name"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[64, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[64, 4, 1, "", "configProtoBytes"], [64, 2, 1, "", "loadSavedModel"], [64, 4, 1, "", "maxSentenceLength"], [64, 4, 1, "", "name"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[65, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[65, 4, 1, "", "configProtoBytes"], [65, 2, 1, "", "loadSavedModel"], [65, 4, 1, "", "maxSentenceLength"], [65, 4, 1, "", "name"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setConfigProtoBytes"], [65, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.er": [[66, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[66, 1, 1, "", "EntityRulerApproach"], [66, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[66, 4, 1, "", "enablePatternRegex"], [66, 4, 1, "", "name"], [66, 4, 1, "", "patternsResource"], [66, 4, 1, "", "sentenceMatch"], [66, 2, 1, "", "setEnablePatternRegex"], [66, 2, 1, "", "setPatternsResource"], [66, 2, 1, "", "setSentenceMatch"], [66, 2, 1, "", "setUseStorage"], [66, 4, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[66, 4, 1, "", "database"], [66, 2, 1, "", "loadStorage"], [66, 4, 1, "", "name"], [66, 2, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[68, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[68, 4, 1, "", "delimiter"], [68, 4, 1, "", "dependencyParserModel"], [68, 4, 1, "", "entityTypes"], [68, 4, 1, "", "explodeEntities"], [68, 4, 1, "", "includeEdges"], [68, 4, 1, "", "maxSentenceSize"], [68, 4, 1, "", "mergeEntities"], [68, 4, 1, "", "mergeEntitiesIOBFormat"], [68, 4, 1, "", "minSentenceSize"], [68, 4, 1, "", "name"], [68, 4, 1, "", "posModel"], [68, 4, 1, "", "relationshipTypes"], [68, 4, 1, "", "rootTokens"], [68, 2, 1, "", "setDelimiter"], [68, 2, 1, "", "setDependencyParserModel"], [68, 2, 1, "", "setEntityTypes"], [68, 2, 1, "", "setExplodeEntities"], [68, 2, 1, "", "setIncludeEdges"], [68, 2, 1, "", "setMaxSentenceSize"], [68, 2, 1, "", "setMergeEntities"], [68, 2, 1, "", "setMergeEntitiesIOBFormat"], [68, 2, 1, "", "setMinSentenceSize"], [68, 2, 1, "", "setPosModel"], [68, 2, 1, "", "setRelationshipTypes"], [68, 2, 1, "", "setRootTokens"], [68, 2, 1, "", "setTypedDependencyParserModel"], [68, 4, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[71, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[71, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[71, 2, 1, "", "getStopWords"], [71, 2, 1, "", "loadDefaultStopWords"], [71, 4, 1, "", "maxNGrams"], [71, 4, 1, "", "minNGrams"], [71, 4, 1, "", "nKeywords"], [71, 4, 1, "", "name"], [71, 2, 1, "", "setMaxNGrams"], [71, 2, 1, "", "setMinNGrams"], [71, 2, 1, "", "setNKeywords"], [71, 2, 1, "", "setStopWords"], [71, 2, 1, "", "setThreshold"], [71, 2, 1, "", "setWindowSize"], [71, 4, 1, "", "stopWords"], [71, 4, 1, "", "threshold"], [71, 4, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[73, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[73, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[73, 4, 1, "", "coalesceSentences"], [73, 4, 1, "", "configProtoBytes"], [73, 4, 1, "", "languages"], [73, 4, 1, "", "name"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setCoalesceSentences"], [73, 2, 1, "", "setConfigProtoBytes"], [73, 2, 1, "", "setThreshold"], [73, 2, 1, "", "setThresholdLabel"], [73, 4, 1, "", "threshold"], [73, 4, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[74, 1, 1, "", "Lemmatizer"], [74, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[74, 4, 1, "", "dictionary"], [74, 4, 1, "", "formCol"], [74, 4, 1, "", "lemmaCol"], [74, 2, 1, "", "setDictionary"], [74, 2, 1, "", "setFormCol"], [74, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[74, 4, 1, "", "name"], [74, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[75, 0, 0, "-", "big_text_matcher"], [76, 0, 0, "-", "date_matcher"], [78, 0, 0, "-", "multi_date_matcher"], [79, 0, 0, "-", "regex_matcher"], [80, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[75, 1, 1, "", "BigTextMatcher"], [75, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[75, 4, 1, "", "caseSensitive"], [75, 4, 1, "", "entities"], [75, 4, 1, "", "mergeOverlapping"], [75, 2, 1, "", "setCaseSensitive"], [75, 2, 1, "", "setEntities"], [75, 2, 1, "", "setMergeOverlapping"], [75, 2, 1, "", "setTokenizer"], [75, 4, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[75, 4, 1, "", "caseSensitive"], [75, 4, 1, "", "databases"], [75, 2, 1, "", "loadStorage"], [75, 4, 1, "", "mergeOverlapping"], [75, 4, 1, "", "name"], [75, 2, 1, "", "pretrained"], [75, 4, 1, "", "searchTrie"], [75, 2, 1, "", "setCaseSensitive"], [75, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[76, 1, 1, "", "DateMatcher"], [76, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[76, 4, 1, "", "name"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[76, 4, 1, "", "anchorDateDay"], [76, 4, 1, "", "anchorDateMonth"], [76, 4, 1, "", "anchorDateYear"], [76, 4, 1, "", "defaultDayWhenMissing"], [76, 4, 1, "", "inputFormats"], [76, 4, 1, "", "outputFormat"], [76, 4, 1, "", "readMonthFirst"], [76, 2, 1, "", "setAnchorDateDay"], [76, 2, 1, "", "setAnchorDateMonth"], [76, 2, 1, "", "setAnchorDateYear"], [76, 2, 1, "", "setDefaultDayWhenMissing"], [76, 2, 1, "", "setInputFormats"], [76, 2, 1, "", "setOutputFormat"], [76, 2, 1, "", "setReadMonthFirst"], [76, 2, 1, "", "setSourceLanguage"], [76, 4, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[78, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[78, 4, 1, "", "name"]], "sparknlp.annotator.matcher.regex_matcher": [[79, 1, 1, "", "RegexMatcher"], [79, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[79, 4, 1, "", "externalRules"], [79, 2, 1, "", "setExternalRules"], [79, 2, 1, "", "setStrategy"], [79, 4, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[79, 4, 1, "", "name"]], "sparknlp.annotator.matcher.text_matcher": [[80, 1, 1, "", "TextMatcher"], [80, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[80, 4, 1, "", "buildFromTokens"], [80, 4, 1, "", "caseSensitive"], [80, 4, 1, "", "entities"], [80, 4, 1, "", "entityValue"], [80, 4, 1, "", "mergeOverlapping"], [80, 2, 1, "", "setBuildFromTokens"], [80, 2, 1, "", "setCaseSensitive"], [80, 2, 1, "", "setEntities"], [80, 2, 1, "", "setEntityValue"], [80, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[80, 4, 1, "", "buildFromTokens"], [80, 4, 1, "", "entityValue"], [80, 4, 1, "", "mergeOverlapping"], [80, 4, 1, "", "name"], [80, 2, 1, "", "pretrained"], [80, 4, 1, "", "searchTrie"], [80, 2, 1, "", "setBuildFromTokens"], [80, 2, 1, "", "setEntityValue"], [80, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[81, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[81, 4, 1, "", "delimiter"], [81, 4, 1, "", "enableCumulative"], [81, 4, 1, "", "n"], [81, 4, 1, "", "name"], [81, 2, 1, "", "setDelimiter"], [81, 2, 1, "", "setEnableCumulative"], [81, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[83, 0, 0, "-", "ner_approach"], [84, 0, 0, "-", "ner_converter"], [85, 0, 0, "-", "ner_crf"], [86, 0, 0, "-", "ner_dl"], [87, 0, 0, "-", "ner_overwriter"]], "sparknlp.annotator.ner.ner_approach": [[83, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[83, 4, 1, "", "entities"], [83, 2, 1, "", "getLabelColumn"], [83, 4, 1, "", "labelColumn"], [83, 4, 1, "", "maxEpochs"], [83, 4, 1, "", "minEpochs"], [83, 4, 1, "", "randomSeed"], [83, 2, 1, "", "setEntities"], [83, 2, 1, "", "setLabelColumn"], [83, 2, 1, "", "setMaxEpochs"], [83, 2, 1, "", "setMinEpochs"], [83, 2, 1, "", "setRandomSeed"], [83, 2, 1, "", "setVerbose"], [83, 4, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_converter": [[84, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[84, 4, 1, "", "name"], [84, 2, 1, "", "setWhiteList"], [84, 4, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[85, 1, 1, "", "NerCrfApproach"], [85, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[85, 4, 1, "", "c0"], [85, 4, 1, "", "externalFeatures"], [85, 4, 1, "", "includeConfidence"], [85, 4, 1, "", "l2"], [85, 4, 1, "", "lossEps"], [85, 4, 1, "", "minW"], [85, 2, 1, "", "setC0"], [85, 2, 1, "", "setExternalFeatures"], [85, 2, 1, "", "setIncludeConfidence"], [85, 2, 1, "", "setL2"], [85, 2, 1, "", "setLossEps"], [85, 2, 1, "", "setMinW"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[85, 4, 1, "", "includeConfidence"], [85, 4, 1, "", "name"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[86, 1, 1, "", "NerDLApproach"], [86, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[86, 4, 1, "", "batchSize"], [86, 4, 1, "", "bestModelMetric"], [86, 4, 1, "", "configProtoBytes"], [86, 4, 1, "", "dropout"], [86, 4, 1, "", "enableMemoryOptimizer"], [86, 4, 1, "", "enableOutputLogs"], [86, 4, 1, "", "evaluationLogExtended"], [86, 4, 1, "", "graphFolder"], [86, 4, 1, "", "includeAllConfidenceScores"], [86, 4, 1, "", "includeConfidence"], [86, 4, 1, "", "lr"], [86, 4, 1, "", "outputLogsPath"], [86, 4, 1, "", "po"], [86, 2, 1, "", "setBatchSize"], [86, 2, 1, "", "setBestModelMetric"], [86, 2, 1, "", "setConfigProtoBytes"], [86, 2, 1, "", "setDropout"], [86, 2, 1, "", "setEnableMemoryOptimizer"], [86, 2, 1, "", "setEnableOutputLogs"], [86, 2, 1, "", "setEvaluationLogExtended"], [86, 2, 1, "", "setGraphFolder"], [86, 2, 1, "", "setIncludeAllConfidenceScores"], [86, 2, 1, "", "setIncludeConfidence"], [86, 2, 1, "", "setLr"], [86, 2, 1, "", "setOutputLogsPath"], [86, 2, 1, "", "setPo"], [86, 2, 1, "", "setTestDataset"], [86, 2, 1, "", "setUseBestModel"], [86, 2, 1, "", "setUseContrib"], [86, 2, 1, "", "setValidationSplit"], [86, 4, 1, "", "testDataset"], [86, 4, 1, "", "useBestModel"], [86, 4, 1, "", "useContrib"], [86, 4, 1, "", "validationSplit"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[86, 4, 1, "", "classes"], [86, 4, 1, "", "configProtoBytes"], [86, 4, 1, "", "includeAllConfidenceScores"], [86, 4, 1, "", "includeConfidence"], [86, 4, 1, "", "name"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setConfigProtoBytes"], [86, 2, 1, "", "setIncludeAllConfidenceScores"], [86, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[87, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[87, 4, 1, "", "name"], [87, 4, 1, "", "newResult"], [87, 2, 1, "", "setNewResult"], [87, 2, 1, "", "setStopWords"], [87, 4, 1, "", "stopWords"]], "sparknlp.annotator.normalizer": [[88, 1, 1, "", "Normalizer"], [88, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[88, 4, 1, "", "cleanupPatterns"], [88, 4, 1, "", "lowercase"], [88, 4, 1, "", "maxLength"], [88, 4, 1, "", "minLength"], [88, 2, 1, "", "setCleanupPatterns"], [88, 2, 1, "", "setLowercase"], [88, 2, 1, "", "setMaxLength"], [88, 2, 1, "", "setMinLength"], [88, 2, 1, "", "setSlangDictionary"], [88, 4, 1, "", "slangDictionary"], [88, 4, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[88, 4, 1, "", "cleanupPatterns"], [88, 4, 1, "", "lowercase"], [88, 4, 1, "", "name"], [88, 4, 1, "", "slangMatchCase"]], "sparknlp.annotator.pos": [[90, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[90, 1, 1, "", "PerceptronApproach"], [90, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[90, 2, 1, "", "getNIterations"], [90, 4, 1, "", "nIterations"], [90, 4, 1, "", "posCol"], [90, 2, 1, "", "setIterations"], [90, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[90, 4, 1, "", "name"], [90, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[92, 0, 0, "-", "sentence_detector"], [93, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[92, 1, 1, "", "SentenceDetector"], [92, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[92, 4, 1, "", "detectLists"], [92, 4, 1, "", "name"], [92, 2, 1, "", "setCustomBounds"], [92, 2, 1, "", "setCustomBoundsStrategy"], [92, 2, 1, "", "setDetectLists"], [92, 2, 1, "", "setExplodeSentences"], [92, 2, 1, "", "setMaxLength"], [92, 2, 1, "", "setMinLength"], [92, 2, 1, "", "setSplitLength"], [92, 2, 1, "", "setUseAbbreviations"], [92, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[92, 4, 1, "", "customBounds"], [92, 4, 1, "", "customBoundsStrategy"], [92, 4, 1, "", "explodeSentences"], [92, 4, 1, "", "maxLength"], [92, 4, 1, "", "minLength"], [92, 4, 1, "", "splitLength"], [92, 4, 1, "", "useAbbreviations"], [92, 4, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[93, 1, 1, "", "SentenceDetectorDLApproach"], [93, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[93, 4, 1, "", "epochsNumber"], [93, 4, 1, "", "explodeSentences"], [93, 4, 1, "", "impossiblePenultimates"], [93, 4, 1, "", "modelArchitecture"], [93, 4, 1, "", "name"], [93, 4, 1, "", "outputLogsPath"], [93, 2, 1, "", "setEpochsNumber"], [93, 2, 1, "", "setExplodeSentences"], [93, 2, 1, "", "setImpossiblePenultimates"], [93, 2, 1, "", "setModel"], [93, 2, 1, "", "setOutputLogsPath"], [93, 2, 1, "", "setValidationSplit"], [93, 4, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[93, 4, 1, "", "customBounds"], [93, 4, 1, "", "explodeSentences"], [93, 4, 1, "", "impossiblePenultimates"], [93, 4, 1, "", "maxLength"], [93, 4, 1, "", "minLength"], [93, 4, 1, "", "modelArchitecture"], [93, 4, 1, "", "name"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setCustomBounds"], [93, 2, 1, "", "setExplodeSentences"], [93, 2, 1, "", "setImpossiblePenultimates"], [93, 2, 1, "", "setMaxLength"], [93, 2, 1, "", "setMinLength"], [93, 2, 1, "", "setModel"], [93, 2, 1, "", "setSplitLength"], [93, 2, 1, "", "setUseCustomBoundsOnly"], [93, 4, 1, "", "splitLength"], [93, 4, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[95, 0, 0, "-", "sentiment_detector"], [96, 0, 0, "-", "sentiment_dl"], [97, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[95, 1, 1, "", "SentimentDetector"], [95, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[95, 4, 1, "", "decrementMultiplier"], [95, 4, 1, "", "dictionary"], [95, 4, 1, "", "enableScore"], [95, 4, 1, "", "incrementMultiplier"], [95, 4, 1, "", "negativeMultiplier"], [95, 4, 1, "", "positiveMultiplier"], [95, 4, 1, "", "reverseMultiplier"], [95, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[95, 4, 1, "", "name"], [95, 4, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.sentiment_dl": [[96, 1, 1, "", "SentimentDLApproach"], [96, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.sentiment.sentiment_dl.SentimentDLApproach": [[96, 4, 1, "", "batchSize"], [96, 4, 1, "", "configProtoBytes"], [96, 4, 1, "", "dropout"], [96, 4, 1, "", "enableOutputLogs"], [96, 4, 1, "", "labelColumn"], [96, 4, 1, "", "lr"], [96, 4, 1, "", "maxEpochs"], [96, 4, 1, "", "outputLogsPath"], [96, 4, 1, "", "randomSeed"], [96, 2, 1, "", "setBatchSize"], [96, 2, 1, "", "setConfigProtoBytes"], [96, 2, 1, "", "setDropout"], [96, 2, 1, "", "setEnableOutputLogs"], [96, 2, 1, "", "setLabelColumn"], [96, 2, 1, "", "setLr"], [96, 2, 1, "", "setMaxEpochs"], [96, 2, 1, "", "setOutputLogsPath"], [96, 2, 1, "", "setRandomSeed"], [96, 2, 1, "", "setThreshold"], [96, 2, 1, "", "setThresholdLabel"], [96, 2, 1, "", "setValidationSplit"], [96, 2, 1, "", "setVerbose"], [96, 4, 1, "", "threshold"], [96, 4, 1, "", "thresholdLabel"], [96, 4, 1, "", "validationSplit"], [96, 4, 1, "", "verbose"]], "sparknlp.annotator.sentiment.sentiment_dl.SentimentDLModel": [[96, 4, 1, "", "classes"], [96, 4, 1, "", "configProtoBytes"], [96, 4, 1, "", "name"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setConfigProtoBytes"], [96, 2, 1, "", "setThreshold"], [96, 2, 1, "", "setThresholdLabel"], [96, 4, 1, "", "threshold"], [96, 4, 1, "", "thresholdLabel"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[97, 1, 1, "", "ViveknSentimentApproach"], [97, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[97, 4, 1, "", "featureLimit"], [97, 4, 1, "", "importantFeatureRatio"], [97, 4, 1, "", "pruneCorpus"], [97, 4, 1, "", "sentimentCol"], [97, 2, 1, "", "setPruneCorpus"], [97, 2, 1, "", "setSentimentCol"], [97, 4, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[97, 4, 1, "", "featureLimit"], [97, 4, 1, "", "importantFeatureRatio"], [97, 4, 1, "", "name"], [97, 2, 1, "", "pretrained"], [97, 4, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[98, 0, 0, "-", "gpt2_transformer"], [100, 0, 0, "-", "marian_transformer"], [101, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[98, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[98, 4, 1, "", "configProtoBytes"], [98, 4, 1, "", "doSample"], [98, 4, 1, "", "ignoreTokenIds"], [98, 2, 1, "", "loadSavedModel"], [98, 4, 1, "", "maxOutputLength"], [98, 4, 1, "", "minOutputLength"], [98, 4, 1, "", "name"], [98, 4, 1, "", "noRepeatNgramSize"], [98, 2, 1, "", "pretrained"], [98, 4, 1, "", "repetitionPenalty"], [98, 2, 1, "", "setConfigProtoBytes"], [98, 2, 1, "", "setDoSample"], [98, 2, 1, "", "setIgnoreTokenIds"], [98, 2, 1, "", "setMaxOutputLength"], [98, 2, 1, "", "setMinOutputLength"], [98, 2, 1, "", "setNoRepeatNgramSize"], [98, 2, 1, "", "setRepetitionPenalty"], [98, 2, 1, "", "setTask"], [98, 2, 1, "", "setTemperature"], [98, 2, 1, "", "setTopK"], [98, 2, 1, "", "setTopP"], [98, 4, 1, "", "task"], [98, 4, 1, "", "temperature"], [98, 4, 1, "", "topK"], [98, 4, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[100, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[100, 4, 1, "", "configProtoBytes"], [100, 4, 1, "", "ignoreTokenIds"], [100, 4, 1, "", "langId"], [100, 2, 1, "", "loadSavedModel"], [100, 4, 1, "", "maxInputLength"], [100, 4, 1, "", "maxOutputLength"], [100, 4, 1, "", "name"], [100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setConfigProtoBytes"], [100, 2, 1, "", "setIgnoreTokenIds"], [100, 2, 1, "", "setLangId"], [100, 2, 1, "", "setMaxInputLength"], [100, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[101, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[101, 4, 1, "", "configProtoBytes"], [101, 4, 1, "", "doSample"], [101, 4, 1, "", "ignoreTokenIds"], [101, 2, 1, "", "loadSavedModel"], [101, 4, 1, "", "maxOutputLength"], [101, 4, 1, "", "minOutputLength"], [101, 4, 1, "", "name"], [101, 4, 1, "", "noRepeatNgramSize"], [101, 2, 1, "", "pretrained"], [101, 4, 1, "", "repetitionPenalty"], [101, 2, 1, "", "setConfigProtoBytes"], [101, 2, 1, "", "setDoSample"], [101, 2, 1, "", "setIgnoreTokenIds"], [101, 2, 1, "", "setMaxOutputLength"], [101, 2, 1, "", "setMinOutputLength"], [101, 2, 1, "", "setNoRepeatNgramSize"], [101, 2, 1, "", "setRepetitionPenalty"], [101, 2, 1, "", "setTask"], [101, 2, 1, "", "setTemperature"], [101, 2, 1, "", "setTopK"], [101, 2, 1, "", "setTopP"], [101, 4, 1, "", "task"], [101, 4, 1, "", "temperature"], [101, 4, 1, "", "topK"], [101, 4, 1, "", "topP"]], "sparknlp.annotator.spell_check": [[102, 0, 0, "-", "context_spell_checker"], [104, 0, 0, "-", "norvig_sweeting"], [105, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[102, 1, 1, "", "ContextSpellCheckerApproach"], [102, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[102, 2, 1, "", "addRegexClass"], [102, 2, 1, "", "addVocabClass"], [102, 4, 1, "", "batchSize"], [102, 4, 1, "", "caseStrategy"], [102, 4, 1, "", "classCount"], [102, 4, 1, "", "compoundCount"], [102, 4, 1, "", "configProtoBytes"], [102, 4, 1, "", "epochs"], [102, 4, 1, "", "errorThreshold"], [102, 4, 1, "", "finalRate"], [102, 4, 1, "", "initialRate"], [102, 4, 1, "", "languageModelClasses"], [102, 4, 1, "", "maxCandidates"], [102, 4, 1, "", "maxWindowLen"], [102, 4, 1, "", "minCount"], [102, 4, 1, "", "name"], [102, 2, 1, "", "setBatchSize"], [102, 2, 1, "", "setCaseStrategy"], [102, 2, 1, "", "setClassCount"], [102, 2, 1, "", "setCompoundCount"], [102, 2, 1, "", "setConfigProtoBytes"], [102, 2, 1, "", "setEpochs"], [102, 2, 1, "", "setErrorThreshold"], [102, 2, 1, "", "setFinalRate"], [102, 2, 1, "", "setInitialRate"], [102, 2, 1, "", "setLanguageModelClasses"], [102, 2, 1, "", "setMaxCandidates"], [102, 2, 1, "", "setMaxWindowLen"], [102, 2, 1, "", "setMinCount"], [102, 2, 1, "", "setTradeoff"], [102, 2, 1, "", "setValidationFraction"], [102, 2, 1, "id0", "setWeightedDistPath"], [102, 2, 1, "", "setWordMaxDistance"], [102, 4, 1, "", "tradeoff"], [102, 4, 1, "", "validationFraction"], [102, 4, 1, "", "weightedDistPath"], [102, 4, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[102, 4, 1, "", "caseStrategy"], [102, 4, 1, "", "compareLowcase"], [102, 4, 1, "", "configProtoBytes"], [102, 4, 1, "", "correctSymbols"], [102, 4, 1, "", "errorThreshold"], [102, 4, 1, "", "gamma"], [102, 2, 1, "", "getWordClasses"], [102, 4, 1, "", "maxCandidates"], [102, 4, 1, "", "maxWindowLen"], [102, 4, 1, "", "name"], [102, 2, 1, "", "pretrained"], [102, 2, 1, "", "setCaseStrategy"], [102, 2, 1, "", "setCompareLowcase"], [102, 2, 1, "", "setConfigProtoBytes"], [102, 2, 1, "", "setCorrectSymbols"], [102, 2, 1, "", "setErrorThreshold"], [102, 2, 1, "", "setGamma"], [102, 2, 1, "", "setMaxCandidates"], [102, 2, 1, "", "setMaxWindowLen"], [102, 2, 1, "", "setTradeoff"], [102, 2, 1, "", "setWeights"], [102, 2, 1, "", "setWordMaxDistance"], [102, 4, 1, "", "tradeoff"], [102, 2, 1, "", "updateRegexClass"], [102, 2, 1, "", "updateVocabClass"], [102, 4, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[104, 1, 1, "", "NorvigSweetingApproach"], [104, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[104, 4, 1, "", "caseSensitive"], [104, 4, 1, "", "dictionary"], [104, 4, 1, "", "doubleVariants"], [104, 4, 1, "", "dupsLimit"], [104, 4, 1, "", "frequencyPriority"], [104, 4, 1, "", "intersections"], [104, 4, 1, "", "reductLimit"], [104, 2, 1, "", "setCaseSensitive"], [104, 2, 1, "", "setDictionary"], [104, 2, 1, "", "setDoubleVariants"], [104, 2, 1, "", "setFrequencyPriority"], [104, 2, 1, "", "setShortCircuit"], [104, 4, 1, "", "shortCircuit"], [104, 4, 1, "", "vowelSwapLimit"], [104, 4, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[104, 4, 1, "", "name"], [104, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[105, 1, 1, "", "SymmetricDeleteApproach"], [105, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[105, 4, 1, "", "corpus"], [105, 4, 1, "", "deletesThreshold"], [105, 4, 1, "", "dictionary"], [105, 4, 1, "", "dupsLimit"], [105, 4, 1, "", "frequencyThreshold"], [105, 4, 1, "", "maxEditDistance"], [105, 2, 1, "", "setDeletesThreshold"], [105, 2, 1, "", "setDictionary"], [105, 2, 1, "", "setFrequencyThreshold"], [105, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[105, 4, 1, "", "name"], [105, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[106, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[106, 4, 1, "", "language"], [106, 4, 1, "", "name"]], "sparknlp.annotator.stop_words_cleaner": [[107, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[107, 4, 1, "", "caseSensitive"], [107, 2, 1, "", "loadDefaultStopWords"], [107, 4, 1, "", "locale"], [107, 4, 1, "", "name"], [107, 2, 1, "", "pretrained"], [107, 2, 1, "", "setCaseSensitive"], [107, 2, 1, "", "setLocale"], [107, 2, 1, "", "setStopWords"], [107, 4, 1, "", "stopWords"]], "sparknlp.annotator.token": [[108, 0, 0, "-", "chunk_tokenizer"], [110, 0, 0, "-", "recursive_tokenizer"], [111, 0, 0, "-", "regex_tokenizer"], [112, 0, 0, "-", "token2_chunk"], [113, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[108, 1, 1, "", "ChunkTokenizer"], [108, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[108, 4, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[108, 4, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[110, 1, 1, "", "RecursiveTokenizer"], [110, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[110, 4, 1, "", "infixes"], [110, 4, 1, "", "name"], [110, 4, 1, "", "prefixes"], [110, 2, 1, "", "setInfixes"], [110, 2, 1, "", "setPrefixes"], [110, 2, 1, "", "setSuffixes"], [110, 2, 1, "", "setWhitelist"], [110, 4, 1, "", "suffixes"], [110, 4, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[110, 4, 1, "", "name"]], "sparknlp.annotator.token.regex_tokenizer": [[111, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[111, 4, 1, "", "maxLength"], [111, 4, 1, "", "minLength"], [111, 4, 1, "", "name"], [111, 4, 1, "", "pattern"], [111, 4, 1, "", "positionalMask"], [111, 4, 1, "", "preservePosition"], [111, 2, 1, "", "setMaxLength"], [111, 2, 1, "", "setMinLength"], [111, 2, 1, "", "setPattern"], [111, 2, 1, "", "setPositionalMask"], [111, 2, 1, "", "setPreservePosition"], [111, 2, 1, "", "setToLowercase"], [111, 2, 1, "", "setTrimWhitespace"], [111, 4, 1, "", "toLowercase"], [111, 4, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.token2_chunk": [[112, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token.token2_chunk.Token2Chunk": [[112, 4, 1, "", "name"]], "sparknlp.annotator.token.tokenizer": [[113, 1, 1, "", "Tokenizer"], [113, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[113, 2, 1, "", "addContextChars"], [113, 2, 1, "", "addException"], [113, 2, 1, "", "addInfixPattern"], [113, 2, 1, "", "addSplitChars"], [113, 4, 1, "", "caseSensitiveExceptions"], [113, 4, 1, "", "contextChars"], [113, 4, 1, "", "exceptions"], [113, 4, 1, "", "exceptionsPath"], [113, 2, 1, "", "getCaseSensitiveExceptions"], [113, 2, 1, "", "getContextChars"], [113, 2, 1, "", "getExceptions"], [113, 2, 1, "", "getInfixPatterns"], [113, 2, 1, "", "getPrefixPattern"], [113, 2, 1, "", "getSplitChars"], [113, 2, 1, "", "getSuffixPattern"], [113, 4, 1, "", "infixPatterns"], [113, 4, 1, "", "maxLength"], [113, 4, 1, "", "minLength"], [113, 4, 1, "", "name"], [113, 4, 1, "", "prefixPattern"], [113, 2, 1, "", "setCaseSensitiveExceptions"], [113, 2, 1, "", "setContextChars"], [113, 2, 1, "", "setExceptions"], [113, 2, 1, "", "setExceptionsPath"], [113, 2, 1, "", "setInfixPatterns"], [113, 2, 1, "", "setMaxLength"], [113, 2, 1, "", "setMinLength"], [113, 2, 1, "", "setPrefixPattern"], [113, 2, 1, "", "setSplitChars"], [113, 2, 1, "", "setSplitPattern"], [113, 2, 1, "", "setSuffixPattern"], [113, 2, 1, "", "setTargetPattern"], [113, 4, 1, "", "splitChars"], [113, 4, 1, "", "splitPattern"], [113, 4, 1, "", "suffixPattern"], [113, 4, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[113, 2, 1, "", "addSplitChars"], [113, 4, 1, "", "caseSensitiveExceptions"], [113, 4, 1, "", "exceptions"], [113, 4, 1, "", "name"], [113, 2, 1, "", "pretrained"], [113, 4, 1, "", "rules"], [113, 2, 1, "", "setSplitChars"], [113, 2, 1, "", "setSplitPattern"], [113, 4, 1, "", "splitChars"], [113, 4, 1, "", "splitPattern"], [113, 4, 1, "", "targetPattern"]], "sparknlp.annotator.ws": [[115, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[115, 1, 1, "", "WordSegmenterApproach"], [115, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[115, 4, 1, "", "ambiguityThreshold"], [115, 4, 1, "", "frequencyThreshold"], [115, 2, 1, "", "getAmbiguityThreshold"], [115, 2, 1, "", "getFrequencyThreshold"], [115, 2, 1, "", "getNIterations"], [115, 4, 1, "", "nIterations"], [115, 4, 1, "", "name"], [115, 4, 1, "", "posCol"], [115, 2, 1, "", "setAmbiguityThreshold"], [115, 2, 1, "", "setFrequencyThreshold"], [115, 2, 1, "", "setNIterations"], [115, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[115, 4, 1, "", "name"], [115, 2, 1, "", "pretrained"]], "sparknlp.base": [[116, 0, 0, "-", "chunk2_doc"], [117, 0, 0, "-", "doc2_chunk"], [118, 0, 0, "-", "document_assembler"], [119, 0, 0, "-", "embeddings_finisher"], [120, 0, 0, "-", "finisher"], [121, 0, 0, "-", "graph_finisher"], [122, 0, 0, "-", "has_recursive_fit"], [123, 0, 0, "-", "has_recursive_transform"], [125, 0, 0, "-", "light_pipeline"], [126, 0, 0, "-", "multi_document_assembler"], [127, 0, 0, "-", "recursive_pipeline"], [128, 0, 0, "-", "token_assembler"]], "sparknlp.base.chunk2_doc": [[116, 1, 1, "", "Chunk2Doc"]], "sparknlp.base.chunk2_doc.Chunk2Doc": [[116, 4, 1, "", "name"], [116, 2, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[117, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[117, 4, 1, "", "chunkCol"], [117, 4, 1, "", "failOnMissing"], [117, 4, 1, "", "isArray"], [117, 4, 1, "", "lowerCase"], [117, 4, 1, "", "name"], [117, 2, 1, "", "setChunkCol"], [117, 2, 1, "", "setFailOnMissing"], [117, 2, 1, "", "setIsArray"], [117, 2, 1, "", "setLowerCase"], [117, 2, 1, "", "setParams"], [117, 2, 1, "", "setStartCol"], [117, 2, 1, "", "setStartColByTokenIndex"], [117, 4, 1, "", "startCol"], [117, 4, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[118, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[118, 4, 1, "", "cleanupMode"], [118, 4, 1, "", "idCol"], [118, 4, 1, "", "inputCol"], [118, 4, 1, "", "metadataCol"], [118, 4, 1, "", "name"], [118, 4, 1, "", "outputCol"], [118, 2, 1, "", "setCleanupMode"], [118, 2, 1, "", "setIdCol"], [118, 2, 1, "", "setInputCol"], [118, 2, 1, "", "setMetadataCol"], [118, 2, 1, "", "setOutputCol"], [118, 2, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[119, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[119, 4, 1, "", "cleanAnnotations"], [119, 4, 1, "", "inputCols"], [119, 4, 1, "", "name"], [119, 4, 1, "", "outputAsVector"], [119, 4, 1, "", "outputCols"], [119, 2, 1, "", "setCleanAnnotations"], [119, 2, 1, "", "setInputCols"], [119, 2, 1, "", "setOutputAsVector"], [119, 2, 1, "", "setOutputCols"], [119, 2, 1, "", "setParams"]], "sparknlp.base.finisher": [[120, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[120, 4, 1, "", "annotationSplitSymbol"], [120, 4, 1, "", "cleanAnnotations"], [120, 4, 1, "", "includeMetadata"], [120, 4, 1, "", "inputCols"], [120, 4, 1, "", "name"], [120, 4, 1, "", "outputAsArray"], [120, 4, 1, "", "outputCols"], [120, 4, 1, "", "parseEmbeddingsVectors"], [120, 2, 1, "", "setAnnotationSplitSymbol"], [120, 2, 1, "", "setCleanAnnotations"], [120, 2, 1, "", "setIncludeMetadata"], [120, 2, 1, "", "setInputCols"], [120, 2, 1, "", "setOutputAsArray"], [120, 2, 1, "", "setOutputCols"], [120, 2, 1, "", "setParams"], [120, 2, 1, "", "setParseEmbeddingsVectors"], [120, 2, 1, "", "setValueSplitSymbol"], [120, 4, 1, "", "valueSplitSymbol"]], "sparknlp.base.graph_finisher": [[121, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[121, 4, 1, "", "cleanAnnotations"], [121, 4, 1, "", "inputCol"], [121, 4, 1, "", "name"], [121, 4, 1, "", "outputAsArray"], [121, 4, 1, "", "outputCol"], [121, 2, 1, "", "setCleanAnnotations"], [121, 2, 1, "", "setInputCol"], [121, 2, 1, "", "setOutputAsArray"], [121, 2, 1, "", "setOutputCol"], [121, 2, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[122, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[123, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.light_pipeline": [[125, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[125, 2, 1, "", "annotate"], [125, 2, 1, "", "fullAnnotate"], [125, 2, 1, "", "getIgnoreUnsupported"], [125, 2, 1, "", "setIgnoreUnsupported"], [125, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[126, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[126, 4, 1, "", "calculationsCol"], [126, 4, 1, "", "cleanupMode"], [126, 4, 1, "", "idCol"], [126, 4, 1, "", "inputCols"], [126, 4, 1, "", "metadataCol"], [126, 4, 1, "", "name"], [126, 4, 1, "", "outputCols"], [126, 2, 1, "", "setCleanupMode"], [126, 2, 1, "", "setIdCol"], [126, 2, 1, "", "setInputCols"], [126, 2, 1, "", "setMetadataCol"], [126, 2, 1, "", "setOutputCols"], [126, 2, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[127, 1, 1, "", "RecursivePipeline"], [127, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.token_assembler": [[128, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[128, 4, 1, "", "name"], [128, 4, 1, "", "preservePosition"], [128, 2, 1, "", "setParams"], [128, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[129, 0, 0, "-", "annotator_approach"], [130, 0, 0, "-", "annotator_model"], [131, 0, 0, "-", "annotator_properties"], [132, 0, 0, "-", "coverage_result"], [134, 0, 0, "-", "properties"], [135, 0, 0, "-", "read_as"], [136, 0, 0, "-", "recursive_annotator_approach"], [137, 0, 0, "-", "storage"], [138, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[129, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[130, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[130, 2, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[131, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[131, 2, 1, "", "getInputCols"], [131, 2, 1, "", "getLazyAnnotator"], [131, 2, 1, "", "getOutputCol"], [131, 4, 1, "", "inputCols"], [131, 4, 1, "", "lazyAnnotator"], [131, 4, 1, "", "outputCol"], [131, 2, 1, "", "setInputCols"], [131, 2, 1, "", "setLazyAnnotator"], [131, 2, 1, "", "setOutputCol"]], "sparknlp.common.coverage_result": [[132, 1, 1, "", "CoverageResult"]], "sparknlp.common.properties": [[134, 1, 1, "", "HasBatchedAnnotate"], [134, 1, 1, "", "HasCaseSensitiveProperties"], [134, 1, 1, "", "HasClassifierActivationProperties"], [134, 1, 1, "", "HasEmbeddingsProperties"], [134, 1, 1, "", "HasEnableCachingProperties"]], "sparknlp.common.properties.HasBatchedAnnotate": [[134, 4, 1, "", "batchSize"], [134, 2, 1, "", "getBatchSize"], [134, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[134, 4, 1, "", "caseSensitive"], [134, 2, 1, "", "getCaseSensitive"], [134, 2, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[134, 4, 1, "", "activation"], [134, 2, 1, "", "getActivation"], [134, 2, 1, "", "setActivation"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[134, 4, 1, "", "dimension"], [134, 2, 1, "", "getDimension"], [134, 2, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[134, 4, 1, "", "enableCaching"], [134, 2, 1, "", "getEnableCaching"], [134, 2, 1, "", "setEnableCaching"]], "sparknlp.common.read_as": [[135, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[135, 4, 1, "", "BINARY"], [135, 4, 1, "", "SPARK"], [135, 4, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[136, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[137, 1, 1, "", "HasStorage"], [137, 1, 1, "", "HasStorageModel"], [137, 1, 1, "", "HasStorageOptions"], [137, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[137, 2, 1, "", "getStoragePath"], [137, 2, 1, "", "setStoragePath"], [137, 4, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[137, 2, 1, "", "loadStorage"], [137, 2, 1, "", "loadStorages"], [137, 2, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[137, 4, 1, "", "enableInMemoryStorage"], [137, 2, 1, "", "getEnableInMemoryStorage"], [137, 2, 1, "", "getIncludeStorage"], [137, 4, 1, "", "includeStorage"], [137, 2, 1, "", "setEnableInMemoryStorage"], [137, 2, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[137, 2, 1, "", "getStorageRef"], [137, 2, 1, "", "setStorageRef"], [137, 4, 1, "", "storageRef"]], "sparknlp.common.utils": [[138, 5, 1, "", "ExternalResource"], [138, 5, 1, "", "RegexRule"]], "sparknlp.functions": [[139, 5, 1, "", "explode_annotations_col"], [139, 5, 1, "", "filter_by_annotations_col"], [139, 5, 1, "", "map_annotations"], [139, 5, 1, "", "map_annotations_array"], [139, 5, 1, "", "map_annotations_col"], [139, 5, 1, "", "map_annotations_cols"], [139, 5, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[141, 0, 0, "-", "annotator_java_ml"], [142, 0, 0, "-", "annotator_transformer"], [143, 0, 0, "-", "extended_java_wrapper"], [145, 0, 0, "-", "params_getters_setters"], [146, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[141, 1, 1, "", "AnnotatorJavaMLReadable"], [141, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[141, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[142, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[143, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[143, 2, 1, "", "apply"], [143, 2, 1, "", "getDataFrame"], [143, 2, 1, "", "new_java_array"], [143, 2, 1, "", "new_java_array_integer"], [143, 2, 1, "", "new_java_array_string"], [143, 2, 1, "", "new_java_obj"], [143, 2, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[145, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[145, 2, 1, "", "getParamValue"], [145, 4, 1, "", "getter_attrs"], [145, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[146, 1, 1, "", "RecursiveEstimator"], [146, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[146, 2, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[146, 2, 1, "", "transform_recursive"]], "sparknlp.logging": [[147, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[147, 1, 1, "", "CometLogger"], [147, 3, 1, "", "comet_ml"]], "sparknlp.logging.comet.CometLogger": [[147, 2, 1, "", "end"], [147, 2, 1, "", "log_asset"], [147, 2, 1, "", "log_asset_data"], [147, 2, 1, "", "log_completed_run"], [147, 2, 1, "", "log_metrics"], [147, 2, 1, "", "log_parameters"], [147, 2, 1, "", "log_pipeline_parameters"], [147, 2, 1, "", "log_visualization"], [147, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[150, 0, 0, "-", "pretrained_pipeline"], [151, 0, 0, "-", "resource_downloader"], [152, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[150, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[150, 2, 1, "", "annotate"], [150, 2, 1, "", "from_disk"], [150, 2, 1, "", "fullAnnotate"], [150, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[151, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[151, 2, 1, "", "clearCache"], [151, 2, 1, "", "downloadModel"], [151, 2, 1, "", "downloadModelDirectly"], [151, 2, 1, "", "downloadPipeline"], [151, 2, 1, "", "showAvailableAnnotators"], [151, 2, 1, "", "showPublicModels"], [151, 2, 1, "", "showPublicPipelines"], [151, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[152, 5, 1, "", "printProgress"]], "sparknlp.training": [[153, 0, 0, "-", "conll"], [154, 0, 0, "-", "conllu"], [156, 0, 0, "-", "pos"], [157, 0, 0, "-", "pub_tator"]], "sparknlp.training.conll": [[153, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[153, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[154, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[154, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[156, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[156, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[157, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[157, 2, 1, "", "readDataset"]], "sparknlp.util": [[158, 1, 1, "", "CoNLLGenerator"], [158, 5, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[158, 2, 1, "id0", "exportConllFiles"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": [1, 159], "refer": [1, 159], "get": [10, 165], "start": 10, "spark": [10, 11, 160, 165, 169], "nlp": [10, 11, 160, 169], "cheat": 10, "sheet": 10, "requir": 10, "instal": [10, 160], "us": [10, 160, 169], "conda": 10, "virtualenv": 10, "session": 10, "from": 10, "python": 10, "document": 11, "content": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158], "sparknlp": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], "annot": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 163, 164, 165], "modul": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159], "class": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 141, 142, 143, 145, 146, 147, 150, 151, 153, 154, 156, 157, 158], "chunker": 13, "classifier_dl": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "albert_for_question_answ": 14, "albert_for_sequence_classif": 15, "albert_for_token_classif": 16, "bert_for_question_answ": 17, "bert_for_sequence_classif": 18, "bert_for_token_classif": 19, "deberta_for_question_answ": 21, "deberta_for_sequence_classif": 22, "deberta_for_token_classif": 23, "distil_bert_for_question_answ": 24, "distil_bert_for_sequence_classif": 25, "distil_bert_for_token_classif": 26, "submodul": [27, 40, 43, 55, 67, 69, 70, 72, 77, 82, 89, 91, 94, 99, 103, 109, 114, 124, 133, 140, 144, 148, 149, 155], "longformer_for_question_answ": 28, "longformer_for_sequence_classif": 29, "longformer_for_token_classif": 30, "multi_classifier_dl": 31, "roberta_for_question_answ": 32, "roberta_for_sequence_classif": 33, "roberta_for_token_classif": 34, "xlm_roberta_for_question_answ": 35, "xlm_roberta_for_sequence_classif": 36, "xlm_roberta_for_token_classif": 37, "xlnet_for_sequence_classif": 38, "xlnet_for_token_classif": 39, "coref": [40, 41], "spanbert_coref": 41, "depend": [42, 43, 44], "dependency_pars": 42, "typed_dependency_pars": 44, "document_norm": 45, "embed": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "albert_embed": 46, "bert_embed": 47, "bert_sentence_embed": 48, "camambert_embed": 49, "chunk_embed": 50, "deberta_embed": 51, "distil_bert_embed": 52, "doc2vec": 53, "elmo_embed": 54, "longformer_embed": 56, "roberta_embed": 57, "roberta_sentence_embed": 58, "sentence_embed": 59, "universal_sentence_encod": 60, "word2vec": 61, "word_embed": 62, "xlm_roberta_embed": 63, "xlm_roberta_sentence_embed": 64, "xlnet_embed": 65, "er": [66, 67], "entity_rul": 66, "graph_extract": 68, "subpackag": [69, 140], "packag": [69, 140], "keyword_extract": [70, 71], "yake_keyword_extract": 71, "ld_dl": [72, 73], "language_detector_dl": 73, "lemmat": 74, "matcher": [75, 76, 77, 78, 79, 80], "big_text_match": 75, "date_match": 76, "multi_date_match": 78, "regex_match": 79, "text_match": 80, "n_gram_gener": 81, "ner": [82, 83, 84, 85, 86, 87], "ner_approach": 83, "ner_convert": 84, "ner_crf": 85, "ner_dl": 86, "ner_overwrit": 87, "normal": 88, "po": [89, 90, 156, 170], "perceptron": 90, "sentenc": [91, 92, 93, 165], "sentence_detector": 92, "sentence_detector_dl": 93, "sentiment": [94, 95, 96, 97], "sentiment_detector": 95, "sentiment_dl": 96, "vivekn_senti": 97, "seq2seq": [98, 99, 100, 101], "gpt2_transform": 98, "marian_transform": 100, "t5_transform": 101, "spell_check": [102, 103, 104, 105], "context_spell_check": 102, "norvig_sweet": 104, "symmetric_delet": 105, "stemmer": 106, "stop_words_clean": 107, "token": [108, 109, 110, 111, 112, 113, 165], "chunk_token": 108, "recursive_token": 110, "regex_token": 111, "token2_chunk": 112, "ws": [114, 115], "word_segment": 115, "base": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "chunk2_doc": 116, "doc2_chunk": 117, "document_assembl": 118, "embeddings_finish": 119, "finish": [120, 165], "graph_finish": 121, "has_recursive_fit": 122, "has_recursive_transform": 123, "light_pipelin": 125, "multi_document_assembl": 126, "recursive_pipelin": 127, "token_assembl": 128, "common": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 164], "annotator_approach": 129, "annotator_model": 130, "annotator_properti": 131, "coverage_result": 132, "properti": 134, "read_a": 135, "recursive_annotator_approach": 136, "storag": 137, "util": [138, 152, 158], "function": [138, 139, 140, 152, 158, 164, 166], "attribut": [140, 147], "intern": [141, 142, 143, 144, 145, 146], "annotator_java_ml": 141, "annotator_transform": 142, "extended_java_wrapp": 143, "params_getters_sett": 145, "recurs": 146, "log": [147, 148, 160, 162], "comet": [147, 160], "pretrain": [149, 150, 151, 152, 164, 168, 169], "pretrained_pipelin": 150, "resource_download": 151, "train": [153, 154, 155, 156, 157, 170], "conll": [153, 170], "conllu": [154, 170], "pub_tat": 157, "A": 160, "meta": 160, "machin": [160, 161], "learn": [160, 161], "platform": [160, 161], "pipelin": [160, 165, 168, 169], "paramet": 160, "evalu": 160, "metric": 160, "visual": 160, "run": 160, "an": 160, "offlin": 160, "experi": 160, "mlflow": 161, "lifecycl": 161, "third": 162, "parti": 162, "project": 162, "approach": 164, "model": 164, "note": 164, "avail": [164, 169], "set": 165, "up": 165, "your": 165, "own": 165, "type": 165, "necessari": 165, "import": 165, "construct": 165, "documentassembl": 165, "data": 165, "detect": 165, "out": 165, "put": 165, "all": 165, "togeth": 165, "ml": [165, 169], "helper": 166, "user": 167, "guid": 167, "light": 168, "convert": 168, "pipelinemodel": 168, "download": 169, "As": 169, "lightpipelin": 169, "load": 170, "dataset": 170, "spell": 170, "checker": 170, "pubtat": 170}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 56}})