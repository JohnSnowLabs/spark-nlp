Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 91, 92, 93, 96, 97, 98, 101, 102, 103, 104, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 138, 139, 140, 142, 143, 145, 146, 148, 151, 153, 154, 155, 156, 157, 159, 160, 164, 165, 171, 172, 176, 177, 178, 181, 182, 187, 189, 193, 194, 197, 198, 199, 201, 202, 203], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 96, 101, 102, 103, 104, 105, 108, 109, 114, 116, 117, 119, 121, 122, 124, 125, 128, 130, 131, 133, 140, 142, 145, 146, 154, 155, 156, 165, 169, 178, 181, 182, 184, 185, 187, 194, 196, 198, 199, 201, 202, 203, 204], "quick": [0, 194, 199], "refer": [0, 1, 5, 8, 48, 49, 51, 53, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 88, 105, 108, 116, 117, 120, 121, 122, 124, 125, 128, 130, 131, 142, 144, 145, 154, 165, 198, 200, 201], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 55, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 80, 82, 83, 85, 90, 91, 92, 96, 97, 101, 102, 103, 106, 108, 111, 116, 119, 130, 131, 138, 139, 142, 145, 148, 154, 164, 166, 169, 171, 184, 185, 189, 194, 198, 203], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 159, 160, 165, 169, 171, 176, 177, 178, 182, 184, 194, 198, 201, 202], "up": [0, 1, 5, 8, 22, 34, 52, 67, 72, 76, 78, 88, 108, 121, 122, 124, 125, 165, 171, 194, 198, 201, 202], "your": [0, 1, 22, 34, 39, 55, 66, 67, 74, 76, 78, 91, 92, 96, 97, 101, 102, 103, 106, 108, 109, 114, 119, 120, 128, 130, 135, 137, 142, 146, 196, 198, 201, 202, 204], "environ": [0, 195], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 63, 67, 78, 88, 124, 142], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 96, 97, 102, 103, 105, 106, 108, 109, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 139, 142, 146, 147, 156, 171], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 88, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 151, 181, 182, 189, 198, 201], "shell": 0, "packag": [0, 60, 65, 178, 195, 196], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 96, 97, 102, 103, 105, 106, 108, 109, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 139, 142, 156, 171], "nlp_2": [0, 171], "12": [0, 60, 80, 81, 82, 88, 93, 95, 101, 114, 128, 140, 153, 170, 171, 181, 187, 189, 197], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 151, 153, 154, 156, 157, 170, 171, 174, 177, 178, 181, 184, 185, 187, 188, 198, 199], "submit": [0, 178, 194], "extern": [0, 88, 91, 96, 97, 103, 128, 134, 155, 169, 184, 185, 187, 188], "jar": [0, 171], "after": [0, 54, 55, 57, 67, 74, 75, 78, 93, 95, 101, 108, 137, 157, 178, 197, 198], "compil": 0, "build": [0, 65, 66, 74, 75, 85, 88, 92, 122, 178, 194], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 169, 170, 171, 177, 178, 182, 184, 187, 188, 189, 194, 195, 197, 198, 199, 201, 202, 203, 204], "built": [0, 22, 34, 154], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 49, 51, 52, 60, 88, 108, 121, 122, 125, 126, 154, 165], "apach": [0, 154, 171], "x": [0, 34, 170, 184, 204], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 139, 142, 145, 146, 147, 154, 157, 165, 178, 181, 182, 188, 194, 195, 197, 198, 199, 200, 201, 202], "you": [0, 14, 18, 29, 38, 44, 55, 57, 58, 64, 66, 68, 74, 76, 85, 93, 104, 108, 124, 146, 148, 153, 171, 178, 182, 187, 189, 194, 196, 198, 199, 202, 203, 204], "need": [0, 5, 7, 8, 10, 55, 57, 66, 68, 74, 79, 83, 85, 88, 93, 96, 102, 103, 106, 111, 114, 117, 120, 122, 128, 130, 131, 138, 139, 143, 151, 153, 178, 182, 184, 185, 187, 194, 196, 198, 199, 202, 204], "java": [0, 90, 109, 126, 158, 159, 167, 173, 174, 177, 182], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 57, 59, 60, 61, 62, 63, 65, 66, 68, 71, 72, 73, 74, 75, 80, 81, 82, 93, 98, 103, 104, 108, 111, 122, 128, 140, 142, 184, 189], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 55, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 74, 77, 79, 80, 81, 82, 83, 85, 88, 90, 91, 93, 96, 98, 101, 103, 104, 105, 106, 108, 114, 116, 117, 120, 121, 122, 124, 125, 128, 132, 134, 142, 146, 153, 155, 156, 164, 165, 166, 170, 171, 178, 182, 188, 189, 194, 195, 196, 197, 198, 199, 202, 203, 204], "note": [0, 5, 7, 8, 14, 18, 22, 29, 34, 38, 39, 44, 52, 60, 66, 69, 74, 76, 79, 80, 82, 88, 103, 108, 121, 122, 124, 125, 153, 171, 203], "sinc": [0, 59, 73, 88, 122, 171, 198, 199, 203], "version": [0, 8, 59, 66, 110, 111, 134, 160, 165, 171, 176, 177, 181, 182, 198, 203], "6": [0, 22, 39, 51, 61, 62, 65, 69, 88, 92, 97, 98, 104, 114, 121, 130, 140, 171, 185, 189, 198], "deprec": [0, 171], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 51, 52, 53, 76, 79, 83, 90, 93, 95, 101, 102, 103, 106, 111, 116, 117, 121, 122, 124, 125, 128, 134, 165, 171, 177, 178, 182, 194, 196, 198], "consid": [0, 58, 79, 85, 88, 108, 124, 128, 130, 131, 133, 137, 171, 182], "stick": [0, 171], "lower": [0, 59, 60, 88, 108, 126, 128, 144, 171], "7": [0, 9, 39, 51, 61, 62, 65, 93, 95, 114, 122, 147, 187, 189, 197], "we": [0, 5, 7, 8, 22, 34, 49, 51, 53, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 88, 102, 103, 106, 108, 117, 121, 122, 124, 125, 128, 130, 139, 153, 170, 194, 197, 198, 199, 202, 203, 204], "recommend": [0, 52, 69, 82, 108, 119, 120, 121, 122, 124, 125], "It": [0, 8, 12, 14, 16, 18, 22, 24, 27, 29, 32, 34, 36, 38, 39, 40, 42, 44, 45, 49, 51, 52, 58, 59, 61, 62, 63, 65, 66, 67, 72, 74, 75, 78, 80, 81, 83, 88, 98, 120, 121, 124, 126, 128, 130, 131, 137, 147, 153, 182, 197, 202], "have": [0, 5, 14, 18, 22, 29, 34, 38, 39, 44, 60, 63, 66, 71, 74, 75, 79, 88, 96, 98, 101, 102, 103, 104, 108, 114, 116, 117, 122, 131, 140, 157, 173, 198, 199, 202], "basic": [0, 51, 88, 116, 197], "knowledg": [0, 66, 88, 148], "framework": [0, 7, 121, 124, 125], "work": [0, 8, 49, 66, 71, 72, 90, 108, 121, 124, 125, 135, 197, 199, 203], "befor": [0, 59, 79, 93, 95, 109, 121, 125, 126, 130, 138, 142, 159, 177, 194], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 90, 91, 92, 93, 96, 97, 102, 103, 106, 114, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 133, 135, 137, 142, 145, 154, 155, 182, 195, 196, 200, 203], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 153, 154, 156, 157, 178, 181, 184, 185, 187, 189, 194, 198, 199, 201, 202, 203], "first": [0, 2, 65, 67, 68, 69, 71, 78, 80, 81, 88, 96, 102, 103, 104, 116, 121, 124, 125, 128, 133, 138, 146, 157, 164, 194, 198, 199, 203], "let": [0, 66, 108, 137, 198], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 29, 31, 35, 38, 41, 44, 49, 51, 52, 53, 59, 60, 63, 65, 66, 67, 68, 72, 74, 75, 78, 80, 81, 83, 88, 96, 103, 106, 108, 109, 120, 121, 122, 124, 125, 126, 128, 130, 131, 137, 138, 139, 142, 143, 147, 153, 158, 159, 165, 167, 170, 173, 177, 178, 194, 197, 198, 199, 202], "make": [0, 49, 51, 59, 63, 72, 73, 80, 81, 88, 108, 117, 120, 121, 130, 200, 204], "sure": [0, 120], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 22, 34, 39, 61, 62, 67, 74, 78, 79, 85, 103, 108, 111, 114, 135, 142, 153, 155, 170, 184, 185, 187, 188, 198, 199, 202, 204], "new": [0, 2, 3, 4, 9, 39, 48, 51, 54, 60, 61, 62, 65, 69, 71, 72, 79, 82, 104, 105, 108, 110, 111, 121, 122, 125, 128, 134, 147, 160, 165, 176, 177, 197, 198], "manag": [0, 88, 182, 195], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 51, 52, 58, 59, 60, 61, 62, 63, 76, 79, 82, 83, 86, 90, 93, 103, 106, 108, 121, 122, 125, 128, 133, 138, 142, 146, 148, 164, 165, 178, 182, 193, 198, 203], "depend": [0, 2, 48, 63, 73, 76, 82, 83, 85, 86, 88, 90, 103, 124, 128, 142, 171], "Then": [0, 22, 34, 102, 103, 157, 178, 198], "sparknlp": [0, 194, 197, 198, 199, 200, 202, 203, 204], "n": [0, 81, 88, 98, 101, 102, 103, 108, 116, 117, 121, 122, 125, 137, 153, 156, 165, 170, 181], "y": [0, 34], "activ": [0, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 88], "jupyt": [0, 126, 178, 194], "now": [0, 63, 117, 153, 199], "should": [0, 2, 3, 4, 10, 22, 34, 39, 49, 51, 52, 53, 58, 67, 68, 78, 80, 88, 90, 97, 98, 102, 103, 108, 109, 111, 116, 117, 124, 126, 128, 138, 153, 159, 160, 173, 177, 181, 184, 185], "readi": [0, 22, 181, 198], "notebook": [0, 126, 178, 194], "run": [0, 66, 88, 126, 178, 182, 195, 203], "also": [0, 22, 34, 39, 49, 51, 52, 53, 59, 60, 69, 72, 79, 80, 81, 83, 85, 88, 93, 96, 101, 102, 103, 110, 111, 117, 120, 121, 133, 153, 156, 160, 165, 176, 194, 198, 199, 200, 201, 203], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 181, 182, 184, 185, 187, 188, 189, 195], "bin": 0, "A": [0, 5, 7, 39, 48, 49, 60, 74, 75, 79, 83, 88, 91, 92, 96, 97, 98, 105, 106, 108, 109, 119, 121, 122, 124, 125, 126, 130, 131, 138, 139, 165, 178, 187, 196, 198, 204], "retriev": [0, 68, 71, 79, 91, 130, 131, 132, 178, 181, 194, 198, 199], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 170, 178, 181, 184, 185, 187, 188, 189, 194, 197, 198, 201, 202, 203, 204], "manual": [0, 197], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 92, 121, 122, 124, 125, 171, 184, 185, 187, 188], "becaus": [0, 108, 109, 119, 126, 159, 177], "other": [0, 5, 9, 34, 49, 52, 63, 76, 77, 85, 88, 106, 119, 121, 122, 125, 128, 135, 137, 146, 147, 198], "configur": [0, 49, 76, 139, 171], "includ": [0, 51, 59, 61, 62, 67, 69, 78, 80, 81, 82, 85, 88, 93, 101, 102, 103, 108, 121, 122, 125, 126, 128, 147, 178, 188, 195, 197, 198, 199, 204], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 60, 61, 63, 65, 66, 72, 74, 80, 82, 83, 85, 88, 93, 96, 117, 124, 128, 133, 142, 155, 157, 198, 199], "builder": [0, 134, 171], "appnam": [0, 171], "master": [0, 171], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 88, 121, 122, 124, 125, 133, 153, 171, 181, 202], "config": [0, 171, 195], "driver": [0, 171], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 60, 69, 79, 171], "16g": [0, 171], "maxresults": [0, 171], "0": [0, 5, 7, 8, 9, 10, 22, 34, 39, 48, 49, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 110, 111, 114, 116, 117, 119, 121, 122, 125, 126, 128, 131, 134, 139, 140, 142, 145, 146, 147, 153, 154, 156, 157, 160, 165, 170, 171, 174, 176, 177, 178, 181, 182, 185, 187, 188, 189, 194, 197, 198, 203, 204], "kryoseri": [0, 171], "buffer": [0, 62, 79, 171], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 60, 61, 62, 63, 65, 66, 68, 71, 72, 73, 74, 75, 80, 81, 82, 88, 131, 171], "2000m": [0, 171], "getorcr": [0, 171], "main": [1, 83, 126, 139, 197, 201, 204], "page": [1, 59, 122, 181, 193, 201, 203], "github": [1, 65, 71, 74, 124, 181], "issu": [1, 142], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 170, 178, 181, 182, 184, 185, 187, 188, 189, 194, 197, 198, 199, 201, 202, 203, 204], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 96, 97, 101, 102, 103, 105, 106, 108, 109, 111, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 134, 135, 137, 139, 142, 159, 165, 171, 177, 178, 181, 182, 194, 195, 197, 201, 203, 204], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 90, 91, 102, 103, 114, 117, 121, 122, 124, 125, 128, 130, 131, 133, 142, 182], "welcom": [1, 5, 7, 8], "python": [1, 90, 171], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 108, 109, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 192, 194, 197, 198], "inform": [1, 55, 57, 71, 73, 79, 80, 88, 93, 101, 121, 128, 145, 154, 188, 194, 195, 196, 197, 198, 204], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 105, 108, 109, 111, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 134, 138, 139, 140, 142, 144, 145, 146, 147, 153, 154, 155, 156, 157, 164, 165, 170, 171, 178, 181, 182, 184, 185, 187, 188, 195, 196, 197, 198, 199, 201], "librari": [1, 49, 51, 52, 53, 90, 144, 145, 146, 154, 157, 203], "get": [1, 8, 22, 34, 88, 100, 114, 126, 128, 134, 139, 142, 143, 145, 146, 147, 151, 153, 154, 160, 165, 176, 194, 198, 203, 204], "start": [1, 5, 11, 15, 19, 23, 26, 31, 35, 41, 72, 85, 88, 102, 103, 117, 144, 171, 178, 194, 197, 199, 202, 203], "cheat": 1, "sheet": [1, 59], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 57, 60, 62, 65, 68, 69, 77, 80, 81, 88, 103, 106, 120, 128, 140, 142, 144, 146, 157, 197, 198, 199], "instal": [1, 178, 196], "session": [1, 171, 184, 185, 187, 188], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 159, 165, 170, 171, 174, 177, 178, 181, 182, 184, 185, 187, 188, 189, 194, 197, 198, 199, 202, 203, 204], "user": [1, 101, 102, 108, 109, 139, 155, 171, 178, 194], "guid": [1, 195], "annot": [1, 3, 4, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 169, 170, 171, 172, 173, 175, 177, 178, 181, 182, 183, 187, 189, 194, 195, 200, 201, 202, 203, 204], "own": [1, 22, 34, 39, 55, 67, 78, 91, 92, 96, 97, 102, 103, 106, 114, 119, 120, 128, 130, 135, 137, 142, 201, 202, 204], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 171, 177, 178, 180, 181, 182, 183, 195, 197, 198, 201], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 90, 91, 92, 93, 96, 97, 102, 103, 104, 105, 114, 117, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 139, 142, 146, 147, 153, 170, 171, 178, 194, 197, 201], "dataset": [1, 22, 34, 39, 55, 57, 63, 67, 68, 71, 72, 73, 74, 75, 78, 79, 88, 90, 102, 103, 111, 117, 122, 128, 142, 177, 181, 184, 185, 187, 188, 201], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 80, 81, 82, 88, 90, 91, 92, 96, 97, 100, 102, 103, 106, 110, 111, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 135, 137, 142, 144, 153, 171, 178, 181, 194, 198, 199, 201, 202], "light": [1, 5, 66, 82, 88, 153, 201, 203], "helper": [1, 114, 142, 148, 170, 187, 188, 189, 201, 204], "function": [1, 69, 79, 121, 125, 146, 182, 193, 201], "third": [1, 116, 133, 179, 184], "parti": [1, 179], "project": [1, 88, 124, 126, 178, 195], "log": [1, 22, 34, 39, 103, 108, 111, 117, 122, 171], "api": [1, 108, 194, 198, 201], "modul": [1, 30, 56, 70, 84, 86, 87, 89, 94, 99, 107, 112, 113, 115, 118, 123, 129, 136, 141, 152, 163, 175, 180, 186], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 170, 178, 181, 184, 185, 186, 187, 188, 195, 197, 198, 202, 203, 204], "format": [2, 3, 4, 8, 49, 51, 52, 53, 55, 57, 83, 85, 91, 92, 93, 95, 96, 97, 102, 103, 106, 111, 119, 121, 125, 130, 131, 139, 142, 143, 145, 147, 148, 151, 154, 156, 184, 185, 187, 188, 189, 195, 204], "annotatortyp": [2, 3, 4, 64, 98, 144, 145, 151, 154, 197], "begin": [2, 48, 101, 122, 137, 139, 144, 145, 154, 170, 197], "end": [2, 11, 15, 19, 23, 26, 31, 35, 41, 48, 103, 108, 109, 117, 121, 137, 139, 142, 145, 154, 170, 178, 184, 194, 197, 199], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 170, 171, 178, 181, 184, 185, 189, 194, 195, 197, 198, 199, 202, 203], "metadata": [2, 3, 4, 40, 48, 54, 88, 97, 102, 103, 105, 114, 145, 147, 151, 153, 154, 170, 178, 182, 197, 199], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 85, 86, 102, 103, 104, 126, 145, 146, 147, 153, 154, 165, 170, 171, 177, 181, 197], "repres": [2, 3, 4, 55, 57, 60, 65, 71, 82, 83, 85, 92, 97, 98, 108, 109, 139, 178, 181, 198], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 160, 165, 170, 171, 178, 187, 194, 197, 198, 199], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 163, 166, 170, 171, 173, 174, 175, 178, 181, 182, 184, 185, 187, 188, 189, 193, 195, 196, 197, 198, 200, 201, 202, 204], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 90, 91, 92, 96, 97, 102, 103, 104, 105, 106, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 139, 142, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 163, 171, 175, 178, 181, 182, 184, 185, 187, 188, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204], "detail": [2, 3, 4, 8, 52, 80, 81, 88, 105, 121, 122, 125, 165], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 160, 165, 169, 170, 171, 176, 177, 178, 181, 182, 184, 185, 187, 188], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 160, 165, 169, 170, 171, 176, 178, 181, 182, 184, 185, 187, 188], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 138, 139, 142, 145, 147, 153, 154, 156, 165, 170, 171, 178, 181, 182, 184, 185, 187, 188, 189, 194, 197, 198, 199, 201, 202, 204], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 170, 172, 181, 187, 197, 198, 201], "possibl": [2, 3, 4, 64, 66, 80, 81, 83, 116, 128, 131, 145, 154, 164, 166, 178, 194], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 62, 64, 69, 71, 77, 80, 83, 85, 88, 90, 91, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 130, 133, 134, 138, 139, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 160, 164, 165, 166, 176, 178, 194, 204], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 88, 91, 92, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 119, 120, 121, 122, 124, 125, 128, 130, 131, 132, 133, 140, 142, 144, 146, 153, 155, 157, 165, 171, 181, 184, 188, 189, 198, 202, 203], "wordpiec": 2, "word_embed": [2, 60, 61, 63, 64, 65, 66, 69, 70, 72, 74, 76, 78, 80, 82, 86, 102, 103, 111], "sentence_embed": [2, 22, 34, 39, 62, 67, 68, 70, 71, 73, 75, 77, 81, 86, 126, 178, 194, 198], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 51, 53, 178, 194, 198], "date": [2, 54, 93, 95, 96], "entiti": [2, 9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 48, 51, 54, 63, 83, 84, 85, 92, 97, 99, 100, 101, 102, 103, 104, 105, 135, 140, 147, 153, 181], "sentiment": [2, 22, 34, 39, 69, 82, 86, 125, 171, 198, 199], "po": [2, 10, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 55, 57, 85, 86, 102, 103, 137, 142, 153, 170, 171, 181, 184, 186, 197, 201, 202, 203], "chunk": [2, 9, 10, 11, 15, 19, 23, 26, 31, 35, 40, 41, 54, 58, 64, 67, 78, 83, 88, 92, 96, 97, 98, 101, 135, 140, 144, 147, 170, 178, 188, 194, 204], "named_ent": [2, 13, 17, 21, 25, 28, 33, 37, 43, 46, 85, 101, 102, 103, 104, 105, 111, 153, 181], "negex": 2, "labeled_depend": [2, 57], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 144, 154, 157, 165, 182, 198], "keyword": [2, 87, 88, 119], "dummi": [2, 59], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 85, 88, 90, 93, 98, 100, 102, 103, 106, 108, 110, 111, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 131, 134, 138, 139, 142, 165, 171, 178, 184], "index": [2, 88, 92, 138, 171, 184], "charact": [2, 59, 69, 72, 83, 90, 96, 98, 106, 116, 117, 128, 130, 131, 138, 139, 142, 147], "under": [2, 66, 73, 82, 88, 171], "last": [2, 93, 95, 135, 189, 202], "string": [2, 8, 22, 34, 39, 48, 55, 59, 83, 96, 98, 104, 106, 117, 125, 131, 133, 137, 144, 145, 147, 151, 153, 154, 202], "dict": [2, 3, 4, 55, 57, 83, 91, 92, 96, 97, 102, 104, 105, 106, 108, 111, 119, 128, 130, 131, 139, 153, 169, 171, 177, 178, 181], "associ": [2, 3, 4, 34, 77, 83, 96, 101, 108, 178], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 85, 88, 90, 93, 96, 100, 101, 103, 104, 105, 106, 108, 110, 116, 117, 121, 122, 124, 125, 126, 128, 133, 137, 139, 146, 147, 153, 154, 160, 170, 177, 178, 181, 182, 189, 193, 198], "vector": [2, 34, 61, 62, 64, 65, 67, 68, 69, 77, 78, 79, 126, 146, 147, 197], "where": [2, 34, 65, 69, 83, 88, 91, 92, 96, 97, 98, 108, 114, 117, 119, 121, 122, 125, 126, 130, 131, 142, 144, 187], "applic": [2, 53, 88, 121, 164, 178, 179, 194, 196], "copi": [2, 3, 4, 182], "differ": [2, 3, 4, 49, 51, 55, 57, 69, 71, 74, 75, 80, 82, 88, 93, 116, 117, 128, 139, 142, 153, 178, 202], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 90, 91, 92, 97, 98, 100, 102, 103, 105, 108, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 137, 139, 142, 144, 153, 165, 169, 170, 171, 172, 177, 181, 182, 184, 185, 187, 188], "newli": [2, 3, 4], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 182, 198], "datatyp": [2, 170], "structtyp": 2, "schema": [2, 101, 178, 194], "look": [2, 103, 130, 197], "like": [2, 5, 11, 15, 19, 22, 23, 26, 31, 35, 41, 48, 52, 59, 60, 64, 66, 72, 76, 82, 85, 88, 96, 101, 108, 117, 120, 122, 128, 139, 142, 178, 194, 196, 197], "struct": [2, 145, 151, 154], "containsnul": [2, 34, 143, 145, 151, 154], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 90, 92, 93, 95, 97, 101, 103, 106, 116, 117, 126, 128, 130, 138, 139, 142, 143, 144, 145, 146, 147, 148, 151, 154, 156, 178, 182, 184, 185, 188, 189, 194, 198, 199], "nullabl": [2, 34, 143, 145, 151, 154], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 153, 154, 156, 157, 170, 171, 178, 181, 184, 185, 187, 189, 194, 197, 198, 199, 204], "integ": [2, 49, 51, 52, 53, 145, 151, 154], "map": [2, 10, 34, 79, 83, 108, 110, 111, 114, 128, 145, 151, 154, 160, 165, 170, 176, 177, 197], "kei": [2, 5, 49, 55, 57, 74, 75, 80, 81, 91, 105, 145, 151, 153, 154, 178, 181, 194], "valuecontainsnul": [2, 145, 151, 154], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 90, 91, 98, 103, 110, 114, 116, 117, 121, 122, 124, 125, 128, 135, 137, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 170, 199, 202], "element": [2, 34, 98, 108, 143, 145, 151, 154], "float": [2, 3, 5, 7, 8, 22, 34, 39, 49, 52, 54, 90, 102, 103, 105, 108, 110, 111, 117, 121, 122, 125, 126, 128, 142, 143, 145, 146, 153, 154, 165], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 92, 121, 122, 124, 125, 153, 170, 177, 181, 184, 185, 187, 188], "arraytyp": [2, 144, 170], "fromrow": 2, "row": [2, 40, 58, 79, 116, 117, 120, 145, 154, 156, 170, 184], "column": [2, 9, 22, 34, 39, 59, 79, 91, 100, 102, 103, 110, 111, 114, 120, 126, 134, 139, 142, 143, 144, 145, 146, 147, 148, 151, 154, 157, 160, 170, 181, 184, 187, 198], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 156, 157, 165, 170, 173, 177, 178, 181, 194, 197, 198, 199, 202, 203, 204], "an": [2, 5, 7, 8, 10, 22, 34, 39, 40, 49, 51, 52, 53, 55, 58, 59, 63, 65, 69, 71, 72, 73, 82, 83, 88, 90, 92, 93, 95, 96, 97, 98, 102, 103, 105, 108, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 135, 139, 142, 144, 145, 146, 147, 148, 153, 154, 157, 160, 165, 169, 170, 172, 176, 177, 178, 184, 185, 187, 188, 193, 195, 197, 198, 199, 201, 202], "annotationaudio": 3, "audio": [3, 143, 178], "alreadi": [3, 85, 88, 102, 103, 104, 139, 140, 153, 181, 202], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 81, 82, 85, 88, 90, 101, 102, 103, 111, 117, 121, 122, 125, 142, 143, 144, 145, 146, 147, 151, 154, 155, 157, 178, 194, 197, 198, 199, 200], "file": [3, 5, 7, 22, 34, 39, 55, 57, 59, 77, 79, 83, 91, 92, 96, 97, 102, 103, 106, 111, 117, 119, 128, 130, 131, 134, 139, 143, 156, 166, 171, 178, 184, 185, 187, 188, 194, 204], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 90, 103, 110, 121, 122, 124, 125, 128, 178], "annotationimag": [4, 153, 181], "origin": [4, 49, 51, 52, 53, 60, 67, 72, 74, 78, 101, 117, 121, 151], "height": [4, 49, 51, 52, 53, 151], "width": [4, 49, 51, 52, 53, 151], "nchannel": [4, 151], "mode": [4, 22, 34, 39, 103, 111, 130, 145, 151, 154, 178], "imag": [4, 49, 51, 52, 53, 151, 153, 181], "uri": [4, 182], "pixel": [4, 51], "number": [4, 8, 14, 18, 22, 29, 34, 38, 39, 44, 52, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 98, 100, 102, 103, 108, 110, 114, 116, 117, 121, 122, 125, 126, 128, 134, 142, 165, 184, 185], "color": 4, "channel": [4, 49, 51, 52, 53, 128], "opencv": 4, "concern": [5, 7, 8, 12, 49, 51, 52, 53, 54, 60], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 96, 97, 102, 103, 105, 106, 108, 109, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 139, 142, 156, 158, 159, 167, 173], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 96, 97, 102, 103, 105, 106, 108, 109, 114, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 135, 137, 139, 142, 150, 156, 159, 177], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 96, 97, 102, 103, 105, 106, 108, 109, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 159, 171, 177, 178, 181, 182, 199], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 48, 58, 60, 82, 101, 102, 103, 153, 170, 181, 198], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 49, 51, 53, 60, 68, 71, 77, 120, 121, 125, 198], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 58, 59, 63, 65, 66, 72, 74, 75, 79, 80, 81, 88, 108, 120, 121, 122, 128, 181, 198, 199], "propos": [5, 7, 49, 51, 60, 63, 65, 66, 73, 74, 75, 80, 81, 82], "self": [5, 7, 51, 60, 72, 124, 165], "supervis": [5, 7, 8, 60, 68, 69, 77, 88, 121, 122], "speech": [5, 7, 8, 10, 63, 113, 114, 142, 187, 204], "represent": [5, 7, 51, 60, 61, 62, 66, 67, 68, 69, 78, 79, 80, 81, 82, 101, 125, 156, 169], "learn": [5, 7, 22, 34, 39, 54, 60, 66, 67, 69, 74, 75, 77, 78, 80, 81, 82, 88, 102, 103, 110, 117, 121, 122, 125, 128, 178, 196], "mask": [5, 51, 65, 73, 80, 81, 82, 121, 138], "predict": [5, 8, 51, 65, 73, 103, 122, 125, 178, 194], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 60, 69, 82, 134], "unit": [5, 122, 134], "wei": [5, 51], "ning": 5, "hsu": 5, "benjamin": [5, 63], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 29, 38, 40, 44, 58, 63, 73, 85, 97, 110, 111, 130, 133, 139, 155, 160, 165, 176, 184, 197, 198, 202, 203], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 108, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 154, 156, 157, 164, 165, 166, 169, 170, 178, 184, 185, 187, 188, 194, 197, 198, 199, 203, 204], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 95, 96, 97, 102, 103, 106, 110, 111, 114, 117, 119, 121, 122, 124, 125, 128, 130, 131, 142, 153, 160, 165, 170, 172, 176, 181, 199], "pre": [5, 7, 8, 22, 34, 39, 53, 61, 62, 65, 66, 68, 69, 73, 77, 103, 111, 121, 125, 145, 147, 154, 157, 185, 198], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 88, 92, 93, 95, 117, 121, 122, 124, 125, 134, 153, 156, 160, 171, 197, 198, 199], "support": [5, 7, 8, 22, 34, 60, 72, 88, 103, 106, 117, 124, 133, 156, 171, 195], "appl": [5, 7, 62, 75, 81, 171], "silicon": [5, 7, 171], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 60, 72, 121], "instruct": [5, 7, 71], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 102, 103, 105, 114, 117, 121, 122, 124, 125, 128, 130, 131, 133, 142, 174], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 102, 103, 105, 108, 114, 117, 121, 122, 124, 125, 128, 130, 131, 132, 133, 142, 164, 166, 173, 174, 178, 197, 198], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 154, 156, 157, 160, 178, 194, 198, 199], "audio_assembl": [5, 7, 8, 152, 171], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 154, 156, 157, 160, 178, 194, 198, 199], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 134, 137, 138, 139, 142, 144, 145, 146, 147, 148, 153, 154, 156, 169, 170, 171, 178, 181, 182, 184, 185, 187, 188, 198], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 97, 99, 100, 102, 103, 105, 110, 114, 117, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 134, 135, 139, 142, 143, 144, 145, 146, 147, 148, 151, 154, 156, 157, 160, 170, 176, 178, 181, 182, 184, 187, 194, 198], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 86, 88, 90, 91, 93, 96, 102, 103, 114, 117, 121, 122, 124, 125, 128, 130, 131, 133, 142, 173, 181, 182, 194, 201], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 105, 106, 108, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 139, 142, 145, 146, 147, 148, 154, 157, 165, 178, 181, 182, 188, 194, 195, 196, 201, 203, 204], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 60, 61, 63, 65, 66, 72, 74, 80, 82, 88, 93, 96, 114, 116, 121, 122, 125, 142, 148, 153, 155, 178, 194, 202], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 72, 74, 76, 77, 78, 80, 82, 85, 88, 93, 95, 96, 103, 105, 106, 108, 109, 116, 117, 119, 121, 122, 124, 125, 130, 138, 142, 146, 153, 170, 182, 184, 185, 198, 199], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 60, 61, 63, 65, 66, 72, 74, 80, 82, 103, 146, 182], "5669": [5, 7, 8, 49, 51, 52, 53, 63], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 59, 63, 66, 68, 69, 71, 76, 80, 81, 85, 88, 93, 98, 101, 105, 108, 117, 121, 122, 125, 130, 138, 139, 145, 146, 147, 154, 157, 165, 178, 181, 188, 194, 195, 196, 198, 201, 204], "extend": [5, 7, 8, 10, 22, 34, 39, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 74, 76, 77, 79, 80, 82, 88, 90, 91, 93, 95, 96, 97, 98, 102, 103, 105, 106, 111, 114, 116, 117, 119, 120, 121, 124, 125, 126, 128, 130, 132, 133, 137, 139, 142, 145, 146, 147, 154, 157, 181], "hubertforctctestspec": 5, "paper": [5, 8, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 88, 117, 120, 121, 122, 124, 125, 142, 188, 204], "abstract": [5, 8, 49, 51, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 88, 121, 122, 124, 125, 134, 188, 204], "approach": [5, 8, 49, 51, 74, 75, 82, 88, 100, 102, 103, 105, 117, 119, 121, 122, 125, 128, 130, 131, 158, 201], "challeng": [5, 34, 51, 66, 69, 71, 74, 75, 88], "three": [5, 128, 140], "uniqu": [5, 108, 109, 121], "problem": [5, 34, 60, 69, 73, 121, 125, 128, 142], "multipl": [5, 8, 34, 53, 63, 83, 88, 93, 116, 121, 139, 170, 178, 184], "sound": [5, 58], "each": [5, 7, 14, 18, 22, 29, 34, 38, 39, 44, 49, 51, 52, 53, 58, 65, 67, 68, 73, 76, 78, 79, 83, 85, 88, 91, 92, 93, 96, 97, 98, 100, 102, 103, 105, 106, 108, 111, 114, 116, 117, 119, 121, 126, 128, 130, 131, 138, 139, 142, 145, 154, 164, 170, 177, 187, 199], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 160, 170, 177, 181, 184, 185, 187, 188, 198, 199, 202, 204], "utter": 5, "lexicon": 5, "dure": [5, 22, 34, 39, 66, 71, 102, 103, 111, 116, 126, 128, 171, 178, 194], "phase": [5, 66, 121], "variabl": [5, 67, 78], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 58, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 78, 80, 81, 82, 98, 106, 108, 116, 117, 121, 122, 124, 125, 126, 128, 138, 139, 165], "explicit": [5, 116, 122], "segment": [5, 48, 49, 51, 66, 74, 141, 142], "deal": [5, 153, 202], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 27, 28, 32, 36, 40, 42, 45, 52, 60, 61, 62, 65, 66, 72, 73, 74, 75, 80, 81, 82, 103, 104, 105, 121, 125], "util": [5, 64, 102, 105, 116, 117, 131, 155, 162, 163, 166, 168, 171, 172, 176, 180], "offlin": [5, 178], "cluster": [5, 68, 71, 77, 171], "step": [5, 22, 34, 39, 67, 78, 103, 111, 178, 194, 198], "align": 5, "target": [5, 77, 121, 124, 139, 144, 153, 181], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 53, 55, 57, 68, 83, 90, 100, 101, 102, 103, 105, 110, 111, 119, 120, 125, 128, 134, 142, 178, 184, 194, 198], "loss": [5, 60, 66, 71, 103, 125, 194], "ingredi": 5, "our": [5, 60, 63, 66, 67, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 88, 117, 121, 122, 125, 170, 181, 203], "appli": [5, 9, 22, 34, 39, 49, 53, 58, 59, 83, 85, 103, 104, 111, 116, 125, 128, 130, 147, 170, 184], "over": [5, 58, 66, 73, 80, 81, 82, 121, 130, 139, 170, 178, 194], "region": 5, "onli": [5, 8, 49, 51, 52, 53, 55, 57, 58, 59, 69, 77, 82, 93, 96, 106, 108, 116, 117, 121, 122, 124, 125, 137, 142, 155, 164, 165, 184], "forc": 5, "combin": [5, 14, 18, 29, 38, 44, 52, 66, 72, 79, 88, 121, 125, 128, 130, 142], "acoust": 5, "continu": [5, 101, 122, 126, 148, 194], "reli": [5, 55, 57, 82, 88], "primarili": 5, "consist": [5, 60, 65, 72, 96, 114, 120, 142, 156, 187], "unsupervis": [5, 80, 81, 82, 88, 121, 122], "rather": [5, 49], "than": [5, 34, 39, 49, 66, 67, 71, 78, 80, 81, 82, 88, 90, 98, 102, 108, 122, 124, 130, 131, 198], "intrins": [5, 49], "qualiti": [5, 51, 122], "assign": [5, 34, 83, 104, 119], "simpl": [5, 61, 62, 83, 122, 199], "k": [5, 8, 52, 121, 122, 125, 146, 165], "mean": [5, 8, 10, 14, 18, 29, 34, 38, 44, 49, 51, 52, 53, 80, 88, 90, 93, 95, 108, 121, 122, 124, 125, 126, 138, 146, 153, 165, 198, 199, 202], "teacher": 5, "100": [5, 22, 34, 40, 53, 67, 78, 80, 88, 108, 117, 156], "two": [5, 34, 51, 55, 57, 60, 65, 67, 77, 78, 79, 80, 81, 85, 140, 184, 198], "iter": [5, 55, 57, 60, 67, 78, 114, 142, 178, 194], "either": [5, 8, 22, 39, 53, 57, 63, 64, 76, 83, 88, 90, 96, 119, 120, 125, 142, 144, 153, 154, 156, 181, 199], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 78, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 106, 114, 116, 121, 122, 139, 142, 144, 164, 197], "improv": [5, 60, 61, 62, 63, 65, 69, 71, 74, 75, 80, 81, 102, 103, 122, 126, 203], "upon": [5, 88], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 26, 28, 31, 33, 34, 35, 37, 39, 41, 43, 46, 49, 51, 53, 60, 61, 62, 63, 68, 69, 71, 72, 73, 74, 75, 82, 88, 103, 121, 122, 125, 154, 195, 198], "art": [5, 22, 34, 49, 51, 53, 60, 61, 62, 63, 68, 69, 71, 72, 73, 74, 75, 82, 88, 103, 121, 122, 125, 154], "wav2vec": [5, 7], "perform": [5, 49, 51, 53, 59, 60, 63, 65, 66, 68, 69, 71, 74, 75, 77, 79, 80, 81, 82, 103, 120, 121, 122, 126, 130], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 66, 116], "000h": 5, "benchmark": [5, 8, 53, 60, 65, 66, 68, 69, 80, 81, 121, 125], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 48, 61, 62, 66, 68, 73, 105, 121, 125, 189], "tune": [5, 8, 48, 61, 62, 66, 68, 73, 105, 121, 125], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 154, 156, 157, 170, 182, 184, 185, 187, 188, 189, 194, 197, 198, 199, 203], "19": [5, 54, 68, 98, 187, 189], "13": [5, 9, 10, 48, 80, 81, 85, 114, 147, 189], "rel": [5, 63, 65, 80, 93, 95, 102, 128, 197], "wer": 5, "reduct": [5, 60, 130], "dev": [5, 51, 60, 69, 77], "test": [5, 22, 34, 39, 49, 51, 52, 53, 55, 57, 61, 62, 77, 79, 91, 92, 96, 97, 102, 103, 111, 114, 122, 130, 131, 135, 142, 184, 185, 187, 188, 189, 198, 204], "evalu": [5, 22, 34, 39, 63, 68, 71, 72, 80, 81, 111, 121, 160, 178], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 80, 81, 82, 103, 121, 124, 128], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 88, 103, 110, 121, 122, 124, 125, 126, 128, 130, 165, 197, 202, 203], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 80, 81, 82, 103, 110, 121, 124, 128], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 158, 159, 160, 163, 167, 171, 173, 177, 178, 194, 198, 199, 202], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 108, 109, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 151, 153, 154, 155, 156, 157, 178, 194, 198, 202], "audioassembl": [5, 7, 8, 143], "audio_cont": [5, 7, 8, 143], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 146, 156, 157, 198, 199], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 147, 154, 156, 157, 170, 178, 194, 197, 198, 199, 203], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 147, 151, 154, 156, 157, 170, 197, 198, 199, 203], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 146, 153, 155, 156, 157, 177, 178, 194, 198, 199, 202], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 64, 66, 79, 85, 88, 90, 102, 103, 105, 108, 120, 121, 122, 125, 126, 128, 130, 131, 137, 142, 143, 145, 147, 148, 151, 154, 156, 157, 170, 178, 194, 199], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 59, 79, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 154, 156, 157, 170, 187, 197, 198, 199], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 59], "apostl": [5, 7, 8], "OF": [5, 7, 60], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 184, 204], "hi": [5, 7, 8, 105, 117], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 90, 103, 110, 121, 122, 124, 125, 128], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 90, 92, 97, 101, 102, 103, 104, 105, 110, 116, 121, 122, 124, 125, 128, 142, 153, 170, 181, 184, 188, 204], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 90, 103, 110, 121, 122, 124, 125, 128], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 88, 90, 103, 110, 121, 122, 124, 125, 128], "serial": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 90, 103, 110, 121, 122, 124, 125, 128, 171], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 121, 122, 124, 125], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 103, 111, 117, 121, 122, 124, 125, 128, 131, 134, 182, 184], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 121, 122, 124, 125], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 103, 111, 117, 121, 122, 124, 125, 171, 178, 194, 198], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 181, 182, 198, 203], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 82, 85, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 181, 182, 185, 198, 203, 204], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 181, 182], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 90, 91, 92, 97, 102, 103, 104, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 171, 181, 182, 197, 198, 201, 202], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 88, 90, 91, 92, 96, 97, 102, 103, 105, 106, 111, 114, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 143, 145, 149, 150, 153, 154, 169, 170, 171, 177, 178, 181, 182, 184, 185, 187, 188, 198], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 181, 182], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 96, 97, 102, 103, 105, 106, 111, 114, 117, 119, 120, 121, 122, 124, 125, 128, 130, 131, 133, 135, 139, 142, 155, 166, 169, 180, 182, 184, 185, 187, 188, 189, 198, 204], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 116, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 181, 195], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 90, 91, 92, 97, 102, 103, 105, 114, 117, 120, 121, 122, 124, 125, 128, 130, 131, 133, 139, 142, 144, 165, 178], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 135], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 85, 88, 105, 124, 130, 197, 198], "recognit": [8, 13, 17, 21, 25, 28, 33, 37, 43, 46, 49, 53, 63, 99, 102, 103, 105], "asr": 8, "system": [8, 88, 121, 122], "680": 8, "000": [8, 40, 88, 122, 142, 156], "hour": [8, 93, 95], "multilingu": [8, 80, 81, 142], "multitask": [8, 71, 122], "collect": [8, 88, 178, 194], "web": [8, 48, 59, 63, 122, 178, 194], "well": [8, 53, 55, 57, 58, 68, 77, 80, 81, 88, 108, 121, 156], "translat": [8, 121, 122, 124, 125, 142], "those": [8, 63, 85, 104, 198, 199], "english": [8, 39, 63, 88, 130, 133, 142, 182], "moment": 8, "greedi": [8, 52, 121, 122, 125, 165], "search": [8, 52, 93, 121, 126, 130, 165], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 51, 53, 60, 61, 62, 63, 65, 66, 68, 71, 72, 73, 77, 80, 81, 82, 88, 105, 121, 122, 124, 125, 155, 165], "setlanguag": 8, "settask": [8, 121, 122, 125, 165], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 71], "via": [8, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 77, 151, 171], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 60, 65, 66, 68, 69, 73, 80, 81, 82, 88, 90, 92, 97, 103, 121, 122], "scale": [8, 49, 51, 52, 53, 60, 66, 68, 72, 73, 80, 81, 121, 122, 125], "weak": [8, 68], "studi": [8, 66, 74, 75, 121, 125], "capabl": [8, 51, 66, 82, 122], "simpli": [8, 59, 71, 199], "amount": [8, 53, 77, 88, 97, 122, 142, 153, 202], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 53, 58, 59, 60, 68, 85, 93, 95, 98, 103, 108, 121, 122, 128, 130, 133, 137, 142, 153, 184, 198, 199, 202], "gener": [8, 22, 34, 49, 51, 52, 60, 64, 66, 68, 71, 72, 76, 82, 85, 88, 102, 103, 105, 108, 117, 121, 122, 125, 128, 130, 131, 147, 148, 165, 178, 194, 197, 198, 199], "standard": [8, 49, 51, 52, 53, 59, 72, 93, 95, 121, 130, 131, 139], "often": [8, 60, 74, 75, 82], "competit": [8, 80, 81, 88], "prior": [8, 49, 66, 71, 72, 108, 128], "fulli": [8, 181], "zero": [8, 68, 79, 105, 122], "shot": [8, 68, 105, 122], "transfer": [8, 53, 66, 68, 77, 80, 81, 121, 122, 125], "without": [8, 61, 62, 68, 71, 80, 81, 88, 122, 142], "ani": [8, 14, 18, 29, 38, 44, 67, 68, 71, 77, 78, 83, 88, 103, 122, 125, 128, 146, 147, 182, 195, 198, 199, 204], "compar": [8, 51, 53, 60, 65, 66, 69, 71, 73, 82, 88, 117, 121, 125, 128, 178, 194], "human": [8, 65, 88], "accuraci": [8, 49, 51, 55, 57, 61, 62, 67, 77, 78, 80, 81, 102, 103, 114, 130, 142, 194], "releas": [8, 59, 60, 63, 65, 74, 75, 80, 81, 121, 125, 171], "infer": [8, 14, 18, 29, 38, 44, 61, 62, 63, 66, 82], "code": [8, 48, 65, 67, 71, 72, 74, 75, 78, 80, 81, 88, 90, 121, 125, 195, 203], "serv": [8, 51, 195], "foundat": 8, "further": [8, 9, 60, 71, 88, 102, 103, 108, 157], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 49, 57, 59, 68, 69, 71, 72, 73, 83, 85, 102, 103, 121, 122, 124, 125, 126, 128, 133, 156, 165, 178, 194], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 49, 57, 59, 68, 69, 71, 73, 85, 102, 103, 121, 122, 124, 125, 128, 133, 156, 165, 178, 194], "check": [8, 68, 103, 116, 128, 129, 130, 131, 153, 157, 181, 198, 203], "descript": [8, 57, 71, 76, 88, 93, 130, 137, 164, 166], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 85, 92, 93, 95, 97, 98, 101, 102, 103, 106, 108, 111, 116, 117, 121, 122, 125, 126, 128, 130, 133, 138, 139, 142, 144, 146, 147, 148, 153, 156, 157, 160, 165, 171, 181, 184, 188, 199], "minoutputlength": [8, 52, 121, 122, 125], "minimum": [8, 34, 39, 52, 67, 78, 85, 88, 90, 100, 102, 103, 106, 116, 117, 121, 122, 125, 130, 131, 138, 139, 165, 184], "sequenc": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 53, 72, 108, 121, 122, 123, 124, 125, 128, 133, 165], "maxoutputlength": [8, 52, 121, 122, 124, 125], "maximum": [8, 22, 34, 39, 48, 52, 67, 78, 85, 88, 100, 102, 103, 106, 108, 110, 116, 117, 121, 122, 124, 125, 128, 130, 138, 139, 165], "dosampl": [8, 52, 121, 122, 125], "sampl": [8, 52, 108, 121, 122, 125, 165], "decod": [8, 52, 65, 72, 121, 122, 124, 125, 165], "temperatur": [8, 52, 108, 121, 122, 125], "next": [8, 52, 74, 75, 88, 93, 95, 121, 122, 125, 165], "probabl": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 52, 88, 108, 121, 122, 125, 126, 130, 165], "topk": [8, 52, 121, 122, 125], "highest": [8, 52, 108, 121, 122, 125, 130, 165], "vocabulari": [8, 52, 67, 78, 121, 122, 125, 128, 165], "keep": [8, 52, 53, 58, 88, 106, 121, 122, 125, 165], "filter": [8, 49, 51, 52, 53, 80, 81, 88, 101, 102, 121, 122, 124, 125, 133, 165, 170, 182], "topp": [8, 52, 108, 121, 122, 125, 165], "most": [8, 52, 58, 63, 66, 72, 73, 88, 103, 108, 121, 122, 124, 125, 165], "add": [8, 52, 79, 93, 95, 116, 121, 122, 125, 128, 139, 165, 198], "top_p": [8, 52, 108], "higher": [8, 52, 79, 88, 108, 120, 121, 122, 125, 165], "kept": [8, 52, 121, 122, 125, 165], "repetitionpenalti": [8, 52, 121, 122, 125], "repetit": [8, 52, 121, 122, 125, 165], "penalti": [8, 52, 121, 122, 125, 165], "norepeatngrams": [8, 52, 121, 122, 125], "ngram": [8, 52, 64, 98, 121, 122, 125, 165], "occur": [8, 52, 121, 122, 125, 165], "onc": [8, 52, 121, 122, 125, 165], "beamsiz": [8, 52, 121], "beam": [8, 52, 121, 165], "mr": 8, "middl": [8, 137, 142], "getlanguag": 8, "langaug": [8, 181], "getismultilingu": 8, "do": [8, 9, 77, 88, 101, 133, 139, 153, 194, 198, 202], "xx": [8, 44, 80, 81, 90, 124], "chunk2doc": [9, 144], "convert": [9, 52, 54, 59, 64, 73, 76, 79, 93, 95, 98, 101, 106, 108, 121, 125, 138, 140, 142, 144, 147, 148, 178, 194, 201], "back": [9, 108, 121], "try": [9, 128, 184], "re": [9, 68, 198], "analysi": [9, 22, 34, 39, 69, 71, 82, 118, 119, 125, 162, 199], "doc2chunk": [9, 144], "pretrainedpipelin": [9, 147, 153, 170, 181, 197, 202, 203], "locat": [9, 83, 116, 171, 181, 198], "extract": [9, 10, 11, 15, 19, 23, 26, 31, 35, 41, 49, 51, 52, 53, 55, 58, 64, 79, 83, 84, 85, 87, 88, 92, 93, 95, 97, 101, 102, 103, 104, 116, 117, 119, 126, 128, 131, 135, 140, 146, 147, 148, 153, 171, 178, 181, 194], "york": [9, 105, 147], "jersei": [9, 147], "aren": [9, 147], "t": [9, 14, 18, 29, 38, 44, 66, 74, 91, 106, 117, 119, 139, 147], "far": [9, 108, 122, 147], "apart": [9, 55, 57, 147], "actual": [9, 98, 147, 157], "id": [9, 34, 59, 80, 83, 108, 109, 121, 122, 124, 125, 128, 144, 145, 147, 154, 157, 178, 184], "defin": [9, 10, 101, 102, 103, 128, 133, 137, 147, 170, 178, 181, 194, 198, 202], "amongst": [9, 147], "thing": [9, 128, 147], "explain_document_dl": [9, 147, 153, 170, 181], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 147], "selectexpr": [9, 10, 22, 40, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 91, 92, 93, 95, 96, 97, 98, 101, 104, 105, 106, 114, 116, 117, 119, 124, 132, 133, 135, 138, 139, 140, 144, 146, 147, 170, 184, 185, 187, 197, 198, 203], "explod": [9, 10, 22, 40, 48, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 92, 95, 96, 97, 98, 101, 104, 105, 114, 116, 117, 124, 140, 146, 147, 170, 184, 187, 197, 198, 203], "col": [9, 55, 57, 83, 92, 101, 104, 147, 170, 197], "loc": [9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 85, 101, 102, 103, 147, 153, 170, 181, 184], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 114, 120, 121, 124, 126, 128, 133, 135, 138, 140, 142, 145, 147, 153, 154, 156, 157, 171, 181, 184, 185, 187, 188, 189, 198, 202, 203], "22": [9, 147, 184, 197], "pattern": [10, 58, 59, 83, 93, 96, 106, 130, 131, 138, 139, 142], "part": [10, 63, 88, 91, 113, 114, 132, 142, 144, 187, 204], "tag": [10, 22, 34, 39, 59, 63, 100, 101, 102, 103, 104, 113, 114, 142, 170, 178, 184, 187, 188, 204], "order": [10, 58, 71, 82, 83, 88, 93, 121, 130, 131, 153, 157, 170, 198, 199, 202, 204], "meaning": [10, 132], "phrase": [10, 63, 67, 78, 92, 97], "onto": [10, 170, 199], "pars": [10, 55, 56, 57, 63, 83, 91, 93, 95, 128, 130, 131, 153, 156, 181, 184, 187], "regular": [10, 58, 96, 102, 116], "express": [10, 39, 48, 58, 93, 96, 116], "wrap": [10, 109, 126, 158, 159, 167, 173, 177], "angl": 10, "bracket": 10, "easili": [10, 69, 114, 146, 194], "distinguish": 10, "itself": [10, 88, 125, 142, 155, 199], "form": [10, 22, 34, 39, 79, 83, 91, 92, 93, 96, 97, 117, 119, 130, 131, 142, 146, 178, 184, 185, 198], "peter": [10, 72, 91, 106, 114, 117, 130, 132, 184], "piper": [10, 91, 114, 132], "employe": [10, 91, 114, 132], "pick": [10, 91, 114, 132], "peck": [10, 91, 114, 132], "pickl": [10, 91, 114, 132], "pepper": [10, 91, 114, 132], "nnp": [10, 114, 153, 170, 184, 185, 187, 188, 197, 202, 203, 204], "nn": [10, 114, 184, 185, 187, 188, 204], "vbp": [10, 114, 153, 185, 197, 202, 203], "vbg": [10, 114], "IN": [10, 114, 153, 170, 185, 187, 188, 197, 202, 203], "jj": [10, 114, 153, 170, 184, 187, 197, 202, 203, 204], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 128, 142], "group": [10, 139], "so": [10, 14, 18, 22, 29, 38, 39, 44, 88, 101, 108, 117, 155, 178, 194], "here": [10, 91, 170, 198], "specif": [10, 40, 55, 57, 59, 61, 62, 66, 77, 85, 88, 103, 121, 122, 134, 153, 155, 178, 202], "noun": [10, 185], "success": [10, 63, 73, 122], "grammar": 10, "parser": [10, 55, 57, 85], "perceptronmodel": [10, 55, 57, 85, 102, 114, 184], "Of": [10, 60, 142], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 154, 155, 156, 157, 178, 184, 194, 198], "sentencedetector": [10, 22, 40, 48, 55, 57, 62, 64, 75, 77, 81, 85, 88, 91, 96, 98, 102, 103, 104, 105, 114, 116, 117, 133, 135, 155, 157, 184, 198, 199], "postag": 10, "11": [10, 54, 80, 81, 93, 95, 98, 114, 189], "21": [10, 93, 95, 104, 114, 189], "35": [10, 114, 189], "39": [10, 104, 114, 187, 189], "52": [10, 104, 114, 187], "58": [10, 51, 114], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 88, 146, 198], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 90, 103, 105, 130, 131], "albert": [11, 12, 13, 60], "span": [11, 15, 19, 23, 26, 31, 35, 41, 121, 125], "question": [11, 15, 19, 23, 26, 31, 35, 40, 41, 55, 57, 61, 62, 69, 74, 75, 82, 105, 114, 121, 122, 125, 153], "answer": [11, 15, 19, 23, 26, 31, 35, 40, 41, 55, 57, 58, 61, 62, 69, 82, 105, 121, 122, 125, 153], "squad": [11, 15, 19, 23, 26, 31, 35, 41, 60, 61, 62, 65, 73, 74, 75, 121], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 51, 122], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 60, 61, 62, 65, 69, 82], "comput": [11, 15, 19, 23, 26, 31, 35, 41, 49, 51, 53, 60, 65, 66, 71, 77, 122, 124, 131, 142, 153, 202], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 29, 31, 32, 35, 36, 38, 41, 42, 44, 45, 108], "spanclassifi": [11, 15, 19, 23, 26, 31, 35, 41], "document_quest": [11, 15, 19, 23, 26, 31, 35, 40, 41], "document_context": [11, 15, 19, 23, 26, 31, 35, 41], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 52, 69, 77, 102, 103, 106, 116, 117, 121, 138, 139, 155, 164], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 66, 69, 130, 131], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 80, 81, 82, 92, 97, 130, 133], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 80, 81, 82, 92, 98, 101, 121, 122, 124, 125, 130, 133, 153], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 80, 81, 82, 83, 90, 92, 97, 128, 130, 133, 139, 144, 184, 185, 198], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 82, 90, 103, 121, 122, 124, 125, 128], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 78, 80, 81, 82], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 60, 61, 62, 63, 65, 66, 71, 74, 75, 80, 81, 82, 178, 194], "multidocumentassembl": [11, 15, 19, 23, 26, 31, 35, 40, 41, 154], "context": [11, 15, 19, 23, 26, 31, 35, 41, 61, 62, 67, 69, 78, 82, 108, 120, 128, 139], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 64, 66, 72, 74, 80, 92, 97, 102, 130, 133, 146, 157], "what": [11, 15, 19, 23, 26, 31, 35, 39, 41, 49, 55, 57, 88, 90, 105, 108, 124, 128, 137, 185, 195], "my": [11, 13, 15, 17, 19, 22, 23, 25, 26, 28, 31, 33, 35, 37, 39, 41, 43, 46, 58, 59, 96, 98, 105, 108, 116, 122, 133, 135, 138, 198], "clara": [11, 15, 19, 23, 26, 31, 35, 41, 105], "live": [11, 13, 15, 17, 19, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 105, 122, 178, 194], "berkelei": [11, 15, 19, 23, 26, 31, 35, 41], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 27, 32, 36, 42, 45, 121, 125], "pool": [12, 16, 20, 24, 27, 32, 36, 42, 45, 64, 69, 76], "multi": [12, 16, 20, 22, 24, 27, 32, 34, 36, 39, 42, 45, 60, 77, 80, 81, 88, 90, 124], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 90], "instead": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 62, 88, 90, 93, 95, 125, 146, 147, 153, 202], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 68, 80, 81, 90, 93, 98, 100, 101, 102, 103, 108, 142, 153, 170, 181, 184], "inputcol": [12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 76, 90, 143, 145, 146, 147, 148, 151, 154], "averag": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 64, 68, 71, 76, 80, 81, 90, 103, 114, 126], "calcul": [12, 14, 16, 18, 20, 22, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 79, 98, 103, 111, 119, 126], "softmax": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 65, 67, 78, 128], "sigmoid": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45], "love": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 42, 44, 45, 62, 75, 81, 117, 120, 198], "movi": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 120, 198], "child": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "pretti": [12, 14, 16, 18, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 88], "bore": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "neg": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 119, 120, 126, 178, 194], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 42, 43, 44, 45, 46, 49, 51, 53, 105], "setcoalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 90], "limit": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 53, 60, 63, 72, 73, 79, 82, 88, 125, 130], "almost": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "512": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 68, 69, 73, 124], "help": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 55, 57, 58, 60, 108, 109, 124, 139, 178, 194, 199, 203], "feed": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "entir": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 124], "bool": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 58, 59, 62, 64, 77, 83, 85, 90, 92, 93, 97, 98, 101, 102, 103, 106, 111, 116, 117, 121, 122, 125, 126, 128, 130, 133, 138, 139, 142, 144, 146, 147, 148, 153, 156, 160, 165, 171, 178, 181, 182, 184], "one": [12, 14, 16, 18, 20, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 48, 49, 51, 52, 53, 55, 57, 59, 61, 62, 73, 76, 80, 81, 82, 88, 90, 93, 96, 101, 108, 117, 130, 135, 157, 194, 198], "albertfortokenclassif": [13, 60], "ner": [13, 17, 21, 25, 28, 33, 37, 43, 46, 80, 81, 85, 86, 135, 153, 170, 171, 178, 181, 194], "token_classifi": [13, 21, 33, 37, 43, 46], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 60], "level": [13, 22, 34, 39, 61, 62, 72, 74, 75, 77, 79, 81, 83, 102, 103, 111, 128, 171, 184], "tokenclassifi": [13, 17, 21, 25, 28, 33, 37, 43, 46], "john": [13, 17, 25, 28, 33, 37, 43, 46, 48, 62, 75, 81, 83, 85, 104, 106, 117, 148, 189], "lenon": [13, 17, 25, 28, 33, 37, 43, 46], "born": [13, 17, 25, 28, 33, 37, 43, 46, 122], "london": [13, 17, 25, 28, 33, 37, 43, 46], "pari": [13, 17, 25, 28, 33, 37, 43, 46, 105], "sarah": [13, 17, 25, 28, 33, 37, 43, 46], "o": [13, 17, 21, 25, 28, 33, 37, 43, 46, 101, 102, 103, 104, 153, 170, 181, 184, 188, 204], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 29, 38, 44], "nli": [14, 18, 29, 38, 44], "natur": [14, 18, 29, 38, 39, 44, 53, 60, 61, 62, 63, 65, 66, 67, 73, 77, 78, 82, 90, 121, 122, 125, 144, 154, 157], "equival": [14, 18, 29, 38, 44, 153, 171, 202], "bartforsequenceclassif": 14, "don": [14, 18, 29, 38, 44, 66, 74, 106], "hardcod": [14, 18, 29, 38, 44], "potenti": [14, 18, 29, 38, 44, 51, 128], "thei": [14, 18, 29, 38, 40, 44, 55, 57, 58, 103, 106, 108, 122, 155, 173, 185, 198], "chosen": [14, 18, 29, 38, 44, 55, 57, 103, 108], "runtim": [14, 18, 29, 38, 44], "usual": [14, 18, 29, 38, 44, 53, 157, 182], "slower": [14, 18, 29, 38, 44], "much": [14, 18, 22, 29, 38, 40, 44, 60, 68, 74, 75, 106, 142, 171, 198], "flexibl": [14, 18, 29, 38, 44, 51], "loop": [14, 18, 29, 38, 44], "through": [14, 18, 29, 38, 44, 60, 73, 85, 88, 148, 199], "longer": [14, 18, 29, 38, 44, 60, 67, 72, 78, 90, 124, 203], "pass": [14, 18, 29, 38, 44, 108], "pose": [14, 18, 29, 38, 44], "premis": [14, 18, 29, 38, 44], "hypothesi": [14, 18, 29, 38, 44], "pair": [14, 18, 29, 38, 44, 68, 85, 178], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 37, 38, 44, 67, 78], "bart": [14, 121], "bertforquestionansw": [15, 40], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_base_cased_zero_shot_classifier_xnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 63], "camembert_base_qa_fquad": 19, "fr": [19, 20, 63, 90], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 83], "ai": [20, 108, 109, 121, 178, 194], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 63, 90, 124], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 198], "classifierdlapproach": [22, 34, 198], "univers": [22, 55, 57, 77, 124], "encod": [22, 52, 59, 61, 62, 65, 71, 72, 77, 105, 121, 124, 178], "deep": [22, 61, 62, 69, 88, 102, 117, 128], "dnn": 22, "insid": [22, 34, 101, 114, 139, 184], "instanti": [22, 34, 39, 55, 57, 67, 78, 79, 83, 91, 92, 96, 97, 102, 103, 106, 114, 117, 119, 120, 126, 128, 130, 131, 135, 137, 142, 184, 185], "classifierdlmodel": [22, 34, 198], "monitor": [22, 34, 39, 103, 108, 109, 178, 194], "metric": [22, 34, 39, 103, 131, 178], "done": [22, 34, 39, 74, 75, 102, 103, 199], "settestdataset": [22, 34, 39, 103, 111], "method": [22, 34, 39, 60, 66, 67, 71, 73, 78, 82, 88, 103, 126, 182, 193], "expect": [22, 34, 39, 68, 82, 103, 139, 170], "path": [22, 34, 39, 55, 57, 67, 78, 79, 83, 85, 91, 92, 96, 97, 102, 103, 105, 106, 111, 117, 119, 122, 128, 130, 131, 134, 139, 151, 153, 169, 178, 181, 184, 185, 187, 188, 194], "parquet": [22, 34, 39, 103, 111, 143], "datafram": [22, 34, 39, 53, 67, 78, 79, 103, 111, 114, 126, 142, 153, 166, 170, 177, 178, 181, 184, 185, 187, 188, 194, 198, 202, 204], "ha": [22, 34, 39, 40, 49, 51, 52, 53, 58, 59, 60, 65, 66, 69, 74, 75, 79, 88, 91, 96, 103, 111, 117, 119, 121, 125, 130, 131, 142, 143, 144, 151, 153, 178, 182, 187, 194, 198, 199], "same": [22, 34, 39, 48, 60, 73, 74, 79, 80, 83, 85, 103, 108, 111, 125, 126, 155, 178, 199], "follow": [22, 34, 39, 48, 54, 59, 69, 72, 79, 88, 93, 95, 96, 101, 103, 106, 116, 140, 156, 194, 196, 199], "universalsentenceencod": [22, 34, 39, 77, 178, 194, 198], "preprocessingpipelin": [22, 34, 39, 103, 111], "randomsplit": [22, 34, 39, 103, 111], "write": [22, 34, 39, 79, 103, 111, 130, 131, 199], "overwrit": [22, 34, 39, 103, 104, 111, 178], "test_data": [22, 34, 39, 103, 111], "setlabelcolumn": [22, 34, 39, 100, 102, 103, 110, 134, 178, 194, 198], "usag": [22, 34, 39, 48, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 74, 77, 79, 80, 82, 83, 88, 90, 91, 93, 95, 96, 97, 102, 103, 106, 114, 116, 117, 119, 120, 121, 124, 125, 126, 128, 130, 132, 133, 137, 139, 142], "64": [22, 34, 39, 60, 103, 110, 198], "dropout": [22, 39, 103], "coeffici": [22, 39, 102, 103], "enableoutputlog": [22, 34, 39, 103], "stdout": [22, 34, 39, 103, 111], "addit": [22, 34, 39, 55, 57, 61, 62, 83, 102, 103, 108, 111, 116, 122, 139, 178, 197, 198], "evaluationlogextend": [22, 34, 39, 103], "valid": [22, 34, 39, 93, 103, 111, 117, 128, 194], "displai": [22, 34, 39, 111, 122, 178, 194], "time": [22, 34, 39, 60, 67, 78, 80, 81, 88, 93, 111, 120, 128, 142, 171, 197, 198, 202, 203], "labelcolumn": [22, 34, 39, 102, 103], "lr": [22, 34, 39, 103, 142], "rate": [22, 34, 39, 54, 67, 74, 75, 78, 79, 103, 110, 126, 128], "005": [22, 39, 103, 110], "maxepoch": [22, 34, 39, 102, 103], "epoch": [22, 34, 39, 100, 102, 103, 110, 111, 117, 128, 178], "30": [22, 39, 88, 93, 95, 101, 110, 124, 153, 170, 181, 189, 197], "outputlogspath": [22, 34, 39, 103, 117], "randomse": [22, 34, 39, 102, 103], "random": [22, 34, 39, 67, 78, 100, 102, 103, 108, 110, 126, 146], "seed": [22, 34, 39, 67, 78, 100, 102, 103, 110], "shuffl": [22, 34, 100, 110, 121], "testdataset": [22, 34, 39, 103, 178, 194], "statist": [22, 34, 39, 79, 88, 103, 111], "validationsplit": [22, 34, 39, 103, 117], "choos": [22, 34, 39, 64, 76, 103, 108, 117, 130], "proport": [22, 34, 39, 103, 111, 117], "against": [22, 34, 39, 83, 88, 92, 97, 103, 111, 117, 155], "between": [22, 34, 39, 51, 55, 57, 58, 73, 74, 75, 77, 80, 81, 82, 85, 103, 108, 111, 116, 117, 128], "off": [22, 34, 39, 77, 80, 81, 103, 111, 117], "verbos": [22, 34, 39, 102, 103, 111], "multiclassifierdlapproach": [22, 34, 178, 194], "sentimentdlapproach": [22, 34, 39], "accept": [22, 34, 39, 108], "singl": [22, 34, 39, 68, 71, 79, 85, 88, 121, 135, 137, 139, 184], "item": [22, 39, 79, 108, 178, 184, 194], "doubl": [22, 39, 143, 156], "sentenceembed": [22, 34, 39, 76, 79, 146], "In": [22, 34, 39, 49, 53, 63, 65, 66, 72, 73, 79, 82, 83, 88, 90, 91, 92, 96, 97, 116, 117, 119, 121, 122, 125, 130, 131, 142, 178, 187, 194, 198, 199, 203, 204], "csv": [22, 39, 83, 111, 156, 198], "best": [22, 39, 60, 63, 68, 71, 74, 75, 88, 90, 103, 108, 121, 198], "wach": [22, 198], "ever": [22, 39, 59, 198], "opinion": [22, 39, 198], "win": [22, 39, 198], "award": [22, 39, 198], "terribl": [22, 39, 198], "act": [22, 39, 198], "bad": [22, 39, 119, 178, 194, 198], "realli": [22, 39, 108, 120, 198], "trane": 22, "smallcorpu": [22, 39, 198], "read": [22, 39, 49, 51, 52, 53, 55, 57, 67, 78, 88, 91, 92, 93, 95, 96, 97, 102, 105, 106, 111, 117, 119, 122, 128, 130, 131, 139, 142, 143, 145, 151, 154, 166, 169, 171, 172, 178, 182, 184, 185, 187, 188, 194, 198, 204], "header": [22, 39, 40, 156, 198], "src": [22, 39, 49, 51, 52, 53, 55, 57, 79, 91, 92, 96, 97, 102, 103, 114, 130, 131, 135, 142, 184, 185, 187, 188, 189, 198, 204], "useembed": [22, 34, 39, 77, 198], "docclassifi": [22, 34, 39, 198], "setbatchs": [22, 34, 39, 69, 103, 110, 128, 178, 194, 198], "setmaxepoch": [22, 34, 39, 100, 102, 103, 110, 178, 194, 198], "20": [22, 40, 49, 58, 82, 101, 121, 122, 153, 156, 170, 181, 198], "setlr": [22, 34, 39, 103, 110, 178, 194, 198], "5e": [22, 39, 198], "setdropout": [22, 39, 103, 198], "pipelinemodel": [22, 34, 39, 55, 57, 59, 67, 78, 102, 103, 120, 128, 130, 131, 142, 153, 155, 178, 182, 198, 201], "v": [22, 34, 39, 54, 65, 73, 79, 88, 90, 92, 103, 110, 111, 131, 170], "classifierdl_use_trec6": [22, 198], "trec": 22, "multiclassifierdlmodel": [22, 34], "sentimentdlmodel": [22, 34, 39], "sarcasmdl": [22, 198], "classifierdl_use_sarcasm": [22, 198], "sarcasm": [22, 198], "m": [22, 93, 95, 189, 198], "could": [22, 66, 88, 96, 111, 128, 197, 198, 199], "put": [22, 170, 198], "word": [22, 51, 53, 55, 57, 60, 64, 65, 67, 69, 74, 76, 77, 78, 79, 82, 83, 85, 88, 91, 98, 101, 104, 105, 106, 114, 119, 121, 122, 124, 125, 128, 130, 131, 132, 133, 137, 139, 141, 142, 153, 170, 181, 187, 188, 197, 198], "wake": [22, 198], "am": [22, 58, 93, 95, 122, 135, 198], "mondai": [22, 198], "would": [22, 48, 58, 64, 76, 93, 117, 171, 198], "arrays_zip": [22, 55, 57, 88, 198], "out": [22, 68, 88, 91, 106, 121, 122, 124, 125, 132, 133, 198], "normal": [22, 49, 51, 52, 53, 59, 86, 92, 117, 120, 133, 146, 155, 157, 171, 198, 199], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 65], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": 24, "v2": [24, 25, 61, 62, 65], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "distilbertforquestionansw": 26, "distilbert": [26, 27, 29, 66], "distilbert_base_cased_qa_squad2": 26, "distilbertforsequenceclassif": [27, 29], "distilbert_base_sequence_classifier_imdb": 27, "distilbertfortokenclassif": 28, "distilbert_base_token_classifier_conll03": 28, "distilbertforzeroshotclassif": 29, "distilbert_base_zero_shot_classifier_uncased_mnli": 29, "albert_for_sequence_classif": [30, 86], "albert_for_token_classif": [30, 86], "bart_for_zero_shot_classif": [30, 86], "bert_for_sequence_classif": [30, 86], "bert_for_token_classif": [30, 86], "bert_for_zero_shot_classif": [30, 86], "camembert_for_sequence_classif": [30, 86], "camembert_for_token_classif": [30, 86], "deberta_for_sequence_classif": [30, 86], "deberta_for_token_classif": [30, 86], "distil_bert_for_sequence_classif": [30, 86], "distil_bert_for_token_classif": [30, 86], "distil_bert_for_zero_shot_classif": [30, 86], "longformer_for_sequence_classif": [30, 86], "longformer_for_token_classif": [30, 86], "multi_classifier_dl": [30, 86], "roberta_for_sequence_classif": [30, 86], "roberta_for_token_classif": [30, 86], "roberta_for_zero_shot_classif": [30, 86], "sentiment_dl": [30, 86], "xlm_roberta_for_sequence_classif": [30, 86], "xlm_roberta_for_token_classif": [30, 86], "xlm_roberta_for_zero_shot_classif": [30, 86], "xlnet_for_sequence_classif": [30, 86], "xlnet_for_token_classif": [30, 86], "longformerforquestionansw": 31, "longform": [31, 32, 33, 72], "longformer_base_base_qa_squad2": 31, "longformerforsequenceclassif": 32, "longformer_base_sequence_classifier_imdb": 32, "4096": [32, 60, 72], "longformerfortokenclassif": 33, "xlnet_base_token_classifier_conll03": [33, 46], "longformer_base_token_classifier_conll03": 33, "multiclassifierdl": 34, "bidirect": [34, 61, 62, 69, 82, 121], "gru": 34, "convolut": [34, 49, 53], "machin": [34, 49, 58, 67, 78, 88, 102, 121, 122, 124, 125, 178, 196], "strongli": 34, "relat": [34, 55, 57, 85, 203], "variant": [34, 54, 72, 77], "mai": [34, 108, 144, 197, 198, 199, 202, 203], "instanc": [34, 105, 110, 111, 160, 165, 171, 172, 176], "multiclass": 34, "categor": [34, 182], "precis": [34, 55, 57], "constraint": 34, "mani": [34, 65, 74, 75, 88, 108, 121, 122, 124, 125, 142], "formal": 34, "find": [34, 55, 57, 74, 75, 77, 83, 85, 91, 93, 121, 122], "binari": [34, 151, 166, 178], "bertsentenceembed": [34, 39, 62, 75, 81], "multiclassifi": [34, 178, 194], "001": [34, 54, 102, 103], "10": [34, 48, 55, 88, 93, 95, 104, 108, 126, 130, 178, 189, 197], "44": [34, 67, 78, 114], "shuffleperepoch": 34, "threshold": [34, 39, 67, 78, 88, 90, 102, 105, 128, 142], "ed58abb40640f983": 34, "pn": 34, "newsyou": 34, "toxic": 34, "a1237f726b5f5d89": 34, "dude": 34, "place": [34, 53], "obscen": 34, "insult": 34, "24b0d6c8733c2abe": 34, "thank": [34, 82, 88, 189], "8c4478fb239bcfc0": 34, "gee": 34, "minut": 34, "traindataset": [34, 178, 194], "printschema": [34, 143, 145, 151, 154], "root": [34, 48, 55, 57, 85, 143, 145, 151, 154, 185], "setcleanupmod": [34, 145, 154], "shrink": [34, 145, 154], "1e": [34, 178, 194], "setthreshold": [34, 39, 88, 90, 178, 194], "setvalidationsplit": [34, 111, 117], "setverbos": [34, 102, 103, 111], "multiclassifierdl_use_tox": 34, "comment": [34, 88], "jigsaw": 34, "good": [34, 63, 66, 77, 120], "stuff": 34, "wtf": 34, "kind": [34, 88, 93, 95], "crap": 34, "robertaforquestionansw": [35, 105], "roberta": [35, 36, 37, 38, 41, 42, 43, 52, 63, 65, 72, 73, 74, 75, 80, 81, 105, 121], "roberta_base_qa_squad2": [35, 105], "robertaforsequenceclassif": [36, 38], "roberta_base_sequence_classifier_imdb": 36, "robertafortokenclassif": 37, "roberta_base_token_classifier_conll03": 37, "robertaforzeroshotclassif": 38, "roberta_base_zero_shot_classifier_nli": 38, "sentimentdl": 39, "affect": [39, 139], "subject": [39, 55, 57], "view": 39, "common": [39, 83, 135, 144, 171, 201], "product": 39, "review": [39, 108, 174], "tweet": 39, "interpret": [39, 58, 83], "posit": [39, 65, 66, 73, 80, 81, 82, 88, 101, 108, 119, 120, 126, 138, 142, 157, 178, 194], "final": [39, 58, 72, 74, 75, 80, 81, 90, 103, 128, 198], "otheriws": [39, 90], "neutral": [39, 90], "thresholdlabel": [39, 90], "score": [39, 61, 62, 80, 81, 88, 90, 102, 103, 105, 119, 120, 122], "less": [39, 66, 90, 93, 98, 102, 124, 130], "watch": [39, 120], "32": [39, 60, 69, 189, 197, 203], "setthresholdlabel": [39, 90], "p": [39, 59, 67, 78, 90, 103, 111, 137], "sentimentdl_use_imdb": 39, "imdb": 39, "sentimentdl_use_twitt": 39, "wow": 39, "video": [39, 88], "awesom": 39, "bruh": 39, "damn": 39, "wast": [39, 120], "tapasforquestionansw": 40, "implement": [40, 67, 78, 80, 105, 109, 117, 126, 128, 149, 150, 158, 159, 167, 173, 177], "tapa": 40, "design": [40, 49, 51, 54, 61, 62, 74, 75, 92, 121, 124, 178, 194], "about": [40, 55, 57, 74, 75, 79, 88, 105, 108, 116, 131, 153, 155, 197, 199, 202, 203], "tabular": [40, 156], "tabl": [40, 126, 156], "tri": 40, "share": [40, 88, 199], "its": [40, 53, 65, 66, 72, 82, 88, 114, 119, 121, 124, 133, 178, 187], "table_qa_tapas_base_finetuned_wtq": 40, "document_assembl": [40, 105, 126, 152, 156, 171], "table_json": 40, "document_t": [40, 156], "sentence_detector": [40, 86, 105, 115], "table_assembl": [40, 152, 171], "tableassembl": [40, 156], "stage": [40, 126, 153, 155, 178, 194, 198, 199, 202], "json_data": 40, "monei": [40, 156], "ag": [40, 68, 156], "donald": [40, 156], "trump": [40, 156], "75": [40, 88, 156], "elon": [40, 156], "musk": [40, 156], "55": [40, 104, 156, 189], "AS": [40, 48, 105], "who": [40, 58, 137, 198], "earn": 40, "count": [40, 108, 128], "old": [40, 48, 187], "xlmrobertaforquestionansw": 41, "xlm": [41, 42, 43, 80, 81], "xlm_roberta_base_qa_squad2": 41, "xlmrobertaforsequenceclassif": [42, 44], "xlm_roberta_base_sequence_classifier_imdb": 42, "xlmrobertafortokenclassif": 43, "xlm_roberta_base_token_classifier_conll03": 43, "xlmrobertaforzeroshotclassif": 44, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 44, "xlmroberta": 44, "xlnetforsequenceclassif": 45, "xlnet": [45, 46, 73, 82], "xlnet_base_sequence_classifier_imdb": 45, "xlnetfortokenclassif": 46, "spanbert_coref": 47, "spanbertcorefmodel": 48, "corefer": 48, "resolut": [48, 51], "spanbert": 48, "identifi": [48, 79, 88, 92, 96, 108, 109, 138, 139, 178, 199], "given": [48, 49, 51, 52, 53, 58, 71, 83, 88, 105, 121, 122, 125, 128, 130, 131, 133, 164, 177, 178], "told": [48, 95], "mari": [48, 62, 75, 81, 117], "he": [48, 58, 65, 95, 137, 189], "borrow": 48, "book": [48, 59, 122, 128, 185], "her": [48, 105], "link": [48, 181], "ontonot": 48, "corefresolut": 48, "spanbert_base_coref": 48, "maxsegmentlength": 48, "textgenr": 48, "genr": 48, "One": [48, 71, 88, 137, 140], "bc": 48, "broadcast": 48, "convers": 48, "bn": 48, "nw": 48, "wire": 48, "pt": 48, "pivot": 48, "testament": 48, "tc": 48, "telephon": 48, "wb": 48, "setmaxsegmentlength": 48, "settextgenr": 48, "convnextforimageclassif": 49, "convnet": 49, "convnext": 49, "2020": [49, 88, 93, 95, 117], "zhuang": 49, "liu": [49, 51, 65, 74, 75], "hanzi": 49, "mao": 49, "chao": 49, "yuan": 49, "wu": 49, "christoph": 49, "feichtenhof": 49, "trevor": 49, "darrel": 49, "sain": 49, "xie": 49, "pure": [49, 53, 124], "inspir": [49, 120, 130, 131, 174], "vision": [49, 51, 52, 53], "claim": 49, "outperform": [49, 68, 72, 73, 77, 80, 81, 82, 88, 122], "huggingfac": [49, 51, 52, 53, 63], "convnextforimageclassificationtestspec": 49, "roar": 49, "visual": [49, 51, 178], "began": 49, "introduct": 49, "vit": [49, 52, 53], "quickli": [49, 108], "supersed": 49, "vanilla": 49, "hand": [49, 137], "face": 49, "difficulti": 49, "detect": [49, 51, 77, 89, 90, 108, 109, 115, 116, 117], "semant": [49, 51, 69, 71, 77, 126, 142], "hierarch": [49, 51, 67, 78], "swin": [49, 51], "reintroduc": 49, "sever": [49, 204], "practic": [49, 63, 121, 125], "viabl": 49, "backbon": [49, 51, 82], "demonstr": [49, 51, 66, 72, 88, 122, 124], "remark": 49, "wide": [49, 59, 61, 62, 65, 66, 68, 80, 81, 121], "varieti": [49, 72, 73, 80, 81, 203], "howev": [49, 60, 73, 76, 82, 88, 106, 182, 197], "effect": [49, 51, 52, 53, 72, 108, 116, 121, 125], "hybrid": 49, "still": [49, 122, 178], "credit": 49, "superior": 49, "inher": 49, "induct": [49, 66], "bias": [49, 66], "reexamin": 49, "space": [49, 67, 78, 79, 98, 126, 157], "achiev": [49, 65, 68, 71, 72, 73, 74, 75, 80, 81, 82, 103, 121, 122, 124, 125, 153, 202], "gradual": 49, "modern": 49, "resnet": 49, "toward": [49, 122], "discov": [49, 195], "compon": [49, 53, 110, 111, 143, 151, 160, 165, 176, 202], "contribut": 49, "along": [49, 85], "wai": [49, 55, 57, 83, 85, 155, 181], "outcom": 49, "explor": [49, 121, 125], "famili": [49, 59, 68], "dub": [49, 80, 81], "construct": [49, 67, 78, 139, 181, 201], "compet": 49, "favor": 49, "term": [49, 88], "scalabl": 49, "87": [49, 51], "imagenet": [49, 51, 53], "coco": [49, 51], "ade20k": [49, 51], "while": [49, 51, 53, 60, 66, 71, 79, 88, 108, 111, 122, 178, 194, 199], "maintain": 49, "simplic": [49, 121], "effici": [49, 51, 65, 67, 77, 78, 124, 197], "dores": [49, 51, 52, 53], "resiz": [49, 51, 52, 53], "certain": [49, 51, 52, 53, 128], "donorm": [49, 51, 52, 53], "deviat": [49, 51, 52, 53], "featureextractortyp": [49, 51, 52, 53], "architectur": [49, 51, 52, 53, 60, 61, 62, 65, 74, 90, 103, 117, 121, 125], "featur": [49, 51, 52, 53, 55, 67, 78, 88, 98, 102, 111, 126, 178, 201], "imagemean": [49, 51, 52, 53], "imagestd": [49, 51, 52, 53], "resampl": [49, 51, 52, 53], "pil": [49, 51, 52, 53], "nearest": [49, 51, 52, 53, 126], "bilinear": [49, 51, 52, 53], "bicub": [49, 51, 52, 53], "do_res": [49, 51, 52, 53], "tupl": [49, 51, 52, 53, 177], "dorescal": [49, 51, 52], "rescal": [49, 51, 52], "rescalefactor": [49, 51, 52], "factor": [49, 51, 52, 80, 81, 82, 121, 125, 128], "croppct": 49, "percentag": [49, 79, 128, 142], "crop": 49, "imagedf": [49, 51, 52, 53], "dropinvalid": [49, 51, 52, 53], "imageassembl": [49, 51, 52, 53, 151], "image_assembl": [49, 51, 52, 53, 152, 171], "imageclassifi": [49, 51, 52, 53], "pipelinedf": [49, 51, 52, 53], "revers": [49, 51, 52, 53], "split": [49, 51, 52, 53, 58, 116, 117, 124, 135, 137, 138, 142], "image_nam": [49, 51, 52, 53], "bluetick": [49, 51, 52, 53], "jpg": [49, 51, 52, 53], "chihuahua": [49, 51, 52, 53], "egyptian_cat": [49, 51, 52, 53], "jpeg": [49, 51, 52, 53], "tabbi": [49, 51], "cat": [49, 51, 52, 53], "hen": [49, 51, 52, 53], "hippopotamu": [49, 51, 52, 53], "hippo": [49, 51, 53], "river": [49, 51, 53], "hors": [49, 51, 53], "amphibiu": [49, 51, 53], "junco": [49, 51, 52, 53], "snowbird": [49, 51, 53], "ostrich": [49, 51, 52, 53], "struthio": [49, 51, 53], "camelu": [49, 51, 53], "ox": [49, 51, 52, 53], "palac": [49, 51, 52, 53], "tractor": [49, 51, 52, 53], "thresher": 49, "thrasher": 49, "thresh": 49, "setdorescal": 49, "boolean": 49, "setrescalefactor": 49, "255": 49, "setcroppct": 49, "determin": [49, 80], "smaller": [49, 66, 67, 78], "224": 49, "256": 49, "specifi": [49, 104, 105, 108, 117, 184, 185], "edg": [49, 66, 85], "afterward": 49, "image_classifier_convnext_tiny_224_loc": 49, "convnext_for_image_classif": 50, "swin_for_image_classif": 50, "vision_encoder_decoder_for_image_capt": 50, "vit_for_image_classif": 50, "swinforimageclassif": 51, "swinimageclassif": 51, "shift": 51, "window": [51, 52, 67, 72, 78, 88, 103, 128], "ze": 51, "yutong": 51, "lin": 51, "yue": 51, "cao": 51, "han": 51, "hu": 51, "yixuan": 51, "zheng": 51, "zhang": 51, "stephen": 51, "bain": 51, "guo": 51, "whose": 51, "scheme": [51, 74, 121], "bring": [51, 198], "greater": [51, 88, 108], "attent": [51, 53, 65, 72, 108], "non": [51, 139, 142], "overlap": [51, 58, 92, 97], "cross": [51, 80, 81, 104], "connect": 51, "image_classifier_swin_base_patch4_window7_224": 51, "swinforimageclassificationtest": 51, "present": [51, 60, 68, 69, 72, 74, 75, 77, 80, 81, 85, 108, 111, 117, 121, 124, 126], "call": [51, 61, 62, 66, 68, 88, 108, 122, 177, 182, 184, 198, 204], "purpos": [51, 66, 68, 117], "adapt": 51, "aris": 51, "domain": [51, 71, 88, 122], "variat": 51, "high": [51, 77, 80, 81, 121, 124], "variou": [51, 82, 192], "complex": [51, 69, 77, 88, 130, 131], "respect": [51, 65, 79, 102, 103, 187], "These": [51, 60, 74, 75, 82, 88, 102, 122, 181, 196], "broad": [51, 58, 122], "rang": [51, 61, 62, 65, 66, 68, 71, 80, 81, 121], "1k": 51, "dens": [51, 61, 62, 126], "box": 51, "ap": 51, "51": [51, 145, 154, 187], "53": [51, 92, 97], "miou": 51, "val": 51, "Its": [51, 57, 105, 121], "surpass": [51, 65], "previou": [51, 71, 73, 80, 81, 122, 198], "margin": [51, 73, 82], "prove": 51, "benefici": [51, 88], "mlp": 51, "visionencoderdecoderforimagecapt": 52, "visionencoderdecod": 52, "caption": 52, "auto": [52, 121, 134], "beit": 52, "deit": 52, "gpt2": [52, 122], "image_captioning_vit_gpt2": 52, "visionencoderdecodertestspec": 52, "nreturnsequ": 52, "veri": [52, 53, 58, 63, 69, 80, 81, 82, 121, 122, 124, 125, 153, 197, 199, 202, 203], "computation": [52, 69, 74, 75, 82, 121, 122, 124, 125], "expens": [52, 69, 74, 75, 82, 119, 121, 122, 124, 125, 130], "especi": [52, 121, 122, 124, 125], "larger": [52, 63, 66, 74, 75, 121, 122, 124, 125, 126], "acceler": [52, 69, 82, 121, 122, 124, 125, 171], "gpu": [52, 60, 121, 122, 124, 125, 171], "imagecapt": 52, "setbeams": [52, 121, 165], "setdosampl": [52, 121, 122, 125, 165], "room": 52, "fill": [52, 121], "furnitur": 52, "lai": 52, "couch": 52, "anoth": [52, 199], "brown": 52, "bear": 52, "bodi": 52, "water": 52, "flock": 52, "chicken": 52, "stand": [52, 61, 62], "bird": 52, "lush": 52, "green": 52, "field": [52, 67, 78, 79, 83, 97], "small": [52, 53, 59, 60, 63, 66, 67, 78, 91, 114, 153, 187, 202], "wet": 52, "ground": 52, "dog": 52, "wooden": 52, "floor": 52, "wear": 52, "blue": 52, "sweater": 52, "man": [52, 122], "cow": 52, "vitforimageclassif": 53, "altern": [53, 88, 108, 119, 128, 130, 131, 153, 156, 198, 203], "neural": [53, 61, 62, 65, 103, 117, 121, 124], "network": [53, 61, 62, 69, 103, 117], "image_classifier_vit_base_patch16_224": 53, "vitimageclassificationtestspec": 53, "becom": [53, 60, 66, 88], "de": [53, 63, 88, 90, 124], "facto": [53, 88], "remain": [53, 59, 60, 66, 88], "conjunct": 53, "replac": [53, 59, 65, 72, 90, 91, 104, 117, 121, 130, 131, 164, 198], "overal": [53, 79, 82], "structur": [53, 105, 157, 197], "relianc": 53, "cnn": [53, 90, 103, 117], "necessari": [53, 66, 194, 201], "directli": [53, 153, 178, 182, 194], "patch": 53, "mid": 53, "cifar": 53, "vtab": 53, "etc": [53, 64, 68, 71, 73, 146, 157, 194], "attain": 53, "excel": [53, 82], "substanti": [53, 61, 62], "fewer": [53, 60, 71, 126], "worth": 53, "16x16": 53, "egyptian": 53, "date2chunk": 54, "datematch": [54, 93], "multidatematch": [54, 93, 95], "entitynam": 54, "date_chunk": 54, "omicron": 54, "covid": 54, "world": [54, 58, 59, 135, 178, 189, 194], "health": 54, "organ": [54, 88, 124], "nov": [54, 93, 95, 187], "26": [54, 101, 153, 170, 181, 189], "2021": [54, 93, 95], "118": [54, 156], "121": 54, "01": [54, 93, 95, 96], "setentitynam": 54, "dependencypars": [55, 57, 85], "dependencyparserapproach": [55, 185, 204], "unlabel": [55, 61, 62, 121, 122, 125], "grammat": [55, 57], "dependencyparsermodel": [55, 57, 85], "relationship": [55, 57, 77, 85], "tell": [55, 57, 88, 170], "verb": [55, 57, 185], "modifi": [55, 57, 74, 75, 101, 108, 117], "describ": [55, 57, 85, 88, 124], "particular": [55, 57, 88, 182, 198], "treebank": 55, "penn": 55, "setdependencytreebank": 55, "conll": [55, 57, 102, 103, 171, 185, 186, 201], "u": [55, 57, 65, 66, 88, 95, 101, 102, 103, 153, 170, 181, 185, 196, 199, 204], "setconllu": [55, 57], "dependencytreebank": 55, "conllu": [55, 57, 91, 171, 186, 201], "numberofiter": [55, 57], "converg": [55, 57, 114, 142], "better": [55, 57, 60, 65, 73, 82, 88, 102, 114, 116, 117, 120, 121, 142], "typeddependencyparserapproach": [55, 57], "postagg": [55, 57, 85, 102, 114], "dependency_treebank": 55, "emptydataset": [55, 57], "tree": [55, 85], "bank": 55, "setnumberofiter": [55, 57], "read_a": [55, 57, 83, 91, 92, 96, 97, 102, 106, 111, 119, 130, 131, 139, 163, 169, 171, 184, 185], "reada": [55, 57, 79, 83, 91, 92, 96, 97, 102, 106, 111, 119, 130, 131, 135, 139, 166, 169, 184, 185], "dep": 55, "dependency_conllu": [55, 85], "perceptron": [55, 86, 113], "typeddependencyparsermdoel": 55, "union": [55, 57], "worker": [55, 57], "turner": [55, 57], "newal": [55, 57], "sai": [55, 57, 88, 139], "disappoint": [55, 57], "talk": [55, 57, 108], "stricken": [55, 57], "parent": [55, 57], "firm": [55, 57], "feder": [55, 57], "mogul": [55, 57], "dependency_pars": [56, 86, 182, 203], "typed_dependency_pars": [56, 86], "typeddependencypars": [57, 85], "conll2009": 57, "typeddependencyparsermodel": [57, 85], "beforehand": 57, "2009": 57, "setconll2009": 57, "dependency_typ": [57, 85], "train_smal": 57, "txt": [57, 67, 78, 79, 91, 92, 96, 97, 114, 117, 119, 128, 130, 131, 135, 139, 187, 188, 204], "typdep": 57, "dependency_typed_conllu": [57, 85], "amod": 57, "flat": [57, 85, 148], "nsubj": [57, 85, 148, 185], "parataxi": 57, "documentnorm": [58, 59], "documentcharactertextsplitt": 58, "roughli": 58, "separ": [58, 66, 74, 96, 98, 116, 117, 130, 139, 142, 147, 170, 184, 196], "subtext": 58, "perfect": 58, "reason": [58, 108], "observ": [58, 77], "seen": [58, 121], "addition": [58, 82, 103, 114, 145, 154, 181], "custom": [58, 79, 102, 103, 116, 117, 139, 171, 178], "setsplitpattern": [58, 139], "regex": [58, 59, 83, 93, 96, 106, 128, 130, 131, 138, 139, 142], "setpatternsareregex": 58, "setkeepsepar": 58, "trim": 58, "whitespac": [58, 138, 142, 144], "settrimwhitespac": [58, 138], "individu": [58, 88, 128], "setexplodesplit": 58, "documentcharactertextsplittertest": 58, "chunksiz": 58, "chunkoverlap": 58, "splitpattern": [58, 139], "decreas": [58, 108, 126], "prioriti": [58, 130, 139], "patternsareregex": 58, "keepsepar": 58, "explodesplit": 58, "trimwhitespac": [58, 138], "brioni": 58, "lodg": 58, "serpentin": 58, "aven": 58, "19798": 58, "39395": 58, "19597": 58, "did": [58, 88], "woman": 58, "think": 58, "39371": 58, "59242": 58, "19871": 58, "But": [58, 68], "said": 58, "million": [58, 88, 104, 122], "red": 58, "men": 58, "59166": 58, "77833": 58, "18667": 58, "friend": 58, "enthusiast": 58, "musician": 58, "being": [58, 66, 103, 108, 111, 121, 124, 125, 126], "himself": 58, "capab": 58, "77835": 58, "97769": 58, "19934": 58, "And": 58, "yet": [58, 182], "convinc": 58, "come": [58, 88, 101, 108], "li": 58, "97771": 58, "117248": 58, "19477": 58, "she": [58, 137], "had": [58, 88, 108], "slate": 58, "colour": 58, "brim": 58, "straw": 58, "hat": 58, "feather": 58, "117250": 58, "137242": 58, "19992": 58, "That": [58, 88, 137, 178, 194, 199], "littl": [58, 117, 203], "paradox": 58, "profoundli": 58, "singulari": 58, "137244": 58, "157171": 58, "19927": 58, "setchunks": 58, "setchunkoverlap": 58, "raw": [59, 122, 137, 139, 142, 197, 199], "scrape": 59, "xml": 59, "remov": [59, 74, 75, 106, 120, 138, 146, 147, 148], "dirti": [59, 106], "want": [59, 83, 104, 182, 199], "polici": 59, "__": [59, 121, 146, 147], "action": 59, "clean": [59, 106, 121, 125, 157, 199], "lowercas": [59, 106, 138, 142, 144], "pretty_al": 59, "utf": 59, "cleanuppattern": [59, 106], "normalizeddocu": 59, "setact": 59, "setpattern": [59, 138, 142], "setreplac": 59, "setpolici": 59, "setlowercas": [59, 106, 144, 157], "div": 59, "theworldsgreatest": 59, "right": [59, 61, 62, 121, 142], "hide": 59, "toptext": 59, "style": [59, 90, 125], "font": 59, "sego": 59, "ui": 59, "arial": 59, "san": [59, 88], "serif": 59, "largest": [59, 88, 122], "develop": [59, 88, 124, 175], "site": [59, 88], "h1": 59, "300": 59, "160": 59, "lorem": [59, 92, 97], "ipsum": [59, 92, 97], "print": [59, 171, 182], "typeset": 59, "industri": 59, "been": [59, 63, 122, 140, 157, 182], "1500": 59, "unknown": [59, 90], "printer": 59, "took": 59, "gallei": 59, "scrambl": 59, "specimen": 59, "surviv": 59, "five": [59, 104], "centuri": [59, 142], "leap": 59, "electron": 59, "essenti": [59, 122], "unchang": 59, "popularis": 59, "1960": 59, "letraset": 59, "passag": [59, 68], "recent": [59, 61, 62, 65, 74, 75, 88, 108, 121], "desktop": 59, "publish": [59, 74, 75], "softwar": 59, "aldu": 59, "pagemak": 59, "setencod": 59, "lite": 60, "googl": [60, 61, 62, 65, 67, 69, 74, 75, 77, 78, 88, 125, 185], "research": [60, 61, 62, 65, 67, 78, 124, 125], "toyota": 60, "technolog": 60, "institut": 60, "chicago": 60, "offici": [60, 88, 101, 102, 103, 153, 170, 181, 195], "tf": [60, 77], "wrapper": [60, 174], "port": 60, "properti": [60, 149, 150, 160, 163, 171], "albert_base_uncas": 60, "albert_bas": 60, "768": [60, 61, 62, 63, 65, 66, 68, 71, 72, 73, 74, 75, 80, 81, 82], "emb": 60, "dim": 60, "12m": 60, "albert_large_uncas": 60, "albert_larg": 60, "1024": [60, 69, 72, 82], "24": [60, 82, 92, 97, 101, 128, 153, 170, 181, 197], "16": [60, 82, 104, 187, 197], "18m": 60, "albert_xlarge_uncas": 60, "albert_xlarg": 60, "2048": 60, "60m": 60, "albert_xxlarge_uncas": 60, "albert_xxlarg": 60, "235m": 60, "sentencepiec": [60, 65, 77], "everi": [60, 61, 62, 63, 65, 66, 68, 71, 72, 73, 74, 75, 80, 81, 82, 103, 120, 124, 128, 145, 154, 155, 199], "dimens": [60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 165], "repeat": [60, 108], "footprint": 60, "cost": [60, 128, 130], "similar": [60, 71, 77, 88, 90], "FOR": 60, "http": [60, 63, 65, 67, 69, 71, 77, 78, 108, 121, 142, 195], "tfhub": [60, 69, 77], "q": 60, "increas": [60, 68, 79, 88, 108, 121, 122, 126, 130], "downstream": [60, 63, 65, 69, 71, 72, 82, 121, 122, 125], "some": [60, 62, 80, 88, 103, 117, 122, 155, 178, 189, 197, 198, 202, 203], "point": [60, 61, 62, 116, 117, 145, 154, 184], "harder": 60, "tpu": 60, "techniqu": [60, 65, 121, 122, 125, 126], "consumpt": [60, 77, 79], "speed": [60, 102, 124], "devlin": [60, 74, 75], "et": [60, 74, 75, 90], "al": [60, 74, 75], "2019": [60, 63, 65, 74, 75, 80, 81, 121], "comprehens": [60, 121, 122], "empir": [60, 61, 62, 80, 81, 82], "evid": 60, "lead": [60, 63, 80, 81], "focus": [60, 88, 108], "inter": 60, "coher": [60, 122], "As": [60, 61, 62, 66, 68, 88, 108], "establish": 60, "glue": [60, 61, 62, 66, 73, 74, 75, 80, 81, 121], "race": [60, 65, 74, 75], "embeddingsfinish": [60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 146], "finished_embed": [60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "setoutputasvector": [60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 146], "setcleanannot": [60, 65, 66, 69, 72, 74, 76, 77, 79, 80, 82, 146, 147, 148], "80": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 96, 146, 157], "1342473030090332": [60, 65], "3855540752410889": [60, 65], "9818322062492371": [60, 65], "784737348556518": [60, 65], "847029983997345": [60, 65], "047153353691101": [60, 65], "1520637571811676": [60, 65], "6245765686035156": [60, 65], "009860038757324219": [60, 65], "13450059294700623": [60, 65], "707749128341675": [60, 65], "2916892766952": [60, 65], "04192575812339783": [60, 65], "5764210224151611": [60, 65], "3196685314178467": [60, 65], "527840495109": [60, 65], "15583214163780212": [60, 65], "1614152491092682": [60, 65], "28423872590065": [60, 65], "135491415858268": [60, 65], "bertembed": [61, 64, 71, 76, 103, 146], "small_bert_l2_768": 61, "understand": [61, 62, 66, 73, 80, 82, 88, 121, 125, 142, 197], "introduc": [61, 62, 66, 69, 71, 72, 73, 121, 125], "unlik": [61, 62, 71, 80, 88, 137], "jointli": [61, 62], "condit": [61, 62, 121, 122, 125, 165], "both": [61, 62, 68, 69, 77, 85, 108, 121, 198, 199], "left": [61, 62, 121, 142], "just": [61, 62, 66, 74, 98, 103], "modif": [61, 62], "conceptu": [61, 62], "power": [61, 62, 121, 125], "obtain": [61, 62, 63, 68, 77], "eleven": [61, 62], "push": [61, 62], "absolut": [61, 62], "multinli": [61, 62], "86": [61, 62, 65], "v1": [61, 62], "f1": [61, 62, 80, 81, 103, 122], "93": [61, 62], "83": [61, 62, 65, 187, 188, 204], "small_bert_l2_128": 61, "3497989177703857": [61, 71], "480538547039032": [61, 71], "3238905668258667": [61, 71], "612930893898010": [61, 71], "1357314586639404": 61, "32984697818756104": 61, "6032363176345825": 61, "6791689395904": 61, "8244884014129639": 61, "27088963985443115": 61, "059438943862915": 61, "9817547798156": 61, "1648050546646118": 61, "4725411534309387": 61, "5938255786895752": 61, "5780693292617": 61, "9125322699546814": 61, "4563939869403839": 61, "3975459933280945": 61, "81611204147338": 61, "sentence_bert_embed": 62, "sent_small_bert_l2_768": 62, "islong": 62, "long": [62, 72, 82], "sent_small_bert_l2_128": 62, "orang": [62, 75, 81], "8951074481010437": [62, 75, 81], "13753940165042877": [62, 75, 81], "3108254075050354": [62, 75, 81], "65693199634552": [62, 75, 81], "6180210709571838": [62, 75, 81], "12179657071828842": [62, 75, 81], "191165953874588": [62, 75, 81], "4497021436691": [62, 75, 81], "822715163230896": [62, 75, 81], "7568016648292542": [62, 75, 81], "1165061742067337": [62, 75, 81], "59048593044281": [62, 75, 81], "setislong": 62, "camembertembed": 63, "tasti": 63, "french": [63, 88, 124, 133], "loui": 63, "martin": 63, "muller": 63, "pedro": 63, "javier": 63, "ortiz": 63, "su\u00e1rez": 63, "yoann": 63, "dupont": 63, "laurent": 63, "romari": 63, "\u00e9ric": 63, "villemont": 63, "la": [63, 108, 124], "clergeri": 63, "djam\u00e9": 63, "seddah": 63, "beno\u00eet": 63, "sagot": 63, "facebook": [63, 65, 80, 81, 121], "138gb": 63, "camembert_bas": 63, "camembertembeddingstestspec": 63, "co": [63, 88], "ubiquit": 63, "despit": [63, 121], "concaten": [63, 142], "except": [63, 98, 103, 139], "investig": [63, 66, 77], "feasibl": 63, "monolingu": [63, 80, 81], "crawl": [63, 121, 125], "prefer": [63, 85, 148], "wikipedia": [63, 90, 122], "surprisingli": [63, 77], "4gb": 63, "130": 63, "gb": 63, "reach": [63, 88, 122, 142], "four": [63, 117, 140, 142], "un": [63, 90], "08442357927560806": 63, "12863239645957947": 63, "03835778683423996": 63, "200479581952": 63, "048462312668561935": 63, "12637358903884888": 63, "27429091930389404": 63, "07516729831": 63, "02690504491329193": 63, "12104076147079468": 63, "012526623904705048": 63, "031543646007": 63, "05877285450696945": 63, "08773420006036758": 63, "06381352990865707": 63, "122621834278": 63, "chunkembed": [64, 146], "wordembed": [64, 76, 79, 103, 146, 171], "chunker": [64, 86, 171], "ngramgener": [64, 98], "nerconvert": [64, 101, 102, 103, 178, 194], "poolingstrategi": [64, 76], "aggreg": [64, 76], "sum": [64, 69, 76], "skipoov": 64, "discard": [64, 105], "oov": 64, "setn": [64, 98], "wordembeddingsmodel": [64, 76, 79, 85, 102, 103, 104, 146], "setpoolingstrategi": [64, 76], "55661": 64, "42829502": 64, "86661": 64, "409785": 64, "06316501": 64, "120775": 64, "0732005": 64, "40674996": 64, "22938299": 64, "50597": 64, "288195": 64, "555655": 64, "465145": 64, "140118": 64, "17417": 64, "095253006": 64, "0530925": 64, "218465": 64, "714395": 64, "79860497": 64, "0129999": 64, "139705": 64, "177955": 64, "1887775": 64, "45545": 64, "20030999": 64, "461557": 64, "07891501": 64, "strategi": [64, 76, 93, 96, 116, 128, 164], "setskipoov": 64, "debertaembed": 65, "enhanc": [65, 120, 121], "disentangl": 65, "pengcheng": 65, "xiaodong": 65, "jianfeng": 65, "gao": 65, "weizhu": 65, "chen": [65, 74, 75], "2018": [65, 74, 75], "half": [65, 88], "deberta_v3_bas": 65, "microsoft": [65, 68, 73, 124], "www": 65, "blog": 65, "superglu": 65, "progress": [65, 117, 138], "significantli": [65, 69, 74, 75, 80, 81, 88], "novel": [65, 73, 82, 88, 121], "mechan": [65, 72], "weight": [65, 69, 88, 102, 104, 128], "among": [65, 73], "matric": 65, "second": [65, 69, 96, 116, 133, 138, 198], "mnli": 65, "9": [65, 80, 81, 98, 197, 202, 203], "90": 65, "91": 65, "88": 65, "made": [65, 77, 194], "publicli": [65, 80, 81], "distilbertembed": 66, "fast": [66, 120, 124, 153, 202], "cheap": 66, "distil": 66, "40": [66, 68, 104, 124], "uncas": 66, "preserv": [66, 101, 138, 157], "95": 66, "measur": [66, 74, 75, 121, 178], "distilbert_base_cas": 66, "doesn": [66, 74], "token_type_id": [66, 74], "indic": [66, 74, 138, 142], "belong": [66, 74], "sep_token": [66, 74], "sep": 66, "position_id": 66, "ad": [66, 69, 108, 128], "though": [66, 88], "know": [66, 124, 155], "cheaper": 66, "lighter": 66, "preval": 66, "oper": [66, 72, 128, 137, 197], "constrain": 66, "budget": 66, "counterpart": 66, "leverag": [66, 73, 178, 194], "reduc": [66, 73, 130, 131, 157], "retain": 66, "97": [66, 93, 95, 142], "tripl": [66, 85], "cosin": 66, "distanc": [66, 126, 128, 130, 131], "devic": 66, "proof": 66, "concept": [66, 199], "experi": [66, 82, 108, 121, 178, 195], "1127224713563919": 66, "1982710212469101": 66, "5360898375511169": 66, "272536993026733": 66, "35534414649009705": 66, "13215228915214539": 66, "40981462597846985": 66, "14036104083061": 66, "328085333108902": 66, "06269335001707077": 66, "017595693469047546": 66, "024373905733": 66, "15617232024669647": 66, "2967822253704071": 66, "22324979305267334": 66, "04568954557180": 66, "45411425828933716": 66, "01173491682857275": 66, "190129816532135": 66, "1178255230188369": 66, "doc2vecapproach": 67, "word2vec": [67, 70, 86], "corpu": [67, 69, 78, 88, 91, 114, 121, 125, 128, 187, 204], "algorithm": [67, 78, 88, 102, 120, 128, 130, 131], "skip": [67, 78, 85, 128], "gram": [67, 68, 78, 88, 98, 121, 122, 125, 165], "doc2vecmodel": 67, "vectors": [67, 78], "windows": [67, 78, 88], "numpartit": [67, 78], "partit": [67, 78, 184], "mincount": [67, 78, 128], "must": [67, 78, 91, 92, 96, 97, 108, 111, 119, 120, 130, 131, 144, 170, 171, 178, 184], "appear": [67, 78, 108, 128], "divid": [67, 78], "1000": [67, 78, 85, 102], "stepsiz": [67, 78], "optim": [67, 74, 75, 78, 103, 105, 117], "025": [67, 78], "maxit": [67, 78], "estim": [67, 78, 134, 149, 158, 167, 177, 198], "distribut": [67, 78], "composition": [67, 78], "sherlockholm": [67, 78, 128, 204], "setvectors": [67, 78], "setwindows": [67, 78, 88], "setsteps": [67, 78], "initi": [67, 78, 128, 138, 155, 171, 184, 185, 187, 188, 194], "setnumpartit": [67, 78], "setmaxit": [67, 78], "numiter": [67, 78], "equal": [67, 78], "setse": [67, 78], "setmincount": [67, 78, 128], "doc2vec_gigaword_300": 67, "06222493574023247": [67, 78], "011579325422644615": [67, 78], "009919632226228714": [67, 78], "109361454844": [67, 78], "doc2vec_wiki": 67, "getvector": [67, 78], "e5embed": [68, 73, 126], "e5": 68, "weakli": 68, "tailor": [68, 71], "e5_smal": 68, "contrast": [68, 71, 72, 92, 125], "unilm": 68, "manner": [68, 88], "signal": [68, 69], "curat": 68, "ccpair": 68, "readili": 68, "strong": [68, 80, 81], "conduct": 68, "extens": [68, 174], "56": [68, 187], "beir": 68, "mteb": 68, "bm25": 68, "baselin": [68, 77, 122], "beat": 68, "exist": [68, 69, 108, 128, 146, 148, 178], "queri": [68, 195], "protein": 68, "femal": 68, "eat": 68, "guidelin": 68, "cdc": 68, "women": 68, "70": [68, 71], "46": [68, 189], "dai": [68, 93, 95, 128], "chart": [68, 178, 194], "ll": [68, 142], "marathon": 68, "below": [68, 85, 203], "0190285e": 68, "005974853": 68, "072875895": 68, "007944068": 68, "026059335": 68, "0080": 68, "050514214": 68, "010061974": 68, "04340176": 68, "020937217": 68, "05170225": 68, "01157857": 68, "elmoembed": 69, "elmo": 69, "billion": [69, 122], "lookup": [69, 79, 82, 92, 130, 131], "setpoolinglay": 69, "word_emb": 69, "shape": 69, "batch_siz": 69, "max_length": 69, "lstm_outputs1": 69, "lstm": [69, 103], "lstm_outputs2": 69, "trainabl": 69, "tensor": 69, "poolinglay": 69, "contextu": [69, 121, 128], "characterist": 69, "syntax": 69, "vari": [69, 108], "across": [69, 122], "linguist": [69, 142], "polysemi": 69, "intern": [69, 110, 111, 128, 139, 142, 156, 160, 165, 171], "bilm": 69, "six": [69, 130, 131], "textual": [69, 71], "entail": 69, "expos": 69, "crucial": 69, "mix": [69, 109, 126, 159, 177], "semi": 69, "662458181381226e": 69, "2541114091873169": 69, "6275503039360046": 69, "5787073969841": 69, "19154725968837738": 69, "22998669743537903": 69, "2894386649131775": 69, "21524395048618": 69, "10400570929050446": 69, "12288510054349899": 69, "07056470215320587": 69, "246389418840": 69, "49932169914245605": 69, "12706467509269714": 69, "30969417095184326": 69, "2643227577209": 69, "8871506452560425": 69, "20039963722229004": 69, "0601330995559692": 69, "0348707810044": 69, "albert_embed": [70, 86], "bert_embed": [70, 86], "bert_sentence_embed": [70, 86], "camembert_embed": [70, 86], "chunk_embed": [70, 86], "deberta_embed": [70, 86], "distil_bert_embed": [70, 86], "doc2vec": [70, 86], "e5_embed": [70, 86], "elmo_embed": [70, 86], "instructor_embed": [70, 86], "longformer_embed": [70, 86], "mpnet_embed": [70, 86], "roberta_embed": [70, 86], "roberta_sentence_embed": [70, 86], "universal_sentence_encod": [70, 86], "xlm_roberta_embed": [70, 86], "xlm_roberta_sentence_embed": [70, 86], "xlnet_embed": [70, 86], "instructorembed": 71, "instructor": 71, "finetun": [71, 72, 82], "scienc": [71, 88, 195], "financ": 71, "sota": [71, 82], "divers": [71, 77, 121, 122, 125, 195], "setinstruct": 71, "medicin": 71, "instructor_bas": 71, "summar": [71, 72, 88, 121, 122, 124, 125, 165], "embedd": 71, "hkunlp": 71, "togeth": 71, "explain": [71, 178, 194, 201, 203], "special": [71, 128, 142, 172, 199], "330": 71, "mixtur": 71, "66": [71, 104], "unseen": 71, "magnitud": [71, 130, 131], "suggest": [71, 122], "chang": [71, 174], "mitig": 71, "url": 71, "io": 71, "dynam": [71, 124], "scalar": 71, "degre": 71, "freedom": 71, "horava": 71, "lifshitz": 71, "graviti": 71, "longformerembed": 72, "iz": 72, "beltagi": 72, "matthew": 72, "arman": 72, "cohan": 72, "checkpoint": 72, "mlm": [72, 73], "096": 72, "longformer_base_4096": 72, "unabl": 72, "quadrat": 72, "linearli": 72, "easi": 72, "thousand": 72, "drop": [72, 133], "motiv": 72, "global": 72, "text8": 72, "enwik8": 72, "wikihop": 72, "triviaqa": 72, "led": [72, 74, 75, 88], "arxiv": [72, 121], "found": [72, 79, 88, 130, 137, 144, 184, 201], "18792399764060974": [72, 74], "14591649174690247": [72, 74], "20547787845134735": [72, 74], "1468472778797": [72, 74], "22845706343650818": [72, 74], "18073144555091858": [72, 74], "09725798666477203": [72, 74], "0417917296290": [72, 74], "07037967443466187": [72, 74], "14801117777824402": [72, 74], "03603338822722435": [72, 74], "17893412709": [72, 74], "08734266459941864": [72, 74], "2486150562763214": [72, 74], "009067727252840996": [72, 74], "24408400058": [72, 74], "22409197688102722": [72, 74], "4312366545200348": [72, 74], "1401449590921402": [72, 74], "356410235166549": [72, 74], "mpnetembed": 73, "mpnet": 73, "adopt": 73, "permut": [73, 82], "inherit": [73, 109, 126, 159, 177], "advantag": [73, 155], "all_mpnet_base_v2": 73, "neglect": [73, 82], "plm": 73, "doe": [73, 80, 88, 101, 124, 153, 155, 182, 199, 202, 203], "full": [73, 82, 198], "thu": [73, 88], "suffer": [73, 82], "discrep": [73, 82], "avoid": [73, 119], "auxiliari": 73, "160gb": 73, "corpora": [73, 88, 92], "down": [73, 103, 198, 199], "stream": [73, 108], "experiment": [73, 88], "022502584": 73, "078291744": 73, "023030775": 73, "0051000593": 73, "080340415": 73, "039": 73, "041702367": 73, "0010974605": 73, "015534201": 73, "07092203": 73, "0017729357": 73, "04661": 73, "robertaembed": [74, 80], "robustli": [74, 75, 105], "yinhan": [74, 75], "myle": [74, 75, 80, 81], "ott": [74, 75, 80, 81], "naman": [74, 75, 80, 81], "goyal": [74, 75, 80, 81], "jingfei": [74, 75], "du": [74, 75, 90], "mandar": [74, 75], "joshi": [74, 75], "danqi": [74, 75], "omer": [74, 75], "levi": [74, 75], "mike": [74, 75], "lewi": [74, 75], "luke": [74, 75, 80, 81], "zettlemoy": [74, 75, 80, 81], "veselin": [74, 75, 80, 81], "stoyanov": [74, 75, 80, 81], "hyperparamet": [74, 75], "mini": [74, 75], "roberta_bas": 74, "bpe": 74, "gpt": [74, 108, 121, 122], "signific": [74, 75, 80, 81, 88, 91], "gain": [74, 75, 80, 81, 121], "care": [74, 75, 139], "comparison": [74, 75, 77, 133], "privat": [74, 75, 172], "choic": [74, 75, 96], "impact": [74, 75], "replic": [74, 75, 121], "carefulli": [74, 75, 108], "undertrain": [74, 75], "exce": [74, 75, 108], "highlight": [74, 75], "previous": [74, 75, 88], "overlook": [74, 75], "rais": [74, 75, 88, 98, 103, 178], "report": [74, 75, 77, 121, 178, 194], "robertasentenceembed": 75, "sent_roberta_bas": 75, "embeddingssent": 76, "22093398869037628": 76, "25130119919776917": 76, "41810303926467896": 76, "380883991718": 76, "dimension": 77, "tfhub_us": 77, "loadsp": 77, "op": 77, "lingual": [77, 80, 81, 88, 90, 124], "accur": [77, 120, 121, 130], "trade": [77, 80, 81], "tend": 77, "With": [77, 82, 88], "minim": [77, 105, 124], "encourag": 77, "weat": 77, "bia": [77, 108], "freeli": 77, "04616805538535118": 77, "022307956591248512": 77, "044395286589860916": 77, "0016493503": 77, "setloadsp": 77, "word2vecapproach": 78, "word2vecmodel": 78, "word2vec_gigaword_300": 78, "word2vec_wiki": 78, "dictionari": [79, 88, 91, 96, 102, 104, 105, 106, 119, 130, 131, 178], "setstoragepath": [79, 92], "line": [79, 83, 92, 97, 108, 117, 119, 128, 181, 184, 187], "delimit": [79, 83, 85, 91, 96, 98, 102, 106, 119, 138, 156, 184, 187], "39658191506190343": 79, "630968081620067": 79, "5393722253731201": 79, "8428180123359783": 79, "were": [79, 103, 178, 194], "7535235923631415": 79, "9699218875629833": 79, "10397182122983872": 79, "11833962569383116": 79, "stress": 79, "0492683418305907": 79, "9415954572751959": 79, "47624463167525755": 79, "16790967216778263": 79, "induc": 79, "1535748762292387": 79, "33498936903209897": 79, "9235178224122094": 79, "1158772920395934": 79, "withcoveragecolumn": 79, "overallcoverag": 79, "writebuffers": 79, "dump": 79, "disk": [79, 198, 199], "storag": [79, 83, 92, 163, 171], "10000": 79, "readcaches": 79, "cach": [79, 121, 126, 182], "random_embeddings_dim4": 79, "abov": [79, 85, 187], "setstorageref": 79, "glove_4d": 79, "setdimens": [79, 165], "patient": 79, "diagnos": 79, "diabet": 79, "9439099431037903": 79, "4707513153553009": 79, "806300163269043": 79, "16176554560661316": 79, "7966810464859009": 79, "5551124811172485": 79, "8861005902290344": 79, "28284206986427307": 79, "025029370561242104": 79, "35177749395370483": 79, "052506182342767715": 79, "1887107789516449": 79, "08617766946554184": 79, "8399239182472229": 79, "5395117998123169": 79, "7864698767662048": 79, "6599600911140442": 79, "16109347343444824": 79, "6041093468666077": 79, "8913561105728149": 79, "5955275893211365": 79, "01899011991918087": 79, "4397728443145752": 79, "8911281824111938": 79, "9840458631515503": 79, "7599489092826843": 79, "9417727589607239": 79, "8624503016471863": 79, "setwritebuffers": 79, "setreadcaches": 79, "glove_100d": [79, 103], "There": [79, 83, 85, 137, 196, 198, 199, 204], "conveni": 79, "coverag": [79, 162], "stat": 79, "whole": [79, 181], "570580005645752": 79, "44183000922203064": 79, "7010200023651123": 79, "417129993438720": 79, "542639970779419": 79, "4147599935531616": 79, "0321999788284302": 79, "4024400115013122": 79, "2708599865436554": 79, "04400600120425224": 79, "020260000601410866": 79, "17395000159": 79, "6191999912261963": 79, "14650000631809235": 79, "08592499792575836": 79, "2629800140857": 79, "3397899866104126": 79, "20940999686717987": 79, "46347999572753906": 79, "6479200124740": 79, "embeddings_col": 79, "coverageresult": 79, "coverateresult": 79, "wordsoverallcoverag": 79, "resultdf": 79, "output_col": 79, "wordscoverag": 79, "cov_embed": 79, "loadstorag": [79, 92], "storage_ref": [79, 92], "xlmrobertaembed": 80, "alexi": [80, 81], "conneau": [80, 81], "kartikai": [80, 81], "khandelw": [80, 81], "vishrav": [80, 81], "chaudhari": [80, 81], "guillaum": [80, 81], "wenzek": [80, 81], "francisco": [80, 81, 88], "guzman": 80, "edouard": [80, 81], "grave": [80, 81], "5tb": [80, 81], "commoncrawl": [80, 81], "xlm_roberta_bas": 80, "abl": [80, 125, 178, 197], "correct": [80, 128, 130, 131, 142], "hundr": [80, 81], "terabyt": [80, 81], "r": [80, 81, 88], "mbert": [80, 81], "xnli": [80, 81], "mlqa": [80, 81], "particularli": [80, 81, 121], "low": [80, 81, 128], "swahili": [80, 81], "urdu": [80, 81], "capac": [80, 81, 122], "dilut": [80, 81], "sacrif": [80, 81], "ri": [80, 81], "05969233065843582": 80, "030789051204919815": 80, "04443822056055069": 80, "09564960747": 80, "038839809596538544": 80, "011712731793522835": 80, "019954433664679527": 80, "0667808502": 80, "03952755779027939": 80, "03455188870429993": 80, "019103847444057465": 80, "04311436787": 80, "09579929709434509": 80, "02494969218969345": 80, "014753809198737144": 80, "10259044915": 80, "004710011184215546": 80, "022148698568344116": 80, "011723337695002556": 80, "013356896": 80, "xlmrobertasentenceembed": 81, "guzm\u00e3": 81, "sent_xlm_roberta_bas": 81, "xlnetembed": 82, "autoregress": 82, "emploi": 82, "xl": 82, "exhibit": 82, "involv": [82, 117], "rank": [82, 126, 128], "xlnet_large_cas": 82, "xlnet_base_cas": 82, "zihangdai": 82, "denois": [82, 121], "autoencod": [82, 121], "corrupt": [82, 121], "pro": 82, "con": 82, "enabl": [82, 103, 126, 130, 171], "maxim": [82, 128], "likelihood": [82, 108], "overcom": 82, "formul": 82, "furthermor": 82, "integr": [82, 88, 107, 124, 178, 194, 196], "idea": 82, "6287205219268799": 82, "4865287244319916": 82, "186111718416214": 82, "234187275171279": 82, "1967450380325317": 82, "2746637463569641": 82, "9481253027915955": 82, "3431355059146881": 82, "0777631998062134": 82, "092679977416992": 82, "5331977605819702": 82, "11190271377563": 82, "8349916934967041": 82, "45627787709236145": 82, "7890847325325012": 82, "028069257736": 82, "134845569729805": 82, "11672890186309814": 82, "4945235550403595": 82, "66587203741073": 82, "entityrul": 83, "entityrulerapproach": 83, "exact": [83, 92, 97, 108], "definit": [83, 105, 184], "json": [83, 108, 156, 178, 189], "jsonl": 83, "setpatternsresourc": 83, "might": [83, 103, 142, 203], "rule": [83, 93, 96, 119, 137, 139, 164], "person": [83, 185], "w": [83, 86, 96, 102, 106, 137, 139, 171], "winterfel": 83, "jon": 83, "snow": [83, 104, 128], "stark": 83, "eddard": 83, "patternsresourc": 83, "usestorag": 83, "rocksdb": 83, "lord": 83, "29": [83, 104, 142, 187, 189], "38": [83, 189], "setusestorag": 83, "setsentencematch": 83, "setalphabetresourc": 83, "alphabet": [83, 106], "plain": [83, 204], "entityrulermodel": 83, "entity_rul": [84, 86], "graphextract": [85, 148], "graph": [85, 103, 124, 128, 134, 148], "nerdlmodel": [85, 101, 102, 103, 104, 178, 182, 194], "store": [85, 110, 111, 156, 160, 165, 176, 181, 189, 195], "node": 85, "relev": [85, 88, 108], "taken": 85, "implicitli": 85, "setmergeent": 85, "setdependencyparsermodel": 85, "settypeddependencyparsermodel": 85, "setrelationshiptyp": 85, "public": [85, 182, 198], "relationshiptyp": 85, "entitytyp": 85, "explodeent": 85, "roottoken": 85, "travers": 85, "maxsentences": 85, "minsentences": 85, "mergeent": 85, "merg": [85, 92, 97], "neighbor": [85, 126], "includeedg": 85, "symbol": [85, 128, 142], "posmodel": 85, "coordin": [85, 116], "remoteloc": 85, "graphfinish": [85, 148], "rdf": [85, 148], "nertagg": [85, 102, 103, 104], "morn": [85, 148], "flight": [85, 148], "denver": [85, 148], "18": [85, 93, 95, 98, 101, 104, 153, 170, 181, 197], "path1": 85, "setentitytyp": 85, "setexplodeent": 85, "setroottoken": 85, "setmaxsentences": 85, "setminsentences": 85, "setmergeentitiesiobformat": 85, "iob": [85, 101, 102, 103], "iob2": [85, 101], "setincludeedg": 85, "setdelimit": [85, 96, 98], "setposmodel": 85, "class": [86, 163, 168, 175, 186, 193, 194, 202, 204], "classifier_dl": [86, 171], "er": [86, 171], "keyword_extract": [86, 171], "yake_keyword_extract": [86, 87], "ld_dl": [86, 171], "language_detector_dl": [86, 89], "matcher": [86, 171], "big_text_match": [86, 94], "date_match": [86, 94], "multi_date_match": [86, 94], "regex_match": [86, 94], "text_match": [86, 94], "ner_approach": [86, 99], "ner_convert": [86, 99], "ner_crf": [86, 99], "ner_dl": [86, 99], "ner_overwrit": [86, 99], "openai": [86, 122, 171], "openai_complet": [86, 107], "openai_embed": [86, 107], "param": [86, 102, 109, 126, 159, 160, 165, 171, 176, 177], "sentence_detector_dl": [86, 115, 124], "sentiment_detector": [86, 118], "vivekn_senti": [86, 118], "seq2seq": [86, 171], "bart_transform": [86, 123], "gpt2_transform": [86, 123], "marian_transform": [86, 123], "t5_transform": [86, 123], "spell_check": [86, 171], "context_spell_check": [86, 129], "norvig_sweet": [86, 129], "symmetric_delet": [86, 129], "chunk_token": [86, 136], "recursive_token": [86, 136], "regex_token": [86, 136], "word_segment": [86, 141], "chunk2_doc": [86, 171], "date2_chunk": [86, 171], "document_character_text_splitt": [86, 171], "document_norm": [86, 171], "graph_extract": [86, 171], "lemmat": [86, 119, 133, 155, 157, 171], "n_gram_gener": [86, 171], "stemmer": [86, 133, 171], "stop_words_clean": [86, 171], "token2_chunk": [86, 171], "yakekeywordextract": 88, "yake": 88, "independ": [88, 130, 131, 137], "grow": 88, "autom": 88, "adequ": 88, "emerg": [88, 121, 125], "tool": [88, 108, 121], "nor": 88, "thesauri": 88, "neither": 88, "written": [88, 124], "plethora": 88, "situat": [88, 117], "access": 88, "restrict": 88, "therefor": [88, 202], "sent": 88, "boundari": [88, 116, 117, 120, 139, 142], "detector": [88, 93, 119], "section": [88, 145, 154, 194, 196, 202], "tweakabl": 88, "upper": 88, "bound": [88, 116, 117, 120], "minngram": 88, "maxngram": 88, "occurr": [88, 164], "nkeyword": 88, "stopword": [88, 104, 133], "stop": [88, 102, 108, 133], "campo": 88, "mangaravit": 88, "pasquali": 88, "jatowt": 88, "jorg": 88, "nune": 88, "journal": [88, 142], "elsevi": 88, "vol": 88, "509": 88, "pp": [88, 142], "257": 88, "289": 88, "turn": [88, 157, 198], "fly": 88, "demand": 88, "abil": [88, 121, 122], "within": [88, 114, 120, 121, 122, 139, 144], "resort": 88, "alwai": [88, 108, 125], "solut": 88, "articl": [88, 128], "rest": [88, 101], "merit": 88, "ten": 88, "carri": 88, "twenti": 88, "setcontextchar": [88, 139], "setminngram": 88, "setnkeyword": 88, "acquir": 88, "kaggl": 88, "platform": [88, 108, 178, 196], "host": 88, "transact": 88, "somewhat": 88, "vagu": 88, "cloud": 88, "confer": 88, "week": [88, 93, 95, 135], "announc": [88, 104], "earli": 88, "tomorrow": [88, 93, 95], "phone": 88, "founder": 88, "ceo": 88, "anthoni": 88, "goldbloom": 88, "declin": 88, "deni": 88, "acquisit": 88, "happen": 88, "rumor": 88, "scientist": 88, "ben": 88, "hamner": 88, "2010": 88, "servic": [88, 108, 124], "got": 88, "even": [88, 125], "few": [88, 139, 187, 204], "competitor": 88, "drivendata": 88, "topcod": 88, "hackerrank": 88, "stai": 88, "ahead": 88, "nich": 88, "home": [88, 171], "bui": [88, 185], "commun": 88, "mindshar": 88, "too": [88, 119, 197], "plenti": 88, "bit": [88, 117, 203], "histori": [88, 117, 128], "earlier": 88, "month": [88, 93, 95, 187, 204], "team": [88, 124, 178, 194], "around": 88, "youtub": 88, "technologi": 88, "interest": 88, "kernel": 88, "On": [88, 122, 124], "analyz": [88, 120], "compani": [88, 124], "script": 88, "centric": 88, "job": [88, 144], "board": [88, 114, 187], "unclear": 88, "accord": [88, 128, 184], "crunchbas": 88, "pitchbook": 88, "launch": 88, "investor": 88, "ventur": 88, "sv": 88, "angel": 88, "levchin": 88, "naravik": 88, "chie": 88, "economist": 88, "hal": 88, "varian": 88, "khosla": 88, "yuri": 88, "milner": 88, "resulttupl": 88, "ascend": 88, "orderbi": 88, "32051516486864573": 88, "37786450577630676": 88, "39922830978423146": 88, "40224744669493756": 88, "41584827825302534": 88, "setmaxngram": 88, "setstopword": [88, 104, 133], "getstopword": 88, "loaddefaultstopword": [88, 133], "danish": [88, 133], "dutch": [88, 133], "finnish": [88, 133], "german": [88, 133, 184, 204], "hungarian": [88, 133], "italian": [88, 108, 128, 133], "norwegian": [88, 133], "portugues": [88, 133], "russian": [88, 133], "spanish": [88, 133], "swedish": [88, 133], "turkish": [88, 133], "languagedetectordl": 90, "ld": 90, "identif": 90, "rnn": 90, "tatoeba": 90, "140": 90, "wiki": 90, "languagedetector": 90, "ld_wiki_tatoeba_cnn_21": 90, "open": [90, 139, 144, 145, 146, 154, 157, 195], "advanc": [90, 144, 157], "scala": [90, 109, 126, 158, 159, 167, 173, 177], "program": 90, "biblioth\u00e8qu": 90, "traitement": 90, "pour": 90, "le": [90, 124], "avanc\u00e9": 90, "langag": 90, "naturel": 90, "programm": 90, "ist": 90, "ein": 90, "textverarbeitungsbibliothek": 90, "f\u00fcr": 90, "fortgeschritten": 90, "nat\u00fcrlich": 90, "sprachverarbeitung": 90, "die": 90, "programmiersprachen": 90, "und": 90, "lemma": [91, 119, 153, 181, 185, 199, 202, 203], "predefin": [91, 92, 96, 97, 119], "setdictionari": [91, 119, 130, 131], "lemmatizermodel": 91, "lemmas_smal": [91, 119], "setformcol": 91, "correspend": 91, "formcol": [91, 185], "setlemmacol": 91, "fromlemma": 91, "key_delimit": 91, "value_delimit": 91, "lemma_antbnc": 91, "bigtextmatch": [92, 97], "textmatch": [92, 97, 135], "externalresourc": [92, 97, 169], "mergeoverlap": [92, 97], "tokenizermodel": [92, 139], "trie": 92, "dolor": [92, 97], "magna": [92, 97], "aliqua": [92, 97], "sit": [92, 97], "laborum": [92, 97], "hello": [92, 97, 135, 189], "entityextractor": [92, 97, 135], "extractor": [92, 97, 135], "59": [92, 93, 95, 97], "setent": [92, 97, 100, 135], "setmergeoverlap": [92, 97], "settoken": 92, "tokenizer_model": 92, "bigtextmatchermodel": 92, "btm": 92, "textmatchermodel": [92, 97], "searchtri": 92, "datematcherutil": 93, "setinputformat": [93, 156], "setoutputformat": [93, 95], "desir": [93, 95], "yyyi": [93, 95], "mm": [93, 95, 142], "dd": [93, 95, 96], "Not": [93, 103, 155], "setreadmonthfirst": 93, "juli": 93, "5th": 93, "2015": 93, "07": 93, "05": 93, "setdefaultdaywhenmiss": 93, "miss": [93, 95, 144], "setanchordateyear": [93, 95], "anchor": [93, 95], "year": [93, 95, 122, 135, 187], "setanchordatemonth": [93, 95], "januari": [93, 95], "setanchordatedai": [93, 95], "setrelaxedfactorystrategi": 93, "matchstrategi": [93, 164], "match_first": [93, 96, 164], "relax": 93, "exhaust": 93, "1978": [93, 95], "28": [93, 95, 101, 153, 170, 181, 189, 197], "1984": [93, 95], "04": [93, 95], "02": [93, 95], "1980": [93, 95], "79": [93, 95], "31st": [93, 95], "april": [93, 95], "2008": [93, 95], "fri": [93, 95], "1997": [93, 95], "jan": [93, 95], "sun": [93, 95], "1st": [93, 95], "thursdai": [93, 95], "wednesdai": [93, 95], "todai": [93, 95, 189], "yesterdai": [93, 95], "0600h": [93, 95], "06": [93, 95], "00": [93, 95], "6pm": [93, 95], "23": [93, 95, 96, 104, 114, 187, 188, 189, 204], "1988": [93, 95], "31": [93, 95, 96, 104, 114, 187], "dateformat": [93, 95], "readmonthfirst": [93, 95], "defaultdaywhenmiss": [93, 95], "anchordateyear": [93, 95], "anchordatemonth": [93, 95], "anchordatedai": [93, 95], "15": [93, 189], "saw": 95, "him": 95, "me": 95, "visit": [95, 108], "57": [95, 104], "65": [95, 104], "regexmatch": 96, "d": [96, 106, 139, 196], "1970": 96, "setrul": 96, "setexternalrul": 96, "match_al": [96, 164], "match_complet": [96, 164], "externalrul": 96, "ceremoni": 96, "setstrategi": 96, "71": 96, "short_dat": 96, "regexmatchermodel": 96, "regardless": 97, "entityvalu": 97, "buildfromtoken": 97, "27": [97, 114, 116, 187], "48": [97, 142, 189], "setentityvalu": 97, "setbuildfromtoken": 97, "null": 98, "empti": [98, 144], "enablecumul": 98, "join": [98, 114, 156, 187], "setenablecumul": 98, "nerapproach": 100, "recogn": [100, 101, 102, 103, 104, 105, 128], "setminepoch": [100, 102], "setrandomse": [100, 103, 110], "getlabelcolumn": [100, 134], "friendli": [101, 108, 124], "whitelist": [101, 137], "setwhitelist": [101, 137], "outsid": 101, "prefix": [101, 137, 139, 178, 194], "preserveposit": [101, 138, 157], "org": [101, 102, 103, 104, 121, 142, 153, 170, 171, 181, 184, 195, 204], "14": [101, 114, 140, 153, 170, 181, 187], "ekeu": [101, 102, 103, 153, 170, 181], "36": [101, 114, 153, 170, 181, 187, 189], "baghdad": [101, 102, 103, 153, 170, 181], "37": [101, 153, 170, 181], "setpreserveposit": [101, 138, 157], "setnerhasnoschema": 101, "nercrf": 102, "nercrfapproach": [102, 103], "nercrfmodel": [102, 103], "crf": [102, 103], "2003": [102, 103, 142, 184, 204], "exclud": [102, 103], "setexternalfeatur": 102, "minepoch": [102, 103], "l2": 102, "c0": 102, "decai": [102, 103], "gradient": 102, "2250000": 102, "lossep": 102, "ep": 102, "minw": 102, "includeconfid": [102, 103], "confid": [102, 103, 105], "externalfeatur": 102, "nerdlapproach": [102, 103, 184, 204], "trainingdata": [102, 103, 117, 130, 131, 184], "readdataset": [102, 103, 114, 142, 184, 185, 187, 188, 189, 204], "conll2003": [102, 103, 184, 204], "eng": [102, 103, 184, 204], "setl2": 102, "l2valu": 102, "setc0": 102, "c0valu": 102, "setlossep": 102, "setminw": 102, "setincludeconfid": [102, 103], "verbosevalu": 102, "prerequisit": [102, 103, 104, 198], "nerdl": 103, "char": [103, 106, 117], "bilstm": 103, "tagger": [103, 187, 204], "50": [103, 104, 114, 121, 122, 189], "real": [103, 171, 178, 194], "rage": 103, "graphfold": [103, 128], "usecontrib": 103, "contrib": 103, "cell": [103, 156], "slightli": [103, 117], "includeallconfidencescor": 103, "enablememoryoptim": 103, "slow": 103, "usebestmodel": 103, "bestmodelmetr": 103, "micro": 103, "macro": 103, "setgraphfold": [103, 128, 134], "setusecontrib": 103, "setpo": 103, "setincludeallconfidencescor": 103, "setenablememoryoptim": 103, "setusebestmodel": 103, "setbestmodelmetr": 103, "nermodel": 103, "neroverwrit": 104, "setnewresult": 104, "nerword": 104, "overwritten": 104, "newnerent": 104, "lab": 104, "42": [104, 114], "45": [104, 114, 187, 189], "47": [104, 187, 189], "ner_overwritten": 104, "setnerword": 104, "setnewnerent": 104, "cardin": 104, "setreplaceent": 104, "rw": 104, "zeroshotnermodel": 105, "zeroshotn": 105, "zer_shot_n": 105, "entitydefinit": 105, "citi": 105, "town": 105, "predictionthreshold": 105, "01f": 105, "ignoreent": 105, "zero_shot_n": 105, "setentitydefinit": 105, "hellen": 105, "5328949": 105, "9360068": 105, "83294415": 105, "45366877": 105, "setpredictionthreshold": 105, "zero_shot_ner_roberta": 105, "shortcut": 105, "stem": [106, 132, 153, 181, 202, 203], "henc": 106, "pl": 106, "slangdictionari": 106, "slang": 106, "minlength": [106, 116, 117, 138, 139], "maxlength": [106, 116, 117, 138, 139], "setcleanuppattern": 106, "punctuat": [106, 116], "alphanumer": 106, "letter": [106, 122, 128, 187, 204], "za": 106, "z": [106, 139], "brother": 106, "dont": [106, 120], "setslangdictionari": 106, "setminlength": [106, 116, 117, 138, 139], "setmaxlength": [106, 116, 117, 138, 139], "normalizermodel": 106, "openaicomplet": 108, "request": 108, "complet": [108, 178, 195, 198], "executor": 108, "doc": [108, 128, 188, 204], "suffix": [108, 137, 139, 198], "insert": [108, 130, 131, 198], "maxtoken": 108, "nucleu": 108, "mass": 108, "numberofcomplet": 108, "prompt": 108, "logprob": 108, "echo": 108, "presencepenalti": 108, "penal": 108, "topic": 108, "frequencypenalti": 108, "frequenc": [108, 120, 128, 130, 131, 142], "verbatim": 108, "bestof": 108, "best_of": 108, "server": [108, 203], "side": [108, 142], "logitbia": 108, "abus": [108, 109], "pleasur": 108, "dine": 108, "fiorita": 108, "truli": 108, "delight": 108, "menu": 108, "boast": 108, "wonder": 108, "classic": 108, "dish": 108, "exquisit": 108, "prepar": [108, 143, 145, 151, 154], "staff": [108, 119], "227": 108, "barbecu": 108, "joe": 108, "dinner": 108, "amaz": 108, "pull": 108, "pork": 108, "smoke": 108, "turkei": 108, "brisket": 108, "rib": 108, "sandwich": 108, "opt": 108, "172": 108, "overallr": 108, "reviewbodi": 108, "enjoi": 108, "meal": 108, "restaur": [108, 119], "food": 108, "flavour": 108, "beautifulli": 108, "setmodel": [108, 109, 117], "setsuffix": [108, 137], "setmaxtoken": 108, "plu": [108, 122], "max_token": 108, "cannot": 108, "settemperatur": [108, 121, 122, 125, 165], "determinist": 108, "alter": 108, "settopp": [108, 121, 122, 125, 165], "compris": 108, "setnumberofcomplet": 108, "consum": 108, "quota": 108, "ensur": [108, 173], "setlogprob": 108, "respons": [108, 117], "setecho": 108, "setstop": 108, "setpresencepenalti": 108, "setfrequencypenalti": 108, "setbestof": 108, "control": [108, 121, 122, 124, 125, 126, 128, 165], "candid": [108, 128, 130, 131, 139], "setlogitbia": 108, "mathemat": 108, "ban": 108, "exclus": 108, "50256": 108, "prevent": 108, "endoftext": 108, "setus": [108, 109], "openaiembed": 109, "py": [109, 126, 158, 159, 167, 173, 177], "subclass": [109, 126, 159, 173, 177], "ins": [109, 126, 159, 177], "uid": [109, 126, 159, 177], "classifierencod": 110, "attach": [110, 111, 160, 165, 176, 178], "evaluationdlparam": 111, "setevaluationlogextend": 111, "setenableoutputlog": [111, 178, 194], "setoutputlogspath": [111, 117, 178, 194], "assum": 111, "perceptronapproach": [114, 187, 204], "member": [114, 181], "datasetpath": 114, "pierr": [114, 187], "vinken": [114, 187], "34": [114, 187, 189], "md": [114, 187], "vb": [114, 184, 187, 204], "41": [114, 116, 187, 189], "43": [114, 116, 187, 189], "dt": [114, 187, 188, 204], "49": [114, 187], "poscol": [114, 142, 184], "niter": [114, 142], "anc": [114, 187, 204], "trainingperceptrondf": 114, "trainedpo": 114, "setposcolumn": [114, 142], "cd": [114, 184, 187], "setiter": 114, "getniter": [114, 142], "pos_anc": 114, "25": [114, 116, 187, 189], "33": [114, 189], "sentencedetectorparam": 116, "ii": 116, "abbrevi": 116, "period": 116, "geo": 116, "1026": 116, "253": 116, "553": 116, "ellipsi": 116, "quotat": 116, "mark": [116, 117, 142], "exclam": 116, "breaker": 116, "pragmaticcontentformatt": 116, "custombound": [116, 117], "setcustombound": [116, 117], "usecustomboundsonli": [116, 117], "explodesent": [116, 117, 184, 185], "useabbrevi": 116, "explicitli": [116, 117, 133, 170, 198], "customboundsstrategi": 116, "prepend": [116, 144], "break": 116, "append": [116, 128, 198], "parallel": [116, 117, 153, 184, 202], "splitlength": [116, 117], "forcibli": [116, 117], "99999": [116, 117, 139], "detectlist": 116, "nhow": 116, "setcustomboundsstrategi": 116, "setuseabbrevi": 116, "setdetectlist": 116, "setusecustomboundsonli": [116, 117], "setexplodesent": [116, 117], "setsplitlength": [116, 117], "sentencedetectordl": [117, 124], "sentencedetectordlapproach": 117, "futur": [117, 121, 125], "sentencedetectordlmodel": [117, 124], "modelarchitectur": 117, "impossiblepenultim": 117, "imposs": [117, 142], "penultim": 117, "epochsnumb": 117, "eo": 117, "stefan": 117, "schweter": 117, "sajawel": 117, "ahm": 117, "cover": [117, 121, 125, 142], "broken": 117, "moder": 117, "lack": 117, "easier": [117, 147, 200, 204], "polit": 117, "successor": 117, "great": 117, "heritag": 117, "bequeath": 117, "nelson": 117, "mandela": 117, "setepochsnumb": 117, "model_architectur": 117, "validation_split": 117, "epochs_numb": 117, "output_logs_path": 117, "setimpossiblepenultim": 117, "impossible_penultim": 117, "sentencedl": 117, "sentencesdl": 117, "helen": 117, "total": [117, 142], "peopl": 117, "sentimentdetector": 119, "By": [119, 121, 125, 133, 138, 146, 171, 178, 194], "els": 119, "viveknsentimentapproach": [119, 120], "cool": 119, "superb": 119, "uninspir": 119, "sentimentscor": 119, "nice": [119, 178, 194], "entri": [119, 145, 154, 182], "sttr": 119, "sentimentdetectormodel": 119, "sda": [119, 120], "pragmat": 119, "viveknsenti": 120, "analys": 120, "vivek": 120, "narayanan": 120, "give": 120, "transit": [120, 128], "sentimentcol": 120, "prunecorpu": 120, "unfrequ": 120, "scenario": 120, "scope": 120, "naiv": 120, "bay": 120, "vivekn": 120, "setsentimentcol": 120, "train_senti": 120, "result_senti": 120, "finish": [120, 126, 146, 148, 152, 155, 171], "final_senti": 120, "cast": [120, 143], "horribl": 120, "never": [120, 198], "go": [120, 198], "again": [120, 137], "anyon": 120, "protagonist": 120, "music": 120, "setprunecorpu": 120, "viveknsentimentmodel": 120, "sentiment_vivekn": 120, "barttransform": 121, "handl": [121, 168, 186], "captur": [121, 126], "past": [121, 124, 182], "incorpor": 121, "versatil": 121, "valuabl": 121, "summari": [121, 122, 125], "distilbart_xsum_12_6": 121, "barttestspec": 121, "cumul": [121, 122, 125, 165], "ignoretokenid": [121, 122, 125], "usecach": 121, "ab": 121, "1910": 121, "13461": 121, "pytorch": 121, "fairseq": 121, "arbitrari": 121, "nois": 121, "reconstruct": [121, 157], "tranform": 121, "randomli": 121, "dialogu": 121, "roug": 121, "bleu": 121, "ablat": 121, "influenc": [121, 128], "setmaxoutputlength": [121, 122, 124, 125, 165], "200": [121, 125], "rich": [121, 125], "rise": [121, 125], "methodologi": [121, 125], "landscap": [121, 125], "unifi": [121, 125], "systemat": [121, 125], "dozen": [121, 125], "insight": [121, 125], "coloss": [121, 125], "facilit": [121, 125], "setignoretokenid": [121, 122, 124, 125], "setminoutputlength": [121, 122, 125, 165], "settopk": [121, 122, 125, 165], "setrepetitionpenalti": [121, 122, 125, 165], "ctrl": [121, 122, 125, 165], "setnorepeatngrams": [121, 122, 125, 165], "setcach": 121, "use_cach": 121, "gpt2transform": 122, "caus": [122, 139], "goal": [122, 142], "direct": 122, "10x": 122, "synthet": 122, "unpreced": 122, "prime": 122, "lengthi": 122, "benefit": 122, "suffici": 122, "learner": 122, "typic": 122, "taskspecif": 122, "webpag": [122, 195], "webtext": 122, "coqa": 122, "exceed": 122, "127": 122, "fashion": 122, "5b": 122, "underfit": 122, "reflect": 122, "paragraph": [122, 128], "promis": 122, "leonardo": 122, "1776": 122, "came": 122, "kingdom": 122, "mariantransform": 124, "marian": 124, "free": 124, "mainli": 124, "academ": 124, "notabl": 124, "edinburgh": 124, "adam": 124, "mickiewicz": 124, "pozna\u0144": 124, "commerci": 124, "contributor": 124, "mariannmt": 124, "engin": [124, 135], "behind": 124, "deploi": [124, 195], "opus_mt_en_fr": 124, "langid": 124, "maxinputlength": 124, "differenti": 124, "toolkit": 124, "setmaxinputlength": 124, "capit": [124, 128], "franc": 124, "quell": 124, "capital": 124, "devrait": 124, "savoir": 124, "fran\u00e7ai": 124, "setlangid": 124, "t5transform": 125, "t5": 125, "reconsid": 125, "hyper": 125, "t5_small": 125, "documentsimilarityrank": 126, "documentsimilarityrankerapproach": 126, "lsh": 126, "lib": 126, "execut": [126, 153, 198, 202], "approxim": 126, "aim": 126, "ranker": 126, "documentsimilarityrankermodel": 126, "doc_similarity_rank": 126, "enablecach": 126, "rdd": 126, "similaritymethod": 126, "neighbour": 126, "brp": 126, "bucket": 126, "euclidean": 126, "numberofneighbour": 126, "bucketlength": 126, "hash": 126, "numhasht": 126, "visibledist": 126, "identityrank": 126, "ident": 126, "debug": 126, "setsimilaritymethod": 126, "setnumberofneighbour": 126, "setbucketlength": 126, "setnumhasht": 126, "setvisibledist": 126, "setidentityrank": 126, "document_similarity_ranker_finish": 126, "documentsimilarityrankerfinish": 126, "finished_doc_similarity_rankings_id": 126, "finished_doc_similarity_rankings_neighbor": 126, "setextractnearestneighbor": 126, "docsimrankerpipelin": 126, "1510101612": 126, "1634839239": 126, "12448559591306324": 126, "612640902": 126, "1274183715": 126, "1220122862046063": 126, "1320876223": 126, "1293373212": 126, "17848855164122393": 126, "1548374770": 126, "1719102856": 126, "23297156732534166": 126, "visibl": 126, "inclus": 126, "extractnearestneighbor": 126, "getinputcol": [126, 134, 146, 147, 160], "getoutputcol": [126, 143, 145, 146, 147, 151, 154, 160], "document_similarity_rank": 127, "contextspellcheck": 128, "contextspellcheckerapproach": [128, 130, 131], "noisi": 128, "spell": [128, 129, 130, 131, 153, 157, 201, 202, 203], "contextspellcheckermodel": [128, 130, 131], "error": 128, "surround": [128, 156], "edit": [128, 130, 131], "subword": 128, "checker": [128, 130, 131, 201], "languagemodelclass": 128, "lm": 128, "wordmaxdist": 128, "maxcandid": 128, "casestrategi": 128, "uppercas": 128, "errorthreshold": 128, "perplex": 128, "nlm": 128, "initialr": 128, "finalr": 128, "validationfract": 128, "datapoint": 128, "min": 128, "vocab": 128, "compoundcount": 128, "compound": 128, "classcount": 128, "tradeoff": 128, "weighteddistpath": 128, "levenshtein": [128, 130, 131], "maxwindowlen": 128, "rememb": 128, "maxsentlen": 128, "norvigsweetingapproach": [128, 130, 131, 204], "symmetricdeleteapproach": [128, 130, 131, 204], "depth": [128, 201], "explan": [128, 201], "awar": 128, "sherlock": 128, "holm": 128, "spellcheck": [128, 130, 131], "setwordmaxdist": 128, "setepoch": 128, "setlanguagemodelclass": 128, "1650": 128, "addvocabclass": 128, "_name_": 128, "extra": [128, 130, 198], "dist": 128, "setmaxcandid": 128, "setcasestrategi": 128, "seterrorthreshold": 128, "setinitialr": 128, "setfinalr": 128, "setvalidationfract": 128, "fraction": 128, "setcompoundcount": 128, "setclasscount": 128, "settradeoff": 128, "alpha": 128, "setweighteddistpath": 128, "setmaxwindowlen": 128, "setmaxsentlen": 128, "sentlen": 128, "userdist": 128, "addregexclass": 128, "spellcheck_dl": 128, "gamma": 128, "decis": 128, "correctsymbol": 128, "comparelowcas": 128, "vocabfreq": 128, "idsvocab": 128, "vocabid": 128, "usenewlin": 128, "newlin": 128, "norvigsweetingmodel": [128, 130, 131], "symmetricdeletemodel": [128, 130, 131], "cold": 128, "dreari": 128, "countri": 128, "white": 128, "smow": 128, "setweight": 128, "setgamma": 128, "setvocabfreq": 128, "setidsvocab": 128, "setvocabid": 128, "setclass": 128, "getwordclass": 128, "updateregexclass": 128, "updat": 128, "updatevocabclass": 128, "setcorrectsymbol": 128, "setcomparelowcas": 128, "norvigsweet": 130, "norvig": 130, "bayesian": 130, "tokenpattern": 130, "sensit": [130, 133, 139], "doublevari": 130, "shortcircuit": 130, "frequencyprior": 130, "ham": 130, "intersect": 130, "wordsizeignor": 130, "dupslimit": 130, "duplic": 130, "reductlimit": 130, "attempt": 130, "vowelswaplimit": 130, "vowel": 130, "swap": 130, "corrector": 130, "gummi": [130, 131], "gummic": [130, 131], "gummier": [130, 131], "gummiest": [130, 131], "gummifer": [130, 131], "basi": [130, 131], "token_pattern": [130, 131], "setdoublevari": 130, "setshortcircuit": 130, "setfrequencyprior": 130, "symmetr": [130, 131], "delet": [130, 131, 198], "damerau": [130, 131], "transpos": [130, 131], "spellcheck_norvig": 130, "symspel": [130, 131], "somtim": 130, "wrrite": [130, 131], "wordz": [130, 131], "erong": [130, 131], "sometim": [130, 131, 198], "wrong": [130, 131], "symmetricdelet": 131, "deriv": 131, "teach": 131, "maxeditdist": 131, "frequencythreshold": [131, 142], "deletesthreshold": 131, "patttern": 131, "setmaxeditdist": 131, "setfrequencythreshold": [131, 142], "setdeletesthreshold": 131, "spellcheck_sd": 131, "spmetim": 131, "hard": 132, "employ": 132, "stopwordsclean": [133, 146, 157], "mllib": [133, 195], "stopwordsremov": 133, "cleantoken": [133, 146, 157], "stopwords_en": 133, "jvm": [133, 171], "forth": 133, "setlocal": 133, "tfnerdlgraphbuildermodel": 134, "tfnerdlgraphbuild": 134, "sethiddenunitsnumb": 134, "assertiondlapproach": 134, "medicalnerapproach": 134, "gethiddenunitsnumb": 134, "srt": 134, "getgraphfold": 134, "setgraphfil": 134, "greaph": 134, "getgraphfil": 134, "chunktoken": 135, "flatten": 135, "artist": 135, "benezar": 135, "robert": 135, "farendel": 135, "graduat": 135, "luca": 135, "chunktokenizermodel": 135, "recursivetoken": 137, "recurs": [137, 155, 167, 171, 175], "infix": [137, 139], "qam": 137, "setprefix": 137, "setinfix": 137, "recursivetokenizermodel": 137, "regextoken": [138, 142, 199], "tolowercas": [138, 142], "positionalmask": 138, "guarante": 138, "increment": 138, "flag": 138, "eventu": 138, "settolowercas": [138, 142], "nthi": 138, "setpositionalmask": 138, "tokenizedsent": 139, "rulefactori": [139, 164], "targetpattern": 139, "grab": 139, "prefixpattern": 139, "suffixpattern": 139, "infixpattern": 139, "sub": 139, "won": 139, "exceptionspath": 139, "casesensitiveexcept": 139, "contextchar": 139, "splitchar": 139, "didn": 139, "jane": 139, "boyfriend": 139, "getinfixpattern": 139, "getsuffixpattern": 139, "getprefixpattern": 139, "getcontextchar": 139, "getsplitchar": 139, "settargetpattern": 139, "setprefixpattern": 139, "setsuffixpattern": 139, "setinfixpattern": 139, "addinfixpattern": 139, "setexcept": 139, "getexcept": 139, "setexceptionspath": 139, "addexcept": 139, "setcasesensitiveexcept": 139, "getcasesensitiveexcept": 139, "addcontextchar": 139, "setsplitchar": 139, "addsplitchar": 139, "piec": 139, "token_rul": 139, "token2chunk": 140, "17": [140, 187, 189], "wordsegment": 142, "wordsegmenterapproach": 142, "korean": 142, "japanes": 142, "chines": 142, "correspond": [142, 178], "rr": 142, "likewis": 142, "themselv": 142, "\u4e0a\u6d77": 142, "\u8ba1\u5212": 142, "\u5230": 142, "\u672c": 142, "\u4e16\u7eaa": 142, "\u672b": 142, "\u5b9e\u73b0": 142, "\u4eba\u5747": 142, "\u56fd\u5185": 142, "\u751f\u4ea7": 142, "\u603b\u503c": 142, "\u4e94\u5343": 142, "\u7f8e\u5143": 142, "\u4e0a": 142, "\u6d77": 142, "\u8ba1": 142, "\u5212": 142, "\u4e16": 142, "\u7eaa": 142, "\u5b9e": 142, "\u73b0": 142, "\u4eba": 142, "\u5747": 142, "\u56fd": 142, "\u5185": 142, "\u751f": 142, "\u4ea7": 142, "\u603b": 142, "ll\u503c": 142, "\u4e94": 142, "\u5343": 142, "\u7f8e": 142, "\u5143": 142, "shanghai": 142, "plan": 142, "dollar": 142, "capita": 142, "gdp": 142, "wordsegmentermodel": 142, "tip": 142, "frame": 142, "least": 142, "frequent": 142, "ambiguitythreshold": 142, "enableregextoken": 142, "xue": 142, "nianwen": 142, "volum": 142, "februari": 142, "aclweb": 142, "aclanthologi": 142, "o03": 142, "4002": 142, "chinese_train": 142, "utf8": 142, "\u5341": 142, "\u56db": 142, "\u4e0d": 142, "\u662f": 142, "setniter": 142, "trainingdataset": 142, "setambiguitythreshold": 142, "getfrequencythreshold": 142, "getambiguitythreshold": 142, "setenableregextoken": 142, "plit": 142, "words_seg": 142, "wordseg_pku": 142, "zh": 142, "\u7136\u800c": 142, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 142, "\u9019\u6a23": 142, "\u7684": 142, "\u8655\u7406": 142, "\u4e5f": 142, "\u884d\u751f": 142, "\u4e86": 142, "\u4e00\u4e9b": 142, "\u554f\u984c": 142, "outputcol": [143, 145, 146, 147, 148, 151, 154], "inferschema": 143, "tmp": [143, 151, 171, 194], "librispeech_asr_dummy_clean_audio_array_parquet": 143, "float_arrai": 143, "chunkcol": 144, "stringtyp": 144, "setisarrai": 144, "startcol": 144, "startcolbytokenindex": 144, "isarrai": 144, "failonmiss": 144, "fail": 144, "chunkassembl": 144, "setchunkcol": 144, "setstartcol": 144, "setstartcolbytokenindex": 144, "setfailonmiss": 144, "disabl": [145, 154], "idcol": [145, 154], "metadatacol": [145, 154], "cleanupmod": [145, 154], "cleanup": [145, 154], "inplac": [145, 154], "inplace_ful": [145, 154], "shrink_ful": [145, 154], "each_ful": [145, 154], "delete_ful": [145, 154], "setidcol": [145, 154], "setmetadatacol": [145, 154], "usabl": 146, "lda": 146, "forest": 146, "featurecol": 146, "cleanannot": [146, 147, 148], "outputasvector": 146, "gloveembed": 146, "finished_sentence_embed": 146, "resultwiths": 146, "1619900017976761": 146, "045552998781204224": 146, "03229299932718277": 146, "685609996318": 146, "42416998744010925": 146, "1378999948501587": 146, "5717899799346924": 146, "5078899860382": 146, "08621499687433243": 146, "15772999823093414": 146, "06067200005054474": 146, "395359992980": 146, "4970499873161316": 146, "7164199948310852": 146, "40119001269340515": 146, "05761000141501": 146, "08170200139284134": 146, "7159299850463867": 146, "20677000284194946": 146, "0295659992843": 146, "valuesplitsymbol": 147, "annotationsplitsymbol": 147, "includemetadata": 147, "outputasarrai": [147, 148], "parseembeddingsvector": 147, "setvaluesplitsymbol": 147, "setannotationsplitsymbol": 147, "setincludemetadata": [147, 199], "setoutputasarrai": [147, 148], "setparseembeddingsvector": 147, "finishedresult": 148, "hasrecursivefit": [149, 150], "java_obj": [149, 174, 177], "py4j": [149, 150, 177], "java_gatewai": [149, 150, 177], "javaobject": [149, 150, 177], "recursivepipelin": [149, 150, 155, 160], "hasrecursivetransform": 150, "doc2_chunk": [152, 171], "embeddings_finish": [152, 171], "graph_finish": [152, 171], "has_recursive_fit": [152, 171], "has_recursive_transform": [152, 171], "light_pipelin": [152, 171], "recursive_pipelin": [152, 171], "token_assembl": [152, 171], "lightpipelin": [153, 181, 202], "parse_embed": [153, 181], "hold": [153, 202], "principl": [153, 202], "everyth": [153, 202, 203], "fullannot": [153, 181], "happi": [153, 197, 199, 202, 203], "prp": [153, 185, 187, 197, 202, 203, 204], "rb": [153, 187, 197, 202, 203, 204], "optional_target": [153, 181], "explain_document_pipelin": [153, 170, 181, 197, 202, 203], "dict_kei": [153, 181], "fullannotateimag": [153, 181], "path_to_imag": [153, 181], "setignoreunsupport": 153, "unsupport": 153, "annotatormodel": [153, 159, 182], "getignoreunsupport": 153, "text2": 154, "document1": 154, "document2": 154, "arg": [155, 174], "kwarg": 155, "decid": 155, "behav": 155, "exactli": 155, "intent": 155, "recursivepipelinemodel": 155, "pipeline_model": [155, 178, 194], "intend": 155, "tab": [156, 178, 194], "escap": 156, "quot": 156, "inputformat": 156, "csvdelimit": 156, "defailt": 156, "comma": 156, "escapecsvdelimit": 156, "table_csv": 156, "csv_data": 156, "input_format": 156, "setcsvdelimit": 156, "setescapecsvdelimit": 156, "tokenassembl": 157, "cleantext": 157, "opensourc": 157, "annotatorapproach": [158, 167, 178], "annotatorproperti": 160, "setlazyannot": 160, "lazili": 160, "getlazyannot": 160, "annotator_approach": [163, 171], "annotator_model": [163, 171], "annotator_properti": [163, 171], "coverage_result": [163, 171], "match_strategi": [163, 171], "recursive_annotator_approach": [163, 171], "regard": 164, "constant": [164, 166], "hasembeddingsproperti": 165, "getdimens": 165, "setnreturnsequ": 165, "recursiveannotatorapproach": 167, "fo": 169, "assist": 170, "map_annot": 170, "f": [170, 178, 194], "output_typ": 170, "udf": 170, "userdefinedfunct": 170, "def": 170, "nnp_token": 170, "lambda": 170, "alia": 170, "epeu": 170, "map_annotations_arrai": 170, "map_annotations_strict": 170, "map_annotations_col": 170, "output_column": 170, "annotatyon_typ": 170, "chunks_df": 170, "pos_chunk": 170, "vbz": [170, 184, 204], "filter_by_annotations_col": 170, "filter_po": 170, "explode_annotations_col": 170, "annotator_java_ml": [171, 175], "annotator_transform": [171, 175], "extended_java_wrapp": [171, 175], "params_getters_sett": [171, 175], "comet": [171, 179, 196], "pretrained_pipelin": [171, 180], "resource_download": [171, 180], "pub_tat": [171, 186], "annotation_audio": 171, "annotation_imag": 171, "apple_silicon": 171, "aarch64": 171, "cache_fold": 171, "log_fold": 171, "cluster_tmp_dir": 171, "real_time_output": 171, "output_level": 171, "correctli": 171, "maco": 171, "linux": 171, "alloc": 171, "directori": [171, 182, 194], "cache_pretrain": 171, "temporarili": 171, "unpack": 171, "hadoop": 171, "dir": 171, "s3": [171, 182], "hdf": 171, "dbf": 171, "annotator_log": 171, "annotatorjavamlread": 172, "mixin": 172, "javamlread": 172, "classmethod": 172, "mlreader": 172, "clazz": 172, "rl": 172, "javaparam": 172, "annotatortransform": 173, "_java_obj": 173, "javawrapp": 174, "extendedjavawrapp": 174, "new_java_arrai": 174, "pylist": 174, "java_class": 174, "todo": 174, "paramsgetterssett": 176, "getparamvalu": 176, "paramnam": 176, "setparamvalu": 176, "recursiveestim": 177, "overrid": 177, "recursivetransform": 177, "cometlogg": [178, 194], "workspac": 178, "project_nam": [178, 194], "comet_mod": [178, 194], "experiment_id": 178, "experiment_kwarg": 178, "logger": [178, 194], "meta": [178, 196], "practition": [178, 194], "reliabl": [178, 194], "streamlin": [178, 194], "lifecycl": [178, 194, 196], "track": [178, 194, 195], "reproduc": [178, 194, 195], "outputlogpath": [178, 194], "onlin": [178, 194], "reus": 178, "importerror": 178, "output_log_path": [178, 194], "embd": [178, 194], "setshuffleperepoch": [178, 194], "logdir": [178, 194], "interfac": [178, 194, 202], "attribut": 178, "comet_ml": [178, 194], "log_pipeline_paramet": [178, 194], "log_visu": [178, 194], "html": [178, 194], "viz": [178, 194], "upload": 178, "colum": [178, 194], "ner_chunk": [178, 194], "sparknlp_displai": [178, 194], "nervisu": [178, 194], "idx": [178, 194], "enumer": [178, 194], "label_col": [178, 194], "document_col": [178, 194], "return_html": [178, 194], "log_metr": [178, 194], "sklearn": [178, 194], "preprocess": [178, 194], "multilabelbinar": [178, 194], "classification_report": [178, 194], "preds_df": [178, 194], "topanda": [178, 194], "mlb": [178, 194], "y_true": [178, 194], "fit_transform": [178, 194], "y_pred": [178, 194], "output_dict": [178, 194], "log_paramet": 178, "log_completed_run": 178, "log_file_path": 178, "log_asset": 178, "asset_path": 178, "asset": 178, "log_asset_data": 178, "interv": 178, "refresh": 178, "outstand": 178, "disk_loc": 181, "light_model": 181, "gather": 181, "resourcedownload": [182, 198, 203], "showpublicmodel": [182, 198], "onto_100": 182, "onto_300": 182, "ner_dl_bert": 182, "similarli": 182, "showpublicpipelin": [182, 203], "check_spel": [182, 203], "match_datetim": [182, 203], "downloadmodel": 182, "reader": 182, "j_dwn": 182, "pythonresourcedownload": 182, "downloadmodeldirectli": 182, "unzip": 182, "downloadpipelin": 182, "clearcach": 182, "clear": 182, "argument": 182, "filer": 182, "showuncategorizedresourc": 182, "showavailableannot": 182, "documentcol": [184, 185], "sentencecol": [184, 185], "tokencol": 184, "conlllabelindex": 184, "conllposindex": 184, "conlldocidcol": 184, "doc_id": [184, 188], "textcol": [184, 185], "labelcol": 184, "includedocid": 184, "docstart": [184, 204], "eu": [184, 204], "np": [184, 204], "reject": [184, 204], "vp": [184, 204], "misc": [184, 204], "boycott": [184, 204], "british": [184, 204], "lamb": [184, 204], "blackburn": 184, "brussel": 184, "1996": 184, "08": 184, "storage_level": 184, "storagelevel": 184, "disk_onli": 184, "lift": 184, "persist": 184, "uposcol": 185, "upo": 185, "xposcol": 185, "xpo": 185, "lemmacol": 185, "sent_id": 185, "sell": 185, "pron": 185, "nom": 185, "plur": 185, "_": 185, "tens": 185, "conj": 185, "cc": 185, "obj": 185, "spaceaft": 185, "No": [185, 197], "punct": 185, "conllufil": [185, 204], "conlldataset": [185, 204], "morph": 185, "Into": 185, "googleo": 185, "sconj": 185, "propn": 185, "adp": 185, "wp": 185, "vbd": [185, 187, 204], "ago": [187, 204], "receiv": [187, 204], "posdf": 187, "61": 187, "67": [187, 188, 204], "nonexecut": 187, "69": 187, "76": 187, "director": 187, "78": 187, "81": 187, "84": 187, "outputposcol": 187, "outputdocumentcol": 187, "outputtextcol": 187, "pubtat": [188, 201], "medic": [188, 204], "titl": [188, 204], "medment": [188, 204], "25763772": [188, 204], "dctn4": [188, 204], "t116": [188, 204], "t123": [188, 204], "c4308010": [188, 204], "63": [188, 204], "chronic": [188, 204], "pseudomona": [188, 204], "aeruginosa": [188, 204], "infect": [188, 204], "t047": [188, 204], "c0854135": [188, 204], "82": [188, 204], "cystic": [188, 204], "fibrosi": [188, 204], "c0010674": [188, 204], "120": [188, 204], "pa": [188, 204], "124": [188, 204], "139": [188, 204], "pubtatorfil": 188, "corpus_pubtator_sampl": 188, "pubtatordataset": 188, "finished_token": [188, 199], "finished_po": 188, "finished_n": 188, "finished_token_metadata": 188, "finished_pos_metadata": 188, "finished_label_metadata": 188, "mo": 188, "ispaddedtoken": 188, "pad": 188, "spacytoannot": 189, "token_spac": 189, "sentence_end": 189, "spaci": 189, "multi_doc_token": 189, "went": 189, "night": 189, "bought": 189, "bread": 189, "54": 189, "overview": [193, 201], "workflow": 194, "dedic": 194, "account": 194, "inspect": 194, "init": 194, "sparknlp_experi": 194, "offline_directori": 194, "later": 194, "nativ": 195, "record": 195, "registri": 195, "central": 195, "send": 196, "messag": 196, "mlflow": 196, "content": [197, 203], "clearli": 197, "explain_document_ml": [197, 202, 203], "approx": [197, 202, 203], "mb": [197, 202, 203], "ok": [197, 202, 203], "spearhead": 198, "produc": 198, "declar": 198, "accordingli": 198, "extra_loc": 198, "offer": [198, 200, 203], "classifierdl_use_trec50": 198, "classifierdl_use_spam": 198, "column_nam": 198, "preced": 198, "interchang": 199, "road": 199, "proce": 199, "At": 199, "sens": 203, "constantli": 203, "train_po": 204, "training_conl": 204, "train_corpu": 204, "withcolumnrenam": 204, "trainingpubtatordf": 204, "corpus_pubt": 204}, "objects": {"": [[171, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [86, 0, 0, "-", "annotator"], [152, 0, 0, "-", "base"], [163, 0, 0, "-", "common"], [170, 0, 0, "-", "functions"], [175, 0, 0, "-", "internal"], [179, 0, 0, "-", "logging"], [180, 0, 0, "-", "pretrained"], [171, 3, 1, "", "start"], [186, 0, 0, "-", "training"], [191, 0, 0, "-", "upload_to_hub"], [192, 0, 0, "-", "util"], [171, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [30, 0, 0, "-", "classifier_dl"], [47, 0, 0, "-", "coref"], [50, 0, 0, "-", "cv"], [54, 0, 0, "-", "date2_chunk"], [56, 0, 0, "-", "dependency"], [58, 0, 0, "-", "document_character_text_splitter"], [59, 0, 0, "-", "document_normalizer"], [70, 0, 0, "-", "embeddings"], [84, 0, 0, "-", "er"], [85, 0, 0, "-", "graph_extraction"], [87, 0, 0, "-", "keyword_extraction"], [89, 0, 0, "-", "ld_dl"], [91, 0, 0, "-", "lemmatizer"], [94, 0, 0, "-", "matcher"], [98, 0, 0, "-", "n_gram_generator"], [99, 0, 0, "-", "ner"], [106, 0, 0, "-", "normalizer"], [107, 0, 0, "-", "openai"], [112, 0, 0, "-", "param"], [113, 0, 0, "-", "pos"], [115, 0, 0, "-", "sentence"], [118, 0, 0, "-", "sentiment"], [123, 0, 0, "-", "seq2seq"], [127, 0, 0, "-", "similarity"], [129, 0, 0, "-", "spell_check"], [132, 0, 0, "-", "stemmer"], [133, 0, 0, "-", "stop_words_cleaner"], [134, 0, 0, "-", "tf_ner_dl_graph_builder"], [136, 0, 0, "-", "token"], [140, 0, 0, "-", "token2_chunk"], [141, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "distil_bert_for_question_answering"], [27, 0, 0, "-", "distil_bert_for_sequence_classification"], [28, 0, 0, "-", "distil_bert_for_token_classification"], [29, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [31, 0, 0, "-", "longformer_for_question_answering"], [32, 0, 0, "-", "longformer_for_sequence_classification"], [33, 0, 0, "-", "longformer_for_token_classification"], [34, 0, 0, "-", "multi_classifier_dl"], [35, 0, 0, "-", "roberta_for_question_answering"], [36, 0, 0, "-", "roberta_for_sequence_classification"], [37, 0, 0, "-", "roberta_for_token_classification"], [38, 0, 0, "-", "roberta_for_zero_shot_classification"], [39, 0, 0, "-", "sentiment_dl"], [40, 0, 0, "-", "tapas_for_question_answering"], [41, 0, 0, "-", "xlm_roberta_for_question_answering"], [42, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [43, 0, 0, "-", "xlm_roberta_for_token_classification"], [44, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [45, 0, 0, "-", "xlnet_for_sequence_classification"], [46, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, 1, 1, "", "MultiClassifierDLApproach"], [34, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[34, 2, 1, "", "setThreshold"], [34, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, 1, 1, "", "SentimentDLApproach"], [39, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[39, 2, 1, "", "setDropout"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[48, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSegmentLength"], [48, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[49, 0, 0, "-", "convnext_for_image_classification"], [51, 0, 0, "-", "swin_for_image_classification"], [52, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [53, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setCropPct"], [49, 2, 1, "", "setDoRescale"], [49, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[52, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[53, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[53, 2, 1, "", "getClasses"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[54, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[54, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[55, 0, 0, "-", "dependency_parser"], [57, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[55, 1, 1, "", "DependencyParserApproach"], [55, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[55, 2, 1, "", "setConllU"], [55, 2, 1, "", "setDependencyTreeBank"], [55, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[55, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[57, 1, 1, "", "TypedDependencyParserApproach"], [57, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[57, 2, 1, "", "setConll2009"], [57, 2, 1, "", "setConllU"], [57, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[57, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[58, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[58, 2, 1, "", "setChunkOverlap"], [58, 2, 1, "", "setChunkSize"], [58, 2, 1, "", "setExplodeSplits"], [58, 2, 1, "", "setKeepSeparators"], [58, 2, 1, "", "setPatternsAreRegex"], [58, 2, 1, "", "setSplitPatterns"], [58, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[59, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[59, 2, 1, "", "setAction"], [59, 2, 1, "", "setEncoding"], [59, 2, 1, "", "setLowercase"], [59, 2, 1, "", "setPatterns"], [59, 2, 1, "", "setPolicy"], [59, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[60, 0, 0, "-", "albert_embeddings"], [61, 0, 0, "-", "bert_embeddings"], [62, 0, 0, "-", "bert_sentence_embeddings"], [63, 0, 0, "-", "camembert_embeddings"], [64, 0, 0, "-", "chunk_embeddings"], [65, 0, 0, "-", "deberta_embeddings"], [66, 0, 0, "-", "distil_bert_embeddings"], [67, 0, 0, "-", "doc2vec"], [68, 0, 0, "-", "e5_embeddings"], [69, 0, 0, "-", "elmo_embeddings"], [71, 0, 0, "-", "instructor_embeddings"], [72, 0, 0, "-", "longformer_embeddings"], [73, 0, 0, "-", "mpnet_embeddings"], [74, 0, 0, "-", "roberta_embeddings"], [75, 0, 0, "-", "roberta_sentence_embeddings"], [76, 0, 0, "-", "sentence_embeddings"], [77, 0, 0, "-", "universal_sentence_encoder"], [78, 0, 0, "-", "word2vec"], [79, 0, 0, "-", "word_embeddings"], [80, 0, 0, "-", "xlm_roberta_embeddings"], [81, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [82, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[60, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[61, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[62, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setConfigProtoBytes"], [62, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[63, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[64, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[64, 2, 1, "", "setPoolingStrategy"], [64, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[65, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[66, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[67, 1, 1, "", "Doc2VecApproach"], [67, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[67, 2, 1, "", "setMaxIter"], [67, 2, 1, "", "setMaxSentenceLength"], [67, 2, 1, "", "setMinCount"], [67, 2, 1, "", "setNumPartitions"], [67, 2, 1, "", "setSeed"], [67, 2, 1, "", "setStepSize"], [67, 2, 1, "", "setVectorSize"], [67, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[67, 2, 1, "", "getVectors"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[68, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[69, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setBatchSize"], [69, 2, 1, "", "setConfigProtoBytes"], [69, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[71, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"], [71, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[72, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[73, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[74, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[75, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[76, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[76, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[77, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[77, 2, 1, "", "loadSavedModel"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setConfigProtoBytes"], [77, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[78, 1, 1, "", "Word2VecApproach"], [78, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[78, 2, 1, "", "setMaxIter"], [78, 2, 1, "", "setMaxSentenceLength"], [78, 2, 1, "", "setMinCount"], [78, 2, 1, "", "setNumPartitions"], [78, 2, 1, "", "setSeed"], [78, 2, 1, "", "setStepSize"], [78, 2, 1, "", "setVectorSize"], [78, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[78, 2, 1, "", "getVectors"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[79, 1, 1, "", "WordEmbeddings"], [79, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[79, 2, 1, "", "setReadCacheSize"], [79, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[79, 2, 1, "", "loadStorage"], [79, 2, 1, "", "overallCoverage"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setReadCacheSize"], [79, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[80, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[81, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[82, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[83, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[83, 1, 1, "", "EntityRulerApproach"], [83, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[83, 2, 1, "", "setAlphabetResource"], [83, 2, 1, "", "setPatternsResource"], [83, 2, 1, "", "setSentenceMatch"], [83, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[85, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[85, 2, 1, "", "setDelimiter"], [85, 2, 1, "", "setDependencyParserModel"], [85, 2, 1, "", "setEntityTypes"], [85, 2, 1, "", "setExplodeEntities"], [85, 2, 1, "", "setIncludeEdges"], [85, 2, 1, "", "setMaxSentenceSize"], [85, 2, 1, "", "setMergeEntities"], [85, 2, 1, "", "setMergeEntitiesIOBFormat"], [85, 2, 1, "", "setMinSentenceSize"], [85, 2, 1, "", "setPosModel"], [85, 2, 1, "", "setRelationshipTypes"], [85, 2, 1, "", "setRootTokens"], [85, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[88, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[88, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[88, 2, 1, "", "getStopWords"], [88, 2, 1, "", "loadDefaultStopWords"], [88, 2, 1, "", "setMaxNGrams"], [88, 2, 1, "", "setMinNGrams"], [88, 2, 1, "", "setNKeywords"], [88, 2, 1, "", "setStopWords"], [88, 2, 1, "", "setThreshold"], [88, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[90, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[90, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setCoalesceSentences"], [90, 2, 1, "", "setConfigProtoBytes"], [90, 2, 1, "", "setThreshold"], [90, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[91, 1, 1, "", "Lemmatizer"], [91, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[91, 2, 1, "", "setDictionary"], [91, 2, 1, "", "setFormCol"], [91, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[91, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[92, 0, 0, "-", "big_text_matcher"], [93, 0, 0, "-", "date_matcher"], [95, 0, 0, "-", "multi_date_matcher"], [96, 0, 0, "-", "regex_matcher"], [97, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[92, 1, 1, "", "BigTextMatcher"], [92, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[92, 2, 1, "", "setCaseSensitive"], [92, 2, 1, "", "setEntities"], [92, 2, 1, "", "setMergeOverlapping"], [92, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[92, 2, 1, "", "loadStorage"], [92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setCaseSensitive"], [92, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[93, 1, 1, "", "DateMatcher"], [93, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[93, 2, 1, "", "setAnchorDateDay"], [93, 2, 1, "", "setAnchorDateMonth"], [93, 2, 1, "", "setAnchorDateYear"], [93, 2, 1, "", "setDefaultDayWhenMissing"], [93, 2, 1, "", "setInputFormats"], [93, 2, 1, "", "setOutputFormat"], [93, 2, 1, "", "setReadMonthFirst"], [93, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[95, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[96, 1, 1, "", "RegexMatcher"], [96, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[96, 2, 1, "", "setDelimiter"], [96, 2, 1, "", "setExternalRules"], [96, 2, 1, "", "setRules"], [96, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[97, 1, 1, "", "TextMatcher"], [97, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[97, 2, 1, "", "setBuildFromTokens"], [97, 2, 1, "", "setCaseSensitive"], [97, 2, 1, "", "setEntities"], [97, 2, 1, "", "setEntityValue"], [97, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setBuildFromTokens"], [97, 2, 1, "", "setEntityValue"], [97, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[98, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[98, 2, 1, "", "setDelimiter"], [98, 2, 1, "", "setEnableCumulative"], [98, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[100, 0, 0, "-", "ner_approach"], [101, 0, 0, "-", "ner_converter"], [102, 0, 0, "-", "ner_crf"], [103, 0, 0, "-", "ner_dl"], [104, 0, 0, "-", "ner_overwriter"], [105, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[100, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[100, 2, 1, "", "getLabelColumn"], [100, 2, 1, "", "setEntities"], [100, 2, 1, "", "setLabelColumn"], [100, 2, 1, "", "setMaxEpochs"], [100, 2, 1, "", "setMinEpochs"], [100, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[101, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[101, 2, 1, "", "setNerHasNoSchema"], [101, 2, 1, "", "setPreservePosition"], [101, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[102, 1, 1, "", "NerCrfApproach"], [102, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[102, 2, 1, "", "setC0"], [102, 2, 1, "", "setExternalFeatures"], [102, 2, 1, "", "setIncludeConfidence"], [102, 2, 1, "", "setL2"], [102, 2, 1, "", "setLossEps"], [102, 2, 1, "", "setMinW"], [102, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[102, 2, 1, "", "pretrained"], [102, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[103, 1, 1, "", "NerDLApproach"], [103, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[103, 2, 1, "", "setBatchSize"], [103, 2, 1, "", "setBestModelMetric"], [103, 2, 1, "", "setConfigProtoBytes"], [103, 2, 1, "", "setDropout"], [103, 2, 1, "", "setEnableMemoryOptimizer"], [103, 2, 1, "", "setGraphFolder"], [103, 2, 1, "", "setIncludeAllConfidenceScores"], [103, 2, 1, "", "setIncludeConfidence"], [103, 2, 1, "", "setLr"], [103, 2, 1, "", "setPo"], [103, 2, 1, "", "setUseBestModel"], [103, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setConfigProtoBytes"], [103, 2, 1, "", "setIncludeAllConfidenceScores"], [103, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[104, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[104, 2, 1, "", "setNerWords"], [104, 2, 1, "", "setNewNerEntity"], [104, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[105, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[105, 2, 1, "", "getClasses"], [105, 2, 1, "", "load"], [105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setEntityDefinitions"], [105, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[106, 1, 1, "", "Normalizer"], [106, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[106, 2, 1, "", "setCleanupPatterns"], [106, 2, 1, "", "setLowercase"], [106, 2, 1, "", "setMaxLength"], [106, 2, 1, "", "setMinLength"], [106, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[108, 0, 0, "-", "openai_completion"], [109, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[108, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[108, 2, 1, "", "setBestOf"], [108, 2, 1, "", "setEcho"], [108, 2, 1, "", "setFrequencyPenalty"], [108, 2, 1, "", "setLogitBias"], [108, 2, 1, "", "setLogprobs"], [108, 2, 1, "", "setMaxTokens"], [108, 2, 1, "", "setModel"], [108, 2, 1, "", "setNumberOfCompletions"], [108, 2, 1, "", "setPresencePenalty"], [108, 2, 1, "", "setStop"], [108, 2, 1, "", "setSuffix"], [108, 2, 1, "", "setTemperature"], [108, 2, 1, "", "setTopP"], [108, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[109, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[109, 2, 1, "", "setModel"], [109, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[110, 0, 0, "-", "classifier_encoder"], [111, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[110, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[110, 2, 1, "", "setBatchSize"], [110, 2, 1, "", "setConfigProtoBytes"], [110, 2, 1, "", "setLabelColumn"], [110, 2, 1, "", "setLr"], [110, 2, 1, "", "setMaxEpochs"], [110, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[111, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[111, 2, 1, "", "setEnableOutputLogs"], [111, 2, 1, "", "setEvaluationLogExtended"], [111, 2, 1, "", "setOutputLogsPath"], [111, 2, 1, "", "setTestDataset"], [111, 2, 1, "", "setValidationSplit"], [111, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[114, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[114, 1, 1, "", "PerceptronApproach"], [114, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[114, 2, 1, "", "getNIterations"], [114, 2, 1, "", "setIterations"], [114, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[114, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[116, 0, 0, "-", "sentence_detector"], [117, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[116, 1, 1, "", "SentenceDetector"], [116, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[116, 2, 1, "", "setCustomBounds"], [116, 2, 1, "", "setCustomBoundsStrategy"], [116, 2, 1, "", "setDetectLists"], [116, 2, 1, "", "setExplodeSentences"], [116, 2, 1, "", "setMaxLength"], [116, 2, 1, "", "setMinLength"], [116, 2, 1, "", "setSplitLength"], [116, 2, 1, "", "setUseAbbreviations"], [116, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[117, 1, 1, "", "SentenceDetectorDLApproach"], [117, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[117, 2, 1, "", "setEpochsNumber"], [117, 2, 1, "", "setExplodeSentences"], [117, 2, 1, "", "setImpossiblePenultimates"], [117, 2, 1, "", "setModel"], [117, 2, 1, "", "setOutputLogsPath"], [117, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[117, 2, 1, "", "pretrained"], [117, 2, 1, "", "setCustomBounds"], [117, 2, 1, "", "setExplodeSentences"], [117, 2, 1, "", "setImpossiblePenultimates"], [117, 2, 1, "", "setMaxLength"], [117, 2, 1, "", "setMinLength"], [117, 2, 1, "", "setModel"], [117, 2, 1, "", "setSplitLength"], [117, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[119, 0, 0, "-", "sentiment_detector"], [120, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[119, 1, 1, "", "SentimentDetector"], [119, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[119, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[120, 1, 1, "", "ViveknSentimentApproach"], [120, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[120, 2, 1, "", "setPruneCorpus"], [120, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[120, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[121, 0, 0, "-", "bart_transformer"], [122, 0, 0, "-", "gpt2_transformer"], [124, 0, 0, "-", "marian_transformer"], [125, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[121, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[121, 2, 1, "", "loadSavedModel"], [121, 2, 1, "", "pretrained"], [121, 2, 1, "", "setBeamSize"], [121, 2, 1, "", "setCache"], [121, 2, 1, "", "setConfigProtoBytes"], [121, 2, 1, "", "setDoSample"], [121, 2, 1, "", "setIgnoreTokenIds"], [121, 2, 1, "", "setMaxOutputLength"], [121, 2, 1, "", "setMinOutputLength"], [121, 2, 1, "", "setNoRepeatNgramSize"], [121, 2, 1, "", "setRepetitionPenalty"], [121, 2, 1, "", "setTask"], [121, 2, 1, "", "setTemperature"], [121, 2, 1, "", "setTopK"], [121, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[122, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[122, 2, 1, "", "loadSavedModel"], [122, 2, 1, "", "pretrained"], [122, 2, 1, "", "setConfigProtoBytes"], [122, 2, 1, "", "setDoSample"], [122, 2, 1, "", "setIgnoreTokenIds"], [122, 2, 1, "", "setMaxOutputLength"], [122, 2, 1, "", "setMinOutputLength"], [122, 2, 1, "", "setNoRepeatNgramSize"], [122, 2, 1, "", "setRepetitionPenalty"], [122, 2, 1, "", "setTask"], [122, 2, 1, "", "setTemperature"], [122, 2, 1, "", "setTopK"], [122, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[124, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[124, 2, 1, "", "loadSavedModel"], [124, 2, 1, "", "pretrained"], [124, 2, 1, "", "setConfigProtoBytes"], [124, 2, 1, "", "setIgnoreTokenIds"], [124, 2, 1, "", "setLangId"], [124, 2, 1, "", "setMaxInputLength"], [124, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[125, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[125, 2, 1, "", "loadSavedModel"], [125, 2, 1, "", "pretrained"], [125, 2, 1, "", "setConfigProtoBytes"], [125, 2, 1, "", "setDoSample"], [125, 2, 1, "", "setIgnoreTokenIds"], [125, 2, 1, "", "setMaxOutputLength"], [125, 2, 1, "", "setMinOutputLength"], [125, 2, 1, "", "setNoRepeatNgramSize"], [125, 2, 1, "", "setRepetitionPenalty"], [125, 2, 1, "", "setTask"], [125, 2, 1, "", "setTemperature"], [125, 2, 1, "", "setTopK"], [125, 2, 1, "", "setTopP"]], "sparknlp.annotator.similarity": [[126, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[126, 1, 1, "", "DocumentSimilarityRankerApproach"], [126, 1, 1, "", "DocumentSimilarityRankerFinisher"], [126, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[126, 2, 1, "", "setBucketLength"], [126, 2, 1, "", "setIdentityRanking"], [126, 2, 1, "", "setNumHashTables"], [126, 2, 1, "", "setNumberOfNeighbours"], [126, 2, 1, "", "setSimilarityMethod"], [126, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[126, 2, 1, "", "getInputCols"], [126, 2, 1, "", "getOutputCols"], [126, 2, 1, "", "setExtractNearestNeighbor"], [126, 2, 1, "", "setInputCols"], [126, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[128, 0, 0, "-", "context_spell_checker"], [130, 0, 0, "-", "norvig_sweeting"], [131, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[128, 1, 1, "", "ContextSpellCheckerApproach"], [128, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[128, 2, 1, "", "addRegexClass"], [128, 2, 1, "", "addVocabClass"], [128, 2, 1, "", "setBatchSize"], [128, 2, 1, "", "setCaseStrategy"], [128, 2, 1, "", "setClassCount"], [128, 2, 1, "", "setCompoundCount"], [128, 2, 1, "", "setConfigProtoBytes"], [128, 2, 1, "", "setEpochs"], [128, 2, 1, "", "setErrorThreshold"], [128, 2, 1, "", "setFinalRate"], [128, 2, 1, "", "setGraphFolder"], [128, 2, 1, "", "setInitialRate"], [128, 2, 1, "", "setLanguageModelClasses"], [128, 2, 1, "", "setMaxCandidates"], [128, 2, 1, "", "setMaxSentLen"], [128, 2, 1, "", "setMaxWindowLen"], [128, 2, 1, "", "setMinCount"], [128, 2, 1, "", "setTradeoff"], [128, 2, 1, "", "setValidationFraction"], [128, 2, 1, "", "setWeightedDistPath"], [128, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[128, 2, 1, "", "getWordClasses"], [128, 2, 1, "", "pretrained"], [128, 2, 1, "", "setCaseStrategy"], [128, 2, 1, "", "setClasses"], [128, 2, 1, "", "setCompareLowcase"], [128, 2, 1, "", "setConfigProtoBytes"], [128, 2, 1, "", "setCorrectSymbols"], [128, 2, 1, "", "setErrorThreshold"], [128, 2, 1, "", "setGamma"], [128, 2, 1, "", "setIdsVocab"], [128, 2, 1, "", "setMaxCandidates"], [128, 2, 1, "", "setMaxWindowLen"], [128, 2, 1, "", "setTradeoff"], [128, 2, 1, "", "setVocabFreq"], [128, 2, 1, "", "setVocabIds"], [128, 2, 1, "", "setWeights"], [128, 2, 1, "", "setWordMaxDistance"], [128, 2, 1, "", "updateRegexClass"], [128, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[130, 1, 1, "", "NorvigSweetingApproach"], [130, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[130, 2, 1, "", "setCaseSensitive"], [130, 2, 1, "", "setDictionary"], [130, 2, 1, "", "setDoubleVariants"], [130, 2, 1, "", "setFrequencyPriority"], [130, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[130, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[131, 1, 1, "", "SymmetricDeleteApproach"], [131, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[131, 2, 1, "", "setDeletesThreshold"], [131, 2, 1, "", "setDictionary"], [131, 2, 1, "", "setFrequencyThreshold"], [131, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[131, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[132, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[133, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[133, 2, 1, "", "loadDefaultStopWords"], [133, 2, 1, "", "pretrained"], [133, 2, 1, "", "setCaseSensitive"], [133, 2, 1, "", "setLocale"], [133, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[134, 1, 1, "", "TFNerDLGraphBuilder"], [134, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[134, 2, 1, "", "getGraphFile"], [134, 2, 1, "", "getGraphFolder"], [134, 2, 1, "", "getHiddenUnitsNumber"], [134, 2, 1, "", "getInputCols"], [134, 2, 1, "", "getLabelColumn"], [134, 2, 1, "", "setGraphFile"], [134, 2, 1, "", "setGraphFolder"], [134, 2, 1, "", "setHiddenUnitsNumber"], [134, 2, 1, "", "setInputCols"], [134, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[135, 0, 0, "-", "chunk_tokenizer"], [137, 0, 0, "-", "recursive_tokenizer"], [138, 0, 0, "-", "regex_tokenizer"], [139, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[135, 1, 1, "", "ChunkTokenizer"], [135, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[137, 1, 1, "", "RecursiveTokenizer"], [137, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[137, 2, 1, "", "setInfixes"], [137, 2, 1, "", "setPrefixes"], [137, 2, 1, "", "setSuffixes"], [137, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[138, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[138, 2, 1, "", "setMaxLength"], [138, 2, 1, "", "setMinLength"], [138, 2, 1, "", "setPattern"], [138, 2, 1, "", "setPositionalMask"], [138, 2, 1, "", "setPreservePosition"], [138, 2, 1, "", "setToLowercase"], [138, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[139, 1, 1, "", "Tokenizer"], [139, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[139, 2, 1, "", "addContextChars"], [139, 2, 1, "", "addException"], [139, 2, 1, "", "addInfixPattern"], [139, 2, 1, "", "addSplitChars"], [139, 2, 1, "", "getCaseSensitiveExceptions"], [139, 2, 1, "", "getContextChars"], [139, 2, 1, "", "getExceptions"], [139, 2, 1, "", "getInfixPatterns"], [139, 2, 1, "", "getPrefixPattern"], [139, 2, 1, "", "getSplitChars"], [139, 2, 1, "", "getSuffixPattern"], [139, 2, 1, "", "setCaseSensitiveExceptions"], [139, 2, 1, "", "setContextChars"], [139, 2, 1, "", "setExceptions"], [139, 2, 1, "", "setExceptionsPath"], [139, 2, 1, "", "setInfixPatterns"], [139, 2, 1, "", "setMaxLength"], [139, 2, 1, "", "setMinLength"], [139, 2, 1, "", "setPrefixPattern"], [139, 2, 1, "", "setSplitChars"], [139, 2, 1, "", "setSplitPattern"], [139, 2, 1, "", "setSuffixPattern"], [139, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[139, 2, 1, "", "addSplitChars"], [139, 2, 1, "", "pretrained"], [139, 2, 1, "", "setSplitChars"], [139, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[140, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[142, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[142, 1, 1, "", "WordSegmenterApproach"], [142, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[142, 2, 1, "", "getAmbiguityThreshold"], [142, 2, 1, "", "getFrequencyThreshold"], [142, 2, 1, "", "getNIterations"], [142, 2, 1, "", "setAmbiguityThreshold"], [142, 2, 1, "", "setEnableRegexTokenizer"], [142, 2, 1, "", "setFrequencyThreshold"], [142, 2, 1, "", "setNIterations"], [142, 2, 1, "", "setPattern"], [142, 2, 1, "", "setPosColumn"], [142, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[142, 2, 1, "", "pretrained"], [142, 2, 1, "", "setEnableRegexTokenizer"], [142, 2, 1, "", "setPattern"], [142, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[143, 0, 0, "-", "audio_assembler"], [144, 0, 0, "-", "doc2_chunk"], [145, 0, 0, "-", "document_assembler"], [146, 0, 0, "-", "embeddings_finisher"], [147, 0, 0, "-", "finisher"], [148, 0, 0, "-", "graph_finisher"], [149, 0, 0, "-", "has_recursive_fit"], [150, 0, 0, "-", "has_recursive_transform"], [151, 0, 0, "-", "image_assembler"], [153, 0, 0, "-", "light_pipeline"], [154, 0, 0, "-", "multi_document_assembler"], [155, 0, 0, "-", "recursive_pipeline"], [156, 0, 0, "-", "table_assembler"], [157, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[143, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[143, 2, 1, "", "getOutputCol"], [143, 2, 1, "", "setInputCol"], [143, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[144, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[144, 2, 1, "", "setChunkCol"], [144, 2, 1, "", "setFailOnMissing"], [144, 2, 1, "", "setIsArray"], [144, 2, 1, "", "setLowerCase"], [144, 2, 1, "", "setStartCol"], [144, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[145, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[145, 2, 1, "", "getOutputCol"], [145, 2, 1, "", "setCleanupMode"], [145, 2, 1, "", "setIdCol"], [145, 2, 1, "", "setInputCol"], [145, 2, 1, "", "setMetadataCol"], [145, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[146, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[146, 2, 1, "", "getInputCols"], [146, 2, 1, "", "getOutputCols"], [146, 2, 1, "", "setCleanAnnotations"], [146, 2, 1, "", "setInputCols"], [146, 2, 1, "", "setOutputAsVector"], [146, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[147, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[147, 2, 1, "", "getInputCols"], [147, 2, 1, "", "getOutputCols"], [147, 2, 1, "", "setAnnotationSplitSymbol"], [147, 2, 1, "", "setCleanAnnotations"], [147, 2, 1, "", "setIncludeMetadata"], [147, 2, 1, "", "setInputCols"], [147, 2, 1, "", "setOutputAsArray"], [147, 2, 1, "", "setOutputCols"], [147, 2, 1, "", "setParseEmbeddingsVectors"], [147, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[148, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[148, 2, 1, "", "setCleanAnnotations"], [148, 2, 1, "", "setInputCol"], [148, 2, 1, "", "setOutputAsArray"], [148, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[149, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[150, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[151, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[151, 2, 1, "", "getOutputCol"], [151, 2, 1, "", "setInputCol"], [151, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[153, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[153, 2, 1, "", "annotate"], [153, 2, 1, "", "fullAnnotate"], [153, 2, 1, "", "fullAnnotateImage"], [153, 2, 1, "", "getIgnoreUnsupported"], [153, 2, 1, "", "setIgnoreUnsupported"], [153, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[154, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[154, 2, 1, "", "getOutputCols"], [154, 2, 1, "", "setCleanupMode"], [154, 2, 1, "", "setIdCol"], [154, 2, 1, "", "setInputCols"], [154, 2, 1, "", "setMetadataCol"], [154, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[155, 1, 1, "", "RecursivePipeline"], [155, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[156, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[156, 2, 1, "", "setCsvDelimiter"], [156, 2, 1, "", "setEscapeCsvDelimiter"], [156, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[157, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[157, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[158, 0, 0, "-", "annotator_approach"], [159, 0, 0, "-", "annotator_model"], [160, 0, 0, "-", "annotator_properties"], [161, 0, 0, "-", "annotator_type"], [162, 0, 0, "-", "coverage_result"], [164, 0, 0, "-", "match_strategy"], [165, 0, 0, "-", "properties"], [166, 0, 0, "-", "read_as"], [167, 0, 0, "-", "recursive_annotator_approach"], [168, 0, 0, "-", "storage"], [169, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[158, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[159, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[160, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[160, 2, 1, "", "getInputCols"], [160, 2, 1, "", "getLazyAnnotator"], [160, 2, 1, "", "getOutputCol"], [160, 2, 1, "", "setInputCols"], [160, 2, 1, "", "setLazyAnnotator"], [160, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[164, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[165, 1, 1, "", "HasEmbeddingsProperties"], [165, 3, 1, "", "setBeamSize"], [165, 3, 1, "", "setDoSample"], [165, 3, 1, "", "setMaxOutputLength"], [165, 3, 1, "", "setMinOutputLength"], [165, 3, 1, "", "setNReturnSequences"], [165, 3, 1, "", "setNoRepeatNgramSize"], [165, 3, 1, "", "setRepetitionPenalty"], [165, 3, 1, "", "setTask"], [165, 3, 1, "", "setTemperature"], [165, 3, 1, "", "setTopK"], [165, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[165, 2, 1, "", "getDimension"], [165, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[166, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[167, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[169, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[170, 3, 1, "", "explode_annotations_col"], [170, 3, 1, "", "filter_by_annotations_col"], [170, 3, 1, "", "map_annotations"], [170, 3, 1, "", "map_annotations_array"], [170, 3, 1, "", "map_annotations_col"], [170, 3, 1, "", "map_annotations_cols"], [170, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[172, 0, 0, "-", "annotator_java_ml"], [173, 0, 0, "-", "annotator_transformer"], [174, 0, 0, "-", "extended_java_wrapper"], [176, 0, 0, "-", "params_getters_setters"], [177, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[172, 1, 1, "", "AnnotatorJavaMLReadable"], [172, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[172, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[173, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[174, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[174, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[176, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[176, 2, 1, "", "getParamValue"], [176, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[177, 1, 1, "", "RecursiveEstimator"], [177, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[177, 2, 1, "", "fit"]], "sparknlp.logging": [[178, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[178, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[178, 2, 1, "", "end"], [178, 2, 1, "", "log_asset"], [178, 2, 1, "", "log_asset_data"], [178, 2, 1, "", "log_completed_run"], [178, 2, 1, "", "log_metrics"], [178, 2, 1, "", "log_parameters"], [178, 2, 1, "", "log_pipeline_parameters"], [178, 2, 1, "", "log_visualization"], [178, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[181, 0, 0, "-", "pretrained_pipeline"], [182, 0, 0, "-", "resource_downloader"], [183, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[181, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[181, 2, 1, "", "annotate"], [181, 2, 1, "", "fullAnnotate"], [181, 2, 1, "", "fullAnnotateImage"], [181, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[182, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[182, 2, 1, "", "clearCache"], [182, 2, 1, "", "downloadModel"], [182, 2, 1, "", "downloadModelDirectly"], [182, 2, 1, "", "downloadPipeline"], [182, 2, 1, "", "showAvailableAnnotators"], [182, 2, 1, "", "showPublicModels"], [182, 2, 1, "", "showPublicPipelines"], [182, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[184, 0, 0, "-", "conll"], [185, 0, 0, "-", "conllu"], [187, 0, 0, "-", "pos"], [188, 0, 0, "-", "pub_tator"], [189, 0, 0, "-", "spacy_to_annotation"], [190, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[184, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[184, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[185, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[185, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[187, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[187, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[188, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[188, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[189, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 199], "start": 0, "spark": [0, 1, 194, 199, 203], "nlp": [0, 1, 194, 203], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 194], "us": [0, 194, 203], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 181, 182, 184, 185, 187, 188, 189], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 197, 198, 199], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 169, 170, 172, 173, 174, 176, 177, 178, 181, 182, 184, 185, 187, 188, 189, 193], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 172, 173, 174, 176, 177, 178, 181, 182, 184, 185, 187, 188, 189], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 30, 47, 50, 56, 70, 84, 86, 87, 89, 94, 99, 107, 113, 115, 118, 123, 127, 129, 136, 141, 152, 163, 171, 175, 179, 180, 186], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "distil_bert_for_question_answ": 26, "distil_bert_for_sequence_classif": 27, "distil_bert_for_token_classif": 28, "distil_bert_for_zero_shot_classif": 29, "longformer_for_question_answ": 31, "longformer_for_sequence_classif": 32, "longformer_for_token_classif": 33, "multi_classifier_dl": 34, "roberta_for_question_answ": 35, "roberta_for_sequence_classif": 36, "roberta_for_token_classif": 37, "roberta_for_zero_shot_classif": 38, "sentiment_dl": 39, "tapas_for_question_answ": 40, "xlm_roberta_for_question_answ": 41, "xlm_roberta_for_sequence_classif": 42, "xlm_roberta_for_token_classif": 43, "xlm_roberta_for_zero_shot_classif": 44, "xlnet_for_sequence_classif": 45, "xlnet_for_token_classif": 46, "coref": [47, 48], "spanbert_coref": 48, "cv": [49, 50, 51, 52, 53], "convnext_for_image_classif": 49, "swin_for_image_classif": 51, "vision_encoder_decoder_for_image_capt": 52, "vit_for_image_classif": 53, "date2_chunk": 54, "depend": [55, 56, 57], "dependency_pars": 55, "typed_dependency_pars": 57, "document_character_text_splitt": 58, "document_norm": 59, "embed": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "albert_embed": 60, "bert_embed": 61, "bert_sentence_embed": 62, "camembert_embed": 63, "chunk_embed": 64, "deberta_embed": 65, "distil_bert_embed": 66, "doc2vec": 67, "e5_embed": 68, "elmo_embed": 69, "instructor_embed": 71, "longformer_embed": 72, "mpnet_embed": 73, "roberta_embed": 74, "roberta_sentence_embed": 75, "sentence_embed": 76, "universal_sentence_encod": 77, "word2vec": 78, "word_embed": 79, "xlm_roberta_embed": 80, "xlm_roberta_sentence_embed": 81, "xlnet_embed": 82, "er": [83, 84], "entity_rul": 83, "graph_extract": 85, "subpackag": [86, 171], "keyword_extract": [87, 88], "yake_keyword_extract": 88, "ld_dl": [89, 90], "language_detector_dl": 90, "lemmat": 91, "matcher": [92, 93, 94, 95, 96, 97], "big_text_match": 92, "date_match": 93, "multi_date_match": 95, "regex_match": 96, "text_match": 97, "n_gram_gener": 98, "ner": [99, 100, 101, 102, 103, 104, 105], "ner_approach": 100, "ner_convert": 101, "ner_crf": 102, "ner_dl": 103, "ner_overwrit": 104, "zero_shot_ner_model": 105, "normal": 106, "openai": [107, 108, 109], "openai_complet": 108, "openai_embed": 109, "param": [110, 111, 112], "classifier_encod": 110, "evaluation_dl_param": 111, "po": [113, 114, 187, 204], "perceptron": 114, "sentenc": [115, 116, 117, 199], "sentence_detector": 116, "sentence_detector_dl": 117, "sentiment": [118, 119, 120], "sentiment_detector": 119, "vivekn_senti": 120, "seq2seq": [121, 122, 123, 124, 125], "bart_transform": 121, "gpt2_transform": 122, "marian_transform": 124, "t5_transform": 125, "similar": [126, 127], "document_similarity_rank": 126, "spell_check": [128, 129, 130, 131], "context_spell_check": 128, "norvig_sweet": 130, "symmetric_delet": 131, "stemmer": 132, "stop_words_clean": 133, "tf_ner_dl_graph_build": 134, "token": [135, 136, 137, 138, 139, 199], "chunk_token": 135, "recursive_token": 137, "regex_token": 138, "token2_chunk": 140, "w": [141, 142], "word_segment": 142, "base": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157], "audio_assembl": 143, "doc2_chunk": 144, "document_assembl": 145, "embeddings_finish": 146, "finish": [147, 199], "graph_finish": 148, "has_recursive_fit": 149, "has_recursive_transform": 150, "image_assembl": 151, "light_pipelin": 153, "multi_document_assembl": 154, "recursive_pipelin": 155, "table_assembl": 156, "token_assembl": 157, "common": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 198], "annotator_approach": 158, "annotator_model": 159, "annotator_properti": 160, "annotator_typ": 161, "coverage_result": 162, "match_strategi": 164, "properti": 165, "function": [165, 169, 170, 171, 198, 200], "read_a": 166, "recursive_annotator_approach": 167, "storag": 168, "util": [169, 183, 192], "packag": 171, "intern": [172, 173, 174, 175, 176, 177], "annotator_java_ml": 172, "annotator_transform": 173, "extended_java_wrapp": 174, "params_getters_sett": 176, "recurs": 177, "log": [178, 179, 194, 196], "comet": [178, 194], "pretrain": [180, 181, 182, 183, 198, 202, 203], "pretrained_pipelin": 181, "resource_download": 182, "train": [184, 185, 186, 187, 188, 189, 190, 204], "conll": [184, 204], "conllu": [185, 204], "pub_tat": 188, "spacy_to_annot": 189, "tfgraph": 190, "upload_to_hub": 191, "api": 193, "refer": 193, "A": 194, "meta": 194, "machin": [194, 195], "learn": [194, 195], "platform": [194, 195], "pipelin": [194, 199, 202, 203], "paramet": 194, "evalu": 194, "metric": 194, "visual": 194, "run": 194, "an": 194, "offlin": 194, "experi": 194, "mlflow": 195, "lifecycl": 195, "third": 196, "parti": 196, "project": 196, "approach": 198, "model": 198, "note": 198, "avail": [198, 203], "set": 199, "up": 199, "your": 199, "own": 199, "type": 199, "necessari": 199, "import": 199, "construct": 199, "documentassembl": 199, "data": 199, "detect": 199, "out": 199, "put": 199, "all": 199, "togeth": 199, "ml": [199, 203], "helper": 200, "user": 201, "guid": 201, "light": 202, "convert": 202, "pipelinemodel": 202, "download": 203, "As": 203, "lightpipelin": 203, "load": 204, "dataset": 204, "spell": 204, "checker": 204, "pubtat": 204}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [194, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [85, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [182, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [85, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [114, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [181, "classes"], [182, "classes"], [184, "classes"], [185, "classes"], [187, "classes"], [188, "classes"], [189, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [30, "submodules"], [47, "submodules"], [50, "submodules"], [56, "submodules"], [70, "submodules"], [84, "submodules"], [86, "submodules"], [87, "submodules"], [89, "submodules"], [94, "submodules"], [99, "submodules"], [107, "submodules"], [113, "submodules"], [115, "submodules"], [118, "submodules"], [123, "submodules"], [127, "submodules"], [129, "submodules"], [136, "submodules"], [141, "submodules"], [152, "submodules"], [163, "submodules"], [171, "submodules"], [175, "submodules"], [179, "submodules"], [180, "submodules"], [186, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[52, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[53, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[54, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[55, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[56, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[57, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[58, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[59, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[60, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[61, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[62, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[63, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[64, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[65, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[66, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[67, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[68, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[69, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[70, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[71, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[72, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[73, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[74, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[75, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[76, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[77, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[78, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[79, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[80, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[81, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[82, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[83, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[84, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[85, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[86, "module-sparknlp.annotator"]], "Subpackages": [[86, "subpackages"], [171, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[87, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[88, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[89, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[90, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[91, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[92, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[93, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[94, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[95, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[96, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[97, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[98, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[99, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[100, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[101, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[102, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[103, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[104, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[105, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[106, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[107, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[108, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[109, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[110, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[111, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[112, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[113, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[114, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[115, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[116, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[117, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[118, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[119, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[120, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[121, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[122, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[123, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[124, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[125, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[126, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[127, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[128, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[129, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[130, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[131, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[132, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[133, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[134, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[135, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[136, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[137, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[138, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[139, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[140, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[141, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[142, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[143, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[144, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[145, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[146, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[147, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[148, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[149, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[150, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[151, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[152, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[153, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[154, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[155, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[156, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[157, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[158, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[159, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[160, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[161, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[162, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[163, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[164, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[165, "module-sparknlp.common.properties"]], "Functions": [[165, "functions"], [169, "functions"], [170, "functions"], [171, "functions"]], "sparknlp.common.read_as": [[166, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[167, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[168, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[169, "module-sparknlp.common.utils"]], "sparknlp.functions": [[170, "module-sparknlp.functions"]], "sparknlp": [[171, "module-sparknlp"]], "Package Contents": [[171, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[172, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[173, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[174, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[175, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[176, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[177, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[178, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[179, "module-sparknlp.logging"]], "sparknlp.pretrained": [[180, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[181, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[182, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[183, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[184, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[185, "module-sparknlp.training.conllu"]], "sparknlp.training": [[186, "module-sparknlp.training"]], "sparknlp.training.pos": [[187, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[188, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[189, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[190, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[191, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[192, "module-sparknlp.util"]], "API Reference": [[193, "api-reference"]], "Modules": [[193, "modules"]], "Comet - A meta machine learning platform": [[194, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[194, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[194, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[194, "logging-evaluation-metrics"]], "Logging Visualizations": [[194, "logging-visualizations"]], "Running An Offline Experiment": [[194, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[195, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[196, "third-party-projects"]], "Logging": [[196, "logging"]], "Annotation": [[197, "annotation"]], "Annotators": [[198, "annotators"]], "Annotator Approaches": [[198, "annotator-approaches"]], "Annotator Models": [[198, "annotator-models"]], "Note": [[198, "note"]], "Pretrained Models": [[198, "pretrained-models"]], "Common Functions": [[198, "common-functions"]], "Available Annotators": [[198, "available-annotators"]], "Setting up your own pipeline": [[199, "setting-up-your-own-pipeline"]], "Annotator types": [[199, "annotator-types"]], "Necessary imports": [[199, "necessary-imports"]], "Constructing the Pipeline": [[199, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[199, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[199, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[199, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[199, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[200, "helper-functions"]], "User Guide": [[201, "user-guide"]], "Light Pipelines": [[202, "light-pipelines"]], "Converting PipelineModels": [[202, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[202, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[203, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[203, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[203, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[203, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[203, "available-pipelines"]], "Loading datasets for training": [[204, "loading-datasets-for-training"]], "POS Dataset": [[204, "pos-dataset"]], "CoNLL Dataset": [[204, "conll-dataset"]], "CoNLLU Dataset": [[204, "conllu-dataset"]], "Spell Checkers Dataset": [[204, "spell-checkers-dataset"]], "PubTator Dataset": [[204, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [47, "module-sparknlp.annotator.coref"], [48, "module-sparknlp.annotator.coref.spanbert_coref"], [49, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [50, "module-sparknlp.annotator.cv"], [51, "module-sparknlp.annotator.cv.swin_for_image_classification"], [52, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [53, "module-sparknlp.annotator.cv.vit_for_image_classification"], [54, "module-sparknlp.annotator.date2_chunk"], [55, "module-sparknlp.annotator.dependency.dependency_parser"], [56, "module-sparknlp.annotator.dependency"], [57, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [58, "module-sparknlp.annotator.document_character_text_splitter"], [59, "module-sparknlp.annotator.document_normalizer"], [60, "module-sparknlp.annotator.embeddings.albert_embeddings"], [61, "module-sparknlp.annotator.embeddings.bert_embeddings"], [62, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [63, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [64, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [65, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [66, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [67, "module-sparknlp.annotator.embeddings.doc2vec"], [68, "module-sparknlp.annotator.embeddings.e5_embeddings"], [69, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [70, "module-sparknlp.annotator.embeddings"], [71, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [72, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [73, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [74, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [75, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [76, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [77, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [78, "module-sparknlp.annotator.embeddings.word2vec"], [79, "module-sparknlp.annotator.embeddings.word_embeddings"], [80, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [81, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [82, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [83, "module-sparknlp.annotator.er.entity_ruler"], [84, "module-sparknlp.annotator.er"], [85, "module-sparknlp.annotator.graph_extraction"], [86, "module-sparknlp.annotator"], [87, "module-sparknlp.annotator.keyword_extraction"], [88, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [89, "module-sparknlp.annotator.ld_dl"], [90, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [91, "module-sparknlp.annotator.lemmatizer"], [92, "module-sparknlp.annotator.matcher.big_text_matcher"], [93, "module-sparknlp.annotator.matcher.date_matcher"], [94, "module-sparknlp.annotator.matcher"], [95, "module-sparknlp.annotator.matcher.multi_date_matcher"], [96, "module-sparknlp.annotator.matcher.regex_matcher"], [97, "module-sparknlp.annotator.matcher.text_matcher"], [98, "module-sparknlp.annotator.n_gram_generator"], [99, "module-sparknlp.annotator.ner"], [100, "module-sparknlp.annotator.ner.ner_approach"], [101, "module-sparknlp.annotator.ner.ner_converter"], [102, "module-sparknlp.annotator.ner.ner_crf"], [103, "module-sparknlp.annotator.ner.ner_dl"], [104, "module-sparknlp.annotator.ner.ner_overwriter"], [105, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [106, "module-sparknlp.annotator.normalizer"], [107, "module-sparknlp.annotator.openai"], [108, "module-sparknlp.annotator.openai.openai_completion"], [109, "module-sparknlp.annotator.openai.openai_embeddings"], [110, "module-sparknlp.annotator.param.classifier_encoder"], [111, "module-sparknlp.annotator.param.evaluation_dl_params"], [112, "module-sparknlp.annotator.param"], [113, "module-sparknlp.annotator.pos"], [114, "module-sparknlp.annotator.pos.perceptron"], [115, "module-sparknlp.annotator.sentence"], [116, "module-sparknlp.annotator.sentence.sentence_detector"], [117, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [118, "module-sparknlp.annotator.sentiment"], [119, "module-sparknlp.annotator.sentiment.sentiment_detector"], [120, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [121, "module-sparknlp.annotator.seq2seq.bart_transformer"], [122, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [123, "module-sparknlp.annotator.seq2seq"], [124, "module-sparknlp.annotator.seq2seq.marian_transformer"], [125, "module-sparknlp.annotator.seq2seq.t5_transformer"], [126, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [127, "module-sparknlp.annotator.similarity"], [128, "module-sparknlp.annotator.spell_check.context_spell_checker"], [129, "module-sparknlp.annotator.spell_check"], [130, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [131, "module-sparknlp.annotator.spell_check.symmetric_delete"], [132, "module-sparknlp.annotator.stemmer"], [133, "module-sparknlp.annotator.stop_words_cleaner"], [134, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [135, "module-sparknlp.annotator.token.chunk_tokenizer"], [136, "module-sparknlp.annotator.token"], [137, "module-sparknlp.annotator.token.recursive_tokenizer"], [138, "module-sparknlp.annotator.token.regex_tokenizer"], [139, "module-sparknlp.annotator.token.tokenizer"], [140, "module-sparknlp.annotator.token2_chunk"], [141, "module-sparknlp.annotator.ws"], [142, "module-sparknlp.annotator.ws.word_segmenter"], [143, "module-sparknlp.base.audio_assembler"], [144, "module-sparknlp.base.doc2_chunk"], [145, "module-sparknlp.base.document_assembler"], [146, "module-sparknlp.base.embeddings_finisher"], [147, "module-sparknlp.base.finisher"], [148, "module-sparknlp.base.graph_finisher"], [149, "module-sparknlp.base.has_recursive_fit"], [150, "module-sparknlp.base.has_recursive_transform"], [151, "module-sparknlp.base.image_assembler"], [152, "module-sparknlp.base"], [153, "module-sparknlp.base.light_pipeline"], [154, "module-sparknlp.base.multi_document_assembler"], [155, "module-sparknlp.base.recursive_pipeline"], [156, "module-sparknlp.base.table_assembler"], [157, "module-sparknlp.base.token_assembler"], [158, "module-sparknlp.common.annotator_approach"], [159, "module-sparknlp.common.annotator_model"], [160, "module-sparknlp.common.annotator_properties"], [161, "module-sparknlp.common.annotator_type"], [162, "module-sparknlp.common.coverage_result"], [163, "module-sparknlp.common"], [164, "module-sparknlp.common.match_strategy"], [165, "module-sparknlp.common.properties"], [166, "module-sparknlp.common.read_as"], [167, "module-sparknlp.common.recursive_annotator_approach"], [168, "module-sparknlp.common.storage"], [169, "module-sparknlp.common.utils"], [170, "module-sparknlp.functions"], [171, "module-sparknlp"], [172, "module-sparknlp.internal.annotator_java_ml"], [173, "module-sparknlp.internal.annotator_transformer"], [174, "module-sparknlp.internal.extended_java_wrapper"], [175, "module-sparknlp.internal"], [176, "module-sparknlp.internal.params_getters_setters"], [177, "module-sparknlp.internal.recursive"], [178, "module-sparknlp.logging.comet"], [179, "module-sparknlp.logging"], [180, "module-sparknlp.pretrained"], [181, "module-sparknlp.pretrained.pretrained_pipeline"], [182, "module-sparknlp.pretrained.resource_downloader"], [183, "module-sparknlp.pretrained.utils"], [184, "module-sparknlp.training.conll"], [185, "module-sparknlp.training.conllu"], [186, "module-sparknlp.training"], [187, "module-sparknlp.training.pos"], [188, "module-sparknlp.training.pub_tator"], [189, "module-sparknlp.training.spacy_to_annotation"], [190, "module-sparknlp.training.tfgraphs"], [191, "module-sparknlp.upload_to_hub"], [192, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[52, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[52, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[53, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[53, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[54, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[54, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[54, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[55, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[55, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[56, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[57, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[57, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[58, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[58, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[59, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[59, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[60, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[60, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[60, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[60, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[60, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[61, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[61, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[61, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[61, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[61, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[62, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[62, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[62, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[62, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[62, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[62, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[63, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[63, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[63, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[63, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[63, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[64, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[64, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[64, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[64, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[65, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[65, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[65, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[65, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[65, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[66, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[66, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[66, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[66, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[66, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[67, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[67, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[68, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[68, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[68, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[68, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[68, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[69, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[69, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[69, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[69, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[69, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[69, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[69, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[70, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[71, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[71, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[71, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[71, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[71, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[71, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[72, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[72, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[72, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[72, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[72, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[73, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[73, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[73, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[73, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[73, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[74, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[74, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[74, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[74, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[74, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[75, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[75, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[75, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[75, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[75, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[76, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[76, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[76, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[77, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[77, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[77, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[77, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[77, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[77, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[78, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[78, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[79, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[79, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[80, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[80, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[81, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[81, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[81, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[81, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[81, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[82, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[82, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[82, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[82, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[82, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[83, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[83, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[83, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[83, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[83, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[83, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[83, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[84, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[85, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[85, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[86, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[87, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[88, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[88, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[89, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[90, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[90, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[90, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[90, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[90, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[90, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[90, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[91, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[91, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[91, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[91, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[91, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[91, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[91, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[92, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[92, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[93, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[93, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[94, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[95, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[95, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[96, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[96, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[96, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[96, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[96, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[96, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[96, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[97, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[97, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[98, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[98, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[98, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[98, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[98, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[99, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[100, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[100, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[101, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[101, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[101, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[101, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[101, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[102, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[102, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[103, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[103, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[104, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[104, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[104, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[104, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[104, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[105, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[105, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[105, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[105, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[105, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[105, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[105, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[106, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[106, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[106, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[106, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[106, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[106, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[106, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[106, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[107, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[108, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[108, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[109, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[109, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[109, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[109, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[110, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[110, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[111, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[111, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[112, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[113, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[114, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[114, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[114, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[114, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[114, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[114, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[114, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[115, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[116, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[116, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[117, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[117, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[118, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[119, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[119, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[119, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[119, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[120, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[120, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[120, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[120, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[120, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[120, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[121, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[121, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[122, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[122, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[123, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[124, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[124, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[125, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[125, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[126, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[126, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[127, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[128, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[128, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[129, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[130, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[130, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[131, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[131, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[132, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[132, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[133, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[133, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[133, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[133, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[133, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[133, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[133, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[134, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[134, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[135, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[135, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[135, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[136, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[137, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[137, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[137, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[137, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[137, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[137, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[137, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[138, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[138, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[139, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[139, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[139, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[139, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[139, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[139, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[139, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[140, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[140, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[141, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[142, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[142, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[143, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[143, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[143, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[143, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[143, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[144, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[144, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[145, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[145, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[145, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[145, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[145, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[145, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[145, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[145, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[146, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[146, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[147, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[147, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[147, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[148, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[148, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[148, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[148, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[148, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[148, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[149, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[149, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[150, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[150, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[151, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[151, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[151, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[151, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[151, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[152, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[153, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[153, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[153, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[153, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[153, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[153, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[153, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[153, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[154, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[154, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[155, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[155, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[155, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[156, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[156, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[156, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[156, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[156, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[157, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[157, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[157, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[158, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[158, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[159, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[159, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[160, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[160, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[161, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[162, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[163, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[164, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[164, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[165, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[165, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[165, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[165, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[165, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[166, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[166, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[167, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[167, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[168, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[169, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[169, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[170, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[170, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[170, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[170, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[170, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[170, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[170, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[170, "module-sparknlp.functions"]], "sparknlp": [[171, "module-sparknlp"]], "start() (in module sparknlp)": [[171, "sparknlp.start"]], "version() (in module sparknlp)": [[171, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[172, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[172, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[172, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[172, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[173, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[173, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[174, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[174, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[174, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[175, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[176, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[176, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[176, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[176, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[177, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[177, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[177, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[177, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[178, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[178, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[178, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[179, "module-sparknlp.logging"]], "sparknlp.pretrained": [[180, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[181, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[181, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[181, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[181, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[181, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[181, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[182, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[182, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[183, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[184, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[184, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[184, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[185, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[185, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[185, "module-sparknlp.training.conllu"]], "sparknlp.training": [[186, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[187, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[187, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[187, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[188, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[188, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[188, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[189, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[189, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[190, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[191, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[192, "module-sparknlp.util"]]}})