Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 98, 99, 100, 103, 104, 105, 108, 109, 110, 111, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 147, 148, 149, 151, 152, 154, 155, 157, 160, 162, 163, 164, 165, 166, 168, 169, 173, 174, 180, 181, 185, 186, 187, 190, 191, 196, 198, 202, 203, 206, 207, 208, 210, 211, 212], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 103, 108, 109, 110, 111, 112, 115, 116, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 149, 151, 154, 155, 163, 164, 165, 174, 178, 187, 190, 191, 193, 194, 196, 203, 205, 207, 208, 210, 211, 212, 213], "quick": [0, 203, 208], "refer": [0, 1, 5, 8, 51, 53, 55, 57, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 95, 112, 115, 123, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 151, 153, 154, 163, 174, 207, 209, 210], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 59, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 75, 76, 79, 81, 83, 87, 89, 90, 92, 97, 98, 99, 103, 104, 108, 109, 110, 113, 115, 118, 123, 126, 132, 139, 140, 147, 148, 151, 154, 157, 163, 173, 175, 178, 180, 193, 194, 198, 203, 207, 212], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 168, 169, 174, 178, 180, 185, 186, 187, 191, 193, 203, 207, 210, 211], "up": [0, 1, 5, 8, 22, 37, 56, 65, 74, 79, 83, 85, 95, 115, 128, 129, 131, 132, 133, 134, 174, 180, 203, 207, 210, 211], "your": [0, 1, 22, 37, 42, 59, 64, 73, 74, 81, 83, 85, 98, 99, 103, 104, 108, 109, 110, 113, 115, 116, 121, 126, 127, 137, 139, 144, 146, 151, 155, 205, 207, 210, 211, 213], "environ": [0, 65, 204], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 70, 74, 85, 95, 132, 133, 151], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 103, 104, 109, 110, 112, 113, 115, 116, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 148, 151, 155, 156, 165, 180], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 95, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 160, 190, 191, 198, 207, 210], "shell": 0, "packag": [0, 66, 72, 187, 204, 205], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 103, 104, 109, 110, 112, 113, 115, 116, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 148, 151, 165, 180], "nlp_2": [0, 180], "12": [0, 66, 87, 88, 89, 95, 100, 102, 108, 121, 137, 149, 162, 179, 180, 190, 196, 198, 206], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 160, 162, 163, 165, 166, 179, 180, 183, 186, 187, 190, 193, 194, 196, 197, 207, 208], "submit": [0, 187, 203], "extern": [0, 95, 98, 103, 104, 110, 137, 143, 164, 178, 193, 194, 196, 197], "jar": [0, 180], "after": [0, 58, 59, 61, 74, 81, 82, 85, 100, 102, 108, 115, 146, 166, 187, 206, 207], "compil": 0, "build": [0, 72, 73, 81, 82, 92, 95, 99, 129, 131, 132, 187, 203], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 178, 179, 180, 186, 187, 191, 193, 196, 197, 198, 203, 204, 206, 207, 208, 210, 211, 212, 213], "built": [0, 22, 37, 163], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 53, 55, 56, 66, 95, 115, 128, 129, 131, 132, 133, 134, 135, 163, 174], "apach": [0, 163, 180], "x": [0, 37, 179, 193, 213], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 148, 151, 154, 155, 156, 163, 166, 174, 187, 190, 191, 197, 203, 204, 206, 207, 208, 209, 210, 211], "you": [0, 14, 18, 30, 41, 47, 59, 61, 62, 64, 65, 69, 71, 73, 75, 81, 83, 92, 100, 111, 115, 133, 155, 157, 162, 180, 187, 191, 196, 198, 203, 205, 207, 208, 211, 212, 213], "need": [0, 5, 7, 8, 10, 59, 61, 65, 69, 73, 75, 81, 86, 90, 92, 95, 100, 103, 109, 110, 113, 118, 121, 124, 127, 129, 132, 137, 139, 140, 147, 148, 152, 160, 162, 187, 191, 193, 194, 196, 203, 205, 207, 208, 211, 213], "java": [0, 97, 116, 135, 167, 168, 176, 182, 183, 186, 191], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 61, 63, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 87, 88, 89, 100, 105, 110, 111, 115, 118, 129, 137, 149, 151, 193, 198], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 59, 61, 62, 65, 66, 67, 70, 72, 73, 76, 78, 79, 81, 84, 86, 87, 88, 89, 90, 92, 95, 97, 98, 100, 103, 105, 108, 110, 111, 112, 113, 115, 121, 123, 124, 127, 128, 129, 131, 132, 133, 134, 137, 141, 143, 151, 155, 162, 164, 165, 173, 174, 175, 179, 180, 187, 191, 197, 198, 203, 204, 205, 206, 207, 208, 211, 212, 213], "note": [0, 5, 7, 8, 14, 18, 22, 30, 37, 41, 42, 47, 56, 64, 66, 73, 76, 81, 83, 86, 87, 89, 95, 110, 115, 128, 129, 131, 133, 134, 162, 180, 212], "sinc": [0, 63, 65, 80, 95, 129, 131, 180, 207, 208, 212], "version": [0, 8, 63, 73, 117, 118, 143, 169, 174, 180, 185, 186, 190, 191, 207, 212], "6": [0, 22, 42, 55, 67, 68, 72, 76, 95, 99, 104, 105, 111, 121, 128, 139, 149, 180, 194, 198, 207], "deprec": [0, 180], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 53, 55, 56, 57, 65, 83, 86, 90, 97, 100, 102, 108, 109, 110, 113, 118, 123, 124, 128, 129, 131, 132, 133, 134, 137, 143, 174, 180, 186, 187, 191, 203, 205, 207], "consid": [0, 62, 86, 92, 95, 115, 133, 137, 139, 140, 142, 146, 180, 191], "stick": [0, 180], "lower": [0, 63, 66, 95, 115, 135, 137, 153, 180], "7": [0, 9, 42, 55, 67, 68, 72, 100, 102, 121, 129, 131, 156, 196, 198, 206], "we": [0, 5, 7, 8, 22, 37, 53, 55, 57, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 95, 109, 110, 113, 115, 124, 128, 129, 131, 132, 133, 134, 137, 139, 148, 162, 179, 203, 206, 207, 208, 211, 212, 213], "recommend": [0, 56, 76, 89, 115, 126, 127, 128, 129, 131, 133, 134], "4": [0, 5, 8, 67, 68, 69, 72, 75, 76, 78, 79, 86, 103, 109, 111, 115, 121, 128, 129, 132, 143, 149, 194, 198], "It": [0, 8, 12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 37, 39, 41, 42, 43, 45, 47, 48, 52, 53, 55, 56, 62, 63, 65, 67, 68, 70, 72, 73, 74, 79, 81, 82, 85, 87, 88, 90, 95, 105, 127, 128, 133, 135, 137, 139, 140, 146, 156, 162, 191, 206, 211], "have": [0, 5, 14, 18, 22, 30, 37, 41, 42, 47, 64, 65, 66, 70, 73, 78, 81, 82, 86, 95, 103, 105, 108, 109, 110, 111, 115, 121, 123, 124, 129, 131, 140, 149, 166, 182, 207, 208, 211], "basic": [0, 55, 95, 123, 206], "knowledg": [0, 73, 95, 157], "framework": [0, 7, 65, 128, 133, 134], "work": [0, 8, 53, 73, 78, 79, 97, 115, 128, 131, 132, 133, 134, 144, 206, 208, 212], "befor": [0, 63, 65, 86, 100, 102, 116, 128, 134, 135, 139, 147, 151, 168, 186, 203], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 97, 98, 99, 100, 103, 104, 109, 110, 113, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 144, 146, 151, 154, 163, 164, 191, 204, 205, 209, 212], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 56, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 162, 163, 165, 166, 187, 190, 193, 194, 196, 198, 203, 207, 208, 210, 211, 212], "first": [0, 2, 72, 74, 75, 76, 78, 85, 87, 88, 95, 103, 109, 110, 111, 123, 128, 133, 134, 137, 142, 147, 155, 166, 173, 203, 207, 208, 212], "let": [0, 73, 115, 146, 207], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 27, 30, 32, 35, 38, 41, 44, 47, 53, 55, 56, 57, 63, 65, 66, 69, 70, 72, 73, 74, 75, 79, 81, 82, 85, 87, 88, 90, 95, 103, 110, 113, 115, 116, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 146, 147, 148, 151, 152, 156, 162, 167, 168, 174, 176, 179, 182, 186, 187, 203, 206, 207, 208, 211], "make": [0, 52, 53, 55, 63, 70, 79, 80, 87, 88, 95, 115, 124, 127, 128, 139, 209, 213], "sure": [0, 127], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 22, 37, 42, 64, 65, 67, 68, 74, 81, 85, 86, 92, 110, 115, 118, 121, 132, 144, 151, 162, 164, 179, 193, 194, 196, 197, 207, 208, 211, 213], "new": [0, 2, 3, 4, 9, 42, 51, 55, 58, 66, 67, 68, 72, 76, 78, 79, 86, 89, 111, 112, 115, 117, 118, 128, 129, 134, 137, 143, 156, 169, 174, 185, 186, 206, 207], "manag": [0, 95, 191, 204], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 43, 45, 47, 48, 55, 56, 62, 63, 66, 67, 68, 70, 83, 86, 89, 90, 93, 97, 100, 110, 113, 115, 128, 129, 131, 132, 133, 134, 137, 142, 147, 151, 155, 157, 173, 174, 187, 191, 202, 207, 212], "depend": [0, 2, 51, 70, 80, 83, 89, 90, 92, 93, 95, 97, 110, 133, 137, 151, 180], "Then": [0, 22, 37, 109, 110, 132, 166, 187, 207], "sparknlp": [0, 203, 206, 207, 208, 209, 211, 212, 213], "n": [0, 88, 95, 105, 108, 109, 110, 115, 123, 124, 128, 129, 131, 132, 133, 134, 146, 162, 165, 174, 179, 190], "y": [0, 37, 64], "activ": [0, 12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 95], "jupyt": [0, 135, 187, 203], "now": [0, 70, 124, 162, 208], "should": [0, 2, 3, 4, 10, 22, 37, 42, 53, 55, 56, 57, 62, 65, 69, 74, 75, 85, 87, 95, 97, 104, 105, 109, 110, 115, 116, 118, 123, 124, 133, 135, 137, 147, 162, 168, 169, 182, 186, 190, 193, 194], "readi": [0, 22, 190, 207], "notebook": [0, 135, 187, 203], "run": [0, 65, 73, 95, 135, 187, 191, 204, 212], "also": [0, 22, 37, 42, 52, 53, 55, 56, 57, 63, 66, 76, 79, 86, 87, 88, 90, 92, 95, 100, 103, 108, 109, 110, 117, 118, 124, 127, 128, 142, 162, 165, 169, 174, 185, 203, 207, 208, 209, 210, 212], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 196, 197, 198, 204], "bin": 0, "A": [0, 5, 7, 42, 51, 53, 65, 66, 81, 82, 86, 90, 95, 98, 99, 103, 104, 105, 112, 113, 115, 116, 126, 128, 129, 131, 132, 133, 134, 135, 139, 140, 147, 148, 174, 187, 196, 205, 207, 213], "retriev": [0, 69, 75, 78, 86, 98, 135, 139, 140, 141, 187, 190, 203, 207, 208], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 160, 162, 163, 164, 165, 166, 179, 187, 190, 193, 194, 196, 197, 198, 203, 206, 207, 210, 211, 212, 213], "manual": [0, 206], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 99, 128, 129, 131, 132, 133, 134, 180, 193, 194, 196, 197], "becaus": [0, 115, 116, 126, 135, 168, 186], "other": [0, 5, 9, 37, 53, 56, 64, 70, 83, 84, 92, 95, 113, 126, 128, 129, 132, 134, 137, 144, 146, 155, 156, 207], "configur": [0, 53, 65, 83, 148, 180], "includ": [0, 55, 63, 65, 67, 68, 74, 76, 85, 87, 88, 89, 92, 95, 100, 108, 109, 110, 115, 128, 129, 131, 134, 135, 137, 156, 187, 197, 204, 206, 207, 208, 213], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 66, 67, 70, 72, 73, 79, 81, 87, 89, 90, 92, 95, 100, 103, 124, 133, 137, 142, 151, 164, 166, 207, 208], "builder": [0, 143, 180], "appnam": [0, 180], "master": [0, 180], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 95, 128, 129, 131, 132, 133, 134, 142, 162, 180, 190, 211], "config": [0, 180, 204], "driver": [0, 180], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 66, 76, 86, 180], "16g": [0, 180], "maxresults": [0, 180], "0": [0, 5, 7, 8, 9, 10, 22, 37, 42, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 117, 118, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 137, 140, 143, 148, 149, 151, 154, 155, 156, 162, 163, 165, 166, 169, 174, 179, 180, 183, 185, 186, 187, 190, 191, 194, 196, 197, 198, 203, 206, 207, 212, 213], "kryoseri": [0, 180], "buffer": [0, 68, 86, 180], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 87, 88, 89, 95, 140, 180], "2000m": [0, 180], "getorcr": [0, 180], "main": [1, 90, 135, 148, 206, 210, 213], "page": [1, 63, 129, 190, 202, 210, 212], "github": [1, 72, 78, 81, 133, 190], "issu": [1, 151], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 164, 165, 166, 179, 187, 190, 191, 193, 194, 196, 197, 198, 203, 206, 207, 208, 210, 211, 212, 213], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 103, 104, 108, 109, 110, 112, 113, 115, 116, 118, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 144, 146, 148, 151, 168, 174, 180, 186, 187, 190, 191, 203, 204, 206, 210, 212, 213], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 97, 98, 109, 110, 121, 124, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 151, 191], "welcom": [1, 5, 7, 8], "python": [1, 97, 180], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 115, 116, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 201, 203, 206, 207], "inform": [1, 59, 61, 78, 80, 86, 87, 95, 100, 108, 128, 137, 154, 163, 197, 203, 204, 205, 206, 207, 213], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 115, 116, 118, 121, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 147, 148, 149, 151, 153, 154, 155, 156, 162, 163, 164, 165, 166, 173, 174, 179, 180, 187, 190, 191, 193, 194, 196, 197, 204, 205, 206, 207, 208, 210], "librari": [1, 52, 53, 55, 56, 57, 97, 153, 154, 155, 163, 166, 212], "get": [1, 8, 22, 37, 95, 107, 121, 135, 137, 143, 148, 151, 152, 154, 155, 156, 160, 162, 163, 169, 174, 185, 203, 207, 212, 213], "start": [1, 5, 11, 15, 19, 23, 27, 32, 35, 38, 44, 79, 92, 95, 109, 110, 124, 153, 180, 187, 203, 206, 208, 211, 212], "cheat": 1, "sheet": [1, 63], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 61, 65, 66, 68, 69, 72, 75, 76, 84, 87, 88, 95, 110, 113, 127, 137, 149, 151, 153, 155, 166, 206, 207, 208], "instal": [1, 187, 205], "session": [1, 180, 193, 194, 196, 197], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 117, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 164, 165, 166, 168, 174, 179, 180, 183, 186, 187, 190, 191, 193, 194, 196, 197, 198, 203, 206, 207, 208, 211, 212, 213], "user": [1, 108, 109, 115, 116, 148, 164, 180, 187, 203], "guid": [1, 204], "annot": [1, 3, 4, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 174, 178, 179, 180, 181, 182, 184, 186, 187, 190, 191, 192, 196, 198, 203, 204, 209, 210, 211, 212, 213], "own": [1, 22, 37, 42, 59, 65, 74, 85, 98, 99, 103, 104, 109, 110, 113, 121, 126, 127, 137, 139, 144, 146, 151, 210, 211, 213], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 160, 162, 163, 164, 165, 166, 180, 186, 187, 189, 190, 191, 192, 204, 206, 207, 210], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 97, 98, 99, 100, 103, 104, 109, 110, 111, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 148, 151, 155, 156, 162, 179, 180, 187, 203, 206, 210], "dataset": [1, 22, 37, 42, 59, 61, 70, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 109, 110, 118, 124, 129, 132, 137, 151, 186, 190, 193, 194, 196, 197, 210], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 87, 88, 89, 95, 97, 98, 99, 103, 104, 107, 109, 110, 113, 117, 118, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 144, 146, 151, 153, 162, 180, 187, 190, 203, 207, 208, 210, 211], "light": [1, 5, 73, 89, 95, 162, 210, 212], "helper": [1, 121, 151, 157, 179, 196, 197, 198, 210, 213], "function": [1, 76, 86, 128, 134, 155, 191, 202, 210], "third": [1, 123, 142, 188, 193], "parti": [1, 188], "project": [1, 95, 133, 135, 187, 204], "log": [1, 22, 37, 42, 110, 115, 118, 124, 129, 180], "api": [1, 115, 203, 207, 210], "modul": [1, 31, 60, 77, 91, 93, 94, 96, 101, 106, 114, 119, 120, 122, 125, 130, 138, 145, 150, 161, 172, 184, 189, 195], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 160, 162, 163, 164, 165, 166, 179, 187, 190, 193, 194, 195, 196, 197, 204, 206, 207, 211, 212, 213], "format": [2, 3, 4, 8, 52, 53, 55, 56, 57, 59, 61, 90, 92, 98, 99, 100, 102, 103, 104, 109, 110, 113, 118, 126, 128, 134, 139, 140, 148, 151, 152, 154, 156, 157, 160, 163, 165, 193, 194, 196, 197, 198, 204, 213], "annotatortyp": [2, 3, 4, 71, 105, 153, 154, 160, 163, 206], "begin": [2, 51, 108, 129, 146, 148, 153, 154, 163, 179, 206], "end": [2, 11, 15, 19, 23, 27, 32, 35, 38, 44, 51, 110, 115, 116, 124, 128, 134, 146, 148, 151, 154, 163, 179, 187, 193, 203, 206, 208], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 179, 180, 187, 190, 193, 194, 198, 203, 204, 206, 207, 208, 211, 212], "metadata": [2, 3, 4, 43, 51, 58, 95, 104, 109, 110, 112, 121, 154, 156, 160, 162, 163, 179, 187, 191, 206, 208], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 92, 93, 109, 110, 111, 135, 154, 155, 156, 162, 163, 174, 179, 180, 186, 190, 206], "repres": [2, 3, 4, 59, 61, 66, 72, 78, 89, 90, 92, 99, 104, 105, 115, 116, 148, 187, 190, 207], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 169, 174, 179, 180, 187, 196, 203, 206, 207, 208], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 172, 175, 179, 180, 182, 183, 184, 187, 190, 191, 193, 194, 196, 197, 198, 202, 204, 205, 206, 207, 209, 210, 211, 213], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 99, 103, 104, 109, 110, 111, 112, 113, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 148, 151, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 172, 180, 184, 187, 190, 191, 193, 194, 196, 197, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213], "detail": [2, 3, 4, 8, 56, 87, 88, 95, 112, 128, 129, 131, 132, 133, 134, 174], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 169, 174, 178, 179, 180, 185, 186, 187, 190, 191, 193, 194, 196, 197], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 169, 174, 178, 179, 180, 185, 187, 190, 191, 193, 194, 196, 197], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 147, 148, 151, 154, 156, 162, 163, 165, 174, 179, 180, 187, 190, 191, 193, 194, 196, 197, 198, 203, 206, 207, 208, 210, 211, 213], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 179, 181, 190, 196, 206, 207, 210], "possibl": [2, 3, 4, 71, 73, 87, 88, 90, 123, 137, 140, 154, 163, 173, 175, 187, 203], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 68, 71, 76, 78, 84, 87, 90, 92, 95, 97, 98, 100, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 142, 143, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 169, 173, 174, 175, 185, 187, 203, 213], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 56, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 95, 98, 99, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 118, 121, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 149, 151, 153, 155, 162, 164, 166, 174, 180, 190, 193, 197, 198, 207, 211, 212], "wordpiec": 2, "word_embed": [2, 66, 67, 70, 71, 72, 73, 76, 77, 79, 81, 83, 85, 87, 89, 93, 109, 110, 118], "sentence_embed": [2, 22, 37, 42, 68, 69, 74, 75, 77, 78, 80, 82, 84, 88, 93, 135, 187, 203, 207], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 52, 53, 55, 57, 187, 203, 207], "date": [2, 58, 100, 102, 103], "entiti": [2, 9, 13, 17, 21, 25, 29, 34, 40, 46, 49, 51, 55, 58, 70, 90, 91, 92, 99, 104, 106, 107, 108, 109, 110, 111, 112, 144, 149, 156, 162, 190], "sentiment": [2, 22, 37, 42, 76, 89, 93, 134, 180, 207, 208], "po": [2, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48, 59, 61, 92, 93, 109, 110, 146, 151, 162, 179, 180, 190, 193, 195, 206, 210, 211, 212], "chunk": [2, 9, 10, 11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 58, 62, 64, 71, 74, 85, 90, 95, 99, 103, 104, 105, 108, 144, 149, 153, 156, 179, 187, 197, 203, 213], "named_ent": [2, 13, 17, 21, 25, 29, 34, 40, 46, 49, 92, 108, 109, 110, 111, 112, 118, 162, 190], "negex": 2, "labeled_depend": [2, 61], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 95, 96, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 153, 163, 166, 174, 191, 207], "keyword": [2, 94, 95, 126], "dummi": [2, 63], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 92, 95, 97, 100, 105, 107, 109, 110, 113, 115, 117, 118, 121, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 140, 143, 147, 148, 151, 174, 180, 187, 193], "index": [2, 95, 99, 147, 180, 193], "charact": [2, 63, 76, 79, 90, 97, 103, 105, 113, 123, 124, 137, 139, 140, 147, 148, 151, 156], "under": [2, 73, 80, 89, 95, 180], "last": [2, 100, 102, 144, 198, 211], "string": [2, 8, 22, 37, 42, 51, 59, 63, 90, 103, 105, 111, 113, 124, 134, 140, 142, 146, 153, 154, 156, 160, 162, 163, 211], "dict": [2, 3, 4, 59, 61, 90, 98, 99, 103, 104, 109, 111, 112, 113, 115, 118, 126, 137, 139, 140, 148, 162, 178, 180, 186, 187, 190], "associ": [2, 3, 4, 37, 84, 90, 103, 108, 115, 187], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 62, 63, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 92, 95, 97, 100, 103, 107, 108, 110, 111, 112, 113, 115, 117, 123, 124, 128, 129, 131, 132, 133, 134, 135, 137, 142, 143, 146, 148, 155, 156, 162, 163, 169, 179, 186, 187, 190, 191, 198, 202, 207], "vector": [2, 37, 67, 68, 69, 71, 72, 74, 75, 76, 84, 85, 86, 135, 155, 156, 206], "where": [2, 37, 72, 76, 90, 95, 98, 99, 103, 104, 105, 115, 121, 124, 126, 128, 129, 134, 135, 139, 140, 151, 153, 196], "applic": [2, 57, 95, 128, 131, 173, 187, 188, 203, 205], "copi": [2, 3, 4, 191], "differ": [2, 3, 4, 53, 55, 59, 61, 76, 78, 81, 82, 87, 89, 95, 100, 123, 124, 137, 148, 151, 162, 187, 211], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 97, 98, 99, 104, 105, 107, 109, 110, 112, 115, 121, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 146, 148, 151, 153, 162, 174, 178, 179, 180, 181, 186, 190, 191, 193, 194, 196, 197], "newli": [2, 3, 4], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 191, 207], "datatyp": [2, 179], "structtyp": 2, "schema": [2, 108, 187, 203], "look": [2, 65, 110, 139, 206], "like": [2, 5, 11, 15, 19, 22, 23, 27, 32, 35, 38, 44, 51, 56, 63, 66, 69, 71, 73, 79, 83, 89, 92, 95, 103, 108, 115, 124, 127, 129, 132, 137, 148, 151, 187, 203, 205, 206], "struct": [2, 154, 160, 163], "containsnul": [2, 37, 152, 154, 160, 163], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 97, 99, 100, 102, 104, 108, 110, 113, 123, 124, 132, 135, 137, 139, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 187, 191, 193, 194, 197, 198, 203, 207, 208], "nullabl": [2, 37, 152, 154, 160, 163], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 162, 163, 165, 166, 179, 180, 187, 190, 193, 194, 196, 198, 203, 206, 207, 208, 213], "integ": [2, 53, 55, 56, 57, 154, 160, 163], "map": [2, 10, 37, 69, 86, 90, 115, 117, 118, 121, 137, 154, 160, 163, 169, 174, 179, 185, 186, 206], "kei": [2, 5, 53, 59, 61, 81, 82, 87, 88, 98, 112, 154, 160, 162, 163, 187, 190, 203], "valuecontainsnul": [2, 154, 160, 163], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 97, 98, 105, 110, 117, 121, 123, 124, 128, 129, 131, 132, 133, 134, 137, 144, 146, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 179, 208, 211], "element": [2, 37, 105, 115, 152, 154, 160, 163], "float": [2, 3, 5, 7, 8, 22, 37, 42, 53, 56, 58, 97, 109, 110, 112, 115, 117, 118, 124, 128, 129, 131, 132, 133, 134, 135, 137, 151, 152, 154, 155, 162, 163, 174], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 99, 128, 129, 131, 132, 133, 134, 162, 179, 186, 190, 193, 194, 196, 197], "arraytyp": [2, 153, 179], "fromrow": 2, "row": [2, 43, 62, 64, 86, 123, 124, 127, 154, 163, 165, 179, 193], "column": [2, 9, 22, 37, 42, 63, 86, 98, 107, 109, 110, 117, 118, 121, 127, 135, 143, 148, 151, 152, 153, 154, 155, 156, 157, 160, 163, 166, 169, 179, 190, 193, 196, 207], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 165, 166, 174, 179, 182, 186, 187, 190, 203, 206, 207, 208, 211, 212, 213], "an": [2, 5, 7, 8, 10, 22, 37, 42, 43, 52, 53, 55, 56, 57, 59, 62, 63, 65, 70, 72, 76, 78, 79, 80, 89, 90, 95, 97, 99, 100, 102, 103, 104, 105, 109, 110, 112, 115, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 133, 134, 137, 139, 140, 144, 148, 151, 153, 154, 155, 156, 157, 162, 163, 166, 169, 174, 178, 179, 181, 185, 186, 187, 193, 194, 196, 197, 202, 204, 206, 207, 208, 210, 211], "annotationaudio": 3, "audio": [3, 152, 187], "alreadi": [3, 92, 95, 109, 110, 111, 148, 149, 162, 190, 211], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 57, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 87, 88, 89, 92, 95, 97, 108, 109, 110, 118, 124, 128, 129, 134, 135, 151, 152, 153, 154, 155, 156, 160, 163, 164, 166, 187, 203, 206, 207, 208, 209], "file": [3, 5, 7, 22, 37, 42, 59, 61, 63, 84, 86, 90, 98, 99, 103, 104, 109, 110, 113, 118, 124, 126, 137, 139, 140, 143, 148, 152, 165, 175, 180, 187, 193, 194, 196, 197, 203, 213], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 97, 110, 117, 128, 129, 131, 132, 133, 134, 137, 187], "annotationimag": [4, 162, 190], "origin": [4, 52, 53, 55, 56, 57, 66, 74, 79, 81, 85, 108, 124, 128, 160], "height": [4, 53, 55, 56, 57, 160], "width": [4, 53, 55, 56, 57, 160], "nchannel": [4, 160], "mode": [4, 22, 37, 42, 110, 118, 139, 154, 160, 163, 187], "imag": [4, 52, 53, 55, 56, 57, 160, 162, 190], "uri": [4, 191], "pixel": [4, 55], "number": [4, 8, 14, 18, 22, 26, 30, 37, 41, 42, 47, 56, 59, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 105, 107, 109, 110, 115, 117, 121, 123, 124, 128, 129, 131, 132, 133, 134, 135, 137, 143, 151, 174, 193, 194], "color": 4, "channel": [4, 53, 55, 56, 57, 137], "opencv": 4, "concern": [5, 7, 8, 12, 52, 53, 55, 56, 57, 58, 66], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 103, 104, 109, 110, 112, 113, 115, 116, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 148, 151, 165, 167, 168, 176, 182], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 103, 104, 109, 110, 112, 113, 115, 116, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 144, 146, 148, 151, 159, 165, 168, 186], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 103, 104, 109, 110, 112, 113, 115, 116, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 165, 168, 180, 186, 187, 190, 191, 208], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 51, 62, 66, 89, 108, 109, 110, 162, 179, 190, 207], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 48, 49, 52, 53, 55, 57, 66, 69, 75, 78, 84, 127, 128, 134, 207], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 26, 28, 29, 30, 33, 34, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 62, 63, 64, 70, 72, 73, 79, 81, 82, 86, 87, 88, 95, 115, 127, 128, 129, 131, 132, 137, 190, 207, 208], "propos": [5, 7, 53, 55, 66, 70, 72, 73, 80, 81, 82, 87, 88, 89], "self": [5, 7, 55, 66, 79, 133, 174], "supervis": [5, 7, 8, 66, 75, 76, 84, 95, 128, 129, 132], "speech": [5, 7, 8, 10, 70, 120, 121, 151, 196, 213], "represent": [5, 7, 55, 66, 67, 68, 73, 74, 75, 76, 85, 86, 87, 88, 89, 108, 134, 165, 178], "learn": [5, 7, 22, 37, 42, 58, 66, 73, 74, 76, 81, 82, 84, 85, 87, 88, 89, 95, 109, 110, 117, 124, 128, 129, 131, 134, 137, 187, 205], "mask": [5, 55, 72, 80, 87, 88, 89, 128, 147], "predict": [5, 8, 52, 55, 72, 80, 110, 129, 134, 187, 203], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 34, 35, 38, 40, 44, 46, 49, 66, 76, 89, 143], "unit": [5, 129, 131, 143], "wei": [5, 55], "ning": 5, "hsu": 5, "benjamin": [5, 70], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 30, 41, 43, 47, 62, 64, 70, 80, 92, 104, 117, 118, 139, 142, 148, 164, 169, 174, 185, 193, 206, 207, 211, 212], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 115, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 163, 165, 166, 173, 174, 175, 178, 179, 187, 193, 194, 196, 197, 203, 206, 207, 208, 212, 213], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 102, 103, 104, 109, 110, 113, 117, 118, 121, 124, 126, 128, 129, 131, 132, 133, 134, 137, 139, 140, 151, 162, 169, 174, 179, 181, 185, 190, 208], "pre": [5, 7, 8, 22, 37, 42, 52, 57, 67, 68, 72, 73, 75, 76, 80, 84, 110, 118, 128, 134, 154, 156, 163, 166, 194, 207], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 64, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 95, 99, 100, 102, 124, 128, 129, 131, 132, 133, 134, 143, 162, 165, 169, 180, 206, 207, 208], "support": [5, 7, 8, 22, 37, 64, 66, 79, 95, 110, 113, 124, 132, 133, 142, 165, 180, 204], "appl": [5, 7, 68, 82, 88, 180], "silicon": [5, 7, 180], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 66, 79, 128], "instruct": [5, 7, 78], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 109, 110, 112, 121, 124, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 151, 183], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 109, 110, 112, 115, 121, 124, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 151, 173, 175, 182, 183, 187, 206, 207], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 169, 187, 203, 207, 208], "audio_assembl": [5, 7, 8, 161, 180], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 169, 187, 203, 207, 208], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 146, 147, 148, 151, 153, 154, 155, 156, 157, 162, 163, 165, 178, 179, 180, 187, 190, 191, 193, 194, 196, 197, 207], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 104, 106, 107, 109, 110, 112, 117, 121, 124, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 169, 179, 185, 187, 190, 191, 193, 196, 203, 207], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 93, 95, 97, 98, 100, 103, 109, 110, 121, 124, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 151, 182, 190, 191, 203, 210], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 115, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 148, 151, 154, 155, 156, 157, 163, 166, 174, 187, 190, 191, 197, 203, 204, 205, 210, 212, 213], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 66, 67, 70, 72, 73, 79, 81, 87, 89, 95, 100, 103, 121, 123, 128, 129, 134, 151, 157, 162, 164, 187, 203, 211], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 81, 83, 84, 85, 87, 89, 92, 95, 100, 102, 103, 110, 112, 113, 115, 116, 123, 124, 126, 128, 129, 131, 132, 133, 134, 139, 147, 151, 155, 162, 179, 191, 193, 194, 207, 208], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 66, 67, 70, 72, 73, 79, 81, 87, 89, 110, 155, 191], "5669": [5, 7, 8, 52, 53, 55, 56, 57, 70], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 63, 70, 73, 75, 76, 78, 83, 87, 88, 92, 95, 100, 105, 108, 112, 115, 124, 128, 129, 131, 132, 133, 134, 139, 147, 148, 154, 155, 156, 163, 166, 174, 187, 190, 197, 203, 204, 205, 207, 210, 213], "extend": [5, 7, 8, 10, 22, 37, 42, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 76, 81, 83, 84, 86, 87, 89, 95, 97, 98, 100, 102, 103, 104, 105, 109, 110, 112, 113, 118, 121, 123, 124, 126, 127, 128, 133, 134, 135, 137, 139, 141, 142, 146, 148, 151, 154, 155, 156, 163, 166, 190], "hubertforctctestspec": 5, "paper": [5, 8, 53, 55, 56, 57, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 95, 124, 127, 128, 129, 131, 132, 133, 134, 151, 197, 213], "abstract": [5, 8, 53, 55, 57, 66, 67, 68, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 95, 128, 129, 131, 132, 133, 134, 143, 197, 213], "approach": [5, 8, 53, 55, 81, 82, 89, 95, 107, 109, 110, 112, 124, 126, 128, 129, 131, 134, 137, 139, 140, 167, 210], "challeng": [5, 37, 55, 73, 76, 78, 81, 82, 95], "three": [5, 137, 149], "uniqu": [5, 115, 116, 128], "problem": [5, 37, 66, 76, 80, 128, 134, 137, 151], "multipl": [5, 8, 37, 57, 70, 90, 95, 100, 123, 128, 148, 179, 187, 193], "sound": [5, 62], "each": [5, 7, 14, 18, 22, 26, 30, 37, 41, 42, 47, 53, 55, 56, 57, 62, 69, 72, 74, 75, 80, 83, 85, 86, 90, 92, 95, 98, 99, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 121, 123, 124, 126, 128, 135, 137, 139, 140, 147, 148, 151, 154, 163, 173, 179, 186, 196, 208], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 169, 179, 186, 190, 193, 194, 196, 197, 207, 208, 211, 213], "utter": 5, "lexicon": 5, "dure": [5, 22, 37, 42, 52, 73, 78, 109, 110, 118, 123, 135, 137, 180, 187, 203], "phase": [5, 73, 128], "variabl": [5, 74, 85], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 56, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 87, 88, 89, 105, 113, 115, 123, 124, 128, 129, 131, 132, 133, 134, 135, 137, 147, 148, 174], "explicit": [5, 65, 123, 129], "segment": [5, 51, 53, 55, 73, 81, 150, 151], "deal": [5, 162, 211], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 28, 29, 33, 36, 39, 43, 45, 48, 56, 66, 67, 68, 72, 73, 79, 80, 81, 82, 87, 88, 89, 110, 111, 112, 128, 134], "util": [5, 71, 109, 112, 123, 124, 140, 164, 171, 172, 175, 177, 180, 181, 185, 189], "offlin": [5, 187], "cluster": [5, 69, 75, 78, 84, 180], "step": [5, 22, 37, 42, 74, 85, 110, 118, 187, 203, 207], "align": 5, "target": [5, 84, 128, 132, 133, 148, 153, 162, 190], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 57, 59, 61, 75, 90, 97, 107, 108, 109, 110, 112, 117, 118, 126, 127, 134, 137, 143, 151, 187, 193, 203, 207], "loss": [5, 66, 73, 78, 110, 134, 203], "ingredi": 5, "our": [5, 66, 70, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 95, 124, 128, 129, 131, 132, 134, 179, 190, 212], "appli": [5, 9, 22, 37, 42, 53, 57, 62, 63, 90, 92, 110, 111, 118, 123, 134, 137, 139, 156, 179, 193], "over": [5, 62, 73, 80, 87, 88, 89, 128, 131, 139, 148, 179, 187, 203], "region": 5, "onli": [5, 8, 53, 55, 56, 57, 59, 61, 62, 63, 76, 84, 89, 100, 103, 113, 115, 123, 124, 128, 129, 131, 132, 133, 134, 146, 151, 164, 173, 174, 193], "forc": 5, "combin": [5, 14, 18, 26, 30, 41, 47, 56, 73, 79, 86, 95, 128, 132, 134, 137, 139, 151], "acoust": 5, "continu": [5, 108, 129, 135, 157, 203], "reli": [5, 59, 61, 89, 95], "primarili": 5, "consist": [5, 66, 72, 79, 103, 121, 127, 151, 165, 196], "unsupervis": [5, 87, 88, 89, 95, 128, 129], "rather": [5, 53, 65], "than": [5, 37, 42, 53, 65, 73, 74, 78, 85, 87, 88, 89, 95, 97, 105, 109, 115, 129, 131, 132, 133, 139, 140, 207], "intrins": [5, 53], "qualiti": [5, 55, 129, 132], "assign": [5, 37, 90, 111, 126], "simpl": [5, 67, 68, 90, 129, 208], "k": [5, 8, 56, 128, 129, 131, 132, 133, 134, 155, 174], "mean": [5, 8, 10, 14, 18, 26, 30, 37, 41, 47, 53, 55, 56, 57, 87, 95, 97, 100, 102, 115, 128, 129, 131, 132, 133, 134, 135, 147, 155, 162, 174, 207, 208, 211], "teacher": 5, "100": [5, 22, 37, 43, 57, 74, 85, 87, 95, 115, 124, 132, 165], "two": [5, 37, 55, 59, 61, 66, 72, 74, 84, 85, 86, 87, 88, 92, 149, 193, 207], "iter": [5, 59, 61, 66, 74, 85, 121, 151, 187, 203], "either": [5, 8, 22, 42, 57, 61, 70, 71, 83, 90, 95, 97, 103, 126, 127, 134, 151, 153, 162, 163, 165, 190, 208], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 113, 121, 123, 128, 129, 148, 151, 153, 173, 206], "improv": [5, 66, 67, 68, 70, 72, 76, 78, 81, 82, 87, 88, 109, 110, 129, 131, 134, 135, 212], "upon": [5, 64, 95], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 27, 29, 32, 34, 35, 37, 38, 40, 42, 44, 46, 49, 53, 55, 57, 66, 67, 68, 70, 75, 76, 78, 79, 80, 81, 82, 89, 95, 110, 128, 129, 131, 134, 163, 204, 207], "art": [5, 22, 37, 53, 55, 57, 66, 67, 68, 70, 75, 76, 78, 79, 80, 81, 82, 89, 95, 110, 128, 129, 134, 163], "wav2vec": [5, 7], "perform": [5, 53, 55, 57, 63, 66, 70, 72, 73, 75, 76, 78, 81, 82, 84, 86, 87, 88, 89, 110, 127, 128, 129, 131, 132, 134, 135, 139], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 73, 123], "000h": 5, "benchmark": [5, 8, 57, 66, 72, 73, 75, 76, 87, 88, 128, 131, 134], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 51, 67, 68, 73, 75, 80, 112, 128, 131, 134, 198], "tune": [5, 8, 51, 67, 68, 73, 75, 80, 112, 128, 131, 134], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 179, 191, 193, 194, 196, 197, 198, 203, 206, 207, 208, 212], "19": [5, 58, 69, 75, 105, 196, 198], "13": [5, 9, 10, 51, 87, 88, 92, 121, 156, 198], "rel": [5, 70, 72, 87, 100, 102, 109, 137, 206], "wer": 5, "reduct": [5, 66, 139], "dev": [5, 55, 66, 76, 84], "test": [5, 22, 37, 42, 52, 53, 55, 56, 57, 59, 61, 65, 67, 68, 84, 86, 98, 99, 103, 104, 109, 110, 118, 121, 129, 131, 139, 140, 144, 151, 193, 194, 196, 197, 198, 207, 213], "evalu": [5, 22, 37, 42, 70, 75, 78, 79, 87, 88, 118, 128, 131, 132, 169, 187], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 87, 88, 89, 110, 128, 133, 137], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 92, 95, 110, 117, 128, 129, 131, 132, 133, 134, 135, 137, 139, 174, 206, 211, 212], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 56, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 87, 88, 89, 110, 117, 128, 133, 137], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 167, 168, 169, 172, 176, 180, 182, 186, 187, 203, 207, 208, 211], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 115, 116, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 160, 162, 163, 164, 165, 166, 187, 203, 207, 211], "audioassembl": [5, 7, 8, 152], "audio_cont": [5, 7, 8, 152], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 155, 165, 166, 207, 208], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 154, 155, 156, 163, 165, 166, 179, 187, 203, 206, 207, 208, 212], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 154, 155, 156, 160, 163, 165, 166, 179, 206, 207, 208, 212], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 153, 155, 162, 164, 165, 166, 186, 187, 203, 207, 208, 211], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 71, 73, 86, 92, 95, 97, 109, 110, 112, 115, 127, 128, 129, 131, 132, 134, 135, 137, 139, 140, 146, 151, 152, 154, 156, 157, 160, 163, 165, 166, 179, 187, 203, 208], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 86, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 154, 156, 157, 163, 165, 166, 179, 196, 206, 207, 208], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 63], "apostl": [5, 7, 8], "OF": [5, 7, 66], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 193, 213], "hi": [5, 7, 8, 64, 112, 124, 132], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 97, 110, 117, 128, 129, 131, 132, 133, 134, 137], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 97, 99, 104, 108, 109, 110, 111, 112, 117, 123, 128, 129, 131, 132, 133, 134, 137, 151, 162, 179, 190, 193, 197, 213], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 97, 110, 117, 128, 129, 131, 132, 133, 134, 137], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 95, 97, 110, 117, 128, 129, 131, 132, 133, 134, 137], "serial": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 97, 110, 117, 128, 129, 131, 132, 133, 134, 137, 180], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 128, 129, 131, 132, 133, 134], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 110, 118, 124, 128, 129, 131, 132, 133, 134, 137, 140, 143, 191, 193], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 128, 129, 131, 132, 133, 134], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 110, 118, 124, 128, 129, 131, 132, 133, 134, 180, 187, 203, 207], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 190, 191, 207, 212], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 89, 92, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 190, 191, 194, 207, 212, 213], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 190, 191], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 97, 98, 99, 104, 109, 110, 111, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 180, 190, 191, 206, 207, 210, 211], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 103, 104, 109, 110, 112, 113, 118, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 152, 154, 158, 159, 162, 163, 178, 179, 180, 186, 187, 190, 191, 193, 194, 196, 197, 207], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 190, 191], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 103, 104, 109, 110, 112, 113, 118, 121, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 144, 148, 151, 164, 175, 178, 189, 191, 193, 194, 196, 197, 198, 207, 213], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 123, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 190, 204], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 99, 104, 109, 110, 112, 121, 124, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 142, 148, 151, 153, 174, 187], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 144], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 65, 92, 95, 112, 133, 139, 206, 207], "recognit": [8, 13, 17, 21, 25, 29, 34, 40, 46, 49, 53, 57, 70, 106, 109, 110, 112], "asr": 8, "system": [8, 95, 128, 129, 132], "680": 8, "000": [8, 43, 95, 129, 151, 165], "hour": [8, 64, 100, 102], "multilingu": [8, 87, 88, 132, 151], "multitask": [8, 78, 129], "collect": [8, 95, 131, 187, 203], "web": [8, 51, 63, 70, 129, 187, 203], "well": [8, 57, 59, 61, 62, 75, 84, 87, 88, 95, 115, 128, 165], "translat": [8, 128, 129, 132, 133, 134, 151], "those": [8, 70, 92, 111, 207, 208], "english": [8, 42, 70, 95, 132, 139, 142, 151, 191], "moment": 8, "greedi": [8, 56, 128, 129, 131, 132, 133, 134, 174], "search": [8, 56, 69, 100, 128, 132, 135, 139, 174], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 55, 57, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 84, 87, 88, 89, 95, 112, 128, 129, 133, 134, 164, 174], "setlanguag": 8, "settask": [8, 128, 129, 134, 174], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 78], "via": [8, 12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 84, 160, 180], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 62, 64, 66, 72, 73, 75, 76, 80, 87, 88, 89, 95, 97, 99, 104, 110, 128, 129, 131, 132], "scale": [8, 53, 55, 56, 57, 66, 73, 75, 79, 80, 87, 88, 128, 129, 131, 132, 134], "weak": [8, 75], "studi": [8, 73, 81, 82, 128, 134], "capabl": [8, 52, 55, 73, 89, 129], "simpli": [8, 63, 78, 208], "amount": [8, 57, 84, 95, 104, 129, 151, 162, 211], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48, 53, 55, 56, 57, 62, 63, 65, 66, 75, 92, 100, 102, 105, 110, 115, 128, 129, 132, 134, 137, 139, 142, 146, 151, 162, 193, 207, 208, 211], "gener": [8, 22, 37, 53, 55, 56, 66, 69, 71, 73, 75, 78, 79, 83, 89, 92, 95, 109, 110, 112, 115, 124, 128, 129, 131, 132, 133, 134, 137, 139, 140, 156, 157, 174, 187, 203, 206, 207, 208], "standard": [8, 53, 55, 56, 57, 63, 79, 100, 102, 128, 139, 140, 148], "often": [8, 66, 81, 82, 89], "competit": [8, 87, 88, 95, 132], "prior": [8, 53, 73, 78, 79, 115, 137], "fulli": [8, 190], "zero": [8, 52, 75, 86, 112, 129], "shot": [8, 52, 75, 112, 129], "transfer": [8, 57, 73, 75, 84, 87, 88, 128, 129, 134], "without": [8, 52, 67, 68, 75, 78, 87, 88, 95, 129, 151], "ani": [8, 14, 18, 26, 30, 41, 47, 52, 65, 69, 74, 75, 78, 84, 85, 90, 95, 110, 129, 132, 134, 137, 155, 156, 191, 204, 207, 208, 213], "compar": [8, 55, 57, 66, 72, 73, 76, 78, 80, 89, 95, 124, 128, 131, 134, 137, 187, 203], "human": [8, 72, 95, 131], "accuraci": [8, 53, 55, 59, 61, 67, 68, 74, 84, 85, 87, 88, 109, 110, 121, 139, 151, 203], "releas": [8, 63, 66, 70, 72, 81, 82, 87, 88, 128, 131, 134, 180], "infer": [8, 14, 18, 26, 30, 41, 47, 52, 67, 68, 70, 73, 89, 131], "code": [8, 51, 52, 65, 72, 74, 78, 79, 81, 82, 85, 87, 88, 95, 97, 128, 134, 204, 212], "serv": [8, 55, 204], "foundat": [8, 131], "further": [8, 9, 66, 78, 95, 109, 110, 115, 166], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 33, 34, 36, 39, 40, 45, 46, 48, 49, 53, 61, 63, 75, 76, 78, 79, 80, 90, 92, 109, 110, 128, 129, 132, 133, 134, 135, 137, 142, 165, 174, 187, 203], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 33, 34, 36, 39, 40, 45, 46, 48, 49, 53, 61, 63, 75, 76, 78, 80, 92, 109, 110, 128, 129, 133, 134, 137, 142, 165, 174, 187, 203], "check": [8, 69, 75, 110, 123, 137, 138, 139, 140, 162, 166, 190, 207, 212], "descript": [8, 61, 78, 83, 95, 100, 131, 139, 146, 173, 175], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 92, 99, 100, 102, 104, 105, 108, 109, 110, 113, 115, 118, 123, 124, 128, 129, 131, 132, 133, 134, 135, 137, 139, 142, 147, 148, 151, 153, 155, 156, 157, 162, 165, 166, 169, 174, 180, 190, 193, 197, 208], "minoutputlength": [8, 56, 128, 129, 131, 132, 134], "minimum": [8, 37, 42, 56, 74, 85, 92, 95, 97, 107, 109, 110, 113, 123, 124, 128, 129, 131, 132, 134, 139, 140, 147, 148, 174, 193], "sequenc": [8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 53, 55, 56, 57, 79, 115, 128, 129, 130, 131, 132, 133, 134, 137, 142, 174], "maxoutputlength": [8, 56, 128, 129, 131, 132, 133, 134], "maximum": [8, 22, 37, 42, 51, 56, 65, 74, 85, 92, 95, 107, 109, 110, 113, 115, 117, 123, 124, 128, 129, 131, 132, 133, 134, 137, 139, 147, 148, 174], "dosampl": [8, 56, 128, 129, 131, 132, 134], "sampl": [8, 56, 115, 128, 129, 131, 132, 133, 134, 174], "decod": [8, 56, 72, 79, 128, 129, 131, 132, 133, 134, 174], "temperatur": [8, 56, 115, 128, 129, 131, 132, 134], "next": [8, 36, 56, 81, 82, 95, 100, 102, 128, 129, 131, 132, 133, 134, 174], "probabl": [8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 56, 95, 115, 128, 129, 131, 132, 133, 134, 135, 139, 174], "topk": [8, 56, 128, 129, 131, 132, 134], "highest": [8, 56, 115, 128, 129, 131, 132, 133, 134, 139, 174], "vocabulari": [8, 56, 74, 85, 128, 129, 131, 132, 133, 134, 137, 174], "keep": [8, 56, 57, 62, 95, 113, 128, 129, 131, 132, 133, 134, 174], "filter": [8, 53, 55, 56, 57, 87, 88, 95, 108, 109, 128, 129, 131, 132, 133, 134, 142, 174, 179, 191], "topp": [8, 56, 115, 128, 129, 131, 132, 133, 134, 174], "most": [8, 56, 62, 64, 70, 73, 79, 80, 95, 110, 115, 128, 129, 131, 132, 133, 134, 174], "add": [8, 56, 86, 100, 102, 123, 128, 129, 131, 132, 133, 134, 137, 148, 174, 207], "top_p": [8, 56, 115], "higher": [8, 56, 86, 95, 115, 127, 128, 129, 131, 132, 133, 134, 174], "kept": [8, 56, 128, 129, 131, 132, 133, 134, 174], "repetitionpenalti": [8, 56, 128, 129, 131, 132, 134], "repetit": [8, 56, 128, 129, 131, 132, 133, 134, 174], "penalti": [8, 56, 128, 129, 131, 132, 133, 134, 174], "norepeatngrams": [8, 56, 128, 129, 131, 132, 134], "ngram": [8, 56, 71, 105, 128, 129, 131, 132, 133, 134, 174], "occur": [8, 56, 128, 129, 131, 132, 133, 134, 174], "onc": [8, 56, 128, 129, 131, 132, 133, 134, 174], "beamsiz": [8, 56, 128], "beam": [8, 56, 128, 132, 174], "mr": [8, 132], "middl": [8, 146, 151], "getlanguag": 8, "langaug": [8, 190], "getismultilingu": 8, "do": [8, 9, 64, 84, 95, 108, 142, 148, 162, 203, 207, 211], "xx": [8, 18, 47, 87, 88, 97, 132, 133], "chunk2doc": [9, 153], "convert": [9, 56, 58, 63, 71, 80, 83, 86, 100, 102, 105, 108, 113, 115, 128, 134, 147, 149, 151, 153, 156, 157, 187, 203, 210], "back": [9, 64, 115, 128], "try": [9, 137, 193], "re": [9, 69, 75, 207], "analysi": [9, 22, 37, 42, 76, 78, 89, 125, 126, 134, 171, 208], "doc2chunk": [9, 153], "pretrainedpipelin": [9, 156, 162, 179, 190, 206, 211, 212], "locat": [9, 90, 123, 180, 190, 207], "extract": [9, 10, 11, 15, 19, 23, 27, 32, 35, 38, 44, 53, 55, 56, 57, 59, 62, 64, 71, 86, 90, 91, 92, 94, 95, 99, 100, 102, 104, 108, 109, 110, 111, 123, 124, 126, 135, 137, 140, 144, 149, 155, 156, 157, 162, 180, 187, 190, 203], "york": [9, 112, 156], "jersei": [9, 156], "aren": [9, 156], "t": [9, 14, 18, 26, 30, 41, 47, 64, 73, 81, 98, 113, 124, 126, 148, 156], "far": [9, 115, 129, 156], "apart": [9, 59, 61, 156], "actual": [9, 105, 156, 166], "id": [9, 37, 63, 87, 90, 115, 116, 128, 129, 131, 132, 133, 134, 137, 153, 154, 156, 163, 166, 187, 193], "defin": [9, 10, 108, 109, 110, 137, 142, 146, 156, 179, 187, 190, 203, 207, 211], "amongst": [9, 156], "thing": [9, 137, 156], "explain_document_dl": [9, 156, 162, 179, 190], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 156], "selectexpr": [9, 10, 22, 43, 51, 52, 53, 55, 56, 57, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 98, 99, 100, 102, 103, 104, 105, 108, 111, 112, 113, 121, 123, 124, 126, 133, 141, 142, 144, 147, 148, 149, 153, 155, 156, 179, 193, 194, 196, 206, 207, 212], "explod": [9, 10, 22, 43, 51, 59, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 99, 102, 103, 104, 105, 108, 111, 112, 121, 123, 124, 133, 149, 155, 156, 179, 193, 196, 206, 207, 212], "col": [9, 59, 61, 90, 99, 108, 111, 156, 179, 206], "loc": [9, 13, 17, 21, 25, 29, 34, 40, 46, 49, 92, 108, 109, 110, 156, 162, 179, 190, 193], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 121, 127, 128, 133, 134, 135, 137, 142, 144, 147, 149, 151, 154, 156, 162, 163, 165, 166, 180, 190, 193, 194, 196, 197, 198, 207, 211, 212], "22": [9, 156, 193, 206], "pattern": [10, 62, 63, 90, 100, 103, 113, 139, 140, 147, 148, 151], "part": [10, 65, 70, 95, 98, 120, 121, 131, 141, 151, 153, 196, 213], "tag": [10, 22, 37, 42, 63, 70, 107, 108, 109, 110, 111, 120, 121, 151, 179, 187, 193, 196, 197, 213], "order": [10, 62, 65, 78, 89, 90, 95, 100, 128, 131, 139, 140, 162, 166, 179, 207, 208, 211, 213], "meaning": [10, 141], "phrase": [10, 70, 74, 85, 99, 104], "onto": [10, 179, 208], "pars": [10, 59, 60, 61, 70, 90, 98, 100, 102, 137, 139, 140, 162, 165, 190, 193, 196], "regular": [10, 62, 103, 109, 123], "express": [10, 42, 51, 62, 100, 103, 123], "wrap": [10, 116, 135, 167, 168, 176, 182, 186], "angl": 10, "bracket": 10, "easili": [10, 76, 121, 155, 203], "distinguish": 10, "itself": [10, 65, 95, 134, 151, 164, 208], "form": [10, 22, 37, 42, 86, 90, 98, 99, 100, 103, 104, 124, 126, 139, 140, 151, 155, 187, 193, 194, 207], "peter": [10, 79, 98, 113, 121, 124, 139, 141, 193], "piper": [10, 98, 121, 141], "employe": [10, 98, 121, 141], "pick": [10, 98, 121, 141], "peck": [10, 98, 121, 141], "pickl": [10, 98, 121, 141], "pepper": [10, 98, 121, 141], "nnp": [10, 121, 162, 179, 193, 194, 196, 197, 206, 211, 212, 213], "nn": [10, 121, 193, 194, 196, 197, 213], "vbp": [10, 121, 162, 194, 206, 211, 212], "vbg": [10, 121], "IN": [10, 121, 162, 179, 194, 196, 197, 206, 211, 212], "jj": [10, 121, 162, 179, 193, 196, 206, 211, 212, 213], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 137, 151], "group": [10, 131, 148], "so": [10, 14, 18, 22, 30, 41, 42, 47, 64, 65, 95, 108, 115, 124, 132, 164, 187, 203], "here": [10, 98, 179, 207], "specif": [10, 43, 59, 61, 63, 67, 68, 73, 84, 92, 95, 110, 128, 129, 132, 143, 162, 164, 187, 211], "noun": [10, 194], "success": [10, 70, 80, 129], "grammar": 10, "parser": [10, 59, 61, 92], "perceptronmodel": [10, 59, 61, 92, 109, 121, 193], "Of": [10, 66, 151], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 154, 155, 163, 164, 165, 166, 187, 193, 203, 207], "sentencedetector": [10, 22, 43, 51, 59, 61, 68, 71, 82, 84, 88, 92, 95, 98, 103, 105, 109, 110, 111, 112, 121, 123, 124, 142, 144, 164, 166, 193, 207, 208], "postag": 10, "11": [10, 58, 87, 88, 100, 102, 105, 121, 198], "21": [10, 100, 102, 111, 121, 198], "35": [10, 121, 198], "39": [10, 111, 121, 196, 198], "52": [10, 111, 121, 196], "58": [10, 55, 121], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 95, 155, 207], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 97, 110, 112, 139, 140], "albert": [11, 12, 13, 66], "span": [11, 15, 19, 23, 27, 32, 35, 38, 44, 128, 134], "question": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 59, 61, 67, 68, 76, 81, 82, 89, 112, 121, 128, 129, 134, 162], "answer": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 59, 61, 62, 67, 68, 76, 89, 112, 128, 129, 134, 162], "squad": [11, 15, 19, 23, 27, 32, 35, 38, 44, 66, 67, 68, 72, 80, 81, 82, 128], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 55, 129], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 66, 67, 68, 72, 76, 89], "comput": [11, 15, 19, 23, 27, 32, 35, 38, 44, 53, 55, 57, 66, 72, 73, 78, 84, 129, 133, 140, 151, 162, 211], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 28, 30, 32, 33, 35, 36, 38, 39, 41, 44, 45, 47, 48, 115], "spanclassifi": [11, 15, 19, 23, 27, 32, 35, 38, 44], "document_quest": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44], "document_context": [11, 15, 19, 23, 27, 32, 35, 38, 44], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 56, 76, 84, 109, 110, 113, 123, 124, 128, 147, 148, 164, 173], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 73, 76, 139, 140], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 87, 88, 89, 99, 104, 139, 142], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 87, 88, 89, 99, 105, 108, 128, 129, 131, 132, 133, 134, 139, 142, 162], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 87, 88, 89, 90, 97, 99, 104, 131, 137, 139, 142, 148, 153, 193, 194, 207], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 97, 110, 128, 129, 131, 132, 133, 134, 137], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 87, 88, 89], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 66, 67, 68, 70, 72, 73, 78, 81, 82, 87, 88, 89, 187, 203], "multidocumentassembl": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 163], "context": [11, 15, 19, 23, 27, 32, 35, 38, 44, 67, 68, 74, 76, 85, 89, 115, 127, 131, 137, 148], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 71, 73, 79, 81, 87, 99, 104, 109, 139, 142, 155, 166], "what": [11, 15, 19, 23, 27, 32, 35, 38, 42, 44, 53, 59, 61, 95, 97, 112, 115, 133, 137, 146, 194, 204], "my": [11, 13, 15, 17, 19, 22, 23, 25, 27, 29, 32, 34, 35, 36, 38, 40, 42, 44, 46, 49, 62, 63, 64, 103, 105, 112, 115, 123, 129, 131, 132, 142, 144, 147, 207], "clara": [11, 15, 19, 23, 27, 32, 35, 38, 44, 112], "live": [11, 13, 15, 17, 19, 23, 25, 27, 29, 32, 34, 35, 38, 40, 44, 46, 49, 112, 129, 131, 187, 203], "berkelei": [11, 15, 19, 23, 27, 32, 35, 38, 44], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 28, 33, 36, 39, 45, 48, 128, 134], "pool": [12, 16, 20, 24, 28, 33, 36, 39, 45, 48, 71, 76, 83], "multi": [12, 16, 20, 22, 24, 28, 33, 36, 37, 39, 42, 45, 48, 66, 84, 87, 88, 95, 97, 133], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 97], "instead": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 68, 95, 97, 100, 102, 134, 155, 156, 162, 211], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 69, 75, 87, 88, 97, 100, 105, 107, 108, 109, 110, 115, 151, 162, 179, 190, 193], "inputcol": [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 83, 97, 152, 154, 155, 156, 157, 160, 163], "averag": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 43, 45, 47, 48, 69, 71, 75, 78, 83, 87, 88, 97, 110, 121, 135], "calcul": [12, 14, 16, 18, 20, 22, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 86, 105, 110, 118, 126, 135], "softmax": [12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 72, 74, 85, 137], "sigmoid": [12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "love": [12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 68, 82, 88, 124, 127, 207], "movi": [12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 39, 41, 42, 45, 47, 48, 127, 207], "child": [12, 14, 16, 18, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48], "pretti": [12, 14, 16, 18, 24, 26, 28, 30, 33, 37, 39, 41, 45, 47, 48, 95], "bore": [12, 14, 16, 18, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48], "neg": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 39, 41, 42, 45, 47, 48, 126, 127, 135, 187, 203], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 28, 29, 30, 33, 34, 36, 39, 40, 41, 45, 46, 47, 48, 49, 53, 55, 57, 112], "setcoalescesent": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 97], "limit": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 53, 55, 57, 64, 66, 70, 79, 80, 86, 89, 95, 134, 139], "almost": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "512": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 43, 45, 47, 48, 64, 69, 75, 76, 80, 133], "help": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 59, 61, 62, 66, 115, 116, 131, 133, 148, 187, 203, 208, 212], "feed": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "entir": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 53, 133], "bool": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 62, 63, 64, 68, 71, 84, 90, 92, 97, 99, 100, 104, 105, 108, 109, 110, 113, 118, 123, 124, 128, 129, 131, 132, 133, 134, 135, 137, 139, 142, 147, 148, 151, 153, 155, 156, 157, 162, 165, 169, 174, 180, 187, 190, 191, 193], "one": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 37, 39, 41, 45, 47, 48, 51, 53, 55, 56, 57, 59, 61, 63, 67, 68, 80, 83, 87, 88, 89, 95, 97, 100, 103, 108, 115, 124, 139, 144, 166, 203, 207], "albertfortokenclassif": [13, 66], "ner": [13, 17, 21, 25, 29, 34, 40, 46, 49, 87, 88, 92, 93, 144, 162, 179, 180, 187, 190, 203], "token_classifi": [13, 21, 34, 40, 46, 49], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 66], "level": [13, 22, 37, 42, 67, 68, 79, 81, 82, 84, 86, 88, 90, 109, 110, 118, 137, 180, 193], "tokenclassifi": [13, 17, 21, 25, 29, 34, 40, 46, 49], "john": [13, 17, 25, 29, 34, 40, 46, 49, 51, 68, 82, 88, 90, 92, 111, 113, 124, 157, 198], "lenon": [13, 17, 25, 29, 34, 40, 46, 49], "born": [13, 17, 25, 29, 34, 40, 46, 49, 129, 131], "london": [13, 17, 25, 29, 34, 40, 46, 49], "pari": [13, 17, 25, 29, 34, 40, 46, 49, 112], "sarah": [13, 17, 25, 29, 34, 40, 46, 49], "o": [13, 17, 21, 25, 29, 34, 40, 46, 49, 108, 109, 110, 111, 162, 179, 190, 193, 197, 213], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 26, 30, 41, 47], "nli": [14, 18, 26, 30, 41, 47], "natur": [14, 18, 26, 30, 41, 42, 47, 57, 66, 67, 68, 70, 72, 73, 74, 80, 84, 85, 89, 97, 128, 129, 134, 153, 163, 166], "equival": [14, 18, 26, 30, 41, 47, 162, 180, 211], "bartforsequenceclassif": 14, "don": [14, 18, 26, 30, 41, 47, 73, 81, 113], "hardcod": [14, 18, 26, 30, 41, 47], "potenti": [14, 18, 26, 30, 41, 47, 55, 132, 137], "thei": [14, 18, 26, 30, 41, 43, 47, 59, 61, 62, 110, 113, 115, 129, 164, 182, 194, 207], "chosen": [14, 18, 26, 30, 41, 47, 59, 61, 110, 115], "runtim": [14, 18, 26, 30, 41, 47], "usual": [14, 18, 26, 30, 41, 47, 57, 166, 191], "slower": [14, 18, 26, 30, 41, 47], "much": [14, 18, 22, 26, 30, 41, 43, 47, 66, 69, 75, 81, 82, 113, 131, 132, 151, 180, 207], "flexibl": [14, 18, 26, 30, 41, 47, 52, 55], "loop": [14, 18, 30, 41, 47], "through": [14, 18, 30, 41, 47, 66, 80, 92, 95, 132, 157, 208], "longer": [14, 18, 30, 41, 47, 66, 74, 79, 85, 97, 131, 133, 212], "pass": [14, 18, 26, 30, 41, 47, 65, 115], "pose": [14, 18, 26, 30, 41, 47], "premis": [14, 18, 26, 30, 41, 47], "hypothesi": [14, 18, 26, 30, 41, 47], "pair": [14, 18, 26, 30, 41, 47, 52, 75, 92, 132, 187], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 26, 40, 41, 47, 74, 85], "bart": [14, 128], "bertforquestionansw": [15, 43], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_zero_shot_classifier_mnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 70], "camembert_base_qa_fquad": 19, "fr": [19, 20, 70, 97, 132], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 90], "ai": [20, 115, 116, 128, 187, 203], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 70, 97, 133], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 207], "classifierdlapproach": [22, 37, 207], "univers": [22, 59, 61, 84, 133], "encod": [22, 56, 63, 67, 68, 72, 78, 79, 84, 112, 128, 132, 133, 187], "deep": [22, 67, 68, 76, 95, 109, 124, 137], "dnn": 22, "insid": [22, 37, 108, 121, 148, 193], "instanti": [22, 37, 42, 59, 61, 65, 74, 85, 86, 90, 98, 99, 103, 104, 109, 110, 113, 121, 124, 126, 127, 135, 137, 139, 140, 144, 146, 151, 193, 194], "classifierdlmodel": [22, 37, 207], "monitor": [22, 37, 42, 110, 115, 116, 187, 203], "metric": [22, 37, 42, 110, 140, 187], "done": [22, 37, 42, 81, 82, 109, 110, 208], "settestdataset": [22, 37, 42, 110, 118], "method": [22, 37, 42, 65, 66, 73, 74, 78, 80, 85, 89, 95, 110, 135, 191, 202], "expect": [22, 37, 42, 69, 75, 89, 110, 148, 179], "path": [22, 37, 42, 59, 61, 74, 85, 86, 90, 92, 98, 99, 103, 104, 109, 110, 112, 113, 118, 124, 126, 129, 137, 139, 140, 143, 148, 160, 162, 178, 187, 190, 193, 194, 196, 197, 203], "parquet": [22, 37, 42, 110, 118, 152], "datafram": [22, 37, 42, 74, 85, 86, 110, 118, 121, 135, 151, 162, 175, 179, 186, 187, 190, 193, 194, 196, 197, 203, 207, 211, 213], "ha": [22, 37, 42, 43, 52, 53, 55, 56, 57, 62, 63, 64, 66, 72, 73, 76, 81, 82, 86, 95, 98, 103, 110, 118, 124, 126, 128, 132, 134, 139, 140, 151, 152, 153, 160, 162, 187, 191, 196, 203, 207, 208], "same": [22, 37, 42, 51, 66, 80, 81, 86, 87, 90, 92, 110, 115, 118, 134, 135, 164, 187, 208], "follow": [22, 37, 42, 51, 58, 63, 76, 79, 86, 95, 100, 102, 103, 108, 110, 113, 123, 149, 165, 203, 205, 208], "universalsentenceencod": [22, 37, 42, 84, 187, 203, 207], "preprocessingpipelin": [22, 37, 42, 110, 118], "randomsplit": [22, 37, 42, 110, 118], "write": [22, 37, 42, 86, 110, 118, 139, 140, 208], "overwrit": [22, 37, 42, 110, 111, 118, 187], "test_data": [22, 37, 42, 110, 118], "setlabelcolumn": [22, 37, 42, 107, 109, 110, 117, 143, 187, 203, 207], "usag": [22, 37, 42, 51, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 76, 81, 84, 86, 87, 89, 90, 95, 97, 98, 100, 102, 103, 104, 109, 110, 113, 121, 123, 124, 126, 127, 128, 133, 134, 135, 137, 139, 141, 142, 146, 148, 151], "64": [22, 37, 42, 66, 110, 117, 207], "dropout": [22, 42, 110], "coeffici": [22, 42, 109, 110], "enableoutputlog": [22, 37, 42, 110], "stdout": [22, 37, 42, 110, 118], "addit": [22, 37, 42, 59, 61, 65, 67, 68, 90, 109, 110, 115, 118, 123, 129, 148, 187, 206, 207], "evaluationlogextend": [22, 37, 42, 110], "valid": [22, 37, 42, 100, 110, 118, 124, 137, 203], "displai": [22, 37, 42, 118, 129, 187, 203], "time": [22, 37, 42, 66, 74, 85, 87, 88, 95, 100, 118, 127, 137, 151, 180, 206, 207, 211, 212], "labelcolumn": [22, 37, 42, 109, 110], "lr": [22, 37, 42, 110, 151], "rate": [22, 37, 42, 58, 74, 81, 82, 85, 86, 110, 117, 135, 137], "005": [22, 42, 110, 117], "maxepoch": [22, 37, 42, 109, 110], "epoch": [22, 37, 42, 107, 109, 110, 117, 118, 124, 137, 187], "30": [22, 42, 95, 100, 102, 108, 117, 133, 162, 179, 190, 198, 206], "outputlogspath": [22, 37, 42, 110, 124], "randomse": [22, 37, 42, 109, 110], "random": [22, 37, 42, 74, 85, 107, 109, 110, 115, 117, 133, 135, 155], "seed": [22, 37, 42, 74, 85, 107, 109, 110, 117, 133], "shuffl": [22, 37, 107, 117, 128], "testdataset": [22, 37, 42, 110, 187, 203], "statist": [22, 37, 42, 86, 95, 110, 118], "validationsplit": [22, 37, 42, 110, 124], "choos": [22, 37, 42, 71, 83, 110, 115, 124, 139], "proport": [22, 37, 42, 110, 118, 124], "against": [22, 37, 42, 90, 95, 99, 104, 110, 118, 124, 164], "between": [22, 37, 42, 55, 59, 61, 62, 64, 80, 81, 82, 84, 87, 88, 89, 92, 110, 115, 118, 123, 124, 132, 137], "off": [22, 37, 42, 84, 87, 88, 110, 118, 124], "verbos": [22, 37, 42, 109, 110, 118], "multiclassifierdlapproach": [22, 37, 187, 203], "sentimentdlapproach": [22, 37, 42], "accept": [22, 37, 42, 115], "singl": [22, 37, 42, 65, 75, 78, 86, 92, 95, 128, 132, 144, 146, 148, 193], "item": [22, 42, 86, 115, 187, 193, 203], "doubl": [22, 42, 152, 165], "sentenceembed": [22, 37, 42, 83, 86, 155], "In": [22, 37, 42, 53, 57, 64, 70, 72, 73, 79, 80, 86, 89, 90, 95, 97, 98, 99, 103, 104, 123, 124, 126, 128, 129, 131, 132, 134, 139, 140, 151, 187, 196, 203, 207, 208, 212, 213], "csv": [22, 42, 90, 118, 165, 207], "best": [22, 42, 66, 70, 75, 78, 81, 82, 95, 97, 110, 115, 128, 132, 207], "wach": [22, 207], "ever": [22, 42, 63, 207], "opinion": [22, 42, 207], "win": [22, 42, 207], "award": [22, 42, 207], "terribl": [22, 42, 207], "act": [22, 42, 207], "bad": [22, 42, 126, 187, 203, 207], "realli": [22, 42, 115, 127, 207], "trane": 22, "smallcorpu": [22, 42, 207], "read": [22, 42, 52, 53, 55, 56, 57, 59, 61, 74, 85, 95, 98, 99, 100, 102, 103, 104, 109, 112, 113, 118, 124, 126, 129, 137, 139, 140, 148, 151, 152, 154, 160, 163, 175, 178, 180, 181, 187, 191, 193, 194, 196, 197, 203, 207, 213], "header": [22, 42, 43, 165, 207], "src": [22, 42, 52, 53, 55, 56, 57, 59, 61, 86, 98, 99, 103, 104, 109, 110, 121, 139, 140, 144, 151, 193, 194, 196, 197, 198, 207, 213], "useembed": [22, 37, 42, 84, 207], "docclassifi": [22, 37, 42, 207], "setbatchs": [22, 37, 42, 76, 110, 117, 137, 187, 203, 207], "setmaxepoch": [22, 37, 42, 107, 109, 110, 117, 187, 203, 207], "20": [22, 36, 43, 53, 62, 89, 108, 128, 129, 131, 132, 162, 165, 179, 190, 207], "setlr": [22, 37, 42, 110, 117, 187, 203, 207], "5e": [22, 42, 207], "setdropout": [22, 42, 110, 207], "pipelinemodel": [22, 36, 37, 42, 59, 61, 63, 74, 85, 109, 110, 127, 137, 139, 140, 151, 162, 164, 187, 191, 207, 210], "v": [22, 37, 42, 58, 72, 80, 86, 95, 97, 99, 110, 117, 118, 140, 179], "classifierdl_use_trec6": [22, 207], "trec": 22, "multiclassifierdlmodel": [22, 37], "sentimentdlmodel": [22, 37, 42], "sarcasmdl": [22, 207], "classifierdl_use_sarcasm": [22, 207], "sarcasm": [22, 207], "m": [22, 64, 100, 102, 132, 198, 207], "could": [22, 73, 95, 103, 118, 137, 206, 207, 208], "put": [22, 179, 207], "word": [22, 55, 57, 59, 61, 66, 71, 72, 74, 76, 81, 83, 84, 85, 86, 89, 90, 92, 95, 98, 105, 108, 111, 112, 113, 121, 126, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 146, 148, 150, 151, 162, 179, 190, 196, 197, 206, 207], "wake": [22, 207], "am": [22, 62, 100, 102, 129, 131, 132, 144, 207], "mondai": [22, 207], "would": [22, 51, 62, 71, 83, 100, 124, 180, 207], "arrays_zip": [22, 59, 61, 95, 207], "out": [22, 69, 75, 95, 98, 113, 128, 129, 131, 132, 133, 134, 141, 142, 207], "normal": [22, 53, 55, 56, 57, 63, 93, 99, 124, 127, 142, 155, 164, 166, 180, 207, 208], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 26, 72], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": [24, 26], "v2": [24, 25, 67, 68, 72], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "debertaforzeroshotclassif": 26, "deberta_base_zero_shot_classifier_mnli_anli_v3": 26, "distilbertforquestionansw": 27, "distilbert": [27, 28, 30, 73], "distilbert_base_cased_qa_squad2": 27, "distilbertforsequenceclassif": [28, 30], "distilbert_base_sequence_classifier_imdb": 28, "distilbertfortokenclassif": 29, "distilbert_base_token_classifier_conll03": 29, "distilbertforzeroshotclassif": 30, "distilbert_base_zero_shot_classifier_uncased_mnli": 30, "albert_for_sequence_classif": [31, 93], "albert_for_token_classif": [31, 93], "bart_for_zero_shot_classif": [31, 93], "bert_for_sequence_classif": [31, 93], "bert_for_token_classif": [31, 93], "bert_for_zero_shot_classif": [31, 93], "camembert_for_sequence_classif": [31, 93], "camembert_for_token_classif": [31, 93], "deberta_for_sequence_classif": [31, 93], "deberta_for_token_classif": [31, 93], "deberta_for_zero_shot_classif": [31, 93], "distil_bert_for_sequence_classif": [31, 93], "distil_bert_for_token_classif": [31, 93], "distil_bert_for_zero_shot_classif": [31, 93], "longformer_for_sequence_classif": [31, 93], "longformer_for_token_classif": [31, 93], "mpnet_for_sequence_classif": [31, 93], "multi_classifier_dl": [31, 93], "roberta_for_sequence_classif": [31, 93], "roberta_for_token_classif": [31, 93], "roberta_for_zero_shot_classif": [31, 93], "sentiment_dl": [31, 93], "xlm_roberta_for_sequence_classif": [31, 93], "xlm_roberta_for_token_classif": [31, 93], "xlm_roberta_for_zero_shot_classif": [31, 93], "xlnet_for_sequence_classif": [31, 93], "xlnet_for_token_classif": [31, 93], "longformerforquestionansw": 32, "longform": [32, 33, 34, 79], "longformer_base_base_qa_squad2": 32, "longformerforsequenceclassif": 33, "longformer_base_sequence_classifier_imdb": 33, "4096": [33, 66, 79], "longformerfortokenclassif": 34, "xlnet_base_token_classifier_conll03": [34, 49], "longformer_base_token_classifier_conll03": 34, "mpnetforquestionansw": 35, "mpnet": [35, 36, 80], "mpnet_base_question_answering_squad2": 35, "mpnetforsequenceclassif": 36, "mpnet_sequence_classifier_ukr_messag": 36, "drive": 36, "car": 36, "bu": 36, "arriv": 36, "minut": [36, 37], "pineappl": 36, "pizza": 36, "worst": 36, "transport": 36, "movement": 36, "food": [36, 115], "mpnet_base_sequence_classifier_imdb": 36, "multiclassifierdl": 37, "bidirect": [37, 67, 68, 76, 89, 128], "gru": 37, "convolut": [37, 53, 57], "machin": [37, 53, 62, 64, 74, 85, 95, 109, 128, 129, 132, 133, 134, 187, 205], "strongli": 37, "relat": [37, 59, 61, 92, 212], "variant": [37, 58, 79, 84], "mai": [37, 64, 65, 115, 131, 132, 153, 206, 207, 208, 211, 212], "instanc": [37, 65, 112, 117, 118, 169, 174, 180, 181, 185], "multiclass": 37, "categor": [37, 191], "precis": [37, 59, 61, 64], "constraint": 37, "mani": [37, 65, 72, 81, 82, 95, 115, 128, 129, 131, 132, 133, 134, 151], "formal": 37, "find": [37, 59, 61, 81, 82, 84, 90, 92, 98, 100, 128, 129], "binari": [37, 160, 175, 187], "bertsentenceembed": [37, 42, 68, 82, 88], "multiclassifi": [37, 187, 203], "001": [37, 58, 109, 110], "10": [37, 51, 59, 95, 100, 102, 111, 115, 132, 135, 139, 187, 198, 206], "44": [37, 74, 85, 121], "shuffleperepoch": 37, "threshold": [37, 42, 74, 85, 95, 97, 109, 112, 137, 151], "ed58abb40640f983": 37, "pn": 37, "newsyou": 37, "toxic": 37, "a1237f726b5f5d89": 37, "dude": 37, "place": [37, 57, 65], "obscen": 37, "insult": 37, "24b0d6c8733c2abe": 37, "thank": [37, 89, 95, 198], "8c4478fb239bcfc0": 37, "gee": 37, "traindataset": [37, 187, 203], "printschema": [37, 152, 154, 160, 163], "root": [37, 51, 59, 61, 92, 152, 154, 160, 163, 194], "setcleanupmod": [37, 154, 163], "shrink": [37, 154, 163], "1e": [37, 187, 203], "setthreshold": [37, 42, 95, 97, 187, 203], "setvalidationsplit": [37, 118, 124], "setverbos": [37, 109, 110, 118], "multiclassifierdl_use_tox": 37, "comment": [37, 95], "jigsaw": 37, "good": [37, 70, 73, 84, 127], "stuff": 37, "wtf": 37, "kind": [37, 95, 100, 102], "crap": 37, "robertaforquestionansw": [38, 112], "roberta": [38, 39, 40, 41, 44, 45, 46, 56, 70, 72, 79, 80, 81, 82, 87, 88, 112, 128], "roberta_base_qa_squad2": [38, 112], "robertaforsequenceclassif": [39, 41], "roberta_base_sequence_classifier_imdb": 39, "robertafortokenclassif": 40, "roberta_base_token_classifier_conll03": 40, "robertaforzeroshotclassif": 41, "roberta_base_zero_shot_classifier_nli": 41, "sentimentdl": 42, "affect": [42, 148], "subject": [42, 59, 61], "view": 42, "common": [42, 90, 144, 153, 180, 210], "product": 42, "review": [42, 115, 183], "tweet": 42, "interpret": [42, 62, 90], "posit": [42, 72, 73, 80, 87, 88, 89, 95, 108, 115, 126, 127, 135, 147, 151, 166, 187, 203], "final": [42, 62, 79, 81, 82, 87, 88, 97, 110, 132, 137, 207], "otheriws": [42, 97], "neutral": [42, 97], "thresholdlabel": [42, 97], "score": [42, 67, 68, 87, 88, 95, 97, 109, 110, 112, 126, 127, 129], "less": [42, 73, 97, 100, 105, 109, 133, 139], "watch": [42, 127], "32": [42, 66, 76, 198, 206, 212], "setthresholdlabel": [42, 97], "p": [42, 63, 74, 85, 97, 110, 118, 132, 146], "sentimentdl_use_imdb": 42, "imdb": 42, "sentimentdl_use_twitt": 42, "wow": 42, "video": [42, 95], "awesom": 42, "bruh": 42, "damn": 42, "wast": [42, 127], "tapasforquestionansw": 43, "implement": [43, 65, 74, 85, 87, 112, 116, 124, 135, 137, 158, 159, 167, 168, 176, 182, 186], "tapa": 43, "design": [43, 53, 55, 58, 67, 68, 81, 82, 99, 128, 133, 187, 203], "about": [43, 59, 61, 81, 82, 86, 95, 112, 115, 123, 140, 162, 164, 206, 208, 211, 212], "tabular": [43, 165], "tabl": [43, 135, 165], "tri": 43, "share": [43, 95, 208], "its": [43, 57, 72, 73, 79, 89, 95, 121, 126, 128, 133, 142, 187, 196], "table_qa_tapas_base_finetuned_wtq": 43, "document_assembl": [43, 112, 135, 161, 165, 180], "table_json": 43, "document_t": [43, 165], "sentence_detector": [43, 93, 112, 122], "table_assembl": [43, 161, 180], "tableassembl": [43, 165], "stage": [43, 135, 162, 164, 187, 203, 207, 208, 211], "json_data": 43, "monei": [43, 165], "ag": [43, 69, 75, 165], "donald": [43, 165], "trump": [43, 165], "75": [43, 95, 165], "elon": [43, 165], "musk": [43, 165], "55": [43, 111, 165, 198], "AS": [43, 51, 112], "who": [43, 62, 64, 146, 207], "earn": 43, "count": [43, 115, 137], "old": [43, 51, 196], "xlmrobertaforquestionansw": 44, "xlm": [44, 45, 46, 87, 88], "xlm_roberta_base_qa_squad2": 44, "xlmrobertaforsequenceclassif": [45, 47], "xlm_roberta_base_sequence_classifier_imdb": 45, "xlmrobertafortokenclassif": 46, "xlm_roberta_base_token_classifier_conll03": 46, "xlmrobertaforzeroshotclassif": 47, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 47, "xlmroberta": 47, "xlnetforsequenceclassif": 48, "xlnet": [48, 49, 80, 89], "xlnet_base_sequence_classifier_imdb": 48, "xlnetfortokenclassif": 49, "spanbert_coref": 50, "spanbertcorefmodel": 51, "corefer": 51, "resolut": [51, 55], "spanbert": 51, "identifi": [51, 86, 95, 99, 103, 115, 116, 147, 148, 187, 208], "given": [51, 53, 55, 56, 57, 62, 64, 78, 90, 95, 112, 128, 129, 134, 137, 139, 140, 142, 173, 186, 187], "told": [51, 102], "mari": [51, 68, 82, 88, 124], "he": [51, 62, 64, 72, 102, 132, 146, 198], "borrow": 51, "book": [51, 63, 129, 137, 194], "her": [51, 112], "link": [51, 190], "ontonot": 51, "corefresolut": 51, "spanbert_base_coref": 51, "maxsegmentlength": 51, "textgenr": 51, "genr": 51, "One": [51, 78, 95, 146, 149], "bc": 51, "broadcast": 51, "convers": 51, "bn": [51, 132], "nw": 51, "wire": 51, "pt": [51, 132], "pivot": 51, "testament": 51, "tc": 51, "telephon": 51, "wb": 51, "setmaxsegmentlength": 51, "settextgenr": 51, "clipforzeroshotclassif": 52, "clip": 52, "contrast": [52, 75, 78, 79, 99, 134], "neural": [52, 57, 67, 68, 72, 110, 124, 128, 133], "network": [52, 57, 67, 68, 76, 110, 124], "abil": [52, 95, 128, 129], "hard": [52, 141], "veri": [52, 56, 57, 62, 70, 76, 87, 88, 89, 128, 129, 131, 133, 134, 162, 206, 208, 211, 212], "similar": [52, 66, 78, 84, 95, 97], "gpt": [52, 81, 115, 128, 129], "imageclassifi": [52, 53, 55, 56, 57], "image_assembl": [52, 53, 55, 56, 57, 161, 180], "zero_shot_classifier_clip_vit_base_patch32": 52, "huggingfac": [52, 53, 55, 56, 57, 70], "clipforzeroshotclassificationtestspec": 52, "candidatelabel": 52, "imagedf": [52, 53, 55, 56, 57], "dropinvalid": [52, 53, 55, 56, 57], "imageassembl": [52, 53, 55, 56, 57, 160], "photo": 52, "bird": [52, 56], "cat": [52, 53, 55, 56, 57], "dog": [52, 56], "hen": [52, 53, 55, 56, 57], "hippo": [52, 53, 55, 57], "room": [52, 56], "tractor": [52, 53, 55, 56, 57], "ostrich": [52, 53, 55, 56, 57], "ox": [52, 53, 55, 56, 57], "setcandidatelabel": 52, "pipelinedf": [52, 53, 55, 56, 57], "revers": [52, 53, 55, 56, 57], "split": [52, 53, 55, 56, 57, 62, 64, 123, 124, 133, 144, 146, 147, 151], "image_nam": [52, 53, 55, 56, 57], "palac": [52, 53, 55, 56, 57], "jpeg": [52, 53, 55, 56, 57], "egyptian_cat": [52, 53, 55, 56, 57], "hippopotamu": [52, 53, 55, 56, 57], "junco": [52, 53, 55, 56, 57], "bluetick": [52, 53, 55, 56, 57], "jpg": [52, 53, 55, 56, 57], "chihuahua": [52, 53, 55, 56, 57], "getcandidatelabel": 52, "image_classifier_vit_base_patch16_224": [52, 57], "convnextforimageclassif": 53, "convnet": 53, "convnext": 53, "2020": [53, 95, 100, 102, 124], "zhuang": 53, "liu": [53, 55, 72, 81, 82], "hanzi": 53, "mao": 53, "chao": 53, "yuan": 53, "wu": 53, "christoph": 53, "feichtenhof": 53, "trevor": 53, "darrel": 53, "sain": 53, "xie": 53, "pure": [53, 57, 133], "inspir": [53, 127, 139, 140, 183], "vision": [53, 55, 56, 57], "claim": 53, "outperform": [53, 75, 79, 80, 84, 87, 88, 89, 95, 129, 131], "convnextforimageclassificationtestspec": 53, "roar": 53, "visual": [53, 55, 187], "began": 53, "introduct": 53, "vit": [53, 56, 57], "quickli": [53, 115], "supersed": 53, "vanilla": 53, "hand": [53, 146], "face": 53, "difficulti": 53, "detect": [53, 55, 84, 96, 97, 115, 116, 122, 123, 124], "semant": [53, 55, 69, 76, 78, 84, 135, 151], "hierarch": [53, 55, 74, 85], "swin": [53, 55], "reintroduc": 53, "sever": [53, 213], "practic": [53, 70, 128, 134], "viabl": 53, "backbon": [53, 55, 89], "demonstr": [53, 55, 73, 79, 95, 129, 132, 133], "remark": 53, "wide": [53, 63, 67, 68, 72, 73, 75, 87, 88, 128, 131], "varieti": [53, 79, 80, 87, 88, 212], "howev": [53, 66, 80, 83, 89, 95, 113, 131, 132, 191, 206], "effect": [53, 55, 56, 57, 79, 115, 123, 128, 132, 134], "hybrid": 53, "still": [53, 129, 187], "credit": 53, "superior": 53, "inher": 53, "induct": [53, 73], "bias": [53, 73], "reexamin": 53, "space": [53, 74, 85, 86, 105, 135, 166], "achiev": [53, 72, 75, 78, 79, 80, 81, 82, 87, 88, 89, 110, 128, 129, 131, 133, 134, 162, 211], "gradual": 53, "modern": 53, "resnet": 53, "toward": [53, 129], "discov": [53, 204], "compon": [53, 57, 117, 118, 152, 160, 169, 174, 185, 211], "contribut": [53, 131], "along": [53, 92], "wai": [53, 59, 61, 90, 92, 164, 190], "outcom": 53, "explor": [53, 128, 132, 134], "famili": [53, 63, 75, 131], "dub": [53, 87, 88], "construct": [53, 65, 74, 85, 148, 190, 210], "compet": 53, "favor": 53, "term": [53, 95], "scalabl": 53, "87": [53, 55], "imagenet": [53, 55, 57], "coco": [53, 55], "ade20k": [53, 55], "while": [53, 55, 57, 66, 73, 78, 86, 95, 115, 118, 129, 132, 187, 203, 208], "maintain": 53, "simplic": [53, 128], "effici": [53, 55, 72, 74, 84, 85, 133, 206], "dores": [53, 55, 56, 57], "resiz": [53, 55, 56, 57], "certain": [53, 55, 56, 57, 137], "donorm": [53, 55, 56, 57], "deviat": [53, 55, 56, 57], "featureextractortyp": [53, 55, 56, 57], "architectur": [53, 55, 56, 57, 66, 67, 68, 72, 81, 97, 110, 124, 128, 134], "featur": [53, 55, 56, 57, 59, 74, 85, 95, 105, 109, 118, 135, 187, 210], "imagemean": [53, 55, 56, 57], "imagestd": [53, 55, 56, 57], "resampl": [53, 55, 56, 57], "pil": [53, 55, 56, 57], "nearest": [53, 55, 56, 57, 135], "bilinear": [53, 55, 56, 57], "bicub": [53, 55, 56, 57], "do_res": [53, 55, 56, 57], "tupl": [53, 55, 56, 57, 186], "dorescal": [53, 55, 56], "rescal": [53, 55, 56], "rescalefactor": [53, 55, 56], "factor": [53, 55, 56, 87, 88, 89, 128, 134, 137], "croppct": 53, "percentag": [53, 86, 137, 151], "crop": 53, "tabbi": [53, 55], "river": [53, 55, 57], "hors": [53, 55, 57], "amphibiu": [53, 55, 57], "snowbird": [53, 55, 57], "struthio": [53, 55, 57], "camelu": [53, 55, 57], "thresher": 53, "thrasher": 53, "thresh": 53, "setdorescal": 53, "boolean": 53, "setrescalefactor": 53, "255": 53, "setcroppct": 53, "determin": [53, 65, 87], "smaller": [53, 64, 73, 74, 85], "224": 53, "256": 53, "specifi": [53, 65, 111, 112, 115, 124, 193, 194], "edg": [53, 73, 92], "afterward": 53, "image_classifier_convnext_tiny_224_loc": 53, "clip_for_zero_shot_classif": 54, "convnext_for_image_classif": 54, "swin_for_image_classif": 54, "vision_encoder_decoder_for_image_capt": 54, "vit_for_image_classif": 54, "swinforimageclassif": 55, "swinimageclassif": 55, "shift": 55, "window": [55, 56, 74, 79, 85, 95, 110, 137], "ze": 55, "yutong": 55, "lin": 55, "yue": 55, "cao": 55, "han": 55, "hu": [55, 132], "yixuan": 55, "zheng": 55, "zhang": 55, "stephen": 55, "bain": 55, "guo": 55, "whose": [55, 65], "scheme": [55, 81, 128], "bring": [55, 132, 207], "greater": [55, 95, 115], "attent": [55, 57, 72, 79, 115, 131], "non": [55, 132, 148, 151], "overlap": [55, 62, 64, 99, 104], "cross": [55, 87, 88, 111], "connect": 55, "image_classifier_swin_base_patch4_window7_224": 55, "swinforimageclassificationtest": 55, "present": [55, 66, 75, 76, 79, 81, 82, 84, 87, 88, 92, 115, 118, 124, 128, 133, 135], "call": [55, 65, 67, 68, 73, 75, 95, 115, 129, 131, 186, 191, 193, 207, 213], "purpos": [55, 73, 75, 124], "adapt": 55, "aris": 55, "domain": [55, 78, 95, 129], "variat": 55, "high": [55, 84, 87, 88, 128, 132, 133], "variou": [55, 89, 201], "complex": [55, 76, 84, 95, 139, 140], "respect": [55, 65, 72, 86, 109, 110, 196], "These": [55, 66, 81, 82, 89, 95, 109, 129, 190, 205], "broad": [55, 62, 129], "rang": [55, 67, 68, 72, 73, 75, 78, 87, 88, 128, 131], "1k": 55, "dens": [55, 67, 68, 69, 132, 135], "box": [55, 132], "ap": 55, "51": [55, 154, 163, 196], "53": [55, 99, 104], "miou": 55, "val": 55, "Its": [55, 61, 112, 128], "surpass": [55, 72], "previou": [55, 78, 80, 87, 88, 129, 207], "margin": [55, 80, 89], "prove": 55, "benefici": [55, 95], "mlp": 55, "visionencoderdecoderforimagecapt": 56, "visionencoderdecod": 56, "caption": 56, "auto": [56, 128, 143], "beit": 56, "deit": 56, "gpt2": [56, 129], "image_captioning_vit_gpt2": 56, "visionencoderdecodertestspec": 56, "nreturnsequ": 56, "computation": [56, 76, 81, 82, 89, 128, 129, 131, 133, 134], "expens": [56, 76, 81, 82, 89, 126, 128, 129, 131, 133, 134, 139], "especi": [56, 128, 129, 131, 133, 134], "larger": [56, 70, 73, 81, 82, 128, 129, 131, 133, 134, 135], "acceler": [56, 76, 89, 128, 129, 131, 133, 134, 180], "gpu": [56, 66, 128, 129, 131, 133, 134, 180], "imagecapt": 56, "setbeams": [56, 128, 132, 174], "setdosampl": [56, 128, 129, 131, 132, 133, 134, 174], "fill": [56, 128], "furnitur": 56, "lai": 56, "couch": 56, "anoth": [56, 208], "brown": 56, "bear": 56, "bodi": 56, "water": 56, "flock": 56, "chicken": 56, "stand": [56, 67, 68], "lush": 56, "green": 56, "field": [56, 74, 85, 86, 90, 104], "small": [56, 57, 63, 66, 70, 73, 74, 85, 98, 121, 162, 196, 211], "wet": 56, "ground": 56, "wooden": 56, "floor": 56, "wear": 56, "blue": 56, "sweater": 56, "man": [56, 129, 131], "cow": 56, "vitforimageclassif": 57, "altern": [57, 95, 115, 126, 137, 139, 140, 162, 165, 207, 212], "vitimageclassificationtestspec": 57, "becom": [57, 66, 73, 95], "de": [57, 70, 95, 97, 132, 133], "facto": [57, 95], "remain": [57, 63, 66, 73, 95], "conjunct": 57, "replac": [57, 63, 72, 79, 97, 98, 111, 124, 128, 139, 140, 173, 207], "overal": [57, 86, 89], "structur": [57, 112, 166, 206], "relianc": 57, "cnn": [57, 97, 110, 124], "necessari": [57, 65, 73, 203, 210], "directli": [57, 132, 162, 187, 191, 203], "patch": 57, "mid": 57, "cifar": 57, "vtab": 57, "etc": [57, 71, 75, 78, 80, 155, 166, 203], "attain": 57, "excel": [57, 89], "substanti": [57, 67, 68], "fewer": [57, 66, 78, 135], "worth": 57, "16x16": 57, "egyptian": 57, "date2chunk": 58, "datematch": [58, 100], "multidatematch": [58, 100, 102], "entitynam": 58, "date_chunk": 58, "omicron": 58, "covid": 58, "world": [58, 62, 63, 64, 144, 187, 198, 203], "health": 58, "organ": [58, 95, 133], "nov": [58, 100, 102, 196], "26": [58, 108, 162, 179, 190, 198], "2021": [58, 100, 102], "118": [58, 165], "121": 58, "01": [58, 100, 102, 103], "setentitynam": 58, "dependencypars": [59, 61, 92], "dependencyparserapproach": [59, 194, 213], "unlabel": [59, 67, 68, 128, 129, 134], "grammat": [59, 61], "dependencyparsermodel": [59, 61, 92], "relationship": [59, 61, 84, 92], "tell": [59, 61, 95, 179], "verb": [59, 61, 194], "modifi": [59, 61, 81, 82, 108, 115, 124], "describ": [59, 61, 92, 95, 133], "particular": [59, 61, 95, 191, 207], "treebank": 59, "penn": 59, "setdependencytreebank": 59, "conll": [59, 61, 109, 110, 180, 194, 195, 210], "u": [59, 61, 72, 73, 95, 102, 108, 109, 110, 162, 179, 190, 194, 205, 208, 213], "setconllu": [59, 61], "dependencytreebank": 59, "conllu": [59, 61, 98, 180, 195, 210], "numberofiter": [59, 61], "converg": [59, 61, 121, 151], "better": [59, 61, 66, 72, 80, 89, 95, 109, 121, 123, 124, 127, 128, 131, 151], "typeddependencyparserapproach": [59, 61], "postagg": [59, 61, 92, 109, 121], "dependency_treebank": 59, "emptydataset": [59, 61], "tree": [59, 92], "bank": 59, "setnumberofiter": [59, 61], "read_a": [59, 61, 90, 98, 99, 103, 104, 109, 113, 118, 126, 139, 140, 148, 172, 178, 180, 193, 194], "reada": [59, 61, 86, 90, 98, 99, 103, 104, 109, 113, 118, 126, 139, 140, 144, 148, 175, 178, 193, 194], "dep": 59, "dependency_conllu": [59, 92], "perceptron": [59, 93, 120], "typeddependencyparsermdoel": 59, "union": [59, 61], "worker": [59, 61], "turner": [59, 61], "newal": [59, 61], "sai": [59, 61, 95, 148], "disappoint": [59, 61], "talk": [59, 61, 115], "stricken": [59, 61], "parent": [59, 61], "firm": [59, 61], "feder": [59, 61], "mogul": [59, 61], "dependency_pars": [60, 93, 191, 212], "typed_dependency_pars": [60, 93], "typeddependencypars": [61, 92], "conll2009": 61, "typeddependencyparsermodel": [61, 92], "beforehand": 61, "2009": 61, "setconll2009": 61, "dependency_typ": [61, 92], "train_smal": 61, "txt": [61, 74, 85, 86, 98, 99, 103, 104, 121, 124, 126, 137, 139, 140, 144, 148, 196, 197, 213], "typdep": 61, "dependency_typed_conllu": [61, 92], "amod": 61, "flat": [61, 92, 157], "nsubj": [61, 92, 157, 194], "parataxi": 61, "documentnorm": [62, 63, 64], "documentcharactertextsplitt": 62, "roughli": 62, "separ": [62, 64, 73, 81, 103, 105, 123, 124, 139, 148, 151, 156, 179, 193, 205], "subtext": 62, "perfect": [62, 64], "reason": [62, 64, 115], "observ": [62, 64, 84], "seen": [62, 64, 128], "addition": [62, 64, 89, 110, 121, 154, 163, 190], "custom": [62, 86, 109, 110, 123, 124, 148, 180, 187], "setsplitpattern": [62, 148], "regex": [62, 63, 90, 100, 103, 113, 137, 139, 140, 147, 148, 151], "setpatternsareregex": 62, "setkeepsepar": 62, "trim": [62, 64], "whitespac": [62, 64, 147, 151, 153], "settrimwhitespac": [62, 64, 147], "individu": [62, 64, 65, 95, 137], "setexplodesplit": [62, 64], "documentcharactertextsplittertest": 62, "chunksiz": 62, "chunkoverlap": 62, "splitpattern": [62, 148], "decreas": [62, 115, 135], "prioriti": [62, 139, 148], "patternsareregex": 62, "keepsepar": 62, "explodesplit": [62, 64], "trimwhitespac": [62, 64, 147], "brioni": 62, "lodg": 62, "serpentin": 62, "aven": 62, "19798": 62, "39395": 62, "19597": 62, "did": [62, 95], "woman": 62, "think": 62, "39371": 62, "59242": 62, "19871": 62, "But": [62, 64, 69, 75], "said": [62, 64], "million": [62, 95, 111, 129], "red": 62, "men": 62, "59166": 62, "77833": 62, "18667": 62, "friend": 62, "enthusiast": 62, "musician": 62, "being": [62, 73, 110, 115, 118, 128, 131, 133, 134, 135], "himself": 62, "capab": 62, "77835": 62, "97769": 62, "19934": 62, "And": 62, "yet": [62, 191], "convinc": 62, "come": [62, 95, 108, 115, 131], "li": 62, "97771": 62, "117248": 62, "19477": 62, "she": [62, 146], "had": [62, 95, 115], "slate": 62, "colour": 62, "brim": 62, "straw": 62, "hat": 62, "feather": 62, "117250": 62, "137242": 62, "19992": 62, "That": [62, 95, 146, 187, 203, 208], "littl": [62, 124, 212], "paradox": 62, "profoundli": 62, "singulari": 62, "137244": 62, "157171": 62, "19927": 62, "setchunks": 62, "setchunkoverlap": 62, "raw": [63, 129, 146, 148, 151, 206, 208], "scrape": 63, "xml": 63, "remov": [63, 81, 82, 113, 127, 147, 155, 156, 157], "dirti": [63, 113], "want": [63, 64, 90, 111, 191, 208], "polici": 63, "__": [63, 128, 155, 156], "action": 63, "clean": [63, 113, 128, 134, 166, 208], "lowercas": [63, 113, 147, 151, 153], "pretty_al": 63, "utf": 63, "cleanuppattern": [63, 113], "normalizeddocu": 63, "setact": 63, "setpattern": [63, 147, 151], "setreplac": 63, "setpolici": 63, "setlowercas": [63, 113, 153, 166], "div": 63, "theworldsgreatest": 63, "right": [63, 67, 68, 128, 151], "hide": 63, "toptext": 63, "style": [63, 97, 134], "font": 63, "sego": 63, "ui": 63, "arial": 63, "san": [63, 95], "serif": 63, "largest": [63, 95, 129], "develop": [63, 95, 131, 133, 184], "site": [63, 95], "h1": 63, "300": 63, "160": 63, "lorem": [63, 99, 104], "ipsum": [63, 99, 104], "print": [63, 65, 180, 191], "typeset": 63, "industri": 63, "been": [63, 70, 129, 131, 149, 166, 191], "1500": [63, 132], "unknown": [63, 64, 97], "printer": 63, "took": 63, "gallei": 63, "scrambl": 63, "specimen": 63, "surviv": 63, "five": [63, 111], "centuri": [63, 151], "leap": 63, "electron": 63, "essenti": [63, 129], "unchang": 63, "popularis": 63, "1960": 63, "letraset": 63, "passag": [63, 69, 75], "recent": [63, 67, 68, 72, 81, 82, 95, 115, 128], "desktop": 63, "publish": [63, 81, 82], "softwar": 63, "aldu": 63, "pagemak": 63, "setencod": 63, "documenttokensplitt": 64, "measur": [64, 73, 81, 82, 128, 187], "futur": [64, 124, 128, 134], "techniqu": [64, 66, 72, 128, 129, 134, 135], "documenttokensplittertest": 64, "numtoken": 64, "tokenoverlap": 64, "immens": 64, "faculti": 64, "extraordinari": 64, "power": [64, 67, 68, 128, 134], "2950": 64, "5707": 64, "2757": 64, "chang": [64, 65, 78, 183], "cloth": 64, "imagin": 64, "deduc": 64, "As": [64, 66, 67, 68, 69, 73, 75, 95, 115], "5659": 64, "8483": 64, "2824": 64, "quarter": 64, "receiv": [64, 196, 213], "Be": 64, "chamber": 64, "8427": 64, "11241": 64, "2814": 64, "piti": 64, "miss": [64, 100, 102, 153], "client": 64, "never": [64, 127, 207], "mind": 64, "him": [64, 102], "11188": 64, "13970": 64, "2782": 64, "person": [64, 90, 194], "emploi": [64, 89], "me": [64, 102], "wish": 64, "agent": 64, "conf": 64, "13918": 64, "16898": 64, "2980": 64, "letter": [64, 113, 129, 131, 137, 196, 213], "secret": 64, "marriag": 64, "16836": 64, "19744": 64, "2908": 64, "seven": 64, "hundr": [64, 87, 88], "holm": [64, 137], "scribbl": 64, "receipt": 64, "shee": 64, "19683": 64, "22551": 64, "2868": 64, "setnumtoken": 64, "settokenoverlap": 64, "documenttokensplittertestspec": 65, "methodnam": 65, "runtest": 65, "By": [65, 126, 128, 134, 142, 147, 155, 180, 187, 203], "fixtur": 65, "testcas": 65, "subclass": [65, 116, 135, 168, 182, 186], "constructor": 65, "argument": [65, 191], "execut": [65, 135, 162, 207, 211], "author": 65, "deconstruct": 65, "overrid": [65, 186], "setup": 65, "teardown": 65, "__init__": 65, "must": [65, 74, 85, 98, 99, 103, 104, 115, 118, 126, 127, 139, 140, 153, 179, 180, 187, 193], "alwai": [65, 95, 115, 134], "signatur": 65, "attribut": [65, 187], "failureexcept": 65, "except": [65, 70, 105, 110, 148], "rais": [65, 81, 82, 95, 105, 110, 187], "assert": 65, "fail": [65, 153], "deem": 65, "error": [65, 137], "longmessag": 65, "long": [65, 68, 79, 89], "messag": [65, 205], "repr": 65, "failur": 65, "maxdiff": 65, "diff": 65, "difflib": 65, "hook": 65, "exercis": 65, "lite": 66, "googl": [66, 67, 68, 72, 74, 76, 81, 82, 84, 85, 95, 134, 194], "research": [66, 67, 68, 72, 74, 85, 133, 134], "toyota": 66, "technolog": 66, "institut": 66, "chicago": 66, "offici": [66, 95, 108, 109, 110, 162, 179, 190, 204], "tf": [66, 84], "wrapper": [66, 183], "port": 66, "properti": [66, 158, 159, 169, 172, 180], "albert_base_uncas": 66, "albert_bas": 66, "768": [66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 87, 88, 89], "emb": 66, "dim": 66, "12m": 66, "albert_large_uncas": 66, "albert_larg": 66, "1024": [66, 76, 79, 89], "24": [66, 89, 99, 104, 108, 137, 162, 179, 190, 206], "16": [66, 89, 111, 196, 206], "18m": 66, "albert_xlarge_uncas": 66, "albert_xlarg": 66, "2048": 66, "60m": 66, "albert_xxlarge_uncas": 66, "albert_xxlarg": 66, "235m": 66, "sentencepiec": [66, 72, 84], "everi": [66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 87, 88, 89, 110, 127, 133, 137, 154, 163, 164, 208], "dimens": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 174], "repeat": [66, 115], "footprint": 66, "cost": [66, 137, 139], "FOR": 66, "http": [66, 70, 72, 74, 76, 78, 84, 85, 115, 128, 151, 204], "tfhub": [66, 76, 84], "q": 66, "increas": [66, 69, 75, 86, 95, 115, 128, 129, 132, 135, 139], "downstream": [66, 70, 72, 76, 78, 79, 89, 128, 129, 134], "some": [66, 68, 87, 95, 110, 124, 129, 164, 187, 198, 206, 207, 211, 212], "point": [66, 67, 68, 123, 124, 154, 163, 193], "harder": 66, "tpu": 66, "consumpt": [66, 84, 86], "speed": [66, 109, 133], "devlin": [66, 81, 82], "et": [66, 81, 82, 97, 132], "al": [66, 81, 82], "2019": [66, 70, 72, 81, 82, 87, 88, 128], "comprehens": [66, 128, 129], "empir": [66, 67, 68, 87, 88, 89], "evid": 66, "lead": [66, 70, 87, 88], "focus": [66, 95, 115], "inter": 66, "coher": [66, 129], "establish": 66, "glue": [66, 67, 68, 73, 80, 81, 82, 87, 88, 128], "race": [66, 72, 81, 82], "embeddingsfinish": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 155], "finished_embed": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "setoutputasvector": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 155], "setcleanannot": [66, 72, 73, 76, 79, 81, 83, 84, 86, 87, 89, 155, 156, 157], "80": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 103, 155, 166], "1342473030090332": [66, 72], "3855540752410889": [66, 72], "9818322062492371": [66, 72], "784737348556518": [66, 72], "847029983997345": [66, 72], "047153353691101": [66, 72], "1520637571811676": [66, 72], "6245765686035156": [66, 72], "009860038757324219": [66, 72], "13450059294700623": [66, 72], "707749128341675": [66, 72], "2916892766952": [66, 72], "04192575812339783": [66, 72], "5764210224151611": [66, 72], "3196685314178467": [66, 72], "527840495109": [66, 72], "15583214163780212": [66, 72], "1614152491092682": [66, 72], "28423872590065": [66, 72], "135491415858268": [66, 72], "bertembed": [67, 71, 78, 83, 110, 155], "small_bert_l2_768": 67, "understand": [67, 68, 73, 80, 87, 89, 95, 128, 134, 151, 206], "introduc": [67, 68, 73, 76, 78, 79, 80, 128, 131, 134], "unlik": [67, 68, 78, 87, 95, 146], "jointli": [67, 68], "condit": [67, 68, 128, 129, 131, 132, 133, 134, 174], "both": [67, 68, 75, 76, 84, 92, 115, 128, 207, 208], "left": [67, 68, 128, 151], "just": [67, 68, 73, 81, 105, 110], "modif": [67, 68], "conceptu": [67, 68], "obtain": [67, 68, 70, 75, 84], "eleven": [67, 68], "push": [67, 68], "absolut": [67, 68], "multinli": [67, 68], "86": [67, 68, 72], "v1": [67, 68], "f1": [67, 68, 87, 88, 110, 129], "93": [67, 68], "83": [67, 68, 72, 196, 197, 213], "small_bert_l2_128": 67, "3497989177703857": [67, 78], "480538547039032": [67, 78], "3238905668258667": [67, 78], "612930893898010": [67, 78], "1357314586639404": 67, "32984697818756104": 67, "6032363176345825": 67, "6791689395904": 67, "8244884014129639": 67, "27088963985443115": 67, "059438943862915": 67, "9817547798156": 67, "1648050546646118": 67, "4725411534309387": 67, "5938255786895752": 67, "5780693292617": 67, "9125322699546814": 67, "4563939869403839": 67, "3975459933280945": 67, "81611204147338": 67, "sentence_bert_embed": 68, "sent_small_bert_l2_768": 68, "islong": 68, "sent_small_bert_l2_128": 68, "orang": [68, 82, 88], "8951074481010437": [68, 82, 88], "13753940165042877": [68, 82, 88], "3108254075050354": [68, 82, 88], "65693199634552": [68, 82, 88], "6180210709571838": [68, 82, 88], "12179657071828842": [68, 82, 88], "191165953874588": [68, 82, 88], "4497021436691": [68, 82, 88], "822715163230896": [68, 82, 88], "7568016648292542": [68, 82, 88], "1165061742067337": [68, 82, 88], "59048593044281": [68, 82, 88], "setislong": 68, "bgeembed": 69, "bge": 69, "baai": 69, "low": [69, 87, 88, 137], "dimension": [69, 84], "bge_bas": 69, "queri": [69, 75, 131, 135, 204], "protein": [69, 75], "femal": [69, 75], "eat": [69, 75], "guidelin": [69, 75], "cdc": [69, 75], "women": [69, 75], "70": [69, 75, 78, 131], "46": [69, 75, 198], "gram": [69, 74, 75, 85, 95, 105, 128, 129, 131, 132, 133, 134, 174], "dai": [69, 75, 100, 102, 137], "chart": [69, 75, 187, 203], "ll": [69, 75, 151], "marathon": [69, 75], "below": [69, 75, 92, 212], "0190285e": [69, 75], "005974853": [69, 75], "072875895": [69, 75], "007944068": [69, 75], "026059335": [69, 75], "0080": [69, 75], "050514214": [69, 75], "010061974": [69, 75], "04340176": [69, 75], "020937217": [69, 75], "05170225": [69, 75], "01157857": [69, 75], "camembertembed": 70, "tasti": 70, "french": [70, 95, 132, 133, 142], "loui": 70, "martin": 70, "muller": 70, "pedro": 70, "javier": 70, "ortiz": 70, "su\u00e1rez": 70, "yoann": 70, "dupont": 70, "laurent": 70, "romari": 70, "\u00e9ric": 70, "villemont": 70, "la": [70, 115, 133], "clergeri": 70, "djam\u00e9": 70, "seddah": 70, "beno\u00eet": 70, "sagot": 70, "facebook": [70, 72, 87, 88, 128], "138gb": 70, "camembert_bas": 70, "camembertembeddingstestspec": 70, "co": [70, 95], "ubiquit": 70, "despit": [70, 128], "concaten": [70, 151], "investig": [70, 73, 84], "feasibl": 70, "monolingu": [70, 87, 88], "crawl": [70, 128, 134], "prefer": [70, 92, 157], "wikipedia": [70, 97, 129], "surprisingli": [70, 84], "4gb": 70, "130": 70, "gb": 70, "reach": [70, 95, 129, 151], "four": [70, 124, 149, 151], "un": [70, 97], "08442357927560806": 70, "12863239645957947": 70, "03835778683423996": 70, "200479581952": 70, "048462312668561935": 70, "12637358903884888": 70, "27429091930389404": 70, "07516729831": 70, "02690504491329193": 70, "12104076147079468": 70, "012526623904705048": 70, "031543646007": 70, "05877285450696945": 70, "08773420006036758": 70, "06381352990865707": 70, "122621834278": 70, "chunkembed": [71, 155], "wordembed": [71, 83, 86, 110, 155, 180], "chunker": [71, 93, 180], "ngramgener": [71, 105], "nerconvert": [71, 108, 109, 110, 187, 203], "poolingstrategi": [71, 83], "aggreg": [71, 83], "sum": [71, 76, 83], "skipoov": 71, "discard": [71, 112], "oov": 71, "setn": [71, 105], "wordembeddingsmodel": [71, 83, 86, 92, 109, 110, 111, 155], "setpoolingstrategi": [71, 83], "55661": 71, "42829502": 71, "86661": 71, "409785": 71, "06316501": 71, "120775": 71, "0732005": 71, "40674996": 71, "22938299": 71, "50597": 71, "288195": 71, "555655": 71, "465145": 71, "140118": 71, "17417": 71, "095253006": 71, "0530925": 71, "218465": 71, "714395": 71, "79860497": 71, "0129999": 71, "139705": 71, "177955": 71, "1887775": 71, "45545": 71, "20030999": 71, "461557": 71, "07891501": 71, "strategi": [71, 83, 100, 103, 123, 137, 173], "setskipoov": 71, "debertaembed": 72, "enhanc": [72, 127, 128], "disentangl": 72, "pengcheng": 72, "xiaodong": 72, "jianfeng": 72, "gao": 72, "weizhu": 72, "chen": [72, 81, 82], "2018": [72, 81, 82], "half": [72, 95], "deberta_v3_bas": 72, "microsoft": [72, 75, 80, 133], "www": 72, "blog": 72, "superglu": 72, "progress": [72, 124, 147], "significantli": [72, 76, 81, 82, 87, 88, 95], "novel": [72, 80, 89, 95, 128], "mechan": [72, 79], "weight": [72, 76, 95, 109, 111, 137], "among": [72, 80], "matric": 72, "second": [72, 76, 103, 123, 142, 147, 207], "mnli": 72, "9": [72, 87, 88, 105, 132, 206, 211, 212], "90": 72, "91": 72, "88": 72, "made": [72, 84, 203], "publicli": [72, 87, 88], "distilbertembed": 73, "fast": [73, 127, 131, 133, 162, 211], "cheap": 73, "distil": 73, "40": [73, 75, 111, 131, 133], "uncas": 73, "preserv": [73, 108, 147, 166], "95": 73, "distilbert_base_cas": 73, "doesn": [73, 81], "token_type_id": [73, 81], "indic": [73, 81, 147, 151], "belong": [73, 81], "sep_token": [73, 81], "sep": 73, "position_id": 73, "ad": [73, 76, 115, 137], "though": [73, 95], "know": [73, 133, 164], "cheaper": 73, "lighter": 73, "preval": 73, "oper": [73, 79, 137, 146, 206], "constrain": 73, "budget": 73, "counterpart": 73, "leverag": [73, 80, 187, 203], "reduc": [73, 80, 139, 140, 166], "retain": 73, "97": [73, 100, 102, 151], "tripl": [73, 92], "cosin": 73, "distanc": [73, 135, 137, 139, 140], "devic": 73, "proof": 73, "concept": [73, 208], "experi": [73, 89, 115, 128, 187, 204], "1127224713563919": 73, "1982710212469101": 73, "5360898375511169": 73, "272536993026733": 73, "35534414649009705": 73, "13215228915214539": 73, "40981462597846985": 73, "14036104083061": 73, "328085333108902": 73, "06269335001707077": 73, "017595693469047546": 73, "024373905733": 73, "15617232024669647": 73, "2967822253704071": 73, "22324979305267334": 73, "04568954557180": 73, "45411425828933716": 73, "01173491682857275": 73, "190129816532135": 73, "1178255230188369": 73, "doc2vecapproach": 74, "word2vec": [74, 77, 93], "corpu": [74, 76, 85, 95, 98, 121, 128, 134, 137, 196, 213], "algorithm": [74, 85, 95, 109, 127, 137, 139, 140], "skip": [74, 85, 92, 137], "doc2vecmodel": 74, "vectors": [74, 85], "windows": [74, 85, 95], "numpartit": [74, 85], "partit": [74, 85, 193], "mincount": [74, 85, 137], "appear": [74, 85, 115, 137], "divid": [74, 85], "1000": [74, 85, 92, 109], "stepsiz": [74, 85], "optim": [74, 81, 82, 85, 110, 112, 124, 131], "025": [74, 85], "maxit": [74, 85], "estim": [74, 85, 143, 158, 167, 176, 186, 207], "distribut": [74, 85], "composition": [74, 85], "sherlockholm": [74, 85, 137, 213], "setvectors": [74, 85], "setwindows": [74, 85, 95], "setsteps": [74, 85], "initi": [74, 85, 137, 147, 164, 180, 193, 194, 196, 197, 203], "setnumpartit": [74, 85], "setmaxit": [74, 85], "numiter": [74, 85], "equal": [74, 85], "setse": [74, 85], "setmincount": [74, 85, 137], "doc2vec_gigaword_300": 74, "06222493574023247": [74, 85], "011579325422644615": [74, 85], "009919632226228714": [74, 85], "109361454844": [74, 85], "doc2vec_wiki": 74, "getvector": [74, 85], "e5embed": [75, 80, 135], "e5": 75, "weakli": 75, "tailor": [75, 78], "e5_smal": 75, "unilm": 75, "manner": [75, 95], "signal": [75, 76], "curat": 75, "ccpair": 75, "readili": 75, "strong": [75, 87, 88], "conduct": 75, "extens": [75, 183], "56": [75, 196], "beir": 75, "mteb": 75, "bm25": 75, "baselin": [75, 84, 129], "beat": 75, "exist": [75, 76, 115, 132, 137, 155, 157, 187], "elmoembed": 76, "elmo": 76, "billion": [76, 129, 131], "lookup": [76, 86, 89, 99, 139, 140], "setpoolinglay": 76, "word_emb": 76, "shape": 76, "batch_siz": 76, "max_length": 76, "lstm_outputs1": 76, "lstm": [76, 110], "lstm_outputs2": 76, "trainabl": 76, "tensor": 76, "poolinglay": 76, "contextu": [76, 128, 137], "characterist": 76, "syntax": 76, "vari": [76, 115], "across": [76, 129, 131], "linguist": [76, 151], "polysemi": 76, "intern": [76, 117, 118, 134, 137, 148, 151, 165, 169, 174, 180], "bilm": 76, "six": [76, 139, 140], "textual": [76, 78], "entail": 76, "expos": 76, "crucial": 76, "mix": [76, 116, 135, 168, 186], "semi": 76, "662458181381226e": 76, "2541114091873169": 76, "6275503039360046": 76, "5787073969841": 76, "19154725968837738": 76, "22998669743537903": 76, "2894386649131775": 76, "21524395048618": 76, "10400570929050446": 76, "12288510054349899": 76, "07056470215320587": 76, "246389418840": 76, "49932169914245605": 76, "12706467509269714": 76, "30969417095184326": 76, "2643227577209": 76, "8871506452560425": 76, "20039963722229004": 76, "0601330995559692": 76, "0348707810044": 76, "albert_embed": [77, 93], "bert_embed": [77, 93], "bert_sentence_embed": [77, 93], "bge_embed": [77, 93], "camembert_embed": [77, 93], "chunk_embed": [77, 93], "deberta_embed": [77, 93], "distil_bert_embed": [77, 93], "doc2vec": [77, 93], "e5_embed": [77, 93], "elmo_embed": [77, 93], "instructor_embed": [77, 93], "longformer_embed": [77, 93], "mpnet_embed": [77, 93], "roberta_embed": [77, 93], "roberta_sentence_embed": [77, 93], "universal_sentence_encod": [77, 93], "xlm_roberta_embed": [77, 93], "xlm_roberta_sentence_embed": [77, 93], "xlnet_embed": [77, 93], "instructorembed": 78, "instructor": 78, "finetun": [78, 79, 89], "scienc": [78, 95, 204], "financ": 78, "sota": [78, 89], "divers": [78, 84, 128, 129, 134, 204], "setinstruct": 78, "medicin": 78, "instructor_bas": 78, "summar": [78, 79, 95, 128, 129, 133, 134, 174], "embedd": 78, "hkunlp": 78, "togeth": 78, "explain": [78, 187, 203, 210, 212], "special": [78, 137, 151, 181, 208], "330": 78, "mixtur": 78, "66": [78, 111], "unseen": 78, "magnitud": [78, 139, 140], "suggest": [78, 129], "mitig": 78, "url": 78, "io": 78, "dynam": [78, 133], "scalar": 78, "degre": 78, "freedom": 78, "horava": 78, "lifshitz": 78, "graviti": 78, "longformerembed": 79, "iz": 79, "beltagi": 79, "matthew": 79, "arman": 79, "cohan": 79, "checkpoint": 79, "mlm": [79, 80], "096": 79, "longformer_base_4096": 79, "unabl": 79, "quadrat": 79, "linearli": 79, "easi": 79, "thousand": [79, 132], "drop": [79, 142], "motiv": 79, "global": 79, "text8": 79, "enwik8": 79, "wikihop": 79, "triviaqa": 79, "led": [79, 81, 82, 95], "arxiv": [79, 128], "found": [79, 86, 95, 139, 146, 153, 193, 210], "18792399764060974": [79, 81], "14591649174690247": [79, 81], "20547787845134735": [79, 81], "1468472778797": [79, 81], "22845706343650818": [79, 81], "18073144555091858": [79, 81], "09725798666477203": [79, 81], "0417917296290": [79, 81], "07037967443466187": [79, 81], "14801117777824402": [79, 81], "03603338822722435": [79, 81], "17893412709": [79, 81], "08734266459941864": [79, 81], "2486150562763214": [79, 81], "009067727252840996": [79, 81], "24408400058": [79, 81], "22409197688102722": [79, 81], "4312366545200348": [79, 81], "1401449590921402": [79, 81], "356410235166549": [79, 81], "mpnetembed": 80, "adopt": 80, "permut": [80, 89], "inherit": [80, 116, 135, 168, 186], "advantag": [80, 164], "all_mpnet_base_v2": 80, "neglect": [80, 89], "plm": 80, "doe": [80, 87, 95, 108, 132, 133, 162, 164, 191, 208, 211, 212], "full": [80, 89, 207], "thu": [80, 95], "suffer": [80, 89], "discrep": [80, 89], "avoid": [80, 126], "auxiliari": 80, "160gb": 80, "corpora": [80, 95, 99], "down": [80, 110, 207, 208], "stream": [80, 115], "experiment": [80, 95], "022502584": 80, "078291744": 80, "023030775": 80, "0051000593": 80, "080340415": 80, "039": 80, "041702367": 80, "0010974605": 80, "015534201": 80, "07092203": 80, "0017729357": 80, "04661": 80, "robertaembed": [81, 87], "robustli": [81, 82, 112], "yinhan": [81, 82], "myle": [81, 82, 87, 88], "ott": [81, 82, 87, 88], "naman": [81, 82, 87, 88], "goyal": [81, 82, 87, 88], "jingfei": [81, 82], "du": [81, 82, 97], "mandar": [81, 82], "joshi": [81, 82], "danqi": [81, 82], "omer": [81, 82], "levi": [81, 82], "mike": [81, 82], "lewi": [81, 82], "luke": [81, 82, 87, 88], "zettlemoy": [81, 82, 87, 88], "veselin": [81, 82, 87, 88], "stoyanov": [81, 82, 87, 88], "hyperparamet": [81, 82], "mini": [81, 82], "roberta_bas": 81, "bpe": 81, "signific": [81, 82, 87, 88, 95, 98, 131], "gain": [81, 82, 87, 88, 128, 132], "care": [81, 82, 148], "comparison": [81, 82, 84, 142], "privat": [81, 82, 181], "choic": [81, 82, 103], "impact": [81, 82], "replic": [81, 82, 128], "carefulli": [81, 82, 115], "undertrain": [81, 82], "exce": [81, 82, 115], "highlight": [81, 82], "previous": [81, 82, 95], "overlook": [81, 82], "report": [81, 82, 84, 128, 187, 203], "robertasentenceembed": 82, "sent_roberta_bas": 82, "embeddingssent": 83, "22093398869037628": 83, "25130119919776917": 83, "41810303926467896": 83, "380883991718": 83, "tfhub_us": 84, "loadsp": 84, "op": 84, "lingual": [84, 87, 88, 95, 97, 133], "accur": [84, 127, 128, 139], "trade": [84, 87, 88], "tend": 84, "With": [84, 89, 95], "minim": [84, 112, 133], "encourag": 84, "weat": 84, "bia": [84, 115], "freeli": 84, "04616805538535118": 84, "022307956591248512": 84, "044395286589860916": 84, "0016493503": 84, "setloadsp": 84, "word2vecapproach": 85, "word2vecmodel": 85, "word2vec_gigaword_300": 85, "word2vec_wiki": 85, "dictionari": [86, 95, 98, 103, 109, 111, 112, 113, 126, 139, 140, 187], "setstoragepath": [86, 99], "line": [86, 90, 99, 104, 115, 124, 126, 137, 190, 193, 196], "delimit": [86, 90, 92, 98, 103, 105, 109, 113, 126, 147, 165, 193, 196], "39658191506190343": 86, "630968081620067": 86, "5393722253731201": 86, "8428180123359783": 86, "were": [86, 110, 187, 203], "7535235923631415": 86, "9699218875629833": 86, "10397182122983872": 86, "11833962569383116": 86, "stress": 86, "0492683418305907": 86, "9415954572751959": 86, "47624463167525755": 86, "16790967216778263": 86, "induc": 86, "1535748762292387": 86, "33498936903209897": 86, "9235178224122094": 86, "1158772920395934": 86, "withcoveragecolumn": 86, "overallcoverag": 86, "writebuffers": 86, "dump": 86, "disk": [86, 207, 208], "storag": [86, 90, 99, 172, 180], "10000": 86, "readcaches": 86, "cach": [86, 128, 134, 135, 191], "random_embeddings_dim4": 86, "abov": [86, 92, 196], "setstorageref": 86, "glove_4d": 86, "setdimens": [86, 174], "patient": 86, "diagnos": 86, "diabet": 86, "9439099431037903": 86, "4707513153553009": 86, "806300163269043": 86, "16176554560661316": 86, "7966810464859009": 86, "5551124811172485": 86, "8861005902290344": 86, "28284206986427307": 86, "025029370561242104": 86, "35177749395370483": 86, "052506182342767715": 86, "1887107789516449": 86, "08617766946554184": 86, "8399239182472229": 86, "5395117998123169": 86, "7864698767662048": 86, "6599600911140442": 86, "16109347343444824": 86, "6041093468666077": 86, "8913561105728149": 86, "5955275893211365": 86, "01899011991918087": 86, "4397728443145752": 86, "8911281824111938": 86, "9840458631515503": 86, "7599489092826843": 86, "9417727589607239": 86, "8624503016471863": 86, "setwritebuffers": 86, "setreadcaches": 86, "glove_100d": [86, 110], "There": [86, 90, 92, 146, 205, 207, 208, 213], "conveni": 86, "coverag": [86, 171], "stat": 86, "whole": [86, 190], "570580005645752": 86, "44183000922203064": 86, "7010200023651123": 86, "417129993438720": 86, "542639970779419": 86, "4147599935531616": 86, "0321999788284302": 86, "4024400115013122": 86, "2708599865436554": 86, "04400600120425224": 86, "020260000601410866": 86, "17395000159": 86, "6191999912261963": 86, "14650000631809235": 86, "08592499792575836": 86, "2629800140857": 86, "3397899866104126": 86, "20940999686717987": 86, "46347999572753906": 86, "6479200124740": 86, "embeddings_col": 86, "coverageresult": 86, "coverateresult": 86, "wordsoverallcoverag": 86, "resultdf": 86, "output_col": 86, "wordscoverag": 86, "cov_embed": 86, "loadstorag": [86, 99], "storage_ref": [86, 99], "xlmrobertaembed": 87, "alexi": [87, 88], "conneau": [87, 88], "kartikai": [87, 88], "khandelw": [87, 88], "vishrav": [87, 88], "chaudhari": [87, 88], "guillaum": [87, 88], "wenzek": [87, 88], "francisco": [87, 88, 95], "guzman": 87, "edouard": [87, 88], "grave": [87, 88], "5tb": [87, 88], "commoncrawl": [87, 88], "xlm_roberta_bas": 87, "abl": [87, 132, 134, 187, 206], "correct": [87, 137, 139, 140, 151], "terabyt": [87, 88], "r": [87, 88, 95], "mbert": [87, 88], "xnli": [87, 88], "mlqa": [87, 88], "particularli": [87, 88, 128], "swahili": [87, 88, 132], "urdu": [87, 88, 132], "capac": [87, 88, 129, 132], "dilut": [87, 88], "sacrif": [87, 88], "ri": [87, 88], "05969233065843582": 87, "030789051204919815": 87, "04443822056055069": 87, "09564960747": 87, "038839809596538544": 87, "011712731793522835": 87, "019954433664679527": 87, "0667808502": 87, "03952755779027939": 87, "03455188870429993": 87, "019103847444057465": 87, "04311436787": 87, "09579929709434509": 87, "02494969218969345": 87, "014753809198737144": 87, "10259044915": 87, "004710011184215546": 87, "022148698568344116": 87, "011723337695002556": 87, "013356896": 87, "xlmrobertasentenceembed": 88, "guzm\u00e3": 88, "sent_xlm_roberta_bas": 88, "xlnetembed": 89, "autoregress": 89, "xl": 89, "exhibit": 89, "involv": [89, 124], "rank": [89, 135, 137], "xlnet_large_cas": 89, "xlnet_base_cas": 89, "zihangdai": 89, "denois": [89, 128], "autoencod": [89, 128], "corrupt": [89, 128], "pro": 89, "con": 89, "enabl": [89, 110, 131, 135, 139, 180], "maxim": [89, 137], "likelihood": [89, 115], "overcom": 89, "formul": 89, "furthermor": 89, "integr": [89, 95, 114, 133, 187, 203, 205], "idea": 89, "6287205219268799": 89, "4865287244319916": 89, "186111718416214": 89, "234187275171279": 89, "1967450380325317": 89, "2746637463569641": 89, "9481253027915955": 89, "3431355059146881": 89, "0777631998062134": 89, "092679977416992": 89, "5331977605819702": 89, "11190271377563": 89, "8349916934967041": 89, "45627787709236145": 89, "7890847325325012": 89, "028069257736": 89, "134845569729805": 89, "11672890186309814": 89, "4945235550403595": 89, "66587203741073": 89, "entityrul": 90, "entityrulerapproach": 90, "exact": [90, 99, 104, 115], "definit": [90, 112, 193], "json": [90, 115, 165, 187, 198], "jsonl": 90, "setpatternsresourc": 90, "might": [90, 110, 151, 212], "rule": [90, 100, 103, 126, 146, 148, 173], "w": [90, 93, 103, 109, 113, 146, 148, 180], "winterfel": 90, "jon": 90, "snow": [90, 111, 137], "stark": 90, "eddard": 90, "patternsresourc": 90, "usestorag": 90, "rocksdb": 90, "lord": 90, "29": [90, 111, 151, 196, 198], "38": [90, 198], "setusestorag": 90, "setsentencematch": 90, "setalphabetresourc": 90, "alphabet": [90, 113], "plain": [90, 213], "entityrulermodel": 90, "entity_rul": [91, 93], "graphextract": [92, 157], "graph": [92, 110, 133, 137, 143, 157], "nerdlmodel": [92, 108, 109, 110, 111, 187, 191, 203], "store": [92, 117, 118, 165, 169, 174, 185, 190, 198, 204], "node": 92, "relev": [92, 95, 115], "taken": 92, "implicitli": 92, "setmergeent": 92, "setdependencyparsermodel": 92, "settypeddependencyparsermodel": 92, "setrelationshiptyp": 92, "public": [92, 191, 207], "relationshiptyp": 92, "entitytyp": 92, "explodeent": 92, "roottoken": 92, "travers": 92, "maxsentences": 92, "minsentences": 92, "mergeent": 92, "merg": [92, 99, 104], "neighbor": [92, 135], "includeedg": 92, "symbol": [92, 137, 151], "posmodel": 92, "coordin": [92, 123], "remoteloc": 92, "graphfinish": [92, 157], "rdf": [92, 157], "nertagg": [92, 109, 110, 111], "morn": [92, 157], "flight": [92, 157], "denver": [92, 157], "18": [92, 100, 102, 105, 108, 111, 162, 179, 190, 206], "path1": 92, "setentitytyp": 92, "setexplodeent": 92, "setroottoken": 92, "setmaxsentences": 92, "setminsentences": 92, "setmergeentitiesiobformat": 92, "iob": [92, 108, 109, 110], "iob2": [92, 108], "setincludeedg": 92, "setdelimit": [92, 103, 105], "setposmodel": 92, "class": [93, 172, 177, 184, 195, 202, 203, 211, 213], "classifier_dl": [93, 180], "er": [93, 180], "keyword_extract": [93, 180], "yake_keyword_extract": [93, 94], "ld_dl": [93, 180], "language_detector_dl": [93, 96], "matcher": [93, 180], "big_text_match": [93, 101], "date_match": [93, 101], "multi_date_match": [93, 101], "regex_match": [93, 101], "text_match": [93, 101], "ner_approach": [93, 106], "ner_convert": [93, 106], "ner_crf": [93, 106], "ner_dl": [93, 106], "ner_overwrit": [93, 106], "openai": [93, 129, 180], "openai_complet": [93, 114], "openai_embed": [93, 114], "param": [93, 109, 116, 135, 168, 169, 174, 180, 185, 186], "sentence_detector_dl": [93, 122, 133], "sentiment_detector": [93, 125], "vivekn_senti": [93, 125], "seq2seq": [93, 180], "bart_transform": [93, 130], "gpt2_transform": [93, 130], "llama2_transform": [93, 130], "m2m100_transform": [93, 130], "marian_transform": [93, 130], "t5_transform": [93, 130], "spell_check": [93, 180], "context_spell_check": [93, 138], "norvig_sweet": [93, 138], "symmetric_delet": [93, 138], "chunk_token": [93, 145], "recursive_token": [93, 145], "regex_token": [93, 145], "word_segment": [93, 150], "chunk2_doc": [93, 180], "date2_chunk": [93, 180], "document_character_text_splitt": [93, 180], "document_norm": [93, 180], "document_token_splitt": [93, 180], "graph_extract": [93, 180], "lemmat": [93, 126, 142, 164, 166, 180], "n_gram_gener": [93, 180], "stemmer": [93, 142, 180], "stop_words_clean": [93, 180], "token2_chunk": [93, 180], "yakekeywordextract": 95, "yake": 95, "independ": [95, 139, 140, 146], "grow": 95, "autom": 95, "adequ": 95, "emerg": [95, 128, 134], "tool": [95, 115, 128], "nor": 95, "thesauri": 95, "neither": 95, "written": [95, 133], "plethora": 95, "situat": [95, 124], "access": 95, "restrict": 95, "therefor": [95, 211], "sent": 95, "boundari": [95, 123, 124, 127, 148, 151], "detector": [95, 100, 126], "section": [95, 154, 163, 203, 205, 211], "tweakabl": 95, "upper": 95, "bound": [95, 123, 124, 127], "minngram": 95, "maxngram": 95, "occurr": [95, 173], "nkeyword": 95, "stopword": [95, 111, 142], "stop": [95, 109, 115, 134, 142], "campo": 95, "mangaravit": 95, "pasquali": 95, "jatowt": 95, "jorg": 95, "nune": 95, "journal": [95, 151], "elsevi": 95, "vol": 95, "509": 95, "pp": [95, 151], "257": 95, "289": 95, "turn": [95, 166, 207], "fly": 95, "demand": 95, "within": [95, 121, 127, 128, 129, 148, 153], "resort": 95, "solut": 95, "articl": [95, 137], "rest": [95, 108], "merit": 95, "ten": 95, "carri": 95, "twenti": 95, "setcontextchar": [95, 148], "setminngram": 95, "setnkeyword": 95, "acquir": 95, "kaggl": 95, "platform": [95, 115, 187, 205], "host": 95, "transact": 95, "somewhat": 95, "vagu": 95, "cloud": 95, "confer": 95, "week": [95, 100, 102, 144], "announc": [95, 111], "earli": 95, "tomorrow": [95, 100, 102], "phone": 95, "founder": 95, "ceo": 95, "anthoni": 95, "goldbloom": 95, "declin": 95, "deni": 95, "acquisit": 95, "happen": 95, "rumor": 95, "scientist": 95, "ben": 95, "hamner": 95, "2010": 95, "servic": [95, 115, 133], "got": 95, "even": [95, 134], "few": [95, 148, 196, 213], "competitor": 95, "drivendata": 95, "topcod": 95, "hackerrank": 95, "stai": 95, "ahead": 95, "nich": 95, "home": [95, 180], "bui": [95, 194], "commun": [95, 131], "mindshar": 95, "too": [95, 126, 206], "plenti": 95, "bit": [95, 124, 212], "histori": [95, 124, 137], "earlier": 95, "month": [95, 100, 102, 196, 213], "team": [95, 133, 187, 203], "around": 95, "youtub": 95, "technologi": 95, "interest": 95, "kernel": 95, "On": [95, 129, 133], "analyz": [95, 127], "compani": [95, 133], "script": [95, 132], "centric": [95, 132], "job": [95, 153], "board": [95, 121, 196], "unclear": 95, "accord": [95, 131, 137, 193], "crunchbas": 95, "pitchbook": 95, "launch": 95, "investor": 95, "ventur": 95, "sv": [95, 132], "angel": 95, "levchin": 95, "naravik": 95, "chie": 95, "economist": 95, "hal": 95, "varian": 95, "khosla": 95, "yuri": 95, "milner": 95, "resulttupl": 95, "ascend": 95, "orderbi": 95, "32051516486864573": 95, "37786450577630676": 95, "39922830978423146": 95, "40224744669493756": 95, "41584827825302534": 95, "setmaxngram": 95, "setstopword": [95, 111, 142], "getstopword": 95, "loaddefaultstopword": [95, 142], "danish": [95, 132, 142], "dutch": [95, 132, 142], "finnish": [95, 132, 142], "german": [95, 132, 142, 193, 213], "hungarian": [95, 132, 142], "italian": [95, 115, 132, 137, 142], "norwegian": [95, 132, 142], "portugues": [95, 132, 142], "russian": [95, 132, 142], "spanish": [95, 132, 142], "swedish": [95, 132, 142], "turkish": [95, 132, 142], "languagedetectordl": 97, "ld": 97, "identif": 97, "rnn": 97, "tatoeba": 97, "140": 97, "wiki": 97, "languagedetector": 97, "ld_wiki_tatoeba_cnn_21": 97, "open": [97, 131, 132, 148, 153, 154, 155, 163, 166, 204], "advanc": [97, 153, 166], "scala": [97, 116, 135, 167, 168, 176, 182, 186], "program": 97, "biblioth\u00e8qu": 97, "traitement": 97, "pour": 97, "le": [97, 133], "avanc\u00e9": 97, "langag": 97, "naturel": 97, "programm": 97, "ist": 97, "ein": 97, "textverarbeitungsbibliothek": 97, "f\u00fcr": 97, "fortgeschritten": 97, "nat\u00fcrlich": 97, "sprachverarbeitung": 97, "die": 97, "programmiersprachen": 97, "und": 97, "lemma": [98, 126, 162, 190, 194, 208, 211, 212], "predefin": [98, 99, 103, 104, 126], "setdictionari": [98, 126, 139, 140], "lemmatizermodel": 98, "lemmas_smal": [98, 126], "setformcol": 98, "correspend": 98, "formcol": [98, 194], "setlemmacol": 98, "fromlemma": 98, "key_delimit": 98, "value_delimit": 98, "lemma_antbnc": 98, "bigtextmatch": [99, 104], "textmatch": [99, 104, 144], "externalresourc": [99, 104, 178], "mergeoverlap": [99, 104], "tokenizermodel": [99, 148], "trie": 99, "dolor": [99, 104], "magna": [99, 104], "aliqua": [99, 104], "sit": [99, 104], "laborum": [99, 104], "hello": [99, 104, 144, 198], "entityextractor": [99, 104, 144], "extractor": [99, 104, 144], "59": [99, 100, 102, 104], "setent": [99, 104, 107, 144], "setmergeoverlap": [99, 104], "settoken": 99, "tokenizer_model": 99, "bigtextmatchermodel": 99, "btm": 99, "textmatchermodel": [99, 104], "searchtri": 99, "datematcherutil": 100, "setinputformat": [100, 165], "setoutputformat": [100, 102], "desir": [100, 102], "yyyi": [100, 102], "mm": [100, 102, 151], "dd": [100, 102, 103], "Not": [100, 110, 164], "setreadmonthfirst": 100, "juli": 100, "5th": 100, "2015": 100, "07": 100, "05": 100, "setdefaultdaywhenmiss": 100, "setanchordateyear": [100, 102], "anchor": [100, 102], "year": [100, 102, 129, 131, 144, 196], "setanchordatemonth": [100, 102], "januari": [100, 102], "setanchordatedai": [100, 102], "setrelaxedfactorystrategi": 100, "matchstrategi": [100, 173], "match_first": [100, 103, 173], "relax": 100, "exhaust": 100, "1978": [100, 102], "28": [100, 102, 108, 162, 179, 190, 198, 206], "1984": [100, 102], "04": [100, 102], "02": [100, 102], "1980": [100, 102], "79": [100, 102], "31st": [100, 102], "april": [100, 102], "2008": [100, 102], "fri": [100, 102], "1997": [100, 102], "jan": [100, 102], "sun": [100, 102], "1st": [100, 102], "thursdai": [100, 102], "wednesdai": [100, 102], "todai": [100, 102, 198], "yesterdai": [100, 102], "0600h": [100, 102], "06": [100, 102], "00": [100, 102], "6pm": [100, 102], "23": [100, 102, 103, 111, 121, 196, 197, 198, 213], "1988": [100, 102], "31": [100, 102, 103, 111, 121, 196], "dateformat": [100, 102], "readmonthfirst": [100, 102], "defaultdaywhenmiss": [100, 102], "anchordateyear": [100, 102], "anchordatemonth": [100, 102], "anchordatedai": [100, 102], "15": [100, 198], "saw": 102, "visit": [102, 115], "57": [102, 111], "65": [102, 111], "regexmatch": 103, "d": [103, 113, 148, 205], "1970": 103, "setrul": 103, "setexternalrul": 103, "match_al": [103, 173], "match_complet": [103, 173], "externalrul": 103, "ceremoni": 103, "setstrategi": 103, "71": 103, "short_dat": 103, "regexmatchermodel": 103, "regardless": 104, "entityvalu": 104, "buildfromtoken": 104, "27": [104, 121, 123, 196], "48": [104, 151, 198], "setentityvalu": 104, "setbuildfromtoken": 104, "null": 105, "empti": [105, 135, 153], "enablecumul": 105, "join": [105, 121, 165, 196], "setenablecumul": 105, "nerapproach": 107, "recogn": [107, 108, 109, 110, 111, 112, 137], "setminepoch": [107, 109], "setrandomse": [107, 110, 117, 133], "getlabelcolumn": [107, 143], "friendli": [108, 115, 133], "whitelist": [108, 146], "setwhitelist": [108, 146], "outsid": 108, "prefix": [108, 146, 148, 187, 203], "preserveposit": [108, 147, 166], "org": [108, 109, 110, 111, 128, 151, 162, 179, 180, 190, 193, 204, 213], "14": [108, 121, 149, 162, 179, 190, 196], "ekeu": [108, 109, 110, 162, 179, 190], "36": [108, 121, 162, 179, 190, 196, 198], "baghdad": [108, 109, 110, 162, 179, 190], "37": [108, 162, 179, 190], "setpreserveposit": [108, 147, 166], "setnerhasnoschema": 108, "nercrf": 109, "nercrfapproach": [109, 110], "nercrfmodel": [109, 110], "crf": [109, 110], "2003": [109, 110, 151, 193, 213], "exclud": [109, 110], "setexternalfeatur": 109, "minepoch": [109, 110], "l2": 109, "c0": 109, "decai": [109, 110], "gradient": 109, "2250000": 109, "lossep": 109, "ep": 109, "minw": 109, "includeconfid": [109, 110], "confid": [109, 110, 112], "externalfeatur": 109, "nerdlapproach": [109, 110, 193, 213], "trainingdata": [109, 110, 124, 139, 140, 193], "readdataset": [109, 110, 121, 151, 193, 194, 196, 197, 198, 213], "conll2003": [109, 110, 193, 213], "eng": [109, 110, 193, 213], "setl2": 109, "l2valu": 109, "setc0": 109, "c0valu": 109, "setlossep": 109, "setminw": 109, "setincludeconfid": [109, 110], "verbosevalu": 109, "prerequisit": [109, 110, 111, 207], "nerdl": 110, "char": [110, 113, 124], "bilstm": 110, "tagger": [110, 196, 213], "50": [110, 111, 121, 128, 129, 131, 132, 198], "real": [110, 180, 187, 203], "rage": 110, "graphfold": [110, 137], "usecontrib": 110, "contrib": 110, "cell": [110, 165], "slightli": [110, 124], "includeallconfidencescor": 110, "enablememoryoptim": 110, "slow": 110, "usebestmodel": 110, "bestmodelmetr": 110, "micro": 110, "macro": 110, "setgraphfold": [110, 137, 143], "setusecontrib": 110, "setpo": 110, "setincludeallconfidencescor": 110, "setenablememoryoptim": 110, "setusebestmodel": 110, "setbestmodelmetr": 110, "nermodel": 110, "neroverwrit": 111, "setnewresult": 111, "nerword": 111, "overwritten": 111, "newnerent": 111, "lab": 111, "42": [111, 121], "45": [111, 121, 196, 198], "47": [111, 196, 198], "ner_overwritten": 111, "setnerword": 111, "setnewnerent": 111, "cardin": 111, "setreplaceent": 111, "rw": 111, "zeroshotnermodel": 112, "zeroshotn": 112, "zer_shot_n": 112, "entitydefinit": 112, "citi": 112, "town": 112, "predictionthreshold": 112, "01f": 112, "ignoreent": 112, "zero_shot_n": 112, "setentitydefinit": 112, "hellen": 112, "5328949": 112, "9360068": 112, "83294415": 112, "45366877": 112, "setpredictionthreshold": 112, "zero_shot_ner_roberta": 112, "shortcut": 112, "stem": [113, 141, 162, 190, 211, 212], "henc": 113, "pl": [113, 132], "slangdictionari": 113, "slang": 113, "minlength": [113, 123, 124, 147, 148], "maxlength": [113, 123, 124, 147, 148], "setcleanuppattern": 113, "punctuat": [113, 123], "alphanumer": 113, "za": 113, "z": [113, 148], "brother": 113, "dont": [113, 127], "setslangdictionari": 113, "setminlength": [113, 123, 124, 147, 148], "setmaxlength": [113, 123, 124, 147, 148], "normalizermodel": 113, "openaicomplet": 115, "request": 115, "complet": [115, 187, 204, 207], "executor": 115, "doc": [115, 137, 197, 213], "suffix": [115, 146, 148, 207], "insert": [115, 139, 140, 207], "maxtoken": 115, "nucleu": 115, "mass": 115, "numberofcomplet": 115, "prompt": 115, "logprob": 115, "echo": 115, "presencepenalti": 115, "penal": 115, "topic": 115, "frequencypenalti": 115, "frequenc": [115, 127, 137, 139, 140, 151], "verbatim": 115, "bestof": 115, "best_of": 115, "server": [115, 212], "side": [115, 151], "logitbia": 115, "abus": [115, 116], "pleasur": 115, "dine": 115, "fiorita": 115, "truli": 115, "delight": 115, "menu": 115, "boast": 115, "wonder": 115, "classic": 115, "dish": 115, "exquisit": 115, "prepar": [115, 152, 154, 160, 163], "staff": [115, 126], "227": 115, "barbecu": 115, "joe": 115, "dinner": 115, "amaz": 115, "pull": 115, "pork": 115, "smoke": 115, "turkei": 115, "brisket": 115, "rib": 115, "sandwich": 115, "opt": 115, "172": 115, "overallr": 115, "reviewbodi": 115, "enjoi": 115, "meal": 115, "restaur": [115, 126], "flavour": 115, "beautifulli": 115, "setmodel": [115, 116, 124], "setsuffix": [115, 146], "setmaxtoken": 115, "plu": [115, 129], "max_token": 115, "cannot": 115, "settemperatur": [115, 128, 129, 131, 132, 133, 134, 174], "determinist": 115, "alter": 115, "settopp": [115, 128, 129, 131, 132, 133, 134, 174], "compris": 115, "setnumberofcomplet": 115, "consum": 115, "quota": 115, "ensur": [115, 182], "setlogprob": 115, "respons": [115, 124, 131], "setecho": 115, "setstop": 115, "setpresencepenalti": 115, "setfrequencypenalti": 115, "setbestof": 115, "control": [115, 128, 129, 131, 132, 133, 134, 135, 137, 174], "candid": [115, 137, 139, 140, 148], "setlogitbia": 115, "mathemat": 115, "ban": 115, "exclus": 115, "50256": 115, "prevent": 115, "endoftext": 115, "setus": [115, 116], "openaiembed": 116, "py": [116, 135, 167, 168, 176, 182, 186], "ins": [116, 135, 168, 186], "uid": [116, 135, 168, 186], "classifierencod": 117, "attach": [117, 118, 169, 174, 185, 187], "evaluationdlparam": 118, "setevaluationlogextend": 118, "setenableoutputlog": [118, 187, 203], "setoutputlogspath": [118, 124, 187, 203], "assum": 118, "perceptronapproach": [121, 196, 213], "member": [121, 190], "datasetpath": 121, "pierr": [121, 196], "vinken": [121, 196], "34": [121, 196, 198], "md": [121, 196], "vb": [121, 193, 196, 213], "41": [121, 123, 196, 198], "43": [121, 123, 196, 198], "dt": [121, 196, 197, 213], "49": [121, 196], "poscol": [121, 151, 193], "niter": [121, 151], "anc": [121, 196, 213], "trainingperceptrondf": 121, "trainedpo": 121, "setposcolumn": [121, 151], "cd": [121, 193, 196], "setiter": 121, "getniter": [121, 151], "pos_anc": 121, "25": [121, 123, 196, 198], "33": [121, 198], "sentencedetectorparam": 123, "ii": 123, "abbrevi": 123, "period": 123, "geo": 123, "1026": 123, "253": 123, "553": 123, "ellipsi": 123, "quotat": 123, "mark": [123, 124, 151], "exclam": 123, "breaker": 123, "pragmaticcontentformatt": 123, "custombound": [123, 124], "setcustombound": [123, 124], "usecustomboundsonli": [123, 124], "explodesent": [123, 124, 193, 194], "useabbrevi": 123, "explicitli": [123, 124, 142, 179, 207], "customboundsstrategi": 123, "prepend": [123, 153], "break": 123, "append": [123, 137, 207], "parallel": [123, 124, 162, 193, 211], "splitlength": [123, 124], "forcibli": [123, 124], "99999": [123, 124, 148], "detectlist": 123, "nhow": 123, "setcustomboundsstrategi": 123, "setuseabbrevi": 123, "setdetectlist": 123, "setusecustomboundsonli": [123, 124], "setexplodesent": [123, 124], "setsplitlength": [123, 124], "sentencedetectordl": [124, 133], "sentencedetectordlapproach": 124, "sentencedetectordlmodel": [124, 133], "modelarchitectur": 124, "impossiblepenultim": 124, "imposs": [124, 151], "penultim": 124, "epochsnumb": 124, "eo": 124, "stefan": 124, "schweter": 124, "sajawel": 124, "ahm": 124, "cover": [124, 128, 132, 134, 151], "broken": 124, "moder": 124, "lack": 124, "easier": [124, 156, 209, 213], "polit": 124, "successor": 124, "great": 124, "heritag": 124, "bequeath": 124, "nelson": 124, "mandela": 124, "setepochsnumb": 124, "model_architectur": 124, "validation_split": 124, "epochs_numb": 124, "output_logs_path": 124, "setimpossiblepenultim": 124, "impossible_penultim": 124, "sentencedl": 124, "sentencesdl": 124, "helen": 124, "total": [124, 151], "peopl": 124, "sentimentdetector": 126, "els": 126, "viveknsentimentapproach": [126, 127], "cool": 126, "superb": 126, "uninspir": 126, "sentimentscor": 126, "nice": [126, 187, 203], "entri": [126, 154, 163, 191], "sttr": 126, "sentimentdetectormodel": 126, "sda": [126, 127], "pragmat": 126, "viveknsenti": 127, "analys": 127, "vivek": 127, "narayanan": 127, "give": 127, "transit": [127, 137], "sentimentcol": 127, "prunecorpu": 127, "unfrequ": 127, "scenario": 127, "scope": 127, "naiv": 127, "bay": 127, "vivekn": 127, "setsentimentcol": 127, "train_senti": 127, "result_senti": 127, "finish": [127, 135, 155, 157, 161, 164, 180], "final_senti": 127, "cast": [127, 152], "horribl": 127, "go": [127, 207], "again": [127, 146], "anyon": 127, "protagonist": 127, "music": 127, "setprunecorpu": 127, "viveknsentimentmodel": 127, "sentiment_vivekn": 127, "barttransform": 128, "handl": [128, 177, 195], "captur": [128, 135], "past": [128, 133, 191], "incorpor": 128, "versatil": 128, "valuabl": 128, "summari": [128, 129, 131, 132, 134], "distilbart_xsum_12_6": 128, "barttestspec": 128, "cumul": [128, 129, 131, 132, 133, 134, 174], "ignoretokenid": [128, 129, 131, 132, 134], "usecach": 128, "ab": 128, "1910": 128, "13461": 128, "pytorch": [128, 132], "fairseq": [128, 132], "arbitrari": 128, "nois": 128, "reconstruct": [128, 166], "tranform": 128, "randomli": 128, "dialogu": [128, 131], "roug": 128, "bleu": [128, 132], "ablat": 128, "influenc": [128, 137], "setmaxoutputlength": [128, 129, 131, 132, 133, 134, 174], "200": [128, 134], "rich": [128, 134], "rise": [128, 134], "methodologi": [128, 134], "landscap": [128, 134], "unifi": [128, 134], "systemat": [128, 134], "dozen": [128, 134], "insight": [128, 134], "coloss": [128, 134], "facilit": [128, 134], "setignoretokenid": [128, 129, 131, 132, 133, 134], "setminoutputlength": [128, 129, 131, 132, 134, 174], "settopk": [128, 129, 131, 132, 133, 134, 174], "setrepetitionpenalti": [128, 129, 131, 132, 133, 134, 174], "ctrl": [128, 129, 131, 132, 133, 134, 174], "setnorepeatngrams": [128, 129, 131, 132, 133, 134, 174], "setcach": 128, "use_cach": 128, "gpt2transform": 129, "caus": [129, 148], "goal": [129, 151], "direct": [129, 132], "10x": 129, "synthet": 129, "unpreced": 129, "prime": 129, "lengthi": 129, "benefit": 129, "suffici": 129, "learner": 129, "typic": 129, "taskspecif": 129, "webpag": [129, 204], "webtext": 129, "coqa": 129, "exceed": 129, "127": 129, "fashion": [129, 135], "5b": 129, "underfit": 129, "reflect": [129, 132], "paragraph": [129, 137], "promis": 129, "leonardo": [129, 131], "1776": [129, 131], "came": [129, 131], "kingdom": [129, 131], "llama2transform": 131, "llama": 131, "chat": 131, "llm": 131, "7b": 131, "70b": 131, "13b": 131, "4k": 131, "excit": 131, "reinforc": 131, "feedback": 131, "rlhf": 131, "safeti": 131, "chatgpt": 131, "llama2": 131, "llam2": 131, "facebookresearch": 131, "suitabl": 131, "substitut": 131, "close": 131, "llama_2_7b_chat_hf_int4": 131, "m2m100transform": 132, "m2m100": 132, "seq": 132, "900": 132, "m2m100_418m": 132, "srclang": 132, "tgtlang": 132, "afrikaan": 132, "af": 132, "amhar": 132, "arab": 132, "asturian": 132, "ast": 132, "azerbaijani": 132, "az": 132, "bashkir": 132, "ba": 132, "belarusian": 132, "bulgarian": 132, "bg": 132, "bengali": 132, "breton": 132, "br": 132, "bosnian": 132, "catalan": 132, "valencian": 132, "ca": 132, "cebuano": 132, "ceb": 132, "czech": 132, "welsh": 132, "cy": 132, "da": 132, "greeek": 132, "el": 132, "estonian": 132, "persian": 132, "fa": 132, "fulah": 132, "ff": 132, "fi": 132, "western": 132, "frisian": 132, "fy": 132, "irish": 132, "ga": 132, "gaelic": 132, "scottish": 132, "gd": 132, "galician": 132, "gl": 132, "gujarati": 132, "gu": 132, "hausa": 132, "hebrew": 132, "hindi": 132, "croatian": 132, "hr": 132, "haitian": 132, "creol": 132, "ht": 132, "armenian": 132, "hy": 132, "indonesian": 132, "igbo": 132, "ig": 132, "iloko": 132, "ilo": 132, "iceland": 132, "japanes": [132, 151], "ja": 132, "javanes": 132, "jv": 132, "georgian": 132, "ka": 132, "kazakh": 132, "kk": 132, "central": [132, 204], "khmer": 132, "km": 132, "kannada": 132, "kn": 132, "korean": [132, 151], "ko": 132, "luxembourgish": 132, "letzeburgesch": 132, "lb": 132, "ganda": 132, "lg": 132, "lingala": 132, "ln": 132, "lao": 132, "lo": 132, "lithuanian": 132, "lt": 132, "latvian": 132, "lv": 132, "malagasi": 132, "mg": 132, "macedonian": 132, "mk": 132, "malayalam": 132, "mongolian": 132, "mn": 132, "marathi": 132, "malai": 132, "burmes": 132, "nepali": 132, "ne": 132, "flemish": 132, "nl": 132, "northern": 132, "sotho": 132, "occitan": 132, "post": 132, "oc": 132, "oriya": 132, "panjabi": 132, "punjabi": 132, "pa": [132, 197, 213], "polish": 132, "pushto": 132, "pashto": 132, "romanian": 132, "moldavian": 132, "moldovan": 132, "ro": 132, "ru": 132, "sindhi": 132, "sd": 132, "sinhala": 132, "sinhales": 132, "si": 132, "slovak": 132, "sk": 132, "slovenian": 132, "sl": 132, "somali": 132, "albanian": 132, "sq": 132, "serbian": 132, "sr": 132, "swati": 132, "ss": 132, "sundanes": 132, "su": 132, "sw": 132, "tamil": 132, "ta": 132, "thai": 132, "th": 132, "tagalog": 132, "tl": 132, "tswana": 132, "tn": 132, "tr": 132, "ukrainian": 132, "uk": 132, "ur": 132, "uzbek": 132, "uz": 132, "vietnames": 132, "vi": 132, "wolof": 132, "wo": 132, "xhosa": 132, "xh": 132, "yiddish": 132, "yi": 132, "yoruba": 132, "yo": 132, "chines": [132, 151], "zh": [132, 151], "zulu": 132, "zu": 132, "beyond": 132, "massiv": 132, "worldwid": 132, "mine": 132, "spars": 132, "focu": 132, "wmt": 132, "reproduc": [132, 187, 203, 204], "m2m": 132, "setsrclang": 132, "settgtlang": 132, "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": 132, "life": 132, "chocol": 132, "mariantransform": 133, "marian": 133, "free": 133, "mainli": 133, "academ": 133, "notabl": 133, "edinburgh": 133, "adam": 133, "mickiewicz": 133, "pozna\u0144": 133, "commerci": 133, "contributor": 133, "mariannmt": 133, "engin": [133, 144], "behind": 133, "deploi": [133, 204], "opus_mt_en_fr": 133, "langid": 133, "maxinputlength": 133, "differenti": 133, "toolkit": 133, "setmaxinputlength": 133, "capit": [133, 137], "franc": 133, "quell": 133, "capital": 133, "devrait": 133, "savoir": 133, "fran\u00e7ai": 133, "setlangid": 133, "t5transform": 134, "t5": 134, "reconsid": 134, "hyper": 134, "t5_small": 134, "setstopateo": 134, "encount": 134, "setmaxnewtoken": 134, "setusecach": 134, "documentsimilarityrank": 135, "documentsimilarityrankerapproach": 135, "lsh": 135, "lib": 135, "approxim": 135, "aim": 135, "ranker": 135, "documentsimilarityrankermodel": 135, "doc_similarity_rank": 135, "enablecach": 135, "rdd": 135, "similaritymethod": 135, "neighbour": 135, "brp": 135, "bucket": 135, "euclidean": 135, "numberofneighbour": 135, "bucketlength": 135, "hash": 135, "numhasht": 135, "visibledist": 135, "identityrank": 135, "ident": 135, "debug": 135, "setsimilaritymethod": 135, "setnumberofneighbour": 135, "setbucketlength": 135, "setnumhasht": 135, "setvisibledist": 135, "setidentityrank": 135, "document_similarity_ranker_finish": 135, "documentsimilarityrankerfinish": 135, "finished_doc_similarity_rankings_id": 135, "finished_doc_similarity_rankings_neighbor": 135, "setextractnearestneighbor": 135, "docsimrankerpipelin": 135, "1510101612": 135, "1634839239": 135, "12448559591306324": 135, "612640902": 135, "1274183715": 135, "1220122862046063": 135, "1320876223": 135, "1293373212": 135, "17848855164122393": 135, "1548374770": 135, "1719102856": 135, "23297156732534166": 135, "visibl": 135, "inclus": 135, "asretriev": 135, "rag": 135, "extractnearestneighbor": 135, "getinputcol": [135, 143, 155, 156, 169], "getoutputcol": [135, 152, 154, 155, 156, 160, 163, 169], "document_similarity_rank": 136, "contextspellcheck": 137, "contextspellcheckerapproach": [137, 139, 140], "noisi": 137, "spell": [137, 138, 139, 140, 162, 166, 210, 211, 212], "contextspellcheckermodel": [137, 139, 140], "surround": [137, 165], "edit": [137, 139, 140], "subword": 137, "checker": [137, 139, 140, 210], "languagemodelclass": 137, "lm": 137, "wordmaxdist": 137, "maxcandid": 137, "casestrategi": 137, "uppercas": 137, "errorthreshold": 137, "perplex": 137, "nlm": 137, "initialr": 137, "finalr": 137, "validationfract": 137, "datapoint": 137, "min": 137, "vocab": 137, "compoundcount": 137, "compound": 137, "classcount": 137, "tradeoff": 137, "weighteddistpath": 137, "levenshtein": [137, 139, 140], "maxwindowlen": 137, "rememb": 137, "maxsentlen": 137, "norvigsweetingapproach": [137, 139, 140, 213], "symmetricdeleteapproach": [137, 139, 140, 213], "depth": [137, 210], "explan": [137, 210], "awar": 137, "sherlock": 137, "spellcheck": [137, 139, 140], "setwordmaxdist": 137, "setepoch": 137, "setlanguagemodelclass": 137, "1650": 137, "addvocabclass": 137, "_name_": 137, "extra": [137, 139, 207], "dist": 137, "setmaxcandid": 137, "setcasestrategi": 137, "seterrorthreshold": 137, "setinitialr": 137, "setfinalr": 137, "setvalidationfract": 137, "fraction": 137, "setcompoundcount": 137, "setclasscount": 137, "settradeoff": 137, "alpha": 137, "setweighteddistpath": 137, "setmaxwindowlen": 137, "setmaxsentlen": 137, "sentlen": 137, "userdist": 137, "addregexclass": 137, "spellcheck_dl": 137, "gamma": 137, "decis": 137, "correctsymbol": 137, "comparelowcas": 137, "vocabfreq": 137, "idsvocab": 137, "vocabid": 137, "usenewlin": 137, "newlin": 137, "norvigsweetingmodel": [137, 139, 140], "symmetricdeletemodel": [137, 139, 140], "cold": 137, "dreari": 137, "countri": 137, "white": 137, "smow": 137, "setweight": 137, "setgamma": 137, "setvocabfreq": 137, "setidsvocab": 137, "setvocabid": 137, "setclass": 137, "getwordclass": 137, "updateregexclass": 137, "updat": 137, "updatevocabclass": 137, "setcorrectsymbol": 137, "setcomparelowcas": 137, "norvigsweet": 139, "norvig": 139, "bayesian": 139, "tokenpattern": 139, "sensit": [139, 142, 148], "doublevari": 139, "shortcircuit": 139, "frequencyprior": 139, "ham": 139, "intersect": 139, "wordsizeignor": 139, "dupslimit": 139, "duplic": 139, "reductlimit": 139, "attempt": 139, "vowelswaplimit": 139, "vowel": 139, "swap": 139, "corrector": 139, "gummi": [139, 140], "gummic": [139, 140], "gummier": [139, 140], "gummiest": [139, 140], "gummifer": [139, 140], "basi": [139, 140], "token_pattern": [139, 140], "setdoublevari": 139, "setshortcircuit": 139, "setfrequencyprior": 139, "symmetr": [139, 140], "delet": [139, 140, 207], "damerau": [139, 140], "transpos": [139, 140], "spellcheck_norvig": 139, "symspel": [139, 140], "somtim": 139, "wrrite": [139, 140], "wordz": [139, 140], "erong": [139, 140], "sometim": [139, 140, 207], "wrong": [139, 140], "symmetricdelet": 140, "deriv": 140, "teach": 140, "maxeditdist": 140, "frequencythreshold": [140, 151], "deletesthreshold": 140, "patttern": 140, "setmaxeditdist": 140, "setfrequencythreshold": [140, 151], "setdeletesthreshold": 140, "spellcheck_sd": 140, "spmetim": 140, "employ": 141, "stopwordsclean": [142, 155, 166], "mllib": [142, 204], "stopwordsremov": 142, "cleantoken": [142, 155, 166], "stopwords_en": 142, "jvm": [142, 180], "forth": 142, "setlocal": 142, "tfnerdlgraphbuildermodel": 143, "tfnerdlgraphbuild": 143, "sethiddenunitsnumb": 143, "assertiondlapproach": 143, "medicalnerapproach": 143, "gethiddenunitsnumb": 143, "srt": 143, "getgraphfold": 143, "setgraphfil": 143, "greaph": 143, "getgraphfil": 143, "chunktoken": 144, "flatten": 144, "artist": 144, "benezar": 144, "robert": 144, "farendel": 144, "graduat": 144, "luca": 144, "chunktokenizermodel": 144, "recursivetoken": 146, "recurs": [146, 164, 176, 180, 184], "infix": [146, 148], "qam": 146, "setprefix": 146, "setinfix": 146, "recursivetokenizermodel": 146, "regextoken": [147, 151, 208], "tolowercas": [147, 151], "positionalmask": 147, "guarante": 147, "increment": 147, "flag": 147, "eventu": 147, "settolowercas": [147, 151], "nthi": 147, "setpositionalmask": 147, "tokenizedsent": 148, "rulefactori": [148, 173], "targetpattern": 148, "grab": 148, "prefixpattern": 148, "suffixpattern": 148, "infixpattern": 148, "sub": 148, "won": 148, "exceptionspath": 148, "casesensitiveexcept": 148, "contextchar": 148, "splitchar": 148, "didn": 148, "jane": 148, "boyfriend": 148, "getinfixpattern": 148, "getsuffixpattern": 148, "getprefixpattern": 148, "getcontextchar": 148, "getsplitchar": 148, "settargetpattern": 148, "setprefixpattern": 148, "setsuffixpattern": 148, "setinfixpattern": 148, "addinfixpattern": 148, "setexcept": 148, "getexcept": 148, "setexceptionspath": 148, "addexcept": 148, "setcasesensitiveexcept": 148, "getcasesensitiveexcept": 148, "addcontextchar": 148, "setsplitchar": 148, "addsplitchar": 148, "piec": 148, "token_rul": 148, "token2chunk": 149, "17": [149, 196, 198], "wordsegment": 151, "wordsegmenterapproach": 151, "correspond": [151, 187], "rr": 151, "likewis": 151, "themselv": 151, "\u4e0a\u6d77": 151, "\u8ba1\u5212": 151, "\u5230": 151, "\u672c": 151, "\u4e16\u7eaa": 151, "\u672b": 151, "\u5b9e\u73b0": 151, "\u4eba\u5747": 151, "\u56fd\u5185": 151, "\u751f\u4ea7": 151, "\u603b\u503c": 151, "\u4e94\u5343": 151, "\u7f8e\u5143": 151, "\u4e0a": 151, "\u6d77": 151, "\u8ba1": 151, "\u5212": 151, "\u4e16": 151, "\u7eaa": 151, "\u5b9e": 151, "\u73b0": 151, "\u4eba": 151, "\u5747": 151, "\u56fd": 151, "\u5185": 151, "\u751f": 151, "\u4ea7": 151, "\u603b": 151, "ll\u503c": 151, "\u4e94": 151, "\u5343": 151, "\u7f8e": 151, "\u5143": 151, "shanghai": 151, "plan": 151, "dollar": 151, "capita": 151, "gdp": 151, "wordsegmentermodel": 151, "tip": 151, "frame": 151, "least": 151, "frequent": 151, "ambiguitythreshold": 151, "enableregextoken": 151, "xue": 151, "nianwen": 151, "volum": 151, "februari": 151, "aclweb": 151, "aclanthologi": 151, "o03": 151, "4002": 151, "chinese_train": 151, "utf8": 151, "\u5341": 151, "\u56db": 151, "\u4e0d": 151, "\u662f": 151, "setniter": 151, "trainingdataset": 151, "setambiguitythreshold": 151, "getfrequencythreshold": 151, "getambiguitythreshold": 151, "setenableregextoken": 151, "plit": 151, "words_seg": 151, "wordseg_pku": 151, "\u7136\u800c": 151, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 151, "\u9019\u6a23": 151, "\u7684": 151, "\u8655\u7406": 151, "\u4e5f": 151, "\u884d\u751f": 151, "\u4e86": 151, "\u4e00\u4e9b": 151, "\u554f\u984c": 151, "outputcol": [152, 154, 155, 156, 157, 160, 163], "inferschema": 152, "tmp": [152, 160, 180, 203], "librispeech_asr_dummy_clean_audio_array_parquet": 152, "float_arrai": 152, "chunkcol": 153, "stringtyp": 153, "setisarrai": 153, "startcol": 153, "startcolbytokenindex": 153, "isarrai": 153, "failonmiss": 153, "chunkassembl": 153, "setchunkcol": 153, "setstartcol": 153, "setstartcolbytokenindex": 153, "setfailonmiss": 153, "disabl": [154, 163], "idcol": [154, 163], "metadatacol": [154, 163], "cleanupmod": [154, 163], "cleanup": [154, 163], "inplac": [154, 163], "inplace_ful": [154, 163], "shrink_ful": [154, 163], "each_ful": [154, 163], "delete_ful": [154, 163], "setidcol": [154, 163], "setmetadatacol": [154, 163], "usabl": 155, "lda": 155, "forest": 155, "featurecol": 155, "cleanannot": [155, 156, 157], "outputasvector": 155, "gloveembed": 155, "finished_sentence_embed": 155, "resultwiths": 155, "1619900017976761": 155, "045552998781204224": 155, "03229299932718277": 155, "685609996318": 155, "42416998744010925": 155, "1378999948501587": 155, "5717899799346924": 155, "5078899860382": 155, "08621499687433243": 155, "15772999823093414": 155, "06067200005054474": 155, "395359992980": 155, "4970499873161316": 155, "7164199948310852": 155, "40119001269340515": 155, "05761000141501": 155, "08170200139284134": 155, "7159299850463867": 155, "20677000284194946": 155, "0295659992843": 155, "valuesplitsymbol": 156, "annotationsplitsymbol": 156, "includemetadata": 156, "outputasarrai": [156, 157], "parseembeddingsvector": 156, "setvaluesplitsymbol": 156, "setannotationsplitsymbol": 156, "setincludemetadata": [156, 208], "setoutputasarrai": [156, 157], "setparseembeddingsvector": 156, "finishedresult": 157, "hasrecursivefit": [158, 159], "java_obj": [158, 183, 186], "py4j": [158, 159, 186], "java_gatewai": [158, 159, 186], "javaobject": [158, 159, 186], "recursivepipelin": [158, 159, 164, 169], "hasrecursivetransform": 159, "doc2_chunk": [161, 180], "embeddings_finish": [161, 180], "graph_finish": [161, 180], "has_recursive_fit": [161, 180], "has_recursive_transform": [161, 180], "light_pipelin": [161, 180], "recursive_pipelin": [161, 180], "token_assembl": [161, 180], "lightpipelin": [162, 190, 211], "parse_embed": [162, 190], "hold": [162, 211], "principl": [162, 211], "everyth": [162, 211, 212], "fullannot": [162, 190], "happi": [162, 206, 208, 211, 212], "prp": [162, 194, 196, 206, 211, 212, 213], "rb": [162, 196, 206, 211, 212, 213], "optional_target": [162, 190], "explain_document_pipelin": [162, 179, 190, 206, 211, 212], "dict_kei": [162, 190], "fullannotateimag": [162, 190], "path_to_imag": [162, 190], "setignoreunsupport": 162, "unsupport": 162, "annotatormodel": [162, 168, 191], "getignoreunsupport": 162, "text2": 163, "document1": 163, "document2": 163, "arg": [164, 183], "kwarg": 164, "decid": 164, "behav": 164, "exactli": 164, "intent": 164, "recursivepipelinemodel": 164, "pipeline_model": [164, 187, 203], "intend": 164, "tab": [165, 187, 203], "escap": 165, "quot": 165, "inputformat": 165, "csvdelimit": 165, "defailt": 165, "comma": 165, "escapecsvdelimit": 165, "table_csv": 165, "csv_data": 165, "input_format": 165, "setcsvdelimit": 165, "setescapecsvdelimit": 165, "tokenassembl": 166, "cleantext": 166, "opensourc": 166, "annotatorapproach": [167, 176, 187], "annotatorproperti": 169, "setlazyannot": 169, "lazili": 169, "getlazyannot": 169, "annotator_approach": [172, 180], "annotator_model": [172, 180], "annotator_properti": [172, 180], "coverage_result": [172, 180], "match_strategi": [172, 180], "recursive_annotator_approach": [172, 180], "regard": 173, "constant": [173, 175], "hasembeddingsproperti": 174, "getdimens": 174, "setnreturnsequ": 174, "recursiveannotatorapproach": 176, "fo": 178, "assist": 179, "map_annot": 179, "f": [179, 187, 203], "output_typ": 179, "udf": 179, "userdefinedfunct": 179, "def": 179, "nnp_token": 179, "lambda": 179, "alia": 179, "epeu": 179, "map_annotations_arrai": 179, "map_annotations_strict": 179, "map_annotations_col": 179, "output_column": 179, "annotatyon_typ": 179, "chunks_df": 179, "pos_chunk": 179, "vbz": [179, 193, 213], "filter_by_annotations_col": 179, "filter_po": 179, "explode_annotations_col": 179, "annotator_java_ml": [180, 184], "annotator_transform": [180, 184], "extended_java_wrapp": [180, 184], "params_getters_sett": [180, 184], "comet": [180, 188, 205], "pretrained_pipelin": [180, 189], "resource_download": [180, 189], "pub_tat": [180, 195], "annotation_audio": 180, "annotation_imag": 180, "apple_silicon": 180, "aarch64": 180, "cache_fold": 180, "log_fold": 180, "cluster_tmp_dir": 180, "real_time_output": 180, "output_level": 180, "correctli": 180, "maco": 180, "linux": 180, "alloc": 180, "directori": [180, 191, 203], "cache_pretrain": 180, "temporarili": 180, "unpack": 180, "hadoop": 180, "dir": 180, "s3": [180, 191], "hdf": 180, "dbf": 180, "annotator_log": 180, "annotatorjavamlread": 181, "mixin": 181, "javamlread": 181, "classmethod": 181, "mlreader": 181, "clazz": 181, "rl": 181, "javaparam": 181, "annotatortransform": 182, "_java_obj": 182, "javawrapp": 183, "extendedjavawrapp": 183, "new_java_arrai": 183, "pylist": 183, "java_class": 183, "todo": 183, "paramsgetterssett": 185, "getparamvalu": 185, "paramnam": 185, "setparamvalu": 185, "recursiveestim": 186, "recursivetransform": 186, "cometlogg": [187, 203], "workspac": 187, "project_nam": [187, 203], "comet_mod": [187, 203], "experiment_id": 187, "experiment_kwarg": 187, "logger": [187, 203], "meta": [187, 205], "practition": [187, 203], "reliabl": [187, 203], "streamlin": [187, 203], "lifecycl": [187, 203, 205], "track": [187, 203, 204], "outputlogpath": [187, 203], "onlin": [187, 203], "reus": 187, "importerror": 187, "output_log_path": [187, 203], "embd": [187, 203], "setshuffleperepoch": [187, 203], "logdir": [187, 203], "interfac": [187, 203, 211], "comet_ml": [187, 203], "log_pipeline_paramet": [187, 203], "log_visu": [187, 203], "html": [187, 203], "viz": [187, 203], "upload": 187, "colum": [187, 203], "ner_chunk": [187, 203], "sparknlp_displai": [187, 203], "nervisu": [187, 203], "idx": [187, 203], "enumer": [187, 203], "label_col": [187, 203], "document_col": [187, 203], "return_html": [187, 203], "log_metr": [187, 203], "sklearn": [187, 203], "preprocess": [187, 203], "multilabelbinar": [187, 203], "classification_report": [187, 203], "preds_df": [187, 203], "topanda": [187, 203], "mlb": [187, 203], "y_true": [187, 203], "fit_transform": [187, 203], "y_pred": [187, 203], "output_dict": [187, 203], "log_paramet": 187, "log_completed_run": 187, "log_file_path": 187, "log_asset": 187, "asset_path": 187, "asset": 187, "log_asset_data": 187, "interv": 187, "refresh": 187, "outstand": 187, "disk_loc": 190, "light_model": 190, "gather": 190, "resourcedownload": [191, 207, 212], "showpublicmodel": [191, 207], "onto_100": 191, "onto_300": 191, "ner_dl_bert": 191, "similarli": 191, "showpublicpipelin": [191, 212], "check_spel": [191, 212], "match_datetim": [191, 212], "downloadmodel": 191, "reader": 191, "j_dwn": 191, "pythonresourcedownload": 191, "downloadmodeldirectli": 191, "unzip": 191, "downloadpipelin": 191, "clearcach": 191, "clear": 191, "filer": 191, "showuncategorizedresourc": 191, "showavailableannot": 191, "documentcol": [193, 194], "sentencecol": [193, 194], "tokencol": 193, "conlllabelindex": 193, "conllposindex": 193, "conlldocidcol": 193, "doc_id": [193, 197], "textcol": [193, 194], "labelcol": 193, "includedocid": 193, "docstart": [193, 213], "eu": [193, 213], "np": [193, 213], "reject": [193, 213], "vp": [193, 213], "misc": [193, 213], "boycott": [193, 213], "british": [193, 213], "lamb": [193, 213], "blackburn": 193, "brussel": 193, "1996": 193, "08": 193, "storage_level": 193, "storagelevel": 193, "disk_onli": 193, "lift": 193, "persist": 193, "uposcol": 194, "upo": 194, "xposcol": 194, "xpo": 194, "lemmacol": 194, "sent_id": 194, "sell": 194, "pron": 194, "nom": 194, "plur": 194, "_": 194, "tens": 194, "conj": 194, "cc": 194, "obj": 194, "spaceaft": 194, "No": [194, 206], "punct": 194, "conllufil": [194, 213], "conlldataset": [194, 213], "morph": 194, "Into": 194, "googleo": 194, "sconj": 194, "propn": 194, "adp": 194, "wp": 194, "vbd": [194, 196, 213], "ago": [196, 213], "posdf": 196, "61": 196, "67": [196, 197, 213], "nonexecut": 196, "69": 196, "76": 196, "director": 196, "78": 196, "81": 196, "84": 196, "outputposcol": 196, "outputdocumentcol": 196, "outputtextcol": 196, "pubtat": [197, 210], "medic": [197, 213], "titl": [197, 213], "medment": [197, 213], "25763772": [197, 213], "dctn4": [197, 213], "t116": [197, 213], "t123": [197, 213], "c4308010": [197, 213], "63": [197, 213], "chronic": [197, 213], "pseudomona": [197, 213], "aeruginosa": [197, 213], "infect": [197, 213], "t047": [197, 213], "c0854135": [197, 213], "82": [197, 213], "cystic": [197, 213], "fibrosi": [197, 213], "c0010674": [197, 213], "120": [197, 213], "124": [197, 213], "139": [197, 213], "pubtatorfil": 197, "corpus_pubtator_sampl": 197, "pubtatordataset": 197, "finished_token": [197, 208], "finished_po": 197, "finished_n": 197, "finished_token_metadata": 197, "finished_pos_metadata": 197, "finished_label_metadata": 197, "mo": 197, "ispaddedtoken": 197, "pad": 197, "spacytoannot": 198, "token_spac": 198, "sentence_end": 198, "spaci": 198, "multi_doc_token": 198, "went": 198, "night": 198, "bought": 198, "bread": 198, "54": 198, "overview": [202, 210], "workflow": 203, "dedic": 203, "account": 203, "inspect": 203, "init": 203, "sparknlp_experi": 203, "offline_directori": 203, "later": 203, "nativ": 204, "record": 204, "registri": 204, "send": 205, "mlflow": 205, "content": [206, 212], "clearli": 206, "explain_document_ml": [206, 211, 212], "approx": [206, 211, 212], "mb": [206, 211, 212], "ok": [206, 211, 212], "spearhead": 207, "produc": 207, "declar": 207, "accordingli": 207, "extra_loc": 207, "offer": [207, 209, 212], "classifierdl_use_trec50": 207, "classifierdl_use_spam": 207, "column_nam": 207, "preced": 207, "interchang": 208, "road": 208, "proce": 208, "At": 208, "sens": 212, "constantli": 212, "train_po": 213, "training_conl": 213, "train_corpu": 213, "withcolumnrenam": 213, "trainingpubtatordf": 213, "corpus_pubt": 213}, "objects": {"": [[180, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [93, 0, 0, "-", "annotator"], [161, 0, 0, "-", "base"], [172, 0, 0, "-", "common"], [179, 0, 0, "-", "functions"], [184, 0, 0, "-", "internal"], [188, 0, 0, "-", "logging"], [189, 0, 0, "-", "pretrained"], [180, 3, 1, "", "start"], [195, 0, 0, "-", "training"], [200, 0, 0, "-", "upload_to_hub"], [201, 0, 0, "-", "util"], [180, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [31, 0, 0, "-", "classifier_dl"], [50, 0, 0, "-", "coref"], [54, 0, 0, "-", "cv"], [58, 0, 0, "-", "date2_chunk"], [60, 0, 0, "-", "dependency"], [62, 0, 0, "-", "document_character_text_splitter"], [63, 0, 0, "-", "document_normalizer"], [64, 0, 0, "-", "document_token_splitter"], [65, 0, 0, "-", "document_token_splitter_test"], [77, 0, 0, "-", "embeddings"], [91, 0, 0, "-", "er"], [92, 0, 0, "-", "graph_extraction"], [94, 0, 0, "-", "keyword_extraction"], [96, 0, 0, "-", "ld_dl"], [98, 0, 0, "-", "lemmatizer"], [101, 0, 0, "-", "matcher"], [105, 0, 0, "-", "n_gram_generator"], [106, 0, 0, "-", "ner"], [113, 0, 0, "-", "normalizer"], [114, 0, 0, "-", "openai"], [119, 0, 0, "-", "param"], [120, 0, 0, "-", "pos"], [122, 0, 0, "-", "sentence"], [125, 0, 0, "-", "sentiment"], [130, 0, 0, "-", "seq2seq"], [136, 0, 0, "-", "similarity"], [138, 0, 0, "-", "spell_check"], [141, 0, 0, "-", "stemmer"], [142, 0, 0, "-", "stop_words_cleaner"], [143, 0, 0, "-", "tf_ner_dl_graph_builder"], [145, 0, 0, "-", "token"], [149, 0, 0, "-", "token2_chunk"], [150, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "deberta_for_zero_shot_classification"], [27, 0, 0, "-", "distil_bert_for_question_answering"], [28, 0, 0, "-", "distil_bert_for_sequence_classification"], [29, 0, 0, "-", "distil_bert_for_token_classification"], [30, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [32, 0, 0, "-", "longformer_for_question_answering"], [33, 0, 0, "-", "longformer_for_sequence_classification"], [34, 0, 0, "-", "longformer_for_token_classification"], [35, 0, 0, "-", "mpnet_for_question_answering"], [36, 0, 0, "-", "mpnet_for_sequence_classification"], [37, 0, 0, "-", "multi_classifier_dl"], [38, 0, 0, "-", "roberta_for_question_answering"], [39, 0, 0, "-", "roberta_for_sequence_classification"], [40, 0, 0, "-", "roberta_for_token_classification"], [41, 0, 0, "-", "roberta_for_zero_shot_classification"], [42, 0, 0, "-", "sentiment_dl"], [43, 0, 0, "-", "tapas_for_question_answering"], [44, 0, 0, "-", "xlm_roberta_for_question_answering"], [45, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [46, 0, 0, "-", "xlm_roberta_for_token_classification"], [47, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [48, 0, 0, "-", "xlnet_for_sequence_classification"], [49, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setCoalesceSentences"], [26, 2, 1, "", "setConfigProtoBytes"], [26, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setCoalesceSentences"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[34, 2, 1, "", "getClasses"], [34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, 1, 1, "", "MultiClassifierDLApproach"], [37, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"], [40, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[41, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[41, 2, 1, "", "getClasses"], [41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setCoalesceSentences"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[42, 1, 1, "", "SentimentDLApproach"], [42, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[42, 2, 1, "", "setDropout"], [42, 2, 1, "", "setThreshold"], [42, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setConfigProtoBytes"], [42, 2, 1, "", "setThreshold"], [42, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[43, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[44, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[45, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[46, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[47, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[47, 2, 1, "", "getClasses"], [47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setCoalesceSentences"], [47, 2, 1, "", "setConfigProtoBytes"], [47, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[48, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[48, 2, 1, "", "getClasses"], [48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setCoalesceSentences"], [48, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[49, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[51, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[51, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setMaxSegmentLength"], [51, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[52, 0, 0, "-", "clip_for_zero_shot_classification"], [53, 0, 0, "-", "convnext_for_image_classification"], [55, 0, 0, "-", "swin_for_image_classification"], [56, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [57, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[52, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[52, 2, 1, "", "getCandidateLabels"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[53, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[53, 2, 1, "", "getClasses"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"], [53, 2, 1, "", "setCropPct"], [53, 2, 1, "", "setDoRescale"], [53, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[55, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[55, 2, 1, "", "getClasses"], [55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[56, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[57, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[57, 2, 1, "", "getClasses"], [57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[58, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[58, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[59, 0, 0, "-", "dependency_parser"], [61, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[59, 1, 1, "", "DependencyParserApproach"], [59, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[59, 2, 1, "", "setConllU"], [59, 2, 1, "", "setDependencyTreeBank"], [59, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[59, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[61, 1, 1, "", "TypedDependencyParserApproach"], [61, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[61, 2, 1, "", "setConll2009"], [61, 2, 1, "", "setConllU"], [61, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[61, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[62, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[62, 2, 1, "", "setChunkOverlap"], [62, 2, 1, "", "setChunkSize"], [62, 2, 1, "", "setExplodeSplits"], [62, 2, 1, "", "setKeepSeparators"], [62, 2, 1, "", "setPatternsAreRegex"], [62, 2, 1, "", "setSplitPatterns"], [62, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[63, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[63, 2, 1, "", "setAction"], [63, 2, 1, "", "setEncoding"], [63, 2, 1, "", "setLowercase"], [63, 2, 1, "", "setPatterns"], [63, 2, 1, "", "setPolicy"], [63, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[64, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[64, 2, 1, "", "setExplodeSplits"], [64, 2, 1, "", "setNumTokens"], [64, 2, 1, "", "setTokenOverlap"], [64, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[65, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[65, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[66, 0, 0, "-", "albert_embeddings"], [67, 0, 0, "-", "bert_embeddings"], [68, 0, 0, "-", "bert_sentence_embeddings"], [69, 0, 0, "-", "bge_embeddings"], [70, 0, 0, "-", "camembert_embeddings"], [71, 0, 0, "-", "chunk_embeddings"], [72, 0, 0, "-", "deberta_embeddings"], [73, 0, 0, "-", "distil_bert_embeddings"], [74, 0, 0, "-", "doc2vec"], [75, 0, 0, "-", "e5_embeddings"], [76, 0, 0, "-", "elmo_embeddings"], [78, 0, 0, "-", "instructor_embeddings"], [79, 0, 0, "-", "longformer_embeddings"], [80, 0, 0, "-", "mpnet_embeddings"], [81, 0, 0, "-", "roberta_embeddings"], [82, 0, 0, "-", "roberta_sentence_embeddings"], [83, 0, 0, "-", "sentence_embeddings"], [84, 0, 0, "-", "universal_sentence_encoder"], [85, 0, 0, "-", "word2vec"], [86, 0, 0, "-", "word_embeddings"], [87, 0, 0, "-", "xlm_roberta_embeddings"], [88, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [89, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[66, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[67, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[68, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[69, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[70, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[71, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[71, 2, 1, "", "setPoolingStrategy"], [71, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[72, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[73, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[74, 1, 1, "", "Doc2VecApproach"], [74, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[74, 2, 1, "", "setMaxIter"], [74, 2, 1, "", "setMaxSentenceLength"], [74, 2, 1, "", "setMinCount"], [74, 2, 1, "", "setNumPartitions"], [74, 2, 1, "", "setSeed"], [74, 2, 1, "", "setStepSize"], [74, 2, 1, "", "setVectorSize"], [74, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[74, 2, 1, "", "getVectors"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[75, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[76, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setBatchSize"], [76, 2, 1, "", "setConfigProtoBytes"], [76, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[78, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"], [78, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[79, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[80, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[81, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[82, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[83, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[83, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[84, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setConfigProtoBytes"], [84, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[85, 1, 1, "", "Word2VecApproach"], [85, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[85, 2, 1, "", "setMaxIter"], [85, 2, 1, "", "setMaxSentenceLength"], [85, 2, 1, "", "setMinCount"], [85, 2, 1, "", "setNumPartitions"], [85, 2, 1, "", "setSeed"], [85, 2, 1, "", "setStepSize"], [85, 2, 1, "", "setVectorSize"], [85, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[85, 2, 1, "", "getVectors"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[86, 1, 1, "", "WordEmbeddings"], [86, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[86, 2, 1, "", "setReadCacheSize"], [86, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[86, 2, 1, "", "loadStorage"], [86, 2, 1, "", "overallCoverage"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setReadCacheSize"], [86, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[87, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[87, 2, 1, "", "loadSavedModel"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[88, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[88, 2, 1, "", "loadSavedModel"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[89, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[89, 2, 1, "", "loadSavedModel"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[90, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[90, 1, 1, "", "EntityRulerApproach"], [90, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[90, 2, 1, "", "setAlphabetResource"], [90, 2, 1, "", "setPatternsResource"], [90, 2, 1, "", "setSentenceMatch"], [90, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[92, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[92, 2, 1, "", "setDelimiter"], [92, 2, 1, "", "setDependencyParserModel"], [92, 2, 1, "", "setEntityTypes"], [92, 2, 1, "", "setExplodeEntities"], [92, 2, 1, "", "setIncludeEdges"], [92, 2, 1, "", "setMaxSentenceSize"], [92, 2, 1, "", "setMergeEntities"], [92, 2, 1, "", "setMergeEntitiesIOBFormat"], [92, 2, 1, "", "setMinSentenceSize"], [92, 2, 1, "", "setPosModel"], [92, 2, 1, "", "setRelationshipTypes"], [92, 2, 1, "", "setRootTokens"], [92, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[95, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[95, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[95, 2, 1, "", "getStopWords"], [95, 2, 1, "", "loadDefaultStopWords"], [95, 2, 1, "", "setMaxNGrams"], [95, 2, 1, "", "setMinNGrams"], [95, 2, 1, "", "setNKeywords"], [95, 2, 1, "", "setStopWords"], [95, 2, 1, "", "setThreshold"], [95, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[97, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[97, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setCoalesceSentences"], [97, 2, 1, "", "setConfigProtoBytes"], [97, 2, 1, "", "setThreshold"], [97, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[98, 1, 1, "", "Lemmatizer"], [98, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[98, 2, 1, "", "setDictionary"], [98, 2, 1, "", "setFormCol"], [98, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[98, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[99, 0, 0, "-", "big_text_matcher"], [100, 0, 0, "-", "date_matcher"], [102, 0, 0, "-", "multi_date_matcher"], [103, 0, 0, "-", "regex_matcher"], [104, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[99, 1, 1, "", "BigTextMatcher"], [99, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[99, 2, 1, "", "setCaseSensitive"], [99, 2, 1, "", "setEntities"], [99, 2, 1, "", "setMergeOverlapping"], [99, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[99, 2, 1, "", "loadStorage"], [99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setCaseSensitive"], [99, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[100, 1, 1, "", "DateMatcher"], [100, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[100, 2, 1, "", "setAnchorDateDay"], [100, 2, 1, "", "setAnchorDateMonth"], [100, 2, 1, "", "setAnchorDateYear"], [100, 2, 1, "", "setDefaultDayWhenMissing"], [100, 2, 1, "", "setInputFormats"], [100, 2, 1, "", "setOutputFormat"], [100, 2, 1, "", "setReadMonthFirst"], [100, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[102, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[103, 1, 1, "", "RegexMatcher"], [103, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[103, 2, 1, "", "setDelimiter"], [103, 2, 1, "", "setExternalRules"], [103, 2, 1, "", "setRules"], [103, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[104, 1, 1, "", "TextMatcher"], [104, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[104, 2, 1, "", "setBuildFromTokens"], [104, 2, 1, "", "setCaseSensitive"], [104, 2, 1, "", "setEntities"], [104, 2, 1, "", "setEntityValue"], [104, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[104, 2, 1, "", "pretrained"], [104, 2, 1, "", "setBuildFromTokens"], [104, 2, 1, "", "setEntityValue"], [104, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[105, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[105, 2, 1, "", "setDelimiter"], [105, 2, 1, "", "setEnableCumulative"], [105, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[107, 0, 0, "-", "ner_approach"], [108, 0, 0, "-", "ner_converter"], [109, 0, 0, "-", "ner_crf"], [110, 0, 0, "-", "ner_dl"], [111, 0, 0, "-", "ner_overwriter"], [112, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[107, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[107, 2, 1, "", "getLabelColumn"], [107, 2, 1, "", "setEntities"], [107, 2, 1, "", "setLabelColumn"], [107, 2, 1, "", "setMaxEpochs"], [107, 2, 1, "", "setMinEpochs"], [107, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[108, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[108, 2, 1, "", "setNerHasNoSchema"], [108, 2, 1, "", "setPreservePosition"], [108, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[109, 1, 1, "", "NerCrfApproach"], [109, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[109, 2, 1, "", "setC0"], [109, 2, 1, "", "setExternalFeatures"], [109, 2, 1, "", "setIncludeConfidence"], [109, 2, 1, "", "setL2"], [109, 2, 1, "", "setLossEps"], [109, 2, 1, "", "setMinW"], [109, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[109, 2, 1, "", "pretrained"], [109, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[110, 1, 1, "", "NerDLApproach"], [110, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[110, 2, 1, "", "setBatchSize"], [110, 2, 1, "", "setBestModelMetric"], [110, 2, 1, "", "setConfigProtoBytes"], [110, 2, 1, "", "setDropout"], [110, 2, 1, "", "setEnableMemoryOptimizer"], [110, 2, 1, "", "setGraphFolder"], [110, 2, 1, "", "setIncludeAllConfidenceScores"], [110, 2, 1, "", "setIncludeConfidence"], [110, 2, 1, "", "setLr"], [110, 2, 1, "", "setPo"], [110, 2, 1, "", "setUseBestModel"], [110, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setConfigProtoBytes"], [110, 2, 1, "", "setIncludeAllConfidenceScores"], [110, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[111, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[111, 2, 1, "", "setNerWords"], [111, 2, 1, "", "setNewNerEntity"], [111, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[112, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[112, 2, 1, "", "getClasses"], [112, 2, 1, "", "load"], [112, 2, 1, "", "pretrained"], [112, 2, 1, "", "setEntityDefinitions"], [112, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[113, 1, 1, "", "Normalizer"], [113, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[113, 2, 1, "", "setCleanupPatterns"], [113, 2, 1, "", "setLowercase"], [113, 2, 1, "", "setMaxLength"], [113, 2, 1, "", "setMinLength"], [113, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[115, 0, 0, "-", "openai_completion"], [116, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[115, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[115, 2, 1, "", "setBestOf"], [115, 2, 1, "", "setEcho"], [115, 2, 1, "", "setFrequencyPenalty"], [115, 2, 1, "", "setLogitBias"], [115, 2, 1, "", "setLogprobs"], [115, 2, 1, "", "setMaxTokens"], [115, 2, 1, "", "setModel"], [115, 2, 1, "", "setNumberOfCompletions"], [115, 2, 1, "", "setPresencePenalty"], [115, 2, 1, "", "setStop"], [115, 2, 1, "", "setSuffix"], [115, 2, 1, "", "setTemperature"], [115, 2, 1, "", "setTopP"], [115, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[116, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[116, 2, 1, "", "setModel"], [116, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[117, 0, 0, "-", "classifier_encoder"], [118, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[117, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[117, 2, 1, "", "setBatchSize"], [117, 2, 1, "", "setConfigProtoBytes"], [117, 2, 1, "", "setLabelColumn"], [117, 2, 1, "", "setLr"], [117, 2, 1, "", "setMaxEpochs"], [117, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[118, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[118, 2, 1, "", "setEnableOutputLogs"], [118, 2, 1, "", "setEvaluationLogExtended"], [118, 2, 1, "", "setOutputLogsPath"], [118, 2, 1, "", "setTestDataset"], [118, 2, 1, "", "setValidationSplit"], [118, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[121, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[121, 1, 1, "", "PerceptronApproach"], [121, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[121, 2, 1, "", "getNIterations"], [121, 2, 1, "", "setIterations"], [121, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[121, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[123, 0, 0, "-", "sentence_detector"], [124, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[123, 1, 1, "", "SentenceDetector"], [123, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[123, 2, 1, "", "setCustomBounds"], [123, 2, 1, "", "setCustomBoundsStrategy"], [123, 2, 1, "", "setDetectLists"], [123, 2, 1, "", "setExplodeSentences"], [123, 2, 1, "", "setMaxLength"], [123, 2, 1, "", "setMinLength"], [123, 2, 1, "", "setSplitLength"], [123, 2, 1, "", "setUseAbbreviations"], [123, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[124, 1, 1, "", "SentenceDetectorDLApproach"], [124, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[124, 2, 1, "", "setEpochsNumber"], [124, 2, 1, "", "setExplodeSentences"], [124, 2, 1, "", "setImpossiblePenultimates"], [124, 2, 1, "", "setModel"], [124, 2, 1, "", "setOutputLogsPath"], [124, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[124, 2, 1, "", "pretrained"], [124, 2, 1, "", "setCustomBounds"], [124, 2, 1, "", "setExplodeSentences"], [124, 2, 1, "", "setImpossiblePenultimates"], [124, 2, 1, "", "setMaxLength"], [124, 2, 1, "", "setMinLength"], [124, 2, 1, "", "setModel"], [124, 2, 1, "", "setSplitLength"], [124, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[126, 0, 0, "-", "sentiment_detector"], [127, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[126, 1, 1, "", "SentimentDetector"], [126, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[126, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[127, 1, 1, "", "ViveknSentimentApproach"], [127, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[127, 2, 1, "", "setPruneCorpus"], [127, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[127, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[128, 0, 0, "-", "bart_transformer"], [129, 0, 0, "-", "gpt2_transformer"], [131, 0, 0, "-", "llama2_transformer"], [132, 0, 0, "-", "m2m100_transformer"], [133, 0, 0, "-", "marian_transformer"], [134, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[128, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[128, 2, 1, "", "loadSavedModel"], [128, 2, 1, "", "pretrained"], [128, 2, 1, "", "setBeamSize"], [128, 2, 1, "", "setCache"], [128, 2, 1, "", "setConfigProtoBytes"], [128, 2, 1, "", "setDoSample"], [128, 2, 1, "", "setIgnoreTokenIds"], [128, 2, 1, "", "setMaxOutputLength"], [128, 2, 1, "", "setMinOutputLength"], [128, 2, 1, "", "setNoRepeatNgramSize"], [128, 2, 1, "", "setRepetitionPenalty"], [128, 2, 1, "", "setTask"], [128, 2, 1, "", "setTemperature"], [128, 2, 1, "", "setTopK"], [128, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[129, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[129, 2, 1, "", "loadSavedModel"], [129, 2, 1, "", "pretrained"], [129, 2, 1, "", "setConfigProtoBytes"], [129, 2, 1, "", "setDoSample"], [129, 2, 1, "", "setIgnoreTokenIds"], [129, 2, 1, "", "setMaxOutputLength"], [129, 2, 1, "", "setMinOutputLength"], [129, 2, 1, "", "setNoRepeatNgramSize"], [129, 2, 1, "", "setRepetitionPenalty"], [129, 2, 1, "", "setTask"], [129, 2, 1, "", "setTemperature"], [129, 2, 1, "", "setTopK"], [129, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[131, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[131, 2, 1, "", "loadSavedModel"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setConfigProtoBytes"], [131, 2, 1, "", "setDoSample"], [131, 2, 1, "", "setIgnoreTokenIds"], [131, 2, 1, "", "setMaxOutputLength"], [131, 2, 1, "", "setMinOutputLength"], [131, 2, 1, "", "setNoRepeatNgramSize"], [131, 2, 1, "", "setRepetitionPenalty"], [131, 2, 1, "", "setTemperature"], [131, 2, 1, "", "setTopK"], [131, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[132, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[132, 2, 1, "", "loadSavedModel"], [132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setBeamSize"], [132, 2, 1, "", "setConfigProtoBytes"], [132, 2, 1, "", "setDoSample"], [132, 2, 1, "", "setIgnoreTokenIds"], [132, 2, 1, "", "setMaxOutputLength"], [132, 2, 1, "", "setMinOutputLength"], [132, 2, 1, "", "setNoRepeatNgramSize"], [132, 2, 1, "", "setRepetitionPenalty"], [132, 2, 1, "", "setSrcLang"], [132, 2, 1, "", "setTemperature"], [132, 2, 1, "", "setTgtLang"], [132, 2, 1, "", "setTopK"], [132, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[133, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[133, 2, 1, "", "loadSavedModel"], [133, 2, 1, "", "pretrained"], [133, 2, 1, "", "setConfigProtoBytes"], [133, 2, 1, "", "setDoSample"], [133, 2, 1, "", "setIgnoreTokenIds"], [133, 2, 1, "", "setLangId"], [133, 2, 1, "", "setMaxInputLength"], [133, 2, 1, "", "setMaxOutputLength"], [133, 2, 1, "", "setNoRepeatNgramSize"], [133, 2, 1, "", "setRandomSeed"], [133, 2, 1, "", "setRepetitionPenalty"], [133, 2, 1, "", "setTemperature"], [133, 2, 1, "", "setTopK"], [133, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[134, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[134, 2, 1, "", "loadSavedModel"], [134, 2, 1, "", "pretrained"], [134, 2, 1, "", "setConfigProtoBytes"], [134, 2, 1, "", "setDoSample"], [134, 2, 1, "", "setIgnoreTokenIds"], [134, 2, 1, "", "setMaxNewTokens"], [134, 2, 1, "", "setMaxOutputLength"], [134, 2, 1, "", "setMinOutputLength"], [134, 2, 1, "", "setNoRepeatNgramSize"], [134, 2, 1, "", "setRepetitionPenalty"], [134, 2, 1, "", "setStopAtEos"], [134, 2, 1, "", "setTask"], [134, 2, 1, "", "setTemperature"], [134, 2, 1, "", "setTopK"], [134, 2, 1, "", "setTopP"], [134, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[135, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[135, 1, 1, "", "DocumentSimilarityRankerApproach"], [135, 1, 1, "", "DocumentSimilarityRankerFinisher"], [135, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[135, 2, 1, "", "asRetriever"], [135, 2, 1, "", "setBucketLength"], [135, 2, 1, "", "setIdentityRanking"], [135, 2, 1, "", "setNumHashTables"], [135, 2, 1, "", "setNumberOfNeighbours"], [135, 2, 1, "", "setSimilarityMethod"], [135, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[135, 2, 1, "", "getInputCols"], [135, 2, 1, "", "getOutputCols"], [135, 2, 1, "", "setExtractNearestNeighbor"], [135, 2, 1, "", "setInputCols"], [135, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[137, 0, 0, "-", "context_spell_checker"], [139, 0, 0, "-", "norvig_sweeting"], [140, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[137, 1, 1, "", "ContextSpellCheckerApproach"], [137, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[137, 2, 1, "", "addRegexClass"], [137, 2, 1, "", "addVocabClass"], [137, 2, 1, "", "setBatchSize"], [137, 2, 1, "", "setCaseStrategy"], [137, 2, 1, "", "setClassCount"], [137, 2, 1, "", "setCompoundCount"], [137, 2, 1, "", "setConfigProtoBytes"], [137, 2, 1, "", "setEpochs"], [137, 2, 1, "", "setErrorThreshold"], [137, 2, 1, "", "setFinalRate"], [137, 2, 1, "", "setGraphFolder"], [137, 2, 1, "", "setInitialRate"], [137, 2, 1, "", "setLanguageModelClasses"], [137, 2, 1, "", "setMaxCandidates"], [137, 2, 1, "", "setMaxSentLen"], [137, 2, 1, "", "setMaxWindowLen"], [137, 2, 1, "", "setMinCount"], [137, 2, 1, "", "setTradeoff"], [137, 2, 1, "", "setValidationFraction"], [137, 2, 1, "", "setWeightedDistPath"], [137, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[137, 2, 1, "", "getWordClasses"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setCaseStrategy"], [137, 2, 1, "", "setClasses"], [137, 2, 1, "", "setCompareLowcase"], [137, 2, 1, "", "setConfigProtoBytes"], [137, 2, 1, "", "setCorrectSymbols"], [137, 2, 1, "", "setErrorThreshold"], [137, 2, 1, "", "setGamma"], [137, 2, 1, "", "setIdsVocab"], [137, 2, 1, "", "setMaxCandidates"], [137, 2, 1, "", "setMaxWindowLen"], [137, 2, 1, "", "setTradeoff"], [137, 2, 1, "", "setVocabFreq"], [137, 2, 1, "", "setVocabIds"], [137, 2, 1, "", "setWeights"], [137, 2, 1, "", "setWordMaxDistance"], [137, 2, 1, "", "updateRegexClass"], [137, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[139, 1, 1, "", "NorvigSweetingApproach"], [139, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[139, 2, 1, "", "setCaseSensitive"], [139, 2, 1, "", "setDictionary"], [139, 2, 1, "", "setDoubleVariants"], [139, 2, 1, "", "setFrequencyPriority"], [139, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[139, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[140, 1, 1, "", "SymmetricDeleteApproach"], [140, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[140, 2, 1, "", "setDeletesThreshold"], [140, 2, 1, "", "setDictionary"], [140, 2, 1, "", "setFrequencyThreshold"], [140, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[140, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[141, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[142, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[142, 2, 1, "", "loadDefaultStopWords"], [142, 2, 1, "", "pretrained"], [142, 2, 1, "", "setCaseSensitive"], [142, 2, 1, "", "setLocale"], [142, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[143, 1, 1, "", "TFNerDLGraphBuilder"], [143, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[143, 2, 1, "", "getGraphFile"], [143, 2, 1, "", "getGraphFolder"], [143, 2, 1, "", "getHiddenUnitsNumber"], [143, 2, 1, "", "getInputCols"], [143, 2, 1, "", "getLabelColumn"], [143, 2, 1, "", "setGraphFile"], [143, 2, 1, "", "setGraphFolder"], [143, 2, 1, "", "setHiddenUnitsNumber"], [143, 2, 1, "", "setInputCols"], [143, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[144, 0, 0, "-", "chunk_tokenizer"], [146, 0, 0, "-", "recursive_tokenizer"], [147, 0, 0, "-", "regex_tokenizer"], [148, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[144, 1, 1, "", "ChunkTokenizer"], [144, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[146, 1, 1, "", "RecursiveTokenizer"], [146, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[146, 2, 1, "", "setInfixes"], [146, 2, 1, "", "setPrefixes"], [146, 2, 1, "", "setSuffixes"], [146, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[147, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[147, 2, 1, "", "setMaxLength"], [147, 2, 1, "", "setMinLength"], [147, 2, 1, "", "setPattern"], [147, 2, 1, "", "setPositionalMask"], [147, 2, 1, "", "setPreservePosition"], [147, 2, 1, "", "setToLowercase"], [147, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[148, 1, 1, "", "Tokenizer"], [148, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[148, 2, 1, "", "addContextChars"], [148, 2, 1, "", "addException"], [148, 2, 1, "", "addInfixPattern"], [148, 2, 1, "", "addSplitChars"], [148, 2, 1, "", "getCaseSensitiveExceptions"], [148, 2, 1, "", "getContextChars"], [148, 2, 1, "", "getExceptions"], [148, 2, 1, "", "getInfixPatterns"], [148, 2, 1, "", "getPrefixPattern"], [148, 2, 1, "", "getSplitChars"], [148, 2, 1, "", "getSuffixPattern"], [148, 2, 1, "", "setCaseSensitiveExceptions"], [148, 2, 1, "", "setContextChars"], [148, 2, 1, "", "setExceptions"], [148, 2, 1, "", "setExceptionsPath"], [148, 2, 1, "", "setInfixPatterns"], [148, 2, 1, "", "setMaxLength"], [148, 2, 1, "", "setMinLength"], [148, 2, 1, "", "setPrefixPattern"], [148, 2, 1, "", "setSplitChars"], [148, 2, 1, "", "setSplitPattern"], [148, 2, 1, "", "setSuffixPattern"], [148, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[148, 2, 1, "", "addSplitChars"], [148, 2, 1, "", "pretrained"], [148, 2, 1, "", "setSplitChars"], [148, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[149, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[151, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[151, 1, 1, "", "WordSegmenterApproach"], [151, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[151, 2, 1, "", "getAmbiguityThreshold"], [151, 2, 1, "", "getFrequencyThreshold"], [151, 2, 1, "", "getNIterations"], [151, 2, 1, "", "setAmbiguityThreshold"], [151, 2, 1, "", "setEnableRegexTokenizer"], [151, 2, 1, "", "setFrequencyThreshold"], [151, 2, 1, "", "setNIterations"], [151, 2, 1, "", "setPattern"], [151, 2, 1, "", "setPosColumn"], [151, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[151, 2, 1, "", "pretrained"], [151, 2, 1, "", "setEnableRegexTokenizer"], [151, 2, 1, "", "setPattern"], [151, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[152, 0, 0, "-", "audio_assembler"], [153, 0, 0, "-", "doc2_chunk"], [154, 0, 0, "-", "document_assembler"], [155, 0, 0, "-", "embeddings_finisher"], [156, 0, 0, "-", "finisher"], [157, 0, 0, "-", "graph_finisher"], [158, 0, 0, "-", "has_recursive_fit"], [159, 0, 0, "-", "has_recursive_transform"], [160, 0, 0, "-", "image_assembler"], [162, 0, 0, "-", "light_pipeline"], [163, 0, 0, "-", "multi_document_assembler"], [164, 0, 0, "-", "recursive_pipeline"], [165, 0, 0, "-", "table_assembler"], [166, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[152, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[152, 2, 1, "", "getOutputCol"], [152, 2, 1, "", "setInputCol"], [152, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[153, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[153, 2, 1, "", "setChunkCol"], [153, 2, 1, "", "setFailOnMissing"], [153, 2, 1, "", "setIsArray"], [153, 2, 1, "", "setLowerCase"], [153, 2, 1, "", "setStartCol"], [153, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[154, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[154, 2, 1, "", "getOutputCol"], [154, 2, 1, "", "setCleanupMode"], [154, 2, 1, "", "setIdCol"], [154, 2, 1, "", "setInputCol"], [154, 2, 1, "", "setMetadataCol"], [154, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[155, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[155, 2, 1, "", "getInputCols"], [155, 2, 1, "", "getOutputCols"], [155, 2, 1, "", "setCleanAnnotations"], [155, 2, 1, "", "setInputCols"], [155, 2, 1, "", "setOutputAsVector"], [155, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[156, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[156, 2, 1, "", "getInputCols"], [156, 2, 1, "", "getOutputCols"], [156, 2, 1, "", "setAnnotationSplitSymbol"], [156, 2, 1, "", "setCleanAnnotations"], [156, 2, 1, "", "setIncludeMetadata"], [156, 2, 1, "", "setInputCols"], [156, 2, 1, "", "setOutputAsArray"], [156, 2, 1, "", "setOutputCols"], [156, 2, 1, "", "setParseEmbeddingsVectors"], [156, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[157, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[157, 2, 1, "", "setCleanAnnotations"], [157, 2, 1, "", "setInputCol"], [157, 2, 1, "", "setOutputAsArray"], [157, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[158, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[159, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[160, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[160, 2, 1, "", "getOutputCol"], [160, 2, 1, "", "setInputCol"], [160, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[162, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[162, 2, 1, "", "annotate"], [162, 2, 1, "", "fullAnnotate"], [162, 2, 1, "", "fullAnnotateImage"], [162, 2, 1, "", "getIgnoreUnsupported"], [162, 2, 1, "", "setIgnoreUnsupported"], [162, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[163, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[163, 2, 1, "", "getOutputCols"], [163, 2, 1, "", "setCleanupMode"], [163, 2, 1, "", "setIdCol"], [163, 2, 1, "", "setInputCols"], [163, 2, 1, "", "setMetadataCol"], [163, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[164, 1, 1, "", "RecursivePipeline"], [164, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[165, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[165, 2, 1, "", "setCsvDelimiter"], [165, 2, 1, "", "setEscapeCsvDelimiter"], [165, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[166, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[166, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[167, 0, 0, "-", "annotator_approach"], [168, 0, 0, "-", "annotator_model"], [169, 0, 0, "-", "annotator_properties"], [170, 0, 0, "-", "annotator_type"], [171, 0, 0, "-", "coverage_result"], [173, 0, 0, "-", "match_strategy"], [174, 0, 0, "-", "properties"], [175, 0, 0, "-", "read_as"], [176, 0, 0, "-", "recursive_annotator_approach"], [177, 0, 0, "-", "storage"], [178, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[167, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[168, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[169, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[169, 2, 1, "", "getInputCols"], [169, 2, 1, "", "getLazyAnnotator"], [169, 2, 1, "", "getOutputCol"], [169, 2, 1, "", "setInputCols"], [169, 2, 1, "", "setLazyAnnotator"], [169, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[173, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[174, 1, 1, "", "HasEmbeddingsProperties"], [174, 3, 1, "", "setBeamSize"], [174, 3, 1, "", "setDoSample"], [174, 3, 1, "", "setMaxOutputLength"], [174, 3, 1, "", "setMinOutputLength"], [174, 3, 1, "", "setNReturnSequences"], [174, 3, 1, "", "setNoRepeatNgramSize"], [174, 3, 1, "", "setRepetitionPenalty"], [174, 3, 1, "", "setTask"], [174, 3, 1, "", "setTemperature"], [174, 3, 1, "", "setTopK"], [174, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[174, 2, 1, "", "getDimension"], [174, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[175, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[176, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[178, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[179, 3, 1, "", "explode_annotations_col"], [179, 3, 1, "", "filter_by_annotations_col"], [179, 3, 1, "", "map_annotations"], [179, 3, 1, "", "map_annotations_array"], [179, 3, 1, "", "map_annotations_col"], [179, 3, 1, "", "map_annotations_cols"], [179, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[181, 0, 0, "-", "annotator_java_ml"], [182, 0, 0, "-", "annotator_transformer"], [183, 0, 0, "-", "extended_java_wrapper"], [185, 0, 0, "-", "params_getters_setters"], [186, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[181, 1, 1, "", "AnnotatorJavaMLReadable"], [181, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[181, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[182, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[183, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[183, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[185, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[185, 2, 1, "", "getParamValue"], [185, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[186, 1, 1, "", "RecursiveEstimator"], [186, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[186, 2, 1, "", "fit"]], "sparknlp.logging": [[187, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[187, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[187, 2, 1, "", "end"], [187, 2, 1, "", "log_asset"], [187, 2, 1, "", "log_asset_data"], [187, 2, 1, "", "log_completed_run"], [187, 2, 1, "", "log_metrics"], [187, 2, 1, "", "log_parameters"], [187, 2, 1, "", "log_pipeline_parameters"], [187, 2, 1, "", "log_visualization"], [187, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[190, 0, 0, "-", "pretrained_pipeline"], [191, 0, 0, "-", "resource_downloader"], [192, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[190, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[190, 2, 1, "", "annotate"], [190, 2, 1, "", "fullAnnotate"], [190, 2, 1, "", "fullAnnotateImage"], [190, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[191, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[191, 2, 1, "", "clearCache"], [191, 2, 1, "", "downloadModel"], [191, 2, 1, "", "downloadModelDirectly"], [191, 2, 1, "", "downloadPipeline"], [191, 2, 1, "", "showAvailableAnnotators"], [191, 2, 1, "", "showPublicModels"], [191, 2, 1, "", "showPublicPipelines"], [191, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[193, 0, 0, "-", "conll"], [194, 0, 0, "-", "conllu"], [196, 0, 0, "-", "pos"], [197, 0, 0, "-", "pub_tator"], [198, 0, 0, "-", "spacy_to_annotation"], [199, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[193, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[193, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[194, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[194, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[196, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[196, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[197, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[197, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[198, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 208], "start": 0, "spark": [0, 1, 203, 208, 212], "nlp": [0, 1, 203, 212], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 203], "us": [0, 203, 212], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 196, 197, 198], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 206, 207, 208], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 178, 179, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 196, 197, 198, 202], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 196, 197, 198], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 31, 50, 54, 60, 77, 91, 93, 94, 96, 101, 106, 114, 120, 122, 125, 130, 136, 138, 145, 150, 161, 172, 180, 184, 188, 189, 195], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "deberta_for_zero_shot_classif": 26, "exampl": 26, "return": 26, "distil_bert_for_question_answ": 27, "distil_bert_for_sequence_classif": 28, "distil_bert_for_token_classif": 29, "distil_bert_for_zero_shot_classif": 30, "longformer_for_question_answ": 32, "longformer_for_sequence_classif": 33, "longformer_for_token_classif": 34, "mpnet_for_question_answ": 35, "mpnet_for_sequence_classif": 36, "multi_classifier_dl": 37, "roberta_for_question_answ": 38, "roberta_for_sequence_classif": 39, "roberta_for_token_classif": 40, "roberta_for_zero_shot_classif": 41, "sentiment_dl": 42, "tapas_for_question_answ": 43, "xlm_roberta_for_question_answ": 44, "xlm_roberta_for_sequence_classif": 45, "xlm_roberta_for_token_classif": 46, "xlm_roberta_for_zero_shot_classif": 47, "xlnet_for_sequence_classif": 48, "xlnet_for_token_classif": 49, "coref": [50, 51], "spanbert_coref": 51, "cv": [52, 53, 54, 55, 56, 57], "clip_for_zero_shot_classif": 52, "convnext_for_image_classif": 53, "swin_for_image_classif": 55, "vision_encoder_decoder_for_image_capt": 56, "vit_for_image_classif": 57, "date2_chunk": 58, "depend": [59, 60, 61], "dependency_pars": 59, "typed_dependency_pars": 61, "document_character_text_splitt": 62, "document_norm": 63, "document_token_splitt": 64, "document_token_splitter_test": 65, "embed": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "albert_embed": 66, "bert_embed": 67, "bert_sentence_embed": 68, "bge_embed": 69, "camembert_embed": 70, "chunk_embed": 71, "deberta_embed": 72, "distil_bert_embed": 73, "doc2vec": 74, "e5_embed": 75, "elmo_embed": 76, "instructor_embed": 78, "longformer_embed": 79, "mpnet_embed": 80, "roberta_embed": 81, "roberta_sentence_embed": 82, "sentence_embed": 83, "universal_sentence_encod": 84, "word2vec": 85, "word_embed": 86, "xlm_roberta_embed": 87, "xlm_roberta_sentence_embed": 88, "xlnet_embed": 89, "er": [90, 91], "entity_rul": 90, "graph_extract": 92, "subpackag": [93, 180], "keyword_extract": [94, 95], "yake_keyword_extract": 95, "ld_dl": [96, 97], "language_detector_dl": 97, "lemmat": 98, "matcher": [99, 100, 101, 102, 103, 104], "big_text_match": 99, "date_match": 100, "multi_date_match": 102, "regex_match": 103, "text_match": 104, "n_gram_gener": 105, "ner": [106, 107, 108, 109, 110, 111, 112], "ner_approach": 107, "ner_convert": 108, "ner_crf": 109, "ner_dl": 110, "ner_overwrit": 111, "zero_shot_ner_model": 112, "normal": 113, "openai": [114, 115, 116], "openai_complet": 115, "openai_embed": 116, "param": [117, 118, 119], "classifier_encod": 117, "evaluation_dl_param": 118, "po": [120, 121, 196, 213], "perceptron": 121, "sentenc": [122, 123, 124, 208], "sentence_detector": 123, "sentence_detector_dl": 124, "sentiment": [125, 126, 127], "sentiment_detector": 126, "vivekn_senti": 127, "seq2seq": [128, 129, 130, 131, 132, 133, 134], "bart_transform": 128, "gpt2_transform": 129, "llama2_transform": 131, "m2m100_transform": 132, "marian_transform": 133, "t5_transform": 134, "similar": [135, 136], "document_similarity_rank": 135, "spell_check": [137, 138, 139, 140], "context_spell_check": 137, "norvig_sweet": 139, "symmetric_delet": 140, "stemmer": 141, "stop_words_clean": 142, "tf_ner_dl_graph_build": 143, "token": [144, 145, 146, 147, 148, 208], "chunk_token": 144, "recursive_token": 146, "regex_token": 147, "token2_chunk": 149, "w": [150, 151], "word_segment": 151, "base": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "audio_assembl": 152, "doc2_chunk": 153, "document_assembl": 154, "embeddings_finish": 155, "finish": [156, 208], "graph_finish": 157, "has_recursive_fit": 158, "has_recursive_transform": 159, "image_assembl": 160, "light_pipelin": 162, "multi_document_assembl": 163, "recursive_pipelin": 164, "table_assembl": 165, "token_assembl": 166, "common": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 207], "annotator_approach": 167, "annotator_model": 168, "annotator_properti": 169, "annotator_typ": 170, "coverage_result": 171, "match_strategi": 173, "properti": 174, "function": [174, 178, 179, 180, 207, 209], "read_a": 175, "recursive_annotator_approach": 176, "storag": 177, "util": [178, 192, 201], "packag": 180, "intern": [181, 182, 183, 184, 185, 186], "annotator_java_ml": 181, "annotator_transform": 182, "extended_java_wrapp": 183, "params_getters_sett": 185, "recurs": 186, "log": [187, 188, 203, 205], "comet": [187, 203], "pretrain": [189, 190, 191, 192, 207, 211, 212], "pretrained_pipelin": 190, "resource_download": 191, "train": [193, 194, 195, 196, 197, 198, 199, 213], "conll": [193, 213], "conllu": [194, 213], "pub_tat": 197, "spacy_to_annot": 198, "tfgraph": 199, "upload_to_hub": 200, "api": 202, "refer": 202, "A": 203, "meta": 203, "machin": [203, 204], "learn": [203, 204], "platform": [203, 204], "pipelin": [203, 208, 211, 212], "paramet": 203, "evalu": 203, "metric": 203, "visual": 203, "run": 203, "an": 203, "offlin": 203, "experi": 203, "mlflow": 204, "lifecycl": 204, "third": 205, "parti": 205, "project": 205, "approach": 207, "model": 207, "note": 207, "avail": [207, 212], "set": 208, "up": 208, "your": 208, "own": 208, "type": 208, "necessari": 208, "import": 208, "construct": 208, "documentassembl": 208, "data": 208, "detect": 208, "out": 208, "put": 208, "all": 208, "togeth": 208, "ml": [208, 212], "helper": 209, "user": 210, "guid": 210, "light": 211, "convert": 211, "pipelinemodel": 211, "download": 212, "As": 212, "lightpipelin": 212, "load": 213, "dataset": 213, "spell": 213, "checker": 213, "pubtat": 213}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [203, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [95, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [137, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [190, "classes"], [191, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [197, "classes"], [198, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [31, "submodules"], [50, "submodules"], [54, "submodules"], [60, "submodules"], [77, "submodules"], [91, "submodules"], [93, "submodules"], [94, "submodules"], [96, "submodules"], [101, "submodules"], [106, "submodules"], [114, "submodules"], [120, "submodules"], [122, "submodules"], [125, "submodules"], [130, "submodules"], [136, "submodules"], [138, "submodules"], [145, "submodules"], [150, "submodules"], [161, "submodules"], [172, "submodules"], [180, "submodules"], [184, "submodules"], [188, "submodules"], [189, "submodules"], [195, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Examples": [[26, "examples"]], "Returns": [[26, "returns"], [26, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[31, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[42, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[43, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[50, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[51, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[52, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[53, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[54, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[55, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[56, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[57, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[58, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[59, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[60, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[61, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[62, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[63, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[64, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[65, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[66, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[67, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[69, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[70, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[71, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[73, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[74, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[75, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[76, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[77, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[78, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[79, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[80, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[81, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[82, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[83, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[84, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[85, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[86, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[87, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[89, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[90, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[91, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[92, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[93, "module-sparknlp.annotator"]], "Subpackages": [[93, "subpackages"], [180, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[94, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[95, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[96, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[97, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[98, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[99, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[100, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[101, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[102, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[103, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[104, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[105, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[106, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[107, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[108, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[109, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[110, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[111, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[112, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[113, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[114, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[115, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[116, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[117, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[118, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[119, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[120, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[121, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[122, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[123, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[124, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[125, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[126, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[127, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[128, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[129, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[130, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[131, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[132, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[133, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[134, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[135, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[136, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[137, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[138, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[139, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[140, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[141, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[142, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[143, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[144, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[145, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[146, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[147, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[148, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[149, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[150, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[151, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[152, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[153, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[154, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[155, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[156, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[157, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[158, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[159, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[160, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[161, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[162, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[163, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[164, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[165, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[166, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[167, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[168, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[169, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[170, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[171, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[172, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[173, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[174, "module-sparknlp.common.properties"]], "Functions": [[174, "functions"], [178, "functions"], [179, "functions"], [180, "functions"]], "sparknlp.common.read_as": [[175, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[176, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[177, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[178, "module-sparknlp.common.utils"]], "sparknlp.functions": [[179, "module-sparknlp.functions"]], "sparknlp": [[180, "module-sparknlp"]], "Package Contents": [[180, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[181, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[182, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[183, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[184, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[185, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[186, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[187, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[188, "module-sparknlp.logging"]], "sparknlp.pretrained": [[189, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[190, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[191, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[192, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[193, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[194, "module-sparknlp.training.conllu"]], "sparknlp.training": [[195, "module-sparknlp.training"]], "sparknlp.training.pos": [[196, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[197, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[198, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[199, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[200, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[201, "module-sparknlp.util"]], "API Reference": [[202, "api-reference"]], "Modules": [[202, "modules"]], "Comet - A meta machine learning platform": [[203, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[203, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[203, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[203, "logging-evaluation-metrics"]], "Logging Visualizations": [[203, "logging-visualizations"]], "Running An Offline Experiment": [[203, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[204, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[205, "third-party-projects"]], "Logging": [[205, "logging"]], "Annotation": [[206, "annotation"]], "Annotators": [[207, "annotators"]], "Annotator Approaches": [[207, "annotator-approaches"]], "Annotator Models": [[207, "annotator-models"]], "Note": [[207, "note"]], "Pretrained Models": [[207, "pretrained-models"]], "Common Functions": [[207, "common-functions"]], "Available Annotators": [[207, "available-annotators"]], "Setting up your own pipeline": [[208, "setting-up-your-own-pipeline"]], "Annotator types": [[208, "annotator-types"]], "Necessary imports": [[208, "necessary-imports"]], "Constructing the Pipeline": [[208, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[208, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[208, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[208, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[208, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[209, "helper-functions"]], "User Guide": [[210, "user-guide"]], "Light Pipelines": [[211, "light-pipelines"]], "Converting PipelineModels": [[211, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[211, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[212, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[212, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[212, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[212, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[212, "available-pipelines"]], "Loading datasets for training": [[213, "loading-datasets-for-training"]], "POS Dataset": [[213, "pos-dataset"]], "CoNLL Dataset": [[213, "conll-dataset"]], "CoNLLU Dataset": [[213, "conllu-dataset"]], "Spell Checkers Dataset": [[213, "spell-checkers-dataset"]], "PubTator Dataset": [[213, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [31, "module-sparknlp.annotator.classifier_dl"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [42, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [43, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [48, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [49, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [50, "module-sparknlp.annotator.coref"], [51, "module-sparknlp.annotator.coref.spanbert_coref"], [52, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [53, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [54, "module-sparknlp.annotator.cv"], [55, "module-sparknlp.annotator.cv.swin_for_image_classification"], [56, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [57, "module-sparknlp.annotator.cv.vit_for_image_classification"], [58, "module-sparknlp.annotator.date2_chunk"], [59, "module-sparknlp.annotator.dependency.dependency_parser"], [60, "module-sparknlp.annotator.dependency"], [61, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [62, "module-sparknlp.annotator.document_character_text_splitter"], [63, "module-sparknlp.annotator.document_normalizer"], [64, "module-sparknlp.annotator.document_token_splitter"], [65, "module-sparknlp.annotator.document_token_splitter_test"], [66, "module-sparknlp.annotator.embeddings.albert_embeddings"], [67, "module-sparknlp.annotator.embeddings.bert_embeddings"], [68, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [69, "module-sparknlp.annotator.embeddings.bge_embeddings"], [70, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [71, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [72, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [73, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [74, "module-sparknlp.annotator.embeddings.doc2vec"], [75, "module-sparknlp.annotator.embeddings.e5_embeddings"], [76, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [77, "module-sparknlp.annotator.embeddings"], [78, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [79, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [80, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [81, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [82, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [83, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [84, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [85, "module-sparknlp.annotator.embeddings.word2vec"], [86, "module-sparknlp.annotator.embeddings.word_embeddings"], [87, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [88, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [89, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [90, "module-sparknlp.annotator.er.entity_ruler"], [91, "module-sparknlp.annotator.er"], [92, "module-sparknlp.annotator.graph_extraction"], [93, "module-sparknlp.annotator"], [94, "module-sparknlp.annotator.keyword_extraction"], [95, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [96, "module-sparknlp.annotator.ld_dl"], [97, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [98, "module-sparknlp.annotator.lemmatizer"], [99, "module-sparknlp.annotator.matcher.big_text_matcher"], [100, "module-sparknlp.annotator.matcher.date_matcher"], [101, "module-sparknlp.annotator.matcher"], [102, "module-sparknlp.annotator.matcher.multi_date_matcher"], [103, "module-sparknlp.annotator.matcher.regex_matcher"], [104, "module-sparknlp.annotator.matcher.text_matcher"], [105, "module-sparknlp.annotator.n_gram_generator"], [106, "module-sparknlp.annotator.ner"], [107, "module-sparknlp.annotator.ner.ner_approach"], [108, "module-sparknlp.annotator.ner.ner_converter"], [109, "module-sparknlp.annotator.ner.ner_crf"], [110, "module-sparknlp.annotator.ner.ner_dl"], [111, "module-sparknlp.annotator.ner.ner_overwriter"], [112, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [113, "module-sparknlp.annotator.normalizer"], [114, "module-sparknlp.annotator.openai"], [115, "module-sparknlp.annotator.openai.openai_completion"], [116, "module-sparknlp.annotator.openai.openai_embeddings"], [117, "module-sparknlp.annotator.param.classifier_encoder"], [118, "module-sparknlp.annotator.param.evaluation_dl_params"], [119, "module-sparknlp.annotator.param"], [120, "module-sparknlp.annotator.pos"], [121, "module-sparknlp.annotator.pos.perceptron"], [122, "module-sparknlp.annotator.sentence"], [123, "module-sparknlp.annotator.sentence.sentence_detector"], [124, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [125, "module-sparknlp.annotator.sentiment"], [126, "module-sparknlp.annotator.sentiment.sentiment_detector"], [127, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [128, "module-sparknlp.annotator.seq2seq.bart_transformer"], [129, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [130, "module-sparknlp.annotator.seq2seq"], [131, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [132, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [133, "module-sparknlp.annotator.seq2seq.marian_transformer"], [134, "module-sparknlp.annotator.seq2seq.t5_transformer"], [135, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [136, "module-sparknlp.annotator.similarity"], [137, "module-sparknlp.annotator.spell_check.context_spell_checker"], [138, "module-sparknlp.annotator.spell_check"], [139, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [140, "module-sparknlp.annotator.spell_check.symmetric_delete"], [141, "module-sparknlp.annotator.stemmer"], [142, "module-sparknlp.annotator.stop_words_cleaner"], [143, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [144, "module-sparknlp.annotator.token.chunk_tokenizer"], [145, "module-sparknlp.annotator.token"], [146, "module-sparknlp.annotator.token.recursive_tokenizer"], [147, "module-sparknlp.annotator.token.regex_tokenizer"], [148, "module-sparknlp.annotator.token.tokenizer"], [149, "module-sparknlp.annotator.token2_chunk"], [150, "module-sparknlp.annotator.ws"], [151, "module-sparknlp.annotator.ws.word_segmenter"], [152, "module-sparknlp.base.audio_assembler"], [153, "module-sparknlp.base.doc2_chunk"], [154, "module-sparknlp.base.document_assembler"], [155, "module-sparknlp.base.embeddings_finisher"], [156, "module-sparknlp.base.finisher"], [157, "module-sparknlp.base.graph_finisher"], [158, "module-sparknlp.base.has_recursive_fit"], [159, "module-sparknlp.base.has_recursive_transform"], [160, "module-sparknlp.base.image_assembler"], [161, "module-sparknlp.base"], [162, "module-sparknlp.base.light_pipeline"], [163, "module-sparknlp.base.multi_document_assembler"], [164, "module-sparknlp.base.recursive_pipeline"], [165, "module-sparknlp.base.table_assembler"], [166, "module-sparknlp.base.token_assembler"], [167, "module-sparknlp.common.annotator_approach"], [168, "module-sparknlp.common.annotator_model"], [169, "module-sparknlp.common.annotator_properties"], [170, "module-sparknlp.common.annotator_type"], [171, "module-sparknlp.common.coverage_result"], [172, "module-sparknlp.common"], [173, "module-sparknlp.common.match_strategy"], [174, "module-sparknlp.common.properties"], [175, "module-sparknlp.common.read_as"], [176, "module-sparknlp.common.recursive_annotator_approach"], [177, "module-sparknlp.common.storage"], [178, "module-sparknlp.common.utils"], [179, "module-sparknlp.functions"], [180, "module-sparknlp"], [181, "module-sparknlp.internal.annotator_java_ml"], [182, "module-sparknlp.internal.annotator_transformer"], [183, "module-sparknlp.internal.extended_java_wrapper"], [184, "module-sparknlp.internal"], [185, "module-sparknlp.internal.params_getters_setters"], [186, "module-sparknlp.internal.recursive"], [187, "module-sparknlp.logging.comet"], [188, "module-sparknlp.logging"], [189, "module-sparknlp.pretrained"], [190, "module-sparknlp.pretrained.pretrained_pipeline"], [191, "module-sparknlp.pretrained.resource_downloader"], [192, "module-sparknlp.pretrained.utils"], [193, "module-sparknlp.training.conll"], [194, "module-sparknlp.training.conllu"], [195, "module-sparknlp.training"], [196, "module-sparknlp.training.pos"], [197, "module-sparknlp.training.pub_tator"], [198, "module-sparknlp.training.spacy_to_annotation"], [199, "module-sparknlp.training.tfgraphs"], [200, "module-sparknlp.upload_to_hub"], [201, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "getclasses() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (debertaforzeroshotclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[31, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "pretrained() (mpnetforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "getclasses() (mpnetforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "pretrained() (mpnetforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[42, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[43, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[43, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[43, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[43, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[50, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[51, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[52, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[53, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[54, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[55, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[56, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[57, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[58, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[58, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[58, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[59, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[60, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[61, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[62, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[63, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[64, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[65, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[65, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[65, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[66, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[67, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[69, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[70, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[71, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[71, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[71, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[71, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[73, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[74, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[75, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[76, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[77, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[78, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[79, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[80, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[81, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[82, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[83, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[83, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[83, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[84, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[84, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[84, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[84, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[84, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[84, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[85, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[85, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[86, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[86, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[87, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[87, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[87, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[87, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[87, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[89, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[89, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[89, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[89, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[89, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[90, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[90, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[90, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[90, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[90, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[90, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[90, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[91, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[92, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[92, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[93, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[94, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[95, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[95, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[96, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[97, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[97, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[97, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[97, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[97, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[97, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[97, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[98, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[98, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[98, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[98, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[98, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[98, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[98, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[99, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[99, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[100, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[100, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[101, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[102, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[102, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[103, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[103, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[103, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[103, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[103, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[103, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[103, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[104, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[104, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[105, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[105, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[105, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[105, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[105, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[106, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[107, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[107, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[108, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[108, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[108, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[108, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[108, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[109, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[109, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[110, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[110, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[111, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[111, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[111, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[111, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[111, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[112, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[112, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[112, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[112, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[112, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[112, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[112, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[113, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[113, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[113, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[113, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[113, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[113, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[113, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[113, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[114, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[115, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[115, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[116, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[116, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[116, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[116, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[117, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[117, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[118, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[118, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[119, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[120, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[121, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[121, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[121, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[121, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[121, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[121, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[121, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[122, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[123, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[123, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[124, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[124, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[125, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[126, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[126, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[126, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[126, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[127, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[127, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[127, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[127, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[127, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[127, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[128, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[128, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[129, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[129, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[130, "module-sparknlp.annotator.seq2seq"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "loadsavedmodel() (llama2transformer static method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "pretrained() (llama2transformer static method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "setconfigprotobytes() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[131, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[131, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "loadsavedmodel() (m2m100transformer static method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "pretrained() (m2m100transformer static method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "setbeamsize() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[132, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[132, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[133, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[133, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[134, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[134, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "asretriever() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[135, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[135, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[136, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[137, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[137, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[138, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[139, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[139, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[140, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[140, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[141, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[141, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[142, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[142, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[142, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[142, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[142, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[142, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[142, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[143, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[143, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[144, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[144, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[144, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[145, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[146, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[146, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[146, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[146, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[146, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[146, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[146, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[147, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[147, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[148, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[148, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[148, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[148, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[148, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[148, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[148, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[149, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[149, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[150, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[151, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[151, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[152, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[152, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[152, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[152, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[152, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[153, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[153, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[154, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[154, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[154, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[154, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[154, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[154, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[154, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[154, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[155, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[155, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[156, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[156, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[156, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[157, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[157, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[157, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[157, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[157, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[157, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[158, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[158, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[159, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[159, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[160, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[160, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[160, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[160, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[160, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[161, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[162, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[162, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[162, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[162, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[162, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[162, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[162, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[162, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[163, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[163, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[164, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[164, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[164, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[165, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[165, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[165, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[165, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[165, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[166, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[166, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[166, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[167, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[167, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[168, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[168, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[169, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[169, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[170, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[171, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[172, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[173, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[173, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[174, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[174, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[174, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[174, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[174, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[175, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[175, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[176, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[176, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[177, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[178, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[178, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[179, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[179, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[179, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[179, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[179, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[179, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[179, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[179, "module-sparknlp.functions"]], "sparknlp": [[180, "module-sparknlp"]], "start() (in module sparknlp)": [[180, "sparknlp.start"]], "version() (in module sparknlp)": [[180, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[181, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[181, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[181, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[181, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[182, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[182, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[183, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[183, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[183, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[184, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[185, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[185, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[185, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[185, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[186, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[186, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[186, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[186, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[187, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[187, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[187, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[188, "module-sparknlp.logging"]], "sparknlp.pretrained": [[189, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[190, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[190, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[190, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[190, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[190, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[190, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[191, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[191, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[192, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[193, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[193, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[193, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[194, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[194, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[194, "module-sparknlp.training.conllu"]], "sparknlp.training": [[195, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[196, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[196, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[196, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[197, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[197, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[197, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[198, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[198, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[199, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[200, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[201, "module-sparknlp.util"]]}})