Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 95, 96, 97, 100, 101, 102, 105, 106, 107, 108, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 142, 143, 144, 146, 147, 149, 150, 152, 155, 157, 158, 159, 160, 161, 163, 164, 168, 169, 175, 176, 180, 181, 182, 185, 186, 191, 193, 197, 198, 201, 202, 203, 205, 206, 207], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 100, 105, 106, 107, 108, 109, 112, 113, 118, 120, 121, 123, 125, 126, 128, 129, 132, 134, 135, 137, 144, 146, 149, 150, 158, 159, 160, 169, 173, 182, 185, 186, 188, 189, 191, 198, 200, 202, 203, 205, 206, 207, 208], "quick": [0, 198, 203], "refer": [0, 1, 5, 8, 48, 50, 52, 54, 63, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 92, 109, 112, 120, 121, 124, 125, 126, 128, 129, 132, 134, 135, 146, 148, 149, 158, 169, 202, 204, 205], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 56, 58, 59, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 76, 78, 80, 84, 86, 87, 89, 94, 95, 96, 100, 101, 105, 106, 107, 110, 112, 115, 120, 123, 134, 135, 142, 143, 146, 149, 152, 158, 168, 170, 173, 175, 188, 189, 193, 198, 202, 207], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 163, 164, 169, 173, 175, 180, 181, 182, 186, 188, 198, 202, 205, 206], "up": [0, 1, 5, 8, 22, 34, 53, 62, 71, 76, 80, 82, 92, 112, 125, 126, 128, 129, 169, 175, 198, 202, 205, 206], "your": [0, 1, 22, 34, 39, 56, 61, 70, 71, 78, 80, 82, 95, 96, 100, 101, 105, 106, 107, 110, 112, 113, 118, 123, 124, 132, 134, 139, 141, 146, 150, 200, 202, 205, 206, 208], "environ": [0, 62, 199], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 67, 71, 82, 92, 128, 146], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 94, 95, 96, 100, 101, 106, 107, 109, 110, 112, 113, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 143, 146, 150, 151, 160, 175], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 92, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 155, 185, 186, 193, 202, 205], "shell": 0, "packag": [0, 63, 69, 182, 199, 200], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 94, 95, 96, 100, 101, 106, 107, 109, 110, 112, 113, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 143, 146, 160, 175], "nlp_2": [0, 175], "12": [0, 63, 84, 85, 86, 92, 97, 99, 105, 118, 132, 144, 157, 174, 175, 185, 191, 193, 201], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 155, 157, 158, 160, 161, 174, 175, 178, 181, 182, 185, 188, 189, 191, 192, 202, 203], "submit": [0, 182, 198], "extern": [0, 92, 95, 100, 101, 107, 132, 138, 159, 173, 188, 189, 191, 192], "jar": [0, 175], "after": [0, 55, 56, 58, 71, 78, 79, 82, 97, 99, 105, 112, 141, 161, 182, 201, 202], "compil": 0, "build": [0, 69, 70, 78, 79, 89, 92, 96, 126, 182, 198], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 173, 174, 175, 181, 182, 186, 188, 191, 192, 193, 198, 199, 201, 202, 203, 205, 206, 207, 208], "built": [0, 22, 34, 158], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 50, 52, 53, 63, 92, 112, 125, 126, 128, 129, 130, 158, 169], "apach": [0, 158, 175], "x": [0, 34, 174, 188, 208], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 143, 146, 149, 150, 151, 158, 161, 169, 182, 185, 186, 192, 198, 199, 201, 202, 203, 204, 205, 206], "you": [0, 14, 18, 29, 38, 44, 56, 58, 59, 61, 62, 66, 68, 70, 72, 78, 80, 89, 97, 108, 112, 128, 150, 152, 157, 175, 182, 186, 191, 193, 198, 200, 202, 203, 206, 207, 208], "need": [0, 5, 7, 8, 10, 56, 58, 62, 66, 70, 72, 78, 83, 87, 89, 92, 97, 100, 106, 107, 110, 115, 118, 121, 124, 126, 132, 134, 135, 142, 143, 147, 155, 157, 182, 186, 188, 189, 191, 198, 200, 202, 203, 206, 208], "java": [0, 94, 113, 130, 162, 163, 171, 177, 178, 181, 186], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 56, 58, 60, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 78, 79, 84, 85, 86, 97, 102, 107, 108, 112, 115, 126, 132, 144, 146, 188, 193], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 56, 58, 59, 62, 63, 64, 67, 69, 70, 73, 75, 76, 78, 81, 83, 84, 85, 86, 87, 89, 92, 94, 95, 97, 100, 102, 105, 107, 108, 109, 110, 112, 118, 120, 121, 124, 125, 126, 128, 129, 132, 136, 138, 146, 150, 157, 159, 160, 168, 169, 170, 174, 175, 182, 186, 192, 193, 198, 199, 200, 201, 202, 203, 206, 207, 208], "note": [0, 5, 7, 8, 14, 18, 22, 29, 34, 38, 39, 44, 53, 61, 63, 70, 73, 78, 80, 83, 84, 86, 92, 107, 112, 125, 126, 128, 129, 157, 175, 207], "sinc": [0, 60, 62, 77, 92, 126, 175, 202, 203, 207], "version": [0, 8, 60, 70, 114, 115, 138, 164, 169, 175, 180, 181, 185, 186, 202, 207], "6": [0, 22, 39, 52, 64, 65, 69, 73, 92, 96, 101, 102, 108, 118, 125, 134, 144, 175, 189, 193, 202], "deprec": [0, 175], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 50, 52, 53, 54, 62, 80, 83, 87, 94, 97, 99, 105, 106, 107, 110, 115, 120, 121, 125, 126, 128, 129, 132, 138, 169, 175, 181, 182, 186, 198, 200, 202], "consid": [0, 59, 83, 89, 92, 112, 128, 132, 134, 135, 137, 141, 175, 186], "stick": [0, 175], "lower": [0, 60, 63, 92, 112, 130, 132, 148, 175], "7": [0, 9, 39, 52, 64, 65, 69, 97, 99, 118, 126, 151, 191, 193, 201], "we": [0, 5, 7, 8, 22, 34, 50, 52, 54, 63, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 92, 106, 107, 110, 112, 121, 125, 126, 128, 129, 132, 134, 143, 157, 174, 198, 201, 202, 203, 206, 207, 208], "recommend": [0, 53, 73, 86, 112, 123, 124, 125, 126, 128, 129], "4": [0, 5, 8, 64, 65, 66, 69, 72, 73, 75, 76, 83, 100, 106, 108, 112, 118, 125, 126, 138, 144, 189, 193], "It": [0, 8, 12, 14, 16, 18, 22, 24, 27, 29, 32, 34, 36, 38, 39, 40, 42, 44, 45, 49, 50, 52, 53, 59, 60, 62, 64, 65, 67, 69, 70, 71, 76, 78, 79, 82, 84, 85, 87, 92, 102, 124, 125, 128, 130, 132, 134, 135, 141, 151, 157, 186, 201, 206], "have": [0, 5, 14, 18, 22, 29, 34, 38, 39, 44, 61, 62, 63, 67, 70, 75, 78, 79, 83, 92, 100, 102, 105, 106, 107, 108, 112, 118, 120, 121, 126, 135, 144, 161, 177, 202, 203, 206], "basic": [0, 52, 92, 120, 201], "knowledg": [0, 70, 92, 152], "framework": [0, 7, 62, 125, 128, 129], "work": [0, 8, 50, 70, 75, 76, 94, 112, 125, 128, 129, 139, 201, 203, 207], "befor": [0, 60, 62, 83, 97, 99, 113, 125, 129, 130, 134, 142, 146, 163, 181, 198], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 64, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 94, 95, 96, 97, 100, 101, 106, 107, 110, 118, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 137, 139, 141, 146, 149, 158, 159, 186, 199, 200, 204, 207], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 157, 158, 160, 161, 182, 185, 188, 189, 191, 193, 198, 202, 203, 205, 206, 207], "first": [0, 2, 69, 71, 72, 73, 75, 82, 84, 85, 92, 100, 106, 107, 108, 120, 125, 128, 129, 132, 137, 142, 150, 161, 168, 198, 202, 203, 207], "let": [0, 70, 112, 141, 202], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 29, 31, 35, 38, 41, 44, 50, 52, 53, 54, 60, 62, 63, 66, 67, 69, 70, 71, 72, 76, 78, 79, 82, 84, 85, 87, 92, 100, 107, 110, 112, 113, 124, 125, 126, 128, 129, 130, 132, 134, 135, 141, 142, 143, 146, 147, 151, 157, 162, 163, 169, 171, 174, 177, 181, 182, 198, 201, 202, 203, 206], "make": [0, 49, 50, 52, 60, 67, 76, 77, 84, 85, 92, 112, 121, 124, 125, 134, 204, 208], "sure": [0, 124], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 22, 34, 39, 61, 62, 64, 65, 71, 78, 82, 83, 89, 107, 112, 115, 118, 139, 146, 157, 159, 174, 188, 189, 191, 192, 202, 203, 206, 208], "new": [0, 2, 3, 4, 9, 39, 48, 52, 55, 63, 64, 65, 69, 73, 75, 76, 83, 86, 108, 109, 112, 114, 115, 125, 126, 129, 132, 138, 151, 164, 169, 180, 181, 201, 202], "manag": [0, 92, 186, 199], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 52, 53, 59, 60, 63, 64, 65, 67, 80, 83, 86, 87, 90, 94, 97, 107, 110, 112, 125, 126, 128, 129, 132, 137, 142, 146, 150, 152, 168, 169, 182, 186, 197, 202, 207], "depend": [0, 2, 48, 67, 77, 80, 86, 87, 89, 90, 92, 94, 107, 128, 132, 146, 175], "Then": [0, 22, 34, 106, 107, 161, 182, 202], "sparknlp": [0, 198, 201, 202, 203, 204, 206, 207, 208], "n": [0, 85, 92, 102, 105, 106, 107, 112, 120, 121, 125, 126, 128, 129, 141, 157, 160, 169, 174, 185], "y": [0, 34, 61], "activ": [0, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 92], "jupyt": [0, 130, 182, 198], "now": [0, 67, 121, 157, 203], "should": [0, 2, 3, 4, 10, 22, 34, 39, 50, 52, 53, 54, 59, 62, 66, 71, 72, 82, 84, 92, 94, 101, 102, 106, 107, 112, 113, 115, 120, 121, 128, 130, 132, 142, 157, 163, 164, 177, 181, 185, 188, 189], "readi": [0, 22, 185, 202], "notebook": [0, 130, 182, 198], "run": [0, 62, 70, 92, 130, 182, 186, 199, 207], "also": [0, 22, 34, 39, 49, 50, 52, 53, 54, 60, 63, 73, 76, 83, 84, 85, 87, 89, 92, 97, 100, 105, 106, 107, 114, 115, 121, 124, 125, 137, 157, 160, 164, 169, 180, 198, 202, 203, 204, 205, 207], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 188, 189, 191, 192, 193, 199], "bin": 0, "A": [0, 5, 7, 39, 48, 50, 62, 63, 78, 79, 83, 87, 92, 95, 96, 100, 101, 102, 109, 110, 112, 113, 123, 125, 126, 128, 129, 130, 134, 135, 142, 143, 169, 182, 191, 200, 202, 208], "retriev": [0, 66, 72, 75, 83, 95, 134, 135, 136, 182, 185, 198, 202, 203], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 155, 157, 158, 159, 160, 161, 174, 182, 185, 188, 189, 191, 192, 193, 198, 201, 202, 205, 206, 207, 208], "manual": [0, 201], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 96, 125, 126, 128, 129, 175, 188, 189, 191, 192], "becaus": [0, 112, 113, 123, 130, 163, 181], "other": [0, 5, 9, 34, 50, 53, 61, 67, 80, 81, 89, 92, 110, 123, 125, 126, 129, 132, 139, 141, 150, 151, 202], "configur": [0, 50, 62, 80, 143, 175], "includ": [0, 52, 60, 62, 64, 65, 71, 73, 82, 84, 85, 86, 89, 92, 97, 105, 106, 107, 112, 125, 126, 129, 130, 132, 151, 182, 192, 199, 201, 202, 203, 208], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 63, 64, 67, 69, 70, 76, 78, 84, 86, 87, 89, 92, 97, 100, 121, 128, 132, 137, 146, 159, 161, 202, 203], "builder": [0, 138, 175], "appnam": [0, 175], "master": [0, 175], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 92, 125, 126, 128, 129, 137, 157, 175, 185, 206], "config": [0, 175, 199], "driver": [0, 175], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 63, 73, 83, 175], "16g": [0, 175], "maxresults": [0, 175], "0": [0, 5, 7, 8, 9, 10, 22, 34, 39, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 94, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 114, 115, 118, 120, 121, 123, 125, 126, 128, 129, 130, 132, 135, 138, 143, 144, 146, 149, 150, 151, 157, 158, 160, 161, 164, 169, 174, 175, 178, 180, 181, 182, 185, 186, 189, 191, 192, 193, 198, 201, 202, 207, 208], "kryoseri": [0, 175], "buffer": [0, 65, 83, 175], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 78, 79, 84, 85, 86, 92, 135, 175], "2000m": [0, 175], "getorcr": [0, 175], "main": [1, 87, 130, 143, 201, 205, 208], "page": [1, 60, 126, 185, 197, 205, 207], "github": [1, 69, 75, 78, 128, 185], "issu": [1, 146], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 159, 160, 161, 174, 182, 185, 186, 188, 189, 191, 192, 193, 198, 201, 202, 203, 205, 206, 207, 208], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 94, 95, 96, 100, 101, 105, 106, 107, 109, 110, 112, 113, 115, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 139, 141, 143, 146, 163, 169, 175, 181, 182, 185, 186, 198, 199, 201, 205, 207, 208], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 94, 95, 106, 107, 118, 121, 125, 126, 128, 129, 132, 134, 135, 137, 146, 186], "welcom": [1, 5, 7, 8], "python": [1, 94, 175], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 196, 198, 201, 202], "inform": [1, 56, 58, 75, 77, 83, 84, 92, 97, 105, 125, 132, 149, 158, 192, 198, 199, 200, 201, 202, 208], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 109, 112, 113, 115, 118, 120, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 142, 143, 144, 146, 148, 149, 150, 151, 157, 158, 159, 160, 161, 168, 169, 174, 175, 182, 185, 186, 188, 189, 191, 192, 199, 200, 201, 202, 203, 205], "librari": [1, 49, 50, 52, 53, 54, 94, 148, 149, 150, 158, 161, 207], "get": [1, 8, 22, 34, 92, 104, 118, 130, 132, 138, 143, 146, 147, 149, 150, 151, 155, 157, 158, 164, 169, 180, 198, 202, 207, 208], "start": [1, 5, 11, 15, 19, 23, 26, 31, 35, 41, 76, 89, 92, 106, 107, 121, 148, 175, 182, 198, 201, 203, 206, 207], "cheat": 1, "sheet": [1, 60], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 58, 62, 63, 65, 66, 69, 72, 73, 81, 84, 85, 92, 107, 110, 124, 132, 144, 146, 148, 150, 161, 201, 202, 203], "instal": [1, 182, 200], "session": [1, 175, 188, 189, 191, 192], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 113, 114, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 159, 160, 161, 163, 169, 174, 175, 178, 181, 182, 185, 186, 188, 189, 191, 192, 193, 198, 201, 202, 203, 206, 207, 208], "user": [1, 105, 106, 112, 113, 143, 159, 175, 182, 198], "guid": [1, 199], "annot": [1, 3, 4, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 173, 174, 175, 176, 177, 179, 181, 182, 185, 186, 187, 191, 193, 198, 199, 204, 205, 206, 207, 208], "own": [1, 22, 34, 39, 56, 62, 71, 82, 95, 96, 100, 101, 106, 107, 110, 118, 123, 124, 132, 134, 139, 141, 146, 205, 206, 208], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 155, 157, 158, 159, 160, 161, 175, 181, 182, 184, 185, 186, 187, 199, 201, 202, 205], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 94, 95, 96, 97, 100, 101, 106, 107, 108, 109, 118, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 143, 146, 150, 151, 157, 174, 175, 182, 198, 201, 205], "dataset": [1, 22, 34, 39, 56, 58, 67, 71, 72, 75, 76, 77, 78, 79, 82, 83, 92, 94, 106, 107, 115, 121, 126, 132, 146, 181, 185, 188, 189, 191, 192, 205], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 82, 84, 85, 86, 92, 94, 95, 96, 100, 101, 104, 106, 107, 110, 114, 115, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 139, 141, 146, 148, 157, 175, 182, 185, 198, 202, 203, 205, 206], "light": [1, 5, 70, 86, 92, 157, 205, 207], "helper": [1, 118, 146, 152, 174, 191, 192, 193, 205, 208], "function": [1, 73, 83, 125, 129, 150, 186, 197, 205], "third": [1, 120, 137, 183, 188], "parti": [1, 183], "project": [1, 92, 128, 130, 182, 199], "log": [1, 22, 34, 39, 107, 112, 115, 121, 126, 175], "api": [1, 112, 198, 202, 205], "modul": [1, 30, 57, 74, 88, 90, 91, 93, 98, 103, 111, 116, 117, 119, 122, 127, 133, 140, 145, 156, 167, 179, 184, 190], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 155, 157, 158, 159, 160, 161, 174, 182, 185, 188, 189, 190, 191, 192, 199, 201, 202, 206, 207, 208], "format": [2, 3, 4, 8, 49, 50, 52, 53, 54, 56, 58, 87, 89, 95, 96, 97, 99, 100, 101, 106, 107, 110, 115, 123, 125, 129, 134, 135, 143, 146, 147, 149, 151, 152, 155, 158, 160, 188, 189, 191, 192, 193, 199, 208], "annotatortyp": [2, 3, 4, 68, 102, 148, 149, 155, 158, 201], "begin": [2, 48, 105, 126, 141, 143, 148, 149, 158, 174, 201], "end": [2, 11, 15, 19, 23, 26, 31, 35, 41, 48, 107, 112, 113, 121, 125, 129, 141, 143, 146, 149, 158, 174, 182, 188, 198, 201, 203], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 174, 175, 182, 185, 188, 189, 193, 198, 199, 201, 202, 203, 206, 207], "metadata": [2, 3, 4, 40, 48, 55, 92, 101, 106, 107, 109, 118, 149, 151, 155, 157, 158, 174, 182, 186, 201, 203], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 89, 90, 106, 107, 108, 130, 149, 150, 151, 157, 158, 169, 174, 175, 181, 185, 201], "repres": [2, 3, 4, 56, 58, 63, 69, 75, 86, 87, 89, 96, 101, 102, 112, 113, 143, 182, 185, 202], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 164, 169, 174, 175, 182, 191, 198, 201, 202, 203], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 167, 170, 174, 175, 177, 178, 179, 182, 185, 186, 188, 189, 191, 192, 193, 197, 199, 200, 201, 202, 204, 205, 206, 208], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 100, 101, 106, 107, 108, 109, 110, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 143, 146, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 161, 167, 175, 179, 182, 185, 186, 188, 189, 191, 192, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208], "detail": [2, 3, 4, 8, 53, 84, 85, 92, 109, 125, 126, 128, 129, 169], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 164, 169, 173, 174, 175, 180, 181, 182, 185, 186, 188, 189, 191, 192], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 164, 169, 173, 174, 175, 180, 182, 185, 186, 188, 189, 191, 192], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 105, 106, 107, 108, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 142, 143, 146, 149, 151, 157, 158, 160, 169, 174, 175, 182, 185, 186, 188, 189, 191, 192, 193, 198, 201, 202, 203, 205, 206, 208], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 174, 176, 185, 191, 201, 202, 205], "possibl": [2, 3, 4, 68, 70, 84, 85, 87, 120, 132, 135, 149, 158, 168, 170, 182, 198], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 65, 68, 73, 75, 81, 84, 87, 89, 92, 94, 95, 97, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 124, 125, 126, 128, 129, 130, 132, 134, 137, 138, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 164, 168, 169, 170, 180, 182, 198, 208], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 115, 118, 123, 124, 125, 126, 128, 129, 132, 134, 135, 136, 137, 144, 146, 148, 150, 157, 159, 161, 169, 175, 185, 188, 192, 193, 202, 206, 207], "wordpiec": 2, "word_embed": [2, 63, 64, 67, 68, 69, 70, 73, 74, 76, 78, 80, 82, 84, 86, 90, 106, 107, 115], "sentence_embed": [2, 22, 34, 39, 65, 66, 71, 72, 74, 75, 77, 79, 81, 85, 90, 130, 182, 198, 202], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 50, 52, 54, 182, 198, 202], "date": [2, 55, 97, 99, 100], "entiti": [2, 9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 48, 52, 55, 67, 87, 88, 89, 96, 101, 103, 104, 105, 106, 107, 108, 109, 139, 144, 151, 157, 185], "sentiment": [2, 22, 34, 39, 73, 86, 90, 129, 175, 202, 203], "po": [2, 10, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 56, 58, 89, 90, 106, 107, 141, 146, 157, 174, 175, 185, 188, 190, 201, 205, 206, 207], "chunk": [2, 9, 10, 11, 15, 19, 23, 26, 31, 35, 40, 41, 55, 59, 61, 68, 71, 82, 87, 92, 96, 100, 101, 102, 105, 139, 144, 148, 151, 174, 182, 192, 198, 208], "named_ent": [2, 13, 17, 21, 25, 28, 33, 37, 43, 46, 89, 105, 106, 107, 108, 109, 115, 157, 185], "negex": 2, "labeled_depend": [2, 58], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 148, 158, 161, 169, 186, 202], "keyword": [2, 91, 92, 123], "dummi": [2, 60], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 56, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 89, 92, 94, 97, 102, 104, 106, 107, 110, 112, 114, 115, 118, 120, 121, 124, 125, 126, 128, 129, 130, 132, 135, 138, 142, 143, 146, 169, 175, 182, 188], "index": [2, 92, 96, 142, 175, 188], "charact": [2, 60, 73, 76, 87, 94, 100, 102, 110, 120, 121, 132, 134, 135, 142, 143, 146, 151], "under": [2, 70, 77, 86, 92, 175], "last": [2, 97, 99, 139, 193, 206], "string": [2, 8, 22, 34, 39, 48, 56, 60, 87, 100, 102, 108, 110, 121, 129, 135, 137, 141, 148, 149, 151, 155, 157, 158, 206], "dict": [2, 3, 4, 56, 58, 87, 95, 96, 100, 101, 106, 108, 109, 110, 112, 115, 123, 132, 134, 135, 143, 157, 173, 175, 181, 182, 185], "associ": [2, 3, 4, 34, 81, 87, 100, 105, 112, 182], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 59, 60, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 89, 92, 94, 97, 100, 104, 105, 107, 108, 109, 110, 112, 114, 120, 121, 125, 126, 128, 129, 130, 132, 137, 141, 143, 150, 151, 157, 158, 164, 174, 181, 182, 185, 186, 193, 197, 202], "vector": [2, 34, 64, 65, 66, 68, 69, 71, 72, 73, 81, 82, 83, 130, 150, 151, 201], "where": [2, 34, 69, 73, 87, 92, 95, 96, 100, 101, 102, 112, 118, 121, 123, 125, 126, 129, 130, 134, 135, 146, 148, 191], "applic": [2, 54, 92, 125, 168, 182, 183, 198, 200], "copi": [2, 3, 4, 186], "differ": [2, 3, 4, 50, 52, 56, 58, 73, 75, 78, 79, 84, 86, 92, 97, 120, 121, 132, 143, 146, 157, 182, 206], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 94, 95, 96, 101, 102, 104, 106, 107, 109, 112, 118, 120, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 141, 143, 146, 148, 157, 169, 173, 174, 175, 176, 181, 185, 186, 188, 189, 191, 192], "newli": [2, 3, 4], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 186, 202], "datatyp": [2, 174], "structtyp": 2, "schema": [2, 105, 182, 198], "look": [2, 62, 107, 134, 201], "like": [2, 5, 11, 15, 19, 22, 23, 26, 31, 35, 41, 48, 53, 60, 63, 66, 68, 70, 76, 80, 86, 89, 92, 100, 105, 112, 121, 124, 126, 132, 143, 146, 182, 198, 200, 201], "struct": [2, 149, 155, 158], "containsnul": [2, 34, 147, 149, 155, 158], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 94, 96, 97, 99, 101, 105, 107, 110, 120, 121, 130, 132, 134, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 182, 186, 188, 189, 192, 193, 198, 202, 203], "nullabl": [2, 34, 147, 149, 155, 158], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 157, 158, 160, 161, 174, 175, 182, 185, 188, 189, 191, 193, 198, 201, 202, 203, 208], "integ": [2, 50, 52, 53, 54, 149, 155, 158], "map": [2, 10, 34, 66, 83, 87, 112, 114, 115, 118, 132, 149, 155, 158, 164, 169, 174, 180, 181, 201], "kei": [2, 5, 50, 56, 58, 78, 79, 84, 85, 95, 109, 149, 155, 157, 158, 182, 185, 198], "valuecontainsnul": [2, 149, 155, 158], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 94, 95, 102, 107, 114, 118, 120, 121, 125, 126, 128, 129, 132, 139, 141, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 174, 203, 206], "element": [2, 34, 102, 112, 147, 149, 155, 158], "float": [2, 3, 5, 7, 8, 22, 34, 39, 50, 53, 55, 94, 106, 107, 109, 112, 114, 115, 121, 125, 126, 128, 129, 130, 132, 146, 147, 149, 150, 157, 158, 169], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 96, 125, 126, 128, 129, 157, 174, 181, 185, 188, 189, 191, 192], "arraytyp": [2, 148, 174], "fromrow": 2, "row": [2, 40, 59, 61, 83, 120, 121, 124, 149, 158, 160, 174, 188], "column": [2, 9, 22, 34, 39, 60, 83, 95, 104, 106, 107, 114, 115, 118, 124, 130, 138, 143, 146, 147, 148, 149, 150, 151, 152, 155, 158, 161, 164, 174, 185, 188, 191, 202], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 169, 174, 177, 181, 182, 185, 198, 201, 202, 203, 206, 207, 208], "an": [2, 5, 7, 8, 10, 22, 34, 39, 40, 49, 50, 52, 53, 54, 56, 59, 60, 62, 67, 69, 73, 75, 76, 77, 86, 87, 92, 94, 96, 97, 99, 100, 101, 102, 106, 107, 109, 112, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 139, 143, 146, 148, 149, 150, 151, 152, 157, 158, 161, 164, 169, 173, 174, 176, 180, 181, 182, 188, 189, 191, 192, 197, 199, 201, 202, 203, 205, 206], "annotationaudio": 3, "audio": [3, 147, 182], "alreadi": [3, 89, 92, 106, 107, 108, 143, 144, 157, 185, 206], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 54, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 82, 84, 85, 86, 89, 92, 94, 105, 106, 107, 115, 121, 125, 126, 129, 146, 147, 148, 149, 150, 151, 155, 158, 159, 161, 182, 198, 201, 202, 203, 204], "file": [3, 5, 7, 22, 34, 39, 56, 58, 60, 81, 83, 87, 95, 96, 100, 101, 106, 107, 110, 115, 121, 123, 132, 134, 135, 138, 143, 147, 160, 170, 175, 182, 188, 189, 191, 192, 198, 208], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 94, 107, 114, 125, 126, 128, 129, 132, 182], "annotationimag": [4, 157, 185], "origin": [4, 49, 50, 52, 53, 54, 63, 71, 76, 78, 82, 105, 121, 125, 155], "height": [4, 50, 52, 53, 54, 155], "width": [4, 50, 52, 53, 54, 155], "nchannel": [4, 155], "mode": [4, 22, 34, 39, 107, 115, 134, 149, 155, 158, 182], "imag": [4, 49, 50, 52, 53, 54, 155, 157, 185], "uri": [4, 186], "pixel": [4, 52], "number": [4, 8, 14, 18, 22, 29, 34, 38, 39, 44, 53, 56, 58, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 102, 104, 106, 107, 112, 114, 118, 120, 121, 125, 126, 128, 129, 130, 132, 138, 146, 169, 188, 189], "color": 4, "channel": [4, 50, 52, 53, 54, 132], "opencv": 4, "concern": [5, 7, 8, 12, 49, 50, 52, 53, 54, 55, 63], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 94, 95, 96, 100, 101, 106, 107, 109, 110, 112, 113, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 143, 146, 160, 162, 163, 171, 177], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 94, 95, 96, 100, 101, 106, 107, 109, 110, 112, 113, 118, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 139, 141, 143, 146, 154, 160, 163, 181], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 94, 95, 96, 100, 101, 106, 107, 109, 110, 112, 113, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 160, 163, 175, 181, 182, 185, 186, 203], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 48, 59, 63, 86, 105, 106, 107, 157, 174, 185, 202], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 49, 50, 52, 54, 63, 66, 72, 75, 81, 124, 125, 129, 202], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 59, 60, 61, 67, 69, 70, 76, 78, 79, 83, 84, 85, 92, 112, 124, 125, 126, 132, 185, 202, 203], "propos": [5, 7, 50, 52, 63, 67, 69, 70, 77, 78, 79, 84, 85, 86], "self": [5, 7, 52, 63, 76, 128, 169], "supervis": [5, 7, 8, 63, 72, 73, 81, 92, 125, 126], "speech": [5, 7, 8, 10, 67, 117, 118, 146, 191, 208], "represent": [5, 7, 52, 63, 64, 65, 70, 71, 72, 73, 82, 83, 84, 85, 86, 105, 129, 160, 173], "learn": [5, 7, 22, 34, 39, 55, 63, 70, 71, 73, 78, 79, 81, 82, 84, 85, 86, 92, 106, 107, 114, 121, 125, 126, 129, 132, 182, 200], "mask": [5, 52, 69, 77, 84, 85, 86, 125, 142], "predict": [5, 8, 49, 52, 69, 77, 107, 126, 129, 182, 198], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 63, 73, 86, 138], "unit": [5, 126, 138], "wei": [5, 52], "ning": 5, "hsu": 5, "benjamin": [5, 67], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 29, 38, 40, 44, 59, 61, 67, 77, 89, 101, 114, 115, 134, 137, 143, 159, 164, 169, 180, 188, 201, 202, 206, 207], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 112, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 158, 160, 161, 168, 169, 170, 173, 174, 182, 188, 189, 191, 192, 198, 201, 202, 203, 207, 208], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 94, 95, 96, 97, 99, 100, 101, 106, 107, 110, 114, 115, 118, 121, 123, 125, 126, 128, 129, 132, 134, 135, 146, 157, 164, 169, 174, 176, 180, 185, 203], "pre": [5, 7, 8, 22, 34, 39, 49, 54, 64, 65, 69, 70, 72, 73, 77, 81, 107, 115, 125, 129, 149, 151, 158, 161, 189, 202], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 61, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 92, 96, 97, 99, 121, 125, 126, 128, 129, 138, 157, 160, 164, 175, 201, 202, 203], "support": [5, 7, 8, 22, 34, 61, 63, 76, 92, 107, 110, 121, 128, 137, 160, 175, 199], "appl": [5, 7, 65, 79, 85, 175], "silicon": [5, 7, 175], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 63, 76, 125], "instruct": [5, 7, 75], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 106, 107, 109, 118, 121, 125, 126, 128, 129, 132, 134, 135, 137, 146, 178], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 106, 107, 109, 112, 118, 121, 125, 126, 128, 129, 132, 134, 135, 136, 137, 146, 168, 170, 177, 178, 182, 201, 202], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 161, 164, 182, 198, 202, 203], "audio_assembl": [5, 7, 8, 156, 175], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 161, 164, 182, 198, 202, 203], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 141, 142, 143, 146, 148, 149, 150, 151, 152, 157, 158, 160, 173, 174, 175, 182, 185, 186, 188, 189, 191, 192, 202], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 101, 103, 104, 106, 107, 109, 114, 118, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 139, 143, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 161, 164, 174, 180, 182, 185, 186, 188, 191, 198, 202], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 90, 92, 94, 95, 97, 100, 106, 107, 118, 121, 125, 126, 128, 129, 132, 134, 135, 137, 146, 177, 185, 186, 198, 205], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 109, 110, 112, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 143, 146, 149, 150, 151, 152, 158, 161, 169, 182, 185, 186, 192, 198, 199, 200, 205, 207, 208], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 63, 64, 67, 69, 70, 76, 78, 84, 86, 92, 97, 100, 118, 120, 125, 126, 129, 146, 152, 157, 159, 182, 198, 206], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 76, 78, 80, 81, 82, 84, 86, 89, 92, 97, 99, 100, 107, 109, 110, 112, 113, 120, 121, 123, 125, 126, 128, 129, 134, 142, 146, 150, 157, 174, 186, 188, 189, 202, 203], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 63, 64, 67, 69, 70, 76, 78, 84, 86, 107, 150, 186], "5669": [5, 7, 8, 49, 50, 52, 53, 54, 67], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 60, 67, 70, 72, 73, 75, 80, 84, 85, 89, 92, 97, 102, 105, 109, 112, 121, 125, 126, 128, 129, 134, 142, 143, 149, 150, 151, 158, 161, 169, 182, 185, 192, 198, 199, 200, 202, 205, 208], "extend": [5, 7, 8, 10, 22, 34, 39, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 73, 78, 80, 81, 83, 84, 86, 92, 94, 95, 97, 99, 100, 101, 102, 106, 107, 109, 110, 115, 118, 120, 121, 123, 124, 125, 128, 129, 130, 132, 134, 136, 137, 141, 143, 146, 149, 150, 151, 158, 161, 185], "hubertforctctestspec": 5, "paper": [5, 8, 50, 52, 53, 54, 63, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 92, 121, 124, 125, 126, 128, 129, 146, 192, 208], "abstract": [5, 8, 50, 52, 54, 63, 64, 65, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 92, 125, 126, 128, 129, 138, 192, 208], "approach": [5, 8, 50, 52, 78, 79, 86, 92, 104, 106, 107, 109, 121, 123, 125, 126, 129, 132, 134, 135, 162, 205], "challeng": [5, 34, 52, 70, 73, 75, 78, 79, 92], "three": [5, 132, 144], "uniqu": [5, 112, 113, 125], "problem": [5, 34, 63, 73, 77, 125, 129, 132, 146], "multipl": [5, 8, 34, 54, 67, 87, 92, 97, 120, 125, 143, 174, 182, 188], "sound": [5, 59], "each": [5, 7, 14, 18, 22, 29, 34, 38, 39, 44, 50, 52, 53, 54, 59, 66, 69, 71, 72, 77, 80, 82, 83, 87, 89, 92, 95, 96, 97, 100, 101, 102, 104, 106, 107, 109, 110, 112, 115, 118, 120, 121, 123, 125, 130, 132, 134, 135, 142, 143, 146, 149, 158, 168, 174, 181, 191, 203], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 164, 174, 181, 185, 188, 189, 191, 192, 202, 203, 206, 208], "utter": 5, "lexicon": 5, "dure": [5, 22, 34, 39, 49, 70, 75, 106, 107, 115, 120, 130, 132, 175, 182, 198], "phase": [5, 70, 125], "variabl": [5, 71, 82], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 53, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 82, 84, 85, 86, 102, 110, 112, 120, 121, 125, 126, 128, 129, 130, 132, 142, 143, 169], "explicit": [5, 62, 120, 126], "segment": [5, 48, 50, 52, 70, 78, 145, 146], "deal": [5, 157, 206], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 27, 28, 32, 36, 40, 42, 45, 53, 63, 64, 65, 69, 70, 76, 77, 78, 79, 84, 85, 86, 107, 108, 109, 125, 129], "util": [5, 68, 106, 109, 120, 121, 135, 159, 166, 167, 170, 172, 175, 176, 180, 184], "offlin": [5, 182], "cluster": [5, 66, 72, 75, 81, 175], "step": [5, 22, 34, 39, 71, 82, 107, 115, 182, 198, 202], "align": 5, "target": [5, 81, 125, 128, 143, 148, 157, 185], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 54, 56, 58, 72, 87, 94, 104, 105, 106, 107, 109, 114, 115, 123, 124, 129, 132, 138, 146, 182, 188, 198, 202], "loss": [5, 63, 70, 75, 107, 129, 198], "ingredi": 5, "our": [5, 63, 67, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 92, 121, 125, 126, 129, 174, 185, 207], "appli": [5, 9, 22, 34, 39, 50, 54, 59, 60, 87, 89, 107, 108, 115, 120, 129, 132, 134, 151, 174, 188], "over": [5, 59, 70, 77, 84, 85, 86, 125, 134, 143, 174, 182, 198], "region": 5, "onli": [5, 8, 50, 52, 53, 54, 56, 58, 59, 60, 73, 81, 86, 97, 100, 110, 112, 120, 121, 125, 126, 128, 129, 141, 146, 159, 168, 169, 188], "forc": 5, "combin": [5, 14, 18, 29, 38, 44, 53, 70, 76, 83, 92, 125, 129, 132, 134, 146], "acoust": 5, "continu": [5, 105, 126, 130, 152, 198], "reli": [5, 56, 58, 86, 92], "primarili": 5, "consist": [5, 63, 69, 76, 100, 118, 124, 146, 160, 191], "unsupervis": [5, 84, 85, 86, 92, 125, 126], "rather": [5, 50, 62], "than": [5, 34, 39, 50, 62, 70, 71, 75, 82, 84, 85, 86, 92, 94, 102, 106, 112, 126, 128, 134, 135, 202], "intrins": [5, 50], "qualiti": [5, 52, 126], "assign": [5, 34, 87, 108, 123], "simpl": [5, 64, 65, 87, 126, 203], "k": [5, 8, 53, 125, 126, 128, 129, 150, 169], "mean": [5, 8, 10, 14, 18, 29, 34, 38, 44, 50, 52, 53, 54, 84, 92, 94, 97, 99, 112, 125, 126, 128, 129, 130, 142, 150, 157, 169, 202, 203, 206], "teacher": 5, "100": [5, 22, 34, 40, 54, 71, 82, 84, 92, 112, 121, 160], "two": [5, 34, 52, 56, 58, 63, 69, 71, 81, 82, 83, 84, 85, 89, 144, 188, 202], "iter": [5, 56, 58, 63, 71, 82, 118, 146, 182, 198], "either": [5, 8, 22, 39, 54, 58, 67, 68, 80, 87, 92, 94, 100, 123, 124, 129, 146, 148, 157, 158, 160, 185, 203], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 96, 97, 98, 99, 100, 101, 110, 118, 120, 125, 126, 143, 146, 148, 168, 201], "improv": [5, 63, 64, 65, 67, 69, 73, 75, 78, 79, 84, 85, 106, 107, 126, 129, 130, 207], "upon": [5, 61, 92], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 26, 28, 31, 33, 34, 35, 37, 39, 41, 43, 46, 50, 52, 54, 63, 64, 65, 67, 72, 73, 75, 76, 77, 78, 79, 86, 92, 107, 125, 126, 129, 158, 199, 202], "art": [5, 22, 34, 50, 52, 54, 63, 64, 65, 67, 72, 73, 75, 76, 77, 78, 79, 86, 92, 107, 125, 126, 129, 158], "wav2vec": [5, 7], "perform": [5, 50, 52, 54, 60, 63, 67, 69, 70, 72, 73, 75, 78, 79, 81, 83, 84, 85, 86, 107, 124, 125, 126, 129, 130, 134], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 70, 120], "000h": 5, "benchmark": [5, 8, 54, 63, 69, 70, 72, 73, 84, 85, 125, 129], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 48, 64, 65, 70, 72, 77, 109, 125, 129, 193], "tune": [5, 8, 48, 64, 65, 70, 72, 77, 109, 125, 129], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 161, 174, 186, 188, 189, 191, 192, 193, 198, 201, 202, 203, 207], "19": [5, 55, 66, 72, 102, 191, 193], "13": [5, 9, 10, 48, 84, 85, 89, 118, 151, 193], "rel": [5, 67, 69, 84, 97, 99, 106, 132, 201], "wer": 5, "reduct": [5, 63, 134], "dev": [5, 52, 63, 73, 81], "test": [5, 22, 34, 39, 49, 50, 52, 53, 54, 56, 58, 62, 64, 65, 81, 83, 95, 96, 100, 101, 106, 107, 115, 118, 126, 134, 135, 139, 146, 188, 189, 191, 192, 193, 202, 208], "evalu": [5, 22, 34, 39, 67, 72, 75, 76, 84, 85, 115, 125, 164, 182], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 84, 85, 86, 107, 125, 128, 132], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 89, 92, 107, 114, 125, 126, 128, 129, 130, 132, 134, 169, 201, 206, 207], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 53, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 84, 85, 86, 107, 114, 125, 128, 132], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 112, 113, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 162, 163, 164, 167, 171, 175, 177, 181, 182, 198, 202, 203, 206], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 112, 113, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 155, 157, 158, 159, 160, 161, 182, 198, 202, 206], "audioassembl": [5, 7, 8, 147], "audio_cont": [5, 7, 8, 147], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 150, 160, 161, 202, 203], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 150, 151, 158, 160, 161, 174, 182, 198, 201, 202, 203, 207], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 150, 151, 155, 158, 160, 161, 174, 201, 202, 203, 207], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 148, 150, 157, 159, 160, 161, 181, 182, 198, 202, 203, 206], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 68, 70, 83, 89, 92, 94, 106, 107, 109, 112, 124, 125, 126, 129, 130, 132, 134, 135, 141, 146, 147, 149, 151, 152, 155, 158, 160, 161, 174, 182, 198, 203], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 83, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 151, 152, 158, 160, 161, 174, 191, 201, 202, 203], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 60], "apostl": [5, 7, 8], "OF": [5, 7, 63], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 188, 208], "hi": [5, 7, 8, 61, 109, 121], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 94, 107, 114, 125, 126, 128, 129, 132], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 94, 96, 101, 105, 106, 107, 108, 109, 114, 120, 125, 126, 128, 129, 132, 146, 157, 174, 185, 188, 192, 208], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 94, 107, 114, 125, 126, 128, 129, 132], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 92, 94, 107, 114, 125, 126, 128, 129, 132], "serial": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 94, 107, 114, 125, 126, 128, 129, 132, 175], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 125, 126, 128, 129], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 107, 115, 121, 125, 126, 128, 129, 132, 135, 138, 186, 188], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 125, 126, 128, 129], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 107, 115, 121, 125, 126, 128, 129, 175, 182, 198, 202], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 185, 186, 202, 207], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 86, 89, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 185, 186, 189, 202, 207, 208], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 185, 186], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 94, 95, 96, 101, 106, 107, 108, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 175, 185, 186, 201, 202, 205, 206], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 92, 94, 95, 96, 100, 101, 106, 107, 109, 110, 115, 118, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 147, 149, 153, 154, 157, 158, 173, 174, 175, 181, 182, 185, 186, 188, 189, 191, 192, 202], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 185, 186], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 94, 95, 96, 100, 101, 106, 107, 109, 110, 115, 118, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 137, 139, 143, 146, 159, 170, 173, 184, 186, 188, 189, 191, 192, 193, 202, 208], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 120, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 185, 199], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 101, 106, 107, 109, 118, 121, 124, 125, 126, 128, 129, 132, 134, 135, 137, 143, 146, 148, 169, 182], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 139], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 62, 89, 92, 109, 128, 134, 201, 202], "recognit": [8, 13, 17, 21, 25, 28, 33, 37, 43, 46, 50, 54, 67, 103, 106, 107, 109], "asr": 8, "system": [8, 92, 125, 126], "680": 8, "000": [8, 40, 92, 126, 146, 160], "hour": [8, 61, 97, 99], "multilingu": [8, 84, 85, 146], "multitask": [8, 75, 126], "collect": [8, 92, 182, 198], "web": [8, 48, 60, 67, 126, 182, 198], "well": [8, 54, 56, 58, 59, 72, 81, 84, 85, 92, 112, 125, 160], "translat": [8, 125, 126, 128, 129, 146], "those": [8, 67, 89, 108, 202, 203], "english": [8, 39, 67, 92, 134, 137, 146, 186], "moment": 8, "greedi": [8, 53, 125, 126, 128, 129, 169], "search": [8, 53, 66, 97, 125, 130, 134, 169], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 52, 54, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 81, 84, 85, 86, 92, 109, 125, 126, 128, 129, 159, 169], "setlanguag": 8, "settask": [8, 125, 126, 129, 169], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 75], "via": [8, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 81, 155, 175], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 59, 61, 63, 69, 70, 72, 73, 77, 84, 85, 86, 92, 94, 96, 101, 107, 125, 126], "scale": [8, 50, 52, 53, 54, 63, 70, 72, 76, 77, 84, 85, 125, 126, 129], "weak": [8, 72], "studi": [8, 70, 78, 79, 125, 129], "capabl": [8, 49, 52, 70, 86, 126], "simpli": [8, 60, 75, 203], "amount": [8, 54, 81, 92, 101, 126, 146, 157, 206], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 52, 53, 54, 59, 60, 62, 63, 72, 89, 97, 99, 102, 107, 112, 125, 126, 129, 132, 134, 137, 141, 146, 157, 188, 202, 203, 206], "gener": [8, 22, 34, 50, 52, 53, 63, 66, 68, 70, 72, 75, 76, 80, 86, 89, 92, 106, 107, 109, 112, 121, 125, 126, 128, 129, 132, 134, 135, 151, 152, 169, 182, 198, 201, 202, 203], "standard": [8, 50, 52, 53, 54, 60, 76, 97, 99, 125, 134, 135, 143], "often": [8, 63, 78, 79, 86], "competit": [8, 84, 85, 92], "prior": [8, 50, 70, 75, 76, 112, 132], "fulli": [8, 185], "zero": [8, 49, 72, 83, 109, 126], "shot": [8, 49, 72, 109, 126], "transfer": [8, 54, 70, 72, 81, 84, 85, 125, 126, 129], "without": [8, 49, 64, 65, 72, 75, 84, 85, 92, 126, 146], "ani": [8, 14, 18, 29, 38, 44, 49, 62, 66, 71, 72, 75, 81, 82, 87, 92, 107, 126, 129, 132, 150, 151, 186, 199, 202, 203, 208], "compar": [8, 52, 54, 63, 69, 70, 73, 75, 77, 86, 92, 121, 125, 129, 132, 182, 198], "human": [8, 69, 92], "accuraci": [8, 50, 52, 56, 58, 64, 65, 71, 81, 82, 84, 85, 106, 107, 118, 134, 146, 198], "releas": [8, 60, 63, 67, 69, 78, 79, 84, 85, 125, 129, 175], "infer": [8, 14, 18, 29, 38, 44, 49, 64, 65, 67, 70, 86], "code": [8, 48, 49, 62, 69, 71, 75, 76, 78, 79, 82, 84, 85, 92, 94, 125, 129, 199, 207], "serv": [8, 52, 199], "foundat": 8, "further": [8, 9, 63, 75, 92, 106, 107, 112, 161], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 50, 58, 60, 72, 73, 75, 76, 77, 87, 89, 106, 107, 125, 126, 128, 129, 130, 132, 137, 160, 169, 182, 198], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 50, 58, 60, 72, 73, 75, 77, 89, 106, 107, 125, 126, 128, 129, 132, 137, 160, 169, 182, 198], "check": [8, 66, 72, 107, 120, 132, 133, 134, 135, 157, 161, 185, 202, 207], "descript": [8, 58, 75, 80, 92, 97, 134, 141, 168, 170], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 89, 96, 97, 99, 101, 102, 105, 106, 107, 110, 112, 115, 120, 121, 125, 126, 128, 129, 130, 132, 134, 137, 142, 143, 146, 148, 150, 151, 152, 157, 160, 161, 164, 169, 175, 185, 188, 192, 203], "minoutputlength": [8, 53, 125, 126, 129], "minimum": [8, 34, 39, 53, 71, 82, 89, 92, 94, 104, 106, 107, 110, 120, 121, 125, 126, 129, 134, 135, 142, 143, 169, 188], "sequenc": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 52, 53, 54, 76, 112, 125, 126, 127, 128, 129, 132, 137, 169], "maxoutputlength": [8, 53, 125, 126, 128, 129], "maximum": [8, 22, 34, 39, 48, 53, 62, 71, 82, 89, 92, 104, 106, 107, 110, 112, 114, 120, 121, 125, 126, 128, 129, 132, 134, 142, 143, 169], "dosampl": [8, 53, 125, 126, 129], "sampl": [8, 53, 112, 125, 126, 128, 129, 169], "decod": [8, 53, 69, 76, 125, 126, 128, 129, 169], "temperatur": [8, 53, 112, 125, 126, 129], "next": [8, 53, 78, 79, 92, 97, 99, 125, 126, 128, 129, 169], "probabl": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 53, 92, 112, 125, 126, 128, 129, 130, 134, 169], "topk": [8, 53, 125, 126, 129], "highest": [8, 53, 112, 125, 126, 128, 129, 134, 169], "vocabulari": [8, 53, 71, 82, 125, 126, 128, 129, 132, 169], "keep": [8, 53, 54, 59, 92, 110, 125, 126, 128, 129, 169], "filter": [8, 50, 52, 53, 54, 84, 85, 92, 105, 106, 125, 126, 128, 129, 137, 169, 174, 186], "topp": [8, 53, 112, 125, 126, 128, 129, 169], "most": [8, 53, 59, 61, 67, 70, 76, 77, 92, 107, 112, 125, 126, 128, 129, 169], "add": [8, 53, 83, 97, 99, 120, 125, 126, 128, 129, 132, 143, 169, 202], "top_p": [8, 53, 112], "higher": [8, 53, 83, 92, 112, 124, 125, 126, 128, 129, 169], "kept": [8, 53, 125, 126, 128, 129, 169], "repetitionpenalti": [8, 53, 125, 126, 129], "repetit": [8, 53, 125, 126, 128, 129, 169], "penalti": [8, 53, 125, 126, 128, 129, 169], "norepeatngrams": [8, 53, 125, 126, 129], "ngram": [8, 53, 68, 102, 125, 126, 128, 129, 169], "occur": [8, 53, 125, 126, 128, 129, 169], "onc": [8, 53, 125, 126, 128, 129, 169], "beamsiz": [8, 53, 125], "beam": [8, 53, 125, 169], "mr": 8, "middl": [8, 141, 146], "getlanguag": 8, "langaug": [8, 185], "getismultilingu": 8, "do": [8, 9, 61, 81, 92, 105, 137, 143, 157, 198, 202, 206], "xx": [8, 44, 84, 85, 94, 128], "chunk2doc": [9, 148], "convert": [9, 53, 55, 60, 68, 77, 80, 83, 97, 99, 102, 105, 110, 112, 125, 129, 142, 144, 146, 148, 151, 152, 182, 198, 205], "back": [9, 61, 112, 125], "try": [9, 132, 188], "re": [9, 66, 72, 202], "analysi": [9, 22, 34, 39, 73, 75, 86, 122, 123, 129, 166, 203], "doc2chunk": [9, 148], "pretrainedpipelin": [9, 151, 157, 174, 185, 201, 206, 207], "locat": [9, 87, 120, 175, 185, 202], "extract": [9, 10, 11, 15, 19, 23, 26, 31, 35, 41, 50, 52, 53, 54, 56, 59, 61, 68, 83, 87, 88, 89, 91, 92, 96, 97, 99, 101, 105, 106, 107, 108, 120, 121, 123, 130, 132, 135, 139, 144, 150, 151, 152, 157, 175, 182, 185, 198], "york": [9, 109, 151], "jersei": [9, 151], "aren": [9, 151], "t": [9, 14, 18, 29, 38, 44, 61, 70, 78, 95, 110, 121, 123, 143, 151], "far": [9, 112, 126, 151], "apart": [9, 56, 58, 151], "actual": [9, 102, 151, 161], "id": [9, 34, 60, 84, 87, 112, 113, 125, 126, 128, 129, 132, 148, 149, 151, 158, 161, 182, 188], "defin": [9, 10, 105, 106, 107, 132, 137, 141, 151, 174, 182, 185, 198, 202, 206], "amongst": [9, 151], "thing": [9, 132, 151], "explain_document_dl": [9, 151, 157, 174, 185], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 151], "selectexpr": [9, 10, 22, 40, 48, 49, 50, 52, 53, 54, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 95, 96, 97, 99, 100, 101, 102, 105, 108, 109, 110, 118, 120, 121, 123, 128, 136, 137, 139, 142, 143, 144, 148, 150, 151, 174, 188, 189, 191, 201, 202, 207], "explod": [9, 10, 22, 40, 48, 56, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 96, 99, 100, 101, 102, 105, 108, 109, 118, 120, 121, 128, 144, 150, 151, 174, 188, 191, 201, 202, 207], "col": [9, 56, 58, 87, 96, 105, 108, 151, 174, 201], "loc": [9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 89, 105, 106, 107, 151, 157, 174, 185, 188], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 108, 109, 118, 124, 125, 128, 129, 130, 132, 137, 139, 142, 144, 146, 149, 151, 157, 158, 160, 161, 175, 185, 188, 189, 191, 192, 193, 202, 206, 207], "22": [9, 151, 188, 201], "pattern": [10, 59, 60, 87, 97, 100, 110, 134, 135, 142, 143, 146], "part": [10, 62, 67, 92, 95, 117, 118, 136, 146, 148, 191, 208], "tag": [10, 22, 34, 39, 60, 67, 104, 105, 106, 107, 108, 117, 118, 146, 174, 182, 188, 191, 192, 208], "order": [10, 59, 62, 75, 86, 87, 92, 97, 125, 134, 135, 157, 161, 174, 202, 203, 206, 208], "meaning": [10, 136], "phrase": [10, 67, 71, 82, 96, 101], "onto": [10, 174, 203], "pars": [10, 56, 57, 58, 67, 87, 95, 97, 99, 132, 134, 135, 157, 160, 185, 188, 191], "regular": [10, 59, 100, 106, 120], "express": [10, 39, 48, 59, 97, 100, 120], "wrap": [10, 113, 130, 162, 163, 171, 177, 181], "angl": 10, "bracket": 10, "easili": [10, 73, 118, 150, 198], "distinguish": 10, "itself": [10, 62, 92, 129, 146, 159, 203], "form": [10, 22, 34, 39, 83, 87, 95, 96, 97, 100, 101, 121, 123, 134, 135, 146, 150, 182, 188, 189, 202], "peter": [10, 76, 95, 110, 118, 121, 134, 136, 188], "piper": [10, 95, 118, 136], "employe": [10, 95, 118, 136], "pick": [10, 95, 118, 136], "peck": [10, 95, 118, 136], "pickl": [10, 95, 118, 136], "pepper": [10, 95, 118, 136], "nnp": [10, 118, 157, 174, 188, 189, 191, 192, 201, 206, 207, 208], "nn": [10, 118, 188, 189, 191, 192, 208], "vbp": [10, 118, 157, 189, 201, 206, 207], "vbg": [10, 118], "IN": [10, 118, 157, 174, 189, 191, 192, 201, 206, 207], "jj": [10, 118, 157, 174, 188, 191, 201, 206, 207, 208], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 132, 146], "group": [10, 143], "so": [10, 14, 18, 22, 29, 38, 39, 44, 61, 62, 92, 105, 112, 121, 159, 182, 198], "here": [10, 95, 174, 202], "specif": [10, 40, 56, 58, 60, 64, 65, 70, 81, 89, 92, 107, 125, 126, 138, 157, 159, 182, 206], "noun": [10, 189], "success": [10, 67, 77, 126], "grammar": 10, "parser": [10, 56, 58, 89], "perceptronmodel": [10, 56, 58, 89, 106, 118, 188], "Of": [10, 63, 146], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 108, 109, 110, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 150, 158, 159, 160, 161, 182, 188, 198, 202], "sentencedetector": [10, 22, 40, 48, 56, 58, 65, 68, 79, 81, 85, 89, 92, 95, 100, 102, 106, 107, 108, 109, 118, 120, 121, 137, 139, 159, 161, 188, 202, 203], "postag": 10, "11": [10, 55, 84, 85, 97, 99, 102, 118, 193], "21": [10, 97, 99, 108, 118, 193], "35": [10, 118, 193], "39": [10, 108, 118, 191, 193], "52": [10, 108, 118, 191], "58": [10, 52, 118], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 92, 150, 202], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 94, 107, 109, 134, 135], "albert": [11, 12, 13, 63], "span": [11, 15, 19, 23, 26, 31, 35, 41, 125, 129], "question": [11, 15, 19, 23, 26, 31, 35, 40, 41, 56, 58, 64, 65, 73, 78, 79, 86, 109, 118, 125, 126, 129, 157], "answer": [11, 15, 19, 23, 26, 31, 35, 40, 41, 56, 58, 59, 64, 65, 73, 86, 109, 125, 126, 129, 157], "squad": [11, 15, 19, 23, 26, 31, 35, 41, 63, 64, 65, 69, 77, 78, 79, 125], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 52, 126], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 63, 64, 65, 69, 73, 86], "comput": [11, 15, 19, 23, 26, 31, 35, 41, 50, 52, 54, 63, 69, 70, 75, 81, 126, 128, 135, 146, 157, 206], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 29, 31, 32, 35, 36, 38, 41, 42, 44, 45, 112], "spanclassifi": [11, 15, 19, 23, 26, 31, 35, 41], "document_quest": [11, 15, 19, 23, 26, 31, 35, 40, 41], "document_context": [11, 15, 19, 23, 26, 31, 35, 41], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 52, 53, 73, 81, 106, 107, 110, 120, 121, 125, 142, 143, 159, 168], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 70, 73, 134, 135], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 84, 85, 86, 96, 101, 134, 137], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 84, 85, 86, 96, 102, 105, 125, 126, 128, 129, 134, 137, 157], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 84, 85, 86, 87, 94, 96, 101, 132, 134, 137, 143, 148, 188, 189, 202], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 63, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 94, 107, 125, 126, 128, 129, 132], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 82, 84, 85, 86], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 63, 64, 65, 67, 69, 70, 75, 78, 79, 84, 85, 86, 182, 198], "multidocumentassembl": [11, 15, 19, 23, 26, 31, 35, 40, 41, 158], "context": [11, 15, 19, 23, 26, 31, 35, 41, 64, 65, 71, 73, 82, 86, 112, 124, 132, 143], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 68, 70, 76, 78, 84, 96, 101, 106, 134, 137, 150, 161], "what": [11, 15, 19, 23, 26, 31, 35, 39, 41, 50, 56, 58, 92, 94, 109, 112, 128, 132, 141, 189, 199], "my": [11, 13, 15, 17, 19, 22, 23, 25, 26, 28, 31, 33, 35, 37, 39, 41, 43, 46, 59, 60, 61, 100, 102, 109, 112, 120, 126, 137, 139, 142, 202], "clara": [11, 15, 19, 23, 26, 31, 35, 41, 109], "live": [11, 13, 15, 17, 19, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 109, 126, 182, 198], "berkelei": [11, 15, 19, 23, 26, 31, 35, 41], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 27, 32, 36, 42, 45, 125, 129], "pool": [12, 16, 20, 24, 27, 32, 36, 42, 45, 68, 73, 80], "multi": [12, 16, 20, 22, 24, 27, 32, 34, 36, 39, 42, 45, 63, 81, 84, 85, 92, 94, 128], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 94], "instead": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 65, 92, 94, 97, 99, 129, 150, 151, 157, 206], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 66, 72, 84, 85, 94, 97, 102, 104, 105, 106, 107, 112, 146, 157, 174, 185, 188], "inputcol": [12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 80, 94, 147, 149, 150, 151, 152, 155, 158], "averag": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 66, 68, 72, 75, 80, 84, 85, 94, 107, 118, 130], "calcul": [12, 14, 16, 18, 20, 22, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 83, 102, 107, 115, 123, 130], "softmax": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 69, 71, 82, 132], "sigmoid": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45], "love": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 42, 44, 45, 65, 79, 85, 121, 124, 202], "movi": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 124, 202], "child": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "pretti": [12, 14, 16, 18, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 92], "bore": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "neg": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 123, 124, 130, 182, 198], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 42, 43, 44, 45, 46, 50, 52, 54, 109], "setcoalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 94], "limit": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 52, 54, 61, 63, 67, 76, 77, 83, 86, 92, 129, 134], "almost": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "512": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 61, 66, 72, 73, 77, 128], "help": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 56, 58, 59, 63, 112, 113, 128, 143, 182, 198, 203, 207], "feed": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "entir": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 128], "bool": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 59, 60, 61, 65, 68, 81, 87, 89, 94, 96, 97, 101, 102, 105, 106, 107, 110, 115, 120, 121, 125, 126, 128, 129, 130, 132, 134, 137, 142, 143, 146, 148, 150, 151, 152, 157, 160, 164, 169, 175, 182, 185, 186, 188], "one": [12, 14, 16, 18, 20, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 48, 50, 52, 53, 54, 56, 58, 60, 64, 65, 77, 80, 84, 85, 86, 92, 94, 97, 100, 105, 112, 121, 134, 139, 161, 198, 202], "albertfortokenclassif": [13, 63], "ner": [13, 17, 21, 25, 28, 33, 37, 43, 46, 84, 85, 89, 90, 139, 157, 174, 175, 182, 185, 198], "token_classifi": [13, 21, 33, 37, 43, 46], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 63], "level": [13, 22, 34, 39, 64, 65, 76, 78, 79, 81, 83, 85, 87, 106, 107, 115, 132, 175, 188], "tokenclassifi": [13, 17, 21, 25, 28, 33, 37, 43, 46], "john": [13, 17, 25, 28, 33, 37, 43, 46, 48, 65, 79, 85, 87, 89, 108, 110, 121, 152, 193], "lenon": [13, 17, 25, 28, 33, 37, 43, 46], "born": [13, 17, 25, 28, 33, 37, 43, 46, 126], "london": [13, 17, 25, 28, 33, 37, 43, 46], "pari": [13, 17, 25, 28, 33, 37, 43, 46, 109], "sarah": [13, 17, 25, 28, 33, 37, 43, 46], "o": [13, 17, 21, 25, 28, 33, 37, 43, 46, 105, 106, 107, 108, 157, 174, 185, 188, 192, 208], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 29, 38, 44], "nli": [14, 18, 29, 38, 44], "natur": [14, 18, 29, 38, 39, 44, 54, 63, 64, 65, 67, 69, 70, 71, 77, 81, 82, 86, 94, 125, 126, 129, 148, 158, 161], "equival": [14, 18, 29, 38, 44, 157, 175, 206], "bartforsequenceclassif": 14, "don": [14, 18, 29, 38, 44, 70, 78, 110], "hardcod": [14, 18, 29, 38, 44], "potenti": [14, 18, 29, 38, 44, 52, 132], "thei": [14, 18, 29, 38, 40, 44, 56, 58, 59, 107, 110, 112, 126, 159, 177, 189, 202], "chosen": [14, 18, 29, 38, 44, 56, 58, 107, 112], "runtim": [14, 18, 29, 38, 44], "usual": [14, 18, 29, 38, 44, 54, 161, 186], "slower": [14, 18, 29, 38, 44], "much": [14, 18, 22, 29, 38, 40, 44, 63, 66, 72, 78, 79, 110, 146, 175, 202], "flexibl": [14, 18, 29, 38, 44, 49, 52], "loop": [14, 18, 29, 38, 44], "through": [14, 18, 29, 38, 44, 63, 77, 89, 92, 152, 203], "longer": [14, 18, 29, 38, 44, 63, 71, 76, 82, 94, 128, 207], "pass": [14, 18, 29, 38, 44, 62, 112], "pose": [14, 18, 29, 38, 44], "premis": [14, 18, 29, 38, 44], "hypothesi": [14, 18, 29, 38, 44], "pair": [14, 18, 29, 38, 44, 49, 72, 89, 182], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 37, 38, 44, 71, 82], "bart": [14, 125], "bertforquestionansw": [15, 40], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_base_cased_zero_shot_classifier_xnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 67], "camembert_base_qa_fquad": 19, "fr": [19, 20, 67, 94], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 87], "ai": [20, 112, 113, 125, 182, 198], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 67, 94, 128], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 202], "classifierdlapproach": [22, 34, 202], "univers": [22, 56, 58, 81, 128], "encod": [22, 53, 60, 64, 65, 69, 75, 76, 81, 109, 125, 128, 182], "deep": [22, 64, 65, 73, 92, 106, 121, 132], "dnn": 22, "insid": [22, 34, 105, 118, 143, 188], "instanti": [22, 34, 39, 56, 58, 62, 71, 82, 83, 87, 95, 96, 100, 101, 106, 107, 110, 118, 121, 123, 124, 130, 132, 134, 135, 139, 141, 146, 188, 189], "classifierdlmodel": [22, 34, 202], "monitor": [22, 34, 39, 107, 112, 113, 182, 198], "metric": [22, 34, 39, 107, 135, 182], "done": [22, 34, 39, 78, 79, 106, 107, 203], "settestdataset": [22, 34, 39, 107, 115], "method": [22, 34, 39, 62, 63, 70, 71, 75, 77, 82, 86, 92, 107, 130, 186, 197], "expect": [22, 34, 39, 66, 72, 86, 107, 143, 174], "path": [22, 34, 39, 56, 58, 71, 82, 83, 87, 89, 95, 96, 100, 101, 106, 107, 109, 110, 115, 121, 123, 126, 132, 134, 135, 138, 143, 155, 157, 173, 182, 185, 188, 189, 191, 192, 198], "parquet": [22, 34, 39, 107, 115, 147], "datafram": [22, 34, 39, 71, 82, 83, 107, 115, 118, 130, 146, 157, 170, 174, 181, 182, 185, 188, 189, 191, 192, 198, 202, 206, 208], "ha": [22, 34, 39, 40, 49, 50, 52, 53, 54, 59, 60, 61, 63, 69, 70, 73, 78, 79, 83, 92, 95, 100, 107, 115, 121, 123, 125, 129, 134, 135, 146, 147, 148, 155, 157, 182, 186, 191, 198, 202, 203], "same": [22, 34, 39, 48, 63, 77, 78, 83, 84, 87, 89, 107, 112, 115, 129, 130, 159, 182, 203], "follow": [22, 34, 39, 48, 55, 60, 73, 76, 83, 92, 97, 99, 100, 105, 107, 110, 120, 144, 160, 198, 200, 203], "universalsentenceencod": [22, 34, 39, 81, 182, 198, 202], "preprocessingpipelin": [22, 34, 39, 107, 115], "randomsplit": [22, 34, 39, 107, 115], "write": [22, 34, 39, 83, 107, 115, 134, 135, 203], "overwrit": [22, 34, 39, 107, 108, 115, 182], "test_data": [22, 34, 39, 107, 115], "setlabelcolumn": [22, 34, 39, 104, 106, 107, 114, 138, 182, 198, 202], "usag": [22, 34, 39, 48, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 73, 78, 81, 83, 84, 86, 87, 92, 94, 95, 97, 99, 100, 101, 106, 107, 110, 118, 120, 121, 123, 124, 125, 128, 129, 130, 132, 134, 136, 137, 141, 143, 146], "64": [22, 34, 39, 63, 107, 114, 202], "dropout": [22, 39, 107], "coeffici": [22, 39, 106, 107], "enableoutputlog": [22, 34, 39, 107], "stdout": [22, 34, 39, 107, 115], "addit": [22, 34, 39, 56, 58, 62, 64, 65, 87, 106, 107, 112, 115, 120, 126, 143, 182, 201, 202], "evaluationlogextend": [22, 34, 39, 107], "valid": [22, 34, 39, 97, 107, 115, 121, 132, 198], "displai": [22, 34, 39, 115, 126, 182, 198], "time": [22, 34, 39, 63, 71, 82, 84, 85, 92, 97, 115, 124, 132, 146, 175, 201, 202, 206, 207], "labelcolumn": [22, 34, 39, 106, 107], "lr": [22, 34, 39, 107, 146], "rate": [22, 34, 39, 55, 71, 78, 79, 82, 83, 107, 114, 130, 132], "005": [22, 39, 107, 114], "maxepoch": [22, 34, 39, 106, 107], "epoch": [22, 34, 39, 104, 106, 107, 114, 115, 121, 132, 182], "30": [22, 39, 92, 97, 99, 105, 114, 128, 157, 174, 185, 193, 201], "outputlogspath": [22, 34, 39, 107, 121], "randomse": [22, 34, 39, 106, 107], "random": [22, 34, 39, 71, 82, 104, 106, 107, 112, 114, 128, 130, 150], "seed": [22, 34, 39, 71, 82, 104, 106, 107, 114, 128], "shuffl": [22, 34, 104, 114, 125], "testdataset": [22, 34, 39, 107, 182, 198], "statist": [22, 34, 39, 83, 92, 107, 115], "validationsplit": [22, 34, 39, 107, 121], "choos": [22, 34, 39, 68, 80, 107, 112, 121, 134], "proport": [22, 34, 39, 107, 115, 121], "against": [22, 34, 39, 87, 92, 96, 101, 107, 115, 121, 159], "between": [22, 34, 39, 52, 56, 58, 59, 61, 77, 78, 79, 81, 84, 85, 86, 89, 107, 112, 115, 120, 121, 132], "off": [22, 34, 39, 81, 84, 85, 107, 115, 121], "verbos": [22, 34, 39, 106, 107, 115], "multiclassifierdlapproach": [22, 34, 182, 198], "sentimentdlapproach": [22, 34, 39], "accept": [22, 34, 39, 112], "singl": [22, 34, 39, 62, 72, 75, 83, 89, 92, 125, 139, 141, 143, 188], "item": [22, 39, 83, 112, 182, 188, 198], "doubl": [22, 39, 147, 160], "sentenceembed": [22, 34, 39, 80, 83, 150], "In": [22, 34, 39, 50, 54, 61, 67, 69, 70, 76, 77, 83, 86, 87, 92, 94, 95, 96, 100, 101, 120, 121, 123, 125, 126, 129, 134, 135, 146, 182, 191, 198, 202, 203, 207, 208], "csv": [22, 39, 87, 115, 160, 202], "best": [22, 39, 63, 67, 72, 75, 78, 79, 92, 94, 107, 112, 125, 202], "wach": [22, 202], "ever": [22, 39, 60, 202], "opinion": [22, 39, 202], "win": [22, 39, 202], "award": [22, 39, 202], "terribl": [22, 39, 202], "act": [22, 39, 202], "bad": [22, 39, 123, 182, 198, 202], "realli": [22, 39, 112, 124, 202], "trane": 22, "smallcorpu": [22, 39, 202], "read": [22, 39, 49, 50, 52, 53, 54, 56, 58, 71, 82, 92, 95, 96, 97, 99, 100, 101, 106, 109, 110, 115, 121, 123, 126, 132, 134, 135, 143, 146, 147, 149, 155, 158, 170, 173, 175, 176, 182, 186, 188, 189, 191, 192, 198, 202, 208], "header": [22, 39, 40, 160, 202], "src": [22, 39, 49, 50, 52, 53, 54, 56, 58, 83, 95, 96, 100, 101, 106, 107, 118, 134, 135, 139, 146, 188, 189, 191, 192, 193, 202, 208], "useembed": [22, 34, 39, 81, 202], "docclassifi": [22, 34, 39, 202], "setbatchs": [22, 34, 39, 73, 107, 114, 132, 182, 198, 202], "setmaxepoch": [22, 34, 39, 104, 106, 107, 114, 182, 198, 202], "20": [22, 40, 50, 59, 86, 105, 125, 126, 157, 160, 174, 185, 202], "setlr": [22, 34, 39, 107, 114, 182, 198, 202], "5e": [22, 39, 202], "setdropout": [22, 39, 107, 202], "pipelinemodel": [22, 34, 39, 56, 58, 60, 71, 82, 106, 107, 124, 132, 134, 135, 146, 157, 159, 182, 186, 202, 205], "v": [22, 34, 39, 55, 69, 77, 83, 92, 94, 96, 107, 114, 115, 135, 174], "classifierdl_use_trec6": [22, 202], "trec": 22, "multiclassifierdlmodel": [22, 34], "sentimentdlmodel": [22, 34, 39], "sarcasmdl": [22, 202], "classifierdl_use_sarcasm": [22, 202], "sarcasm": [22, 202], "m": [22, 61, 97, 99, 193, 202], "could": [22, 70, 92, 100, 115, 132, 201, 202, 203], "put": [22, 174, 202], "word": [22, 52, 54, 56, 58, 63, 68, 69, 71, 73, 78, 80, 81, 82, 83, 86, 87, 89, 92, 95, 102, 105, 108, 109, 110, 118, 123, 125, 126, 128, 129, 132, 134, 135, 136, 137, 141, 143, 145, 146, 157, 174, 185, 191, 192, 201, 202], "wake": [22, 202], "am": [22, 59, 97, 99, 126, 139, 202], "mondai": [22, 202], "would": [22, 48, 59, 68, 80, 97, 121, 175, 202], "arrays_zip": [22, 56, 58, 92, 202], "out": [22, 66, 72, 92, 95, 110, 125, 126, 128, 129, 136, 137, 202], "normal": [22, 50, 52, 53, 54, 60, 90, 96, 121, 124, 137, 150, 159, 161, 175, 202, 203], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 69], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": 24, "v2": [24, 25, 64, 65, 69], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "distilbertforquestionansw": 26, "distilbert": [26, 27, 29, 70], "distilbert_base_cased_qa_squad2": 26, "distilbertforsequenceclassif": [27, 29], "distilbert_base_sequence_classifier_imdb": 27, "distilbertfortokenclassif": 28, "distilbert_base_token_classifier_conll03": 28, "distilbertforzeroshotclassif": 29, "distilbert_base_zero_shot_classifier_uncased_mnli": 29, "albert_for_sequence_classif": [30, 90], "albert_for_token_classif": [30, 90], "bart_for_zero_shot_classif": [30, 90], "bert_for_sequence_classif": [30, 90], "bert_for_token_classif": [30, 90], "bert_for_zero_shot_classif": [30, 90], "camembert_for_sequence_classif": [30, 90], "camembert_for_token_classif": [30, 90], "deberta_for_sequence_classif": [30, 90], "deberta_for_token_classif": [30, 90], "distil_bert_for_sequence_classif": [30, 90], "distil_bert_for_token_classif": [30, 90], "distil_bert_for_zero_shot_classif": [30, 90], "longformer_for_sequence_classif": [30, 90], "longformer_for_token_classif": [30, 90], "multi_classifier_dl": [30, 90], "roberta_for_sequence_classif": [30, 90], "roberta_for_token_classif": [30, 90], "roberta_for_zero_shot_classif": [30, 90], "sentiment_dl": [30, 90], "xlm_roberta_for_sequence_classif": [30, 90], "xlm_roberta_for_token_classif": [30, 90], "xlm_roberta_for_zero_shot_classif": [30, 90], "xlnet_for_sequence_classif": [30, 90], "xlnet_for_token_classif": [30, 90], "longformerforquestionansw": 31, "longform": [31, 32, 33, 76], "longformer_base_base_qa_squad2": 31, "longformerforsequenceclassif": 32, "longformer_base_sequence_classifier_imdb": 32, "4096": [32, 63, 76], "longformerfortokenclassif": 33, "xlnet_base_token_classifier_conll03": [33, 46], "longformer_base_token_classifier_conll03": 33, "multiclassifierdl": 34, "bidirect": [34, 64, 65, 73, 86, 125], "gru": 34, "convolut": [34, 50, 54], "machin": [34, 50, 59, 61, 71, 82, 92, 106, 125, 126, 128, 129, 182, 200], "strongli": 34, "relat": [34, 56, 58, 89, 207], "variant": [34, 55, 76, 81], "mai": [34, 61, 62, 112, 148, 201, 202, 203, 206, 207], "instanc": [34, 62, 109, 114, 115, 164, 169, 175, 176, 180], "multiclass": 34, "categor": [34, 186], "precis": [34, 56, 58, 61], "constraint": 34, "mani": [34, 62, 69, 78, 79, 92, 112, 125, 126, 128, 129, 146], "formal": 34, "find": [34, 56, 58, 78, 79, 81, 87, 89, 95, 97, 125, 126], "binari": [34, 155, 170, 182], "bertsentenceembed": [34, 39, 65, 79, 85], "multiclassifi": [34, 182, 198], "001": [34, 55, 106, 107], "10": [34, 48, 56, 92, 97, 99, 108, 112, 130, 134, 182, 193, 201], "44": [34, 71, 82, 118], "shuffleperepoch": 34, "threshold": [34, 39, 71, 82, 92, 94, 106, 109, 132, 146], "ed58abb40640f983": 34, "pn": 34, "newsyou": 34, "toxic": 34, "a1237f726b5f5d89": 34, "dude": 34, "place": [34, 54, 62], "obscen": 34, "insult": 34, "24b0d6c8733c2abe": 34, "thank": [34, 86, 92, 193], "8c4478fb239bcfc0": 34, "gee": 34, "minut": 34, "traindataset": [34, 182, 198], "printschema": [34, 147, 149, 155, 158], "root": [34, 48, 56, 58, 89, 147, 149, 155, 158, 189], "setcleanupmod": [34, 149, 158], "shrink": [34, 149, 158], "1e": [34, 182, 198], "setthreshold": [34, 39, 92, 94, 182, 198], "setvalidationsplit": [34, 115, 121], "setverbos": [34, 106, 107, 115], "multiclassifierdl_use_tox": 34, "comment": [34, 92], "jigsaw": 34, "good": [34, 67, 70, 81, 124], "stuff": 34, "wtf": 34, "kind": [34, 92, 97, 99], "crap": 34, "robertaforquestionansw": [35, 109], "roberta": [35, 36, 37, 38, 41, 42, 43, 53, 67, 69, 76, 77, 78, 79, 84, 85, 109, 125], "roberta_base_qa_squad2": [35, 109], "robertaforsequenceclassif": [36, 38], "roberta_base_sequence_classifier_imdb": 36, "robertafortokenclassif": 37, "roberta_base_token_classifier_conll03": 37, "robertaforzeroshotclassif": 38, "roberta_base_zero_shot_classifier_nli": 38, "sentimentdl": 39, "affect": [39, 143], "subject": [39, 56, 58], "view": 39, "common": [39, 87, 139, 148, 175, 205], "product": 39, "review": [39, 112, 178], "tweet": 39, "interpret": [39, 59, 87], "posit": [39, 69, 70, 77, 84, 85, 86, 92, 105, 112, 123, 124, 130, 142, 146, 161, 182, 198], "final": [39, 59, 76, 78, 79, 84, 85, 94, 107, 132, 202], "otheriws": [39, 94], "neutral": [39, 94], "thresholdlabel": [39, 94], "score": [39, 64, 65, 84, 85, 92, 94, 106, 107, 109, 123, 124, 126], "less": [39, 70, 94, 97, 102, 106, 128, 134], "watch": [39, 124], "32": [39, 63, 73, 193, 201, 207], "setthresholdlabel": [39, 94], "p": [39, 60, 71, 82, 94, 107, 115, 141], "sentimentdl_use_imdb": 39, "imdb": 39, "sentimentdl_use_twitt": 39, "wow": 39, "video": [39, 92], "awesom": 39, "bruh": 39, "damn": 39, "wast": [39, 124], "tapasforquestionansw": 40, "implement": [40, 62, 71, 82, 84, 109, 113, 121, 130, 132, 153, 154, 162, 163, 171, 177, 181], "tapa": 40, "design": [40, 50, 52, 55, 64, 65, 78, 79, 96, 125, 128, 182, 198], "about": [40, 56, 58, 78, 79, 83, 92, 109, 112, 120, 135, 157, 159, 201, 203, 206, 207], "tabular": [40, 160], "tabl": [40, 130, 160], "tri": 40, "share": [40, 92, 203], "its": [40, 54, 69, 70, 76, 86, 92, 118, 123, 125, 128, 137, 182, 191], "table_qa_tapas_base_finetuned_wtq": 40, "document_assembl": [40, 109, 130, 156, 160, 175], "table_json": 40, "document_t": [40, 160], "sentence_detector": [40, 90, 109, 119], "table_assembl": [40, 156, 175], "tableassembl": [40, 160], "stage": [40, 130, 157, 159, 182, 198, 202, 203, 206], "json_data": 40, "monei": [40, 160], "ag": [40, 66, 72, 160], "donald": [40, 160], "trump": [40, 160], "75": [40, 92, 160], "elon": [40, 160], "musk": [40, 160], "55": [40, 108, 160, 193], "AS": [40, 48, 109], "who": [40, 59, 61, 141, 202], "earn": 40, "count": [40, 112, 132], "old": [40, 48, 191], "xlmrobertaforquestionansw": 41, "xlm": [41, 42, 43, 84, 85], "xlm_roberta_base_qa_squad2": 41, "xlmrobertaforsequenceclassif": [42, 44], "xlm_roberta_base_sequence_classifier_imdb": 42, "xlmrobertafortokenclassif": 43, "xlm_roberta_base_token_classifier_conll03": 43, "xlmrobertaforzeroshotclassif": 44, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 44, "xlmroberta": 44, "xlnetforsequenceclassif": 45, "xlnet": [45, 46, 77, 86], "xlnet_base_sequence_classifier_imdb": 45, "xlnetfortokenclassif": 46, "spanbert_coref": 47, "spanbertcorefmodel": 48, "corefer": 48, "resolut": [48, 52], "spanbert": 48, "identifi": [48, 83, 92, 96, 100, 112, 113, 142, 143, 182, 203], "given": [48, 50, 52, 53, 54, 59, 61, 75, 87, 92, 109, 125, 126, 129, 132, 134, 135, 137, 168, 181, 182], "told": [48, 99], "mari": [48, 65, 79, 85, 121], "he": [48, 59, 61, 69, 99, 141, 193], "borrow": 48, "book": [48, 60, 126, 132, 189], "her": [48, 109], "link": [48, 185], "ontonot": 48, "corefresolut": 48, "spanbert_base_coref": 48, "maxsegmentlength": 48, "textgenr": 48, "genr": 48, "One": [48, 75, 92, 141, 144], "bc": 48, "broadcast": 48, "convers": 48, "bn": 48, "nw": 48, "wire": 48, "pt": 48, "pivot": 48, "testament": 48, "tc": 48, "telephon": 48, "wb": 48, "setmaxsegmentlength": 48, "settextgenr": 48, "clipforzeroshotclassif": 49, "clip": 49, "contrast": [49, 72, 75, 76, 96, 129], "neural": [49, 54, 64, 65, 69, 107, 121, 125, 128], "network": [49, 54, 64, 65, 73, 107, 121], "abil": [49, 92, 125, 126], "hard": [49, 136], "veri": [49, 53, 54, 59, 67, 73, 84, 85, 86, 125, 126, 128, 129, 157, 201, 203, 206, 207], "similar": [49, 63, 75, 81, 92, 94], "gpt": [49, 78, 112, 125, 126], "imageclassifi": [49, 50, 52, 53, 54], "image_assembl": [49, 50, 52, 53, 54, 156, 175], "zero_shot_classifier_clip_vit_base_patch32": 49, "huggingfac": [49, 50, 52, 53, 54, 67], "clipforzeroshotclassificationtestspec": 49, "candidatelabel": 49, "imagedf": [49, 50, 52, 53, 54], "dropinvalid": [49, 50, 52, 53, 54], "imageassembl": [49, 50, 52, 53, 54, 155], "photo": 49, "bird": [49, 53], "cat": [49, 50, 52, 53, 54], "dog": [49, 53], "hen": [49, 50, 52, 53, 54], "hippo": [49, 50, 52, 54], "room": [49, 53], "tractor": [49, 50, 52, 53, 54], "ostrich": [49, 50, 52, 53, 54], "ox": [49, 50, 52, 53, 54], "setcandidatelabel": 49, "pipelinedf": [49, 50, 52, 53, 54], "revers": [49, 50, 52, 53, 54], "split": [49, 50, 52, 53, 54, 59, 61, 120, 121, 128, 139, 141, 142, 146], "image_nam": [49, 50, 52, 53, 54], "palac": [49, 50, 52, 53, 54], "jpeg": [49, 50, 52, 53, 54], "egyptian_cat": [49, 50, 52, 53, 54], "hippopotamu": [49, 50, 52, 53, 54], "junco": [49, 50, 52, 53, 54], "bluetick": [49, 50, 52, 53, 54], "jpg": [49, 50, 52, 53, 54], "chihuahua": [49, 50, 52, 53, 54], "getcandidatelabel": 49, "image_classifier_vit_base_patch16_224": [49, 54], "convnextforimageclassif": 50, "convnet": 50, "convnext": 50, "2020": [50, 92, 97, 99, 121], "zhuang": 50, "liu": [50, 52, 69, 78, 79], "hanzi": 50, "mao": 50, "chao": 50, "yuan": 50, "wu": 50, "christoph": 50, "feichtenhof": 50, "trevor": 50, "darrel": 50, "sain": 50, "xie": 50, "pure": [50, 54, 128], "inspir": [50, 124, 134, 135, 178], "vision": [50, 52, 53, 54], "claim": 50, "outperform": [50, 72, 76, 77, 81, 84, 85, 86, 92, 126], "convnextforimageclassificationtestspec": 50, "roar": 50, "visual": [50, 52, 182], "began": 50, "introduct": 50, "vit": [50, 53, 54], "quickli": [50, 112], "supersed": 50, "vanilla": 50, "hand": [50, 141], "face": 50, "difficulti": 50, "detect": [50, 52, 81, 93, 94, 112, 113, 119, 120, 121], "semant": [50, 52, 66, 73, 75, 81, 130, 146], "hierarch": [50, 52, 71, 82], "swin": [50, 52], "reintroduc": 50, "sever": [50, 208], "practic": [50, 67, 125, 129], "viabl": 50, "backbon": [50, 52, 86], "demonstr": [50, 52, 70, 76, 92, 126, 128], "remark": 50, "wide": [50, 60, 64, 65, 69, 70, 72, 84, 85, 125], "varieti": [50, 76, 77, 84, 85, 207], "howev": [50, 63, 77, 80, 86, 92, 110, 186, 201], "effect": [50, 52, 53, 54, 76, 112, 120, 125, 129], "hybrid": 50, "still": [50, 126, 182], "credit": 50, "superior": 50, "inher": 50, "induct": [50, 70], "bias": [50, 70], "reexamin": 50, "space": [50, 71, 82, 83, 102, 130, 161], "achiev": [50, 69, 72, 75, 76, 77, 78, 79, 84, 85, 86, 107, 125, 126, 128, 129, 157, 206], "gradual": 50, "modern": 50, "resnet": 50, "toward": [50, 126], "discov": [50, 199], "compon": [50, 54, 114, 115, 147, 155, 164, 169, 180, 206], "contribut": 50, "along": [50, 89], "wai": [50, 56, 58, 87, 89, 159, 185], "outcom": 50, "explor": [50, 125, 129], "famili": [50, 60, 72], "dub": [50, 84, 85], "construct": [50, 62, 71, 82, 143, 185, 205], "compet": 50, "favor": 50, "term": [50, 92], "scalabl": 50, "87": [50, 52], "imagenet": [50, 52, 54], "coco": [50, 52], "ade20k": [50, 52], "while": [50, 52, 54, 63, 70, 75, 83, 92, 112, 115, 126, 182, 198, 203], "maintain": 50, "simplic": [50, 125], "effici": [50, 52, 69, 71, 81, 82, 128, 201], "dores": [50, 52, 53, 54], "resiz": [50, 52, 53, 54], "certain": [50, 52, 53, 54, 132], "donorm": [50, 52, 53, 54], "deviat": [50, 52, 53, 54], "featureextractortyp": [50, 52, 53, 54], "architectur": [50, 52, 53, 54, 63, 64, 65, 69, 78, 94, 107, 121, 125, 129], "featur": [50, 52, 53, 54, 56, 71, 82, 92, 102, 106, 115, 130, 182, 205], "imagemean": [50, 52, 53, 54], "imagestd": [50, 52, 53, 54], "resampl": [50, 52, 53, 54], "pil": [50, 52, 53, 54], "nearest": [50, 52, 53, 54, 130], "bilinear": [50, 52, 53, 54], "bicub": [50, 52, 53, 54], "do_res": [50, 52, 53, 54], "tupl": [50, 52, 53, 54, 181], "dorescal": [50, 52, 53], "rescal": [50, 52, 53], "rescalefactor": [50, 52, 53], "factor": [50, 52, 53, 84, 85, 86, 125, 129, 132], "croppct": 50, "percentag": [50, 83, 132, 146], "crop": 50, "tabbi": [50, 52], "river": [50, 52, 54], "hors": [50, 52, 54], "amphibiu": [50, 52, 54], "snowbird": [50, 52, 54], "struthio": [50, 52, 54], "camelu": [50, 52, 54], "thresher": 50, "thrasher": 50, "thresh": 50, "setdorescal": 50, "boolean": 50, "setrescalefactor": 50, "255": 50, "setcroppct": 50, "determin": [50, 62, 84], "smaller": [50, 61, 70, 71, 82], "224": 50, "256": 50, "specifi": [50, 62, 108, 109, 112, 121, 188, 189], "edg": [50, 70, 89], "afterward": 50, "image_classifier_convnext_tiny_224_loc": 50, "clip_for_zero_shot_classif": 51, "convnext_for_image_classif": 51, "swin_for_image_classif": 51, "vision_encoder_decoder_for_image_capt": 51, "vit_for_image_classif": 51, "swinforimageclassif": 52, "swinimageclassif": 52, "shift": 52, "window": [52, 53, 71, 76, 82, 92, 107, 132], "ze": 52, "yutong": 52, "lin": 52, "yue": 52, "cao": 52, "han": 52, "hu": 52, "yixuan": 52, "zheng": 52, "zhang": 52, "stephen": 52, "bain": 52, "guo": 52, "whose": [52, 62], "scheme": [52, 78, 125], "bring": [52, 202], "greater": [52, 92, 112], "attent": [52, 54, 69, 76, 112], "non": [52, 143, 146], "overlap": [52, 59, 61, 96, 101], "cross": [52, 84, 85, 108], "connect": 52, "image_classifier_swin_base_patch4_window7_224": 52, "swinforimageclassificationtest": 52, "present": [52, 63, 72, 73, 76, 78, 79, 81, 84, 85, 89, 112, 115, 121, 125, 128, 130], "call": [52, 62, 64, 65, 70, 72, 92, 112, 126, 181, 186, 188, 202, 208], "purpos": [52, 70, 72, 121], "adapt": 52, "aris": 52, "domain": [52, 75, 92, 126], "variat": 52, "high": [52, 81, 84, 85, 125, 128], "variou": [52, 86, 196], "complex": [52, 73, 81, 92, 134, 135], "respect": [52, 62, 69, 83, 106, 107, 191], "These": [52, 63, 78, 79, 86, 92, 106, 126, 185, 200], "broad": [52, 59, 126], "rang": [52, 64, 65, 69, 70, 72, 75, 84, 85, 125], "1k": 52, "dens": [52, 64, 65, 66, 130], "box": 52, "ap": 52, "51": [52, 149, 158, 191], "53": [52, 96, 101], "miou": 52, "val": 52, "Its": [52, 58, 109, 125], "surpass": [52, 69], "previou": [52, 75, 77, 84, 85, 126, 202], "margin": [52, 77, 86], "prove": 52, "benefici": [52, 92], "mlp": 52, "visionencoderdecoderforimagecapt": 53, "visionencoderdecod": 53, "caption": 53, "auto": [53, 125, 138], "beit": 53, "deit": 53, "gpt2": [53, 126], "image_captioning_vit_gpt2": 53, "visionencoderdecodertestspec": 53, "nreturnsequ": 53, "computation": [53, 73, 78, 79, 86, 125, 126, 128, 129], "expens": [53, 73, 78, 79, 86, 123, 125, 126, 128, 129, 134], "especi": [53, 125, 126, 128, 129], "larger": [53, 67, 70, 78, 79, 125, 126, 128, 129, 130], "acceler": [53, 73, 86, 125, 126, 128, 129, 175], "gpu": [53, 63, 125, 126, 128, 129, 175], "imagecapt": 53, "setbeams": [53, 125, 169], "setdosampl": [53, 125, 126, 128, 129, 169], "fill": [53, 125], "furnitur": 53, "lai": 53, "couch": 53, "anoth": [53, 203], "brown": 53, "bear": 53, "bodi": 53, "water": 53, "flock": 53, "chicken": 53, "stand": [53, 64, 65], "lush": 53, "green": 53, "field": [53, 71, 82, 83, 87, 101], "small": [53, 54, 60, 63, 67, 70, 71, 82, 95, 118, 157, 191, 206], "wet": 53, "ground": 53, "wooden": 53, "floor": 53, "wear": 53, "blue": 53, "sweater": 53, "man": [53, 126], "cow": 53, "vitforimageclassif": 54, "altern": [54, 92, 112, 123, 132, 134, 135, 157, 160, 202, 207], "vitimageclassificationtestspec": 54, "becom": [54, 63, 70, 92], "de": [54, 67, 92, 94, 128], "facto": [54, 92], "remain": [54, 60, 63, 70, 92], "conjunct": 54, "replac": [54, 60, 69, 76, 94, 95, 108, 121, 125, 134, 135, 168, 202], "overal": [54, 83, 86], "structur": [54, 109, 161, 201], "relianc": 54, "cnn": [54, 94, 107, 121], "necessari": [54, 62, 70, 198, 205], "directli": [54, 157, 182, 186, 198], "patch": 54, "mid": 54, "cifar": 54, "vtab": 54, "etc": [54, 68, 72, 75, 77, 150, 161, 198], "attain": 54, "excel": [54, 86], "substanti": [54, 64, 65], "fewer": [54, 63, 75, 130], "worth": 54, "16x16": 54, "egyptian": 54, "date2chunk": 55, "datematch": [55, 97], "multidatematch": [55, 97, 99], "entitynam": 55, "date_chunk": 55, "omicron": 55, "covid": 55, "world": [55, 59, 60, 61, 139, 182, 193, 198], "health": 55, "organ": [55, 92, 128], "nov": [55, 97, 99, 191], "26": [55, 105, 157, 174, 185, 193], "2021": [55, 97, 99], "118": [55, 160], "121": 55, "01": [55, 97, 99, 100], "setentitynam": 55, "dependencypars": [56, 58, 89], "dependencyparserapproach": [56, 189, 208], "unlabel": [56, 64, 65, 125, 126, 129], "grammat": [56, 58], "dependencyparsermodel": [56, 58, 89], "relationship": [56, 58, 81, 89], "tell": [56, 58, 92, 174], "verb": [56, 58, 189], "modifi": [56, 58, 78, 79, 105, 112, 121], "describ": [56, 58, 89, 92, 128], "particular": [56, 58, 92, 186, 202], "treebank": 56, "penn": 56, "setdependencytreebank": 56, "conll": [56, 58, 106, 107, 175, 189, 190, 205], "u": [56, 58, 69, 70, 92, 99, 105, 106, 107, 157, 174, 185, 189, 200, 203, 208], "setconllu": [56, 58], "dependencytreebank": 56, "conllu": [56, 58, 95, 175, 190, 205], "numberofiter": [56, 58], "converg": [56, 58, 118, 146], "better": [56, 58, 63, 69, 77, 86, 92, 106, 118, 120, 121, 124, 125, 146], "typeddependencyparserapproach": [56, 58], "postagg": [56, 58, 89, 106, 118], "dependency_treebank": 56, "emptydataset": [56, 58], "tree": [56, 89], "bank": 56, "setnumberofiter": [56, 58], "read_a": [56, 58, 87, 95, 96, 100, 101, 106, 110, 115, 123, 134, 135, 143, 167, 173, 175, 188, 189], "reada": [56, 58, 83, 87, 95, 96, 100, 101, 106, 110, 115, 123, 134, 135, 139, 143, 170, 173, 188, 189], "dep": 56, "dependency_conllu": [56, 89], "perceptron": [56, 90, 117], "typeddependencyparsermdoel": 56, "union": [56, 58], "worker": [56, 58], "turner": [56, 58], "newal": [56, 58], "sai": [56, 58, 92, 143], "disappoint": [56, 58], "talk": [56, 58, 112], "stricken": [56, 58], "parent": [56, 58], "firm": [56, 58], "feder": [56, 58], "mogul": [56, 58], "dependency_pars": [57, 90, 186, 207], "typed_dependency_pars": [57, 90], "typeddependencypars": [58, 89], "conll2009": 58, "typeddependencyparsermodel": [58, 89], "beforehand": 58, "2009": 58, "setconll2009": 58, "dependency_typ": [58, 89], "train_smal": 58, "txt": [58, 71, 82, 83, 95, 96, 100, 101, 118, 121, 123, 132, 134, 135, 139, 143, 191, 192, 208], "typdep": 58, "dependency_typed_conllu": [58, 89], "amod": 58, "flat": [58, 89, 152], "nsubj": [58, 89, 152, 189], "parataxi": 58, "documentnorm": [59, 60, 61], "documentcharactertextsplitt": 59, "roughli": 59, "separ": [59, 61, 70, 78, 100, 102, 120, 121, 134, 143, 146, 151, 174, 188, 200], "subtext": 59, "perfect": [59, 61], "reason": [59, 61, 112], "observ": [59, 61, 81], "seen": [59, 61, 125], "addition": [59, 61, 86, 107, 118, 149, 158, 185], "custom": [59, 83, 106, 107, 120, 121, 143, 175, 182], "setsplitpattern": [59, 143], "regex": [59, 60, 87, 97, 100, 110, 132, 134, 135, 142, 143, 146], "setpatternsareregex": 59, "setkeepsepar": 59, "trim": [59, 61], "whitespac": [59, 61, 142, 146, 148], "settrimwhitespac": [59, 61, 142], "individu": [59, 61, 62, 92, 132], "setexplodesplit": [59, 61], "documentcharactertextsplittertest": 59, "chunksiz": 59, "chunkoverlap": 59, "splitpattern": [59, 143], "decreas": [59, 112, 130], "prioriti": [59, 134, 143], "patternsareregex": 59, "keepsepar": 59, "explodesplit": [59, 61], "trimwhitespac": [59, 61, 142], "brioni": 59, "lodg": 59, "serpentin": 59, "aven": 59, "19798": 59, "39395": 59, "19597": 59, "did": [59, 92], "woman": 59, "think": 59, "39371": 59, "59242": 59, "19871": 59, "But": [59, 61, 66, 72], "said": [59, 61], "million": [59, 92, 108, 126], "red": 59, "men": 59, "59166": 59, "77833": 59, "18667": 59, "friend": 59, "enthusiast": 59, "musician": 59, "being": [59, 70, 107, 112, 115, 125, 128, 129, 130], "himself": 59, "capab": 59, "77835": 59, "97769": 59, "19934": 59, "And": 59, "yet": [59, 186], "convinc": 59, "come": [59, 92, 105, 112], "li": 59, "97771": 59, "117248": 59, "19477": 59, "she": [59, 141], "had": [59, 92, 112], "slate": 59, "colour": 59, "brim": 59, "straw": 59, "hat": 59, "feather": 59, "117250": 59, "137242": 59, "19992": 59, "That": [59, 92, 141, 182, 198, 203], "littl": [59, 121, 207], "paradox": 59, "profoundli": 59, "singulari": 59, "137244": 59, "157171": 59, "19927": 59, "setchunks": 59, "setchunkoverlap": 59, "raw": [60, 126, 141, 143, 146, 201, 203], "scrape": 60, "xml": 60, "remov": [60, 78, 79, 110, 124, 142, 150, 151, 152], "dirti": [60, 110], "want": [60, 61, 87, 108, 186, 203], "polici": 60, "__": [60, 125, 150, 151], "action": 60, "clean": [60, 110, 125, 129, 161, 203], "lowercas": [60, 110, 142, 146, 148], "pretty_al": 60, "utf": 60, "cleanuppattern": [60, 110], "normalizeddocu": 60, "setact": 60, "setpattern": [60, 142, 146], "setreplac": 60, "setpolici": 60, "setlowercas": [60, 110, 148, 161], "div": 60, "theworldsgreatest": 60, "right": [60, 64, 65, 125, 146], "hide": 60, "toptext": 60, "style": [60, 94, 129], "font": 60, "sego": 60, "ui": 60, "arial": 60, "san": [60, 92], "serif": 60, "largest": [60, 92, 126], "develop": [60, 92, 128, 179], "site": [60, 92], "h1": 60, "300": 60, "160": 60, "lorem": [60, 96, 101], "ipsum": [60, 96, 101], "print": [60, 62, 175, 186], "typeset": 60, "industri": 60, "been": [60, 67, 126, 144, 161, 186], "1500": 60, "unknown": [60, 61, 94], "printer": 60, "took": 60, "gallei": 60, "scrambl": 60, "specimen": 60, "surviv": 60, "five": [60, 108], "centuri": [60, 146], "leap": 60, "electron": 60, "essenti": [60, 126], "unchang": 60, "popularis": 60, "1960": 60, "letraset": 60, "passag": [60, 66, 72], "recent": [60, 64, 65, 69, 78, 79, 92, 112, 125], "desktop": 60, "publish": [60, 78, 79], "softwar": 60, "aldu": 60, "pagemak": 60, "setencod": 60, "documenttokensplitt": 61, "measur": [61, 70, 78, 79, 125, 182], "futur": [61, 121, 125, 129], "techniqu": [61, 63, 69, 125, 126, 129, 130], "documenttokensplittertest": 61, "numtoken": 61, "tokenoverlap": 61, "immens": 61, "faculti": 61, "extraordinari": 61, "power": [61, 64, 65, 125, 129], "2950": 61, "5707": 61, "2757": 61, "chang": [61, 62, 75, 178], "cloth": 61, "imagin": 61, "deduc": 61, "As": [61, 63, 64, 65, 66, 70, 72, 92, 112], "5659": 61, "8483": 61, "2824": 61, "quarter": 61, "receiv": [61, 191, 208], "Be": 61, "chamber": 61, "8427": 61, "11241": 61, "2814": 61, "piti": 61, "miss": [61, 97, 99, 148], "client": 61, "never": [61, 124, 202], "mind": 61, "him": [61, 99], "11188": 61, "13970": 61, "2782": 61, "person": [61, 87, 189], "emploi": [61, 86], "me": [61, 99], "wish": 61, "agent": 61, "conf": 61, "13918": 61, "16898": 61, "2980": 61, "letter": [61, 110, 126, 132, 191, 208], "secret": 61, "marriag": 61, "16836": 61, "19744": 61, "2908": 61, "seven": 61, "hundr": [61, 84, 85], "holm": [61, 132], "scribbl": 61, "receipt": 61, "shee": 61, "19683": 61, "22551": 61, "2868": 61, "setnumtoken": 61, "settokenoverlap": 61, "documenttokensplittertestspec": 62, "methodnam": 62, "runtest": 62, "By": [62, 123, 125, 129, 137, 142, 150, 175, 182, 198], "fixtur": 62, "testcas": 62, "subclass": [62, 113, 130, 163, 177, 181], "constructor": 62, "argument": [62, 186], "execut": [62, 130, 157, 202, 206], "author": 62, "deconstruct": 62, "overrid": [62, 181], "setup": 62, "teardown": 62, "__init__": 62, "must": [62, 71, 82, 95, 96, 100, 101, 112, 115, 123, 124, 134, 135, 148, 174, 175, 182, 188], "alwai": [62, 92, 112, 129], "signatur": 62, "attribut": [62, 182], "failureexcept": 62, "except": [62, 67, 102, 107, 143], "rais": [62, 78, 79, 92, 102, 107, 182], "assert": 62, "fail": [62, 148], "deem": 62, "error": [62, 132], "longmessag": 62, "long": [62, 65, 76, 86], "messag": [62, 200], "repr": 62, "failur": 62, "maxdiff": 62, "diff": 62, "difflib": 62, "hook": 62, "exercis": 62, "lite": 63, "googl": [63, 64, 65, 69, 71, 73, 78, 79, 81, 82, 92, 129, 189], "research": [63, 64, 65, 69, 71, 82, 128, 129], "toyota": 63, "technolog": 63, "institut": 63, "chicago": 63, "offici": [63, 92, 105, 106, 107, 157, 174, 185, 199], "tf": [63, 81], "wrapper": [63, 178], "port": 63, "properti": [63, 153, 154, 164, 167, 175], "albert_base_uncas": 63, "albert_bas": 63, "768": [63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 78, 79, 84, 85, 86], "emb": 63, "dim": 63, "12m": 63, "albert_large_uncas": 63, "albert_larg": 63, "1024": [63, 73, 76, 86], "24": [63, 86, 96, 101, 105, 132, 157, 174, 185, 201], "16": [63, 86, 108, 191, 201], "18m": 63, "albert_xlarge_uncas": 63, "albert_xlarg": 63, "2048": 63, "60m": 63, "albert_xxlarge_uncas": 63, "albert_xxlarg": 63, "235m": 63, "sentencepiec": [63, 69, 81], "everi": [63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 78, 79, 84, 85, 86, 107, 124, 128, 132, 149, 158, 159, 203], "dimens": [63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 169], "repeat": [63, 112], "footprint": 63, "cost": [63, 132, 134], "FOR": 63, "http": [63, 67, 69, 71, 73, 75, 81, 82, 112, 125, 146, 199], "tfhub": [63, 73, 81], "q": 63, "increas": [63, 66, 72, 83, 92, 112, 125, 126, 130, 134], "downstream": [63, 67, 69, 73, 75, 76, 86, 125, 126, 129], "some": [63, 65, 84, 92, 107, 121, 126, 159, 182, 193, 201, 202, 206, 207], "point": [63, 64, 65, 120, 121, 149, 158, 188], "harder": 63, "tpu": 63, "consumpt": [63, 81, 83], "speed": [63, 106, 128], "devlin": [63, 78, 79], "et": [63, 78, 79, 94], "al": [63, 78, 79], "2019": [63, 67, 69, 78, 79, 84, 85, 125], "comprehens": [63, 125, 126], "empir": [63, 64, 65, 84, 85, 86], "evid": 63, "lead": [63, 67, 84, 85], "focus": [63, 92, 112], "inter": 63, "coher": [63, 126], "establish": 63, "glue": [63, 64, 65, 70, 77, 78, 79, 84, 85, 125], "race": [63, 69, 78, 79], "embeddingsfinish": [63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 150], "finished_embed": [63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "setoutputasvector": [63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 150], "setcleanannot": [63, 69, 70, 73, 76, 78, 80, 81, 83, 84, 86, 150, 151, 152], "80": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 100, 150, 161], "1342473030090332": [63, 69], "3855540752410889": [63, 69], "9818322062492371": [63, 69], "784737348556518": [63, 69], "847029983997345": [63, 69], "047153353691101": [63, 69], "1520637571811676": [63, 69], "6245765686035156": [63, 69], "009860038757324219": [63, 69], "13450059294700623": [63, 69], "707749128341675": [63, 69], "2916892766952": [63, 69], "04192575812339783": [63, 69], "5764210224151611": [63, 69], "3196685314178467": [63, 69], "527840495109": [63, 69], "15583214163780212": [63, 69], "1614152491092682": [63, 69], "28423872590065": [63, 69], "135491415858268": [63, 69], "bertembed": [64, 68, 75, 80, 107, 150], "small_bert_l2_768": 64, "understand": [64, 65, 70, 77, 84, 86, 92, 125, 129, 146, 201], "introduc": [64, 65, 70, 73, 75, 76, 77, 125, 129], "unlik": [64, 65, 75, 84, 92, 141], "jointli": [64, 65], "condit": [64, 65, 125, 126, 128, 129, 169], "both": [64, 65, 72, 73, 81, 89, 112, 125, 202, 203], "left": [64, 65, 125, 146], "just": [64, 65, 70, 78, 102, 107], "modif": [64, 65], "conceptu": [64, 65], "obtain": [64, 65, 67, 72, 81], "eleven": [64, 65], "push": [64, 65], "absolut": [64, 65], "multinli": [64, 65], "86": [64, 65, 69], "v1": [64, 65], "f1": [64, 65, 84, 85, 107, 126], "93": [64, 65], "83": [64, 65, 69, 191, 192, 208], "small_bert_l2_128": 64, "3497989177703857": [64, 75], "480538547039032": [64, 75], "3238905668258667": [64, 75], "612930893898010": [64, 75], "1357314586639404": 64, "32984697818756104": 64, "6032363176345825": 64, "6791689395904": 64, "8244884014129639": 64, "27088963985443115": 64, "059438943862915": 64, "9817547798156": 64, "1648050546646118": 64, "4725411534309387": 64, "5938255786895752": 64, "5780693292617": 64, "9125322699546814": 64, "4563939869403839": 64, "3975459933280945": 64, "81611204147338": 64, "sentence_bert_embed": 65, "sent_small_bert_l2_768": 65, "islong": 65, "sent_small_bert_l2_128": 65, "orang": [65, 79, 85], "8951074481010437": [65, 79, 85], "13753940165042877": [65, 79, 85], "3108254075050354": [65, 79, 85], "65693199634552": [65, 79, 85], "6180210709571838": [65, 79, 85], "12179657071828842": [65, 79, 85], "191165953874588": [65, 79, 85], "4497021436691": [65, 79, 85], "822715163230896": [65, 79, 85], "7568016648292542": [65, 79, 85], "1165061742067337": [65, 79, 85], "59048593044281": [65, 79, 85], "setislong": 65, "bgeembed": 66, "bge": 66, "baai": 66, "low": [66, 84, 85, 132], "dimension": [66, 81], "bge_bas": 66, "queri": [66, 72, 199], "protein": [66, 72], "femal": [66, 72], "eat": [66, 72], "guidelin": [66, 72], "cdc": [66, 72], "women": [66, 72], "70": [66, 72, 75], "46": [66, 72, 193], "gram": [66, 71, 72, 82, 92, 102, 125, 126, 128, 129, 169], "dai": [66, 72, 97, 99, 132], "chart": [66, 72, 182, 198], "ll": [66, 72, 146], "marathon": [66, 72], "below": [66, 72, 89, 207], "0190285e": [66, 72], "005974853": [66, 72], "072875895": [66, 72], "007944068": [66, 72], "026059335": [66, 72], "0080": [66, 72], "050514214": [66, 72], "010061974": [66, 72], "04340176": [66, 72], "020937217": [66, 72], "05170225": [66, 72], "01157857": [66, 72], "camembertembed": 67, "tasti": 67, "french": [67, 92, 128, 137], "loui": 67, "martin": 67, "muller": 67, "pedro": 67, "javier": 67, "ortiz": 67, "su\u00e1rez": 67, "yoann": 67, "dupont": 67, "laurent": 67, "romari": 67, "\u00e9ric": 67, "villemont": 67, "la": [67, 112, 128], "clergeri": 67, "djam\u00e9": 67, "seddah": 67, "beno\u00eet": 67, "sagot": 67, "facebook": [67, 69, 84, 85, 125], "138gb": 67, "camembert_bas": 67, "camembertembeddingstestspec": 67, "co": [67, 92], "ubiquit": 67, "despit": [67, 125], "concaten": [67, 146], "investig": [67, 70, 81], "feasibl": 67, "monolingu": [67, 84, 85], "crawl": [67, 125, 129], "prefer": [67, 89, 152], "wikipedia": [67, 94, 126], "surprisingli": [67, 81], "4gb": 67, "130": 67, "gb": 67, "reach": [67, 92, 126, 146], "four": [67, 121, 144, 146], "un": [67, 94], "08442357927560806": 67, "12863239645957947": 67, "03835778683423996": 67, "200479581952": 67, "048462312668561935": 67, "12637358903884888": 67, "27429091930389404": 67, "07516729831": 67, "02690504491329193": 67, "12104076147079468": 67, "012526623904705048": 67, "031543646007": 67, "05877285450696945": 67, "08773420006036758": 67, "06381352990865707": 67, "122621834278": 67, "chunkembed": [68, 150], "wordembed": [68, 80, 83, 107, 150, 175], "chunker": [68, 90, 175], "ngramgener": [68, 102], "nerconvert": [68, 105, 106, 107, 182, 198], "poolingstrategi": [68, 80], "aggreg": [68, 80], "sum": [68, 73, 80], "skipoov": 68, "discard": [68, 109], "oov": 68, "setn": [68, 102], "wordembeddingsmodel": [68, 80, 83, 89, 106, 107, 108, 150], "setpoolingstrategi": [68, 80], "55661": 68, "42829502": 68, "86661": 68, "409785": 68, "06316501": 68, "120775": 68, "0732005": 68, "40674996": 68, "22938299": 68, "50597": 68, "288195": 68, "555655": 68, "465145": 68, "140118": 68, "17417": 68, "095253006": 68, "0530925": 68, "218465": 68, "714395": 68, "79860497": 68, "0129999": 68, "139705": 68, "177955": 68, "1887775": 68, "45545": 68, "20030999": 68, "461557": 68, "07891501": 68, "strategi": [68, 80, 97, 100, 120, 132, 168], "setskipoov": 68, "debertaembed": 69, "enhanc": [69, 124, 125], "disentangl": 69, "pengcheng": 69, "xiaodong": 69, "jianfeng": 69, "gao": 69, "weizhu": 69, "chen": [69, 78, 79], "2018": [69, 78, 79], "half": [69, 92], "deberta_v3_bas": 69, "microsoft": [69, 72, 77, 128], "www": 69, "blog": 69, "superglu": 69, "progress": [69, 121, 142], "significantli": [69, 73, 78, 79, 84, 85, 92], "novel": [69, 77, 86, 92, 125], "mechan": [69, 76], "weight": [69, 73, 92, 106, 108, 132], "among": [69, 77], "matric": 69, "second": [69, 73, 100, 120, 137, 142, 202], "mnli": 69, "9": [69, 84, 85, 102, 201, 206, 207], "90": 69, "91": 69, "88": 69, "made": [69, 81, 198], "publicli": [69, 84, 85], "distilbertembed": 70, "fast": [70, 124, 128, 157, 206], "cheap": 70, "distil": 70, "40": [70, 72, 108, 128], "uncas": 70, "preserv": [70, 105, 142, 161], "95": 70, "distilbert_base_cas": 70, "doesn": [70, 78], "token_type_id": [70, 78], "indic": [70, 78, 142, 146], "belong": [70, 78], "sep_token": [70, 78], "sep": 70, "position_id": 70, "ad": [70, 73, 112, 132], "though": [70, 92], "know": [70, 128, 159], "cheaper": 70, "lighter": 70, "preval": 70, "oper": [70, 76, 132, 141, 201], "constrain": 70, "budget": 70, "counterpart": 70, "leverag": [70, 77, 182, 198], "reduc": [70, 77, 134, 135, 161], "retain": 70, "97": [70, 97, 99, 146], "tripl": [70, 89], "cosin": 70, "distanc": [70, 130, 132, 134, 135], "devic": 70, "proof": 70, "concept": [70, 203], "experi": [70, 86, 112, 125, 182, 199], "1127224713563919": 70, "1982710212469101": 70, "5360898375511169": 70, "272536993026733": 70, "35534414649009705": 70, "13215228915214539": 70, "40981462597846985": 70, "14036104083061": 70, "328085333108902": 70, "06269335001707077": 70, "017595693469047546": 70, "024373905733": 70, "15617232024669647": 70, "2967822253704071": 70, "22324979305267334": 70, "04568954557180": 70, "45411425828933716": 70, "01173491682857275": 70, "190129816532135": 70, "1178255230188369": 70, "doc2vecapproach": 71, "word2vec": [71, 74, 90], "corpu": [71, 73, 82, 92, 95, 118, 125, 129, 132, 191, 208], "algorithm": [71, 82, 92, 106, 124, 132, 134, 135], "skip": [71, 82, 89, 132], "doc2vecmodel": 71, "vectors": [71, 82], "windows": [71, 82, 92], "numpartit": [71, 82], "partit": [71, 82, 188], "mincount": [71, 82, 132], "appear": [71, 82, 112, 132], "divid": [71, 82], "1000": [71, 82, 89, 106], "stepsiz": [71, 82], "optim": [71, 78, 79, 82, 107, 109, 121], "025": [71, 82], "maxit": [71, 82], "estim": [71, 82, 138, 153, 162, 171, 181, 202], "distribut": [71, 82], "composition": [71, 82], "sherlockholm": [71, 82, 132, 208], "setvectors": [71, 82], "setwindows": [71, 82, 92], "setsteps": [71, 82], "initi": [71, 82, 132, 142, 159, 175, 188, 189, 191, 192, 198], "setnumpartit": [71, 82], "setmaxit": [71, 82], "numiter": [71, 82], "equal": [71, 82], "setse": [71, 82], "setmincount": [71, 82, 132], "doc2vec_gigaword_300": 71, "06222493574023247": [71, 82], "011579325422644615": [71, 82], "009919632226228714": [71, 82], "109361454844": [71, 82], "doc2vec_wiki": 71, "getvector": [71, 82], "e5embed": [72, 77, 130], "e5": 72, "weakli": 72, "tailor": [72, 75], "e5_smal": 72, "unilm": 72, "manner": [72, 92], "signal": [72, 73], "curat": 72, "ccpair": 72, "readili": 72, "strong": [72, 84, 85], "conduct": 72, "extens": [72, 178], "56": [72, 191], "beir": 72, "mteb": 72, "bm25": 72, "baselin": [72, 81, 126], "beat": 72, "exist": [72, 73, 112, 132, 150, 152, 182], "elmoembed": 73, "elmo": 73, "billion": [73, 126], "lookup": [73, 83, 86, 96, 134, 135], "setpoolinglay": 73, "word_emb": 73, "shape": 73, "batch_siz": 73, "max_length": 73, "lstm_outputs1": 73, "lstm": [73, 107], "lstm_outputs2": 73, "trainabl": 73, "tensor": 73, "poolinglay": 73, "contextu": [73, 125, 132], "characterist": 73, "syntax": 73, "vari": [73, 112], "across": [73, 126], "linguist": [73, 146], "polysemi": 73, "intern": [73, 114, 115, 129, 132, 143, 146, 160, 164, 169, 175], "bilm": 73, "six": [73, 134, 135], "textual": [73, 75], "entail": 73, "expos": 73, "crucial": 73, "mix": [73, 113, 130, 163, 181], "semi": 73, "662458181381226e": 73, "2541114091873169": 73, "6275503039360046": 73, "5787073969841": 73, "19154725968837738": 73, "22998669743537903": 73, "2894386649131775": 73, "21524395048618": 73, "10400570929050446": 73, "12288510054349899": 73, "07056470215320587": 73, "246389418840": 73, "49932169914245605": 73, "12706467509269714": 73, "30969417095184326": 73, "2643227577209": 73, "8871506452560425": 73, "20039963722229004": 73, "0601330995559692": 73, "0348707810044": 73, "albert_embed": [74, 90], "bert_embed": [74, 90], "bert_sentence_embed": [74, 90], "bge_embed": [74, 90], "camembert_embed": [74, 90], "chunk_embed": [74, 90], "deberta_embed": [74, 90], "distil_bert_embed": [74, 90], "doc2vec": [74, 90], "e5_embed": [74, 90], "elmo_embed": [74, 90], "instructor_embed": [74, 90], "longformer_embed": [74, 90], "mpnet_embed": [74, 90], "roberta_embed": [74, 90], "roberta_sentence_embed": [74, 90], "universal_sentence_encod": [74, 90], "xlm_roberta_embed": [74, 90], "xlm_roberta_sentence_embed": [74, 90], "xlnet_embed": [74, 90], "instructorembed": 75, "instructor": 75, "finetun": [75, 76, 86], "scienc": [75, 92, 199], "financ": 75, "sota": [75, 86], "divers": [75, 81, 125, 126, 129, 199], "setinstruct": 75, "medicin": 75, "instructor_bas": 75, "summar": [75, 76, 92, 125, 126, 128, 129, 169], "embedd": 75, "hkunlp": 75, "togeth": 75, "explain": [75, 182, 198, 205, 207], "special": [75, 132, 146, 176, 203], "330": 75, "mixtur": 75, "66": [75, 108], "unseen": 75, "magnitud": [75, 134, 135], "suggest": [75, 126], "mitig": 75, "url": 75, "io": 75, "dynam": [75, 128], "scalar": 75, "degre": 75, "freedom": 75, "horava": 75, "lifshitz": 75, "graviti": 75, "longformerembed": 76, "iz": 76, "beltagi": 76, "matthew": 76, "arman": 76, "cohan": 76, "checkpoint": 76, "mlm": [76, 77], "096": 76, "longformer_base_4096": 76, "unabl": 76, "quadrat": 76, "linearli": 76, "easi": 76, "thousand": 76, "drop": [76, 137], "motiv": 76, "global": 76, "text8": 76, "enwik8": 76, "wikihop": 76, "triviaqa": 76, "led": [76, 78, 79, 92], "arxiv": [76, 125], "found": [76, 83, 92, 134, 141, 148, 188, 205], "18792399764060974": [76, 78], "14591649174690247": [76, 78], "20547787845134735": [76, 78], "1468472778797": [76, 78], "22845706343650818": [76, 78], "18073144555091858": [76, 78], "09725798666477203": [76, 78], "0417917296290": [76, 78], "07037967443466187": [76, 78], "14801117777824402": [76, 78], "03603338822722435": [76, 78], "17893412709": [76, 78], "08734266459941864": [76, 78], "2486150562763214": [76, 78], "009067727252840996": [76, 78], "24408400058": [76, 78], "22409197688102722": [76, 78], "4312366545200348": [76, 78], "1401449590921402": [76, 78], "356410235166549": [76, 78], "mpnetembed": 77, "mpnet": 77, "adopt": 77, "permut": [77, 86], "inherit": [77, 113, 130, 163, 181], "advantag": [77, 159], "all_mpnet_base_v2": 77, "neglect": [77, 86], "plm": 77, "doe": [77, 84, 92, 105, 128, 157, 159, 186, 203, 206, 207], "full": [77, 86, 202], "thu": [77, 92], "suffer": [77, 86], "discrep": [77, 86], "avoid": [77, 123], "auxiliari": 77, "160gb": 77, "corpora": [77, 92, 96], "down": [77, 107, 202, 203], "stream": [77, 112], "experiment": [77, 92], "022502584": 77, "078291744": 77, "023030775": 77, "0051000593": 77, "080340415": 77, "039": 77, "041702367": 77, "0010974605": 77, "015534201": 77, "07092203": 77, "0017729357": 77, "04661": 77, "robertaembed": [78, 84], "robustli": [78, 79, 109], "yinhan": [78, 79], "myle": [78, 79, 84, 85], "ott": [78, 79, 84, 85], "naman": [78, 79, 84, 85], "goyal": [78, 79, 84, 85], "jingfei": [78, 79], "du": [78, 79, 94], "mandar": [78, 79], "joshi": [78, 79], "danqi": [78, 79], "omer": [78, 79], "levi": [78, 79], "mike": [78, 79], "lewi": [78, 79], "luke": [78, 79, 84, 85], "zettlemoy": [78, 79, 84, 85], "veselin": [78, 79, 84, 85], "stoyanov": [78, 79, 84, 85], "hyperparamet": [78, 79], "mini": [78, 79], "roberta_bas": 78, "bpe": 78, "signific": [78, 79, 84, 85, 92, 95], "gain": [78, 79, 84, 85, 125], "care": [78, 79, 143], "comparison": [78, 79, 81, 137], "privat": [78, 79, 176], "choic": [78, 79, 100], "impact": [78, 79], "replic": [78, 79, 125], "carefulli": [78, 79, 112], "undertrain": [78, 79], "exce": [78, 79, 112], "highlight": [78, 79], "previous": [78, 79, 92], "overlook": [78, 79], "report": [78, 79, 81, 125, 182, 198], "robertasentenceembed": 79, "sent_roberta_bas": 79, "embeddingssent": 80, "22093398869037628": 80, "25130119919776917": 80, "41810303926467896": 80, "380883991718": 80, "tfhub_us": 81, "loadsp": 81, "op": 81, "lingual": [81, 84, 85, 92, 94, 128], "accur": [81, 124, 125, 134], "trade": [81, 84, 85], "tend": 81, "With": [81, 86, 92], "minim": [81, 109, 128], "encourag": 81, "weat": 81, "bia": [81, 112], "freeli": 81, "04616805538535118": 81, "022307956591248512": 81, "044395286589860916": 81, "0016493503": 81, "setloadsp": 81, "word2vecapproach": 82, "word2vecmodel": 82, "word2vec_gigaword_300": 82, "word2vec_wiki": 82, "dictionari": [83, 92, 95, 100, 106, 108, 109, 110, 123, 134, 135, 182], "setstoragepath": [83, 96], "line": [83, 87, 96, 101, 112, 121, 123, 132, 185, 188, 191], "delimit": [83, 87, 89, 95, 100, 102, 106, 110, 123, 142, 160, 188, 191], "39658191506190343": 83, "630968081620067": 83, "5393722253731201": 83, "8428180123359783": 83, "were": [83, 107, 182, 198], "7535235923631415": 83, "9699218875629833": 83, "10397182122983872": 83, "11833962569383116": 83, "stress": 83, "0492683418305907": 83, "9415954572751959": 83, "47624463167525755": 83, "16790967216778263": 83, "induc": 83, "1535748762292387": 83, "33498936903209897": 83, "9235178224122094": 83, "1158772920395934": 83, "withcoveragecolumn": 83, "overallcoverag": 83, "writebuffers": 83, "dump": 83, "disk": [83, 202, 203], "storag": [83, 87, 96, 167, 175], "10000": 83, "readcaches": 83, "cach": [83, 125, 129, 130, 186], "random_embeddings_dim4": 83, "abov": [83, 89, 191], "setstorageref": 83, "glove_4d": 83, "setdimens": [83, 169], "patient": 83, "diagnos": 83, "diabet": 83, "9439099431037903": 83, "4707513153553009": 83, "806300163269043": 83, "16176554560661316": 83, "7966810464859009": 83, "5551124811172485": 83, "8861005902290344": 83, "28284206986427307": 83, "025029370561242104": 83, "35177749395370483": 83, "052506182342767715": 83, "1887107789516449": 83, "08617766946554184": 83, "8399239182472229": 83, "5395117998123169": 83, "7864698767662048": 83, "6599600911140442": 83, "16109347343444824": 83, "6041093468666077": 83, "8913561105728149": 83, "5955275893211365": 83, "01899011991918087": 83, "4397728443145752": 83, "8911281824111938": 83, "9840458631515503": 83, "7599489092826843": 83, "9417727589607239": 83, "8624503016471863": 83, "setwritebuffers": 83, "setreadcaches": 83, "glove_100d": [83, 107], "There": [83, 87, 89, 141, 200, 202, 203, 208], "conveni": 83, "coverag": [83, 166], "stat": 83, "whole": [83, 185], "570580005645752": 83, "44183000922203064": 83, "7010200023651123": 83, "417129993438720": 83, "542639970779419": 83, "4147599935531616": 83, "0321999788284302": 83, "4024400115013122": 83, "2708599865436554": 83, "04400600120425224": 83, "020260000601410866": 83, "17395000159": 83, "6191999912261963": 83, "14650000631809235": 83, "08592499792575836": 83, "2629800140857": 83, "3397899866104126": 83, "20940999686717987": 83, "46347999572753906": 83, "6479200124740": 83, "embeddings_col": 83, "coverageresult": 83, "coverateresult": 83, "wordsoverallcoverag": 83, "resultdf": 83, "output_col": 83, "wordscoverag": 83, "cov_embed": 83, "loadstorag": [83, 96], "storage_ref": [83, 96], "xlmrobertaembed": 84, "alexi": [84, 85], "conneau": [84, 85], "kartikai": [84, 85], "khandelw": [84, 85], "vishrav": [84, 85], "chaudhari": [84, 85], "guillaum": [84, 85], "wenzek": [84, 85], "francisco": [84, 85, 92], "guzman": 84, "edouard": [84, 85], "grave": [84, 85], "5tb": [84, 85], "commoncrawl": [84, 85], "xlm_roberta_bas": 84, "abl": [84, 129, 182, 201], "correct": [84, 132, 134, 135, 146], "terabyt": [84, 85], "r": [84, 85, 92], "mbert": [84, 85], "xnli": [84, 85], "mlqa": [84, 85], "particularli": [84, 85, 125], "swahili": [84, 85], "urdu": [84, 85], "capac": [84, 85, 126], "dilut": [84, 85], "sacrif": [84, 85], "ri": [84, 85], "05969233065843582": 84, "030789051204919815": 84, "04443822056055069": 84, "09564960747": 84, "038839809596538544": 84, "011712731793522835": 84, "019954433664679527": 84, "0667808502": 84, "03952755779027939": 84, "03455188870429993": 84, "019103847444057465": 84, "04311436787": 84, "09579929709434509": 84, "02494969218969345": 84, "014753809198737144": 84, "10259044915": 84, "004710011184215546": 84, "022148698568344116": 84, "011723337695002556": 84, "013356896": 84, "xlmrobertasentenceembed": 85, "guzm\u00e3": 85, "sent_xlm_roberta_bas": 85, "xlnetembed": 86, "autoregress": 86, "xl": 86, "exhibit": 86, "involv": [86, 121], "rank": [86, 130, 132], "xlnet_large_cas": 86, "xlnet_base_cas": 86, "zihangdai": 86, "denois": [86, 125], "autoencod": [86, 125], "corrupt": [86, 125], "pro": 86, "con": 86, "enabl": [86, 107, 130, 134, 175], "maxim": [86, 132], "likelihood": [86, 112], "overcom": 86, "formul": 86, "furthermor": 86, "integr": [86, 92, 111, 128, 182, 198, 200], "idea": 86, "6287205219268799": 86, "4865287244319916": 86, "186111718416214": 86, "234187275171279": 86, "1967450380325317": 86, "2746637463569641": 86, "9481253027915955": 86, "3431355059146881": 86, "0777631998062134": 86, "092679977416992": 86, "5331977605819702": 86, "11190271377563": 86, "8349916934967041": 86, "45627787709236145": 86, "7890847325325012": 86, "028069257736": 86, "134845569729805": 86, "11672890186309814": 86, "4945235550403595": 86, "66587203741073": 86, "entityrul": 87, "entityrulerapproach": 87, "exact": [87, 96, 101, 112], "definit": [87, 109, 188], "json": [87, 112, 160, 182, 193], "jsonl": 87, "setpatternsresourc": 87, "might": [87, 107, 146, 207], "rule": [87, 97, 100, 123, 141, 143, 168], "w": [87, 90, 100, 106, 110, 141, 143, 175], "winterfel": 87, "jon": 87, "snow": [87, 108, 132], "stark": 87, "eddard": 87, "patternsresourc": 87, "usestorag": 87, "rocksdb": 87, "lord": 87, "29": [87, 108, 146, 191, 193], "38": [87, 193], "setusestorag": 87, "setsentencematch": 87, "setalphabetresourc": 87, "alphabet": [87, 110], "plain": [87, 208], "entityrulermodel": 87, "entity_rul": [88, 90], "graphextract": [89, 152], "graph": [89, 107, 128, 132, 138, 152], "nerdlmodel": [89, 105, 106, 107, 108, 182, 186, 198], "store": [89, 114, 115, 160, 164, 169, 180, 185, 193, 199], "node": 89, "relev": [89, 92, 112], "taken": 89, "implicitli": 89, "setmergeent": 89, "setdependencyparsermodel": 89, "settypeddependencyparsermodel": 89, "setrelationshiptyp": 89, "public": [89, 186, 202], "relationshiptyp": 89, "entitytyp": 89, "explodeent": 89, "roottoken": 89, "travers": 89, "maxsentences": 89, "minsentences": 89, "mergeent": 89, "merg": [89, 96, 101], "neighbor": [89, 130], "includeedg": 89, "symbol": [89, 132, 146], "posmodel": 89, "coordin": [89, 120], "remoteloc": 89, "graphfinish": [89, 152], "rdf": [89, 152], "nertagg": [89, 106, 107, 108], "morn": [89, 152], "flight": [89, 152], "denver": [89, 152], "18": [89, 97, 99, 102, 105, 108, 157, 174, 185, 201], "path1": 89, "setentitytyp": 89, "setexplodeent": 89, "setroottoken": 89, "setmaxsentences": 89, "setminsentences": 89, "setmergeentitiesiobformat": 89, "iob": [89, 105, 106, 107], "iob2": [89, 105], "setincludeedg": 89, "setdelimit": [89, 100, 102], "setposmodel": 89, "class": [90, 167, 172, 179, 190, 197, 198, 206, 208], "classifier_dl": [90, 175], "er": [90, 175], "keyword_extract": [90, 175], "yake_keyword_extract": [90, 91], "ld_dl": [90, 175], "language_detector_dl": [90, 93], "matcher": [90, 175], "big_text_match": [90, 98], "date_match": [90, 98], "multi_date_match": [90, 98], "regex_match": [90, 98], "text_match": [90, 98], "ner_approach": [90, 103], "ner_convert": [90, 103], "ner_crf": [90, 103], "ner_dl": [90, 103], "ner_overwrit": [90, 103], "openai": [90, 126, 175], "openai_complet": [90, 111], "openai_embed": [90, 111], "param": [90, 106, 113, 130, 163, 164, 169, 175, 180, 181], "sentence_detector_dl": [90, 119, 128], "sentiment_detector": [90, 122], "vivekn_senti": [90, 122], "seq2seq": [90, 175], "bart_transform": [90, 127], "gpt2_transform": [90, 127], "marian_transform": [90, 127], "t5_transform": [90, 127], "spell_check": [90, 175], "context_spell_check": [90, 133], "norvig_sweet": [90, 133], "symmetric_delet": [90, 133], "chunk_token": [90, 140], "recursive_token": [90, 140], "regex_token": [90, 140], "word_segment": [90, 145], "chunk2_doc": [90, 175], "date2_chunk": [90, 175], "document_character_text_splitt": [90, 175], "document_norm": [90, 175], "document_token_splitt": [90, 175], "graph_extract": [90, 175], "lemmat": [90, 123, 137, 159, 161, 175], "n_gram_gener": [90, 175], "stemmer": [90, 137, 175], "stop_words_clean": [90, 175], "token2_chunk": [90, 175], "yakekeywordextract": 92, "yake": 92, "independ": [92, 134, 135, 141], "grow": 92, "autom": 92, "adequ": 92, "emerg": [92, 125, 129], "tool": [92, 112, 125], "nor": 92, "thesauri": 92, "neither": 92, "written": [92, 128], "plethora": 92, "situat": [92, 121], "access": 92, "restrict": 92, "therefor": [92, 206], "sent": 92, "boundari": [92, 120, 121, 124, 143, 146], "detector": [92, 97, 123], "section": [92, 149, 158, 198, 200, 206], "tweakabl": 92, "upper": 92, "bound": [92, 120, 121, 124], "minngram": 92, "maxngram": 92, "occurr": [92, 168], "nkeyword": 92, "stopword": [92, 108, 137], "stop": [92, 106, 112, 129, 137], "campo": 92, "mangaravit": 92, "pasquali": 92, "jatowt": 92, "jorg": 92, "nune": 92, "journal": [92, 146], "elsevi": 92, "vol": 92, "509": 92, "pp": [92, 146], "257": 92, "289": 92, "turn": [92, 161, 202], "fly": 92, "demand": 92, "within": [92, 118, 124, 125, 126, 143, 148], "resort": 92, "solut": 92, "articl": [92, 132], "rest": [92, 105], "merit": 92, "ten": 92, "carri": 92, "twenti": 92, "setcontextchar": [92, 143], "setminngram": 92, "setnkeyword": 92, "acquir": 92, "kaggl": 92, "platform": [92, 112, 182, 200], "host": 92, "transact": 92, "somewhat": 92, "vagu": 92, "cloud": 92, "confer": 92, "week": [92, 97, 99, 139], "announc": [92, 108], "earli": 92, "tomorrow": [92, 97, 99], "phone": 92, "founder": 92, "ceo": 92, "anthoni": 92, "goldbloom": 92, "declin": 92, "deni": 92, "acquisit": 92, "happen": 92, "rumor": 92, "scientist": 92, "ben": 92, "hamner": 92, "2010": 92, "servic": [92, 112, 128], "got": 92, "even": [92, 129], "few": [92, 143, 191, 208], "competitor": 92, "drivendata": 92, "topcod": 92, "hackerrank": 92, "stai": 92, "ahead": 92, "nich": 92, "home": [92, 175], "bui": [92, 189], "commun": 92, "mindshar": 92, "too": [92, 123, 201], "plenti": 92, "bit": [92, 121, 207], "histori": [92, 121, 132], "earlier": 92, "month": [92, 97, 99, 191, 208], "team": [92, 128, 182, 198], "around": 92, "youtub": 92, "technologi": 92, "interest": 92, "kernel": 92, "On": [92, 126, 128], "analyz": [92, 124], "compani": [92, 128], "script": 92, "centric": 92, "job": [92, 148], "board": [92, 118, 191], "unclear": 92, "accord": [92, 132, 188], "crunchbas": 92, "pitchbook": 92, "launch": 92, "investor": 92, "ventur": 92, "sv": 92, "angel": 92, "levchin": 92, "naravik": 92, "chie": 92, "economist": 92, "hal": 92, "varian": 92, "khosla": 92, "yuri": 92, "milner": 92, "resulttupl": 92, "ascend": 92, "orderbi": 92, "32051516486864573": 92, "37786450577630676": 92, "39922830978423146": 92, "40224744669493756": 92, "41584827825302534": 92, "setmaxngram": 92, "setstopword": [92, 108, 137], "getstopword": 92, "loaddefaultstopword": [92, 137], "danish": [92, 137], "dutch": [92, 137], "finnish": [92, 137], "german": [92, 137, 188, 208], "hungarian": [92, 137], "italian": [92, 112, 132, 137], "norwegian": [92, 137], "portugues": [92, 137], "russian": [92, 137], "spanish": [92, 137], "swedish": [92, 137], "turkish": [92, 137], "languagedetectordl": 94, "ld": 94, "identif": 94, "rnn": 94, "tatoeba": 94, "140": 94, "wiki": 94, "languagedetector": 94, "ld_wiki_tatoeba_cnn_21": 94, "open": [94, 143, 148, 149, 150, 158, 161, 199], "advanc": [94, 148, 161], "scala": [94, 113, 130, 162, 163, 171, 177, 181], "program": 94, "biblioth\u00e8qu": 94, "traitement": 94, "pour": 94, "le": [94, 128], "avanc\u00e9": 94, "langag": 94, "naturel": 94, "programm": 94, "ist": 94, "ein": 94, "textverarbeitungsbibliothek": 94, "f\u00fcr": 94, "fortgeschritten": 94, "nat\u00fcrlich": 94, "sprachverarbeitung": 94, "die": 94, "programmiersprachen": 94, "und": 94, "lemma": [95, 123, 157, 185, 189, 203, 206, 207], "predefin": [95, 96, 100, 101, 123], "setdictionari": [95, 123, 134, 135], "lemmatizermodel": 95, "lemmas_smal": [95, 123], "setformcol": 95, "correspend": 95, "formcol": [95, 189], "setlemmacol": 95, "fromlemma": 95, "key_delimit": 95, "value_delimit": 95, "lemma_antbnc": 95, "bigtextmatch": [96, 101], "textmatch": [96, 101, 139], "externalresourc": [96, 101, 173], "mergeoverlap": [96, 101], "tokenizermodel": [96, 143], "trie": 96, "dolor": [96, 101], "magna": [96, 101], "aliqua": [96, 101], "sit": [96, 101], "laborum": [96, 101], "hello": [96, 101, 139, 193], "entityextractor": [96, 101, 139], "extractor": [96, 101, 139], "59": [96, 97, 99, 101], "setent": [96, 101, 104, 139], "setmergeoverlap": [96, 101], "settoken": 96, "tokenizer_model": 96, "bigtextmatchermodel": 96, "btm": 96, "textmatchermodel": [96, 101], "searchtri": 96, "datematcherutil": 97, "setinputformat": [97, 160], "setoutputformat": [97, 99], "desir": [97, 99], "yyyi": [97, 99], "mm": [97, 99, 146], "dd": [97, 99, 100], "Not": [97, 107, 159], "setreadmonthfirst": 97, "juli": 97, "5th": 97, "2015": 97, "07": 97, "05": 97, "setdefaultdaywhenmiss": 97, "setanchordateyear": [97, 99], "anchor": [97, 99], "year": [97, 99, 126, 139, 191], "setanchordatemonth": [97, 99], "januari": [97, 99], "setanchordatedai": [97, 99], "setrelaxedfactorystrategi": 97, "matchstrategi": [97, 168], "match_first": [97, 100, 168], "relax": 97, "exhaust": 97, "1978": [97, 99], "28": [97, 99, 105, 157, 174, 185, 193, 201], "1984": [97, 99], "04": [97, 99], "02": [97, 99], "1980": [97, 99], "79": [97, 99], "31st": [97, 99], "april": [97, 99], "2008": [97, 99], "fri": [97, 99], "1997": [97, 99], "jan": [97, 99], "sun": [97, 99], "1st": [97, 99], "thursdai": [97, 99], "wednesdai": [97, 99], "todai": [97, 99, 193], "yesterdai": [97, 99], "0600h": [97, 99], "06": [97, 99], "00": [97, 99], "6pm": [97, 99], "23": [97, 99, 100, 108, 118, 191, 192, 193, 208], "1988": [97, 99], "31": [97, 99, 100, 108, 118, 191], "dateformat": [97, 99], "readmonthfirst": [97, 99], "defaultdaywhenmiss": [97, 99], "anchordateyear": [97, 99], "anchordatemonth": [97, 99], "anchordatedai": [97, 99], "15": [97, 193], "saw": 99, "visit": [99, 112], "57": [99, 108], "65": [99, 108], "regexmatch": 100, "d": [100, 110, 143, 200], "1970": 100, "setrul": 100, "setexternalrul": 100, "match_al": [100, 168], "match_complet": [100, 168], "externalrul": 100, "ceremoni": 100, "setstrategi": 100, "71": 100, "short_dat": 100, "regexmatchermodel": 100, "regardless": 101, "entityvalu": 101, "buildfromtoken": 101, "27": [101, 118, 120, 191], "48": [101, 146, 193], "setentityvalu": 101, "setbuildfromtoken": 101, "null": 102, "empti": [102, 148], "enablecumul": 102, "join": [102, 118, 160, 191], "setenablecumul": 102, "nerapproach": 104, "recogn": [104, 105, 106, 107, 108, 109, 132], "setminepoch": [104, 106], "setrandomse": [104, 107, 114, 128], "getlabelcolumn": [104, 138], "friendli": [105, 112, 128], "whitelist": [105, 141], "setwhitelist": [105, 141], "outsid": 105, "prefix": [105, 141, 143, 182, 198], "preserveposit": [105, 142, 161], "org": [105, 106, 107, 108, 125, 146, 157, 174, 175, 185, 188, 199, 208], "14": [105, 118, 144, 157, 174, 185, 191], "ekeu": [105, 106, 107, 157, 174, 185], "36": [105, 118, 157, 174, 185, 191, 193], "baghdad": [105, 106, 107, 157, 174, 185], "37": [105, 157, 174, 185], "setpreserveposit": [105, 142, 161], "setnerhasnoschema": 105, "nercrf": 106, "nercrfapproach": [106, 107], "nercrfmodel": [106, 107], "crf": [106, 107], "2003": [106, 107, 146, 188, 208], "exclud": [106, 107], "setexternalfeatur": 106, "minepoch": [106, 107], "l2": 106, "c0": 106, "decai": [106, 107], "gradient": 106, "2250000": 106, "lossep": 106, "ep": 106, "minw": 106, "includeconfid": [106, 107], "confid": [106, 107, 109], "externalfeatur": 106, "nerdlapproach": [106, 107, 188, 208], "trainingdata": [106, 107, 121, 134, 135, 188], "readdataset": [106, 107, 118, 146, 188, 189, 191, 192, 193, 208], "conll2003": [106, 107, 188, 208], "eng": [106, 107, 188, 208], "setl2": 106, "l2valu": 106, "setc0": 106, "c0valu": 106, "setlossep": 106, "setminw": 106, "setincludeconfid": [106, 107], "verbosevalu": 106, "prerequisit": [106, 107, 108, 202], "nerdl": 107, "char": [107, 110, 121], "bilstm": 107, "tagger": [107, 191, 208], "50": [107, 108, 118, 125, 126, 193], "real": [107, 175, 182, 198], "rage": 107, "graphfold": [107, 132], "usecontrib": 107, "contrib": 107, "cell": [107, 160], "slightli": [107, 121], "includeallconfidencescor": 107, "enablememoryoptim": 107, "slow": 107, "usebestmodel": 107, "bestmodelmetr": 107, "micro": 107, "macro": 107, "setgraphfold": [107, 132, 138], "setusecontrib": 107, "setpo": 107, "setincludeallconfidencescor": 107, "setenablememoryoptim": 107, "setusebestmodel": 107, "setbestmodelmetr": 107, "nermodel": 107, "neroverwrit": 108, "setnewresult": 108, "nerword": 108, "overwritten": 108, "newnerent": 108, "lab": 108, "42": [108, 118], "45": [108, 118, 191, 193], "47": [108, 191, 193], "ner_overwritten": 108, "setnerword": 108, "setnewnerent": 108, "cardin": 108, "setreplaceent": 108, "rw": 108, "zeroshotnermodel": 109, "zeroshotn": 109, "zer_shot_n": 109, "entitydefinit": 109, "citi": 109, "town": 109, "predictionthreshold": 109, "01f": 109, "ignoreent": 109, "zero_shot_n": 109, "setentitydefinit": 109, "hellen": 109, "5328949": 109, "9360068": 109, "83294415": 109, "45366877": 109, "setpredictionthreshold": 109, "zero_shot_ner_roberta": 109, "shortcut": 109, "stem": [110, 136, 157, 185, 206, 207], "henc": 110, "pl": 110, "slangdictionari": 110, "slang": 110, "minlength": [110, 120, 121, 142, 143], "maxlength": [110, 120, 121, 142, 143], "setcleanuppattern": 110, "punctuat": [110, 120], "alphanumer": 110, "za": 110, "z": [110, 143], "brother": 110, "dont": [110, 124], "setslangdictionari": 110, "setminlength": [110, 120, 121, 142, 143], "setmaxlength": [110, 120, 121, 142, 143], "normalizermodel": 110, "openaicomplet": 112, "request": 112, "complet": [112, 182, 199, 202], "executor": 112, "doc": [112, 132, 192, 208], "suffix": [112, 141, 143, 202], "insert": [112, 134, 135, 202], "maxtoken": 112, "nucleu": 112, "mass": 112, "numberofcomplet": 112, "prompt": 112, "logprob": 112, "echo": 112, "presencepenalti": 112, "penal": 112, "topic": 112, "frequencypenalti": 112, "frequenc": [112, 124, 132, 134, 135, 146], "verbatim": 112, "bestof": 112, "best_of": 112, "server": [112, 207], "side": [112, 146], "logitbia": 112, "abus": [112, 113], "pleasur": 112, "dine": 112, "fiorita": 112, "truli": 112, "delight": 112, "menu": 112, "boast": 112, "wonder": 112, "classic": 112, "dish": 112, "exquisit": 112, "prepar": [112, 147, 149, 155, 158], "staff": [112, 123], "227": 112, "barbecu": 112, "joe": 112, "dinner": 112, "amaz": 112, "pull": 112, "pork": 112, "smoke": 112, "turkei": 112, "brisket": 112, "rib": 112, "sandwich": 112, "opt": 112, "172": 112, "overallr": 112, "reviewbodi": 112, "enjoi": 112, "meal": 112, "restaur": [112, 123], "food": 112, "flavour": 112, "beautifulli": 112, "setmodel": [112, 113, 121], "setsuffix": [112, 141], "setmaxtoken": 112, "plu": [112, 126], "max_token": 112, "cannot": 112, "settemperatur": [112, 125, 126, 128, 129, 169], "determinist": 112, "alter": 112, "settopp": [112, 125, 126, 128, 129, 169], "compris": 112, "setnumberofcomplet": 112, "consum": 112, "quota": 112, "ensur": [112, 177], "setlogprob": 112, "respons": [112, 121], "setecho": 112, "setstop": 112, "setpresencepenalti": 112, "setfrequencypenalti": 112, "setbestof": 112, "control": [112, 125, 126, 128, 129, 130, 132, 169], "candid": [112, 132, 134, 135, 143], "setlogitbia": 112, "mathemat": 112, "ban": 112, "exclus": 112, "50256": 112, "prevent": 112, "endoftext": 112, "setus": [112, 113], "openaiembed": 113, "py": [113, 130, 162, 163, 171, 177, 181], "ins": [113, 130, 163, 181], "uid": [113, 130, 163, 181], "classifierencod": 114, "attach": [114, 115, 164, 169, 180, 182], "evaluationdlparam": 115, "setevaluationlogextend": 115, "setenableoutputlog": [115, 182, 198], "setoutputlogspath": [115, 121, 182, 198], "assum": 115, "perceptronapproach": [118, 191, 208], "member": [118, 185], "datasetpath": 118, "pierr": [118, 191], "vinken": [118, 191], "34": [118, 191, 193], "md": [118, 191], "vb": [118, 188, 191, 208], "41": [118, 120, 191, 193], "43": [118, 120, 191, 193], "dt": [118, 191, 192, 208], "49": [118, 191], "poscol": [118, 146, 188], "niter": [118, 146], "anc": [118, 191, 208], "trainingperceptrondf": 118, "trainedpo": 118, "setposcolumn": [118, 146], "cd": [118, 188, 191], "setiter": 118, "getniter": [118, 146], "pos_anc": 118, "25": [118, 120, 191, 193], "33": [118, 193], "sentencedetectorparam": 120, "ii": 120, "abbrevi": 120, "period": 120, "geo": 120, "1026": 120, "253": 120, "553": 120, "ellipsi": 120, "quotat": 120, "mark": [120, 121, 146], "exclam": 120, "breaker": 120, "pragmaticcontentformatt": 120, "custombound": [120, 121], "setcustombound": [120, 121], "usecustomboundsonli": [120, 121], "explodesent": [120, 121, 188, 189], "useabbrevi": 120, "explicitli": [120, 121, 137, 174, 202], "customboundsstrategi": 120, "prepend": [120, 148], "break": 120, "append": [120, 132, 202], "parallel": [120, 121, 157, 188, 206], "splitlength": [120, 121], "forcibli": [120, 121], "99999": [120, 121, 143], "detectlist": 120, "nhow": 120, "setcustomboundsstrategi": 120, "setuseabbrevi": 120, "setdetectlist": 120, "setusecustomboundsonli": [120, 121], "setexplodesent": [120, 121], "setsplitlength": [120, 121], "sentencedetectordl": [121, 128], "sentencedetectordlapproach": 121, "sentencedetectordlmodel": [121, 128], "modelarchitectur": 121, "impossiblepenultim": 121, "imposs": [121, 146], "penultim": 121, "epochsnumb": 121, "eo": 121, "stefan": 121, "schweter": 121, "sajawel": 121, "ahm": 121, "cover": [121, 125, 129, 146], "broken": 121, "moder": 121, "lack": 121, "easier": [121, 151, 204, 208], "polit": 121, "successor": 121, "great": 121, "heritag": 121, "bequeath": 121, "nelson": 121, "mandela": 121, "setepochsnumb": 121, "model_architectur": 121, "validation_split": 121, "epochs_numb": 121, "output_logs_path": 121, "setimpossiblepenultim": 121, "impossible_penultim": 121, "sentencedl": 121, "sentencesdl": 121, "helen": 121, "total": [121, 146], "peopl": 121, "sentimentdetector": 123, "els": 123, "viveknsentimentapproach": [123, 124], "cool": 123, "superb": 123, "uninspir": 123, "sentimentscor": 123, "nice": [123, 182, 198], "entri": [123, 149, 158, 186], "sttr": 123, "sentimentdetectormodel": 123, "sda": [123, 124], "pragmat": 123, "viveknsenti": 124, "analys": 124, "vivek": 124, "narayanan": 124, "give": 124, "transit": [124, 132], "sentimentcol": 124, "prunecorpu": 124, "unfrequ": 124, "scenario": 124, "scope": 124, "naiv": 124, "bay": 124, "vivekn": 124, "setsentimentcol": 124, "train_senti": 124, "result_senti": 124, "finish": [124, 130, 150, 152, 156, 159, 175], "final_senti": 124, "cast": [124, 147], "horribl": 124, "go": [124, 202], "again": [124, 141], "anyon": 124, "protagonist": 124, "music": 124, "setprunecorpu": 124, "viveknsentimentmodel": 124, "sentiment_vivekn": 124, "barttransform": 125, "handl": [125, 172, 190], "captur": [125, 130], "past": [125, 128, 186], "incorpor": 125, "versatil": 125, "valuabl": 125, "summari": [125, 126, 129], "distilbart_xsum_12_6": 125, "barttestspec": 125, "cumul": [125, 126, 128, 129, 169], "ignoretokenid": [125, 126, 129], "usecach": 125, "ab": 125, "1910": 125, "13461": 125, "pytorch": 125, "fairseq": 125, "arbitrari": 125, "nois": 125, "reconstruct": [125, 161], "tranform": 125, "randomli": 125, "dialogu": 125, "roug": 125, "bleu": 125, "ablat": 125, "influenc": [125, 132], "setmaxoutputlength": [125, 126, 128, 129, 169], "200": [125, 129], "rich": [125, 129], "rise": [125, 129], "methodologi": [125, 129], "landscap": [125, 129], "unifi": [125, 129], "systemat": [125, 129], "dozen": [125, 129], "insight": [125, 129], "coloss": [125, 129], "facilit": [125, 129], "setignoretokenid": [125, 126, 128, 129], "setminoutputlength": [125, 126, 129, 169], "settopk": [125, 126, 128, 129, 169], "setrepetitionpenalti": [125, 126, 128, 129, 169], "ctrl": [125, 126, 128, 129, 169], "setnorepeatngrams": [125, 126, 128, 129, 169], "setcach": 125, "use_cach": 125, "gpt2transform": 126, "caus": [126, 143], "goal": [126, 146], "direct": 126, "10x": 126, "synthet": 126, "unpreced": 126, "prime": 126, "lengthi": 126, "benefit": 126, "suffici": 126, "learner": 126, "typic": 126, "taskspecif": 126, "webpag": [126, 199], "webtext": 126, "coqa": 126, "exceed": 126, "127": 126, "fashion": 126, "5b": 126, "underfit": 126, "reflect": 126, "paragraph": [126, 132], "promis": 126, "leonardo": 126, "1776": 126, "came": 126, "kingdom": 126, "mariantransform": 128, "marian": 128, "free": 128, "mainli": 128, "academ": 128, "notabl": 128, "edinburgh": 128, "adam": 128, "mickiewicz": 128, "pozna\u0144": 128, "commerci": 128, "contributor": 128, "mariannmt": 128, "engin": [128, 139], "behind": 128, "deploi": [128, 199], "opus_mt_en_fr": 128, "langid": 128, "maxinputlength": 128, "differenti": 128, "toolkit": 128, "setmaxinputlength": 128, "capit": [128, 132], "franc": 128, "quell": 128, "capital": 128, "devrait": 128, "savoir": 128, "fran\u00e7ai": 128, "setlangid": 128, "t5transform": 129, "t5": 129, "reconsid": 129, "hyper": 129, "t5_small": 129, "setstopateo": 129, "encount": 129, "setmaxnewtoken": 129, "setusecach": 129, "documentsimilarityrank": 130, "documentsimilarityrankerapproach": 130, "lsh": 130, "lib": 130, "approxim": 130, "aim": 130, "ranker": 130, "documentsimilarityrankermodel": 130, "doc_similarity_rank": 130, "enablecach": 130, "rdd": 130, "similaritymethod": 130, "neighbour": 130, "brp": 130, "bucket": 130, "euclidean": 130, "numberofneighbour": 130, "bucketlength": 130, "hash": 130, "numhasht": 130, "visibledist": 130, "identityrank": 130, "ident": 130, "debug": 130, "setsimilaritymethod": 130, "setnumberofneighbour": 130, "setbucketlength": 130, "setnumhasht": 130, "setvisibledist": 130, "setidentityrank": 130, "document_similarity_ranker_finish": 130, "documentsimilarityrankerfinish": 130, "finished_doc_similarity_rankings_id": 130, "finished_doc_similarity_rankings_neighbor": 130, "setextractnearestneighbor": 130, "docsimrankerpipelin": 130, "1510101612": 130, "1634839239": 130, "12448559591306324": 130, "612640902": 130, "1274183715": 130, "1220122862046063": 130, "1320876223": 130, "1293373212": 130, "17848855164122393": 130, "1548374770": 130, "1719102856": 130, "23297156732534166": 130, "visibl": 130, "inclus": 130, "extractnearestneighbor": 130, "getinputcol": [130, 138, 150, 151, 164], "getoutputcol": [130, 147, 149, 150, 151, 155, 158, 164], "document_similarity_rank": 131, "contextspellcheck": 132, "contextspellcheckerapproach": [132, 134, 135], "noisi": 132, "spell": [132, 133, 134, 135, 157, 161, 205, 206, 207], "contextspellcheckermodel": [132, 134, 135], "surround": [132, 160], "edit": [132, 134, 135], "subword": 132, "checker": [132, 134, 135, 205], "languagemodelclass": 132, "lm": 132, "wordmaxdist": 132, "maxcandid": 132, "casestrategi": 132, "uppercas": 132, "errorthreshold": 132, "perplex": 132, "nlm": 132, "initialr": 132, "finalr": 132, "validationfract": 132, "datapoint": 132, "min": 132, "vocab": 132, "compoundcount": 132, "compound": 132, "classcount": 132, "tradeoff": 132, "weighteddistpath": 132, "levenshtein": [132, 134, 135], "maxwindowlen": 132, "rememb": 132, "maxsentlen": 132, "norvigsweetingapproach": [132, 134, 135, 208], "symmetricdeleteapproach": [132, 134, 135, 208], "depth": [132, 205], "explan": [132, 205], "awar": 132, "sherlock": 132, "spellcheck": [132, 134, 135], "setwordmaxdist": 132, "setepoch": 132, "setlanguagemodelclass": 132, "1650": 132, "addvocabclass": 132, "_name_": 132, "extra": [132, 134, 202], "dist": 132, "setmaxcandid": 132, "setcasestrategi": 132, "seterrorthreshold": 132, "setinitialr": 132, "setfinalr": 132, "setvalidationfract": 132, "fraction": 132, "setcompoundcount": 132, "setclasscount": 132, "settradeoff": 132, "alpha": 132, "setweighteddistpath": 132, "setmaxwindowlen": 132, "setmaxsentlen": 132, "sentlen": 132, "userdist": 132, "addregexclass": 132, "spellcheck_dl": 132, "gamma": 132, "decis": 132, "correctsymbol": 132, "comparelowcas": 132, "vocabfreq": 132, "idsvocab": 132, "vocabid": 132, "usenewlin": 132, "newlin": 132, "norvigsweetingmodel": [132, 134, 135], "symmetricdeletemodel": [132, 134, 135], "cold": 132, "dreari": 132, "countri": 132, "white": 132, "smow": 132, "setweight": 132, "setgamma": 132, "setvocabfreq": 132, "setidsvocab": 132, "setvocabid": 132, "setclass": 132, "getwordclass": 132, "updateregexclass": 132, "updat": 132, "updatevocabclass": 132, "setcorrectsymbol": 132, "setcomparelowcas": 132, "norvigsweet": 134, "norvig": 134, "bayesian": 134, "tokenpattern": 134, "sensit": [134, 137, 143], "doublevari": 134, "shortcircuit": 134, "frequencyprior": 134, "ham": 134, "intersect": 134, "wordsizeignor": 134, "dupslimit": 134, "duplic": 134, "reductlimit": 134, "attempt": 134, "vowelswaplimit": 134, "vowel": 134, "swap": 134, "corrector": 134, "gummi": [134, 135], "gummic": [134, 135], "gummier": [134, 135], "gummiest": [134, 135], "gummifer": [134, 135], "basi": [134, 135], "token_pattern": [134, 135], "setdoublevari": 134, "setshortcircuit": 134, "setfrequencyprior": 134, "symmetr": [134, 135], "delet": [134, 135, 202], "damerau": [134, 135], "transpos": [134, 135], "spellcheck_norvig": 134, "symspel": [134, 135], "somtim": 134, "wrrite": [134, 135], "wordz": [134, 135], "erong": [134, 135], "sometim": [134, 135, 202], "wrong": [134, 135], "symmetricdelet": 135, "deriv": 135, "teach": 135, "maxeditdist": 135, "frequencythreshold": [135, 146], "deletesthreshold": 135, "patttern": 135, "setmaxeditdist": 135, "setfrequencythreshold": [135, 146], "setdeletesthreshold": 135, "spellcheck_sd": 135, "spmetim": 135, "employ": 136, "stopwordsclean": [137, 150, 161], "mllib": [137, 199], "stopwordsremov": 137, "cleantoken": [137, 150, 161], "stopwords_en": 137, "jvm": [137, 175], "forth": 137, "setlocal": 137, "tfnerdlgraphbuildermodel": 138, "tfnerdlgraphbuild": 138, "sethiddenunitsnumb": 138, "assertiondlapproach": 138, "medicalnerapproach": 138, "gethiddenunitsnumb": 138, "srt": 138, "getgraphfold": 138, "setgraphfil": 138, "greaph": 138, "getgraphfil": 138, "chunktoken": 139, "flatten": 139, "artist": 139, "benezar": 139, "robert": 139, "farendel": 139, "graduat": 139, "luca": 139, "chunktokenizermodel": 139, "recursivetoken": 141, "recurs": [141, 159, 171, 175, 179], "infix": [141, 143], "qam": 141, "setprefix": 141, "setinfix": 141, "recursivetokenizermodel": 141, "regextoken": [142, 146, 203], "tolowercas": [142, 146], "positionalmask": 142, "guarante": 142, "increment": 142, "flag": 142, "eventu": 142, "settolowercas": [142, 146], "nthi": 142, "setpositionalmask": 142, "tokenizedsent": 143, "rulefactori": [143, 168], "targetpattern": 143, "grab": 143, "prefixpattern": 143, "suffixpattern": 143, "infixpattern": 143, "sub": 143, "won": 143, "exceptionspath": 143, "casesensitiveexcept": 143, "contextchar": 143, "splitchar": 143, "didn": 143, "jane": 143, "boyfriend": 143, "getinfixpattern": 143, "getsuffixpattern": 143, "getprefixpattern": 143, "getcontextchar": 143, "getsplitchar": 143, "settargetpattern": 143, "setprefixpattern": 143, "setsuffixpattern": 143, "setinfixpattern": 143, "addinfixpattern": 143, "setexcept": 143, "getexcept": 143, "setexceptionspath": 143, "addexcept": 143, "setcasesensitiveexcept": 143, "getcasesensitiveexcept": 143, "addcontextchar": 143, "setsplitchar": 143, "addsplitchar": 143, "piec": 143, "token_rul": 143, "token2chunk": 144, "17": [144, 191, 193], "wordsegment": 146, "wordsegmenterapproach": 146, "korean": 146, "japanes": 146, "chines": 146, "correspond": [146, 182], "rr": 146, "likewis": 146, "themselv": 146, "\u4e0a\u6d77": 146, "\u8ba1\u5212": 146, "\u5230": 146, "\u672c": 146, "\u4e16\u7eaa": 146, "\u672b": 146, "\u5b9e\u73b0": 146, "\u4eba\u5747": 146, "\u56fd\u5185": 146, "\u751f\u4ea7": 146, "\u603b\u503c": 146, "\u4e94\u5343": 146, "\u7f8e\u5143": 146, "\u4e0a": 146, "\u6d77": 146, "\u8ba1": 146, "\u5212": 146, "\u4e16": 146, "\u7eaa": 146, "\u5b9e": 146, "\u73b0": 146, "\u4eba": 146, "\u5747": 146, "\u56fd": 146, "\u5185": 146, "\u751f": 146, "\u4ea7": 146, "\u603b": 146, "ll\u503c": 146, "\u4e94": 146, "\u5343": 146, "\u7f8e": 146, "\u5143": 146, "shanghai": 146, "plan": 146, "dollar": 146, "capita": 146, "gdp": 146, "wordsegmentermodel": 146, "tip": 146, "frame": 146, "least": 146, "frequent": 146, "ambiguitythreshold": 146, "enableregextoken": 146, "xue": 146, "nianwen": 146, "volum": 146, "februari": 146, "aclweb": 146, "aclanthologi": 146, "o03": 146, "4002": 146, "chinese_train": 146, "utf8": 146, "\u5341": 146, "\u56db": 146, "\u4e0d": 146, "\u662f": 146, "setniter": 146, "trainingdataset": 146, "setambiguitythreshold": 146, "getfrequencythreshold": 146, "getambiguitythreshold": 146, "setenableregextoken": 146, "plit": 146, "words_seg": 146, "wordseg_pku": 146, "zh": 146, "\u7136\u800c": 146, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 146, "\u9019\u6a23": 146, "\u7684": 146, "\u8655\u7406": 146, "\u4e5f": 146, "\u884d\u751f": 146, "\u4e86": 146, "\u4e00\u4e9b": 146, "\u554f\u984c": 146, "outputcol": [147, 149, 150, 151, 152, 155, 158], "inferschema": 147, "tmp": [147, 155, 175, 198], "librispeech_asr_dummy_clean_audio_array_parquet": 147, "float_arrai": 147, "chunkcol": 148, "stringtyp": 148, "setisarrai": 148, "startcol": 148, "startcolbytokenindex": 148, "isarrai": 148, "failonmiss": 148, "chunkassembl": 148, "setchunkcol": 148, "setstartcol": 148, "setstartcolbytokenindex": 148, "setfailonmiss": 148, "disabl": [149, 158], "idcol": [149, 158], "metadatacol": [149, 158], "cleanupmod": [149, 158], "cleanup": [149, 158], "inplac": [149, 158], "inplace_ful": [149, 158], "shrink_ful": [149, 158], "each_ful": [149, 158], "delete_ful": [149, 158], "setidcol": [149, 158], "setmetadatacol": [149, 158], "usabl": 150, "lda": 150, "forest": 150, "featurecol": 150, "cleanannot": [150, 151, 152], "outputasvector": 150, "gloveembed": 150, "finished_sentence_embed": 150, "resultwiths": 150, "1619900017976761": 150, "045552998781204224": 150, "03229299932718277": 150, "685609996318": 150, "42416998744010925": 150, "1378999948501587": 150, "5717899799346924": 150, "5078899860382": 150, "08621499687433243": 150, "15772999823093414": 150, "06067200005054474": 150, "395359992980": 150, "4970499873161316": 150, "7164199948310852": 150, "40119001269340515": 150, "05761000141501": 150, "08170200139284134": 150, "7159299850463867": 150, "20677000284194946": 150, "0295659992843": 150, "valuesplitsymbol": 151, "annotationsplitsymbol": 151, "includemetadata": 151, "outputasarrai": [151, 152], "parseembeddingsvector": 151, "setvaluesplitsymbol": 151, "setannotationsplitsymbol": 151, "setincludemetadata": [151, 203], "setoutputasarrai": [151, 152], "setparseembeddingsvector": 151, "finishedresult": 152, "hasrecursivefit": [153, 154], "java_obj": [153, 178, 181], "py4j": [153, 154, 181], "java_gatewai": [153, 154, 181], "javaobject": [153, 154, 181], "recursivepipelin": [153, 154, 159, 164], "hasrecursivetransform": 154, "doc2_chunk": [156, 175], "embeddings_finish": [156, 175], "graph_finish": [156, 175], "has_recursive_fit": [156, 175], "has_recursive_transform": [156, 175], "light_pipelin": [156, 175], "recursive_pipelin": [156, 175], "token_assembl": [156, 175], "lightpipelin": [157, 185, 206], "parse_embed": [157, 185], "hold": [157, 206], "principl": [157, 206], "everyth": [157, 206, 207], "fullannot": [157, 185], "happi": [157, 201, 203, 206, 207], "prp": [157, 189, 191, 201, 206, 207, 208], "rb": [157, 191, 201, 206, 207, 208], "optional_target": [157, 185], "explain_document_pipelin": [157, 174, 185, 201, 206, 207], "dict_kei": [157, 185], "fullannotateimag": [157, 185], "path_to_imag": [157, 185], "setignoreunsupport": 157, "unsupport": 157, "annotatormodel": [157, 163, 186], "getignoreunsupport": 157, "text2": 158, "document1": 158, "document2": 158, "arg": [159, 178], "kwarg": 159, "decid": 159, "behav": 159, "exactli": 159, "intent": 159, "recursivepipelinemodel": 159, "pipeline_model": [159, 182, 198], "intend": 159, "tab": [160, 182, 198], "escap": 160, "quot": 160, "inputformat": 160, "csvdelimit": 160, "defailt": 160, "comma": 160, "escapecsvdelimit": 160, "table_csv": 160, "csv_data": 160, "input_format": 160, "setcsvdelimit": 160, "setescapecsvdelimit": 160, "tokenassembl": 161, "cleantext": 161, "opensourc": 161, "annotatorapproach": [162, 171, 182], "annotatorproperti": 164, "setlazyannot": 164, "lazili": 164, "getlazyannot": 164, "annotator_approach": [167, 175], "annotator_model": [167, 175], "annotator_properti": [167, 175], "coverage_result": [167, 175], "match_strategi": [167, 175], "recursive_annotator_approach": [167, 175], "regard": 168, "constant": [168, 170], "hasembeddingsproperti": 169, "getdimens": 169, "setnreturnsequ": 169, "recursiveannotatorapproach": 171, "fo": 173, "assist": 174, "map_annot": 174, "f": [174, 182, 198], "output_typ": 174, "udf": 174, "userdefinedfunct": 174, "def": 174, "nnp_token": 174, "lambda": 174, "alia": 174, "epeu": 174, "map_annotations_arrai": 174, "map_annotations_strict": 174, "map_annotations_col": 174, "output_column": 174, "annotatyon_typ": 174, "chunks_df": 174, "pos_chunk": 174, "vbz": [174, 188, 208], "filter_by_annotations_col": 174, "filter_po": 174, "explode_annotations_col": 174, "annotator_java_ml": [175, 179], "annotator_transform": [175, 179], "extended_java_wrapp": [175, 179], "params_getters_sett": [175, 179], "comet": [175, 183, 200], "pretrained_pipelin": [175, 184], "resource_download": [175, 184], "pub_tat": [175, 190], "annotation_audio": 175, "annotation_imag": 175, "apple_silicon": 175, "aarch64": 175, "cache_fold": 175, "log_fold": 175, "cluster_tmp_dir": 175, "real_time_output": 175, "output_level": 175, "correctli": 175, "maco": 175, "linux": 175, "alloc": 175, "directori": [175, 186, 198], "cache_pretrain": 175, "temporarili": 175, "unpack": 175, "hadoop": 175, "dir": 175, "s3": [175, 186], "hdf": 175, "dbf": 175, "annotator_log": 175, "annotatorjavamlread": 176, "mixin": 176, "javamlread": 176, "classmethod": 176, "mlreader": 176, "clazz": 176, "rl": 176, "javaparam": 176, "annotatortransform": 177, "_java_obj": 177, "javawrapp": 178, "extendedjavawrapp": 178, "new_java_arrai": 178, "pylist": 178, "java_class": 178, "todo": 178, "paramsgetterssett": 180, "getparamvalu": 180, "paramnam": 180, "setparamvalu": 180, "recursiveestim": 181, "recursivetransform": 181, "cometlogg": [182, 198], "workspac": 182, "project_nam": [182, 198], "comet_mod": [182, 198], "experiment_id": 182, "experiment_kwarg": 182, "logger": [182, 198], "meta": [182, 200], "practition": [182, 198], "reliabl": [182, 198], "streamlin": [182, 198], "lifecycl": [182, 198, 200], "track": [182, 198, 199], "reproduc": [182, 198, 199], "outputlogpath": [182, 198], "onlin": [182, 198], "reus": 182, "importerror": 182, "output_log_path": [182, 198], "embd": [182, 198], "setshuffleperepoch": [182, 198], "logdir": [182, 198], "interfac": [182, 198, 206], "comet_ml": [182, 198], "log_pipeline_paramet": [182, 198], "log_visu": [182, 198], "html": [182, 198], "viz": [182, 198], "upload": 182, "colum": [182, 198], "ner_chunk": [182, 198], "sparknlp_displai": [182, 198], "nervisu": [182, 198], "idx": [182, 198], "enumer": [182, 198], "label_col": [182, 198], "document_col": [182, 198], "return_html": [182, 198], "log_metr": [182, 198], "sklearn": [182, 198], "preprocess": [182, 198], "multilabelbinar": [182, 198], "classification_report": [182, 198], "preds_df": [182, 198], "topanda": [182, 198], "mlb": [182, 198], "y_true": [182, 198], "fit_transform": [182, 198], "y_pred": [182, 198], "output_dict": [182, 198], "log_paramet": 182, "log_completed_run": 182, "log_file_path": 182, "log_asset": 182, "asset_path": 182, "asset": 182, "log_asset_data": 182, "interv": 182, "refresh": 182, "outstand": 182, "disk_loc": 185, "light_model": 185, "gather": 185, "resourcedownload": [186, 202, 207], "showpublicmodel": [186, 202], "onto_100": 186, "onto_300": 186, "ner_dl_bert": 186, "similarli": 186, "showpublicpipelin": [186, 207], "check_spel": [186, 207], "match_datetim": [186, 207], "downloadmodel": 186, "reader": 186, "j_dwn": 186, "pythonresourcedownload": 186, "downloadmodeldirectli": 186, "unzip": 186, "downloadpipelin": 186, "clearcach": 186, "clear": 186, "filer": 186, "showuncategorizedresourc": 186, "showavailableannot": 186, "documentcol": [188, 189], "sentencecol": [188, 189], "tokencol": 188, "conlllabelindex": 188, "conllposindex": 188, "conlldocidcol": 188, "doc_id": [188, 192], "textcol": [188, 189], "labelcol": 188, "includedocid": 188, "docstart": [188, 208], "eu": [188, 208], "np": [188, 208], "reject": [188, 208], "vp": [188, 208], "misc": [188, 208], "boycott": [188, 208], "british": [188, 208], "lamb": [188, 208], "blackburn": 188, "brussel": 188, "1996": 188, "08": 188, "storage_level": 188, "storagelevel": 188, "disk_onli": 188, "lift": 188, "persist": 188, "uposcol": 189, "upo": 189, "xposcol": 189, "xpo": 189, "lemmacol": 189, "sent_id": 189, "sell": 189, "pron": 189, "nom": 189, "plur": 189, "_": 189, "tens": 189, "conj": 189, "cc": 189, "obj": 189, "spaceaft": 189, "No": [189, 201], "punct": 189, "conllufil": [189, 208], "conlldataset": [189, 208], "morph": 189, "Into": 189, "googleo": 189, "sconj": 189, "propn": 189, "adp": 189, "wp": 189, "vbd": [189, 191, 208], "ago": [191, 208], "posdf": 191, "61": 191, "67": [191, 192, 208], "nonexecut": 191, "69": 191, "76": 191, "director": 191, "78": 191, "81": 191, "84": 191, "outputposcol": 191, "outputdocumentcol": 191, "outputtextcol": 191, "pubtat": [192, 205], "medic": [192, 208], "titl": [192, 208], "medment": [192, 208], "25763772": [192, 208], "dctn4": [192, 208], "t116": [192, 208], "t123": [192, 208], "c4308010": [192, 208], "63": [192, 208], "chronic": [192, 208], "pseudomona": [192, 208], "aeruginosa": [192, 208], "infect": [192, 208], "t047": [192, 208], "c0854135": [192, 208], "82": [192, 208], "cystic": [192, 208], "fibrosi": [192, 208], "c0010674": [192, 208], "120": [192, 208], "pa": [192, 208], "124": [192, 208], "139": [192, 208], "pubtatorfil": 192, "corpus_pubtator_sampl": 192, "pubtatordataset": 192, "finished_token": [192, 203], "finished_po": 192, "finished_n": 192, "finished_token_metadata": 192, "finished_pos_metadata": 192, "finished_label_metadata": 192, "mo": 192, "ispaddedtoken": 192, "pad": 192, "spacytoannot": 193, "token_spac": 193, "sentence_end": 193, "spaci": 193, "multi_doc_token": 193, "went": 193, "night": 193, "bought": 193, "bread": 193, "54": 193, "overview": [197, 205], "workflow": 198, "dedic": 198, "account": 198, "inspect": 198, "init": 198, "sparknlp_experi": 198, "offline_directori": 198, "later": 198, "nativ": 199, "record": 199, "registri": 199, "central": 199, "send": 200, "mlflow": 200, "content": [201, 207], "clearli": 201, "explain_document_ml": [201, 206, 207], "approx": [201, 206, 207], "mb": [201, 206, 207], "ok": [201, 206, 207], "spearhead": 202, "produc": 202, "declar": 202, "accordingli": 202, "extra_loc": 202, "offer": [202, 204, 207], "classifierdl_use_trec50": 202, "classifierdl_use_spam": 202, "column_nam": 202, "preced": 202, "interchang": 203, "road": 203, "proce": 203, "At": 203, "sens": 207, "constantli": 207, "train_po": 208, "training_conl": 208, "train_corpu": 208, "withcolumnrenam": 208, "trainingpubtatordf": 208, "corpus_pubt": 208}, "objects": {"": [[175, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [90, 0, 0, "-", "annotator"], [156, 0, 0, "-", "base"], [167, 0, 0, "-", "common"], [174, 0, 0, "-", "functions"], [179, 0, 0, "-", "internal"], [183, 0, 0, "-", "logging"], [184, 0, 0, "-", "pretrained"], [175, 3, 1, "", "start"], [190, 0, 0, "-", "training"], [195, 0, 0, "-", "upload_to_hub"], [196, 0, 0, "-", "util"], [175, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [30, 0, 0, "-", "classifier_dl"], [47, 0, 0, "-", "coref"], [51, 0, 0, "-", "cv"], [55, 0, 0, "-", "date2_chunk"], [57, 0, 0, "-", "dependency"], [59, 0, 0, "-", "document_character_text_splitter"], [60, 0, 0, "-", "document_normalizer"], [61, 0, 0, "-", "document_token_splitter"], [62, 0, 0, "-", "document_token_splitter_test"], [74, 0, 0, "-", "embeddings"], [88, 0, 0, "-", "er"], [89, 0, 0, "-", "graph_extraction"], [91, 0, 0, "-", "keyword_extraction"], [93, 0, 0, "-", "ld_dl"], [95, 0, 0, "-", "lemmatizer"], [98, 0, 0, "-", "matcher"], [102, 0, 0, "-", "n_gram_generator"], [103, 0, 0, "-", "ner"], [110, 0, 0, "-", "normalizer"], [111, 0, 0, "-", "openai"], [116, 0, 0, "-", "param"], [117, 0, 0, "-", "pos"], [119, 0, 0, "-", "sentence"], [122, 0, 0, "-", "sentiment"], [127, 0, 0, "-", "seq2seq"], [131, 0, 0, "-", "similarity"], [133, 0, 0, "-", "spell_check"], [136, 0, 0, "-", "stemmer"], [137, 0, 0, "-", "stop_words_cleaner"], [138, 0, 0, "-", "tf_ner_dl_graph_builder"], [140, 0, 0, "-", "token"], [144, 0, 0, "-", "token2_chunk"], [145, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "distil_bert_for_question_answering"], [27, 0, 0, "-", "distil_bert_for_sequence_classification"], [28, 0, 0, "-", "distil_bert_for_token_classification"], [29, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [31, 0, 0, "-", "longformer_for_question_answering"], [32, 0, 0, "-", "longformer_for_sequence_classification"], [33, 0, 0, "-", "longformer_for_token_classification"], [34, 0, 0, "-", "multi_classifier_dl"], [35, 0, 0, "-", "roberta_for_question_answering"], [36, 0, 0, "-", "roberta_for_sequence_classification"], [37, 0, 0, "-", "roberta_for_token_classification"], [38, 0, 0, "-", "roberta_for_zero_shot_classification"], [39, 0, 0, "-", "sentiment_dl"], [40, 0, 0, "-", "tapas_for_question_answering"], [41, 0, 0, "-", "xlm_roberta_for_question_answering"], [42, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [43, 0, 0, "-", "xlm_roberta_for_token_classification"], [44, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [45, 0, 0, "-", "xlnet_for_sequence_classification"], [46, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, 1, 1, "", "MultiClassifierDLApproach"], [34, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[34, 2, 1, "", "setThreshold"], [34, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, 1, 1, "", "SentimentDLApproach"], [39, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[39, 2, 1, "", "setDropout"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[48, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSegmentLength"], [48, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[49, 0, 0, "-", "clip_for_zero_shot_classification"], [50, 0, 0, "-", "convnext_for_image_classification"], [52, 0, 0, "-", "swin_for_image_classification"], [53, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [54, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[49, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[49, 2, 1, "", "getCandidateLabels"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[50, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"], [50, 2, 1, "", "setCropPct"], [50, 2, 1, "", "setDoRescale"], [50, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[52, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[52, 2, 1, "", "getClasses"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[53, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[54, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[54, 2, 1, "", "getClasses"], [54, 2, 1, "", "loadSavedModel"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[55, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[55, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[56, 0, 0, "-", "dependency_parser"], [58, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[56, 1, 1, "", "DependencyParserApproach"], [56, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[56, 2, 1, "", "setConllU"], [56, 2, 1, "", "setDependencyTreeBank"], [56, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[56, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[58, 1, 1, "", "TypedDependencyParserApproach"], [58, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[58, 2, 1, "", "setConll2009"], [58, 2, 1, "", "setConllU"], [58, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[58, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[59, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[59, 2, 1, "", "setChunkOverlap"], [59, 2, 1, "", "setChunkSize"], [59, 2, 1, "", "setExplodeSplits"], [59, 2, 1, "", "setKeepSeparators"], [59, 2, 1, "", "setPatternsAreRegex"], [59, 2, 1, "", "setSplitPatterns"], [59, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[60, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[60, 2, 1, "", "setAction"], [60, 2, 1, "", "setEncoding"], [60, 2, 1, "", "setLowercase"], [60, 2, 1, "", "setPatterns"], [60, 2, 1, "", "setPolicy"], [60, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[61, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[61, 2, 1, "", "setExplodeSplits"], [61, 2, 1, "", "setNumTokens"], [61, 2, 1, "", "setTokenOverlap"], [61, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[62, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[62, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[63, 0, 0, "-", "albert_embeddings"], [64, 0, 0, "-", "bert_embeddings"], [65, 0, 0, "-", "bert_sentence_embeddings"], [66, 0, 0, "-", "bge_embeddings"], [67, 0, 0, "-", "camembert_embeddings"], [68, 0, 0, "-", "chunk_embeddings"], [69, 0, 0, "-", "deberta_embeddings"], [70, 0, 0, "-", "distil_bert_embeddings"], [71, 0, 0, "-", "doc2vec"], [72, 0, 0, "-", "e5_embeddings"], [73, 0, 0, "-", "elmo_embeddings"], [75, 0, 0, "-", "instructor_embeddings"], [76, 0, 0, "-", "longformer_embeddings"], [77, 0, 0, "-", "mpnet_embeddings"], [78, 0, 0, "-", "roberta_embeddings"], [79, 0, 0, "-", "roberta_sentence_embeddings"], [80, 0, 0, "-", "sentence_embeddings"], [81, 0, 0, "-", "universal_sentence_encoder"], [82, 0, 0, "-", "word2vec"], [83, 0, 0, "-", "word_embeddings"], [84, 0, 0, "-", "xlm_roberta_embeddings"], [85, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [86, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[63, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[64, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[65, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setConfigProtoBytes"], [65, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[66, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[67, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[68, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[68, 2, 1, "", "setPoolingStrategy"], [68, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[69, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[70, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[71, 1, 1, "", "Doc2VecApproach"], [71, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[71, 2, 1, "", "setMaxIter"], [71, 2, 1, "", "setMaxSentenceLength"], [71, 2, 1, "", "setMinCount"], [71, 2, 1, "", "setNumPartitions"], [71, 2, 1, "", "setSeed"], [71, 2, 1, "", "setStepSize"], [71, 2, 1, "", "setVectorSize"], [71, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[71, 2, 1, "", "getVectors"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[72, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[73, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setBatchSize"], [73, 2, 1, "", "setConfigProtoBytes"], [73, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[75, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"], [75, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[76, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[77, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[77, 2, 1, "", "loadSavedModel"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[78, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[79, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[80, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[80, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[81, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"], [81, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[82, 1, 1, "", "Word2VecApproach"], [82, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[82, 2, 1, "", "setMaxIter"], [82, 2, 1, "", "setMaxSentenceLength"], [82, 2, 1, "", "setMinCount"], [82, 2, 1, "", "setNumPartitions"], [82, 2, 1, "", "setSeed"], [82, 2, 1, "", "setStepSize"], [82, 2, 1, "", "setVectorSize"], [82, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[82, 2, 1, "", "getVectors"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[83, 1, 1, "", "WordEmbeddings"], [83, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[83, 2, 1, "", "setReadCacheSize"], [83, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[83, 2, 1, "", "loadStorage"], [83, 2, 1, "", "overallCoverage"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setReadCacheSize"], [83, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[84, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[85, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[86, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[86, 2, 1, "", "loadSavedModel"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[87, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[87, 1, 1, "", "EntityRulerApproach"], [87, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[87, 2, 1, "", "setAlphabetResource"], [87, 2, 1, "", "setPatternsResource"], [87, 2, 1, "", "setSentenceMatch"], [87, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[89, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[89, 2, 1, "", "setDelimiter"], [89, 2, 1, "", "setDependencyParserModel"], [89, 2, 1, "", "setEntityTypes"], [89, 2, 1, "", "setExplodeEntities"], [89, 2, 1, "", "setIncludeEdges"], [89, 2, 1, "", "setMaxSentenceSize"], [89, 2, 1, "", "setMergeEntities"], [89, 2, 1, "", "setMergeEntitiesIOBFormat"], [89, 2, 1, "", "setMinSentenceSize"], [89, 2, 1, "", "setPosModel"], [89, 2, 1, "", "setRelationshipTypes"], [89, 2, 1, "", "setRootTokens"], [89, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[92, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[92, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[92, 2, 1, "", "getStopWords"], [92, 2, 1, "", "loadDefaultStopWords"], [92, 2, 1, "", "setMaxNGrams"], [92, 2, 1, "", "setMinNGrams"], [92, 2, 1, "", "setNKeywords"], [92, 2, 1, "", "setStopWords"], [92, 2, 1, "", "setThreshold"], [92, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[94, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[94, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setCoalesceSentences"], [94, 2, 1, "", "setConfigProtoBytes"], [94, 2, 1, "", "setThreshold"], [94, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[95, 1, 1, "", "Lemmatizer"], [95, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[95, 2, 1, "", "setDictionary"], [95, 2, 1, "", "setFormCol"], [95, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[95, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[96, 0, 0, "-", "big_text_matcher"], [97, 0, 0, "-", "date_matcher"], [99, 0, 0, "-", "multi_date_matcher"], [100, 0, 0, "-", "regex_matcher"], [101, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[96, 1, 1, "", "BigTextMatcher"], [96, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[96, 2, 1, "", "setCaseSensitive"], [96, 2, 1, "", "setEntities"], [96, 2, 1, "", "setMergeOverlapping"], [96, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[96, 2, 1, "", "loadStorage"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setCaseSensitive"], [96, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[97, 1, 1, "", "DateMatcher"], [97, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[97, 2, 1, "", "setAnchorDateDay"], [97, 2, 1, "", "setAnchorDateMonth"], [97, 2, 1, "", "setAnchorDateYear"], [97, 2, 1, "", "setDefaultDayWhenMissing"], [97, 2, 1, "", "setInputFormats"], [97, 2, 1, "", "setOutputFormat"], [97, 2, 1, "", "setReadMonthFirst"], [97, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[99, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[100, 1, 1, "", "RegexMatcher"], [100, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[100, 2, 1, "", "setDelimiter"], [100, 2, 1, "", "setExternalRules"], [100, 2, 1, "", "setRules"], [100, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[101, 1, 1, "", "TextMatcher"], [101, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[101, 2, 1, "", "setBuildFromTokens"], [101, 2, 1, "", "setCaseSensitive"], [101, 2, 1, "", "setEntities"], [101, 2, 1, "", "setEntityValue"], [101, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setBuildFromTokens"], [101, 2, 1, "", "setEntityValue"], [101, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[102, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[102, 2, 1, "", "setDelimiter"], [102, 2, 1, "", "setEnableCumulative"], [102, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[104, 0, 0, "-", "ner_approach"], [105, 0, 0, "-", "ner_converter"], [106, 0, 0, "-", "ner_crf"], [107, 0, 0, "-", "ner_dl"], [108, 0, 0, "-", "ner_overwriter"], [109, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[104, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[104, 2, 1, "", "getLabelColumn"], [104, 2, 1, "", "setEntities"], [104, 2, 1, "", "setLabelColumn"], [104, 2, 1, "", "setMaxEpochs"], [104, 2, 1, "", "setMinEpochs"], [104, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[105, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[105, 2, 1, "", "setNerHasNoSchema"], [105, 2, 1, "", "setPreservePosition"], [105, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[106, 1, 1, "", "NerCrfApproach"], [106, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[106, 2, 1, "", "setC0"], [106, 2, 1, "", "setExternalFeatures"], [106, 2, 1, "", "setIncludeConfidence"], [106, 2, 1, "", "setL2"], [106, 2, 1, "", "setLossEps"], [106, 2, 1, "", "setMinW"], [106, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[107, 1, 1, "", "NerDLApproach"], [107, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[107, 2, 1, "", "setBatchSize"], [107, 2, 1, "", "setBestModelMetric"], [107, 2, 1, "", "setConfigProtoBytes"], [107, 2, 1, "", "setDropout"], [107, 2, 1, "", "setEnableMemoryOptimizer"], [107, 2, 1, "", "setGraphFolder"], [107, 2, 1, "", "setIncludeAllConfidenceScores"], [107, 2, 1, "", "setIncludeConfidence"], [107, 2, 1, "", "setLr"], [107, 2, 1, "", "setPo"], [107, 2, 1, "", "setUseBestModel"], [107, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[107, 2, 1, "", "pretrained"], [107, 2, 1, "", "setConfigProtoBytes"], [107, 2, 1, "", "setIncludeAllConfidenceScores"], [107, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[108, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[108, 2, 1, "", "setNerWords"], [108, 2, 1, "", "setNewNerEntity"], [108, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[109, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[109, 2, 1, "", "getClasses"], [109, 2, 1, "", "load"], [109, 2, 1, "", "pretrained"], [109, 2, 1, "", "setEntityDefinitions"], [109, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[110, 1, 1, "", "Normalizer"], [110, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[110, 2, 1, "", "setCleanupPatterns"], [110, 2, 1, "", "setLowercase"], [110, 2, 1, "", "setMaxLength"], [110, 2, 1, "", "setMinLength"], [110, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[112, 0, 0, "-", "openai_completion"], [113, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[112, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[112, 2, 1, "", "setBestOf"], [112, 2, 1, "", "setEcho"], [112, 2, 1, "", "setFrequencyPenalty"], [112, 2, 1, "", "setLogitBias"], [112, 2, 1, "", "setLogprobs"], [112, 2, 1, "", "setMaxTokens"], [112, 2, 1, "", "setModel"], [112, 2, 1, "", "setNumberOfCompletions"], [112, 2, 1, "", "setPresencePenalty"], [112, 2, 1, "", "setStop"], [112, 2, 1, "", "setSuffix"], [112, 2, 1, "", "setTemperature"], [112, 2, 1, "", "setTopP"], [112, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[113, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[113, 2, 1, "", "setModel"], [113, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[114, 0, 0, "-", "classifier_encoder"], [115, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[114, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[114, 2, 1, "", "setBatchSize"], [114, 2, 1, "", "setConfigProtoBytes"], [114, 2, 1, "", "setLabelColumn"], [114, 2, 1, "", "setLr"], [114, 2, 1, "", "setMaxEpochs"], [114, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[115, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[115, 2, 1, "", "setEnableOutputLogs"], [115, 2, 1, "", "setEvaluationLogExtended"], [115, 2, 1, "", "setOutputLogsPath"], [115, 2, 1, "", "setTestDataset"], [115, 2, 1, "", "setValidationSplit"], [115, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[118, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[118, 1, 1, "", "PerceptronApproach"], [118, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[118, 2, 1, "", "getNIterations"], [118, 2, 1, "", "setIterations"], [118, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[118, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[120, 0, 0, "-", "sentence_detector"], [121, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[120, 1, 1, "", "SentenceDetector"], [120, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[120, 2, 1, "", "setCustomBounds"], [120, 2, 1, "", "setCustomBoundsStrategy"], [120, 2, 1, "", "setDetectLists"], [120, 2, 1, "", "setExplodeSentences"], [120, 2, 1, "", "setMaxLength"], [120, 2, 1, "", "setMinLength"], [120, 2, 1, "", "setSplitLength"], [120, 2, 1, "", "setUseAbbreviations"], [120, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[121, 1, 1, "", "SentenceDetectorDLApproach"], [121, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[121, 2, 1, "", "setEpochsNumber"], [121, 2, 1, "", "setExplodeSentences"], [121, 2, 1, "", "setImpossiblePenultimates"], [121, 2, 1, "", "setModel"], [121, 2, 1, "", "setOutputLogsPath"], [121, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[121, 2, 1, "", "pretrained"], [121, 2, 1, "", "setCustomBounds"], [121, 2, 1, "", "setExplodeSentences"], [121, 2, 1, "", "setImpossiblePenultimates"], [121, 2, 1, "", "setMaxLength"], [121, 2, 1, "", "setMinLength"], [121, 2, 1, "", "setModel"], [121, 2, 1, "", "setSplitLength"], [121, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[123, 0, 0, "-", "sentiment_detector"], [124, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[123, 1, 1, "", "SentimentDetector"], [123, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[123, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[124, 1, 1, "", "ViveknSentimentApproach"], [124, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[124, 2, 1, "", "setPruneCorpus"], [124, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[124, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[125, 0, 0, "-", "bart_transformer"], [126, 0, 0, "-", "gpt2_transformer"], [128, 0, 0, "-", "marian_transformer"], [129, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[125, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[125, 2, 1, "", "loadSavedModel"], [125, 2, 1, "", "pretrained"], [125, 2, 1, "", "setBeamSize"], [125, 2, 1, "", "setCache"], [125, 2, 1, "", "setConfigProtoBytes"], [125, 2, 1, "", "setDoSample"], [125, 2, 1, "", "setIgnoreTokenIds"], [125, 2, 1, "", "setMaxOutputLength"], [125, 2, 1, "", "setMinOutputLength"], [125, 2, 1, "", "setNoRepeatNgramSize"], [125, 2, 1, "", "setRepetitionPenalty"], [125, 2, 1, "", "setTask"], [125, 2, 1, "", "setTemperature"], [125, 2, 1, "", "setTopK"], [125, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[126, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[126, 2, 1, "", "loadSavedModel"], [126, 2, 1, "", "pretrained"], [126, 2, 1, "", "setConfigProtoBytes"], [126, 2, 1, "", "setDoSample"], [126, 2, 1, "", "setIgnoreTokenIds"], [126, 2, 1, "", "setMaxOutputLength"], [126, 2, 1, "", "setMinOutputLength"], [126, 2, 1, "", "setNoRepeatNgramSize"], [126, 2, 1, "", "setRepetitionPenalty"], [126, 2, 1, "", "setTask"], [126, 2, 1, "", "setTemperature"], [126, 2, 1, "", "setTopK"], [126, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[128, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[128, 2, 1, "", "loadSavedModel"], [128, 2, 1, "", "pretrained"], [128, 2, 1, "", "setConfigProtoBytes"], [128, 2, 1, "", "setDoSample"], [128, 2, 1, "", "setIgnoreTokenIds"], [128, 2, 1, "", "setLangId"], [128, 2, 1, "", "setMaxInputLength"], [128, 2, 1, "", "setMaxOutputLength"], [128, 2, 1, "", "setNoRepeatNgramSize"], [128, 2, 1, "", "setRandomSeed"], [128, 2, 1, "", "setRepetitionPenalty"], [128, 2, 1, "", "setTemperature"], [128, 2, 1, "", "setTopK"], [128, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[129, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[129, 2, 1, "", "loadSavedModel"], [129, 2, 1, "", "pretrained"], [129, 2, 1, "", "setConfigProtoBytes"], [129, 2, 1, "", "setDoSample"], [129, 2, 1, "", "setIgnoreTokenIds"], [129, 2, 1, "", "setMaxNewTokens"], [129, 2, 1, "", "setMaxOutputLength"], [129, 2, 1, "", "setMinOutputLength"], [129, 2, 1, "", "setNoRepeatNgramSize"], [129, 2, 1, "", "setRepetitionPenalty"], [129, 2, 1, "", "setStopAtEos"], [129, 2, 1, "", "setTask"], [129, 2, 1, "", "setTemperature"], [129, 2, 1, "", "setTopK"], [129, 2, 1, "", "setTopP"], [129, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[130, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[130, 1, 1, "", "DocumentSimilarityRankerApproach"], [130, 1, 1, "", "DocumentSimilarityRankerFinisher"], [130, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[130, 2, 1, "", "setBucketLength"], [130, 2, 1, "", "setIdentityRanking"], [130, 2, 1, "", "setNumHashTables"], [130, 2, 1, "", "setNumberOfNeighbours"], [130, 2, 1, "", "setSimilarityMethod"], [130, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[130, 2, 1, "", "getInputCols"], [130, 2, 1, "", "getOutputCols"], [130, 2, 1, "", "setExtractNearestNeighbor"], [130, 2, 1, "", "setInputCols"], [130, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[132, 0, 0, "-", "context_spell_checker"], [134, 0, 0, "-", "norvig_sweeting"], [135, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[132, 1, 1, "", "ContextSpellCheckerApproach"], [132, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[132, 2, 1, "", "addRegexClass"], [132, 2, 1, "", "addVocabClass"], [132, 2, 1, "", "setBatchSize"], [132, 2, 1, "", "setCaseStrategy"], [132, 2, 1, "", "setClassCount"], [132, 2, 1, "", "setCompoundCount"], [132, 2, 1, "", "setConfigProtoBytes"], [132, 2, 1, "", "setEpochs"], [132, 2, 1, "", "setErrorThreshold"], [132, 2, 1, "", "setFinalRate"], [132, 2, 1, "", "setGraphFolder"], [132, 2, 1, "", "setInitialRate"], [132, 2, 1, "", "setLanguageModelClasses"], [132, 2, 1, "", "setMaxCandidates"], [132, 2, 1, "", "setMaxSentLen"], [132, 2, 1, "", "setMaxWindowLen"], [132, 2, 1, "", "setMinCount"], [132, 2, 1, "", "setTradeoff"], [132, 2, 1, "", "setValidationFraction"], [132, 2, 1, "", "setWeightedDistPath"], [132, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[132, 2, 1, "", "getWordClasses"], [132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setCaseStrategy"], [132, 2, 1, "", "setClasses"], [132, 2, 1, "", "setCompareLowcase"], [132, 2, 1, "", "setConfigProtoBytes"], [132, 2, 1, "", "setCorrectSymbols"], [132, 2, 1, "", "setErrorThreshold"], [132, 2, 1, "", "setGamma"], [132, 2, 1, "", "setIdsVocab"], [132, 2, 1, "", "setMaxCandidates"], [132, 2, 1, "", "setMaxWindowLen"], [132, 2, 1, "", "setTradeoff"], [132, 2, 1, "", "setVocabFreq"], [132, 2, 1, "", "setVocabIds"], [132, 2, 1, "", "setWeights"], [132, 2, 1, "", "setWordMaxDistance"], [132, 2, 1, "", "updateRegexClass"], [132, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[134, 1, 1, "", "NorvigSweetingApproach"], [134, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[134, 2, 1, "", "setCaseSensitive"], [134, 2, 1, "", "setDictionary"], [134, 2, 1, "", "setDoubleVariants"], [134, 2, 1, "", "setFrequencyPriority"], [134, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[134, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[135, 1, 1, "", "SymmetricDeleteApproach"], [135, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[135, 2, 1, "", "setDeletesThreshold"], [135, 2, 1, "", "setDictionary"], [135, 2, 1, "", "setFrequencyThreshold"], [135, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[135, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[136, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[137, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[137, 2, 1, "", "loadDefaultStopWords"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setCaseSensitive"], [137, 2, 1, "", "setLocale"], [137, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[138, 1, 1, "", "TFNerDLGraphBuilder"], [138, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[138, 2, 1, "", "getGraphFile"], [138, 2, 1, "", "getGraphFolder"], [138, 2, 1, "", "getHiddenUnitsNumber"], [138, 2, 1, "", "getInputCols"], [138, 2, 1, "", "getLabelColumn"], [138, 2, 1, "", "setGraphFile"], [138, 2, 1, "", "setGraphFolder"], [138, 2, 1, "", "setHiddenUnitsNumber"], [138, 2, 1, "", "setInputCols"], [138, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[139, 0, 0, "-", "chunk_tokenizer"], [141, 0, 0, "-", "recursive_tokenizer"], [142, 0, 0, "-", "regex_tokenizer"], [143, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[139, 1, 1, "", "ChunkTokenizer"], [139, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[141, 1, 1, "", "RecursiveTokenizer"], [141, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[141, 2, 1, "", "setInfixes"], [141, 2, 1, "", "setPrefixes"], [141, 2, 1, "", "setSuffixes"], [141, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[142, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[142, 2, 1, "", "setMaxLength"], [142, 2, 1, "", "setMinLength"], [142, 2, 1, "", "setPattern"], [142, 2, 1, "", "setPositionalMask"], [142, 2, 1, "", "setPreservePosition"], [142, 2, 1, "", "setToLowercase"], [142, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[143, 1, 1, "", "Tokenizer"], [143, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[143, 2, 1, "", "addContextChars"], [143, 2, 1, "", "addException"], [143, 2, 1, "", "addInfixPattern"], [143, 2, 1, "", "addSplitChars"], [143, 2, 1, "", "getCaseSensitiveExceptions"], [143, 2, 1, "", "getContextChars"], [143, 2, 1, "", "getExceptions"], [143, 2, 1, "", "getInfixPatterns"], [143, 2, 1, "", "getPrefixPattern"], [143, 2, 1, "", "getSplitChars"], [143, 2, 1, "", "getSuffixPattern"], [143, 2, 1, "", "setCaseSensitiveExceptions"], [143, 2, 1, "", "setContextChars"], [143, 2, 1, "", "setExceptions"], [143, 2, 1, "", "setExceptionsPath"], [143, 2, 1, "", "setInfixPatterns"], [143, 2, 1, "", "setMaxLength"], [143, 2, 1, "", "setMinLength"], [143, 2, 1, "", "setPrefixPattern"], [143, 2, 1, "", "setSplitChars"], [143, 2, 1, "", "setSplitPattern"], [143, 2, 1, "", "setSuffixPattern"], [143, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[143, 2, 1, "", "addSplitChars"], [143, 2, 1, "", "pretrained"], [143, 2, 1, "", "setSplitChars"], [143, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[144, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[146, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[146, 1, 1, "", "WordSegmenterApproach"], [146, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[146, 2, 1, "", "getAmbiguityThreshold"], [146, 2, 1, "", "getFrequencyThreshold"], [146, 2, 1, "", "getNIterations"], [146, 2, 1, "", "setAmbiguityThreshold"], [146, 2, 1, "", "setEnableRegexTokenizer"], [146, 2, 1, "", "setFrequencyThreshold"], [146, 2, 1, "", "setNIterations"], [146, 2, 1, "", "setPattern"], [146, 2, 1, "", "setPosColumn"], [146, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[146, 2, 1, "", "pretrained"], [146, 2, 1, "", "setEnableRegexTokenizer"], [146, 2, 1, "", "setPattern"], [146, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[147, 0, 0, "-", "audio_assembler"], [148, 0, 0, "-", "doc2_chunk"], [149, 0, 0, "-", "document_assembler"], [150, 0, 0, "-", "embeddings_finisher"], [151, 0, 0, "-", "finisher"], [152, 0, 0, "-", "graph_finisher"], [153, 0, 0, "-", "has_recursive_fit"], [154, 0, 0, "-", "has_recursive_transform"], [155, 0, 0, "-", "image_assembler"], [157, 0, 0, "-", "light_pipeline"], [158, 0, 0, "-", "multi_document_assembler"], [159, 0, 0, "-", "recursive_pipeline"], [160, 0, 0, "-", "table_assembler"], [161, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[147, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[147, 2, 1, "", "getOutputCol"], [147, 2, 1, "", "setInputCol"], [147, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[148, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[148, 2, 1, "", "setChunkCol"], [148, 2, 1, "", "setFailOnMissing"], [148, 2, 1, "", "setIsArray"], [148, 2, 1, "", "setLowerCase"], [148, 2, 1, "", "setStartCol"], [148, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[149, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[149, 2, 1, "", "getOutputCol"], [149, 2, 1, "", "setCleanupMode"], [149, 2, 1, "", "setIdCol"], [149, 2, 1, "", "setInputCol"], [149, 2, 1, "", "setMetadataCol"], [149, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[150, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[150, 2, 1, "", "getInputCols"], [150, 2, 1, "", "getOutputCols"], [150, 2, 1, "", "setCleanAnnotations"], [150, 2, 1, "", "setInputCols"], [150, 2, 1, "", "setOutputAsVector"], [150, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[151, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[151, 2, 1, "", "getInputCols"], [151, 2, 1, "", "getOutputCols"], [151, 2, 1, "", "setAnnotationSplitSymbol"], [151, 2, 1, "", "setCleanAnnotations"], [151, 2, 1, "", "setIncludeMetadata"], [151, 2, 1, "", "setInputCols"], [151, 2, 1, "", "setOutputAsArray"], [151, 2, 1, "", "setOutputCols"], [151, 2, 1, "", "setParseEmbeddingsVectors"], [151, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[152, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[152, 2, 1, "", "setCleanAnnotations"], [152, 2, 1, "", "setInputCol"], [152, 2, 1, "", "setOutputAsArray"], [152, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[153, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[154, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[155, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[155, 2, 1, "", "getOutputCol"], [155, 2, 1, "", "setInputCol"], [155, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[157, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[157, 2, 1, "", "annotate"], [157, 2, 1, "", "fullAnnotate"], [157, 2, 1, "", "fullAnnotateImage"], [157, 2, 1, "", "getIgnoreUnsupported"], [157, 2, 1, "", "setIgnoreUnsupported"], [157, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[158, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[158, 2, 1, "", "getOutputCols"], [158, 2, 1, "", "setCleanupMode"], [158, 2, 1, "", "setIdCol"], [158, 2, 1, "", "setInputCols"], [158, 2, 1, "", "setMetadataCol"], [158, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[159, 1, 1, "", "RecursivePipeline"], [159, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[160, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[160, 2, 1, "", "setCsvDelimiter"], [160, 2, 1, "", "setEscapeCsvDelimiter"], [160, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[161, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[161, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[162, 0, 0, "-", "annotator_approach"], [163, 0, 0, "-", "annotator_model"], [164, 0, 0, "-", "annotator_properties"], [165, 0, 0, "-", "annotator_type"], [166, 0, 0, "-", "coverage_result"], [168, 0, 0, "-", "match_strategy"], [169, 0, 0, "-", "properties"], [170, 0, 0, "-", "read_as"], [171, 0, 0, "-", "recursive_annotator_approach"], [172, 0, 0, "-", "storage"], [173, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[162, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[163, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[164, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[164, 2, 1, "", "getInputCols"], [164, 2, 1, "", "getLazyAnnotator"], [164, 2, 1, "", "getOutputCol"], [164, 2, 1, "", "setInputCols"], [164, 2, 1, "", "setLazyAnnotator"], [164, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[168, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[169, 1, 1, "", "HasEmbeddingsProperties"], [169, 3, 1, "", "setBeamSize"], [169, 3, 1, "", "setDoSample"], [169, 3, 1, "", "setMaxOutputLength"], [169, 3, 1, "", "setMinOutputLength"], [169, 3, 1, "", "setNReturnSequences"], [169, 3, 1, "", "setNoRepeatNgramSize"], [169, 3, 1, "", "setRepetitionPenalty"], [169, 3, 1, "", "setTask"], [169, 3, 1, "", "setTemperature"], [169, 3, 1, "", "setTopK"], [169, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[169, 2, 1, "", "getDimension"], [169, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[170, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[171, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[173, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[174, 3, 1, "", "explode_annotations_col"], [174, 3, 1, "", "filter_by_annotations_col"], [174, 3, 1, "", "map_annotations"], [174, 3, 1, "", "map_annotations_array"], [174, 3, 1, "", "map_annotations_col"], [174, 3, 1, "", "map_annotations_cols"], [174, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[176, 0, 0, "-", "annotator_java_ml"], [177, 0, 0, "-", "annotator_transformer"], [178, 0, 0, "-", "extended_java_wrapper"], [180, 0, 0, "-", "params_getters_setters"], [181, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[176, 1, 1, "", "AnnotatorJavaMLReadable"], [176, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[176, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[177, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[178, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[178, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[180, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[180, 2, 1, "", "getParamValue"], [180, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[181, 1, 1, "", "RecursiveEstimator"], [181, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[181, 2, 1, "", "fit"]], "sparknlp.logging": [[182, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[182, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[182, 2, 1, "", "end"], [182, 2, 1, "", "log_asset"], [182, 2, 1, "", "log_asset_data"], [182, 2, 1, "", "log_completed_run"], [182, 2, 1, "", "log_metrics"], [182, 2, 1, "", "log_parameters"], [182, 2, 1, "", "log_pipeline_parameters"], [182, 2, 1, "", "log_visualization"], [182, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[185, 0, 0, "-", "pretrained_pipeline"], [186, 0, 0, "-", "resource_downloader"], [187, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[185, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[185, 2, 1, "", "annotate"], [185, 2, 1, "", "fullAnnotate"], [185, 2, 1, "", "fullAnnotateImage"], [185, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[186, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[186, 2, 1, "", "clearCache"], [186, 2, 1, "", "downloadModel"], [186, 2, 1, "", "downloadModelDirectly"], [186, 2, 1, "", "downloadPipeline"], [186, 2, 1, "", "showAvailableAnnotators"], [186, 2, 1, "", "showPublicModels"], [186, 2, 1, "", "showPublicPipelines"], [186, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[188, 0, 0, "-", "conll"], [189, 0, 0, "-", "conllu"], [191, 0, 0, "-", "pos"], [192, 0, 0, "-", "pub_tator"], [193, 0, 0, "-", "spacy_to_annotation"], [194, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[188, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[188, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[189, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[189, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[191, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[191, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[192, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[192, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[193, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 203], "start": 0, "spark": [0, 1, 198, 203, 207], "nlp": [0, 1, 198, 207], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 198], "us": [0, 198, 207], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 188, 189, 191, 192, 193], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 201, 202, 203], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 182, 185, 186, 188, 189, 191, 192, 193, 197], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 176, 177, 178, 180, 181, 182, 185, 186, 188, 189, 191, 192, 193], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 30, 47, 51, 57, 74, 88, 90, 91, 93, 98, 103, 111, 117, 119, 122, 127, 131, 133, 140, 145, 156, 167, 175, 179, 183, 184, 190], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "distil_bert_for_question_answ": 26, "distil_bert_for_sequence_classif": 27, "distil_bert_for_token_classif": 28, "distil_bert_for_zero_shot_classif": 29, "longformer_for_question_answ": 31, "longformer_for_sequence_classif": 32, "longformer_for_token_classif": 33, "multi_classifier_dl": 34, "roberta_for_question_answ": 35, "roberta_for_sequence_classif": 36, "roberta_for_token_classif": 37, "roberta_for_zero_shot_classif": 38, "sentiment_dl": 39, "tapas_for_question_answ": 40, "xlm_roberta_for_question_answ": 41, "xlm_roberta_for_sequence_classif": 42, "xlm_roberta_for_token_classif": 43, "xlm_roberta_for_zero_shot_classif": 44, "xlnet_for_sequence_classif": 45, "xlnet_for_token_classif": 46, "coref": [47, 48], "spanbert_coref": 48, "cv": [49, 50, 51, 52, 53, 54], "clip_for_zero_shot_classif": 49, "convnext_for_image_classif": 50, "swin_for_image_classif": 52, "vision_encoder_decoder_for_image_capt": 53, "vit_for_image_classif": 54, "date2_chunk": 55, "depend": [56, 57, 58], "dependency_pars": 56, "typed_dependency_pars": 58, "document_character_text_splitt": 59, "document_norm": 60, "document_token_splitt": 61, "document_token_splitter_test": 62, "embed": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "albert_embed": 63, "bert_embed": 64, "bert_sentence_embed": 65, "bge_embed": 66, "camembert_embed": 67, "chunk_embed": 68, "deberta_embed": 69, "distil_bert_embed": 70, "doc2vec": 71, "e5_embed": 72, "elmo_embed": 73, "instructor_embed": 75, "longformer_embed": 76, "mpnet_embed": 77, "roberta_embed": 78, "roberta_sentence_embed": 79, "sentence_embed": 80, "universal_sentence_encod": 81, "word2vec": 82, "word_embed": 83, "xlm_roberta_embed": 84, "xlm_roberta_sentence_embed": 85, "xlnet_embed": 86, "er": [87, 88], "entity_rul": 87, "graph_extract": 89, "subpackag": [90, 175], "keyword_extract": [91, 92], "yake_keyword_extract": 92, "ld_dl": [93, 94], "language_detector_dl": 94, "lemmat": 95, "matcher": [96, 97, 98, 99, 100, 101], "big_text_match": 96, "date_match": 97, "multi_date_match": 99, "regex_match": 100, "text_match": 101, "n_gram_gener": 102, "ner": [103, 104, 105, 106, 107, 108, 109], "ner_approach": 104, "ner_convert": 105, "ner_crf": 106, "ner_dl": 107, "ner_overwrit": 108, "zero_shot_ner_model": 109, "normal": 110, "openai": [111, 112, 113], "openai_complet": 112, "openai_embed": 113, "param": [114, 115, 116], "classifier_encod": 114, "evaluation_dl_param": 115, "po": [117, 118, 191, 208], "perceptron": 118, "sentenc": [119, 120, 121, 203], "sentence_detector": 120, "sentence_detector_dl": 121, "sentiment": [122, 123, 124], "sentiment_detector": 123, "vivekn_senti": 124, "seq2seq": [125, 126, 127, 128, 129], "bart_transform": 125, "gpt2_transform": 126, "marian_transform": 128, "t5_transform": 129, "similar": [130, 131], "document_similarity_rank": 130, "spell_check": [132, 133, 134, 135], "context_spell_check": 132, "norvig_sweet": 134, "symmetric_delet": 135, "stemmer": 136, "stop_words_clean": 137, "tf_ner_dl_graph_build": 138, "token": [139, 140, 141, 142, 143, 203], "chunk_token": 139, "recursive_token": 141, "regex_token": 142, "token2_chunk": 144, "w": [145, 146], "word_segment": 146, "base": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161], "audio_assembl": 147, "doc2_chunk": 148, "document_assembl": 149, "embeddings_finish": 150, "finish": [151, 203], "graph_finish": 152, "has_recursive_fit": 153, "has_recursive_transform": 154, "image_assembl": 155, "light_pipelin": 157, "multi_document_assembl": 158, "recursive_pipelin": 159, "table_assembl": 160, "token_assembl": 161, "common": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 202], "annotator_approach": 162, "annotator_model": 163, "annotator_properti": 164, "annotator_typ": 165, "coverage_result": 166, "match_strategi": 168, "properti": 169, "function": [169, 173, 174, 175, 202, 204], "read_a": 170, "recursive_annotator_approach": 171, "storag": 172, "util": [173, 187, 196], "packag": 175, "intern": [176, 177, 178, 179, 180, 181], "annotator_java_ml": 176, "annotator_transform": 177, "extended_java_wrapp": 178, "params_getters_sett": 180, "recurs": 181, "log": [182, 183, 198, 200], "comet": [182, 198], "pretrain": [184, 185, 186, 187, 202, 206, 207], "pretrained_pipelin": 185, "resource_download": 186, "train": [188, 189, 190, 191, 192, 193, 194, 208], "conll": [188, 208], "conllu": [189, 208], "pub_tat": 192, "spacy_to_annot": 193, "tfgraph": 194, "upload_to_hub": 195, "api": 197, "refer": 197, "A": 198, "meta": 198, "machin": [198, 199], "learn": [198, 199], "platform": [198, 199], "pipelin": [198, 203, 206, 207], "paramet": 198, "evalu": 198, "metric": 198, "visual": 198, "run": 198, "an": 198, "offlin": 198, "experi": 198, "mlflow": 199, "lifecycl": 199, "third": 200, "parti": 200, "project": 200, "approach": 202, "model": 202, "note": 202, "avail": [202, 207], "set": 203, "up": 203, "your": 203, "own": 203, "type": 203, "necessari": 203, "import": 203, "construct": 203, "documentassembl": 203, "data": 203, "detect": 203, "out": 203, "put": 203, "all": 203, "togeth": 203, "ml": [203, 207], "helper": 204, "user": 205, "guid": 205, "light": 206, "convert": 206, "pipelinemodel": 206, "download": 207, "As": 207, "lightpipelin": 207, "load": 208, "dataset": 208, "spell": 208, "checker": 208, "pubtat": 208}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [198, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [89, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [89, "classes"], [92, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [118, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [185, "classes"], [186, "classes"], [188, "classes"], [189, "classes"], [191, "classes"], [192, "classes"], [193, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [30, "submodules"], [47, "submodules"], [51, "submodules"], [57, "submodules"], [74, "submodules"], [88, "submodules"], [90, "submodules"], [91, "submodules"], [93, "submodules"], [98, "submodules"], [103, "submodules"], [111, "submodules"], [117, "submodules"], [119, "submodules"], [122, "submodules"], [127, "submodules"], [131, "submodules"], [133, "submodules"], [140, "submodules"], [145, "submodules"], [156, "submodules"], [167, "submodules"], [175, "submodules"], [179, "submodules"], [183, "submodules"], [184, "submodules"], [190, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[49, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[50, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[51, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[52, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[53, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[54, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[55, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[56, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[57, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[58, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[59, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[60, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[61, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[62, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[63, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[64, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[65, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[66, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[67, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[68, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[69, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[70, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[71, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[72, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[73, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[74, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[75, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[76, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[77, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[78, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[79, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[80, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[81, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[82, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[83, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[84, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[85, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[86, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[87, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[88, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[89, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[90, "module-sparknlp.annotator"]], "Subpackages": [[90, "subpackages"], [175, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[91, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[92, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[93, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[94, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[95, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[96, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[97, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[98, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[99, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[100, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[101, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[102, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[103, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[104, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[105, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[106, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[107, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[108, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[109, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[110, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[111, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[112, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[113, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[114, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[115, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[116, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[117, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[118, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[119, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[120, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[121, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[122, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[123, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[124, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[125, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[126, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[127, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[128, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[129, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[130, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[131, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[132, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[133, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[134, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[135, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[136, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[137, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[138, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[139, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[140, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[141, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[142, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[143, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[144, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[145, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[146, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[147, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[148, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[149, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[150, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[151, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[152, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[153, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[154, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[155, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[156, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[157, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[158, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[159, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[160, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[161, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[162, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[163, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[164, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[165, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[166, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[167, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[168, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[169, "module-sparknlp.common.properties"]], "Functions": [[169, "functions"], [173, "functions"], [174, "functions"], [175, "functions"]], "sparknlp.common.read_as": [[170, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[171, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[172, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[173, "module-sparknlp.common.utils"]], "sparknlp.functions": [[174, "module-sparknlp.functions"]], "sparknlp": [[175, "module-sparknlp"]], "Package Contents": [[175, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[176, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[177, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[178, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[179, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[180, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[181, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[182, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[183, "module-sparknlp.logging"]], "sparknlp.pretrained": [[184, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[185, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[186, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[187, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[188, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[189, "module-sparknlp.training.conllu"]], "sparknlp.training": [[190, "module-sparknlp.training"]], "sparknlp.training.pos": [[191, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[192, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[193, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[194, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[195, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[196, "module-sparknlp.util"]], "API Reference": [[197, "api-reference"]], "Modules": [[197, "modules"]], "Comet - A meta machine learning platform": [[198, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[198, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[198, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[198, "logging-evaluation-metrics"]], "Logging Visualizations": [[198, "logging-visualizations"]], "Running An Offline Experiment": [[198, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[199, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[200, "third-party-projects"]], "Logging": [[200, "logging"]], "Annotation": [[201, "annotation"]], "Annotators": [[202, "annotators"]], "Annotator Approaches": [[202, "annotator-approaches"]], "Annotator Models": [[202, "annotator-models"]], "Note": [[202, "note"]], "Pretrained Models": [[202, "pretrained-models"]], "Common Functions": [[202, "common-functions"]], "Available Annotators": [[202, "available-annotators"]], "Setting up your own pipeline": [[203, "setting-up-your-own-pipeline"]], "Annotator types": [[203, "annotator-types"]], "Necessary imports": [[203, "necessary-imports"]], "Constructing the Pipeline": [[203, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[203, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[203, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[203, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[203, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[204, "helper-functions"]], "User Guide": [[205, "user-guide"]], "Light Pipelines": [[206, "light-pipelines"]], "Converting PipelineModels": [[206, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[206, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[207, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[207, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[207, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[207, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[207, "available-pipelines"]], "Loading datasets for training": [[208, "loading-datasets-for-training"]], "POS Dataset": [[208, "pos-dataset"]], "CoNLL Dataset": [[208, "conll-dataset"]], "CoNLLU Dataset": [[208, "conllu-dataset"]], "Spell Checkers Dataset": [[208, "spell-checkers-dataset"]], "PubTator Dataset": [[208, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [47, "module-sparknlp.annotator.coref"], [48, "module-sparknlp.annotator.coref.spanbert_coref"], [49, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [50, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [51, "module-sparknlp.annotator.cv"], [52, "module-sparknlp.annotator.cv.swin_for_image_classification"], [53, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [54, "module-sparknlp.annotator.cv.vit_for_image_classification"], [55, "module-sparknlp.annotator.date2_chunk"], [56, "module-sparknlp.annotator.dependency.dependency_parser"], [57, "module-sparknlp.annotator.dependency"], [58, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [59, "module-sparknlp.annotator.document_character_text_splitter"], [60, "module-sparknlp.annotator.document_normalizer"], [61, "module-sparknlp.annotator.document_token_splitter"], [62, "module-sparknlp.annotator.document_token_splitter_test"], [63, "module-sparknlp.annotator.embeddings.albert_embeddings"], [64, "module-sparknlp.annotator.embeddings.bert_embeddings"], [65, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [66, "module-sparknlp.annotator.embeddings.bge_embeddings"], [67, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [68, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [69, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [70, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [71, "module-sparknlp.annotator.embeddings.doc2vec"], [72, "module-sparknlp.annotator.embeddings.e5_embeddings"], [73, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [74, "module-sparknlp.annotator.embeddings"], [75, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [76, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [77, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [78, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [79, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [80, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [81, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [82, "module-sparknlp.annotator.embeddings.word2vec"], [83, "module-sparknlp.annotator.embeddings.word_embeddings"], [84, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [85, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [86, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [87, "module-sparknlp.annotator.er.entity_ruler"], [88, "module-sparknlp.annotator.er"], [89, "module-sparknlp.annotator.graph_extraction"], [90, "module-sparknlp.annotator"], [91, "module-sparknlp.annotator.keyword_extraction"], [92, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [93, "module-sparknlp.annotator.ld_dl"], [94, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [95, "module-sparknlp.annotator.lemmatizer"], [96, "module-sparknlp.annotator.matcher.big_text_matcher"], [97, "module-sparknlp.annotator.matcher.date_matcher"], [98, "module-sparknlp.annotator.matcher"], [99, "module-sparknlp.annotator.matcher.multi_date_matcher"], [100, "module-sparknlp.annotator.matcher.regex_matcher"], [101, "module-sparknlp.annotator.matcher.text_matcher"], [102, "module-sparknlp.annotator.n_gram_generator"], [103, "module-sparknlp.annotator.ner"], [104, "module-sparknlp.annotator.ner.ner_approach"], [105, "module-sparknlp.annotator.ner.ner_converter"], [106, "module-sparknlp.annotator.ner.ner_crf"], [107, "module-sparknlp.annotator.ner.ner_dl"], [108, "module-sparknlp.annotator.ner.ner_overwriter"], [109, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [110, "module-sparknlp.annotator.normalizer"], [111, "module-sparknlp.annotator.openai"], [112, "module-sparknlp.annotator.openai.openai_completion"], [113, "module-sparknlp.annotator.openai.openai_embeddings"], [114, "module-sparknlp.annotator.param.classifier_encoder"], [115, "module-sparknlp.annotator.param.evaluation_dl_params"], [116, "module-sparknlp.annotator.param"], [117, "module-sparknlp.annotator.pos"], [118, "module-sparknlp.annotator.pos.perceptron"], [119, "module-sparknlp.annotator.sentence"], [120, "module-sparknlp.annotator.sentence.sentence_detector"], [121, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [122, "module-sparknlp.annotator.sentiment"], [123, "module-sparknlp.annotator.sentiment.sentiment_detector"], [124, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [125, "module-sparknlp.annotator.seq2seq.bart_transformer"], [126, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [127, "module-sparknlp.annotator.seq2seq"], [128, "module-sparknlp.annotator.seq2seq.marian_transformer"], [129, "module-sparknlp.annotator.seq2seq.t5_transformer"], [130, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [131, "module-sparknlp.annotator.similarity"], [132, "module-sparknlp.annotator.spell_check.context_spell_checker"], [133, "module-sparknlp.annotator.spell_check"], [134, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [135, "module-sparknlp.annotator.spell_check.symmetric_delete"], [136, "module-sparknlp.annotator.stemmer"], [137, "module-sparknlp.annotator.stop_words_cleaner"], [138, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [139, "module-sparknlp.annotator.token.chunk_tokenizer"], [140, "module-sparknlp.annotator.token"], [141, "module-sparknlp.annotator.token.recursive_tokenizer"], [142, "module-sparknlp.annotator.token.regex_tokenizer"], [143, "module-sparknlp.annotator.token.tokenizer"], [144, "module-sparknlp.annotator.token2_chunk"], [145, "module-sparknlp.annotator.ws"], [146, "module-sparknlp.annotator.ws.word_segmenter"], [147, "module-sparknlp.base.audio_assembler"], [148, "module-sparknlp.base.doc2_chunk"], [149, "module-sparknlp.base.document_assembler"], [150, "module-sparknlp.base.embeddings_finisher"], [151, "module-sparknlp.base.finisher"], [152, "module-sparknlp.base.graph_finisher"], [153, "module-sparknlp.base.has_recursive_fit"], [154, "module-sparknlp.base.has_recursive_transform"], [155, "module-sparknlp.base.image_assembler"], [156, "module-sparknlp.base"], [157, "module-sparknlp.base.light_pipeline"], [158, "module-sparknlp.base.multi_document_assembler"], [159, "module-sparknlp.base.recursive_pipeline"], [160, "module-sparknlp.base.table_assembler"], [161, "module-sparknlp.base.token_assembler"], [162, "module-sparknlp.common.annotator_approach"], [163, "module-sparknlp.common.annotator_model"], [164, "module-sparknlp.common.annotator_properties"], [165, "module-sparknlp.common.annotator_type"], [166, "module-sparknlp.common.coverage_result"], [167, "module-sparknlp.common"], [168, "module-sparknlp.common.match_strategy"], [169, "module-sparknlp.common.properties"], [170, "module-sparknlp.common.read_as"], [171, "module-sparknlp.common.recursive_annotator_approach"], [172, "module-sparknlp.common.storage"], [173, "module-sparknlp.common.utils"], [174, "module-sparknlp.functions"], [175, "module-sparknlp"], [176, "module-sparknlp.internal.annotator_java_ml"], [177, "module-sparknlp.internal.annotator_transformer"], [178, "module-sparknlp.internal.extended_java_wrapper"], [179, "module-sparknlp.internal"], [180, "module-sparknlp.internal.params_getters_setters"], [181, "module-sparknlp.internal.recursive"], [182, "module-sparknlp.logging.comet"], [183, "module-sparknlp.logging"], [184, "module-sparknlp.pretrained"], [185, "module-sparknlp.pretrained.pretrained_pipeline"], [186, "module-sparknlp.pretrained.resource_downloader"], [187, "module-sparknlp.pretrained.utils"], [188, "module-sparknlp.training.conll"], [189, "module-sparknlp.training.conllu"], [190, "module-sparknlp.training"], [191, "module-sparknlp.training.pos"], [192, "module-sparknlp.training.pub_tator"], [193, "module-sparknlp.training.spacy_to_annotation"], [194, "module-sparknlp.training.tfgraphs"], [195, "module-sparknlp.upload_to_hub"], [196, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[49, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[50, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[51, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[52, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[53, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[54, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[55, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[55, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[55, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[56, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[57, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[58, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[59, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[60, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[61, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[62, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[62, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[62, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[63, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[64, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[65, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[66, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[66, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[66, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[66, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[66, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[67, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[67, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[67, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[67, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[67, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[68, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[68, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[68, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[68, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[69, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[69, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[69, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[69, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[69, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[70, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[70, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[70, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[70, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[70, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[71, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[71, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[72, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[72, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[72, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[72, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[72, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[73, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[73, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[73, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[73, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[73, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[73, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[73, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[74, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[75, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[75, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[75, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[75, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[75, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[75, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[76, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[76, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[76, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[76, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[76, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[77, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[77, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[77, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[77, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[77, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[78, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[78, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[78, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[78, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[78, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[79, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[79, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[79, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[79, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[79, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[80, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[80, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[80, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[81, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[81, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[81, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[81, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[81, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[81, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[82, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[82, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[83, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[83, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[84, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[85, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[85, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[85, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[85, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[85, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[86, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[86, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[86, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[86, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[86, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[87, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[87, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[87, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[87, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[87, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[87, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[87, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[88, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[89, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[89, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[90, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[91, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[92, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[92, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[93, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[94, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[94, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[94, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[94, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[94, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[94, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[94, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[95, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[95, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[95, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[95, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[95, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[95, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[95, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[96, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[96, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[97, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[97, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[98, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[99, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[99, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[100, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[100, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[100, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[100, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[100, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[100, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[100, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[101, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[101, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[102, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[102, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[102, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[102, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[102, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[103, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[104, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[104, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[105, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[105, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[105, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[105, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[105, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[106, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[106, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[107, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[107, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[108, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[108, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[108, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[108, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[108, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[109, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[109, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[109, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[109, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[109, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[109, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[109, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[110, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[110, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[110, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[110, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[110, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[110, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[110, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[110, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[111, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[112, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[112, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[113, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[113, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[113, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[113, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[114, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[114, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[115, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[115, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[116, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[117, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[118, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[118, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[118, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[118, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[118, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[118, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[118, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[119, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[120, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[120, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[121, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[121, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[122, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[123, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[123, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[123, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[123, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[124, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[124, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[124, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[124, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[124, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[124, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[125, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[125, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[126, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[126, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[127, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[128, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[128, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[129, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[129, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[130, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[130, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[131, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[132, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[132, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[133, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[134, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[134, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[135, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[135, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[136, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[136, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[137, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[137, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[137, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[137, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[137, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[137, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[137, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[138, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[138, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[139, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[139, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[139, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[140, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[141, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[141, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[141, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[141, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[141, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[141, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[141, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[142, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[142, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[143, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[143, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[143, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[143, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[143, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[143, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[143, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[144, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[144, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[145, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[146, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[146, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[147, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[147, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[147, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[147, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[147, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[148, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[148, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[149, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[149, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[149, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[149, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[149, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[149, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[149, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[149, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[150, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[150, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[151, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[151, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[151, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[152, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[152, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[152, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[152, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[152, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[152, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[153, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[153, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[154, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[154, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[155, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[155, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[155, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[155, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[155, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[156, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[157, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[157, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[157, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[157, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[157, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[157, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[157, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[157, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[158, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[158, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[159, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[159, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[159, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[160, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[160, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[160, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[160, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[160, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[161, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[161, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[161, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[162, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[162, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[163, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[163, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[164, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[164, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[165, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[166, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[167, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[168, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[168, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[169, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[169, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[169, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[169, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[169, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[170, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[170, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[171, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[171, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[172, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[173, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[173, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[174, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[174, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[174, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[174, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[174, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[174, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[174, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[174, "module-sparknlp.functions"]], "sparknlp": [[175, "module-sparknlp"]], "start() (in module sparknlp)": [[175, "sparknlp.start"]], "version() (in module sparknlp)": [[175, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[176, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[176, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[176, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[176, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[177, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[177, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[178, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[178, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[178, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[179, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[180, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[180, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[180, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[180, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[181, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[181, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[181, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[181, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[182, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[182, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[182, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[183, "module-sparknlp.logging"]], "sparknlp.pretrained": [[184, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[185, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[185, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[185, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[185, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[185, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[185, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[186, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[186, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[187, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[188, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[188, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[188, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[189, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[189, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[189, "module-sparknlp.training.conllu"]], "sparknlp.training": [[190, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[191, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[191, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[191, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[192, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[192, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[192, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[193, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[193, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[194, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[195, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[196, "module-sparknlp.util"]]}})