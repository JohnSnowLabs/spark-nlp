Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token2_chunk/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token2_chunk/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "thi": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 128, 129, 130, 132, 133, 135, 136, 138, 141, 143, 144, 145, 146, 147, 148, 150, 151, 155, 156, 162, 163, 167, 168, 169, 172, 173, 178, 180, 184, 185, 188, 189, 190, 192, 193, 194], "can": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 90, 95, 96, 97, 98, 99, 105, 107, 108, 110, 112, 113, 115, 116, 119, 121, 122, 124, 132, 135, 136, 144, 145, 146, 147, 160, 169, 172, 173, 175, 176, 178, 185, 187, 189, 190, 192, 193, 194, 195], "quick": [0, 185, 190], "refer": [0, 1, 5, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 82, 99, 107, 108, 111, 112, 113, 115, 116, 119, 121, 122, 132, 134, 135, 144, 189, 191, 192], "how": [0, 1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 56, 58, 59, 60, 61, 63, 64, 67, 68, 70, 74, 76, 77, 79, 84, 85, 86, 90, 91, 95, 96, 97, 100, 102, 107, 110, 121, 122, 129, 130, 132, 135, 138, 144, 155, 157, 160, 162, 175, 176, 180, 185, 189, 194], "set": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 148, 150, 151, 156, 160, 162, 167, 168, 169, 173, 175, 185, 189, 192, 193], "up": [0, 1, 5, 20, 32, 62, 67, 70, 72, 82, 112, 113, 115, 116, 162, 185, 189, 192, 193], "your": [0, 1, 20, 32, 37, 51, 61, 62, 68, 70, 72, 85, 86, 90, 91, 95, 96, 97, 100, 105, 110, 111, 119, 121, 126, 128, 132, 136, 187, 189, 192, 193, 195], "environ": [0, 186], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 58, 62, 72, 82, 115, 132], "johnsnowlab": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 90, 91, 96, 97, 99, 100, 105, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 128, 130, 132, 136, 137, 146, 162], "load": [0, 1, 3, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 82, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 141, 172, 173, 180, 189, 192], "shell": 0, "packag": [0, 55, 60, 169, 186, 187], "com": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 90, 91, 96, 97, 99, 100, 105, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 128, 130, 132, 146, 162], "nlp_2": [0, 162], "12": [0, 55, 74, 75, 76, 82, 87, 89, 95, 105, 119, 143, 147, 161, 162, 172, 178, 180, 188], "pyspark": [0, 2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 141, 143, 144, 146, 147, 148, 161, 162, 165, 168, 169, 172, 175, 176, 178, 179, 189, 190], "submit": [0, 169, 185], "extern": [0, 82, 85, 90, 91, 97, 119, 125, 145, 160, 175, 176, 178, 179], "jar": [0, 162], "after": [0, 50, 51, 53, 62, 68, 69, 72, 87, 89, 95, 128, 148, 169, 188, 189], "compil": 0, "build": [0, 60, 61, 68, 69, 79, 82, 86, 113, 169, 185], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 148, 160, 161, 162, 168, 169, 173, 175, 178, 179, 180, 185, 186, 188, 189, 190, 192, 193, 194, 195], "built": [0, 20, 32, 144], "top": [0, 5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 55, 82, 112, 113, 116, 144], "apach": [0, 144, 162], "x": [0, 32, 161, 175, 195], "For": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 130, 132, 135, 136, 137, 144, 148, 169, 172, 173, 179, 185, 186, 188, 189, 190, 191, 192, 193], "you": [0, 16, 27, 33, 51, 53, 59, 61, 63, 68, 70, 79, 87, 98, 115, 136, 138, 143, 162, 169, 173, 178, 180, 185, 187, 189, 190, 193, 194, 195], "need": [0, 5, 7, 9, 51, 53, 61, 63, 68, 73, 77, 79, 82, 87, 90, 96, 97, 100, 102, 105, 108, 111, 113, 119, 121, 122, 129, 130, 133, 141, 143, 169, 173, 175, 176, 178, 185, 187, 189, 190, 193, 195], "java": [0, 84, 117, 149, 150, 158, 164, 165, 168, 173], "8": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 46, 51, 53, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 68, 69, 74, 75, 76, 87, 92, 97, 98, 102, 113, 119, 132, 147, 175, 180], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 56, 58, 60, 61, 64, 66, 67, 68, 71, 73, 74, 75, 76, 77, 79, 82, 84, 85, 87, 90, 92, 95, 97, 98, 99, 100, 105, 107, 108, 111, 112, 113, 115, 116, 119, 123, 125, 132, 136, 143, 145, 146, 155, 157, 161, 162, 169, 173, 179, 180, 185, 186, 187, 188, 189, 190, 193, 194, 195], "note": [0, 5, 7, 16, 20, 27, 32, 33, 37, 55, 61, 64, 68, 70, 73, 74, 76, 82, 97, 112, 113, 115, 116, 143, 162, 194], "sinc": [0, 54, 82, 113, 162, 189, 190, 194], "version": [0, 54, 61, 101, 102, 125, 151, 156, 162, 167, 168, 172, 173, 189, 194], "6": [0, 20, 37, 48, 56, 57, 60, 64, 82, 86, 91, 92, 98, 105, 112, 121, 147, 162, 176, 180, 189], "deprec": [0, 162], "If": [0, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 46, 48, 49, 70, 73, 77, 84, 87, 89, 95, 96, 97, 100, 102, 107, 108, 112, 113, 115, 116, 119, 125, 162, 168, 169, 173, 185, 187, 189], "consid": [0, 73, 79, 82, 115, 119, 121, 122, 124, 128, 162, 173], "stick": [0, 162], "lower": [0, 54, 55, 82, 119, 134, 162], "7": [0, 8, 37, 48, 56, 57, 60, 87, 89, 105, 113, 137, 178, 180, 188], "we": [0, 5, 7, 20, 32, 46, 48, 49, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 82, 96, 97, 100, 108, 112, 113, 115, 116, 119, 121, 130, 143, 161, 185, 188, 189, 190, 193, 194, 195], "recommend": [0, 64, 76, 110, 111, 112, 113, 115, 116], "4": [0, 5, 56, 57, 60, 63, 64, 66, 67, 73, 90, 96, 98, 105, 112, 113, 125, 147, 176, 180], "It": [0, 11, 14, 16, 20, 22, 25, 27, 30, 32, 33, 35, 37, 38, 40, 42, 46, 48, 54, 56, 57, 58, 60, 61, 62, 67, 68, 69, 72, 74, 75, 77, 82, 92, 111, 112, 115, 119, 121, 122, 128, 137, 143, 173, 188, 193], "have": [0, 5, 16, 20, 27, 32, 33, 37, 55, 58, 61, 66, 68, 69, 73, 82, 90, 92, 95, 96, 97, 98, 105, 107, 108, 113, 117, 122, 147, 148, 164, 189, 190, 193], "basic": [0, 48, 82, 107, 188], "knowledg": [0, 61, 82, 138], "framework": [0, 7, 112, 115, 116], "work": [0, 46, 61, 66, 67, 84, 112, 115, 116, 126, 188, 190, 194], "befor": [0, 54, 73, 87, 89, 112, 116, 117, 121, 129, 132, 150, 168, 185], "pleas": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 84, 85, 86, 87, 90, 91, 96, 97, 100, 105, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 124, 126, 128, 132, 135, 144, 145, 173, 186, 187, 191, 194], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 143, 144, 146, 147, 148, 169, 172, 175, 176, 178, 180, 185, 189, 190, 192, 193, 194], "first": [0, 2, 60, 62, 63, 64, 66, 72, 74, 75, 82, 90, 96, 97, 98, 107, 112, 115, 116, 119, 124, 129, 136, 148, 155, 185, 189, 190, 194], "let": [0, 61, 128, 189], "": [0, 1, 10, 13, 16, 17, 21, 24, 27, 29, 33, 34, 39, 46, 48, 49, 54, 55, 58, 60, 61, 62, 63, 67, 68, 69, 72, 74, 75, 77, 82, 90, 97, 100, 111, 112, 113, 115, 116, 117, 119, 121, 122, 128, 129, 130, 132, 133, 137, 143, 149, 150, 158, 161, 164, 168, 169, 185, 188, 189, 190, 193], "make": [0, 46, 48, 54, 58, 67, 74, 75, 82, 108, 111, 112, 121, 191, 195], "sure": [0, 111], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 45, 46, 48, 50, 51, 53, 55, 56, 57, 60, 62, 64, 66, 69, 72, 73, 74, 75, 76, 82, 86, 87, 89, 90, 91, 92, 95, 96, 97, 99, 101, 102, 107, 108, 111, 112, 113, 115, 116, 119, 125, 129, 132, 136, 137, 151, 156, 162, 167, 168, 169, 172, 173, 175, 176, 179, 180, 185, 188, 189, 193, 194], "0_292": 0, "creat": [0, 2, 3, 4, 20, 32, 37, 56, 57, 62, 68, 72, 73, 79, 97, 102, 105, 126, 132, 143, 145, 161, 175, 176, 178, 179, 189, 190, 193, 195], "new": [0, 2, 3, 4, 8, 37, 45, 48, 50, 55, 56, 57, 60, 64, 66, 67, 73, 76, 98, 99, 101, 102, 112, 113, 116, 119, 125, 137, 151, 156, 167, 168, 188, 189], "manag": [0, 82, 173, 186], "all": [0, 2, 3, 4, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 48, 54, 55, 56, 57, 58, 70, 73, 76, 77, 80, 84, 87, 97, 100, 112, 113, 116, 119, 124, 129, 132, 136, 138, 155, 169, 173, 184, 189, 194], "depend": [0, 2, 45, 58, 70, 76, 77, 79, 80, 82, 84, 97, 115, 119, 132, 162], "Then": [0, 20, 32, 96, 97, 148, 169, 189], "sparknlp": [0, 185, 188, 189, 190, 191, 193, 194, 195], "n": [0, 75, 82, 92, 95, 96, 97, 107, 108, 112, 113, 116, 128, 143, 146, 161, 172], "y": [0, 32], "activ": [0, 11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 82], "jupyt": [0, 169, 185], "now": [0, 58, 108, 143, 190], "should": [0, 2, 3, 4, 9, 20, 32, 37, 46, 48, 49, 62, 63, 72, 74, 82, 84, 91, 92, 96, 97, 102, 107, 108, 115, 117, 119, 129, 143, 150, 151, 164, 168, 172, 175, 176], "readi": [0, 20, 172, 189], "notebook": [0, 169, 185], "run": [0, 61, 82, 169, 173, 186, 194], "also": [0, 20, 32, 37, 46, 48, 49, 54, 55, 64, 67, 73, 74, 75, 77, 79, 82, 87, 90, 95, 96, 97, 101, 102, 108, 111, 112, 124, 143, 146, 151, 156, 167, 185, 189, 190, 191, 192, 194], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 175, 176, 178, 179, 180, 186], "bin": 0, "A": [0, 5, 7, 37, 45, 46, 55, 68, 69, 73, 77, 82, 85, 86, 90, 91, 92, 99, 100, 110, 112, 113, 115, 116, 121, 122, 129, 130, 169, 178, 187, 189, 195], "retriev": [0, 63, 66, 73, 85, 121, 122, 123, 169, 172, 185, 189, 190], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 161, 169, 172, 175, 176, 178, 179, 180, 185, 188, 189, 192, 193, 194, 195], "manual": [0, 188], "sparksess": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 86, 112, 113, 115, 116, 162, 175, 176, 178, 179], "becaus": [0, 110, 117, 150, 168], "other": [0, 5, 8, 32, 46, 58, 70, 71, 79, 82, 100, 110, 112, 113, 116, 119, 126, 128, 136, 137, 189], "configur": [0, 46, 70, 130, 162], "includ": [0, 48, 54, 56, 57, 62, 64, 72, 74, 75, 76, 79, 82, 87, 95, 96, 97, 112, 113, 116, 119, 137, 169, 179, 186, 188, 189, 190, 195], "them": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 58, 60, 61, 67, 68, 74, 76, 77, 79, 82, 87, 90, 108, 115, 119, 124, 132, 145, 148, 189, 190], "builder": [0, 125, 162], "appnam": [0, 162], "master": [0, 162], "local": [0, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 82, 112, 113, 115, 116, 124, 143, 162, 172, 193], "config": [0, 162, 186], "driver": [0, 162], "memori": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 55, 64, 73, 162], "16g": [0, 162], "maxresults": [0, 162], "kryoseri": [0, 162], "buffer": [0, 57, 73, 162], "max": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 58, 60, 61, 63, 66, 67, 68, 69, 74, 75, 76, 82, 122, 162], "2000m": [0, 162], "getorcr": [0, 162], "main": [1, 77, 130, 188, 192, 195], "page": [1, 54, 113, 172, 184, 192, 194], "github": [1, 60, 66, 68, 115, 172], "issu": [1, 132], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 161, 169, 172, 173, 175, 176, 178, 179, 180, 185, 188, 189, 190, 192, 193, 194, 195], "model": [1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 90, 91, 95, 96, 97, 99, 100, 102, 105, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 126, 128, 130, 132, 150, 162, 168, 169, 172, 173, 185, 186, 188, 192, 194, 195], "hub": [1, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 84, 85, 96, 97, 105, 108, 112, 113, 115, 116, 119, 121, 122, 124, 132, 173], "welcom": [1, 5, 7], "python": [1, 84, 162], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 183, 185, 188, 189], "inform": [1, 51, 53, 66, 73, 74, 82, 87, 95, 112, 119, 135, 144, 179, 185, 186, 187, 188, 189, 195], "us": [1, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 99, 102, 105, 107, 108, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 129, 130, 132, 134, 135, 136, 137, 143, 144, 145, 146, 147, 148, 155, 161, 162, 169, 172, 173, 175, 176, 178, 179, 186, 187, 188, 189, 190, 192], "librari": [1, 46, 48, 49, 84, 134, 135, 136, 144, 148, 194], "get": [1, 20, 32, 82, 94, 105, 117, 119, 125, 130, 132, 133, 135, 136, 137, 141, 143, 144, 151, 156, 167, 185, 189, 194, 195], "start": [1, 5, 10, 13, 17, 21, 24, 29, 34, 39, 67, 79, 82, 96, 97, 108, 134, 162, 169, 185, 188, 190, 193, 194], "cheat": 1, "sheet": [1, 54], "requir": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 53, 55, 57, 60, 63, 64, 71, 74, 75, 82, 97, 100, 111, 119, 132, 134, 136, 147, 148, 188, 189, 190], "instal": [1, 169, 187], "session": [1, 162, 175, 176, 178, 179], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 150, 161, 162, 165, 168, 169, 172, 173, 175, 176, 178, 179, 180, 185, 188, 189, 190, 193, 194, 195], "user": [1, 95, 96, 130, 145, 162, 169, 185], "guid": [1, 186], "annot": [1, 3, 4, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 160, 161, 162, 163, 164, 166, 168, 169, 172, 173, 174, 178, 180, 185, 186, 191, 192, 193, 194, 195], "own": [1, 20, 32, 37, 51, 62, 72, 85, 86, 90, 91, 96, 97, 100, 105, 110, 111, 119, 121, 126, 128, 132, 192, 193, 195], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 162, 168, 169, 171, 172, 173, 174, 186, 188, 189, 192], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 85, 86, 87, 90, 91, 96, 97, 98, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 136, 137, 143, 161, 162, 169, 185, 188, 192], "dataset": [1, 20, 32, 37, 51, 53, 58, 62, 63, 66, 67, 68, 69, 72, 73, 82, 84, 96, 97, 102, 108, 113, 119, 132, 168, 172, 175, 176, 178, 179, 192], "train": [1, 5, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 68, 69, 71, 72, 74, 75, 76, 82, 84, 85, 86, 90, 91, 94, 96, 97, 100, 101, 102, 105, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 126, 128, 132, 134, 143, 162, 169, 172, 185, 189, 190, 192, 193], "light": [1, 5, 61, 76, 82, 143, 192, 194], "helper": [1, 105, 132, 138, 161, 178, 179, 180, 192, 195], "function": [1, 64, 73, 112, 116, 136, 173, 184, 192], "third": [1, 107, 124, 170, 175], "parti": [1, 170], "project": [1, 82, 115, 117, 169, 186], "log": [1, 20, 32, 37, 97, 102, 108, 113, 162], "api": [1, 185, 189, 192], "modul": [1, 28, 52, 65, 78, 80, 81, 83, 88, 93, 103, 104, 106, 109, 114, 120, 127, 131, 142, 154, 166, 171, 177], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 161, 169, 172, 175, 176, 177, 178, 179, 186, 188, 189, 193, 194, 195], "format": [2, 3, 4, 46, 48, 49, 51, 53, 77, 79, 85, 86, 87, 89, 90, 91, 96, 97, 100, 102, 110, 112, 116, 121, 122, 130, 132, 133, 135, 137, 138, 141, 144, 146, 175, 176, 178, 179, 180, 186, 195], "annotatortyp": [2, 3, 4, 59, 92, 134, 135, 141, 144, 188], "begin": [2, 45, 95, 113, 128, 130, 134, 135, 144, 161, 188], "end": [2, 10, 13, 17, 21, 24, 29, 34, 39, 45, 97, 108, 112, 128, 130, 132, 135, 144, 161, 169, 175, 185, 188, 190], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 148, 161, 162, 169, 172, 175, 176, 180, 185, 186, 188, 189, 190, 193, 194], "metadata": [2, 3, 4, 38, 45, 50, 82, 91, 96, 97, 99, 105, 135, 137, 141, 143, 144, 161, 169, 173, 188, 190], "embed": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 79, 80, 96, 97, 98, 117, 135, 136, 137, 143, 144, 156, 161, 162, 168, 172, 188], "repres": [2, 3, 4, 51, 53, 55, 60, 66, 76, 77, 79, 86, 91, 92, 130, 169, 172, 189], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 148, 151, 161, 162, 169, 178, 185, 188, 189, 190], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 157, 161, 162, 164, 165, 166, 169, 172, 173, 175, 176, 178, 179, 180, 184, 186, 187, 188, 189, 191, 192, 193, 195], "nlp": [2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 84, 85, 86, 90, 91, 96, 97, 98, 99, 100, 105, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 128, 130, 132, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 148, 154, 162, 166, 169, 172, 173, 175, 176, 178, 179, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195], "detail": [2, 3, 4, 74, 75, 82, 99, 112, 113, 116], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 148, 151, 156, 160, 161, 162, 167, 168, 169, 172, 173, 175, 176, 178, 179], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 148, 151, 160, 161, 162, 167, 169, 172, 173, 175, 176, 178, 179], "The": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 129, 130, 132, 135, 137, 143, 144, 146, 161, 162, 169, 172, 173, 175, 176, 178, 179, 180, 185, 188, 189, 190, 192, 193, 195], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 148, 161, 163, 172, 178, 188, 189, 192], "possibl": [2, 3, 4, 59, 61, 74, 75, 77, 107, 119, 122, 135, 144, 155, 157, 169, 185], "valu": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 57, 59, 64, 66, 71, 74, 77, 79, 82, 84, 85, 87, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 111, 112, 113, 115, 116, 117, 119, 121, 124, 125, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 148, 151, 155, 156, 157, 167, 169, 185, 195], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 82, 85, 86, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 105, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 132, 134, 136, 143, 145, 147, 148, 162, 172, 175, 179, 180, 189, 193, 194], "wordpiec": 2, "word_embed": [2, 55, 56, 58, 59, 60, 61, 64, 65, 67, 68, 70, 72, 74, 76, 80, 96, 97, 102], "sentence_embed": [2, 20, 32, 37, 57, 62, 63, 65, 66, 69, 71, 75, 80, 169, 185, 189], "categori": [2, 11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 46, 48, 49, 169, 185, 189], "date": [2, 50, 87, 89, 90], "entiti": [2, 8, 12, 15, 19, 23, 26, 31, 36, 41, 43, 45, 48, 50, 58, 77, 78, 79, 86, 91, 93, 94, 95, 96, 97, 98, 99, 126, 137, 143, 147, 172], "sentiment": [2, 20, 32, 37, 64, 76, 80, 116, 162, 189, 190], "po": [2, 9, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 51, 53, 79, 80, 96, 97, 128, 132, 143, 161, 162, 172, 175, 177, 188, 192, 193, 194], "chunk": [2, 8, 9, 10, 13, 17, 21, 24, 29, 34, 38, 39, 50, 59, 62, 72, 77, 82, 86, 90, 91, 92, 95, 126, 134, 137, 147, 161, 169, 179, 185, 195], "named_ent": [2, 12, 15, 19, 23, 26, 31, 36, 41, 43, 79, 95, 96, 97, 98, 99, 102, 143, 172], "negex": 2, "labeled_depend": [2, 53], "languag": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 134, 144, 148, 173, 189], "keyword": [2, 81, 82, 110], "dummi": [2, 54], "int": [2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 79, 82, 84, 87, 92, 94, 96, 97, 100, 101, 102, 105, 107, 108, 111, 112, 113, 115, 116, 117, 119, 122, 125, 129, 130, 132, 156, 162, 169, 175], "index": [2, 82, 86, 129, 162, 175], "charact": [2, 54, 64, 67, 77, 84, 90, 92, 100, 107, 108, 119, 121, 122, 129, 130, 132, 137], "under": [2, 61, 76, 82, 162], "last": [2, 87, 89, 126, 180, 193], "string": [2, 20, 32, 37, 45, 51, 54, 77, 90, 92, 98, 100, 108, 116, 122, 124, 128, 134, 135, 137, 141, 143, 144, 193], "dict": [2, 3, 4, 51, 53, 77, 85, 86, 90, 91, 96, 98, 99, 100, 102, 110, 119, 121, 122, 130, 143, 160, 162, 168, 169, 172], "associ": [2, 3, 4, 32, 71, 77, 90, 95, 169], "list": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 77, 79, 82, 84, 87, 90, 94, 95, 97, 98, 99, 100, 101, 107, 108, 112, 113, 115, 116, 117, 119, 124, 128, 130, 136, 137, 143, 144, 151, 161, 168, 169, 172, 173, 180, 184, 189], "vector": [2, 32, 56, 57, 59, 60, 62, 63, 64, 71, 72, 73, 136, 137, 188], "where": [2, 32, 60, 64, 77, 82, 85, 86, 90, 91, 92, 105, 108, 110, 112, 113, 116, 121, 122, 132, 134, 178], "applic": [2, 49, 82, 112, 155, 169, 170, 185, 187], "copi": [2, 3, 4, 173], "differ": [2, 3, 4, 46, 48, 51, 53, 64, 66, 68, 69, 74, 76, 82, 87, 107, 108, 119, 130, 132, 143, 169, 193], "return": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 84, 85, 86, 91, 92, 94, 96, 97, 99, 105, 107, 108, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 128, 130, 132, 134, 143, 160, 161, 162, 163, 168, 172, 173, 175, 176, 178, 179], "newli": [2, 3, 4], "static": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 173, 189], "datatyp": [2, 161], "structtyp": 2, "schema": [2, 95, 169, 185], "look": [2, 97, 121, 188], "like": [2, 5, 10, 13, 17, 20, 21, 24, 29, 34, 39, 45, 54, 55, 59, 61, 67, 70, 76, 79, 82, 90, 95, 108, 111, 113, 119, 130, 132, 169, 185, 187, 188], "struct": [2, 135, 141, 144], "containsnul": [2, 32, 133, 135, 141, 144], "true": [2, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 49, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 84, 86, 87, 89, 91, 95, 97, 100, 107, 108, 119, 121, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 144, 146, 169, 173, 175, 176, 179, 180, 185, 189, 190], "nullabl": [2, 32, 133, 135, 141, 144], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 143, 144, 146, 147, 148, 161, 162, 169, 172, 175, 176, 178, 180, 185, 188, 189, 190, 195], "integ": [2, 46, 48, 49, 135, 141, 144], "map": [2, 9, 32, 73, 77, 101, 102, 105, 119, 135, 141, 144, 151, 156, 161, 167, 168, 188], "kei": [2, 5, 46, 51, 53, 68, 69, 74, 75, 85, 99, 135, 141, 143, 144, 169, 172, 185], "valuecontainsnul": [2, 135, 141, 144], "arrai": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 74, 75, 76, 84, 85, 92, 97, 101, 105, 107, 108, 112, 113, 115, 116, 119, 126, 128, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 161, 190, 193], "element": [2, 32, 92, 133, 135, 141, 144], "float": [2, 3, 5, 7, 20, 32, 37, 46, 50, 84, 96, 97, 99, 101, 102, 108, 112, 113, 116, 117, 119, 132, 133, 135, 136, 143, 144], "sql": [2, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 86, 112, 113, 115, 116, 143, 161, 168, 172, 175, 176, 178, 179], "arraytyp": [2, 134, 161], "fromrow": 2, "row": [2, 38, 73, 107, 108, 111, 135, 144, 146, 161, 175], "column": [2, 8, 20, 32, 37, 54, 73, 85, 94, 96, 97, 101, 102, 105, 111, 117, 125, 130, 132, 133, 134, 135, 136, 137, 138, 141, 144, 148, 151, 161, 172, 175, 178, 189], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 161, 164, 168, 169, 172, 185, 188, 189, 190, 193, 194, 195], "an": [2, 5, 7, 9, 20, 32, 37, 38, 46, 48, 49, 51, 54, 58, 60, 64, 66, 67, 76, 77, 82, 84, 86, 87, 89, 90, 91, 92, 96, 97, 99, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 126, 130, 132, 134, 135, 136, 137, 138, 143, 144, 148, 151, 156, 160, 161, 163, 167, 168, 169, 175, 176, 178, 179, 184, 186, 188, 189, 190, 192, 193], "annotationaudio": 3, "audio": [3, 133, 169], "alreadi": [3, 79, 82, 96, 97, 98, 130, 143, 147, 172, 193], "process": [3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 75, 76, 79, 82, 84, 95, 96, 97, 102, 108, 112, 113, 116, 132, 133, 134, 135, 136, 137, 141, 144, 145, 148, 169, 185, 188, 189, 190, 191], "file": [3, 5, 7, 20, 32, 37, 51, 53, 54, 71, 73, 77, 85, 86, 90, 91, 96, 97, 100, 102, 108, 110, 119, 121, 122, 125, 130, 133, 146, 157, 162, 169, 175, 176, 178, 179, 185, 195], "byte": [3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 84, 97, 101, 112, 113, 115, 116, 119, 169], "annotationimag": [4, 143, 172], "origin": [4, 46, 48, 49, 55, 62, 67, 68, 72, 95, 108, 112, 141], "height": [4, 46, 48, 49, 141], "width": [4, 46, 48, 49, 141], "nchannel": [4, 141], "mode": [4, 20, 32, 37, 97, 102, 121, 135, 141, 144, 169], "imag": [4, 46, 48, 49, 141, 143, 172], "uri": [4, 173], "pixel": [4, 48], "number": [4, 16, 20, 27, 32, 33, 37, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 92, 94, 96, 97, 101, 105, 107, 108, 112, 113, 116, 117, 119, 125, 132, 175, 176], "color": 4, "channel": [4, 46, 48, 49, 119], "opencv": 4, "concern": [5, 7, 11, 46, 48, 49, 50, 55], "hubertforctc": 5, "classnam": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 90, 91, 96, 97, 99, 100, 105, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 128, 130, 132, 146, 149, 150, 158, 164], "java_model": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 90, 91, 96, 97, 99, 100, 105, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 126, 128, 130, 132, 140, 146, 150, 168], "none": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 90, 91, 96, 97, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 144, 146, 147, 150, 162, 168, 169, 172, 173, 190], "hubert": 5, "head": [5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 45, 55, 76, 95, 96, 97, 143, 161, 172, 189], "connectionist": [5, 7], "tempor": [5, 7], "classif": [5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 63, 66, 71, 111, 112, 116, 189], "ctc": [5, 7], "wa": [5, 7, 11, 12, 14, 15, 16, 20, 22, 23, 25, 26, 27, 30, 31, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 54, 58, 60, 61, 67, 68, 69, 73, 74, 75, 82, 111, 112, 113, 119, 172, 189, 190], "propos": [5, 7, 46, 48, 55, 58, 60, 61, 68, 69, 74, 75, 76], "self": [5, 7, 48, 55, 67, 115], "supervis": [5, 7, 55, 63, 64, 71, 82, 112, 113], "speech": [5, 7, 9, 58, 104, 105, 132, 178, 195], "represent": [5, 7, 48, 55, 56, 57, 61, 62, 63, 64, 72, 73, 74, 75, 76, 95, 116, 146, 160], "learn": [5, 7, 20, 32, 37, 50, 55, 61, 62, 64, 68, 69, 71, 72, 74, 75, 76, 82, 96, 97, 101, 108, 112, 113, 116, 119, 169, 187], "mask": [5, 48, 60, 74, 75, 76, 112, 129], "predict": [5, 48, 60, 97, 113, 116, 169, 185], "hidden": [5, 10, 12, 13, 15, 17, 19, 21, 23, 24, 26, 29, 31, 34, 36, 39, 41, 43, 55, 64, 76, 125], "unit": [5, 113, 125], "wei": [5, 48], "ning": 5, "hsu": 5, "benjamin": [5, 58], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 16, 27, 33, 38, 58, 79, 91, 101, 102, 121, 124, 130, 145, 151, 156, 167, 175, 188, 189, 193, 194], "transcrib": [5, 7], "text": [5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 45, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 144, 146, 147, 148, 155, 157, 160, 161, 169, 175, 176, 178, 179, 185, 188, 189, 190, 194, 195], "provid": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 96, 97, 100, 101, 102, 105, 108, 110, 112, 113, 115, 116, 119, 121, 122, 132, 143, 151, 156, 161, 163, 167, 172, 190], "pre": [5, 7, 20, 32, 37, 49, 56, 57, 60, 61, 63, 64, 71, 97, 102, 112, 116, 135, 137, 144, 148, 176, 189], "current": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 82, 86, 87, 89, 108, 112, 113, 115, 116, 125, 143, 146, 151, 162, 188, 189, 190], "support": [5, 7, 20, 32, 55, 67, 82, 97, 100, 108, 115, 124, 146, 162, 186], "appl": [5, 7, 57, 69, 75, 162], "silicon": [5, 7, 162], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 55, 67, 112], "instruct": [5, 7, 66], "xla": [5, 7], "companion": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 96, 97, 99, 105, 108, 112, 113, 115, 116, 119, 121, 122, 124, 132, 165], "object": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 96, 97, 99, 105, 108, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 132, 155, 157, 164, 165, 169, 188, 189], "speechtotext": [5, 7], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 144, 146, 147, 148, 151, 169, 185, 189, 190], "audio_assembl": [5, 7, 142, 162], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 144, 146, 147, 148, 151, 169, 185, 189, 190], "default": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 128, 129, 130, 132, 134, 135, 136, 137, 138, 143, 144, 146, 160, 161, 162, 169, 172, 173, 175, 176, 178, 179, 189], "asr_hubert_large_ls960": 5, "name": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 91, 93, 94, 96, 97, 99, 101, 105, 108, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 126, 130, 132, 133, 134, 135, 136, 137, 138, 141, 144, 146, 148, 151, 161, 167, 169, 172, 173, 175, 178, 185, 189], "avail": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 80, 82, 84, 85, 87, 90, 96, 97, 105, 108, 112, 113, 115, 116, 117, 119, 121, 122, 124, 132, 164, 172, 173, 185, 192], "see": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 130, 132, 135, 136, 137, 138, 144, 148, 169, 172, 173, 179, 185, 186, 187, 192, 194, 195], "To": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 58, 60, 61, 67, 68, 74, 76, 82, 87, 90, 105, 107, 112, 113, 116, 132, 138, 143, 145, 169, 185, 193], "which": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 70, 71, 72, 74, 76, 79, 82, 87, 89, 90, 97, 99, 100, 107, 108, 110, 112, 113, 115, 116, 121, 129, 132, 136, 143, 161, 173, 175, 176, 189, 190], "compat": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 58, 60, 61, 67, 68, 74, 76, 97, 136, 173], "5669": [5, 7, 46, 48, 49, 58], "more": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 54, 58, 61, 63, 64, 66, 70, 74, 75, 79, 82, 87, 92, 95, 99, 108, 112, 113, 116, 121, 129, 130, 135, 136, 137, 144, 148, 169, 172, 179, 185, 186, 187, 189, 192, 195], "extend": [5, 7, 9, 20, 32, 37, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 64, 68, 70, 71, 73, 74, 76, 82, 84, 85, 87, 89, 90, 91, 92, 96, 97, 99, 100, 102, 105, 107, 108, 110, 111, 112, 115, 116, 119, 121, 123, 124, 128, 130, 132, 135, 136, 137, 144, 148, 172], "hubertforctctestspec": 5, "paper": [5, 46, 48, 49, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 82, 108, 111, 112, 113, 115, 116, 132, 179, 195], "abstract": [5, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 82, 112, 113, 115, 116, 125, 179, 195], "approach": [5, 46, 48, 68, 69, 76, 82, 94, 96, 97, 99, 108, 110, 112, 113, 116, 119, 121, 122, 149, 192], "challeng": [5, 32, 48, 61, 64, 66, 68, 69, 82], "three": [5, 119, 147], "uniqu": [5, 112], "problem": [5, 32, 55, 64, 112, 116, 119, 132], "multipl": [5, 32, 49, 58, 77, 82, 87, 107, 112, 130, 161, 169, 175], "sound": 5, "each": [5, 7, 16, 20, 27, 32, 33, 37, 46, 48, 49, 60, 62, 63, 70, 72, 73, 77, 79, 82, 85, 86, 87, 90, 91, 92, 94, 96, 97, 99, 100, 102, 105, 107, 108, 110, 112, 117, 119, 121, 122, 129, 130, 132, 135, 144, 155, 161, 168, 178, 190], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 148, 151, 161, 168, 172, 175, 176, 178, 179, 189, 190, 193, 195], "utter": 5, "lexicon": 5, "dure": [5, 20, 32, 37, 61, 66, 96, 97, 102, 107, 119, 162, 169, 185], "phase": [5, 61, 112], "variabl": [5, 62, 72], "length": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 76, 92, 100, 107, 108, 112, 113, 115, 116, 117, 119, 129, 130], "explicit": [5, 107, 113], "segment": [5, 45, 46, 48, 61, 68, 131, 132], "deal": [5, 143, 193], "bert": [5, 11, 13, 14, 15, 16, 18, 22, 25, 26, 30, 35, 38, 40, 42, 55, 56, 57, 60, 61, 67, 68, 69, 74, 75, 76, 97, 98, 99, 112, 116], "util": [5, 59, 96, 99, 107, 108, 122, 145, 153, 154, 157, 159, 162, 163, 167, 171], "offlin": [5, 169], "cluster": [5, 63, 66, 71, 162], "step": [5, 20, 32, 37, 62, 72, 97, 102, 169, 185, 189], "align": 5, "target": [5, 71, 112, 115, 130, 134, 143, 172], "label": [5, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 46, 48, 49, 51, 53, 63, 77, 84, 94, 95, 96, 97, 99, 101, 102, 110, 111, 116, 119, 125, 132, 169, 175, 185, 189], "loss": [5, 55, 61, 66, 97, 116, 185], "ingredi": 5, "our": [5, 55, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74, 75, 82, 108, 112, 113, 116, 161, 172, 194], "appli": [5, 8, 20, 32, 37, 46, 49, 54, 77, 79, 97, 98, 102, 107, 116, 119, 121, 137, 161, 175], "over": [5, 61, 74, 75, 76, 112, 121, 130, 161, 169, 185], "region": 5, "onli": [5, 46, 48, 49, 51, 53, 54, 64, 71, 76, 87, 90, 100, 107, 108, 112, 113, 115, 116, 128, 132, 145, 155, 175], "forc": 5, "combin": [5, 16, 27, 33, 61, 67, 73, 82, 112, 116, 119, 121, 132], "acoust": 5, "continu": [5, 95, 113, 138, 185], "reli": [5, 51, 53, 76, 82], "primarili": 5, "consist": [5, 55, 60, 67, 90, 105, 111, 132, 146, 178], "unsupervis": [5, 74, 75, 76, 82, 112, 113], "rather": [5, 46], "than": [5, 32, 37, 46, 61, 62, 66, 72, 74, 75, 76, 82, 84, 92, 96, 113, 115, 121, 122, 189], "intrins": [5, 46], "qualiti": [5, 48, 113], "assign": [5, 32, 77, 98, 110], "simpl": [5, 56, 57, 77, 113, 190], "k": [5, 112, 113, 116, 136], "mean": [5, 9, 16, 27, 32, 33, 46, 48, 49, 74, 82, 84, 87, 89, 112, 113, 115, 116, 129, 136, 143, 189, 190, 193], "teacher": 5, "100": [5, 20, 32, 38, 49, 62, 72, 74, 82, 108, 146], "two": [5, 32, 48, 51, 53, 55, 60, 71, 73, 74, 75, 79, 147, 175, 189], "iter": [5, 51, 53, 55, 62, 72, 105, 132, 169, 185], "either": [5, 20, 37, 49, 53, 58, 59, 70, 77, 82, 84, 90, 110, 111, 116, 132, 134, 143, 144, 146, 172, 190], "match": [5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 75, 76, 77, 86, 87, 88, 89, 90, 91, 100, 105, 107, 112, 113, 130, 132, 134, 155, 188], "improv": [5, 55, 56, 57, 58, 60, 64, 66, 68, 69, 74, 75, 96, 97, 113, 194], "upon": [5, 82], "state": [5, 10, 12, 13, 15, 17, 19, 20, 21, 23, 24, 26, 29, 31, 32, 34, 36, 37, 39, 41, 43, 46, 48, 49, 55, 56, 57, 58, 63, 64, 66, 67, 68, 69, 76, 82, 97, 112, 113, 116, 144, 186, 189], "art": [5, 20, 32, 46, 48, 49, 55, 56, 57, 58, 63, 64, 66, 67, 68, 69, 76, 82, 97, 112, 113, 116, 144], "wav2vec": [5, 7], "perform": [5, 46, 48, 49, 54, 55, 58, 60, 61, 63, 64, 66, 68, 69, 71, 73, 74, 75, 76, 97, 111, 112, 113, 121], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 61, 107], "000h": 5, "benchmark": [5, 49, 55, 60, 61, 63, 64, 74, 75, 112, 116], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 45, 56, 57, 61, 63, 99, 112, 116, 180], "tune": [5, 45, 56, 57, 61, 63, 99, 112, 116], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 144, 146, 147, 148, 161, 173, 175, 176, 178, 179, 180, 185, 188, 189, 190, 194], "19": [5, 50, 63, 92, 178, 180], "13": [5, 8, 9, 45, 74, 75, 79, 105, 137, 180], "rel": [5, 58, 60, 74, 87, 89, 96, 119, 188], "wer": 5, "reduct": [5, 55, 121], "dev": [5, 48, 55, 64, 71], "test": [5, 20, 32, 37, 46, 48, 49, 51, 53, 56, 57, 71, 73, 85, 86, 90, 91, 96, 97, 102, 105, 113, 121, 122, 126, 132, 175, 176, 178, 179, 180, 189, 195], "evalu": [5, 20, 32, 37, 58, 63, 66, 67, 74, 75, 102, 112, 151, 169], "batchsiz": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 74, 75, 76, 97, 112, 115, 119], "size": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 79, 82, 97, 101, 112, 113, 115, 116, 117, 119, 121, 188, 193, 194], "batch": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 74, 75, 76, 97, 101, 112, 115, 119], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 149, 150, 151, 154, 158, 162, 164, 168, 169, 185, 189, 190, 193], "ml": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 134, 135, 136, 141, 143, 144, 145, 146, 147, 148, 169, 185, 189, 193], "audioassembl": [5, 7, 133], "audio_cont": [5, 7, 133], "setstag": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 136, 146, 147, 148, 189, 190], "processedaudiofloat": [5, 7], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 137, 144, 146, 147, 148, 161, 169, 185, 188, 189, 190, 194], "rawfloat": [5, 7], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 137, 141, 144, 146, 147, 148, 161, 188, 189, 190, 194], "fit": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 136, 143, 145, 146, 147, 148, 168, 169, 185, 189, 190, 193], "select": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 59, 61, 73, 79, 82, 84, 96, 97, 99, 111, 112, 113, 116, 119, 121, 122, 128, 132, 133, 135, 137, 138, 141, 144, 146, 148, 161, 169, 185, 190], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 73, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 137, 138, 144, 146, 147, 148, 161, 178, 188, 189, 190], "mister": [5, 7], "quilter": [5, 7], "THE": [5, 7, 54], "apostl": [5, 7], "OF": [5, 7, 55], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7], "TO": [5, 7, 175, 195], "hi": [5, 7, 99, 108], "gospel": [5, 7], "setconfigprotobyt": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 84, 97, 101, 112, 113, 115, 116, 119], "b": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 84, 86, 91, 95, 96, 97, 98, 99, 101, 107, 112, 113, 115, 116, 119, 132, 143, 161, 172, 175, 179, 195], "configproto": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 84, 97, 101, 112, 113, 115, 116, 119], "tensorflow": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 82, 84, 97, 101, 112, 113, 115, 116, 119], "serial": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 77, 84, 97, 101, 112, 113, 115, 116, 119, 162], "loadsavedmodel": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 112, 113, 115, 116], "folder": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 97, 102, 108, 112, 113, 115, 116, 119, 122, 125, 173, 175], "spark_sess": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 112, 113, 115, 116], "save": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 97, 102, 108, 112, 113, 115, 116, 162, 169, 185, 189], "restor": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132], "lang": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 172, 173, 189, 194], "en": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 76, 79, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 172, 173, 176, 189, 194, 195], "remote_loc": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 172, 173], "download": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 84, 85, 86, 91, 96, 97, 98, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 162, 172, 173, 188, 189, 192, 193], "option": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 82, 84, 85, 86, 90, 91, 96, 97, 99, 100, 102, 105, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 133, 135, 139, 140, 143, 144, 160, 161, 162, 168, 169, 172, 173, 175, 176, 178, 179, 189], "remot": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 172, 173], "address": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132], "resourc": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 90, 91, 96, 97, 99, 100, 102, 105, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 124, 126, 130, 132, 145, 157, 160, 171, 173, 175, 176, 178, 179, 180, 189, 195], "Will": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 107, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132], "repositori": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 172, 186], "otherwis": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 84, 85, 86, 91, 96, 97, 99, 105, 108, 111, 112, 113, 115, 116, 119, 121, 122, 124, 130, 132, 134, 169], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 126], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "chunk2doc": [8, 134], "convert": [8, 50, 54, 59, 70, 73, 87, 89, 92, 95, 100, 112, 116, 129, 132, 134, 137, 138, 147, 169, 185, 192], "back": [8, 112], "when": [8, 9, 11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42, 46, 48, 49, 54, 55, 63, 79, 87, 89, 92, 97, 112, 113, 119, 121, 124, 128, 132, 143, 175, 189, 190, 193], "try": [8, 119, 175], "re": [8, 63, 189], "do": [8, 71, 82, 95, 124, 130, 143, 185, 189, 193], "further": [8, 55, 66, 82, 96, 97, 148], "analysi": [8, 20, 32, 37, 64, 66, 76, 109, 110, 116, 153, 190], "doc2chunk": [8, 134], "pretrainedpipelin": [8, 137, 143, 161, 172, 188, 193, 194], "locat": [8, 77, 107, 162, 172, 189], "extract": [8, 9, 10, 13, 17, 21, 24, 29, 34, 39, 46, 48, 49, 51, 59, 73, 77, 78, 79, 81, 82, 86, 87, 89, 91, 95, 96, 97, 98, 107, 108, 110, 117, 119, 122, 126, 136, 137, 138, 143, 147, 162, 169, 172, 185], "york": [8, 99, 137], "jersei": [8, 137], "aren": [8, 137], "t": [8, 16, 27, 33, 61, 68, 85, 100, 108, 110, 130, 137], "far": [8, 113, 137], "apart": [8, 51, 53, 137], "actual": [8, 92, 137, 148], "id": [8, 32, 54, 74, 77, 112, 113, 115, 116, 119, 134, 135, 137, 144, 148, 169, 175], "defin": [8, 9, 95, 96, 97, 119, 124, 128, 137, 161, 169, 172, 185, 189, 193], "amongst": [8, 137], "thing": [8, 119, 137], "explain_document_dl": [8, 137, 143, 161, 172], "chunktodoc": 8, "chunkconvert": 8, "explainresult": [8, 137], "selectexpr": [8, 9, 20, 38, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 85, 86, 87, 89, 90, 91, 92, 95, 98, 99, 100, 105, 107, 108, 110, 115, 123, 124, 126, 129, 130, 134, 136, 137, 147, 161, 175, 176, 178, 188, 189, 194], "explod": [8, 9, 20, 38, 45, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 86, 89, 90, 91, 92, 95, 98, 99, 105, 107, 108, 115, 136, 137, 147, 161, 175, 178, 188, 189, 194], "col": [8, 51, 53, 77, 86, 95, 98, 137, 161, 188], "loc": [8, 12, 15, 19, 23, 26, 31, 36, 41, 43, 79, 95, 96, 97, 137, 143, 161, 172, 175], "sentenc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 105, 111, 112, 115, 119, 124, 126, 129, 132, 135, 137, 143, 144, 146, 147, 148, 162, 172, 175, 176, 178, 179, 180, 189, 193, 194], "22": [8, 137, 175, 188], "pattern": [9, 54, 77, 87, 90, 100, 121, 122, 129, 130, 132], "part": [9, 58, 82, 85, 104, 105, 123, 132, 134, 178, 195], "tag": [9, 20, 32, 37, 54, 58, 94, 95, 96, 97, 98, 104, 105, 132, 161, 169, 175, 178, 179, 195], "order": [9, 66, 76, 77, 82, 87, 112, 121, 122, 143, 148, 161, 189, 190, 193, 195], "meaning": [9, 123], "phrase": [9, 58, 62, 72, 86, 91], "onto": [9, 161, 190], "pars": [9, 51, 52, 53, 58, 77, 85, 87, 89, 119, 121, 122, 143, 146, 172, 175, 178], "regular": [9, 90, 96, 107], "express": [9, 37, 45, 87, 90, 107], "wrap": [9, 117, 149, 150, 158, 164, 168], "angl": 9, "bracket": 9, "easili": [9, 64, 105, 136, 185], "distinguish": 9, "itself": [9, 82, 116, 132, 145, 190], "form": [9, 20, 32, 37, 73, 77, 85, 86, 87, 90, 91, 108, 110, 121, 122, 132, 136, 169, 175, 176, 189], "peter": [9, 67, 85, 100, 105, 108, 121, 123, 175], "piper": [9, 85, 105, 123], "employe": [9, 85, 105, 123], "pick": [9, 85, 105, 123], "peck": [9, 85, 105, 123], "pickl": [9, 85, 105, 123], "pepper": [9, 85, 105, 123], "nnp": [9, 105, 143, 161, 175, 176, 178, 179, 188, 193, 194, 195], "nn": [9, 105, 175, 176, 178, 179, 195], "vbp": [9, 105, 143, 176, 188, 193, 194], "vbg": [9, 105], "IN": [9, 105, 143, 161, 176, 178, 179, 188, 193, 194], "jj": [9, 105, 143, 161, 175, 178, 188, 193, 194, 195], "regexpars": 9, "e": [9, 11, 12, 14, 15, 18, 19, 22, 23, 25, 26, 30, 31, 35, 36, 40, 41, 42, 43, 46, 53, 54, 63, 64, 66, 67, 77, 79, 96, 97, 112, 113, 115, 116, 119, 124, 146, 169, 185], "g": [9, 11, 12, 14, 15, 18, 19, 22, 23, 25, 26, 30, 31, 35, 36, 40, 41, 42, 43, 46, 53, 54, 63, 64, 66, 79, 96, 97, 112, 113, 115, 116, 119, 124, 146, 169, 185], "setregexpars": 9, "enclos": 9, "treat": [9, 119, 132], "group": [9, 130], "so": [9, 16, 20, 27, 33, 37, 82, 95, 108, 145, 169, 185], "here": [9, 85, 161, 189], "specif": [9, 38, 51, 53, 54, 56, 57, 61, 71, 79, 82, 97, 112, 113, 125, 143, 145, 169, 193], "noun": [9, 176], "success": [9, 58, 113], "grammar": 9, "parser": [9, 51, 53, 79], "perceptronmodel": [9, 51, 53, 79, 96, 105, 175], "Of": [9, 55, 132], "documentassembl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 105, 107, 108, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 144, 145, 146, 147, 148, 169, 175, 185, 189], "sentencedetector": [9, 20, 38, 45, 51, 53, 57, 59, 69, 71, 75, 79, 82, 85, 90, 92, 96, 97, 98, 99, 105, 107, 108, 124, 126, 145, 148, 175, 189, 190], "postag": 9, "11": [9, 50, 74, 75, 87, 89, 92, 105, 180], "21": [9, 87, 89, 98, 105, 180], "35": [9, 105, 180], "39": [9, 98, 105, 178, 180], "52": [9, 98, 105, 178], "58": [9, 48, 105], "albertforquestionansw": 10, "classifi": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 82, 136, 189], "dl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 84, 97, 99, 121, 122], "albert": [10, 11, 12, 55], "span": [10, 13, 17, 21, 24, 29, 34, 39, 112, 116], "question": [10, 13, 17, 21, 24, 29, 34, 38, 39, 51, 53, 56, 57, 64, 68, 69, 76, 99, 105, 112, 113, 116, 143], "answer": [10, 13, 17, 21, 24, 29, 34, 38, 39, 51, 53, 56, 57, 64, 76, 99, 112, 113, 116, 143], "task": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 66, 67, 71, 74, 75, 76, 82, 99, 112, 113, 115, 116, 145], "squad": [10, 13, 17, 21, 24, 29, 34, 39, 55, 56, 57, 60, 68, 69, 112], "linear": [10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 48, 113], "layer": [10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 55, 56, 57, 60, 64, 76], "comput": [10, 13, 17, 21, 24, 29, 34, 39, 46, 48, 49, 55, 60, 61, 66, 71, 113, 115, 122, 132, 143, 193], "logit": [10, 11, 13, 14, 16, 17, 18, 21, 24, 25, 27, 29, 30, 33, 34, 35, 39, 40, 42], "spanclassifi": [10, 13, 17, 21, 24, 29, 34, 39], "document_quest": [10, 13, 17, 21, 24, 29, 34, 38, 39], "document_context": [10, 13, 17, 21, 24, 29, 34, 39], "albert_base_qa_squad2": 10, "larg": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 55, 60, 61, 63, 64, 74, 75, 76, 82, 84, 86, 91, 97, 112, 113], "allow": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 48, 64, 71, 96, 97, 100, 107, 108, 112, 129, 130, 145, 155], "faster": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 61, 64, 121, 122], "casesensit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 74, 75, 76, 86, 91, 121, 124], "whether": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 77, 79, 86, 87, 89, 91, 92, 95, 96, 97, 100, 102, 107, 108, 112, 113, 116, 117, 119, 121, 124, 129, 130, 132, 134, 136, 137, 138, 143, 146, 148, 151, 162, 172, 175, 179, 190], "ignor": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 74, 75, 76, 86, 92, 95, 112, 113, 115, 116, 121, 124, 143], "case": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 74, 75, 76, 77, 84, 86, 91, 119, 121, 124, 130, 134, 175, 176, 189], "configprotobyt": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 84, 97, 112, 113, 115, 116, 119], "maxsentencelength": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 76], "128": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 55, 56, 57, 58, 60, 61, 66, 68, 69, 74, 75, 76, 169, 185], "multidocumentassembl": [10, 13, 17, 21, 24, 29, 34, 38, 39, 144], "context": [10, 13, 17, 21, 24, 29, 34, 39, 56, 57, 62, 64, 72, 76, 111, 119, 130], "setcasesensit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 59, 61, 67, 68, 74, 86, 91, 96, 121, 124, 136, 148], "what": [10, 13, 17, 21, 24, 29, 34, 37, 39, 46, 51, 53, 82, 84, 99, 115, 119, 128, 176, 186], "my": [10, 12, 13, 15, 17, 20, 21, 23, 24, 26, 29, 31, 34, 36, 37, 39, 41, 43, 54, 90, 92, 99, 107, 113, 124, 126, 129, 189], "clara": [10, 13, 17, 21, 24, 29, 34, 39, 99], "live": [10, 12, 13, 15, 17, 21, 23, 24, 26, 29, 31, 34, 36, 39, 41, 43, 99, 113, 169, 185], "berkelei": [10, 13, 17, 21, 24, 29, 34, 39], "albertforsequenceclassif": [11, 22], "sequenc": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 46, 48, 49, 67, 112, 113, 114, 115, 116, 119, 124], "regress": [11, 14, 18, 22, 25, 30, 35, 40, 42, 112, 116], "pool": [11, 14, 18, 22, 25, 30, 35, 40, 42, 59, 64, 70], "multi": [11, 14, 18, 20, 22, 25, 30, 32, 35, 37, 40, 42, 55, 71, 74, 75, 82, 84, 115], "sequenceclassifi": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42], "albert_base_sequence_classifier_imdb": 11, "coalescesent": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 84], "instead": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 57, 82, 84, 87, 89, 116, 136, 137, 143, 193], "per": [11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 63, 74, 75, 84, 87, 92, 94, 95, 96, 97, 132, 143, 161, 172, 175], "inputcol": [11, 14, 16, 18, 20, 22, 25, 27, 30, 32, 33, 35, 37, 40, 42, 70, 84, 133, 135, 136, 137, 138, 141, 144], "averag": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 59, 63, 66, 70, 74, 75, 84, 97, 105, 117], "probabl": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 82, 112, 113, 116, 121], "calcul": [11, 14, 16, 18, 20, 25, 27, 30, 32, 33, 35, 37, 40, 42, 73, 92, 97, 102, 110, 117], "via": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 71, 141, 162], "softmax": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42, 60, 62, 72, 119], "sigmoid": [11, 14, 16, 18, 25, 27, 30, 33, 35, 40, 42], "love": [11, 14, 16, 20, 22, 25, 27, 30, 33, 35, 40, 42, 57, 69, 75, 108, 111, 189], "movi": [11, 14, 16, 20, 22, 25, 27, 30, 33, 35, 37, 40, 42, 111, 189], "child": [11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42], "pretti": [11, 14, 16, 22, 25, 27, 30, 32, 33, 35, 40, 42, 82], "bore": [11, 14, 16, 22, 25, 27, 30, 33, 35, 40, 42], "neg": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 37, 40, 42, 110, 111, 169, 185], "getclass": [11, 12, 14, 15, 16, 18, 19, 22, 23, 25, 26, 27, 30, 31, 33, 35, 36, 40, 41, 42, 43, 46, 48, 49, 99], "setcoalescesent": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 84], "limit": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 46, 48, 49, 55, 58, 67, 73, 76, 82, 116, 121], "almost": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42], "512": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 38, 40, 42, 63, 64, 115], "help": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 51, 53, 55, 115, 130, 169, 185, 190, 194], "feed": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42], "entir": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 46, 115], "bool": [11, 14, 16, 18, 22, 25, 27, 30, 33, 35, 40, 42, 54, 57, 59, 71, 77, 79, 84, 86, 87, 91, 92, 95, 96, 97, 100, 102, 107, 108, 112, 113, 116, 117, 119, 121, 124, 129, 130, 132, 134, 136, 137, 138, 143, 146, 151, 162, 169, 172, 173, 175], "one": [11, 14, 16, 18, 22, 25, 27, 30, 32, 33, 35, 40, 42, 45, 46, 48, 49, 51, 53, 54, 56, 57, 70, 74, 75, 76, 82, 84, 87, 90, 95, 108, 121, 126, 148, 185, 189], "albertfortokenclassif": [12, 55], "recognit": [12, 15, 19, 23, 26, 31, 36, 41, 43, 46, 49, 58, 93, 96, 97, 99], "ner": [12, 15, 19, 23, 26, 31, 36, 41, 43, 74, 75, 79, 80, 126, 143, 161, 162, 169, 172, 185], "token_classifi": [12, 19, 31, 36, 41, 43], "albert_base_token_classifier_conll03": 12, "albertembed": [12, 55], "level": [12, 20, 32, 37, 56, 57, 67, 68, 69, 71, 73, 75, 77, 96, 97, 102, 119, 162, 175], "tokenclassifi": [12, 15, 19, 23, 26, 31, 36, 41, 43], "john": [12, 15, 23, 26, 31, 36, 41, 43, 45, 57, 69, 75, 77, 79, 98, 100, 108, 138, 180], "lenon": [12, 15, 23, 26, 31, 36, 41, 43], "born": [12, 15, 23, 26, 31, 36, 41, 43, 113], "london": [12, 15, 23, 26, 31, 36, 41, 43], "pari": [12, 15, 23, 26, 31, 36, 41, 43, 99], "sarah": [12, 15, 23, 26, 31, 36, 41, 43], "o": [12, 15, 19, 23, 26, 31, 36, 41, 43, 95, 96, 97, 98, 143, 161, 172, 175, 179, 195], "bertforquestionansw": [13, 38], "bert_base_cased_qa_squad2": 13, "questionansw": 13, "bertforsequenceclassif": [14, 16], "bert_base_sequence_classifier_imdb": 14, "bertfortokenclassif": 15, "bert_base_token_classifier_conll03": 15, "bertforzeroshotclassif": 16, "modelforsequenceclassif": [16, 27, 33], "nli": [16, 27, 33], "natur": [16, 27, 33, 37, 49, 55, 56, 57, 58, 60, 61, 62, 71, 72, 76, 84, 112, 113, 116, 134, 144, 148], "infer": [16, 27, 33, 56, 57, 58, 61, 76], "equival": [16, 27, 33, 143, 162, 193], "don": [16, 27, 33, 61, 68, 100], "hardcod": [16, 27, 33], "potenti": [16, 27, 33, 48, 119], "thei": [16, 27, 33, 38, 51, 53, 97, 100, 113, 117, 145, 164, 176, 189], "chosen": [16, 27, 33, 51, 53, 97], "runtim": [16, 27, 33], "usual": [16, 27, 33, 49, 148, 173], "slower": [16, 27, 33], "much": [16, 20, 27, 33, 38, 55, 63, 68, 69, 100, 132, 162, 189], "flexibl": [16, 27, 33, 48], "loop": [16, 27, 33], "through": [16, 27, 33, 55, 79, 82, 138, 190], "longer": [16, 27, 33, 55, 62, 67, 72, 84, 115, 194], "ani": [16, 27, 33, 62, 63, 66, 71, 72, 77, 82, 97, 113, 116, 119, 136, 137, 173, 186, 189, 190, 195], "pass": [16, 27, 33], "pose": [16, 27, 33], "premis": [16, 27, 33], "hypothesi": [16, 27, 33], "pair": [16, 27, 33, 63, 79, 169], "bert_base_cased_zero_shot_classifier_xnli": 16, "camembertforquestionansw": 17, "camembert": [17, 18, 19, 58], "camembert_base_qa_fquad": 17, "fr": [17, 18, 58, 84], "camembertforsequenceclassif": 18, "sequence_classifi": 18, "camembert_base_sequence_classifier_allocin": 18, "j": [18, 77], "ai": [18, 112, 169, 185], "ador\u00e9": 18, "ce": 18, "film": 18, "lorsqu": 18, "\u00e9tai": 18, "enfant": 18, "je": 18, "d\u00e9test": 18, "\u00e7a": 18, "camembertfortokenclassif": 19, "camembert_base_token_classifier_wikin": 19, "georg": 19, "washington": 19, "est": [19, 58, 84, 115], "all\u00e9": 19, "\u00e0": 19, "classifierdl": [20, 189], "classifierdlapproach": [20, 32, 189], "gener": [20, 32, 46, 48, 55, 59, 61, 63, 66, 67, 70, 76, 79, 82, 96, 97, 99, 108, 112, 113, 116, 119, 121, 122, 137, 138, 169, 185, 188, 189, 190], "univers": [20, 51, 53, 71, 115], "encod": [20, 54, 56, 57, 60, 66, 67, 71, 99, 112, 115, 169], "deep": [20, 56, 57, 64, 82, 96, 108, 119], "dnn": 20, "insid": [20, 32, 95, 105, 130, 175], "instanti": [20, 32, 37, 51, 53, 62, 72, 73, 77, 85, 86, 90, 91, 96, 97, 100, 105, 108, 110, 111, 119, 121, 122, 126, 128, 132, 175, 176], "classifierdlmodel": [20, 32, 189], "monitor": [20, 32, 37, 97, 169, 185], "metric": [20, 32, 37, 97, 122, 169], "done": [20, 32, 37, 68, 69, 96, 97, 190], "settestdataset": [20, 32, 37, 97, 102], "method": [20, 32, 37, 55, 61, 62, 66, 72, 76, 82, 97, 117, 173, 184], "expect": [20, 32, 37, 63, 76, 97, 130, 161], "path": [20, 32, 37, 51, 53, 62, 72, 73, 77, 79, 85, 86, 90, 91, 96, 97, 99, 100, 102, 108, 110, 113, 119, 121, 122, 125, 130, 141, 143, 160, 169, 172, 175, 176, 178, 179, 185], "parquet": [20, 32, 37, 97, 102, 133], "datafram": [20, 32, 37, 49, 73, 97, 102, 105, 132, 143, 157, 161, 168, 169, 172, 175, 176, 178, 179, 185, 189, 193, 195], "ha": [20, 32, 37, 38, 46, 48, 49, 54, 55, 60, 61, 64, 68, 69, 73, 82, 85, 90, 97, 102, 108, 110, 112, 116, 121, 122, 132, 133, 134, 141, 143, 169, 173, 178, 185, 189, 190], "same": [20, 32, 37, 45, 55, 68, 73, 74, 77, 79, 97, 102, 116, 145, 169, 190], "follow": [20, 32, 37, 45, 50, 54, 64, 67, 73, 82, 87, 89, 90, 95, 97, 100, 107, 146, 147, 185, 187, 190], "universalsentenceencod": [20, 32, 37, 71, 169, 185, 189], "preprocessingpipelin": [20, 32, 37, 97, 102], "randomsplit": [20, 32, 37, 97, 102], "write": [20, 32, 37, 73, 97, 102, 121, 122, 190], "overwrit": [20, 32, 37, 97, 98, 102, 169], "test_data": [20, 32, 37, 97, 102], "setlabelcolumn": [20, 32, 37, 94, 96, 97, 101, 125, 169, 185, 189], "usag": [20, 32, 37, 45, 51, 53, 54, 55, 56, 57, 58, 59, 61, 64, 68, 71, 73, 74, 76, 77, 82, 84, 85, 87, 89, 90, 91, 96, 97, 100, 105, 107, 108, 110, 111, 112, 115, 116, 119, 121, 123, 124, 128, 130, 132], "64": [20, 32, 37, 55, 97, 101, 189], "dropout": [20, 37, 97], "coeffici": [20, 37, 96, 97], "enableoutputlog": [20, 32, 37, 97], "stdout": [20, 32, 37, 97, 102], "addit": [20, 32, 37, 51, 53, 56, 57, 77, 96, 97, 102, 107, 113, 130, 169, 188, 189], "evaluationlogextend": [20, 32, 37, 97], "valid": [20, 32, 37, 87, 97, 102, 108, 119, 185], "displai": [20, 32, 37, 102, 113, 169, 185], "time": [20, 32, 37, 55, 62, 72, 74, 75, 82, 87, 102, 111, 119, 132, 162, 188, 189, 193, 194], "labelcolumn": [20, 32, 37, 96, 97], "lr": [20, 32, 37, 97, 132], "rate": [20, 32, 37, 50, 62, 68, 69, 72, 73, 97, 101, 119], "005": [20, 37, 97, 101], "maxepoch": [20, 32, 37, 96, 97], "maximum": [20, 32, 37, 45, 62, 72, 79, 82, 94, 96, 97, 100, 101, 107, 108, 112, 113, 115, 116, 119, 121, 129, 130], "epoch": [20, 32, 37, 94, 96, 97, 101, 102, 108, 119, 169], "30": [20, 37, 82, 87, 89, 95, 101, 115, 143, 161, 172, 180, 188], "outputlogspath": [20, 32, 37, 97, 108], "randomse": [20, 32, 37, 96, 97], "random": [20, 32, 37, 62, 72, 94, 96, 97, 101, 117, 136], "seed": [20, 32, 37, 62, 72, 94, 96, 97, 101], "shuffl": [20, 32, 94, 101, 112], "testdataset": [20, 32, 37, 97, 169, 185], "statist": [20, 32, 37, 73, 82, 97, 102], "validationsplit": [20, 32, 37, 97, 108], "choos": [20, 32, 37, 59, 70, 97, 108, 121], "proport": [20, 32, 37, 97, 102, 108], "against": [20, 32, 37, 77, 82, 86, 91, 97, 102, 108, 145], "between": [20, 32, 37, 48, 51, 53, 68, 69, 71, 74, 75, 76, 79, 97, 102, 107, 108, 119], "off": [20, 32, 37, 71, 74, 75, 97, 102, 108], "verbos": [20, 32, 37, 96, 97, 102], "multiclassifierdlapproach": [20, 32, 169, 185], "sentimentdlapproach": [20, 32, 37], "accept": [20, 32, 37], "singl": [20, 32, 37, 63, 66, 73, 79, 82, 112, 126, 128, 130, 175], "item": [20, 37, 73, 169, 175, 185], "doubl": [20, 37, 133, 146], "sentenceembed": [20, 32, 37, 70, 73, 136], "In": [20, 32, 37, 46, 49, 58, 60, 61, 67, 73, 76, 77, 82, 84, 85, 86, 90, 91, 107, 108, 110, 112, 113, 116, 121, 122, 132, 169, 178, 185, 189, 190, 194, 195], "csv": [20, 37, 77, 102, 146, 189], "best": [20, 37, 55, 58, 63, 66, 68, 69, 82, 84, 97, 112, 189], "wach": [20, 189], "ever": [20, 37, 54, 189], "opinion": [20, 37, 189], "win": [20, 37, 189], "award": [20, 37, 189], "terribl": [20, 37, 189], "act": [20, 37, 189], "bad": [20, 37, 110, 169, 185, 189], "realli": [20, 37, 111, 189], "trane": 20, "smallcorpu": [20, 37, 189], "read": [20, 37, 46, 48, 49, 51, 53, 62, 72, 82, 85, 86, 87, 89, 90, 91, 96, 99, 100, 102, 108, 110, 113, 119, 121, 122, 130, 132, 133, 135, 141, 144, 157, 160, 162, 163, 169, 173, 175, 176, 178, 179, 185, 189, 195], "header": [20, 37, 38, 146, 189], "src": [20, 37, 46, 48, 49, 51, 53, 73, 85, 86, 90, 91, 96, 97, 105, 121, 122, 126, 132, 175, 176, 178, 179, 180, 189, 195], "useembed": [20, 32, 37, 71, 189], "docclassifi": [20, 32, 37, 189], "setbatchs": [20, 32, 37, 64, 97, 101, 119, 169, 185, 189], "setmaxepoch": [20, 32, 37, 94, 96, 97, 101, 169, 185, 189], "20": [20, 38, 46, 76, 95, 112, 113, 143, 146, 161, 172, 189], "setlr": [20, 32, 37, 97, 101, 169, 185, 189], "5e": [20, 37, 189], "setdropout": [20, 37, 97, 189], "pipelinemodel": [20, 32, 37, 51, 53, 54, 62, 72, 96, 97, 111, 119, 121, 122, 132, 143, 145, 169, 173, 189, 192], "v": [20, 32, 37, 50, 60, 73, 82, 84, 86, 97, 101, 102, 122, 161], "classifierdl_use_trec6": [20, 189], "trec": 20, "multiclassifierdlmodel": [20, 32], "sentimentdlmodel": [20, 32, 37], "sarcasmdl": [20, 189], "classifierdl_use_sarcasm": [20, 189], "sarcasm": [20, 189], "m": [20, 87, 89, 180, 189], "could": [20, 61, 82, 90, 102, 119, 188, 189, 190], "put": [20, 161, 189], "word": [20, 48, 49, 51, 53, 55, 59, 60, 62, 64, 68, 70, 71, 72, 73, 76, 77, 79, 82, 85, 92, 95, 98, 99, 100, 105, 110, 112, 113, 115, 116, 119, 121, 122, 123, 124, 128, 130, 131, 132, 143, 161, 172, 178, 179, 188, 189], "wake": [20, 189], "am": [20, 87, 89, 113, 126, 189], "mondai": [20, 189], "would": [20, 45, 59, 70, 87, 108, 162, 189], "arrays_zip": [20, 51, 53, 82, 189], "out": [20, 63, 82, 85, 100, 112, 113, 115, 116, 123, 124, 189], "normal": [20, 46, 48, 49, 54, 80, 86, 108, 111, 124, 136, 145, 148, 162, 189, 190], "debertaforquestionansw": 21, "deberta": [21, 22, 23, 60], "deberta_v3_xsmall_qa_squad2": 21, "debertaforsequenceclassif": 22, "v2": [22, 23, 56, 57, 60], "v3": [22, 23], "deberta_v3_xsmall_sequence_classifier_imdb": 22, "deberta_base_sequence_classifier_imdb": 22, "debertafortokenclassif": 23, "deberta_v3_xsmall_token_classifier_conll03": 23, "distilbertforquestionansw": 24, "distilbert": [24, 25, 27, 61], "distilbert_base_cased_qa_squad2": 24, "distilbertforsequenceclassif": [25, 27], "distilbert_base_sequence_classifier_imdb": 25, "distilbertfortokenclassif": 26, "distilbert_base_token_classifier_conll03": 26, "distilbertforzeroshotclassif": 27, "distilbert_base_zero_shot_classifier_uncased_mnli": 27, "albert_for_sequence_classif": [28, 80], "albert_for_token_classif": [28, 80], "bert_for_sequence_classif": [28, 80], "bert_for_token_classif": [28, 80], "bert_for_zero_shot_classif": [28, 80], "camembert_for_sequence_classif": [28, 80], "camembert_for_token_classif": [28, 80], "deberta_for_sequence_classif": [28, 80], "deberta_for_token_classif": [28, 80], "distil_bert_for_sequence_classif": [28, 80], "distil_bert_for_token_classif": [28, 80], "distil_bert_for_zero_shot_classif": [28, 80], "longformer_for_sequence_classif": [28, 80], "longformer_for_token_classif": [28, 80], "multi_classifier_dl": [28, 80], "roberta_bert_for_zero_shot_classif": [28, 80], "roberta_for_sequence_classif": [28, 80], "roberta_for_token_classif": [28, 80], "sentiment_dl": [28, 80], "xlm_roberta_for_sequence_classif": [28, 80], "xlm_roberta_for_token_classif": [28, 80], "xlnet_for_sequence_classif": [28, 80], "xlnet_for_token_classif": [28, 80], "longformerforquestionansw": 29, "longform": [29, 30, 31, 67], "longformer_base_base_qa_squad2": 29, "longformerforsequenceclassif": 30, "longformer_base_sequence_classifier_imdb": 30, "4096": [30, 55, 67], "longformerfortokenclassif": 31, "xlnet_base_token_classifier_conll03": [31, 43], "longformer_base_token_classifier_conll03": 31, "multiclassifierdl": 32, "bidirect": [32, 56, 57, 64, 76, 112], "gru": 32, "convolut": [32, 46, 49], "machin": [32, 46, 62, 72, 82, 96, 112, 113, 115, 116, 169, 187], "strongli": 32, "relat": [32, 51, 53, 79, 194], "variant": [32, 50, 67, 71], "mai": [32, 134, 188, 189, 190, 193, 194], "instanc": [32, 99, 101, 102, 151, 156, 162, 163, 167], "multiclass": 32, "categor": [32, 173], "precis": [32, 51, 53], "constraint": 32, "mani": [32, 60, 68, 69, 82, 112, 113, 115, 116, 132], "formal": 32, "find": [32, 51, 53, 68, 69, 71, 77, 79, 85, 87, 112, 113], "binari": [32, 141, 157, 169], "bertsentenceembed": [32, 37, 57, 69, 75], "multiclassifi": [32, 169, 185], "001": [32, 50, 96, 97], "10": [32, 45, 51, 82, 87, 89, 98, 117, 121, 169, 180, 188], "44": [32, 62, 72, 105], "shuffleperepoch": 32, "threshold": [32, 37, 62, 72, 82, 84, 96, 99, 119, 132], "minimum": [32, 37, 62, 72, 79, 82, 84, 94, 96, 97, 100, 107, 108, 112, 113, 116, 121, 122, 129, 130, 175], "ed58abb40640f983": 32, "pn": 32, "newsyou": 32, "toxic": 32, "a1237f726b5f5d89": 32, "dude": 32, "place": [32, 49], "obscen": 32, "insult": 32, "24b0d6c8733c2abe": 32, "thank": [32, 76, 82, 180], "8c4478fb239bcfc0": 32, "gee": 32, "minut": 32, "traindataset": [32, 169, 185], "printschema": [32, 133, 135, 141, 144], "root": [32, 45, 51, 53, 79, 133, 135, 141, 144, 176], "setcleanupmod": [32, 135, 144], "shrink": [32, 135, 144], "1e": [32, 169, 185], "setthreshold": [32, 37, 82, 84, 169, 185], "setvalidationsplit": [32, 102, 108], "setverbos": [32, 96, 97, 102], "multiclassifierdl_use_tox": 32, "comment": [32, 82], "jigsaw": 32, "good": [32, 58, 61, 71, 111], "stuff": 32, "wtf": 32, "kind": [32, 82, 87, 89], "crap": 32, "robertaforzeroshotclassif": 33, "robertaforsequenceclassif": [33, 35], "roberta_base_zero_shot_classifier_nli": 33, "setmaxsentencelength": [33, 36, 62, 72], "roberta": [33, 34, 35, 36, 39, 40, 41, 58, 60, 67, 68, 69, 74, 75, 99, 112], "robertaforquestionansw": [34, 99], "roberta_base_qa_squad2": [34, 99], "roberta_base_sequence_classifier_imdb": 35, "robertafortokenclassif": 36, "roberta_base_token_classifier_conll03": 36, "sentimentdl": 37, "affect": [37, 130], "subject": [37, 51, 53], "view": 37, "common": [37, 77, 126, 134, 162, 192], "product": 37, "review": [37, 165], "tweet": 37, "interpret": [37, 77], "posit": [37, 60, 61, 74, 75, 76, 82, 95, 110, 111, 129, 132, 148, 169, 185], "final": [37, 67, 68, 69, 74, 75, 84, 97, 119, 189], "otheriws": [37, 84], "neutral": [37, 84], "thresholdlabel": [37, 84], "score": [37, 56, 57, 74, 75, 82, 84, 96, 97, 99, 110, 111, 113], "less": [37, 61, 84, 87, 92, 96, 115, 121], "watch": [37, 111], "32": [37, 55, 64, 180, 188, 194], "setthresholdlabel": [37, 84], "p": [37, 54, 62, 72, 84, 97, 102, 128], "sentimentdl_use_imdb": 37, "english": [37, 58, 82, 121, 124, 132, 173], "imdb": 37, "sentimentdl_use_twitt": 37, "wow": 37, "video": [37, 82], "awesom": 37, "bruh": 37, "damn": 37, "wast": [37, 111], "tapasforquestionansw": 38, "implement": [38, 62, 72, 74, 99, 108, 117, 119, 139, 140, 149, 150, 158, 164, 168], "tapa": 38, "design": [38, 46, 48, 50, 56, 57, 68, 69, 86, 112, 115, 169, 185], "about": [38, 51, 53, 68, 69, 73, 82, 99, 107, 122, 143, 145, 188, 190, 193, 194], "tabular": [38, 146], "tabl": [38, 117, 146], "tri": 38, "share": [38, 82, 190], "its": [38, 49, 60, 61, 67, 76, 82, 105, 110, 112, 115, 124, 169, 178], "table_qa_tapas_base_finetuned_wtq": 38, "document_assembl": [38, 99, 142, 146, 162], "table_json": 38, "document_t": [38, 146], "sentence_detector": [38, 80, 99, 106], "table_assembl": [38, 142, 162], "tableassembl": [38, 146], "stage": [38, 143, 145, 169, 185, 189, 190, 193], "json_data": 38, "monei": [38, 146], "ag": [38, 63, 146], "donald": [38, 146], "trump": [38, 146], "000": [38, 82, 113, 132, 146], "75": [38, 82, 146], "elon": [38, 146], "musk": [38, 146], "55": [38, 98, 146, 180], "AS": [38, 45, 99], "who": [38, 128, 189], "earn": 38, "count": [38, 119], "old": [38, 45, 178], "xlmrobertaforquestionansw": 39, "xlm": [39, 40, 41, 74, 75], "xlm_roberta_base_qa_squad2": 39, "xlmrobertaforsequenceclassif": 40, "xlm_roberta_base_sequence_classifier_imdb": 40, "xlmrobertafortokenclassif": 41, "xlm_roberta_base_token_classifier_conll03": 41, "xlnetforsequenceclassif": 42, "xlnet": [42, 43, 76], "xlnet_base_sequence_classifier_imdb": 42, "xlnetfortokenclassif": 43, "spanbert_coref": 44, "spanbertcorefmodel": 45, "corefer": 45, "resolut": [45, 48], "spanbert": 45, "identifi": [45, 73, 82, 86, 90, 129, 130, 169, 190], "given": [45, 46, 48, 49, 66, 77, 82, 99, 112, 113, 116, 119, 121, 122, 124, 155, 168, 169], "told": [45, 89], "mari": [45, 57, 69, 75, 108], "he": [45, 60, 89, 128, 180], "borrow": 45, "book": [45, 54, 113, 119, 176], "her": [45, 99], "link": [45, 172], "ontonot": 45, "corefresolut": 45, "spanbert_base_coref": 45, "maxsegmentlength": 45, "textgenr": 45, "genr": 45, "One": [45, 66, 82, 128, 147], "bc": 45, "broadcast": 45, "convers": 45, "bn": 45, "nw": 45, "wire": 45, "pt": 45, "pivot": 45, "testament": 45, "tc": 45, "telephon": 45, "wb": 45, "web": [45, 54, 58, 113, 169, 185], "setmaxsegmentlength": 45, "settextgenr": 45, "code": [45, 60, 62, 66, 67, 68, 69, 72, 74, 75, 82, 84, 112, 116, 186, 194], "convnextforimageclassif": 46, "convnet": 46, "convnext": 46, "2020": [46, 82, 87, 89, 108], "zhuang": 46, "liu": [46, 48, 60, 68, 69], "hanzi": 46, "mao": 46, "chao": 46, "yuan": 46, "wu": 46, "christoph": 46, "feichtenhof": 46, "trevor": 46, "darrel": 46, "sain": 46, "xie": 46, "pure": [46, 49, 115], "inspir": [46, 111, 121, 122, 165], "vision": [46, 48, 49], "claim": 46, "outperform": [46, 63, 67, 71, 74, 75, 76, 82, 113], "huggingfac": [46, 48, 49, 58], "convnextforimageclassificationtestspec": 46, "roar": 46, "visual": [46, 48, 169], "began": 46, "introduct": 46, "vit": [46, 49], "quickli": 46, "supersed": 46, "vanilla": 46, "hand": [46, 128], "face": 46, "difficulti": 46, "detect": [46, 48, 71, 83, 84, 106, 107, 108], "semant": [46, 48, 64, 66, 71, 132], "hierarch": [46, 48, 62, 72], "swin": [46, 48], "reintroduc": 46, "sever": [46, 195], "prior": [46, 61, 66, 67, 119], "practic": [46, 58, 112, 116], "viabl": 46, "backbon": [46, 48, 76], "demonstr": [46, 48, 61, 67, 82, 113, 115], "remark": 46, "wide": [46, 54, 56, 57, 60, 61, 63, 74, 75, 112], "varieti": [46, 67, 74, 75, 194], "howev": [46, 55, 70, 76, 82, 100, 173, 188], "effect": [46, 48, 49, 67, 107, 112, 116], "hybrid": 46, "still": [46, 113, 169], "credit": 46, "superior": 46, "inher": 46, "induct": [46, 61], "bias": [46, 61], "reexamin": 46, "space": [46, 62, 72, 73, 92, 148], "achiev": [46, 60, 63, 66, 67, 68, 69, 74, 75, 76, 97, 112, 113, 115, 116, 143, 193], "gradual": 46, "modern": 46, "standard": [46, 48, 49, 54, 67, 87, 89, 112, 121, 122, 130], "resnet": 46, "toward": [46, 113], "discov": [46, 186], "compon": [46, 49, 101, 102, 133, 141, 151, 156, 167, 193], "contribut": 46, "along": [46, 79], "wai": [46, 51, 53, 77, 79, 145, 172], "outcom": 46, "explor": [46, 112, 116], "famili": [46, 54, 63], "dub": [46, 74, 75], "construct": [46, 62, 72, 130, 172, 192], "compet": 46, "favor": 46, "term": [46, 82], "accuraci": [46, 48, 51, 53, 56, 57, 62, 71, 72, 74, 75, 96, 97, 105, 121, 132, 185], "scalabl": 46, "87": [46, 48], "imagenet": [46, 48, 49], "coco": [46, 48], "ade20k": [46, 48], "while": [46, 48, 49, 55, 61, 66, 73, 82, 102, 113, 169, 185, 190], "maintain": 46, "simplic": [46, 112], "effici": [46, 48, 60, 62, 71, 72, 115, 188], "dores": [46, 48, 49], "resiz": [46, 48, 49], "certain": [46, 48, 49, 119], "donorm": [46, 48, 49], "deviat": [46, 48, 49], "featureextractortyp": [46, 48, 49], "architectur": [46, 48, 49, 55, 56, 57, 60, 68, 84, 97, 108, 112, 116], "featur": [46, 48, 49, 51, 62, 72, 82, 92, 96, 102, 169, 192], "imagemean": [46, 48, 49], "imagestd": [46, 48, 49], "resampl": [46, 48, 49], "filter": [46, 48, 49, 74, 75, 82, 95, 96, 112, 113, 115, 116, 124, 161, 173], "pil": [46, 48, 49], "nearest": [46, 48, 49, 117], "bilinear": [46, 48, 49], "bicub": [46, 48, 49], "do_res": [46, 48, 49], "tupl": [46, 48, 49, 168], "dorescal": [46, 48], "rescal": [46, 48], "rescalefactor": [46, 48], "factor": [46, 48, 74, 75, 76, 112, 116, 119], "scale": [46, 48, 49, 55, 61, 63, 67, 74, 75, 112, 113, 116], "croppct": 46, "percentag": [46, 73, 119, 132], "crop": 46, "imagedf": [46, 48, 49], "dropinvalid": [46, 48, 49], "imageassembl": [46, 48, 49, 141], "image_assembl": [46, 48, 49, 142, 162], "imageclassifi": [46, 48, 49], "pipelinedf": [46, 48, 49], "revers": [46, 48, 49], "split": [46, 48, 49, 107, 108, 115, 126, 128, 129, 132], "image_nam": [46, 48, 49], "bluetick": [46, 48, 49], "jpg": [46, 48, 49], "chihuahua": [46, 48, 49], "egyptian_cat": [46, 48, 49], "jpeg": [46, 48, 49], "tabbi": [46, 48], "cat": [46, 48, 49], "hen": [46, 48, 49], "hippopotamu": [46, 48, 49], "hippo": [46, 48, 49], "river": [46, 48, 49], "hors": [46, 48, 49], "amphibiu": [46, 48, 49], "junco": [46, 48, 49], "snowbird": [46, 48, 49], "ostrich": [46, 48, 49], "struthio": [46, 48, 49], "camelu": [46, 48, 49], "ox": [46, 48, 49], "palac": [46, 48, 49], "tractor": [46, 48, 49], "thresher": 46, "thrasher": 46, "thresh": 46, "setdorescal": [46, 48], "boolean": [46, 48], "setrescalefactor": [46, 48], "255": [46, 48], "setcroppct": 46, "determin": [46, 74], "smaller": [46, 61, 62, 72], "224": 46, "256": 46, "specifi": [46, 98, 99, 108, 175, 176], "edg": [46, 61, 79], "afterward": 46, "image_classifier_convnext_tiny_224_loc": 46, "convnext_for_image_classif": 47, "swin_for_image_classif": 47, "vit_for_image_classif": 47, "swinforimageclassif": 48, "swinimageclassif": 48, "shift": 48, "window": [48, 62, 67, 72, 82, 97, 119], "ze": 48, "yutong": 48, "lin": 48, "yue": 48, "cao": 48, "han": 48, "hu": 48, "yixuan": 48, "zheng": 48, "zhang": 48, "stephen": 48, "bain": 48, "guo": 48, "whose": 48, "scheme": [48, 68, 112], "bring": [48, 189], "greater": [48, 82], "attent": [48, 49, 60, 67], "non": [48, 130, 132], "overlap": [48, 86, 91], "cross": [48, 74, 75, 98], "connect": 48, "image_classifier_swin_base_patch4_window7_224": 48, "swinforimageclassificationtest": 48, "present": [48, 55, 63, 64, 67, 68, 69, 71, 74, 75, 79, 102, 108, 112, 115], "call": [48, 56, 57, 61, 63, 82, 113, 168, 173, 175, 189, 195], "capabl": [48, 61, 76, 113], "serv": [48, 186], "purpos": [48, 61, 63, 108], "adapt": 48, "aris": 48, "domain": [48, 66, 82, 113], "variat": 48, "high": [48, 71, 74, 75, 112, 115], "compar": [48, 49, 55, 60, 61, 64, 66, 76, 82, 108, 112, 116, 119, 169, 185], "variou": [48, 76, 183], "complex": [48, 64, 71, 82, 121, 122], "respect": [48, 60, 73, 96, 97, 178], "These": [48, 55, 68, 69, 76, 82, 96, 113, 172, 187], "broad": [48, 113], "rang": [48, 56, 57, 60, 61, 63, 66, 74, 75, 112], "1k": 48, "dens": [48, 56, 57], "box": 48, "ap": 48, "51": [48, 135, 144, 178], "53": [48, 86, 91], "miou": 48, "val": 48, "Its": [48, 53, 99, 112], "surpass": [48, 60], "previou": [48, 66, 74, 75, 113, 189], "margin": [48, 76], "prove": 48, "benefici": [48, 82], "mlp": 48, "vitforimageclassif": 49, "altern": [49, 82, 110, 119, 121, 122, 143, 146, 189, 194], "neural": [49, 56, 57, 60, 97, 108, 112, 115], "network": [49, 56, 57, 64, 97, 108], "image_classifier_vit_base_patch16_224": 49, "vitimageclassificationtestspec": 49, "becom": [49, 55, 61, 82], "de": [49, 58, 82, 84, 115], "facto": [49, 82], "remain": [49, 54, 55, 61, 82], "conjunct": 49, "replac": [49, 54, 60, 67, 84, 85, 98, 108, 112, 121, 122, 155, 189], "keep": [49, 82, 100, 112, 113, 116], "overal": [49, 73, 76], "structur": [49, 99, 148, 188], "relianc": 49, "cnn": [49, 84, 97, 108], "necessari": [49, 61, 185, 192], "directli": [49, 143, 169, 173, 185], "patch": 49, "veri": [49, 58, 64, 74, 75, 76, 112, 113, 115, 116, 143, 188, 190, 193, 194], "well": [49, 51, 53, 63, 71, 74, 75, 82, 112, 146], "amount": [49, 71, 82, 91, 113, 132, 143, 193], "transfer": [49, 61, 63, 71, 74, 75, 112, 113, 116], "mid": 49, "small": [49, 54, 55, 58, 61, 62, 72, 85, 105, 143, 178, 193], "cifar": 49, "vtab": 49, "etc": [49, 59, 63, 66, 136, 148, 185], "attain": 49, "excel": [49, 76], "substanti": [49, 56, 57], "fewer": [49, 55, 66], "worth": 49, "16x16": 49, "egyptian": 49, "date2chunk": 50, "datematch": [50, 87], "multidatematch": [50, 87, 89], "entitynam": 50, "date_chunk": 50, "omicron": 50, "covid": 50, "world": [50, 54, 126, 169, 180, 185], "health": 50, "organ": [50, 82, 115], "nov": [50, 87, 89, 178], "26": [50, 95, 143, 161, 172, 180], "2021": [50, 87, 89], "118": [50, 146], "121": 50, "01": [50, 87, 89, 90], "setentitynam": 50, "dependencypars": [51, 53, 79], "dependencyparserapproach": [51, 176, 195], "unlabel": [51, 56, 57, 112, 113, 116], "grammat": [51, 53], "dependencyparsermodel": [51, 53, 79], "relationship": [51, 53, 71, 79], "tell": [51, 53, 82, 161], "verb": [51, 53, 176], "modifi": [51, 53, 68, 69, 95, 108], "describ": [51, 53, 79, 82, 115], "particular": [51, 53, 82, 173, 189], "treebank": 51, "penn": 51, "setdependencytreebank": 51, "conll": [51, 53, 96, 97, 162, 176, 177, 192], "u": [51, 53, 60, 61, 82, 89, 95, 96, 97, 143, 161, 172, 176, 187, 190, 195], "setconllu": [51, 53], "dependencytreebank": 51, "conllu": [51, 53, 85, 162, 177, 192], "numberofiter": [51, 53], "converg": [51, 53, 105, 132], "better": [51, 53, 55, 60, 76, 82, 96, 105, 107, 108, 111, 112, 132], "typeddependencyparserapproach": [51, 53], "postagg": [51, 53, 79, 96, 105], "dependency_treebank": 51, "emptydataset": [51, 53], "tree": [51, 79], "bank": 51, "setnumberofiter": [51, 53], "read_a": [51, 53, 77, 85, 86, 90, 91, 96, 100, 102, 110, 121, 122, 130, 154, 160, 162, 175, 176], "reada": [51, 53, 73, 77, 85, 86, 90, 91, 96, 100, 102, 110, 121, 122, 126, 130, 157, 160, 175, 176], "dep": 51, "dependency_conllu": [51, 79], "perceptron": [51, 80, 104], "typeddependencyparsermdoel": 51, "union": [51, 53], "worker": [51, 53], "turner": [51, 53], "newal": [51, 53], "sai": [51, 53, 82, 130], "disappoint": [51, 53], "talk": [51, 53], "stricken": [51, 53], "parent": [51, 53], "firm": [51, 53], "feder": [51, 53], "mogul": [51, 53], "dependency_pars": [52, 80, 173, 194], "typed_dependency_pars": [52, 80], "typeddependencypars": [53, 79], "conll2009": 53, "typeddependencyparsermodel": [53, 79], "beforehand": 53, "2009": 53, "setconll2009": 53, "dependency_typ": [53, 79], "train_smal": 53, "txt": [53, 62, 72, 73, 85, 86, 90, 91, 105, 108, 110, 119, 121, 122, 126, 130, 178, 179, 195], "descript": [53, 66, 70, 82, 87, 121, 128, 155, 157], "typdep": 53, "dependency_typed_conllu": [53, 79], "amod": 53, "flat": [53, 79, 138], "nsubj": [53, 79, 138, 176], "parataxi": 53, "documentnorm": 54, "raw": [54, 113, 128, 130, 132, 188, 190], "scrape": 54, "xml": 54, "remov": [54, 68, 69, 100, 111, 129, 136, 137, 138], "dirti": [54, 100], "regex": [54, 77, 87, 90, 100, 119, 121, 122, 129, 130, 132], "want": [54, 77, 98, 173, 190], "polici": 54, "__": [54, 112, 136, 137], "action": 54, "clean": [54, 100, 112, 116, 148, 190], "lowercas": [54, 100, 129, 132, 134], "pretty_al": 54, "utf": 54, "cleanuppattern": [54, 100], "normalizeddocu": 54, "setact": 54, "setpattern": [54, 129, 132], "setreplac": 54, "setpolici": 54, "setlowercas": [54, 100, 134, 148], "div": 54, "theworldsgreatest": 54, "right": [54, 56, 57, 112, 132], "hide": 54, "toptext": 54, "style": [54, 84, 116], "font": 54, "sego": 54, "ui": 54, "arial": 54, "san": [54, 82], "serif": 54, "largest": [54, 82, 113], "develop": [54, 82, 115, 166], "site": [54, 82], "h1": 54, "300": 54, "160": 54, "lorem": [54, 86, 91], "ipsum": [54, 86, 91], "simpli": [54, 66, 190], "print": [54, 162, 173], "typeset": 54, "industri": 54, "been": [54, 58, 113, 147, 148, 173], "1500": 54, "unknown": [54, 84], "printer": 54, "took": 54, "gallei": 54, "scrambl": 54, "specimen": 54, "surviv": 54, "five": [54, 98], "centuri": [54, 132], "leap": 54, "electron": 54, "essenti": [54, 113], "unchang": 54, "popularis": 54, "1960": 54, "releas": [54, 55, 58, 60, 68, 69, 74, 75, 112, 116, 162], "letraset": 54, "passag": [54, 63], "recent": [54, 56, 57, 60, 68, 69, 82, 112], "desktop": 54, "publish": [54, 68, 69], "softwar": 54, "aldu": 54, "pagemak": 54, "setencod": 54, "lite": 55, "googl": [55, 56, 57, 60, 62, 64, 68, 69, 71, 72, 82, 116, 176], "research": [55, 56, 57, 60, 62, 72, 115, 116], "toyota": 55, "technolog": 55, "institut": 55, "chicago": 55, "offici": [55, 82, 95, 96, 97, 143, 161, 172, 186], "tf": [55, 71], "wrapper": [55, 165], "port": 55, "properti": [55, 139, 140, 151, 154, 162], "albert_base_uncas": 55, "albert_bas": 55, "768": [55, 56, 57, 58, 60, 61, 63, 66, 67, 68, 69, 74, 75, 76], "emb": 55, "dim": 55, "12m": 55, "albert_large_uncas": 55, "albert_larg": 55, "1024": [55, 64, 67, 76], "24": [55, 76, 86, 91, 95, 119, 143, 161, 172, 188], "16": [55, 76, 98, 178, 188], "18m": 55, "albert_xlarge_uncas": 55, "albert_xlarg": 55, "2048": 55, "60m": 55, "albert_xxlarge_uncas": 55, "albert_xxlarg": 55, "235m": 55, "sentencepiec": [55, 60, 71], "everi": [55, 56, 57, 58, 60, 61, 63, 66, 67, 68, 69, 74, 75, 76, 97, 111, 115, 119, 135, 144, 145, 190], "dimens": [55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 156], "repeat": 55, "footprint": 55, "cost": [55, 119, 121], "similar": [55, 66, 71, 82, 84], "FOR": 55, "http": [55, 58, 60, 62, 64, 66, 71, 72, 112, 132, 186], "tfhub": [55, 64, 71], "q": 55, "increas": [55, 63, 73, 82, 112, 113, 121], "often": [55, 68, 69, 76], "downstream": [55, 58, 60, 64, 66, 67, 76, 112, 113, 116], "some": [55, 57, 74, 82, 97, 108, 113, 145, 169, 180, 188, 189, 193, 194], "point": [55, 56, 57, 107, 108, 135, 144, 175], "harder": 55, "gpu": [55, 112, 113, 115, 116, 162], "tpu": 55, "techniqu": [55, 60, 112, 113, 116], "consumpt": [55, 71, 73], "speed": [55, 96, 115], "devlin": [55, 68, 69], "et": [55, 68, 69, 84], "al": [55, 68, 69], "2019": [55, 58, 60, 68, 69, 74, 75, 112], "comprehens": [55, 112, 113], "empir": [55, 56, 57, 74, 75, 76], "evid": 55, "lead": [55, 58, 74, 75], "focus": [55, 82], "inter": 55, "coher": [55, 113], "As": [55, 56, 57, 61, 63, 82], "establish": 55, "glue": [55, 56, 57, 61, 68, 69, 74, 75, 112], "race": [55, 60, 68, 69], "embeddingsfinish": [55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 136], "finished_embed": [55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "setoutputasvector": [55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 136], "setcleanannot": [55, 60, 61, 64, 67, 68, 70, 71, 73, 74, 76, 136, 137, 138], "80": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 136, 148], "1342473030090332": [55, 60], "3855540752410889": [55, 60], "9818322062492371": [55, 60], "784737348556518": [55, 60], "847029983997345": [55, 60], "047153353691101": [55, 60], "1520637571811676": [55, 60], "6245765686035156": [55, 60], "009860038757324219": [55, 60], "13450059294700623": [55, 60], "707749128341675": [55, 60], "2916892766952": [55, 60], "04192575812339783": [55, 60], "5764210224151611": [55, 60], "3196685314178467": [55, 60], "527840495109": [55, 60], "15583214163780212": [55, 60], "1614152491092682": [55, 60], "28423872590065": [55, 60], "135491415858268": [55, 60], "bertembed": [56, 59, 66, 70, 97, 136], "small_bert_l2_768": 56, "understand": [56, 57, 61, 74, 76, 82, 112, 116, 132, 188], "introduc": [56, 57, 61, 64, 66, 67, 112, 116], "stand": [56, 57], "unlik": [56, 57, 66, 74, 82, 128], "jointli": [56, 57], "condit": [56, 57, 112, 113, 116], "both": [56, 57, 63, 64, 71, 79, 112, 189, 190], "left": [56, 57, 112, 132], "just": [56, 57, 61, 68, 92, 97], "without": [56, 57, 63, 66, 74, 75, 82, 113, 132], "modif": [56, 57], "conceptu": [56, 57], "power": [56, 57, 112, 116], "obtain": [56, 57, 58, 63, 71], "eleven": [56, 57], "push": [56, 57], "absolut": [56, 57], "multinli": [56, 57], "86": [56, 57, 60], "v1": [56, 57], "f1": [56, 57, 74, 75, 97, 113], "93": [56, 57], "83": [56, 57, 60, 178, 179, 195], "small_bert_l2_128": 56, "3497989177703857": [56, 66], "480538547039032": [56, 66], "3238905668258667": [56, 66], "612930893898010": [56, 66], "1357314586639404": 56, "32984697818756104": 56, "6032363176345825": 56, "6791689395904": 56, "8244884014129639": 56, "27088963985443115": 56, "059438943862915": 56, "9817547798156": 56, "1648050546646118": 56, "4725411534309387": 56, "5938255786895752": 56, "5780693292617": 56, "9125322699546814": 56, "4563939869403839": 56, "3975459933280945": 56, "81611204147338": 56, "sentence_bert_embed": 57, "sent_small_bert_l2_768": 57, "islong": 57, "long": [57, 67, 76], "sent_small_bert_l2_128": 57, "orang": [57, 69, 75], "8951074481010437": [57, 69, 75], "13753940165042877": [57, 69, 75], "3108254075050354": [57, 69, 75], "65693199634552": [57, 69, 75], "6180210709571838": [57, 69, 75], "12179657071828842": [57, 69, 75], "191165953874588": [57, 69, 75], "4497021436691": [57, 69, 75], "822715163230896": [57, 69, 75], "7568016648292542": [57, 69, 75], "1165061742067337": [57, 69, 75], "59048593044281": [57, 69, 75], "setislong": 57, "camembertembed": 58, "tasti": 58, "french": [58, 82, 115, 124], "loui": 58, "martin": 58, "muller": 58, "pedro": 58, "javier": 58, "ortiz": 58, "su\u00e1rez": 58, "yoann": 58, "dupont": 58, "laurent": 58, "romari": 58, "\u00e9ric": 58, "villemont": 58, "la": [58, 115], "clergeri": 58, "djam\u00e9": 58, "seddah": 58, "beno\u00eet": 58, "sagot": 58, "facebook": [58, 60, 74, 75, 112], "138gb": 58, "camembert_bas": 58, "camembertembeddingstestspec": 58, "co": [58, 82], "ubiquit": 58, "despit": [58, 112], "most": [58, 61, 67, 82, 97, 112, 113, 115, 116], "concaten": [58, 132], "except": [58, 92, 97, 130], "investig": [58, 61, 71], "feasibl": 58, "monolingu": [58, 74, 75], "crawl": [58, 112, 116], "prefer": [58, 79, 138], "wikipedia": [58, 84, 113], "surprisingli": [58, 71], "4gb": 58, "those": [58, 79, 98, 189, 190], "larger": [58, 61, 68, 69, 112, 113, 115, 116], "130": 58, "gb": 58, "reach": [58, 82, 113, 132], "four": [58, 108, 132, 147], "un": [58, 84], "08442357927560806": 58, "12863239645957947": 58, "03835778683423996": 58, "200479581952": 58, "048462312668561935": 58, "12637358903884888": 58, "27429091930389404": 58, "07516729831": 58, "02690504491329193": 58, "12104076147079468": 58, "012526623904705048": 58, "031543646007": 58, "05877285450696945": 58, "08773420006036758": 58, "06381352990865707": 58, "122621834278": 58, "chunkembed": [59, 136], "wordembed": [59, 70, 73, 97, 136, 162], "chunker": [59, 80, 162], "ngramgener": [59, 92], "nerconvert": [59, 95, 96, 97, 169, 185], "poolingstrategi": [59, 70], "aggreg": [59, 70], "sum": [59, 64, 70], "skipoov": 59, "discard": [59, 99], "oov": 59, "ngram": [59, 92, 112, 113, 116], "setn": [59, 92], "wordembeddingsmodel": [59, 70, 73, 79, 96, 97, 98, 136], "setpoolingstrategi": [59, 70], "55661": 59, "42829502": 59, "86661": 59, "409785": 59, "06316501": 59, "120775": 59, "0732005": 59, "40674996": 59, "22938299": 59, "50597": 59, "288195": 59, "555655": 59, "465145": 59, "140118": 59, "17417": 59, "095253006": 59, "0530925": 59, "218465": 59, "714395": 59, "79860497": 59, "0129999": 59, "139705": 59, "177955": 59, "1887775": 59, "45545": 59, "20030999": 59, "461557": 59, "07891501": 59, "strategi": [59, 70, 87, 90, 107, 119, 155], "setskipoov": 59, "debertaembed": 60, "decod": [60, 67, 112, 113, 115, 116], "enhanc": [60, 111, 112], "disentangl": 60, "pengcheng": 60, "xiaodong": 60, "jianfeng": 60, "gao": 60, "weizhu": 60, "chen": [60, 68, 69], "2018": [60, 68, 69], "half": [60, 82], "deberta_v3_bas": 60, "microsoft": [60, 63, 115], "www": 60, "blog": 60, "human": [60, 82], "superglu": 60, "progress": [60, 108, 129], "significantli": [60, 64, 68, 69, 74, 75, 82], "novel": [60, 76, 82, 112], "mechan": [60, 67], "weight": [60, 64, 82, 96, 98, 119], "among": 60, "matric": 60, "second": [60, 64, 90, 107, 124, 129, 189], "mnli": 60, "9": [60, 74, 75, 92, 188, 193, 194], "90": 60, "91": 60, "88": 60, "made": [60, 71, 185], "publicli": [60, 74, 75], "distilbertembed": 61, "fast": [61, 111, 115, 143, 193], "cheap": 61, "distil": 61, "40": [61, 63, 98, 115], "uncas": 61, "preserv": [61, 95, 129, 148], "95": 61, "measur": [61, 68, 69, 112, 169], "distilbert_base_cas": 61, "doesn": [61, 68], "token_type_id": [61, 68], "indic": [61, 68, 129, 132], "belong": [61, 68], "separ": [61, 68, 90, 92, 107, 108, 121, 130, 132, 137, 161, 175, 187], "sep_token": [61, 68], "sep": 61, "position_id": 61, "ad": [61, 64, 119], "though": [61, 82], "know": [61, 115, 145], "cheaper": 61, "lighter": 61, "preval": 61, "oper": [61, 67, 119, 128, 188], "constrain": 61, "budget": 61, "counterpart": 61, "leverag": [61, 169, 185], "reduc": [61, 121, 122, 148], "retain": 61, "97": [61, 87, 89, 132], "being": [61, 97, 102, 112, 115, 116], "tripl": [61, 79], "cosin": 61, "distanc": [61, 117, 119, 121, 122], "devic": 61, "proof": 61, "concept": [61, 190], "experi": [61, 76, 112, 169, 186], "studi": [61, 68, 69, 112, 116], "1127224713563919": 61, "1982710212469101": 61, "5360898375511169": 61, "272536993026733": 61, "35534414649009705": 61, "13215228915214539": 61, "40981462597846985": 61, "14036104083061": 61, "328085333108902": 61, "06269335001707077": 61, "017595693469047546": 61, "024373905733": 61, "15617232024669647": 61, "2967822253704071": 61, "22324979305267334": 61, "04568954557180": 61, "45411425828933716": 61, "01173491682857275": 61, "190129816532135": 61, "1178255230188369": 61, "doc2vecapproach": 62, "word2vec": [62, 65, 80], "corpu": [62, 64, 72, 82, 85, 105, 112, 116, 119, 178, 195], "algorithm": [62, 72, 82, 96, 111, 119, 121, 122], "vocabulari": [62, 72, 112, 113, 116, 119], "skip": [62, 72, 79, 119], "gram": [62, 63, 72, 82, 92, 112, 113, 116], "doc2vecmodel": 62, "vectors": [62, 72], "windows": [62, 72, 82], "numpartit": [62, 72], "partit": [62, 72, 175], "mincount": [62, 72, 119], "must": [62, 72, 85, 86, 90, 91, 102, 110, 111, 121, 122, 134, 161, 162, 169, 175], "appear": [62, 72, 119], "divid": [62, 72], "1000": [62, 72, 79, 96], "stepsiz": [62, 72], "optim": [62, 68, 69, 72, 97, 99, 108], "025": [62, 72], "maxit": [62, 72], "estim": [62, 72, 117, 125, 139, 149, 158, 168, 189], "distribut": [62, 72], "composition": [62, 72], "sherlockholm": [62, 72, 119, 195], "setvectors": [62, 72], "setwindows": [62, 72, 82], "setsteps": [62, 72], "initi": [62, 72, 119, 129, 145, 162, 175, 176, 178, 179, 185], "setnumpartit": [62, 72], "setmaxit": [62, 72], "numiter": [62, 72], "equal": [62, 72], "setse": [62, 72], "setmincount": [62, 72, 119], "doc2vec_gigaword_300": 62, "06222493574023247": [62, 72], "011579325422644615": [62, 72], "009919632226228714": [62, 72], "109361454844": [62, 72], "doc2vec_wiki": 62, "e5embed": 63, "e5": 63, "weakli": 63, "tailor": [63, 66], "e5_smal": 63, "contrast": [63, 66, 67, 86, 116], "unilm": 63, "manner": [63, 82], "weak": 63, "signal": [63, 64], "curat": 63, "ccpair": 63, "readili": 63, "strong": [63, 74, 75], "zero": [63, 73, 99, 113], "shot": [63, 99, 113], "conduct": 63, "extens": [63, 165], "56": [63, 178], "beir": 63, "mteb": 63, "bm25": 63, "baselin": [63, 71, 113], "beat": 63, "exist": [63, 64, 119, 136, 138, 169], "queri": [63, 186], "protein": 63, "femal": 63, "eat": 63, "guidelin": 63, "cdc": 63, "women": 63, "70": [63, 66], "46": [63, 180], "dai": [63, 87, 89, 119], "But": 63, "chart": [63, 169, 185], "ll": [63, 132], "marathon": 63, "check": [63, 97, 107, 119, 120, 121, 122, 143, 148, 172, 189, 194], "below": [63, 79, 194], "0190285e": 63, "005974853": 63, "072875895": 63, "007944068": 63, "026059335": 63, "0080": 63, "050514214": 63, "010061974": 63, "04340176": 63, "020937217": 63, "05170225": 63, "01157857": 63, "elmoembed": 64, "elmo": 64, "billion": [64, 113], "computation": [64, 68, 69, 76, 112, 113, 115, 116], "expens": [64, 68, 69, 76, 110, 112, 113, 115, 116, 121], "lookup": [64, 73, 76, 86, 121, 122], "acceler": [64, 76, 112, 113, 115, 116, 162], "setpoolinglay": 64, "word_emb": 64, "shape": 64, "batch_siz": 64, "max_length": 64, "lstm_outputs1": 64, "lstm": [64, 97], "lstm_outputs2": 64, "trainabl": 64, "tensor": 64, "poolinglay": 64, "contextu": [64, 112, 119], "characterist": 64, "syntax": 64, "vari": 64, "across": [64, 113], "linguist": [64, 132], "polysemi": 64, "intern": [64, 101, 102, 119, 130, 132, 146, 151, 156, 162], "bilm": 64, "six": [64, 121, 122], "textual": [64, 66], "entail": 64, "expos": 64, "crucial": 64, "mix": [64, 117, 150, 168], "semi": 64, "662458181381226e": 64, "2541114091873169": 64, "6275503039360046": 64, "5787073969841": 64, "19154725968837738": 64, "22998669743537903": 64, "2894386649131775": 64, "21524395048618": 64, "10400570929050446": 64, "12288510054349899": 64, "07056470215320587": 64, "246389418840": 64, "49932169914245605": 64, "12706467509269714": 64, "30969417095184326": 64, "2643227577209": 64, "8871506452560425": 64, "20039963722229004": 64, "0601330995559692": 64, "0348707810044": 64, "albert_embed": [65, 80], "bert_embed": [65, 80], "bert_sentence_embed": [65, 80], "camembert_embed": [65, 80], "chunk_embed": [65, 80], "deberta_embed": [65, 80], "distil_bert_embed": [65, 80], "doc2vec": [65, 80], "e5_embed": [65, 80], "elmo_embed": [65, 80], "instructor_embed": [65, 80], "longformer_embed": [65, 80], "roberta_embed": [65, 80], "roberta_sentence_embed": [65, 80], "universal_sentence_encod": [65, 80], "xlm_roberta_embed": [65, 80], "xlm_roberta_sentence_embed": [65, 80], "xlnet_embed": [65, 80], "instructorembed": 66, "instructor": 66, "finetun": [66, 67, 76], "scienc": [66, 82, 186], "financ": 66, "sota": [66, 76], "divers": [66, 71, 112, 113, 116, 186], "setinstruct": 66, "medicin": 66, "instructor_bas": 66, "summar": [66, 67, 82, 112, 113, 115, 116], "embedd": 66, "hkunlp": 66, "togeth": 66, "explain": [66, 169, 185, 192, 194], "special": [66, 119, 132, 163, 190], "330": 66, "multitask": [66, 113], "mixtur": 66, "66": [66, 98], "unseen": 66, "magnitud": [66, 121, 122], "suggest": [66, 113], "robust": 66, "chang": [66, 165], "mitig": 66, "url": 66, "io": 66, "dynam": [66, 115], "scalar": 66, "degre": 66, "freedom": 66, "horava": 66, "lifshitz": 66, "graviti": 66, "longformerembed": 67, "iz": 67, "beltagi": 67, "matthew": 67, "arman": 67, "cohan": 67, "checkpoint": 67, "mlm": 67, "096": 67, "longformer_base_4096": 67, "unabl": 67, "quadrat": 67, "linearli": 67, "easi": 67, "thousand": 67, "drop": [67, 124], "motiv": 67, "global": 67, "text8": 67, "enwik8": 67, "wikihop": 67, "triviaqa": 67, "led": [67, 68, 69, 82], "arxiv": [67, 112], "found": [67, 73, 82, 121, 128, 134, 175, 192], "18792399764060974": [67, 68], "14591649174690247": [67, 68], "20547787845134735": [67, 68], "1468472778797": [67, 68], "22845706343650818": [67, 68], "18073144555091858": [67, 68], "09725798666477203": [67, 68], "0417917296290": [67, 68], "07037967443466187": [67, 68], "14801117777824402": [67, 68], "03603338822722435": [67, 68], "17893412709": [67, 68], "08734266459941864": [67, 68], "2486150562763214": [67, 68], "009067727252840996": [67, 68], "24408400058": [67, 68], "22409197688102722": [67, 68], "4312366545200348": [67, 68], "1401449590921402": [67, 68], "356410235166549": [67, 68], "robertaembed": [68, 74], "robustli": [68, 69, 99], "yinhan": [68, 69], "myle": [68, 69, 74, 75], "ott": [68, 69, 74, 75], "naman": [68, 69, 74, 75], "goyal": [68, 69, 74, 75], "jingfei": [68, 69], "du": [68, 69, 84], "mandar": [68, 69], "joshi": [68, 69], "danqi": [68, 69], "omer": [68, 69], "levi": [68, 69], "mike": [68, 69], "lewi": [68, 69], "luke": [68, 69, 74, 75], "zettlemoy": [68, 69, 74, 75], "veselin": [68, 69, 74, 75], "stoyanov": [68, 69, 74, 75], "hyperparamet": [68, 69], "next": [68, 69, 82, 87, 89, 112, 113, 116], "mini": [68, 69], "roberta_bas": 68, "bpe": 68, "gpt": [68, 112, 113], "signific": [68, 69, 74, 75, 82, 85], "gain": [68, 69, 74, 75, 112], "care": [68, 69, 130], "comparison": [68, 69, 71, 124], "privat": [68, 69, 163], "choic": [68, 69, 90], "impact": [68, 69], "replic": [68, 69, 112], "carefulli": [68, 69], "undertrain": [68, 69], "exce": [68, 69], "highlight": [68, 69], "previous": [68, 69, 82], "overlook": [68, 69], "rais": [68, 69, 82, 92, 97, 169], "report": [68, 69, 71, 112, 169, 185], "robertasentenceembed": 69, "sent_roberta_bas": 69, "embeddingssent": 70, "22093398869037628": 70, "25130119919776917": 70, "41810303926467896": 70, "380883991718": 70, "dimension": 71, "tfhub_us": 71, "loadsp": 71, "op": 71, "lingual": [71, 74, 75, 82, 84, 115], "accur": [71, 111, 112, 121], "trade": [71, 74, 75], "tend": 71, "With": [71, 76, 82], "observ": 71, "minim": [71, 99, 115], "encourag": 71, "weat": 71, "bia": 71, "freeli": 71, "04616805538535118": 71, "022307956591248512": 71, "044395286589860916": 71, "0016493503": 71, "setloadsp": 71, "word2vecapproach": 72, "word2vecmodel": 72, "word2vec_gigaword_300": 72, "word2vec_wiki": 72, "custom": [73, 96, 97, 107, 108, 130, 162, 169], "dictionari": [73, 82, 85, 90, 96, 98, 99, 100, 110, 121, 122, 169], "setstoragepath": [73, 86], "line": [73, 77, 86, 91, 108, 110, 119, 172, 175, 178], "delimit": [73, 77, 79, 85, 90, 92, 96, 100, 110, 129, 146, 175, 178], "39658191506190343": 73, "630968081620067": 73, "5393722253731201": 73, "8428180123359783": 73, "were": [73, 97, 169, 185], "7535235923631415": 73, "9699218875629833": 73, "10397182122983872": 73, "11833962569383116": 73, "stress": 73, "0492683418305907": 73, "9415954572751959": 73, "47624463167525755": 73, "16790967216778263": 73, "induc": 73, "1535748762292387": 73, "33498936903209897": 73, "9235178224122094": 73, "1158772920395934": 73, "withcoveragecolumn": 73, "overallcoverag": 73, "writebuffers": 73, "dump": 73, "disk": [73, 189, 190], "storag": [73, 77, 86, 154, 162], "10000": 73, "readcaches": 73, "cach": [73, 112, 173], "higher": [73, 82, 111, 112, 113, 116], "random_embeddings_dim4": 73, "abov": [73, 79, 178], "setstorageref": 73, "glove_4d": 73, "setdimens": [73, 156], "patient": 73, "diagnos": 73, "diabet": 73, "9439099431037903": 73, "4707513153553009": 73, "806300163269043": 73, "16176554560661316": 73, "7966810464859009": 73, "5551124811172485": 73, "8861005902290344": 73, "28284206986427307": 73, "025029370561242104": 73, "35177749395370483": 73, "052506182342767715": 73, "1887107789516449": 73, "08617766946554184": 73, "8399239182472229": 73, "5395117998123169": 73, "7864698767662048": 73, "6599600911140442": 73, "16109347343444824": 73, "6041093468666077": 73, "8913561105728149": 73, "5955275893211365": 73, "01899011991918087": 73, "4397728443145752": 73, "8911281824111938": 73, "9840458631515503": 73, "7599489092826843": 73, "9417727589607239": 73, "8624503016471863": 73, "setwritebuffers": 73, "setreadcaches": 73, "glove_100d": [73, 97], "There": [73, 77, 79, 128, 187, 189, 190, 195], "conveni": 73, "coverag": [73, 153], "add": [73, 87, 89, 107, 112, 113, 116, 119, 130, 189], "stat": 73, "field": [73, 77, 91], "whole": [73, 172], "570580005645752": 73, "44183000922203064": 73, "7010200023651123": 73, "417129993438720": 73, "542639970779419": 73, "4147599935531616": 73, "0321999788284302": 73, "4024400115013122": 73, "2708599865436554": 73, "04400600120425224": 73, "020260000601410866": 73, "17395000159": 73, "6191999912261963": 73, "14650000631809235": 73, "08592499792575836": 73, "2629800140857": 73, "3397899866104126": 73, "20940999686717987": 73, "46347999572753906": 73, "6479200124740": 73, "embeddings_col": 73, "coverageresult": 73, "coverateresult": 73, "wordsoverallcoverag": 73, "resultdf": 73, "output_col": 73, "wordscoverag": 73, "cov_embed": 73, "loadstorag": [73, 86], "storage_ref": [73, 86], "xlmrobertaembed": 74, "alexi": [74, 75], "conneau": [74, 75], "kartikai": [74, 75], "khandelw": [74, 75], "vishrav": [74, 75], "chaudhari": [74, 75], "guillaum": [74, 75], "wenzek": [74, 75], "francisco": [74, 75, 82], "guzman": 74, "edouard": [74, 75], "grave": [74, 75], "5tb": [74, 75], "commoncrawl": [74, 75], "xlm_roberta_bas": 74, "xx": [74, 75, 84, 115], "multilingu": [74, 75, 132], "doe": [74, 82, 95, 115, 143, 145, 173, 190, 193, 194], "abl": [74, 116, 169, 188], "correct": [74, 119, 121, 122, 132], "hundr": [74, 75], "terabyt": [74, 75], "r": [74, 75, 82], "mbert": [74, 75], "xnli": [74, 75], "mlqa": [74, 75], "particularli": [74, 75, 112], "low": [74, 75, 119], "swahili": [74, 75], "urdu": [74, 75], "capac": [74, 75, 113], "dilut": [74, 75], "sacrif": [74, 75], "ri": [74, 75], "competit": [74, 75, 82], "05969233065843582": 74, "030789051204919815": 74, "04443822056055069": 74, "09564960747": 74, "038839809596538544": 74, "011712731793522835": 74, "019954433664679527": 74, "0667808502": 74, "03952755779027939": 74, "03455188870429993": 74, "019103847444057465": 74, "04311436787": 74, "09579929709434509": 74, "02494969218969345": 74, "014753809198737144": 74, "10259044915": 74, "004710011184215546": 74, "022148698568344116": 74, "011723337695002556": 74, "013356896": 74, "xlmrobertasentenceembed": 75, "guzm\u00e3": 75, "sent_xlm_roberta_bas": 75, "xlnetembed": 76, "autoregress": 76, "permut": 76, "addition": [76, 97, 105, 135, 144, 172], "emploi": 76, "xl": 76, "exhibit": 76, "involv": [76, 108], "rank": [76, 117, 119], "xlnet_large_cas": 76, "xlnet_base_cas": 76, "full": [76, 189], "zihangdai": 76, "denois": [76, 112], "autoencod": [76, 112], "corrupt": [76, 112], "neglect": 76, "suffer": 76, "discrep": 76, "pro": 76, "con": 76, "enabl": [76, 97, 121, 162], "maxim": [76, 119], "likelihood": 76, "overcom": 76, "formul": 76, "furthermor": 76, "integr": [76, 82, 115, 169, 185, 187], "idea": 76, "6287205219268799": 76, "4865287244319916": 76, "186111718416214": 76, "234187275171279": 76, "1967450380325317": 76, "2746637463569641": 76, "9481253027915955": 76, "3431355059146881": 76, "0777631998062134": 76, "092679977416992": 76, "5331977605819702": 76, "11190271377563": 76, "8349916934967041": 76, "45627787709236145": 76, "7890847325325012": 76, "028069257736": 76, "134845569729805": 76, "11672890186309814": 76, "4945235550403595": 76, "66587203741073": 76, "entityrul": 77, "entityrulerapproach": 77, "exact": [77, 86, 91], "definit": [77, 99, 175], "json": [77, 146, 169, 180], "jsonl": 77, "setpatternsresourc": 77, "might": [77, 97, 132, 194], "rule": [77, 87, 90, 110, 128, 130, 155], "person": [77, 176], "w": [77, 80, 90, 96, 100, 128, 130, 162], "winterfel": 77, "jon": 77, "snow": [77, 98, 119], "stark": 77, "eddard": 77, "patternsresourc": 77, "usestorag": 77, "rocksdb": 77, "lord": 77, "29": [77, 98, 132, 178, 180], "38": [77, 180], "setusestorag": 77, "setsentencematch": 77, "setalphabetresourc": 77, "alphabet": [77, 100], "plain": [77, 195], "entityrulermodel": 77, "entity_rul": [78, 80], "graphextract": [79, 138], "graph": [79, 97, 115, 119, 125, 138], "nerdlmodel": [79, 95, 96, 97, 98, 169, 173, 185], "store": [79, 101, 102, 146, 151, 156, 167, 172, 180, 186], "node": 79, "relev": [79, 82], "taken": 79, "implicitli": 79, "setmergeent": 79, "automat": [79, 82, 99, 115, 121, 188, 189], "setdependencyparsermodel": 79, "settypeddependencyparsermodel": 79, "setrelationshiptyp": 79, "public": [79, 173, 189], "relationshiptyp": 79, "entitytyp": 79, "explodeent": 79, "roottoken": 79, "travers": 79, "maxsentences": 79, "minsentences": 79, "mergeent": 79, "merg": [79, 86, 91], "neighbor": [79, 117], "includeedg": 79, "symbol": [79, 119, 132], "posmodel": 79, "coordin": [79, 107], "remoteloc": 79, "graphfinish": [79, 138], "rdf": [79, 138], "nertagg": [79, 96, 97, 98], "morn": [79, 138], "flight": [79, 138], "denver": [79, 138], "18": [79, 87, 89, 92, 95, 98, 143, 161, 172, 188], "path1": 79, "setentitytyp": 79, "setexplodeent": 79, "setroottoken": 79, "setmaxsentences": 79, "setminsentences": 79, "setmergeentitiesiobformat": 79, "iob": [79, 95, 96, 97], "iob2": [79, 95], "setincludeedg": 79, "setdelimit": [79, 90, 92], "setposmodel": 79, "class": [80, 154, 159, 166, 177, 184, 185, 193, 195], "classifier_dl": [80, 162], "er": [80, 162], "keyword_extract": [80, 162], "yake_keyword_extract": [80, 81], "ld_dl": [80, 162], "language_detector_dl": [80, 83], "matcher": [80, 162], "big_text_match": [80, 88], "date_match": [80, 88], "multi_date_match": [80, 88], "regex_match": [80, 88], "text_match": [80, 88], "ner_approach": [80, 93], "ner_convert": [80, 93], "ner_crf": [80, 93], "ner_dl": [80, 93], "ner_overwrit": [80, 93], "param": [80, 96, 117, 150, 151, 156, 162, 167, 168], "sentence_detector_dl": [80, 106, 115], "sentiment_detector": [80, 109], "vivekn_senti": [80, 109], "seq2seq": [80, 162], "bart_transform": [80, 114], "gpt2_transform": [80, 114], "marian_transform": [80, 114], "t5_transform": [80, 114], "spell_check": [80, 162], "context_spell_check": [80, 120], "norvig_sweet": [80, 120], "symmetric_delet": [80, 120], "chunk_token": [80, 127], "recursive_token": [80, 127], "regex_token": [80, 127], "word_segment": [80, 131], "chunk2_doc": [80, 162], "date2_chunk": [80, 162], "document_norm": [80, 162], "graph_extract": [80, 162], "lemmat": [80, 110, 124, 145, 148, 162], "n_gram_gener": [80, 162], "stemmer": [80, 124, 162], "stop_words_clean": [80, 162], "yakekeywordextract": 82, "yake": 82, "independ": [82, 121, 122, 128], "individu": [82, 119], "grow": 82, "autom": 82, "adequ": 82, "emerg": [82, 112, 116], "tool": [82, 112], "system": [82, 112, 113], "nor": 82, "thesauri": 82, "neither": 82, "corpora": [82, 86], "thu": 82, "written": [82, 115], "plethora": 82, "situat": [82, 108], "access": 82, "restrict": 82, "therefor": [82, 193], "sent": 82, "boundari": [82, 107, 108, 111, 130, 132], "detector": [82, 87, 110], "section": [82, 135, 144, 185, 187, 193], "tweakabl": 82, "upper": 82, "bound": [82, 107, 108, 111], "minngram": 82, "maxngram": 82, "occurr": [82, 155], "nkeyword": 82, "stopword": [82, 98, 124], "stop": [82, 96, 124], "campo": 82, "mangaravit": 82, "pasquali": 82, "jatowt": 82, "jorg": 82, "nune": 82, "journal": [82, 132], "elsevi": 82, "vol": 82, "509": 82, "pp": [82, 132], "257": 82, "289": 82, "collect": [82, 169, 185], "turn": [82, 148, 189], "come": [82, 95], "fly": 82, "demand": 82, "abil": [82, 112, 113], "within": [82, 105, 111, 112, 113, 130, 134], "resort": 82, "alwai": [82, 116], "solut": 82, "articl": [82, 119], "rest": [82, 95], "merit": 82, "ten": 82, "experiment": 82, "carri": 82, "twenti": 82, "setcontextchar": [82, 130], "setminngram": 82, "setnkeyword": 82, "acquir": 82, "kaggl": 82, "platform": [82, 169, 187], "host": 82, "transact": 82, "somewhat": 82, "vagu": 82, "cloud": 82, "confer": 82, "week": [82, 87, 89, 126], "announc": [82, 98], "earli": 82, "tomorrow": [82, 87, 89], "phone": 82, "founder": 82, "ceo": 82, "anthoni": 82, "goldbloom": 82, "declin": 82, "deni": 82, "acquisit": 82, "happen": 82, "rumor": 82, "million": [82, 98, 113], "scientist": 82, "ben": 82, "hamner": 82, "2010": 82, "servic": [82, 115], "got": 82, "even": [82, 116], "few": [82, 130, 178, 195], "competitor": 82, "drivendata": 82, "topcod": 82, "hackerrank": 82, "stai": 82, "ahead": 82, "nich": 82, "home": [82, 162], "bui": [82, 176], "commun": 82, "mindshar": 82, "too": [82, 110, 188], "plenti": 82, "bit": [82, 108, 194], "histori": [82, 108, 119], "earlier": 82, "month": [82, 87, 89, 178, 195], "team": [82, 115, 169, 185], "around": 82, "youtub": 82, "That": [82, 128, 169, 185, 190], "had": 82, "technologi": 82, "did": 82, "interest": 82, "kernel": 82, "On": [82, 113, 115], "analyz": [82, 111], "compani": [82, 115], "script": 82, "centric": 82, "job": [82, 134], "board": [82, 105, 178], "unclear": 82, "accord": [82, 119, 175], "crunchbas": 82, "pitchbook": 82, "launch": 82, "investor": 82, "ventur": 82, "sv": 82, "angel": 82, "levchin": 82, "naravik": 82, "chie": 82, "economist": 82, "hal": 82, "varian": 82, "khosla": 82, "yuri": 82, "milner": 82, "resulttupl": 82, "ascend": 82, "orderbi": 82, "32051516486864573": 82, "37786450577630676": 82, "39922830978423146": 82, "40224744669493756": 82, "41584827825302534": 82, "setmaxngram": 82, "setstopword": [82, 98, 124], "getstopword": 82, "loaddefaultstopword": [82, 124], "danish": [82, 124], "dutch": [82, 124], "finnish": [82, 124], "german": [82, 124, 175, 195], "hungarian": [82, 124], "italian": [82, 119, 124], "norwegian": [82, 124], "portugues": [82, 124], "russian": [82, 124], "spanish": [82, 124], "swedish": [82, 124], "turkish": [82, 124], "languagedetectordl": 84, "ld": 84, "identif": 84, "rnn": 84, "tatoeba": 84, "140": 84, "wiki": 84, "languagedetector": 84, "ld_wiki_tatoeba_cnn_21": 84, "open": [84, 130, 134, 135, 136, 144, 148, 186], "advanc": [84, 134, 148], "scala": [84, 117, 149, 150, 158, 164, 168], "program": 84, "biblioth\u00e8qu": 84, "traitement": 84, "pour": 84, "le": [84, 115], "avanc\u00e9": 84, "langag": 84, "naturel": 84, "programm": 84, "ist": 84, "ein": 84, "textverarbeitungsbibliothek": 84, "f\u00fcr": 84, "fortgeschritten": 84, "nat\u00fcrlich": 84, "sprachverarbeitung": 84, "die": 84, "programmiersprachen": 84, "und": 84, "lemma": [85, 110, 143, 172, 176, 190, 193, 194], "predefin": [85, 86, 90, 91, 110], "setdictionari": [85, 110, 121, 122], "lemmatizermodel": 85, "lemmas_smal": [85, 110], "setformcol": 85, "correspend": 85, "formcol": [85, 176], "setlemmacol": 85, "fromlemma": 85, "key_delimit": 85, "value_delimit": 85, "lemma_antbnc": 85, "bigtextmatch": [86, 91], "textmatch": [86, 91, 126], "externalresourc": [86, 91, 160], "mergeoverlap": [86, 91], "tokenizermodel": [86, 130], "trie": 86, "dolor": [86, 91], "magna": [86, 91], "aliqua": [86, 91], "sit": [86, 91], "laborum": [86, 91], "hello": [86, 91, 126, 180], "entityextractor": [86, 91, 126], "extractor": [86, 91, 126], "59": [86, 87, 89, 91], "setent": [86, 91, 94, 126], "setmergeoverlap": [86, 91], "settoken": 86, "tokenizer_model": 86, "bigtextmatchermodel": 86, "btm": 86, "textmatchermodel": [86, 91], "searchtri": 86, "datematcherutil": 87, "setinputformat": [87, 146], "setoutputformat": [87, 89], "desir": [87, 89], "yyyi": [87, 89], "mm": [87, 89, 132], "dd": [87, 89, 90], "Not": [87, 97, 145], "setreadmonthfirst": 87, "juli": 87, "5th": 87, "2015": 87, "07": 87, "05": 87, "setdefaultdaywhenmiss": 87, "miss": [87, 89, 134], "setanchordateyear": [87, 89], "anchor": [87, 89], "year": [87, 89, 113, 126, 178], "setanchordatemonth": [87, 89], "januari": [87, 89], "setanchordatedai": [87, 89], "setrelaxedfactorystrategi": 87, "matchstrategi": [87, 155], "match_first": [87, 90, 155], "search": [87, 112, 121], "relax": 87, "exhaust": 87, "1978": [87, 89], "28": [87, 89, 95, 143, 161, 172, 180, 188], "1984": [87, 89], "04": [87, 89], "02": [87, 89], "1980": [87, 89], "79": [87, 89], "31st": [87, 89], "april": [87, 89], "2008": [87, 89], "fri": [87, 89], "1997": [87, 89], "jan": [87, 89], "sun": [87, 89], "1st": [87, 89], "thursdai": [87, 89], "wednesdai": [87, 89], "todai": [87, 89, 180], "yesterdai": [87, 89], "0600h": [87, 89], "06": [87, 89], "00": [87, 89], "hour": [87, 89], "6pm": [87, 89], "23": [87, 89, 90, 98, 105, 178, 179, 180, 195], "1988": [87, 89], "31": [87, 89, 90, 98, 105, 178], "dateformat": [87, 89], "readmonthfirst": [87, 89], "defaultdaywhenmiss": [87, 89], "anchordateyear": [87, 89], "anchordatemonth": [87, 89], "anchordatedai": [87, 89], "15": [87, 180], "saw": 89, "him": 89, "me": 89, "visit": 89, "57": [89, 98], "65": [89, 98], "regexmatch": 90, "d": [90, 100, 130, 187], "1970": 90, "setrul": 90, "setexternalrul": 90, "match_al": [90, 155], "match_complet": [90, 155], "externalrul": 90, "ceremoni": 90, "setstrategi": 90, "71": 90, "short_dat": 90, "regexmatchermodel": 90, "regardless": 91, "entityvalu": 91, "buildfromtoken": 91, "27": [91, 105, 107, 178], "48": [91, 132, 180], "setentityvalu": 91, "setbuildfromtoken": 91, "null": 92, "empti": [92, 134], "enablecumul": 92, "join": [92, 105, 146, 178], "setenablecumul": 92, "nerapproach": 94, "recogn": [94, 95, 96, 97, 98, 99, 119], "setminepoch": [94, 96], "setrandomse": [94, 97, 101], "getlabelcolumn": [94, 125], "friendli": [95, 115], "whitelist": [95, 128], "setwhitelist": [95, 128], "outsid": 95, "prefix": [95, 128, 130, 169, 185], "preserveposit": [95, 129, 148], "org": [95, 96, 97, 98, 112, 132, 143, 161, 162, 172, 175, 186, 195], "14": [95, 105, 143, 147, 161, 172, 178], "ekeu": [95, 96, 97, 143, 161, 172], "36": [95, 105, 143, 161, 172, 178, 180], "baghdad": [95, 96, 97, 143, 161, 172], "37": [95, 143, 161, 172], "setpreserveposit": [95, 129, 148], "setnerhasnoschema": 95, "nercrf": 96, "nercrfapproach": [96, 97], "nercrfmodel": [96, 97], "crf": [96, 97], "2003": [96, 97, 132, 175, 195], "exclud": [96, 97], "setexternalfeatur": 96, "minepoch": [96, 97], "l2": 96, "c0": 96, "decai": [96, 97], "gradient": 96, "2250000": 96, "lossep": 96, "ep": 96, "minw": 96, "includeconfid": [96, 97], "confid": [96, 97, 99], "externalfeatur": 96, "nerdlapproach": [96, 97, 175, 195], "trainingdata": [96, 97, 108, 121, 122, 175], "readdataset": [96, 97, 105, 132, 175, 176, 178, 179, 180, 195], "conll2003": [96, 97, 175, 195], "eng": [96, 97, 175, 195], "setl2": 96, "l2valu": 96, "setc0": 96, "c0valu": 96, "setlossep": 96, "setminw": 96, "setincludeconfid": [96, 97], "verbosevalu": 96, "prerequisit": [96, 97, 98, 189], "nerdl": 97, "char": [97, 100, 108], "bilstm": 97, "tagger": [97, 178, 195], "50": [97, 98, 105, 112, 113, 180], "real": [97, 162, 169, 185], "rage": 97, "graphfold": [97, 119], "usecontrib": 97, "contrib": 97, "cell": [97, 146], "slightli": [97, 108], "includeallconfidencescor": 97, "enablememoryoptim": 97, "slow": 97, "down": [97, 189, 190], "usebestmodel": 97, "bestmodelmetr": 97, "micro": 97, "macro": 97, "setgraphfold": [97, 119, 125], "setusecontrib": 97, "setpo": 97, "setincludeallconfidencescor": 97, "setenablememoryoptim": 97, "setusebestmodel": 97, "setbestmodelmetr": 97, "nermodel": 97, "neroverwrit": 98, "setnewresult": 98, "nerword": 98, "overwritten": 98, "newnerent": 98, "lab": 98, "42": [98, 105], "45": [98, 105, 178, 180], "47": [98, 178, 180], "ner_overwritten": 98, "setnerword": 98, "setnewnerent": 98, "cardin": 98, "setreplaceent": 98, "rw": 98, "zeroshotnermodel": 99, "zeroshotn": 99, "zer_shot_n": 99, "entitydefinit": 99, "citi": 99, "town": 99, "predictionthreshold": 99, "01f": 99, "ignoreent": 99, "zero_shot_n": 99, "setentitydefinit": 99, "hellen": 99, "5328949": 99, "9360068": 99, "83294415": 99, "45366877": 99, "setpredictionthreshold": 99, "zero_shot_ner_roberta": 99, "shortcut": 99, "stem": [100, 123, 143, 172, 193, 194], "henc": 100, "pl": 100, "slangdictionari": 100, "slang": 100, "minlength": [100, 107, 108, 129, 130], "maxlength": [100, 107, 108, 129, 130], "setcleanuppattern": 100, "punctuat": [100, 107], "alphanumer": 100, "letter": [100, 113, 119, 178, 195], "za": 100, "z": [100, 130], "brother": 100, "dont": [100, 111], "setslangdictionari": 100, "setminlength": [100, 107, 108, 129, 130], "setmaxlength": [100, 107, 108, 129, 130], "normalizermodel": 100, "classifierencod": 101, "attach": [101, 102, 151, 156, 167, 169], "evaluationdlparam": 102, "setevaluationlogextend": 102, "setenableoutputlog": [102, 169, 185], "setoutputlogspath": [102, 108, 169, 185], "assum": 102, "perceptronapproach": [105, 178, 195], "member": [105, 172], "datasetpath": 105, "pierr": [105, 178], "vinken": [105, 178], "34": [105, 178, 180], "md": [105, 178], "vb": [105, 175, 178, 195], "41": [105, 107, 178, 180], "43": [105, 107, 178, 180], "dt": [105, 178, 179, 195], "49": [105, 178], "poscol": [105, 132, 175], "niter": [105, 132], "anc": [105, 178, 195], "trainingperceptrondf": 105, "trainedpo": 105, "setposcolumn": [105, 132], "cd": [105, 175, 178], "setiter": 105, "getniter": [105, 132], "pos_anc": 105, "25": [105, 107, 178, 180], "33": [105, 180], "sentencedetectorparam": 107, "ii": 107, "abbrevi": 107, "period": 107, "geo": 107, "1026": 107, "253": 107, "553": 107, "ellipsi": 107, "quotat": 107, "mark": [107, 108, 132], "exclam": 107, "breaker": 107, "pragmaticcontentformatt": 107, "custombound": [107, 108], "setcustombound": [107, 108], "usecustomboundsonli": [107, 108], "explodesent": [107, 108, 175, 176], "useabbrevi": 107, "explicitli": [107, 108, 124, 161, 189], "customboundsstrategi": 107, "prepend": [107, 134], "break": 107, "append": [107, 119, 189], "parallel": [107, 108, 143, 175, 193], "splitlength": [107, 108], "forcibli": [107, 108], "99999": [107, 108, 130], "detectlist": 107, "nhow": 107, "setcustomboundsstrategi": 107, "setuseabbrevi": 107, "setdetectlist": 107, "setusecustomboundsonli": [107, 108], "setexplodesent": [107, 108], "setsplitlength": [107, 108], "sentencedetectordl": [108, 115], "sentencedetectordlapproach": 108, "futur": [108, 112, 116], "setmodel": 108, "sentencedetectordlmodel": [108, 115], "modelarchitectur": 108, "impossiblepenultim": 108, "imposs": [108, 132], "penultim": 108, "epochsnumb": 108, "eo": 108, "stefan": 108, "schweter": 108, "sajawel": 108, "ahm": 108, "littl": [108, 194], "cover": [108, 112, 116, 132], "broken": 108, "moder": 108, "lack": 108, "easier": [108, 137, 191, 195], "polit": 108, "successor": 108, "great": 108, "respons": 108, "heritag": 108, "bequeath": 108, "nelson": 108, "mandela": 108, "setepochsnumb": 108, "model_architectur": 108, "validation_split": 108, "epochs_numb": 108, "output_logs_path": 108, "setimpossiblepenultim": 108, "impossible_penultim": 108, "sentencedl": 108, "sentencesdl": 108, "helen": 108, "total": [108, 132], "peopl": 108, "sentimentdetector": 110, "By": [110, 112, 116, 124, 129, 136, 162, 169, 185], "els": 110, "viveknsentimentapproach": [110, 111], "cool": 110, "superb": 110, "uninspir": 110, "sentimentscor": 110, "staff": 110, "restaur": 110, "nice": [110, 169, 185], "avoid": 110, "entri": [110, 135, 144, 173], "sttr": 110, "sentimentdetectormodel": 110, "sda": [110, 111], "pragmat": 110, "viveknsenti": 111, "analys": 111, "vivek": 111, "narayanan": 111, "give": 111, "transit": [111, 119], "sentimentcol": 111, "prunecorpu": 111, "unfrequ": 111, "scenario": 111, "scope": 111, "naiv": 111, "bay": 111, "vivekn": 111, "setsentimentcol": 111, "train_senti": 111, "result_senti": 111, "finish": [111, 117, 136, 138, 142, 145, 162], "final_senti": 111, "cast": [111, 133], "horribl": 111, "never": [111, 189], "go": [111, 189], "again": [111, 128], "anyon": 111, "protagonist": 111, "music": 111, "setprunecorpu": 111, "frequenc": [111, 119, 121, 122, 132], "viveknsentimentmodel": 111, "sentiment_vivekn": 111, "barttransform": 112, "bart": 112, "translat": [112, 113, 115, 116, 132], "auto": [112, 125], "handl": [112, 159, 177], "captur": 112, "past": [112, 115, 173], "incorpor": 112, "versatil": 112, "valuabl": 112, "settask": [112, 113, 116], "summari": [112, 113, 116], "distilbart_xsum_12_6": 112, "barttestspec": 112, "minoutputlength": [112, 113, 116], "maxoutputlength": [112, 113, 115, 116], "dosampl": [112, 113, 116], "sampl": [112, 113, 116], "greedi": [112, 113, 116], "temperatur": [112, 113, 116], "topk": [112, 113, 116], "highest": [112, 113, 116, 121], "beamsiz": 112, "beam": 112, "topp": [112, 113, 116], "cumul": [112, 113, 116], "kept": [112, 113, 116], "repetitionpenalti": [112, 113, 116], "repetit": [112, 113, 116], "penalti": [112, 113, 116], "norepeatngrams": [112, 113, 116], "occur": [112, 113, 116], "onc": [112, 113, 116], "ignoretokenid": [112, 113, 116], "usecach": 112, "especi": [112, 113, 115, 116], "ab": 112, "1910": 112, "13461": 112, "pytorch": 112, "fairseq": 112, "arbitrari": 112, "nois": 112, "reconstruct": [112, 148], "tranform": 112, "seen": 112, "randomli": 112, "fill": 112, "dialogu": 112, "roug": 112, "bleu": 112, "ablat": 112, "influenc": [112, 119], "setmaxoutputlength": [112, 113, 115, 116], "200": [112, 116], "rich": [112, 116], "rise": [112, 116], "methodologi": [112, 116], "landscap": [112, 116], "unifi": [112, 116], "systemat": [112, 116], "dozen": [112, 116], "insight": [112, 116], "coloss": [112, 116], "facilit": [112, 116], "setignoretokenid": [112, 113, 115, 116], "setminoutputlength": [112, 113, 116], "setdosampl": [112, 113, 116], "settemperatur": [112, 113, 116], "settopk": [112, 113, 116], "settopp": [112, 113, 116], "setrepetitionpenalti": [112, 113, 116], "ctrl": [112, 113, 116], "control": [112, 113, 115, 116, 117, 119], "setnorepeatngrams": [112, 113, 116], "setbeams": 112, "setcach": 112, "use_cach": 112, "gpt2transform": 113, "gpt2": 113, "openai": 113, "caus": [113, 130], "goal": [113, 132], "direct": 113, "10x": 113, "synthet": 113, "unpreced": 113, "prime": 113, "lengthi": 113, "benefit": 113, "suffici": 113, "learner": 113, "typic": 113, "taskspecif": 113, "webpag": [113, 186], "webtext": 113, "plu": 113, "coqa": 113, "exceed": 113, "127": 113, "fashion": 113, "5b": 113, "underfit": 113, "reflect": 113, "paragraph": [113, 119], "promis": 113, "leonardo": 113, "man": 113, "1776": 113, "came": 113, "kingdom": 113, "mariantransform": 115, "marian": 115, "free": 115, "mainli": 115, "academ": 115, "notabl": 115, "edinburgh": 115, "adam": 115, "mickiewicz": 115, "pozna\u0144": 115, "commerci": 115, "contributor": 115, "mariannmt": 115, "engin": [115, 126], "behind": 115, "deploi": [115, 186], "opus_mt_en_fr": 115, "langid": 115, "maxinputlength": 115, "differenti": 115, "toolkit": 115, "setmaxinputlength": 115, "capit": [115, 119], "franc": 115, "quell": 115, "capital": 115, "devrait": 115, "savoir": 115, "fran\u00e7ai": 115, "setlangid": 115, "t5transform": 116, "t5": 116, "reconsid": 116, "hyper": 116, "t5_small": 116, "documentsimilarityrank": 117, "documentsimilarityrankerapproach": 117, "py": [117, 149, 150, 158, 164, 168], "setsimilaritymethod": 117, "neighbour": 117, "brp": 117, "bucket": 117, "euclidean": 117, "setnumberofneighbour": 117, "setbucketlength": 117, "hash": 117, "setnumhasht": 117, "setvisibledist": 117, "visibl": 117, "setidentityrank": 117, "ident": 117, "inclus": 117, "debug": 117, "documentsimilarityrankermodel": 117, "subclass": [117, 150, 164, 168], "inherit": [117, 150, 168], "ins": [117, 150, 168], "uid": [117, 150, 168], "documentsimilarityrankerfinish": 117, "ensur": [117, 164], "_java_obj": [117, 164], "setextractnearestneighbor": 117, "getinputcol": [117, 125, 136, 137, 151], "getoutputcol": [117, 133, 135, 136, 137, 141, 144, 151], "document_similarity_rank": 118, "contextspellcheck": 119, "contextspellcheckerapproach": [119, 121, 122], "noisi": 119, "spell": [119, 120, 121, 122, 143, 148, 192, 193, 194], "candid": [119, 121, 122, 130], "contextspellcheckermodel": [119, 121, 122], "error": 119, "surround": [119, 146], "edit": [119, 121, 122], "subword": 119, "checker": [119, 121, 122, 192], "languagemodelclass": 119, "lm": 119, "wordmaxdist": 119, "maxcandid": 119, "casestrategi": 119, "uppercas": 119, "errorthreshold": 119, "perplex": 119, "nlm": 119, "initialr": 119, "finalr": 119, "validationfract": 119, "datapoint": 119, "min": 119, "vocab": 119, "compoundcount": 119, "compound": 119, "classcount": 119, "tradeoff": 119, "weighteddistpath": 119, "levenshtein": [119, 121, 122], "maxwindowlen": 119, "rememb": 119, "maxsentlen": 119, "norvigsweetingapproach": [119, 121, 122, 195], "symmetricdeleteapproach": [119, 121, 122, 195], "depth": [119, 192], "explan": [119, 192], "awar": 119, "sherlock": 119, "holm": 119, "spellcheck": [119, 121, 122], "setwordmaxdist": 119, "setepoch": 119, "setlanguagemodelclass": 119, "1650": 119, "addvocabclass": 119, "_name_": 119, "extra": [119, 121, 189], "dist": 119, "setmaxcandid": 119, "setcasestrategi": 119, "seterrorthreshold": 119, "setinitialr": 119, "setfinalr": 119, "setvalidationfract": 119, "fraction": 119, "setcompoundcount": 119, "setclasscount": 119, "settradeoff": 119, "alpha": 119, "setweighteddistpath": 119, "setmaxwindowlen": 119, "setmaxsentlen": 119, "sentlen": 119, "userdist": 119, "addregexclass": 119, "spellcheck_dl": 119, "gamma": 119, "decis": 119, "correctsymbol": 119, "comparelowcas": 119, "vocabfreq": 119, "idsvocab": 119, "vocabid": 119, "usenewlin": 119, "newlin": 119, "norvigsweetingmodel": [119, 121, 122], "symmetricdeletemodel": [119, 121, 122], "doc": [119, 179, 195], "cold": 119, "dreari": 119, "countri": 119, "white": 119, "smow": 119, "setweight": 119, "setgamma": 119, "setvocabfreq": 119, "setidsvocab": 119, "setvocabid": 119, "setclass": 119, "getwordclass": 119, "updateregexclass": 119, "updat": 119, "updatevocabclass": 119, "setcorrectsymbol": 119, "setcomparelowcas": 119, "norvigsweet": 121, "norvig": 121, "bayesian": 121, "tokenpattern": 121, "sensit": [121, 124, 130], "doublevari": 121, "shortcircuit": 121, "frequencyprior": 121, "ham": 121, "intersect": 121, "prioriti": [121, 130], "wordsizeignor": 121, "dupslimit": 121, "duplic": 121, "reductlimit": 121, "attempt": 121, "vowelswaplimit": 121, "vowel": 121, "swap": 121, "corrector": 121, "gummi": [121, 122], "gummic": [121, 122], "gummier": [121, 122], "gummiest": [121, 122], "gummifer": [121, 122], "basi": [121, 122], "token_pattern": [121, 122], "setdoublevari": 121, "setshortcircuit": 121, "setfrequencyprior": 121, "symmetr": [121, 122], "delet": [121, 122, 189], "damerau": [121, 122], "transpos": [121, 122], "insert": [121, 122, 189], "spellcheck_norvig": 121, "symspel": [121, 122], "somtim": 121, "wrrite": [121, 122], "wordz": [121, 122], "erong": [121, 122], "sometim": [121, 122, 189], "wrong": [121, 122], "symmetricdelet": 122, "deriv": 122, "teach": 122, "maxeditdist": 122, "frequencythreshold": [122, 132], "deletesthreshold": 122, "patttern": 122, "setmaxeditdist": 122, "setfrequencythreshold": [122, 132], "setdeletesthreshold": 122, "spellcheck_sd": 122, "spmetim": 122, "hard": 123, "employ": 123, "stopwordsclean": [124, 136, 148], "mllib": [124, 186], "stopwordsremov": 124, "cleantoken": [124, 136, 148], "stopwords_en": 124, "jvm": [124, 162], "forth": 124, "setlocal": 124, "tfnerdlgraphbuildermodel": 125, "tfnerdlgraphbuild": 125, "sethiddenunitsnumb": 125, "assertiondlapproach": 125, "medicalnerapproach": 125, "gethiddenunitsnumb": 125, "srt": 125, "getgraphfold": 125, "setgraphfil": 125, "greaph": 125, "getgraphfil": 125, "chunktoken": 126, "flatten": 126, "artist": 126, "benezar": 126, "robert": 126, "farendel": 126, "graduat": 126, "luca": 126, "chunktokenizermodel": 126, "recursivetoken": 128, "recurs": [128, 145, 158, 162, 166], "suffix": [128, 130, 189], "infix": [128, 130], "middl": [128, 132], "she": 128, "qam": 128, "setprefix": 128, "setsuffix": 128, "setinfix": 128, "recursivetokenizermodel": 128, "regextoken": [129, 132, 190], "whitespac": [129, 132, 134], "tolowercas": [129, 132], "positionalmask": 129, "guarante": 129, "increment": 129, "trimwhitespac": 129, "flag": 129, "eventu": 129, "settolowercas": [129, 132], "nthi": 129, "setpositionalmask": 129, "settrimwhitespac": 129, "tokenizedsent": 130, "rulefactori": [130, 155], "targetpattern": 130, "grab": 130, "prefixpattern": 130, "suffixpattern": 130, "infixpattern": 130, "sub": 130, "won": 130, "exceptionspath": 130, "casesensitiveexcept": 130, "contextchar": 130, "splitpattern": 130, "splitchar": 130, "didn": 130, "jane": 130, "boyfriend": 130, "getinfixpattern": 130, "getsuffixpattern": 130, "getprefixpattern": 130, "getcontextchar": 130, "getsplitchar": 130, "settargetpattern": 130, "setprefixpattern": 130, "setsuffixpattern": 130, "setinfixpattern": 130, "addinfixpattern": 130, "setexcept": 130, "getexcept": 130, "setexceptionspath": 130, "addexcept": 130, "setcasesensitiveexcept": 130, "getcasesensitiveexcept": 130, "addcontextchar": 130, "setsplitpattern": 130, "setsplitchar": 130, "addsplitchar": 130, "piec": 130, "token_rul": 130, "wordsegment": 132, "wordsegmenterapproach": 132, "korean": 132, "japanes": 132, "chines": 132, "correspond": [132, 169], "rr": 132, "likewis": 132, "side": 132, "themselv": 132, "\u4e0a\u6d77": 132, "\u8ba1\u5212": 132, "\u5230": 132, "\u672c": 132, "\u4e16\u7eaa": 132, "\u672b": 132, "\u5b9e\u73b0": 132, "\u4eba\u5747": 132, "\u56fd\u5185": 132, "\u751f\u4ea7": 132, "\u603b\u503c": 132, "\u4e94\u5343": 132, "\u7f8e\u5143": 132, "\u4e0a": 132, "\u6d77": 132, "\u8ba1": 132, "\u5212": 132, "\u4e16": 132, "\u7eaa": 132, "\u5b9e": 132, "\u73b0": 132, "\u4eba": 132, "\u5747": 132, "\u56fd": 132, "\u5185": 132, "\u751f": 132, "\u4ea7": 132, "\u603b": 132, "ll\u503c": 132, "\u4e94": 132, "\u5343": 132, "\u7f8e": 132, "\u5143": 132, "shanghai": 132, "plan": 132, "dollar": 132, "capita": 132, "gdp": 132, "wordsegmentermodel": 132, "tip": 132, "frame": 132, "least": 132, "frequent": 132, "ambiguitythreshold": 132, "enableregextoken": 132, "xue": 132, "nianwen": 132, "volum": 132, "februari": 132, "aclweb": 132, "aclanthologi": 132, "o03": 132, "4002": 132, "chinese_train": 132, "utf8": 132, "\u5341": 132, "\u56db": 132, "\u4e0d": 132, "\u662f": 132, "setniter": 132, "trainingdataset": 132, "setambiguitythreshold": 132, "getfrequencythreshold": 132, "getambiguitythreshold": 132, "setenableregextoken": 132, "plit": 132, "words_seg": 132, "wordseg_pku": 132, "zh": 132, "\u7136\u800c": 132, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 132, "\u9019\u6a23": 132, "\u7684": 132, "\u8655\u7406": 132, "\u4e5f": 132, "\u884d\u751f": 132, "\u4e86": 132, "\u4e00\u4e9b": 132, "\u554f\u984c": 132, "prepar": [133, 135, 141, 144], "outputcol": [133, 135, 136, 137, 138, 141, 144], "inferschema": 133, "tmp": [133, 141, 162, 185], "librispeech_asr_dummy_clean_audio_array_parquet": 133, "float_arrai": 133, "chunkcol": 134, "stringtyp": 134, "setisarrai": 134, "startcol": 134, "startcolbytokenindex": 134, "isarrai": 134, "failonmiss": 134, "fail": 134, "chunkassembl": 134, "setchunkcol": 134, "setstartcol": 134, "setstartcolbytokenindex": 134, "setfailonmiss": 134, "disabl": [135, 144], "idcol": [135, 144], "metadatacol": [135, 144], "cleanupmod": [135, 144], "cleanup": [135, 144], "inplac": [135, 144], "inplace_ful": [135, 144], "shrink_ful": [135, 144], "each_ful": [135, 144], "delete_ful": [135, 144], "setidcol": [135, 144], "setmetadatacol": [135, 144], "usabl": 136, "lda": 136, "forest": 136, "featurecol": 136, "cleanannot": [136, 137, 138], "outputasvector": 136, "gloveembed": 136, "finished_sentence_embed": 136, "resultwiths": 136, "1619900017976761": 136, "045552998781204224": 136, "03229299932718277": 136, "685609996318": 136, "42416998744010925": 136, "1378999948501587": 136, "5717899799346924": 136, "5078899860382": 136, "08621499687433243": 136, "15772999823093414": 136, "06067200005054474": 136, "395359992980": 136, "4970499873161316": 136, "7164199948310852": 136, "40119001269340515": 136, "05761000141501": 136, "08170200139284134": 136, "7159299850463867": 136, "20677000284194946": 136, "0295659992843": 136, "valuesplitsymbol": 137, "annotationsplitsymbol": 137, "includemetadata": 137, "outputasarrai": [137, 138], "parseembeddingsvector": 137, "setvaluesplitsymbol": 137, "setannotationsplitsymbol": 137, "setincludemetadata": [137, 190], "setoutputasarrai": [137, 138], "setparseembeddingsvector": 137, "finishedresult": 138, "hasrecursivefit": [139, 140], "java_obj": [139, 165, 168], "py4j": [139, 140, 168], "java_gatewai": [139, 140, 168], "javaobject": [139, 140, 168], "recursivepipelin": [139, 140, 145, 151], "hasrecursivetransform": 140, "doc2_chunk": [142, 162], "embeddings_finish": [142, 162], "graph_finish": [142, 162], "has_recursive_fit": [142, 162], "has_recursive_transform": [142, 162], "light_pipelin": [142, 162], "recursive_pipelin": [142, 162], "token2_chunk": [142, 162], "token_assembl": [142, 162], "lightpipelin": [143, 172, 193], "parse_embed": [143, 172], "execut": [143, 189, 193], "hold": [143, 193], "principl": [143, 193], "everyth": [143, 193, 194], "fullannot": [143, 172], "happi": [143, 188, 190, 193, 194], "prp": [143, 176, 178, 188, 193, 194, 195], "rb": [143, 178, 188, 193, 194, 195], "optional_target": [143, 172], "explain_document_pipelin": [143, 161, 172, 188, 193, 194], "dict_kei": [143, 172], "fullannotateimag": [143, 172], "path_to_imag": [143, 172], "setignoreunsupport": 143, "unsupport": 143, "annotatormodel": [143, 150, 173], "getignoreunsupport": 143, "text2": 144, "document1": 144, "document2": 144, "arg": [145, 165], "kwarg": 145, "decid": 145, "advantag": 145, "behav": 145, "exactli": 145, "intent": 145, "recursivepipelinemodel": 145, "pipeline_model": [145, 169, 185], "intend": 145, "tab": [146, 169, 185], "escap": 146, "quot": 146, "inputformat": 146, "csvdelimit": 146, "defailt": 146, "comma": 146, "escapecsvdelimit": 146, "table_csv": 146, "csv_data": 146, "input_format": 146, "setcsvdelimit": 146, "setescapecsvdelimit": 146, "token2chunk": 147, "17": [147, 178, 180], "tokenassembl": 148, "cleantext": 148, "opensourc": 148, "annotatorapproach": [149, 158, 169], "annotatorproperti": 151, "setlazyannot": 151, "lazili": 151, "getlazyannot": 151, "annotator_approach": [154, 162], "annotator_model": [154, 162], "annotator_properti": [154, 162], "coverage_result": [154, 162], "match_strategi": [154, 162], "recursive_annotator_approach": [154, 162], "regard": 155, "constant": [155, 157], "hasembeddingsproperti": 156, "getdimens": 156, "recursiveannotatorapproach": 158, "fo": 160, "assist": 161, "map_annot": 161, "f": [161, 169, 185], "output_typ": 161, "udf": 161, "userdefinedfunct": 161, "def": 161, "nnp_token": 161, "lambda": 161, "alia": 161, "epeu": 161, "map_annotations_arrai": 161, "map_annotations_strict": 161, "map_annotations_col": 161, "output_column": 161, "annotatyon_typ": 161, "chunks_df": 161, "pos_chunk": 161, "vbz": [161, 175, 195], "filter_by_annotations_col": 161, "filter_po": 161, "explode_annotations_col": 161, "annotator_java_ml": [162, 166], "annotator_transform": [162, 166], "extended_java_wrapp": [162, 166], "params_getters_sett": [162, 166], "comet": [162, 170, 187], "pretrained_pipelin": [162, 171], "resource_download": [162, 171], "pub_tat": [162, 177], "annotation_audio": 162, "annotation_imag": 162, "apple_silicon": 162, "aarch64": 162, "cache_fold": 162, "log_fold": 162, "cluster_tmp_dir": 162, "real_time_output": 162, "output_level": 162, "correctli": 162, "maco": 162, "linux": 162, "alloc": 162, "directori": [162, 173, 185], "cache_pretrain": 162, "temporarili": 162, "unpack": 162, "hadoop": 162, "dir": 162, "s3": [162, 173], "hdf": 162, "dbf": 162, "annotator_log": 162, "annotatorjavamlread": 163, "mixin": 163, "javamlread": 163, "classmethod": 163, "mlreader": 163, "clazz": 163, "rl": 163, "javaparam": 163, "annotatortransform": 164, "javawrapp": 165, "extendedjavawrapp": 165, "new_java_arrai": 165, "pylist": 165, "java_class": 165, "todo": 165, "paramsgetterssett": 167, "getparamvalu": 167, "paramnam": 167, "setparamvalu": 167, "recursiveestim": 168, "overrid": 168, "recursivetransform": 168, "cometlogg": [169, 185], "workspac": 169, "project_nam": [169, 185], "comet_mod": [169, 185], "experiment_id": 169, "experiment_kwarg": 169, "logger": [169, 185], "meta": [169, 187], "practition": [169, 185], "reliabl": [169, 185], "streamlin": [169, 185], "lifecycl": [169, 185, 187], "track": [169, 185, 186], "reproduc": [169, 185, 186], "outputlogpath": [169, 185], "onlin": [169, 185], "reus": 169, "importerror": 169, "output_log_path": [169, 185], "embd": [169, 185], "setshuffleperepoch": [169, 185], "logdir": [169, 185], "interfac": [169, 185, 193], "attribut": 169, "comet_ml": [169, 185], "log_pipeline_paramet": [169, 185], "log_visu": [169, 185], "html": [169, 185], "viz": [169, 185], "upload": 169, "colum": [169, 185], "ner_chunk": [169, 185], "sparknlp_displai": [169, 185], "nervisu": [169, 185], "idx": [169, 185], "enumer": [169, 185], "label_col": [169, 185], "document_col": [169, 185], "return_html": [169, 185], "log_metr": [169, 185], "sklearn": [169, 185], "preprocess": [169, 185], "multilabelbinar": [169, 185], "classification_report": [169, 185], "preds_df": [169, 185], "topanda": [169, 185], "mlb": [169, 185], "y_true": [169, 185], "fit_transform": [169, 185], "y_pred": [169, 185], "output_dict": [169, 185], "log_paramet": 169, "log_completed_run": 169, "log_file_path": 169, "complet": [169, 186, 189], "log_asset": 169, "asset_path": 169, "asset": 169, "log_asset_data": 169, "interv": 169, "refresh": 169, "outstand": 169, "disk_loc": 172, "fulli": 172, "light_model": 172, "gather": 172, "langaug": 172, "resourcedownload": [173, 189, 194], "showpublicmodel": [173, 189], "onto_100": 173, "onto_300": 173, "ner_dl_bert": 173, "similarli": 173, "showpublicpipelin": [173, 194], "check_spel": [173, 194], "match_datetim": [173, 194], "downloadmodel": 173, "reader": 173, "j_dwn": 173, "pythonresourcedownload": 173, "downloadmodeldirectli": 173, "unzip": 173, "downloadpipelin": 173, "clearcach": 173, "clear": 173, "argument": 173, "filer": 173, "showuncategorizedresourc": 173, "yet": 173, "showavailableannot": 173, "documentcol": [175, 176], "sentencecol": [175, 176], "tokencol": 175, "conlllabelindex": 175, "conllposindex": 175, "conlldocidcol": 175, "doc_id": [175, 179], "textcol": [175, 176], "labelcol": 175, "includedocid": 175, "docstart": [175, 195], "eu": [175, 195], "np": [175, 195], "reject": [175, 195], "vp": [175, 195], "misc": [175, 195], "boycott": [175, 195], "british": [175, 195], "lamb": [175, 195], "blackburn": 175, "brussel": 175, "1996": 175, "08": 175, "storage_level": 175, "storagelevel": 175, "disk_onli": 175, "lift": 175, "persist": 175, "uposcol": 176, "upo": 176, "xposcol": 176, "xpo": 176, "lemmacol": 176, "sent_id": 176, "sell": 176, "pron": 176, "nom": 176, "plur": 176, "_": 176, "tens": 176, "conj": 176, "cc": 176, "obj": 176, "spaceaft": 176, "No": [176, 188], "punct": 176, "conllufil": [176, 195], "conlldataset": [176, 195], "morph": 176, "Into": 176, "googleo": 176, "sconj": 176, "propn": 176, "adp": 176, "wp": 176, "vbd": [176, 178, 195], "ago": [178, 195], "receiv": [178, 195], "posdf": 178, "61": 178, "67": [178, 179, 195], "nonexecut": 178, "69": 178, "76": 178, "director": 178, "78": 178, "81": 178, "84": 178, "outputposcol": 178, "outputdocumentcol": 178, "outputtextcol": 178, "pubtat": [179, 192], "medic": [179, 195], "titl": [179, 195], "medment": [179, 195], "25763772": [179, 195], "dctn4": [179, 195], "t116": [179, 195], "t123": [179, 195], "c4308010": [179, 195], "63": [179, 195], "chronic": [179, 195], "pseudomona": [179, 195], "aeruginosa": [179, 195], "infect": [179, 195], "t047": [179, 195], "c0854135": [179, 195], "82": [179, 195], "cystic": [179, 195], "fibrosi": [179, 195], "c0010674": [179, 195], "120": [179, 195], "pa": [179, 195], "124": [179, 195], "139": [179, 195], "pubtatorfil": 179, "corpus_pubtator_sampl": 179, "pubtatordataset": 179, "finished_token": [179, 190], "finished_po": 179, "finished_n": 179, "finished_token_metadata": 179, "finished_pos_metadata": 179, "finished_label_metadata": 179, "mo": 179, "ispaddedtoken": 179, "pad": 179, "spacytoannot": 180, "token_spac": 180, "sentence_end": 180, "spaci": 180, "multi_doc_token": 180, "went": 180, "night": 180, "bought": 180, "bread": 180, "54": 180, "overview": [184, 192], "workflow": 185, "dedic": 185, "account": 185, "inspect": 185, "init": 185, "sparknlp_experi": 185, "offline_directori": 185, "later": 185, "nativ": 186, "record": 186, "registri": 186, "central": 186, "send": 187, "messag": 187, "mlflow": 187, "content": [188, 194], "clearli": 188, "explain_document_ml": [188, 193, 194], "approx": [188, 193, 194], "mb": [188, 193, 194], "ok": [188, 193, 194], "spearhead": 189, "produc": 189, "declar": 189, "accordingli": 189, "extra_loc": 189, "offer": [189, 191, 194], "classifierdl_use_trec50": 189, "classifierdl_use_spam": 189, "column_nam": 189, "preced": 189, "interchang": 190, "anoth": 190, "road": 190, "proce": 190, "At": 190, "sens": 194, "constantli": 194, "server": 194, "train_po": 195, "training_conl": 195, "train_corpu": 195, "withcolumnrenam": 195, "trainingpubtatordf": 195, "corpus_pubt": 195}, "objects": {"": [[162, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [80, 0, 0, "-", "annotator"], [142, 0, 0, "-", "base"], [154, 0, 0, "-", "common"], [161, 0, 0, "-", "functions"], [166, 0, 0, "-", "internal"], [170, 0, 0, "-", "logging"], [171, 0, 0, "-", "pretrained"], [162, 3, 1, "", "start"], [177, 0, 0, "-", "training"], [182, 0, 0, "-", "upload_to_hub"], [183, 0, 0, "-", "util"], [162, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [8, 0, 0, "-", "chunk2_doc"], [9, 0, 0, "-", "chunker"], [28, 0, 0, "-", "classifier_dl"], [44, 0, 0, "-", "coref"], [47, 0, 0, "-", "cv"], [50, 0, 0, "-", "date2_chunk"], [52, 0, 0, "-", "dependency"], [54, 0, 0, "-", "document_normalizer"], [65, 0, 0, "-", "embeddings"], [78, 0, 0, "-", "er"], [79, 0, 0, "-", "graph_extraction"], [81, 0, 0, "-", "keyword_extraction"], [83, 0, 0, "-", "ld_dl"], [85, 0, 0, "-", "lemmatizer"], [88, 0, 0, "-", "matcher"], [92, 0, 0, "-", "n_gram_generator"], [93, 0, 0, "-", "ner"], [100, 0, 0, "-", "normalizer"], [103, 0, 0, "-", "param"], [104, 0, 0, "-", "pos"], [106, 0, 0, "-", "sentence"], [109, 0, 0, "-", "sentiment"], [114, 0, 0, "-", "seq2seq"], [118, 0, 0, "-", "similarity"], [120, 0, 0, "-", "spell_check"], [123, 0, 0, "-", "stemmer"], [124, 0, 0, "-", "stop_words_cleaner"], [125, 0, 0, "-", "tf_ner_dl_graph_builder"], [127, 0, 0, "-", "token"], [131, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.chunk2_doc": [[8, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[9, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[9, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[10, 0, 0, "-", "albert_for_question_answering"], [11, 0, 0, "-", "albert_for_sequence_classification"], [12, 0, 0, "-", "albert_for_token_classification"], [13, 0, 0, "-", "bert_for_question_answering"], [14, 0, 0, "-", "bert_for_sequence_classification"], [15, 0, 0, "-", "bert_for_token_classification"], [16, 0, 0, "-", "bert_for_zero_shot_classification"], [17, 0, 0, "-", "camembert_for_question_answering"], [18, 0, 0, "-", "camembert_for_sequence_classification"], [19, 0, 0, "-", "camembert_for_token_classification"], [20, 0, 0, "-", "classifier_dl"], [21, 0, 0, "-", "deberta_for_question_answering"], [22, 0, 0, "-", "deberta_for_sequence_classification"], [23, 0, 0, "-", "deberta_for_token_classification"], [24, 0, 0, "-", "distil_bert_for_question_answering"], [25, 0, 0, "-", "distil_bert_for_sequence_classification"], [26, 0, 0, "-", "distil_bert_for_token_classification"], [27, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [29, 0, 0, "-", "longformer_for_question_answering"], [30, 0, 0, "-", "longformer_for_sequence_classification"], [31, 0, 0, "-", "longformer_for_token_classification"], [32, 0, 0, "-", "multi_classifier_dl"], [33, 0, 0, "-", "roberta_bert_for_zero_shot_classification"], [34, 0, 0, "-", "roberta_for_question_answering"], [35, 0, 0, "-", "roberta_for_sequence_classification"], [36, 0, 0, "-", "roberta_for_token_classification"], [37, 0, 0, "-", "sentiment_dl"], [38, 0, 0, "-", "tapas_for_question_answering"], [39, 0, 0, "-", "xlm_roberta_for_question_answering"], [40, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [41, 0, 0, "-", "xlm_roberta_for_token_classification"], [42, 0, 0, "-", "xlnet_for_sequence_classification"], [43, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[10, 2, 1, "", "loadSavedModel"], [10, 2, 1, "", "pretrained"], [10, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[11, 2, 1, "", "getClasses"], [11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setCoalesceSentences"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, 1, 1, "", "ClassifierDLApproach"], [20, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[20, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setCoalesceSentences"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setCoalesceSentences"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, 1, 1, "", "MultiClassifierDLApproach"], [32, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[32, 2, 1, "", "setThreshold"], [32, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"], [33, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[35, 2, 1, "", "getClasses"], [35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setCoalesceSentences"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setConfigProtoBytes"], [36, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, 1, 1, "", "SentimentDLApproach"], [37, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[37, 2, 1, "", "setDropout"], [37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setCoalesceSentences"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[41, 2, 1, "", "getClasses"], [41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[42, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[43, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[45, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[45, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setConfigProtoBytes"], [45, 2, 1, "", "setMaxSegmentLength"], [45, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[46, 0, 0, "-", "convnext_for_image_classification"], [48, 0, 0, "-", "swin_for_image_classification"], [49, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[46, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"], [46, 2, 1, "", "setCropPct"], [46, 2, 1, "", "setDoRescale"], [46, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[48, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[48, 2, 1, "", "getClasses"], [48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setDoRescale"], [48, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.vit_for_image_classification": [[49, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[50, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[50, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[51, 0, 0, "-", "dependency_parser"], [53, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[51, 1, 1, "", "DependencyParserApproach"], [51, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[51, 2, 1, "", "setConllU"], [51, 2, 1, "", "setDependencyTreeBank"], [51, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[51, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[53, 1, 1, "", "TypedDependencyParserApproach"], [53, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[53, 2, 1, "", "setConll2009"], [53, 2, 1, "", "setConllU"], [53, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[53, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[54, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[54, 2, 1, "", "setAction"], [54, 2, 1, "", "setEncoding"], [54, 2, 1, "", "setLowercase"], [54, 2, 1, "", "setPatterns"], [54, 2, 1, "", "setPolicy"], [54, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[55, 0, 0, "-", "albert_embeddings"], [56, 0, 0, "-", "bert_embeddings"], [57, 0, 0, "-", "bert_sentence_embeddings"], [58, 0, 0, "-", "camembert_embeddings"], [59, 0, 0, "-", "chunk_embeddings"], [60, 0, 0, "-", "deberta_embeddings"], [61, 0, 0, "-", "distil_bert_embeddings"], [62, 0, 0, "-", "doc2vec"], [63, 0, 0, "-", "e5_embeddings"], [64, 0, 0, "-", "elmo_embeddings"], [66, 0, 0, "-", "instructor_embeddings"], [67, 0, 0, "-", "longformer_embeddings"], [68, 0, 0, "-", "roberta_embeddings"], [69, 0, 0, "-", "roberta_sentence_embeddings"], [70, 0, 0, "-", "sentence_embeddings"], [71, 0, 0, "-", "universal_sentence_encoder"], [72, 0, 0, "-", "word2vec"], [73, 0, 0, "-", "word_embeddings"], [74, 0, 0, "-", "xlm_roberta_embeddings"], [75, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [76, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[55, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[56, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[57, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[58, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[59, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[59, 2, 1, "", "setPoolingStrategy"], [59, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[60, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[61, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[62, 1, 1, "", "Doc2VecApproach"], [62, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[62, 2, 1, "", "setMaxIter"], [62, 2, 1, "", "setMaxSentenceLength"], [62, 2, 1, "", "setMinCount"], [62, 2, 1, "", "setNumPartitions"], [62, 2, 1, "", "setSeed"], [62, 2, 1, "", "setStepSize"], [62, 2, 1, "", "setVectorSize"], [62, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[63, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[64, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setBatchSize"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[66, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"], [66, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[67, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[68, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[69, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[70, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[70, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[71, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"], [71, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[72, 1, 1, "", "Word2VecApproach"], [72, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[72, 2, 1, "", "setMaxIter"], [72, 2, 1, "", "setMaxSentenceLength"], [72, 2, 1, "", "setMinCount"], [72, 2, 1, "", "setNumPartitions"], [72, 2, 1, "", "setSeed"], [72, 2, 1, "", "setStepSize"], [72, 2, 1, "", "setVectorSize"], [72, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[73, 1, 1, "", "WordEmbeddings"], [73, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[73, 2, 1, "", "setReadCacheSize"], [73, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[73, 2, 1, "", "loadStorage"], [73, 2, 1, "", "overallCoverage"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setReadCacheSize"], [73, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[74, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[75, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[76, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[77, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[77, 1, 1, "", "EntityRulerApproach"], [77, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[77, 2, 1, "", "setAlphabetResource"], [77, 2, 1, "", "setPatternsResource"], [77, 2, 1, "", "setSentenceMatch"], [77, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[79, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[79, 2, 1, "", "setDelimiter"], [79, 2, 1, "", "setDependencyParserModel"], [79, 2, 1, "", "setEntityTypes"], [79, 2, 1, "", "setExplodeEntities"], [79, 2, 1, "", "setIncludeEdges"], [79, 2, 1, "", "setMaxSentenceSize"], [79, 2, 1, "", "setMergeEntities"], [79, 2, 1, "", "setMergeEntitiesIOBFormat"], [79, 2, 1, "", "setMinSentenceSize"], [79, 2, 1, "", "setPosModel"], [79, 2, 1, "", "setRelationshipTypes"], [79, 2, 1, "", "setRootTokens"], [79, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[82, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[82, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[82, 2, 1, "", "getStopWords"], [82, 2, 1, "", "loadDefaultStopWords"], [82, 2, 1, "", "setMaxNGrams"], [82, 2, 1, "", "setMinNGrams"], [82, 2, 1, "", "setNKeywords"], [82, 2, 1, "", "setStopWords"], [82, 2, 1, "", "setThreshold"], [82, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[84, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[84, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setCoalesceSentences"], [84, 2, 1, "", "setConfigProtoBytes"], [84, 2, 1, "", "setThreshold"], [84, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[85, 1, 1, "", "Lemmatizer"], [85, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[85, 2, 1, "", "setDictionary"], [85, 2, 1, "", "setFormCol"], [85, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[85, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[86, 0, 0, "-", "big_text_matcher"], [87, 0, 0, "-", "date_matcher"], [89, 0, 0, "-", "multi_date_matcher"], [90, 0, 0, "-", "regex_matcher"], [91, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[86, 1, 1, "", "BigTextMatcher"], [86, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[86, 2, 1, "", "setCaseSensitive"], [86, 2, 1, "", "setEntities"], [86, 2, 1, "", "setMergeOverlapping"], [86, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[86, 2, 1, "", "loadStorage"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setCaseSensitive"], [86, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[87, 1, 1, "", "DateMatcher"], [87, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[87, 2, 1, "", "setAnchorDateDay"], [87, 2, 1, "", "setAnchorDateMonth"], [87, 2, 1, "", "setAnchorDateYear"], [87, 2, 1, "", "setDefaultDayWhenMissing"], [87, 2, 1, "", "setInputFormats"], [87, 2, 1, "", "setOutputFormat"], [87, 2, 1, "", "setReadMonthFirst"], [87, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[89, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[90, 1, 1, "", "RegexMatcher"], [90, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[90, 2, 1, "", "setDelimiter"], [90, 2, 1, "", "setExternalRules"], [90, 2, 1, "", "setRules"], [90, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[91, 1, 1, "", "TextMatcher"], [91, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[91, 2, 1, "", "setBuildFromTokens"], [91, 2, 1, "", "setCaseSensitive"], [91, 2, 1, "", "setEntities"], [91, 2, 1, "", "setEntityValue"], [91, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setBuildFromTokens"], [91, 2, 1, "", "setEntityValue"], [91, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[92, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[92, 2, 1, "", "setDelimiter"], [92, 2, 1, "", "setEnableCumulative"], [92, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[94, 0, 0, "-", "ner_approach"], [95, 0, 0, "-", "ner_converter"], [96, 0, 0, "-", "ner_crf"], [97, 0, 0, "-", "ner_dl"], [98, 0, 0, "-", "ner_overwriter"], [99, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[94, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[94, 2, 1, "", "getLabelColumn"], [94, 2, 1, "", "setEntities"], [94, 2, 1, "", "setLabelColumn"], [94, 2, 1, "", "setMaxEpochs"], [94, 2, 1, "", "setMinEpochs"], [94, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[95, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[95, 2, 1, "", "setNerHasNoSchema"], [95, 2, 1, "", "setPreservePosition"], [95, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[96, 1, 1, "", "NerCrfApproach"], [96, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[96, 2, 1, "", "setC0"], [96, 2, 1, "", "setExternalFeatures"], [96, 2, 1, "", "setIncludeConfidence"], [96, 2, 1, "", "setL2"], [96, 2, 1, "", "setLossEps"], [96, 2, 1, "", "setMinW"], [96, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[97, 1, 1, "", "NerDLApproach"], [97, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[97, 2, 1, "", "setBatchSize"], [97, 2, 1, "", "setBestModelMetric"], [97, 2, 1, "", "setConfigProtoBytes"], [97, 2, 1, "", "setDropout"], [97, 2, 1, "", "setEnableMemoryOptimizer"], [97, 2, 1, "", "setGraphFolder"], [97, 2, 1, "", "setIncludeAllConfidenceScores"], [97, 2, 1, "", "setIncludeConfidence"], [97, 2, 1, "", "setLr"], [97, 2, 1, "", "setPo"], [97, 2, 1, "", "setUseBestModel"], [97, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setConfigProtoBytes"], [97, 2, 1, "", "setIncludeAllConfidenceScores"], [97, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[98, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[98, 2, 1, "", "setNerWords"], [98, 2, 1, "", "setNewNerEntity"], [98, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[99, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[99, 2, 1, "", "getClasses"], [99, 2, 1, "", "load"], [99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setEntityDefinitions"], [99, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[100, 1, 1, "", "Normalizer"], [100, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[100, 2, 1, "", "setCleanupPatterns"], [100, 2, 1, "", "setLowercase"], [100, 2, 1, "", "setMaxLength"], [100, 2, 1, "", "setMinLength"], [100, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.param": [[101, 0, 0, "-", "classifier_encoder"], [102, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[101, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[101, 2, 1, "", "setBatchSize"], [101, 2, 1, "", "setConfigProtoBytes"], [101, 2, 1, "", "setLabelColumn"], [101, 2, 1, "", "setLr"], [101, 2, 1, "", "setMaxEpochs"], [101, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[102, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[102, 2, 1, "", "setEnableOutputLogs"], [102, 2, 1, "", "setEvaluationLogExtended"], [102, 2, 1, "", "setOutputLogsPath"], [102, 2, 1, "", "setTestDataset"], [102, 2, 1, "", "setValidationSplit"], [102, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[105, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[105, 1, 1, "", "PerceptronApproach"], [105, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[105, 2, 1, "", "getNIterations"], [105, 2, 1, "", "setIterations"], [105, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[105, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[107, 0, 0, "-", "sentence_detector"], [108, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[107, 1, 1, "", "SentenceDetector"], [107, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[107, 2, 1, "", "setCustomBounds"], [107, 2, 1, "", "setCustomBoundsStrategy"], [107, 2, 1, "", "setDetectLists"], [107, 2, 1, "", "setExplodeSentences"], [107, 2, 1, "", "setMaxLength"], [107, 2, 1, "", "setMinLength"], [107, 2, 1, "", "setSplitLength"], [107, 2, 1, "", "setUseAbbreviations"], [107, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[108, 1, 1, "", "SentenceDetectorDLApproach"], [108, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[108, 2, 1, "", "setEpochsNumber"], [108, 2, 1, "", "setExplodeSentences"], [108, 2, 1, "", "setImpossiblePenultimates"], [108, 2, 1, "", "setModel"], [108, 2, 1, "", "setOutputLogsPath"], [108, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[108, 2, 1, "", "pretrained"], [108, 2, 1, "", "setCustomBounds"], [108, 2, 1, "", "setExplodeSentences"], [108, 2, 1, "", "setImpossiblePenultimates"], [108, 2, 1, "", "setMaxLength"], [108, 2, 1, "", "setMinLength"], [108, 2, 1, "", "setModel"], [108, 2, 1, "", "setSplitLength"], [108, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[110, 0, 0, "-", "sentiment_detector"], [111, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[110, 1, 1, "", "SentimentDetector"], [110, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[110, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[111, 1, 1, "", "ViveknSentimentApproach"], [111, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[111, 2, 1, "", "setPruneCorpus"], [111, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[111, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[112, 0, 0, "-", "bart_transformer"], [113, 0, 0, "-", "gpt2_transformer"], [115, 0, 0, "-", "marian_transformer"], [116, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[112, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[112, 2, 1, "", "loadSavedModel"], [112, 2, 1, "", "pretrained"], [112, 2, 1, "", "setBeamSize"], [112, 2, 1, "", "setCache"], [112, 2, 1, "", "setConfigProtoBytes"], [112, 2, 1, "", "setDoSample"], [112, 2, 1, "", "setIgnoreTokenIds"], [112, 2, 1, "", "setMaxOutputLength"], [112, 2, 1, "", "setMinOutputLength"], [112, 2, 1, "", "setNoRepeatNgramSize"], [112, 2, 1, "", "setRepetitionPenalty"], [112, 2, 1, "", "setTask"], [112, 2, 1, "", "setTemperature"], [112, 2, 1, "", "setTopK"], [112, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[113, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[113, 2, 1, "", "loadSavedModel"], [113, 2, 1, "", "pretrained"], [113, 2, 1, "", "setConfigProtoBytes"], [113, 2, 1, "", "setDoSample"], [113, 2, 1, "", "setIgnoreTokenIds"], [113, 2, 1, "", "setMaxOutputLength"], [113, 2, 1, "", "setMinOutputLength"], [113, 2, 1, "", "setNoRepeatNgramSize"], [113, 2, 1, "", "setRepetitionPenalty"], [113, 2, 1, "", "setTask"], [113, 2, 1, "", "setTemperature"], [113, 2, 1, "", "setTopK"], [113, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[115, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[115, 2, 1, "", "loadSavedModel"], [115, 2, 1, "", "pretrained"], [115, 2, 1, "", "setConfigProtoBytes"], [115, 2, 1, "", "setIgnoreTokenIds"], [115, 2, 1, "", "setLangId"], [115, 2, 1, "", "setMaxInputLength"], [115, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[116, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[116, 2, 1, "", "loadSavedModel"], [116, 2, 1, "", "pretrained"], [116, 2, 1, "", "setConfigProtoBytes"], [116, 2, 1, "", "setDoSample"], [116, 2, 1, "", "setIgnoreTokenIds"], [116, 2, 1, "", "setMaxOutputLength"], [116, 2, 1, "", "setMinOutputLength"], [116, 2, 1, "", "setNoRepeatNgramSize"], [116, 2, 1, "", "setRepetitionPenalty"], [116, 2, 1, "", "setTask"], [116, 2, 1, "", "setTemperature"], [116, 2, 1, "", "setTopK"], [116, 2, 1, "", "setTopP"]], "sparknlp.annotator.similarity": [[117, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[117, 1, 1, "", "DocumentSimilarityRankerApproach"], [117, 1, 1, "", "DocumentSimilarityRankerFinisher"], [117, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[117, 2, 1, "", "setBucketLength"], [117, 2, 1, "", "setIdentityRanking"], [117, 2, 1, "", "setNumHashTables"], [117, 2, 1, "", "setNumberOfNeighbours"], [117, 2, 1, "", "setSimilarityMethod"], [117, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[117, 2, 1, "", "getInputCols"], [117, 2, 1, "", "getOutputCols"], [117, 2, 1, "", "setExtractNearestNeighbor"], [117, 2, 1, "", "setInputCols"], [117, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[119, 0, 0, "-", "context_spell_checker"], [121, 0, 0, "-", "norvig_sweeting"], [122, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[119, 1, 1, "", "ContextSpellCheckerApproach"], [119, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[119, 2, 1, "", "addRegexClass"], [119, 2, 1, "", "addVocabClass"], [119, 2, 1, "", "setBatchSize"], [119, 2, 1, "", "setCaseStrategy"], [119, 2, 1, "", "setClassCount"], [119, 2, 1, "", "setCompoundCount"], [119, 2, 1, "", "setConfigProtoBytes"], [119, 2, 1, "", "setEpochs"], [119, 2, 1, "", "setErrorThreshold"], [119, 2, 1, "", "setFinalRate"], [119, 2, 1, "", "setGraphFolder"], [119, 2, 1, "", "setInitialRate"], [119, 2, 1, "", "setLanguageModelClasses"], [119, 2, 1, "", "setMaxCandidates"], [119, 2, 1, "", "setMaxSentLen"], [119, 2, 1, "", "setMaxWindowLen"], [119, 2, 1, "", "setMinCount"], [119, 2, 1, "", "setTradeoff"], [119, 2, 1, "", "setValidationFraction"], [119, 2, 1, "", "setWeightedDistPath"], [119, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[119, 2, 1, "", "getWordClasses"], [119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setCaseStrategy"], [119, 2, 1, "", "setClasses"], [119, 2, 1, "", "setCompareLowcase"], [119, 2, 1, "", "setConfigProtoBytes"], [119, 2, 1, "", "setCorrectSymbols"], [119, 2, 1, "", "setErrorThreshold"], [119, 2, 1, "", "setGamma"], [119, 2, 1, "", "setIdsVocab"], [119, 2, 1, "", "setMaxCandidates"], [119, 2, 1, "", "setMaxWindowLen"], [119, 2, 1, "", "setTradeoff"], [119, 2, 1, "", "setVocabFreq"], [119, 2, 1, "", "setVocabIds"], [119, 2, 1, "", "setWeights"], [119, 2, 1, "", "setWordMaxDistance"], [119, 2, 1, "", "updateRegexClass"], [119, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[121, 1, 1, "", "NorvigSweetingApproach"], [121, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[121, 2, 1, "", "setCaseSensitive"], [121, 2, 1, "", "setDictionary"], [121, 2, 1, "", "setDoubleVariants"], [121, 2, 1, "", "setFrequencyPriority"], [121, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[121, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[122, 1, 1, "", "SymmetricDeleteApproach"], [122, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[122, 2, 1, "", "setDeletesThreshold"], [122, 2, 1, "", "setDictionary"], [122, 2, 1, "", "setFrequencyThreshold"], [122, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[122, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[123, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[124, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[124, 2, 1, "", "loadDefaultStopWords"], [124, 2, 1, "", "pretrained"], [124, 2, 1, "", "setCaseSensitive"], [124, 2, 1, "", "setLocale"], [124, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[125, 1, 1, "", "TFNerDLGraphBuilder"], [125, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[125, 2, 1, "", "getGraphFile"], [125, 2, 1, "", "getGraphFolder"], [125, 2, 1, "", "getHiddenUnitsNumber"], [125, 2, 1, "", "getInputCols"], [125, 2, 1, "", "getLabelColumn"], [125, 2, 1, "", "setGraphFile"], [125, 2, 1, "", "setGraphFolder"], [125, 2, 1, "", "setHiddenUnitsNumber"], [125, 2, 1, "", "setInputCols"], [125, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[126, 0, 0, "-", "chunk_tokenizer"], [128, 0, 0, "-", "recursive_tokenizer"], [129, 0, 0, "-", "regex_tokenizer"], [130, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[126, 1, 1, "", "ChunkTokenizer"], [126, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[128, 1, 1, "", "RecursiveTokenizer"], [128, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[128, 2, 1, "", "setInfixes"], [128, 2, 1, "", "setPrefixes"], [128, 2, 1, "", "setSuffixes"], [128, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[129, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[129, 2, 1, "", "setMaxLength"], [129, 2, 1, "", "setMinLength"], [129, 2, 1, "", "setPattern"], [129, 2, 1, "", "setPositionalMask"], [129, 2, 1, "", "setPreservePosition"], [129, 2, 1, "", "setToLowercase"], [129, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[130, 1, 1, "", "Tokenizer"], [130, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[130, 2, 1, "", "addContextChars"], [130, 2, 1, "", "addException"], [130, 2, 1, "", "addInfixPattern"], [130, 2, 1, "", "addSplitChars"], [130, 2, 1, "", "getCaseSensitiveExceptions"], [130, 2, 1, "", "getContextChars"], [130, 2, 1, "", "getExceptions"], [130, 2, 1, "", "getInfixPatterns"], [130, 2, 1, "", "getPrefixPattern"], [130, 2, 1, "", "getSplitChars"], [130, 2, 1, "", "getSuffixPattern"], [130, 2, 1, "", "setCaseSensitiveExceptions"], [130, 2, 1, "", "setContextChars"], [130, 2, 1, "", "setExceptions"], [130, 2, 1, "", "setExceptionsPath"], [130, 2, 1, "", "setInfixPatterns"], [130, 2, 1, "", "setMaxLength"], [130, 2, 1, "", "setMinLength"], [130, 2, 1, "", "setPrefixPattern"], [130, 2, 1, "", "setSplitChars"], [130, 2, 1, "", "setSplitPattern"], [130, 2, 1, "", "setSuffixPattern"], [130, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[130, 2, 1, "", "addSplitChars"], [130, 2, 1, "", "pretrained"], [130, 2, 1, "", "setSplitChars"], [130, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.ws": [[132, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[132, 1, 1, "", "WordSegmenterApproach"], [132, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[132, 2, 1, "", "getAmbiguityThreshold"], [132, 2, 1, "", "getFrequencyThreshold"], [132, 2, 1, "", "getNIterations"], [132, 2, 1, "", "setAmbiguityThreshold"], [132, 2, 1, "", "setEnableRegexTokenizer"], [132, 2, 1, "", "setFrequencyThreshold"], [132, 2, 1, "", "setNIterations"], [132, 2, 1, "", "setPattern"], [132, 2, 1, "", "setPosColumn"], [132, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setEnableRegexTokenizer"], [132, 2, 1, "", "setPattern"], [132, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[133, 0, 0, "-", "audio_assembler"], [134, 0, 0, "-", "doc2_chunk"], [135, 0, 0, "-", "document_assembler"], [136, 0, 0, "-", "embeddings_finisher"], [137, 0, 0, "-", "finisher"], [138, 0, 0, "-", "graph_finisher"], [139, 0, 0, "-", "has_recursive_fit"], [140, 0, 0, "-", "has_recursive_transform"], [141, 0, 0, "-", "image_assembler"], [143, 0, 0, "-", "light_pipeline"], [144, 0, 0, "-", "multi_document_assembler"], [145, 0, 0, "-", "recursive_pipeline"], [146, 0, 0, "-", "table_assembler"], [147, 0, 0, "-", "token2_chunk"], [148, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[133, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[133, 2, 1, "", "getOutputCol"], [133, 2, 1, "", "setInputCol"], [133, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[134, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[134, 2, 1, "", "setChunkCol"], [134, 2, 1, "", "setFailOnMissing"], [134, 2, 1, "", "setIsArray"], [134, 2, 1, "", "setLowerCase"], [134, 2, 1, "", "setStartCol"], [134, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[135, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[135, 2, 1, "", "getOutputCol"], [135, 2, 1, "", "setCleanupMode"], [135, 2, 1, "", "setIdCol"], [135, 2, 1, "", "setInputCol"], [135, 2, 1, "", "setMetadataCol"], [135, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[136, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[136, 2, 1, "", "getInputCols"], [136, 2, 1, "", "getOutputCols"], [136, 2, 1, "", "setCleanAnnotations"], [136, 2, 1, "", "setInputCols"], [136, 2, 1, "", "setOutputAsVector"], [136, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[137, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[137, 2, 1, "", "getInputCols"], [137, 2, 1, "", "getOutputCols"], [137, 2, 1, "", "setAnnotationSplitSymbol"], [137, 2, 1, "", "setCleanAnnotations"], [137, 2, 1, "", "setIncludeMetadata"], [137, 2, 1, "", "setInputCols"], [137, 2, 1, "", "setOutputAsArray"], [137, 2, 1, "", "setOutputCols"], [137, 2, 1, "", "setParseEmbeddingsVectors"], [137, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[138, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[138, 2, 1, "", "setCleanAnnotations"], [138, 2, 1, "", "setInputCol"], [138, 2, 1, "", "setOutputAsArray"], [138, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[139, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[140, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[141, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[141, 2, 1, "", "getOutputCol"], [141, 2, 1, "", "setInputCol"], [141, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[143, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[143, 2, 1, "", "annotate"], [143, 2, 1, "", "fullAnnotate"], [143, 2, 1, "", "fullAnnotateImage"], [143, 2, 1, "", "getIgnoreUnsupported"], [143, 2, 1, "", "setIgnoreUnsupported"], [143, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[144, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[144, 2, 1, "", "getOutputCols"], [144, 2, 1, "", "setCleanupMode"], [144, 2, 1, "", "setIdCol"], [144, 2, 1, "", "setInputCols"], [144, 2, 1, "", "setMetadataCol"], [144, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[145, 1, 1, "", "RecursivePipeline"], [145, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[146, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[146, 2, 1, "", "setCsvDelimiter"], [146, 2, 1, "", "setEscapeCsvDelimiter"], [146, 2, 1, "", "setInputFormat"]], "sparknlp.base.token2_chunk": [[147, 1, 1, "", "Token2Chunk"]], "sparknlp.base.token_assembler": [[148, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[148, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[149, 0, 0, "-", "annotator_approach"], [150, 0, 0, "-", "annotator_model"], [151, 0, 0, "-", "annotator_properties"], [152, 0, 0, "-", "annotator_type"], [153, 0, 0, "-", "coverage_result"], [155, 0, 0, "-", "match_strategy"], [156, 0, 0, "-", "properties"], [157, 0, 0, "-", "read_as"], [158, 0, 0, "-", "recursive_annotator_approach"], [159, 0, 0, "-", "storage"], [160, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[149, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[150, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[151, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[151, 2, 1, "", "getInputCols"], [151, 2, 1, "", "getLazyAnnotator"], [151, 2, 1, "", "getOutputCol"], [151, 2, 1, "", "setInputCols"], [151, 2, 1, "", "setLazyAnnotator"], [151, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[155, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[156, 1, 1, "", "HasEmbeddingsProperties"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[156, 2, 1, "", "getDimension"], [156, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[157, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[158, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[160, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[161, 3, 1, "", "explode_annotations_col"], [161, 3, 1, "", "filter_by_annotations_col"], [161, 3, 1, "", "map_annotations"], [161, 3, 1, "", "map_annotations_array"], [161, 3, 1, "", "map_annotations_col"], [161, 3, 1, "", "map_annotations_cols"], [161, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[163, 0, 0, "-", "annotator_java_ml"], [164, 0, 0, "-", "annotator_transformer"], [165, 0, 0, "-", "extended_java_wrapper"], [167, 0, 0, "-", "params_getters_setters"], [168, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[163, 1, 1, "", "AnnotatorJavaMLReadable"], [163, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[163, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[164, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[165, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[165, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[167, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[167, 2, 1, "", "getParamValue"], [167, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[168, 1, 1, "", "RecursiveEstimator"], [168, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[168, 2, 1, "", "fit"]], "sparknlp.logging": [[169, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[169, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[169, 2, 1, "", "end"], [169, 2, 1, "", "log_asset"], [169, 2, 1, "", "log_asset_data"], [169, 2, 1, "", "log_completed_run"], [169, 2, 1, "", "log_metrics"], [169, 2, 1, "", "log_parameters"], [169, 2, 1, "", "log_pipeline_parameters"], [169, 2, 1, "", "log_visualization"], [169, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[172, 0, 0, "-", "pretrained_pipeline"], [173, 0, 0, "-", "resource_downloader"], [174, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[172, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[172, 2, 1, "", "annotate"], [172, 2, 1, "", "fullAnnotate"], [172, 2, 1, "", "fullAnnotateImage"], [172, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[173, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[173, 2, 1, "", "clearCache"], [173, 2, 1, "", "downloadModel"], [173, 2, 1, "", "downloadModelDirectly"], [173, 2, 1, "", "downloadPipeline"], [173, 2, 1, "", "showAvailableAnnotators"], [173, 2, 1, "", "showPublicModels"], [173, 2, 1, "", "showPublicPipelines"], [173, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[175, 0, 0, "-", "conll"], [176, 0, 0, "-", "conllu"], [178, 0, 0, "-", "pos"], [179, 0, 0, "-", "pub_tator"], [180, 0, 0, "-", "spacy_to_annotation"], [181, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[175, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[175, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[176, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[176, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[178, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[178, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[179, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[179, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[180, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 190], "start": 0, "spark": [0, 1, 185, 190, 194], "nlp": [0, 1, 185, 194], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 185], "us": [0, 185, 194], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 175, 176, 178, 179, 180], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 188, 189, 190], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 160, 161, 163, 164, 165, 167, 168, 169, 172, 173, 175, 176, 178, 179, 180, 184], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 163, 164, 165, 167, 168, 169, 172, 173, 175, 176, 178, 179, 180], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7], "hubert_for_ctc": 5, "submodul": [6, 28, 44, 47, 52, 65, 78, 80, 81, 83, 88, 93, 104, 106, 109, 114, 118, 120, 127, 131, 142, 154, 162, 166, 170, 171, 177], "wav2vec2_for_ctc": 7, "chunk2_doc": 8, "chunker": 9, "classifier_dl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "albert_for_question_answ": 10, "albert_for_sequence_classif": 11, "albert_for_token_classif": 12, "bert_for_question_answ": 13, "bert_for_sequence_classif": 14, "bert_for_token_classif": 15, "bert_for_zero_shot_classif": 16, "camembert_for_question_answ": 17, "camembert_for_sequence_classif": 18, "camembert_for_token_classif": 19, "deberta_for_question_answ": 21, "deberta_for_sequence_classif": 22, "deberta_for_token_classif": 23, "distil_bert_for_question_answ": 24, "distil_bert_for_sequence_classif": 25, "distil_bert_for_token_classif": 26, "distil_bert_for_zero_shot_classif": 27, "longformer_for_question_answ": 29, "longformer_for_sequence_classif": 30, "longformer_for_token_classif": 31, "multi_classifier_dl": 32, "roberta_bert_for_zero_shot_classif": 33, "roberta_for_question_answ": 34, "roberta_for_sequence_classif": 35, "roberta_for_token_classif": 36, "sentiment_dl": 37, "tapas_for_question_answ": 38, "xlm_roberta_for_question_answ": 39, "xlm_roberta_for_sequence_classif": 40, "xlm_roberta_for_token_classif": 41, "xlnet_for_sequence_classif": 42, "xlnet_for_token_classif": 43, "coref": [44, 45], "spanbert_coref": 45, "cv": [46, 47, 48, 49], "convnext_for_image_classif": 46, "swin_for_image_classif": 48, "vit_for_image_classif": 49, "date2_chunk": 50, "depend": [51, 52, 53], "dependency_pars": 51, "typed_dependency_pars": 53, "document_norm": 54, "embed": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "albert_embed": 55, "bert_embed": 56, "bert_sentence_embed": 57, "camembert_embed": 58, "chunk_embed": 59, "deberta_embed": 60, "distil_bert_embed": 61, "doc2vec": 62, "e5_embed": 63, "elmo_embed": 64, "instructor_embed": 66, "longformer_embed": 67, "roberta_embed": 68, "roberta_sentence_embed": 69, "sentence_embed": 70, "universal_sentence_encod": 71, "word2vec": 72, "word_embed": 73, "xlm_roberta_embed": 74, "xlm_roberta_sentence_embed": 75, "xlnet_embed": 76, "er": [77, 78], "entity_rul": 77, "graph_extract": 79, "subpackag": [80, 162], "keyword_extract": [81, 82], "yake_keyword_extract": 82, "ld_dl": [83, 84], "language_detector_dl": 84, "lemmat": 85, "matcher": [86, 87, 88, 89, 90, 91], "big_text_match": 86, "date_match": 87, "multi_date_match": 89, "regex_match": 90, "text_match": 91, "n_gram_gener": 92, "ner": [93, 94, 95, 96, 97, 98, 99], "ner_approach": 94, "ner_convert": 95, "ner_crf": 96, "ner_dl": 97, "ner_overwrit": 98, "zero_shot_ner_model": 99, "normal": 100, "param": [101, 102, 103], "classifier_encod": 101, "evaluation_dl_param": 102, "po": [104, 105, 178, 195], "perceptron": 105, "sentenc": [106, 107, 108, 190], "sentence_detector": 107, "sentence_detector_dl": 108, "sentiment": [109, 110, 111], "sentiment_detector": 110, "vivekn_senti": 111, "seq2seq": [112, 113, 114, 115, 116], "bart_transform": 112, "gpt2_transform": 113, "marian_transform": 115, "t5_transform": 116, "similar": [117, 118], "document_similarity_rank": 117, "spell_check": [119, 120, 121, 122], "context_spell_check": 119, "norvig_sweet": 121, "symmetric_delet": 122, "stemmer": 123, "stop_words_clean": 124, "tf_ner_dl_graph_build": 125, "token": [126, 127, 128, 129, 130, 190], "chunk_token": 126, "recursive_token": 128, "regex_token": 129, "w": [131, 132], "word_segment": 132, "base": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "audio_assembl": 133, "doc2_chunk": 134, "document_assembl": 135, "embeddings_finish": 136, "finish": [137, 190], "graph_finish": 138, "has_recursive_fit": 139, "has_recursive_transform": 140, "image_assembl": 141, "light_pipelin": 143, "multi_document_assembl": 144, "recursive_pipelin": 145, "table_assembl": 146, "token2_chunk": 147, "token_assembl": 148, "common": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 189], "annotator_approach": 149, "annotator_model": 150, "annotator_properti": 151, "annotator_typ": 152, "coverage_result": 153, "match_strategi": 155, "properti": 156, "read_a": 157, "recursive_annotator_approach": 158, "storag": 159, "util": [160, 174, 183], "function": [160, 161, 162, 189, 191], "packag": 162, "intern": [163, 164, 165, 166, 167, 168], "annotator_java_ml": 163, "annotator_transform": 164, "extended_java_wrapp": 165, "params_getters_sett": 167, "recurs": 168, "log": [169, 170, 185, 187], "comet": [169, 185], "pretrain": [171, 172, 173, 174, 189, 193, 194], "pretrained_pipelin": 172, "resource_download": 173, "train": [175, 176, 177, 178, 179, 180, 181, 195], "conll": [175, 195], "conllu": [176, 195], "pub_tat": 179, "spacy_to_annot": 180, "tfgraph": 181, "upload_to_hub": 182, "api": 184, "refer": 184, "A": 185, "meta": 185, "machin": [185, 186], "learn": [185, 186], "platform": [185, 186], "pipelin": [185, 190, 193, 194], "paramet": 185, "evalu": 185, "metric": 185, "visual": 185, "run": 185, "an": 185, "offlin": 185, "experi": 185, "mlflow": 186, "lifecycl": 186, "third": 187, "parti": 187, "project": 187, "approach": 189, "model": 189, "note": 189, "avail": [189, 194], "set": 190, "up": 190, "your": 190, "own": 190, "type": 190, "necessari": 190, "import": 190, "construct": 190, "documentassembl": 190, "data": 190, "detect": 190, "out": 190, "put": 190, "all": 190, "togeth": 190, "ml": [190, 194], "helper": 191, "user": 192, "guid": 192, "light": 193, "convert": 193, "pipelinemodel": 193, "download": 194, "As": 194, "lightpipelin": 194, "load": 195, "dataset": 195, "spell": 195, "checker": 195, "pubtat": 195}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [185, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [28, "submodules"], [44, "submodules"], [47, "submodules"], [52, "submodules"], [65, "submodules"], [78, "submodules"], [80, "submodules"], [81, "submodules"], [83, "submodules"], [88, "submodules"], [93, "submodules"], [104, "submodules"], [106, "submodules"], [109, "submodules"], [114, "submodules"], [118, "submodules"], [120, "submodules"], [127, "submodules"], [131, "submodules"], [142, "submodules"], [154, "submodules"], [162, "submodules"], [166, "submodules"], [170, "submodules"], [171, "submodules"], [177, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[8, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[9, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[44, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[45, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[46, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[47, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[48, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vit_for_image_classification": [[49, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[50, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[51, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[52, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[53, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_normalizer": [[54, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[55, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[56, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[58, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[59, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[60, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[61, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[62, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[63, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[64, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[65, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[66, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[67, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[68, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[69, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[70, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[71, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[72, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[73, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[74, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[75, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[76, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[77, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[78, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[79, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[80, "module-sparknlp.annotator"]], "Subpackages": [[80, "subpackages"], [162, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[81, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[82, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[83, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[84, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[85, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[86, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[87, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[88, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[89, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[90, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[91, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[92, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[93, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[94, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[95, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[96, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[97, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[98, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[99, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[100, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.param.classifier_encoder": [[101, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[102, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[103, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[104, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[105, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[106, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[107, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[108, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[109, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[110, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[111, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[112, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[113, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[114, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[115, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[116, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[117, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[118, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[119, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[120, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[121, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[122, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[123, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[124, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[125, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[126, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[127, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[128, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[129, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[130, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[131, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[132, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[133, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[134, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[135, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[136, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[137, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[138, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[139, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[140, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[141, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[142, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[143, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[144, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[145, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[146, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token2_chunk": [[147, "module-sparknlp.base.token2_chunk"]], "sparknlp.base.token_assembler": [[148, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[149, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[150, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[151, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[152, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[153, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[154, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[155, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[156, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[157, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[158, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[159, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[160, "module-sparknlp.common.utils"]], "Functions": [[160, "functions"], [161, "functions"], [162, "functions"]], "sparknlp.functions": [[161, "module-sparknlp.functions"]], "sparknlp": [[162, "module-sparknlp"]], "Package Contents": [[162, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[163, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[164, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[165, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[166, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[167, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[168, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[169, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[170, "module-sparknlp.logging"]], "sparknlp.pretrained": [[171, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[172, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[173, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[174, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[175, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[176, "module-sparknlp.training.conllu"]], "sparknlp.training": [[177, "module-sparknlp.training"]], "sparknlp.training.pos": [[178, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[179, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[180, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[181, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[182, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[183, "module-sparknlp.util"]], "API Reference": [[184, "api-reference"]], "Modules": [[184, "modules"]], "Comet - A meta machine learning platform": [[185, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[185, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[185, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[185, "logging-evaluation-metrics"]], "Logging Visualizations": [[185, "logging-visualizations"]], "Running An Offline Experiment": [[185, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[186, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[187, "third-party-projects"]], "Logging": [[187, "logging"]], "Annotation": [[188, "annotation"]], "Annotators": [[189, "annotators"]], "Annotator Approaches": [[189, "annotator-approaches"]], "Annotator Models": [[189, "annotator-models"]], "Note": [[189, "note"]], "Pretrained Models": [[189, "pretrained-models"]], "Common Functions": [[189, "common-functions"]], "Available Annotators": [[189, "available-annotators"]], "Setting up your own pipeline": [[190, "setting-up-your-own-pipeline"]], "Annotator types": [[190, "annotator-types"]], "Necessary imports": [[190, "necessary-imports"]], "Constructing the Pipeline": [[190, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[190, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[190, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[190, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[190, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[191, "helper-functions"]], "User Guide": [[192, "user-guide"]], "Light Pipelines": [[193, "light-pipelines"]], "Converting PipelineModels": [[193, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[193, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[194, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[194, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[194, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[194, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[194, "available-pipelines"]], "Loading datasets for training": [[195, "loading-datasets-for-training"]], "POS Dataset": [[195, "pos-dataset"]], "CoNLL Dataset": [[195, "conll-dataset"]], "CoNLLU Dataset": [[195, "conllu-dataset"]], "Spell Checkers Dataset": [[195, "spell-checkers-dataset"]], "PubTator Dataset": [[195, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.chunk2_doc"], [9, "module-sparknlp.annotator.chunker"], [10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [20, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"], [34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [42, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [44, "module-sparknlp.annotator.coref"], [45, "module-sparknlp.annotator.coref.spanbert_coref"], [46, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [47, "module-sparknlp.annotator.cv"], [48, "module-sparknlp.annotator.cv.swin_for_image_classification"], [49, "module-sparknlp.annotator.cv.vit_for_image_classification"], [50, "module-sparknlp.annotator.date2_chunk"], [51, "module-sparknlp.annotator.dependency.dependency_parser"], [52, "module-sparknlp.annotator.dependency"], [53, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [54, "module-sparknlp.annotator.document_normalizer"], [55, "module-sparknlp.annotator.embeddings.albert_embeddings"], [56, "module-sparknlp.annotator.embeddings.bert_embeddings"], [57, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [58, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [59, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [60, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [61, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [62, "module-sparknlp.annotator.embeddings.doc2vec"], [63, "module-sparknlp.annotator.embeddings.e5_embeddings"], [64, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [65, "module-sparknlp.annotator.embeddings"], [66, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [67, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [68, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [69, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [70, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [71, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [72, "module-sparknlp.annotator.embeddings.word2vec"], [73, "module-sparknlp.annotator.embeddings.word_embeddings"], [74, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [75, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [76, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [77, "module-sparknlp.annotator.er.entity_ruler"], [78, "module-sparknlp.annotator.er"], [79, "module-sparknlp.annotator.graph_extraction"], [80, "module-sparknlp.annotator"], [81, "module-sparknlp.annotator.keyword_extraction"], [82, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [83, "module-sparknlp.annotator.ld_dl"], [84, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [85, "module-sparknlp.annotator.lemmatizer"], [86, "module-sparknlp.annotator.matcher.big_text_matcher"], [87, "module-sparknlp.annotator.matcher.date_matcher"], [88, "module-sparknlp.annotator.matcher"], [89, "module-sparknlp.annotator.matcher.multi_date_matcher"], [90, "module-sparknlp.annotator.matcher.regex_matcher"], [91, "module-sparknlp.annotator.matcher.text_matcher"], [92, "module-sparknlp.annotator.n_gram_generator"], [93, "module-sparknlp.annotator.ner"], [94, "module-sparknlp.annotator.ner.ner_approach"], [95, "module-sparknlp.annotator.ner.ner_converter"], [96, "module-sparknlp.annotator.ner.ner_crf"], [97, "module-sparknlp.annotator.ner.ner_dl"], [98, "module-sparknlp.annotator.ner.ner_overwriter"], [99, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [100, "module-sparknlp.annotator.normalizer"], [101, "module-sparknlp.annotator.param.classifier_encoder"], [102, "module-sparknlp.annotator.param.evaluation_dl_params"], [103, "module-sparknlp.annotator.param"], [104, "module-sparknlp.annotator.pos"], [105, "module-sparknlp.annotator.pos.perceptron"], [106, "module-sparknlp.annotator.sentence"], [107, "module-sparknlp.annotator.sentence.sentence_detector"], [108, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [109, "module-sparknlp.annotator.sentiment"], [110, "module-sparknlp.annotator.sentiment.sentiment_detector"], [111, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [112, "module-sparknlp.annotator.seq2seq.bart_transformer"], [113, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [114, "module-sparknlp.annotator.seq2seq"], [115, "module-sparknlp.annotator.seq2seq.marian_transformer"], [116, "module-sparknlp.annotator.seq2seq.t5_transformer"], [117, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [118, "module-sparknlp.annotator.similarity"], [119, "module-sparknlp.annotator.spell_check.context_spell_checker"], [120, "module-sparknlp.annotator.spell_check"], [121, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [122, "module-sparknlp.annotator.spell_check.symmetric_delete"], [123, "module-sparknlp.annotator.stemmer"], [124, "module-sparknlp.annotator.stop_words_cleaner"], [125, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [126, "module-sparknlp.annotator.token.chunk_tokenizer"], [127, "module-sparknlp.annotator.token"], [128, "module-sparknlp.annotator.token.recursive_tokenizer"], [129, "module-sparknlp.annotator.token.regex_tokenizer"], [130, "module-sparknlp.annotator.token.tokenizer"], [131, "module-sparknlp.annotator.ws"], [132, "module-sparknlp.annotator.ws.word_segmenter"], [133, "module-sparknlp.base.audio_assembler"], [134, "module-sparknlp.base.doc2_chunk"], [135, "module-sparknlp.base.document_assembler"], [136, "module-sparknlp.base.embeddings_finisher"], [137, "module-sparknlp.base.finisher"], [138, "module-sparknlp.base.graph_finisher"], [139, "module-sparknlp.base.has_recursive_fit"], [140, "module-sparknlp.base.has_recursive_transform"], [141, "module-sparknlp.base.image_assembler"], [142, "module-sparknlp.base"], [143, "module-sparknlp.base.light_pipeline"], [144, "module-sparknlp.base.multi_document_assembler"], [145, "module-sparknlp.base.recursive_pipeline"], [146, "module-sparknlp.base.table_assembler"], [147, "module-sparknlp.base.token2_chunk"], [148, "module-sparknlp.base.token_assembler"], [149, "module-sparknlp.common.annotator_approach"], [150, "module-sparknlp.common.annotator_model"], [151, "module-sparknlp.common.annotator_properties"], [152, "module-sparknlp.common.annotator_type"], [153, "module-sparknlp.common.coverage_result"], [154, "module-sparknlp.common"], [155, "module-sparknlp.common.match_strategy"], [156, "module-sparknlp.common.properties"], [157, "module-sparknlp.common.read_as"], [158, "module-sparknlp.common.recursive_annotator_approach"], [159, "module-sparknlp.common.storage"], [160, "module-sparknlp.common.utils"], [161, "module-sparknlp.functions"], [162, "module-sparknlp"], [163, "module-sparknlp.internal.annotator_java_ml"], [164, "module-sparknlp.internal.annotator_transformer"], [165, "module-sparknlp.internal.extended_java_wrapper"], [166, "module-sparknlp.internal"], [167, "module-sparknlp.internal.params_getters_setters"], [168, "module-sparknlp.internal.recursive"], [169, "module-sparknlp.logging.comet"], [170, "module-sparknlp.logging"], [171, "module-sparknlp.pretrained"], [172, "module-sparknlp.pretrained.pretrained_pipeline"], [173, "module-sparknlp.pretrained.resource_downloader"], [174, "module-sparknlp.pretrained.utils"], [175, "module-sparknlp.training.conll"], [176, "module-sparknlp.training.conllu"], [177, "module-sparknlp.training"], [178, "module-sparknlp.training.pos"], [179, "module-sparknlp.training.pub_tator"], [180, "module-sparknlp.training.spacy_to_annotation"], [181, "module-sparknlp.training.tfgraphs"], [182, "module-sparknlp.upload_to_hub"], [183, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[8, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[8, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[9, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[9, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[9, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[10, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[10, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[13, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[13, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[14, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[14, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[17, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[17, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[18, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[18, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[20, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[20, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[21, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[21, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[22, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[22, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[32, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[33, "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification": [[33, "module-sparknlp.annotator.classifier_dl.roberta_bert_for_zero_shot_classification"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[34, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[37, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[39, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[44, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[45, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[45, "module-sparknlp.annotator.coref.spanbert_coref"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[46, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[46, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[47, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "setdorescale() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setDoRescale"]], "setrescalefactor() (swinforimageclassification method)": [[48, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[48, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[49, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[49, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[50, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[50, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[50, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[51, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[51, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[52, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[53, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[53, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[54, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[54, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[55, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[55, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[56, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[56, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[57, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[57, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[58, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[58, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[59, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[59, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[59, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[59, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[60, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[60, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[61, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[61, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "pretrained() (doc2vecmodel static method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[62, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[62, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[63, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[63, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[63, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[63, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[63, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[64, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[64, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[65, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[66, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[66, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[66, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[66, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[66, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[66, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[67, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[67, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[67, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[67, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[67, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[68, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[68, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[68, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[68, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[68, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[69, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[69, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[69, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[69, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[69, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[70, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[70, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[70, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[71, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[71, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[71, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[71, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[71, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[71, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "pretrained() (word2vecmodel static method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[72, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[72, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[73, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[73, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[74, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[74, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[75, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[75, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[76, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[76, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[76, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[76, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[76, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[77, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[77, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[77, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[77, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[77, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[77, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[77, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[78, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[79, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[79, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[80, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[81, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[82, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[82, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[83, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[84, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[84, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[84, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[84, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[84, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[84, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[84, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[85, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[85, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[85, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[85, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[85, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[85, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[85, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[86, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[86, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[87, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[87, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[88, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[89, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[89, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[90, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[90, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[90, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[90, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[90, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[90, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[90, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[91, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[91, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[92, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[92, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[92, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[92, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[92, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[93, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[94, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[94, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[95, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[95, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[95, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[95, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[95, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[96, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[96, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[97, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[97, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[98, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[98, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[98, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[98, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[98, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[99, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[99, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[99, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[99, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[99, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[99, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[99, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[100, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[100, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[100, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[100, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[100, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[100, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[100, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[100, "module-sparknlp.annotator.normalizer"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[101, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[101, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[102, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[102, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[103, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[104, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[105, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[105, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[105, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[105, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[105, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[105, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[105, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[106, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[107, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[107, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[108, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[108, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[109, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[110, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[110, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[110, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[110, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[111, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[111, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[111, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[111, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[111, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[111, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[112, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[112, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[113, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[113, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[114, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[115, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[115, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[116, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[116, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[117, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[117, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[118, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[119, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[119, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[120, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[121, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[121, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[122, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[122, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[123, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[123, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[124, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[124, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[124, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[124, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[124, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[124, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[124, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[125, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[125, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[126, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[126, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[126, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[127, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[128, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[128, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[128, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[128, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[128, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[128, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[128, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[129, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[129, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[130, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[130, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[130, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[130, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[130, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[130, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[130, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[131, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[132, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[132, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[133, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[133, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[133, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[133, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[133, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[134, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[134, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[135, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[135, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[135, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[135, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[135, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[135, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[135, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[135, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[136, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[136, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[137, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[137, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[137, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[138, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[138, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[138, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[138, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[138, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[138, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[139, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[139, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[140, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[140, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[141, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[141, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[141, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[141, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[141, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[142, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[143, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[143, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[143, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[143, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[143, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[143, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[143, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[143, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[144, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[144, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[145, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[145, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[145, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[146, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[146, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[146, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[146, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[146, "module-sparknlp.base.table_assembler"]], "token2chunk (class in sparknlp.base.token2_chunk)": [[147, "sparknlp.base.token2_chunk.Token2Chunk"]], "sparknlp.base.token2_chunk": [[147, "module-sparknlp.base.token2_chunk"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[148, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[148, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[148, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[149, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[149, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[150, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[150, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[151, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[151, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[152, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[153, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[154, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[155, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[155, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[156, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[156, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setdimension() (hasembeddingsproperties method)": [[156, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "sparknlp.common.properties": [[156, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[157, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[157, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[158, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[158, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[159, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[160, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[160, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[161, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[161, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[161, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[161, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[161, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[161, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[161, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[161, "module-sparknlp.functions"]], "sparknlp": [[162, "module-sparknlp"]], "start() (in module sparknlp)": [[162, "sparknlp.start"]], "version() (in module sparknlp)": [[162, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[163, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[163, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[163, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[163, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[164, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[164, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[165, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[165, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[165, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[166, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[167, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[167, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[167, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[167, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[168, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[168, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[168, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[168, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[169, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[169, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[169, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[170, "module-sparknlp.logging"]], "sparknlp.pretrained": [[171, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[172, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[172, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[172, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[172, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[172, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[172, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[173, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[173, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[174, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[175, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[175, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[175, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[176, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[176, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[176, "module-sparknlp.training.conllu"]], "sparknlp.training": [[177, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[178, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[178, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[178, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[179, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[179, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[179, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[180, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[180, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[181, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[182, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[183, "module-sparknlp.util"]]}})