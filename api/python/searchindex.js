Search.setIndex({"docnames": ["_api/modules", "_api/sparknlp", "_api/sparknlp.annotation", "_api/sparknlp.annotation_audio", "_api/sparknlp.annotation_image", "_api/sparknlp.annotator", "_api/sparknlp.annotator.audio", "_api/sparknlp.annotator.audio.hubert_for_ctc", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc", "_api/sparknlp.annotator.audio.whisper_for_ctc", "_api/sparknlp.annotator.chunk2_doc", "_api/sparknlp.annotator.chunker", "_api/sparknlp.annotator.classifier_dl", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.classifier_dl", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.sentiment_dl", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification", "_api/sparknlp.annotator.cleaners", "_api/sparknlp.annotator.cleaners.cleaner", "_api/sparknlp.annotator.cleaners.extractor", "_api/sparknlp.annotator.coref", "_api/sparknlp.annotator.coref.spanbert_coref", "_api/sparknlp.annotator.cv", "_api/sparknlp.annotator.cv.blip_for_question_answering", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification", "_api/sparknlp.annotator.cv.convnext_for_image_classification", "_api/sparknlp.annotator.cv.florence2_transformer", "_api/sparknlp.annotator.cv.gemma3_for_multimodal", "_api/sparknlp.annotator.cv.internvl_for_multimodal", "_api/sparknlp.annotator.cv.janus_for_multimodal", "_api/sparknlp.annotator.cv.llava_for_multimodal", "_api/sparknlp.annotator.cv.mllama_for_multimodal", "_api/sparknlp.annotator.cv.paligemma_for_multimodal", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal", "_api/sparknlp.annotator.cv.qwen2vl_transformer", "_api/sparknlp.annotator.cv.smolvlm_transformer", "_api/sparknlp.annotator.cv.swin_for_image_classification", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning", "_api/sparknlp.annotator.cv.vit_for_image_classification", "_api/sparknlp.annotator.dataframe_optimizer", "_api/sparknlp.annotator.date2_chunk", "_api/sparknlp.annotator.dependency", "_api/sparknlp.annotator.dependency.dependency_parser", "_api/sparknlp.annotator.dependency.typed_dependency_parser", "_api/sparknlp.annotator.document_character_text_splitter", "_api/sparknlp.annotator.document_normalizer", "_api/sparknlp.annotator.document_token_splitter", "_api/sparknlp.annotator.document_token_splitter_test", "_api/sparknlp.annotator.embeddings", "_api/sparknlp.annotator.embeddings.albert_embeddings", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings", "_api/sparknlp.annotator.embeddings.bert_embeddings", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings", "_api/sparknlp.annotator.embeddings.bge_embeddings", "_api/sparknlp.annotator.embeddings.camembert_embeddings", "_api/sparknlp.annotator.embeddings.chunk_embeddings", "_api/sparknlp.annotator.embeddings.deberta_embeddings", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings", "_api/sparknlp.annotator.embeddings.doc2vec", "_api/sparknlp.annotator.embeddings.e5_embeddings", "_api/sparknlp.annotator.embeddings.e5v_embeddings", "_api/sparknlp.annotator.embeddings.elmo_embeddings", "_api/sparknlp.annotator.embeddings.instructor_embeddings", "_api/sparknlp.annotator.embeddings.longformer_embeddings", "_api/sparknlp.annotator.embeddings.minilm_embeddings", "_api/sparknlp.annotator.embeddings.mpnet_embeddings", "_api/sparknlp.annotator.embeddings.mxbai_embeddings", "_api/sparknlp.annotator.embeddings.nomic_embeddings", "_api/sparknlp.annotator.embeddings.roberta_embeddings", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.sentence_embeddings", "_api/sparknlp.annotator.embeddings.snowflake_embeddings", "_api/sparknlp.annotator.embeddings.uae_embeddings", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder", "_api/sparknlp.annotator.embeddings.word2vec", "_api/sparknlp.annotator.embeddings.word_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.xlnet_embeddings", "_api/sparknlp.annotator.er", "_api/sparknlp.annotator.er.entity_ruler", "_api/sparknlp.annotator.graph_extraction", "_api/sparknlp.annotator.keyword_extraction", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction", "_api/sparknlp.annotator.ld_dl", "_api/sparknlp.annotator.ld_dl.language_detector_dl", "_api/sparknlp.annotator.lemmatizer", "_api/sparknlp.annotator.matcher", "_api/sparknlp.annotator.matcher.big_text_matcher", "_api/sparknlp.annotator.matcher.date_matcher", "_api/sparknlp.annotator.matcher.multi_date_matcher", "_api/sparknlp.annotator.matcher.regex_matcher", "_api/sparknlp.annotator.matcher.text_matcher", "_api/sparknlp.annotator.n_gram_generator", "_api/sparknlp.annotator.ner", "_api/sparknlp.annotator.ner.ner_approach", "_api/sparknlp.annotator.ner.ner_converter", "_api/sparknlp.annotator.ner.ner_crf", "_api/sparknlp.annotator.ner.ner_dl", "_api/sparknlp.annotator.ner.ner_overwriter", "_api/sparknlp.annotator.ner.zero_shot_ner_model", "_api/sparknlp.annotator.normalizer", "_api/sparknlp.annotator.openai", "_api/sparknlp.annotator.openai.openai_completion", "_api/sparknlp.annotator.openai.openai_embeddings", "_api/sparknlp.annotator.param", "_api/sparknlp.annotator.param.classifier_encoder", "_api/sparknlp.annotator.param.evaluation_dl_params", "_api/sparknlp.annotator.pos", "_api/sparknlp.annotator.pos.perceptron", "_api/sparknlp.annotator.sentence", "_api/sparknlp.annotator.sentence.sentence_detector", "_api/sparknlp.annotator.sentence.sentence_detector_dl", "_api/sparknlp.annotator.sentiment", "_api/sparknlp.annotator.sentiment.sentiment_detector", "_api/sparknlp.annotator.sentiment.vivekn_sentiment", "_api/sparknlp.annotator.seq2seq", "_api/sparknlp.annotator.seq2seq.auto_gguf_model", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model", "_api/sparknlp.annotator.seq2seq.bart_transformer", "_api/sparknlp.annotator.seq2seq.cohere_transformer", "_api/sparknlp.annotator.seq2seq.cpm_transformer", "_api/sparknlp.annotator.seq2seq.gpt2_transformer", "_api/sparknlp.annotator.seq2seq.llama2_transformer", "_api/sparknlp.annotator.seq2seq.llama3_transformer", "_api/sparknlp.annotator.seq2seq.m2m100_transformer", "_api/sparknlp.annotator.seq2seq.marian_transformer", "_api/sparknlp.annotator.seq2seq.mistral_transformer", "_api/sparknlp.annotator.seq2seq.nllb_transformer", "_api/sparknlp.annotator.seq2seq.olmo_transformer", "_api/sparknlp.annotator.seq2seq.phi2_transformer", "_api/sparknlp.annotator.seq2seq.phi3_transformer", "_api/sparknlp.annotator.seq2seq.phi4_transformer", "_api/sparknlp.annotator.seq2seq.qwen_transformer", "_api/sparknlp.annotator.seq2seq.starcoder_transformer", "_api/sparknlp.annotator.seq2seq.t5_transformer", "_api/sparknlp.annotator.similarity", "_api/sparknlp.annotator.similarity.document_similarity_ranker", "_api/sparknlp.annotator.spell_check", "_api/sparknlp.annotator.spell_check.context_spell_checker", "_api/sparknlp.annotator.spell_check.norvig_sweeting", "_api/sparknlp.annotator.spell_check.symmetric_delete", "_api/sparknlp.annotator.stemmer", "_api/sparknlp.annotator.stop_words_cleaner", "_api/sparknlp.annotator.tf_ner_dl_graph_builder", "_api/sparknlp.annotator.token", "_api/sparknlp.annotator.token.chunk_tokenizer", "_api/sparknlp.annotator.token.recursive_tokenizer", "_api/sparknlp.annotator.token.regex_tokenizer", "_api/sparknlp.annotator.token.tokenizer", "_api/sparknlp.annotator.token2_chunk", "_api/sparknlp.annotator.ws", "_api/sparknlp.annotator.ws.word_segmenter", "_api/sparknlp.base", "_api/sparknlp.base.audio_assembler", "_api/sparknlp.base.doc2_chunk", "_api/sparknlp.base.document_assembler", "_api/sparknlp.base.embeddings_finisher", "_api/sparknlp.base.finisher", "_api/sparknlp.base.graph_finisher", "_api/sparknlp.base.has_recursive_fit", "_api/sparknlp.base.has_recursive_transform", "_api/sparknlp.base.image_assembler", "_api/sparknlp.base.light_pipeline", "_api/sparknlp.base.multi_document_assembler", "_api/sparknlp.base.prompt_assembler", "_api/sparknlp.base.recursive_pipeline", "_api/sparknlp.base.table_assembler", "_api/sparknlp.base.token_assembler", "_api/sparknlp.common", "_api/sparknlp.common.annotator_approach", "_api/sparknlp.common.annotator_model", "_api/sparknlp.common.annotator_properties", "_api/sparknlp.common.annotator_type", "_api/sparknlp.common.coverage_result", "_api/sparknlp.common.match_strategy", "_api/sparknlp.common.properties", "_api/sparknlp.common.read_as", "_api/sparknlp.common.recursive_annotator_approach", "_api/sparknlp.common.storage", "_api/sparknlp.common.utils", "_api/sparknlp.functions", "_api/sparknlp.internal", "_api/sparknlp.internal.annotator_java_ml", "_api/sparknlp.internal.annotator_transformer", "_api/sparknlp.internal.extended_java_wrapper", "_api/sparknlp.internal.params_getters_setters", "_api/sparknlp.internal.recursive", "_api/sparknlp.logging", "_api/sparknlp.logging.comet", "_api/sparknlp.partition", "_api/sparknlp.partition.partition", "_api/sparknlp.partition.partition_properties", "_api/sparknlp.partition.partition_transformer", "_api/sparknlp.pretrained", "_api/sparknlp.pretrained.pretrained_pipeline", "_api/sparknlp.pretrained.resource_downloader", "_api/sparknlp.pretrained.utils", "_api/sparknlp.reader", "_api/sparknlp.reader.enums", "_api/sparknlp.reader.pdf_to_text", "_api/sparknlp.reader.reader2doc", "_api/sparknlp.reader.sparknlp_reader", "_api/sparknlp.training", "_api/sparknlp.training.conll", "_api/sparknlp.training.conllu", "_api/sparknlp.training.pos", "_api/sparknlp.training.pub_tator", "_api/sparknlp.training.spacy_to_annotation", "_api/sparknlp.training.tfgraphs", "_api/sparknlp.upload_to_hub", "_api/sparknlp.util", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index", "reference/autosummary/sparknlp/annotator/cleaners/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/dataframe_optimizer/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/e5v_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/minilm_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi4_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/prompt_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/partition/index", "reference/autosummary/sparknlp/partition/partition/index", "reference/autosummary/sparknlp/partition/partition_properties/index", "reference/autosummary/sparknlp/partition/partition_transformer/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/reader/enums/index", "reference/autosummary/sparknlp/reader/index", "reference/autosummary/sparknlp/reader/pdf_to_text/index", "reference/autosummary/sparknlp/reader/reader2doc/index", "reference/autosummary/sparknlp/reader/sparknlp_reader/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_api/modules.rst", "_api/sparknlp.rst", "_api/sparknlp.annotation.rst", "_api/sparknlp.annotation_audio.rst", "_api/sparknlp.annotation_image.rst", "_api/sparknlp.annotator.rst", "_api/sparknlp.annotator.audio.rst", "_api/sparknlp.annotator.audio.hubert_for_ctc.rst", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc.rst", "_api/sparknlp.annotator.audio.whisper_for_ctc.rst", "_api/sparknlp.annotator.chunk2_doc.rst", "_api/sparknlp.annotator.chunker.rst", "_api/sparknlp.annotator.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.sentiment_dl.rst", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification.rst", "_api/sparknlp.annotator.cleaners.rst", "_api/sparknlp.annotator.cleaners.cleaner.rst", "_api/sparknlp.annotator.cleaners.extractor.rst", "_api/sparknlp.annotator.coref.rst", "_api/sparknlp.annotator.coref.spanbert_coref.rst", "_api/sparknlp.annotator.cv.rst", "_api/sparknlp.annotator.cv.blip_for_question_answering.rst", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification.rst", "_api/sparknlp.annotator.cv.convnext_for_image_classification.rst", "_api/sparknlp.annotator.cv.florence2_transformer.rst", "_api/sparknlp.annotator.cv.gemma3_for_multimodal.rst", "_api/sparknlp.annotator.cv.internvl_for_multimodal.rst", "_api/sparknlp.annotator.cv.janus_for_multimodal.rst", "_api/sparknlp.annotator.cv.llava_for_multimodal.rst", "_api/sparknlp.annotator.cv.mllama_for_multimodal.rst", "_api/sparknlp.annotator.cv.paligemma_for_multimodal.rst", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal.rst", "_api/sparknlp.annotator.cv.qwen2vl_transformer.rst", "_api/sparknlp.annotator.cv.smolvlm_transformer.rst", "_api/sparknlp.annotator.cv.swin_for_image_classification.rst", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.rst", "_api/sparknlp.annotator.cv.vit_for_image_classification.rst", "_api/sparknlp.annotator.dataframe_optimizer.rst", "_api/sparknlp.annotator.date2_chunk.rst", "_api/sparknlp.annotator.dependency.rst", "_api/sparknlp.annotator.dependency.dependency_parser.rst", "_api/sparknlp.annotator.dependency.typed_dependency_parser.rst", "_api/sparknlp.annotator.document_character_text_splitter.rst", "_api/sparknlp.annotator.document_normalizer.rst", "_api/sparknlp.annotator.document_token_splitter.rst", "_api/sparknlp.annotator.document_token_splitter_test.rst", "_api/sparknlp.annotator.embeddings.rst", "_api/sparknlp.annotator.embeddings.albert_embeddings.rst", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.bge_embeddings.rst", "_api/sparknlp.annotator.embeddings.camembert_embeddings.rst", "_api/sparknlp.annotator.embeddings.chunk_embeddings.rst", "_api/sparknlp.annotator.embeddings.deberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.doc2vec.rst", "_api/sparknlp.annotator.embeddings.e5_embeddings.rst", "_api/sparknlp.annotator.embeddings.e5v_embeddings.rst", "_api/sparknlp.annotator.embeddings.elmo_embeddings.rst", "_api/sparknlp.annotator.embeddings.instructor_embeddings.rst", "_api/sparknlp.annotator.embeddings.longformer_embeddings.rst", "_api/sparknlp.annotator.embeddings.minilm_embeddings.rst", "_api/sparknlp.annotator.embeddings.mpnet_embeddings.rst", "_api/sparknlp.annotator.embeddings.mxbai_embeddings.rst", "_api/sparknlp.annotator.embeddings.nomic_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.snowflake_embeddings.rst", "_api/sparknlp.annotator.embeddings.uae_embeddings.rst", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder.rst", "_api/sparknlp.annotator.embeddings.word2vec.rst", "_api/sparknlp.annotator.embeddings.word_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlnet_embeddings.rst", "_api/sparknlp.annotator.er.rst", "_api/sparknlp.annotator.er.entity_ruler.rst", "_api/sparknlp.annotator.graph_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction.rst", "_api/sparknlp.annotator.ld_dl.rst", "_api/sparknlp.annotator.ld_dl.language_detector_dl.rst", "_api/sparknlp.annotator.lemmatizer.rst", "_api/sparknlp.annotator.matcher.rst", "_api/sparknlp.annotator.matcher.big_text_matcher.rst", "_api/sparknlp.annotator.matcher.date_matcher.rst", "_api/sparknlp.annotator.matcher.multi_date_matcher.rst", "_api/sparknlp.annotator.matcher.regex_matcher.rst", "_api/sparknlp.annotator.matcher.text_matcher.rst", "_api/sparknlp.annotator.n_gram_generator.rst", "_api/sparknlp.annotator.ner.rst", "_api/sparknlp.annotator.ner.ner_approach.rst", "_api/sparknlp.annotator.ner.ner_converter.rst", "_api/sparknlp.annotator.ner.ner_crf.rst", "_api/sparknlp.annotator.ner.ner_dl.rst", "_api/sparknlp.annotator.ner.ner_overwriter.rst", "_api/sparknlp.annotator.ner.zero_shot_ner_model.rst", "_api/sparknlp.annotator.normalizer.rst", "_api/sparknlp.annotator.openai.rst", "_api/sparknlp.annotator.openai.openai_completion.rst", "_api/sparknlp.annotator.openai.openai_embeddings.rst", "_api/sparknlp.annotator.param.rst", "_api/sparknlp.annotator.param.classifier_encoder.rst", "_api/sparknlp.annotator.param.evaluation_dl_params.rst", "_api/sparknlp.annotator.pos.rst", "_api/sparknlp.annotator.pos.perceptron.rst", "_api/sparknlp.annotator.sentence.rst", "_api/sparknlp.annotator.sentence.sentence_detector.rst", "_api/sparknlp.annotator.sentence.sentence_detector_dl.rst", "_api/sparknlp.annotator.sentiment.rst", "_api/sparknlp.annotator.sentiment.sentiment_detector.rst", "_api/sparknlp.annotator.sentiment.vivekn_sentiment.rst", "_api/sparknlp.annotator.seq2seq.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_model.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model.rst", "_api/sparknlp.annotator.seq2seq.bart_transformer.rst", "_api/sparknlp.annotator.seq2seq.cohere_transformer.rst", "_api/sparknlp.annotator.seq2seq.cpm_transformer.rst", "_api/sparknlp.annotator.seq2seq.gpt2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama3_transformer.rst", "_api/sparknlp.annotator.seq2seq.m2m100_transformer.rst", "_api/sparknlp.annotator.seq2seq.marian_transformer.rst", "_api/sparknlp.annotator.seq2seq.mistral_transformer.rst", "_api/sparknlp.annotator.seq2seq.nllb_transformer.rst", "_api/sparknlp.annotator.seq2seq.olmo_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi2_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi3_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi4_transformer.rst", "_api/sparknlp.annotator.seq2seq.qwen_transformer.rst", "_api/sparknlp.annotator.seq2seq.starcoder_transformer.rst", "_api/sparknlp.annotator.seq2seq.t5_transformer.rst", "_api/sparknlp.annotator.similarity.rst", "_api/sparknlp.annotator.similarity.document_similarity_ranker.rst", "_api/sparknlp.annotator.spell_check.rst", "_api/sparknlp.annotator.spell_check.context_spell_checker.rst", "_api/sparknlp.annotator.spell_check.norvig_sweeting.rst", "_api/sparknlp.annotator.spell_check.symmetric_delete.rst", "_api/sparknlp.annotator.stemmer.rst", "_api/sparknlp.annotator.stop_words_cleaner.rst", "_api/sparknlp.annotator.tf_ner_dl_graph_builder.rst", "_api/sparknlp.annotator.token.rst", "_api/sparknlp.annotator.token.chunk_tokenizer.rst", "_api/sparknlp.annotator.token.recursive_tokenizer.rst", "_api/sparknlp.annotator.token.regex_tokenizer.rst", "_api/sparknlp.annotator.token.tokenizer.rst", "_api/sparknlp.annotator.token2_chunk.rst", "_api/sparknlp.annotator.ws.rst", "_api/sparknlp.annotator.ws.word_segmenter.rst", "_api/sparknlp.base.rst", "_api/sparknlp.base.audio_assembler.rst", "_api/sparknlp.base.doc2_chunk.rst", "_api/sparknlp.base.document_assembler.rst", "_api/sparknlp.base.embeddings_finisher.rst", "_api/sparknlp.base.finisher.rst", "_api/sparknlp.base.graph_finisher.rst", "_api/sparknlp.base.has_recursive_fit.rst", "_api/sparknlp.base.has_recursive_transform.rst", "_api/sparknlp.base.image_assembler.rst", "_api/sparknlp.base.light_pipeline.rst", "_api/sparknlp.base.multi_document_assembler.rst", "_api/sparknlp.base.prompt_assembler.rst", "_api/sparknlp.base.recursive_pipeline.rst", "_api/sparknlp.base.table_assembler.rst", "_api/sparknlp.base.token_assembler.rst", "_api/sparknlp.common.rst", "_api/sparknlp.common.annotator_approach.rst", "_api/sparknlp.common.annotator_model.rst", "_api/sparknlp.common.annotator_properties.rst", "_api/sparknlp.common.annotator_type.rst", "_api/sparknlp.common.coverage_result.rst", "_api/sparknlp.common.match_strategy.rst", "_api/sparknlp.common.properties.rst", "_api/sparknlp.common.read_as.rst", "_api/sparknlp.common.recursive_annotator_approach.rst", "_api/sparknlp.common.storage.rst", "_api/sparknlp.common.utils.rst", "_api/sparknlp.functions.rst", "_api/sparknlp.internal.rst", "_api/sparknlp.internal.annotator_java_ml.rst", "_api/sparknlp.internal.annotator_transformer.rst", "_api/sparknlp.internal.extended_java_wrapper.rst", "_api/sparknlp.internal.params_getters_setters.rst", "_api/sparknlp.internal.recursive.rst", "_api/sparknlp.logging.rst", "_api/sparknlp.logging.comet.rst", "_api/sparknlp.partition.rst", "_api/sparknlp.partition.partition.rst", "_api/sparknlp.partition.partition_properties.rst", "_api/sparknlp.partition.partition_transformer.rst", "_api/sparknlp.pretrained.rst", "_api/sparknlp.pretrained.pretrained_pipeline.rst", "_api/sparknlp.pretrained.resource_downloader.rst", "_api/sparknlp.pretrained.utils.rst", "_api/sparknlp.reader.rst", "_api/sparknlp.reader.enums.rst", "_api/sparknlp.reader.pdf_to_text.rst", "_api/sparknlp.reader.reader2doc.rst", "_api/sparknlp.reader.sparknlp_reader.rst", "_api/sparknlp.training.rst", "_api/sparknlp.training.conll.rst", "_api/sparknlp.training.conllu.rst", "_api/sparknlp.training.pos.rst", "_api/sparknlp.training.pub_tator.rst", "_api/sparknlp.training.spacy_to_annotation.rst", "_api/sparknlp.training.tfgraphs.rst", "_api/sparknlp.upload_to_hub.rst", "_api/sparknlp.util.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/dataframe_optimizer/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5v_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/minilm_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi4_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/prompt_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/partition/index.rst", "reference/autosummary/sparknlp/partition/partition/index.rst", "reference/autosummary/sparknlp/partition/partition_properties/index.rst", "reference/autosummary/sparknlp/partition/partition_transformer/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/reader/enums/index.rst", "reference/autosummary/sparknlp/reader/index.rst", "reference/autosummary/sparknlp/reader/pdf_to_text/index.rst", "reference/autosummary/sparknlp/reader/reader2doc/index.rst", "reference/autosummary/sparknlp/reader/sparknlp_reader/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["sparknlp", "sparknlp package", "sparknlp.annotation module", "sparknlp.annotation_audio module", "sparknlp.annotation_image module", "sparknlp.annotator package", "sparknlp.annotator.audio package", "sparknlp.annotator.audio.hubert_for_ctc module", "sparknlp.annotator.audio.wav2vec2_for_ctc module", "sparknlp.annotator.audio.whisper_for_ctc module", "sparknlp.annotator.chunk2_doc module", "sparknlp.annotator.chunker module", "sparknlp.annotator.classifier_dl package", "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.albert_for_question_answering module", "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.albert_for_token_classification module", "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.bert_for_question_answering module", "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.bert_for_token_classification module", "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.camembert_for_question_answering module", "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.camembert_for_token_classification module", "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.classifier_dl module", "sparknlp.annotator.classifier_dl.deberta_for_question_answering module", "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.deberta_for_token_classification module", "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module", "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.longformer_for_question_answering module", "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module", "sparknlp.annotator.classifier_dl.longformer_for_token_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module", "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module", "sparknlp.annotator.classifier_dl.multi_classifier_dl module", "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.sentiment_dl module", "sparknlp.annotator.classifier_dl.tapas_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module", "sparknlp.annotator.cleaners package", "sparknlp.annotator.cleaners.cleaner module", "sparknlp.annotator.cleaners.extractor module", "sparknlp.annotator.coref package", "sparknlp.annotator.coref.spanbert_coref module", "sparknlp.annotator.cv package", "sparknlp.annotator.cv.blip_for_question_answering module", "sparknlp.annotator.cv.clip_for_zero_shot_classification module", "sparknlp.annotator.cv.convnext_for_image_classification module", "sparknlp.annotator.cv.florence2_transformer module", "sparknlp.annotator.cv.gemma3_for_multimodal module", "sparknlp.annotator.cv.internvl_for_multimodal module", "sparknlp.annotator.cv.janus_for_multimodal module", "sparknlp.annotator.cv.llava_for_multimodal module", "sparknlp.annotator.cv.mllama_for_multimodal module", "sparknlp.annotator.cv.paligemma_for_multimodal module", "sparknlp.annotator.cv.phi3_vision_for_multimodal module", "sparknlp.annotator.cv.qwen2vl_transformer module", "sparknlp.annotator.cv.smolvlm_transformer module", "sparknlp.annotator.cv.swin_for_image_classification module", "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module", "sparknlp.annotator.cv.vit_for_image_classification module", "sparknlp.annotator.dataframe_optimizer module", "sparknlp.annotator.date2_chunk module", "sparknlp.annotator.dependency package", "sparknlp.annotator.dependency.dependency_parser module", "sparknlp.annotator.dependency.typed_dependency_parser module", "sparknlp.annotator.document_character_text_splitter module", "sparknlp.annotator.document_normalizer module", "sparknlp.annotator.document_token_splitter module", "sparknlp.annotator.document_token_splitter_test module", "sparknlp.annotator.embeddings package", "sparknlp.annotator.embeddings.albert_embeddings module", "sparknlp.annotator.embeddings.auto_gguf_embeddings module", "sparknlp.annotator.embeddings.bert_embeddings module", "sparknlp.annotator.embeddings.bert_sentence_embeddings module", "sparknlp.annotator.embeddings.bge_embeddings module", "sparknlp.annotator.embeddings.camembert_embeddings module", "sparknlp.annotator.embeddings.chunk_embeddings module", "sparknlp.annotator.embeddings.deberta_embeddings module", "sparknlp.annotator.embeddings.distil_bert_embeddings module", "sparknlp.annotator.embeddings.doc2vec module", "sparknlp.annotator.embeddings.e5_embeddings module", "sparknlp.annotator.embeddings.e5v_embeddings module", "sparknlp.annotator.embeddings.elmo_embeddings module", "sparknlp.annotator.embeddings.instructor_embeddings module", "sparknlp.annotator.embeddings.longformer_embeddings module", "sparknlp.annotator.embeddings.minilm_embeddings module", "sparknlp.annotator.embeddings.mpnet_embeddings module", "sparknlp.annotator.embeddings.mxbai_embeddings module", "sparknlp.annotator.embeddings.nomic_embeddings module", "sparknlp.annotator.embeddings.roberta_embeddings module", "sparknlp.annotator.embeddings.roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.sentence_embeddings module", "sparknlp.annotator.embeddings.snowflake_embeddings module", "sparknlp.annotator.embeddings.uae_embeddings module", "sparknlp.annotator.embeddings.universal_sentence_encoder module", "sparknlp.annotator.embeddings.word2vec module", "sparknlp.annotator.embeddings.word_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.xlnet_embeddings module", "sparknlp.annotator.er package", "sparknlp.annotator.er.entity_ruler module", "sparknlp.annotator.graph_extraction module", "sparknlp.annotator.keyword_extraction package", "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module", "sparknlp.annotator.ld_dl package", "sparknlp.annotator.ld_dl.language_detector_dl module", "sparknlp.annotator.lemmatizer module", "sparknlp.annotator.matcher package", "sparknlp.annotator.matcher.big_text_matcher module", "sparknlp.annotator.matcher.date_matcher module", "sparknlp.annotator.matcher.multi_date_matcher module", "sparknlp.annotator.matcher.regex_matcher module", "sparknlp.annotator.matcher.text_matcher module", "sparknlp.annotator.n_gram_generator module", "sparknlp.annotator.ner package", "sparknlp.annotator.ner.ner_approach module", "sparknlp.annotator.ner.ner_converter module", "sparknlp.annotator.ner.ner_crf module", "sparknlp.annotator.ner.ner_dl module", "sparknlp.annotator.ner.ner_overwriter module", "sparknlp.annotator.ner.zero_shot_ner_model module", "sparknlp.annotator.normalizer module", "sparknlp.annotator.openai package", "sparknlp.annotator.openai.openai_completion module", "sparknlp.annotator.openai.openai_embeddings module", "sparknlp.annotator.param package", "sparknlp.annotator.param.classifier_encoder module", "sparknlp.annotator.param.evaluation_dl_params module", "sparknlp.annotator.pos package", "sparknlp.annotator.pos.perceptron module", "sparknlp.annotator.sentence package", "sparknlp.annotator.sentence.sentence_detector module", "sparknlp.annotator.sentence.sentence_detector_dl module", "sparknlp.annotator.sentiment package", "sparknlp.annotator.sentiment.sentiment_detector module", "sparknlp.annotator.sentiment.vivekn_sentiment module", "sparknlp.annotator.seq2seq package", "sparknlp.annotator.seq2seq.auto_gguf_model module", "sparknlp.annotator.seq2seq.auto_gguf_vision_model module", "sparknlp.annotator.seq2seq.bart_transformer module", "sparknlp.annotator.seq2seq.cohere_transformer module", "sparknlp.annotator.seq2seq.cpm_transformer module", "sparknlp.annotator.seq2seq.gpt2_transformer module", "sparknlp.annotator.seq2seq.llama2_transformer module", "sparknlp.annotator.seq2seq.llama3_transformer module", "sparknlp.annotator.seq2seq.m2m100_transformer module", "sparknlp.annotator.seq2seq.marian_transformer module", "sparknlp.annotator.seq2seq.mistral_transformer module", "sparknlp.annotator.seq2seq.nllb_transformer module", "sparknlp.annotator.seq2seq.olmo_transformer module", "sparknlp.annotator.seq2seq.phi2_transformer module", "sparknlp.annotator.seq2seq.phi3_transformer module", "sparknlp.annotator.seq2seq.phi4_transformer module", "sparknlp.annotator.seq2seq.qwen_transformer module", "sparknlp.annotator.seq2seq.starcoder_transformer module", "sparknlp.annotator.seq2seq.t5_transformer module", "sparknlp.annotator.similarity package", "sparknlp.annotator.similarity.document_similarity_ranker module", "sparknlp.annotator.spell_check package", "sparknlp.annotator.spell_check.context_spell_checker module", "sparknlp.annotator.spell_check.norvig_sweeting module", "sparknlp.annotator.spell_check.symmetric_delete module", "sparknlp.annotator.stemmer module", "sparknlp.annotator.stop_words_cleaner module", "sparknlp.annotator.tf_ner_dl_graph_builder module", "sparknlp.annotator.token package", "sparknlp.annotator.token.chunk_tokenizer module", "sparknlp.annotator.token.recursive_tokenizer module", "sparknlp.annotator.token.regex_tokenizer module", "sparknlp.annotator.token.tokenizer module", "sparknlp.annotator.token2_chunk module", "sparknlp.annotator.ws package", "sparknlp.annotator.ws.word_segmenter module", "sparknlp.base package", "sparknlp.base.audio_assembler module", "sparknlp.base.doc2_chunk module", "sparknlp.base.document_assembler module", "sparknlp.base.embeddings_finisher module", "sparknlp.base.finisher module", "sparknlp.base.graph_finisher module", "sparknlp.base.has_recursive_fit module", "sparknlp.base.has_recursive_transform module", "sparknlp.base.image_assembler module", "sparknlp.base.light_pipeline module", "sparknlp.base.multi_document_assembler module", "sparknlp.base.prompt_assembler module", "sparknlp.base.recursive_pipeline module", "sparknlp.base.table_assembler module", "sparknlp.base.token_assembler module", "sparknlp.common package", "sparknlp.common.annotator_approach module", "sparknlp.common.annotator_model module", "sparknlp.common.annotator_properties module", "sparknlp.common.annotator_type module", "sparknlp.common.coverage_result module", "sparknlp.common.match_strategy module", "sparknlp.common.properties module", "sparknlp.common.read_as module", "sparknlp.common.recursive_annotator_approach module", "sparknlp.common.storage module", "sparknlp.common.utils module", "sparknlp.functions module", "sparknlp.internal package", "sparknlp.internal.annotator_java_ml module", "sparknlp.internal.annotator_transformer module", "sparknlp.internal.extended_java_wrapper module", "sparknlp.internal.params_getters_setters module", "sparknlp.internal.recursive module", "sparknlp.logging package", "sparknlp.logging.comet module", "sparknlp.partition package", "sparknlp.partition.partition module", "sparknlp.partition.partition_properties module", "sparknlp.partition.partition_transformer module", "sparknlp.pretrained package", "sparknlp.pretrained.pretrained_pipeline module", "sparknlp.pretrained.resource_downloader module", "sparknlp.pretrained.utils module", "sparknlp.reader package", "sparknlp.reader.enums module", "sparknlp.reader.pdf_to_text module", "sparknlp.reader.reader2doc module", "sparknlp.reader.sparknlp_reader module", "sparknlp.training package", "sparknlp.training.conll module", "sparknlp.training.conllu module", "sparknlp.training.pos module", "sparknlp.training.pub_tator module", "sparknlp.training.spacy_to_annotation module", "sparknlp.training.tfgraphs module", "sparknlp.upload_to_hub module", "sparknlp.util module", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.blip_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.florence2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.gemma3_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.internvl_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.janus_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.llava_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.mllama_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.paligemma_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.phi3_vision_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.qwen2vl_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.smolvlm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dataframe_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.auto_gguf_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5v_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.minilm_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_vision_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cohere_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.olmo_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi4_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.prompt_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.enums</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.pdf_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.reader2doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.sparknlp_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "packag": [0, 91, 92, 95, 98, 159, 160, 231, 254, 343, 344, 347, 350, 412, 413, 485, 511, 512], "subpackag": 0, "annot": [0, 1, 3, 4, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 223, 224, 225, 226, 229, 231, 233, 235, 236, 237, 238, 239, 243, 248, 250, 255, 257, 258, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 472, 476, 477, 478, 479, 480, 482, 484, 485, 488, 490, 492, 493, 494, 498, 503, 505, 510, 511, 516, 517, 518, 519, 520], "submodul": 0, "modul": [0, 255, 290, 337, 356, 375, 377, 378, 380, 385, 390, 398, 403, 404, 406, 409, 418, 435, 442, 447, 458, 470, 482, 487, 491, 496, 502], "content": [0, 65, 71, 72, 73, 74, 75, 76, 77, 98, 117, 157, 197, 207, 233, 234, 235, 242, 243, 244, 248, 513, 519], "base": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 231, 233, 234, 235, 237, 238, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 465, 466, 467, 470, 472, 474, 478, 480, 484, 485, 498, 510, 514, 515, 518], "common": [0, 1, 50, 114, 122, 131, 145, 146, 172, 173, 176, 188, 197, 274, 303, 344, 367, 374, 384, 399, 400, 426, 427, 430, 441, 450, 478, 517], "intern": [0, 1, 103, 173, 177, 181, 191, 194, 209, 355, 401, 402, 427, 431, 434, 445, 448, 463, 467, 472, 478, 489], "log": [0, 1, 28, 44, 50, 140, 145, 149, 154, 164, 171, 255, 280, 297, 303, 394, 399, 402, 408, 417, 425, 478], "partit": [0, 1, 81, 100, 116, 242, 246, 334, 352, 369, 478, 497, 500], "pretrain": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 133, 134, 136, 139, 140, 141, 142, 150, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 191, 193, 194, 199, 200, 205, 223, 231, 255, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 384, 387, 388, 393, 394, 395, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 445, 448, 452, 453, 459, 477, 478, 485, 510, 513, 517], "reader": [0, 1, 233, 238, 478, 488, 493], "train": [0, 1, 7, 9, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 70, 71, 78, 80, 84, 85, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 113, 115, 116, 118, 119, 120, 125, 127, 128, 130, 133, 134, 137, 139, 140, 143, 148, 149, 151, 154, 156, 157, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 188, 189, 194, 197, 205, 218, 221, 231, 237, 255, 259, 262, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 318, 319, 323, 324, 331, 333, 336, 338, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 359, 360, 362, 363, 364, 366, 368, 369, 371, 372, 373, 379, 381, 382, 383, 387, 388, 391, 393, 394, 397, 401, 402, 405, 408, 410, 411, 414, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 441, 443, 448, 450, 459, 472, 475, 478, 485, 492, 510, 514, 515, 517, 518], "annotation_audio": [0, 1, 478], "annotationaudio": [0, 1, 3, 257], "annotation_imag": [0, 1, 478], "annotationimag": [0, 1, 4, 160, 205, 237, 258, 413, 459, 492], "function": [0, 1, 69, 70, 71, 73, 77, 103, 114, 117, 160, 161, 177, 199, 207, 238, 255, 321, 323, 324, 326, 330, 355, 367, 370, 413, 414, 431, 452, 461, 493, 509, 517], "explode_annotations_col": [0, 1, 223, 477], "filter_by_annotations_col": [0, 1, 223, 477], "map_annot": [0, 1, 223, 477], "map_annotations_arrai": [0, 1, 223, 477], "map_annotations_col": [0, 1, 223, 477], "map_annotations_strict": [0, 1, 223, 477], "upload_to_hub": [0, 1, 478], "pushtohub": [0, 1, 252, 507], "util": [0, 1, 7, 71, 97, 102, 139, 142, 153, 154, 169, 175, 183, 208, 211, 216, 219, 221, 225, 228, 236, 259, 324, 349, 354, 393, 396, 407, 408, 423, 429, 437, 462, 469, 470, 473, 475, 478, 479, 483, 491], "conllgener": [0, 1, 253, 508], "embeddingsdataframeutil": [0, 1, 102, 253, 354, 508], "get_config_path": [0, 1, 253, 508], "read": [0, 1, 28, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 88, 100, 116, 125, 128, 130, 131, 132, 133, 134, 139, 142, 143, 149, 154, 156, 164, 181, 182, 183, 191, 194, 196, 198, 204, 206, 219, 221, 222, 224, 225, 231, 232, 233, 234, 235, 238, 240, 242, 243, 244, 246, 247, 248, 249, 280, 303, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 341, 352, 369, 379, 382, 383, 384, 386, 387, 388, 393, 396, 397, 402, 408, 410, 417, 434, 436, 437, 445, 448, 449, 451, 457, 460, 473, 475, 476, 478, 479, 485, 487, 488, 489, 490, 493, 496, 497, 498, 499, 500, 501, 503, 504, 510, 514, 520], "start": [0, 1, 7, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 105, 123, 125, 139, 140, 154, 159, 160, 197, 218, 231, 255, 259, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 358, 376, 379, 393, 394, 408, 412, 413, 450, 472, 478, 485, 510, 513, 515, 518, 519], "version": [0, 1, 9, 87, 95, 99, 101, 106, 107, 166, 173, 175, 207, 229, 237, 238, 254, 262, 340, 347, 351, 353, 359, 360, 401, 402, 420, 427, 429, 440, 461, 467, 472, 478, 483, 484, 489, 492, 493, 514, 519], "audio": [1, 3, 5, 196, 211, 215, 231, 257, 377, 449, 468, 478, 485], "classifier_dl": [1, 5, 377, 478], "cleaner": [1, 5, 377, 478], "coref": [1, 5, 377, 478], "cv": [1, 5, 377, 478], "depend": [1, 2, 5, 63, 96, 107, 112, 120, 122, 123, 125, 127, 140, 168, 181, 194, 211, 215, 218, 252, 254, 256, 312, 316, 348, 360, 365, 373, 374, 376, 377, 379, 381, 394, 422, 434, 448, 468, 472, 478, 507], "embed": [1, 2, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 74, 77, 123, 139, 140, 141, 146, 159, 160, 163, 179, 198, 199, 200, 205, 206, 211, 218, 223, 229, 237, 252, 253, 256, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 321, 323, 327, 330, 376, 377, 393, 394, 395, 400, 412, 413, 416, 432, 451, 452, 453, 459, 460, 472, 477, 478, 484, 492, 508, 513], "er": [1, 5, 377, 478], "keyword_extract": [1, 5, 377, 478], "ld_dl": [1, 5, 377, 478], "matcher": [1, 5, 377, 478], "ner": [1, 5, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 118, 119, 123, 188, 205, 223, 231, 237, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311, 371, 372, 376, 377, 441, 459, 477, 478, 485, 492, 510], "openai": [1, 5, 109, 164, 362, 377, 417, 478], "param": [1, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 214, 218, 221, 228, 229, 233, 234, 235, 242, 243, 244, 250, 313, 377, 393, 432, 466, 467, 472, 478, 483, 484, 488, 489, 499, 505], "po": [1, 2, 5, 11, 15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 84, 85, 123, 136, 139, 140, 189, 194, 205, 211, 215, 223, 237, 245, 246, 256, 264, 267, 270, 273, 275, 277, 282, 284, 286, 288, 292, 300, 302, 307, 309, 310, 336, 338, 376, 377, 393, 394, 443, 448, 459, 468, 477, 478, 492, 500, 502, 513, 517, 518, 519], "sentenc": [1, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 84, 85, 87, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 146, 151, 157, 161, 168, 177, 179, 181, 185, 188, 190, 192, 194, 198, 200, 205, 206, 209, 210, 218, 237, 246, 247, 248, 249, 250, 252, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 321, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 338, 340, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 400, 405, 411, 414, 422, 431, 432, 434, 439, 441, 444, 446, 448, 451, 453, 459, 460, 463, 464, 472, 478, 492, 500, 501, 503, 504, 505, 514, 518, 519], "sentiment": [1, 2, 5, 28, 44, 50, 103, 120, 177, 211, 215, 252, 256, 280, 297, 303, 355, 373, 377, 431, 468, 478, 507, 514, 515], "seq2seq": [1, 5, 377, 478], "similar": [1, 5, 66, 91, 104, 114, 115, 125, 127, 160, 176, 318, 343, 357, 367, 368, 377, 379, 381, 413, 430, 478], "spell_check": [1, 5, 377, 478], "token": [1, 2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 125, 128, 129, 130, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 148, 149, 151, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 192, 194, 197, 199, 205, 208, 210, 211, 215, 218, 237, 246, 249, 250, 252, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 336, 338, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 379, 382, 383, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 402, 405, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 446, 448, 450, 452, 459, 462, 464, 468, 472, 478, 492, 500, 504, 505, 507, 514, 518, 519], "w": [1, 5, 122, 133, 139, 143, 189, 191, 374, 377, 387, 393, 397, 443, 445, 478], "chunk2_doc": [1, 5, 377, 478], "chunk2doc": [1, 5, 10, 197, 263, 450], "chunker": [1, 5, 97, 349, 377, 478], "dataframe_optim": [1, 5, 377, 478], "dataframeoptim": [1, 5, 81, 334], "tostringdict": [1, 5, 81, 334], "date2_chunk": [1, 5, 377, 478], "date2chunk": [1, 5, 82, 335], "document_character_text_splitt": [1, 5, 377, 478], "documentcharactertextsplitt": [1, 5, 86, 339], "document_norm": [1, 5, 377, 478], "documentnorm": [1, 5, 86, 87, 88, 339, 340, 341], "document_token_splitt": [1, 5, 377, 478], "documenttokensplitt": [1, 5, 88, 341], "document_token_splitter_test": [1, 5, 377, 478], "graph_extract": [1, 5, 377, 478], "graphextract": [1, 5, 123, 201, 376, 454], "lemmat": [1, 5, 156, 185, 208, 210, 252, 377, 410, 439, 462, 464, 478], "lemmatizermodel": [1, 5, 128, 382], "n_gram_gener": [1, 5, 377, 478], "ngramgener": [1, 5, 97, 135, 349, 389], "normal": [1, 5, 28, 67, 78, 79, 80, 87, 130, 154, 157, 185, 199, 208, 210, 218, 280, 319, 331, 332, 333, 340, 377, 383, 408, 411, 439, 452, 462, 464, 472, 478, 514, 515], "normalizermodel": [1, 5, 143, 397], "stemmer": [1, 5, 185, 377, 439, 478], "stop_words_clean": [1, 5, 377, 478], "stopwordsclean": [1, 5, 185, 199, 210, 439, 452, 464], "tf_ner_dl_graph_build": [1, 5, 377, 478], "tfnerdlgraphbuild": [1, 5, 186, 440], "tfnerdlgraphbuildermodel": [1, 5, 186, 440], "token2_chunk": [1, 5, 377, 478], "token2chunk": [1, 5, 192, 446], "audio_assembl": [1, 7, 8, 9, 195, 259, 261, 262, 458, 478], "audioassembl": [1, 7, 8, 9, 195, 196, 259, 261, 262, 449], "doc2_chunk": [1, 195, 458, 478], "doc2chunk": [1, 10, 195, 197, 263, 450], "document_assembl": [1, 51, 142, 179, 195, 209, 304, 396, 432, 458, 463, 478], "documentassembl": [1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 206, 208, 209, 210, 231, 235, 243, 246, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 316, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 460, 462, 463, 464, 485, 490, 498, 500, 510, 514], "embeddings_finish": [1, 195, 458, 478], "embeddingsfinish": [1, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 195, 199, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 452], "finish": [1, 157, 179, 195, 199, 201, 206, 208, 411, 432, 452, 454, 458, 462, 478], "graph_finish": [1, 195, 458, 478], "graphfinish": [1, 123, 195, 201, 376, 454], "has_recursive_fit": [1, 195, 458, 478], "hasrecursivefit": [1, 195, 202, 203, 455, 456], "has_recursive_transform": [1, 195, 458, 478], "hasrecursivetransform": [1, 195, 203, 456], "image_assembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 160, 195, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 354, 413, 458, 478], "imageassembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 160, 195, 204, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 354, 413, 457], "light_pipelin": [1, 195, 458, 478], "lightpipelin": [1, 195, 205, 237, 459, 492, 518], "multi_document_assembl": [1, 195, 458, 478], "multidocumentassembl": [1, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 195, 206, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 304, 305, 306, 460], "prompt_assembl": [1, 195, 458, 478], "promptassembl": [1, 195, 207, 461], "recursive_pipelin": [1, 195, 229, 458, 478, 484], "recursivepipelin": [1, 195, 202, 203, 208, 214, 455, 456, 462, 467], "recursivepipelinemodel": [1, 195, 208, 462], "table_assembl": [1, 51, 195, 304, 458, 478], "tableassembl": [1, 51, 195, 209, 304, 463], "token_assembl": [1, 195, 458, 478], "tokenassembl": [1, 195, 210, 464], "annotator_approach": [1, 211, 470, 478], "annotatorapproach": [1, 28, 44, 50, 84, 85, 100, 116, 117, 122, 128, 130, 133, 134, 139, 140, 143, 151, 154, 156, 157, 179, 181, 182, 183, 189, 191, 194, 211, 212, 220, 231, 465, 474, 485], "annotator_model": [1, 211, 470, 478], "annotatormodel": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 189, 190, 191, 192, 194, 205, 209, 211, 213, 214, 235, 238, 459, 466, 493], "annotator_properti": [1, 211, 470, 478], "annotatorproperti": [1, 10, 197, 210, 211, 212, 213, 214, 220, 467], "annotator_typ": [1, 2, 3, 4, 211, 256, 257, 258, 470, 478], "annotatortyp": [1, 2, 3, 4, 22, 97, 135, 197, 198, 204, 206, 211, 215, 223, 256, 257, 258, 274, 349, 389, 450, 451, 457, 460, 468, 513], "coverage_result": [1, 211, 470, 478], "coverageresult": [1, 117, 211, 216, 370, 469], "match_strategi": [1, 211, 470, 478], "matchstrategi": [1, 131, 211, 217, 384, 471], "properti": [1, 91, 173, 202, 203, 211, 214, 234, 343, 427, 455, 456, 467, 470, 478, 489], "hasaudiofeatureproperti": [1, 7, 8, 9, 211, 218, 472], "hasbatchedannot": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 91, 92, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 140, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 472], "hasbatchedannotateaudio": [1, 7, 8, 9, 211, 218, 472], "hasbatchedannotateimag": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 211, 218, 472], "hascandidatelabelsproperti": [1, 17, 18, 23, 27, 32, 36, 49, 56, 65, 66, 71, 72, 73, 74, 75, 76, 77, 211, 218, 472], "hascasesensitiveproperti": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 211, 218, 221, 472], "hasclassifieractivationproperti": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 211, 218, 472], "hasclstokenproperti": [1, 95, 211, 218, 472], "hasembeddingsproperti": [1, 63, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 179, 211, 218, 472], "hasenablecachingproperti": [1, 100, 116, 179, 211, 218, 472], "hasengin": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 94, 96, 98, 99, 102, 103, 105, 110, 111, 115, 118, 119, 120, 127, 140, 142, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 211, 218, 472], "hasgeneratorproperti": [1, 9, 69, 70, 79, 211, 218, 472], "hasimagefeatureproperti": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 211, 218, 472], "hasllamacppproperti": [1, 159, 160, 211, 218, 472], "haslongmaxsentencelengthlimit": [1, 38, 39, 40, 105, 211, 218, 472], "hasmaxsentencelengthlimit": [1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 52, 53, 54, 55, 57, 58, 63, 91, 93, 94, 95, 96, 98, 99, 101, 104, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 211, 218, 472], "hasrescalefactor": [1, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 102, 211, 218, 472], "read_a": [1, 84, 85, 122, 128, 130, 133, 134, 139, 143, 149, 156, 182, 183, 191, 211, 221, 222, 246, 247, 336, 338, 374, 382, 383, 387, 388, 393, 397, 402, 410, 436, 437, 445, 470, 475, 476, 478, 500, 501], "reada": [1, 84, 85, 117, 122, 128, 130, 133, 134, 139, 143, 149, 156, 182, 183, 188, 191, 211, 219, 221, 222, 246, 247, 336, 338, 370, 374, 382, 383, 387, 388, 393, 397, 402, 410, 436, 437, 441, 445, 473, 475, 476, 500, 501], "recursive_annotator_approach": [1, 211, 470, 478], "recursiveannotatorapproach": [1, 211, 220, 474], "storag": [1, 117, 122, 130, 211, 370, 374, 383, 470, 478], "hasstorag": [1, 117, 122, 130, 211, 221, 475], "hasstoragemodel": [1, 117, 122, 130, 211, 221, 475], "hasstorageopt": [1, 211, 221, 475], "hasstorageref": [1, 28, 44, 50, 63, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 127, 140, 211, 221, 475], "externalresourc": [1, 130, 134, 211, 222, 383, 388, 476], "regexrul": [1, 211, 222, 476], "annotator_java_ml": [1, 224, 478, 482], "annotatorjavamlread": [1, 212, 213, 220, 224, 225, 226, 479], "annotator_transform": [1, 224, 478, 482], "annotatortransform": [1, 10, 179, 196, 197, 198, 199, 200, 201, 204, 206, 207, 210, 224, 226, 243, 480], "extended_java_wrapp": [1, 224, 478, 482], "extendedjavawrapp": [1, 224, 227, 233, 244, 246, 247, 248, 249, 250, 481], "params_getters_sett": [1, 224, 478, 482], "paramsgetterssett": [1, 148, 149, 212, 213, 220, 224, 226, 228, 483], "recurs": [1, 189, 208, 220, 224, 443, 462, 474, 478, 482], "recursiveestim": [1, 202, 220, 224, 229, 484], "recursivetransform": [1, 203, 224, 229, 484], "comet": [1, 230, 478, 486, 512], "cometlogg": [1, 230, 231, 485, 510], "partition_properti": [1, 232, 478, 487], "haschunkerproperti": [1, 232, 234, 235, 489], "hasemailreaderproperti": [1, 232, 234, 235, 243, 489], "hasexcelreaderproperti": [1, 232, 234, 235, 243, 489], "hashtmlreaderproperti": [1, 232, 234, 235, 243, 489], "haspowerpointproperti": [1, 232, 234, 235, 243, 489], "hastextreaderproperti": [1, 232, 234, 235, 243, 489], "partition_transform": [1, 232, 478, 487], "partitiontransform": [1, 232, 235, 490], "pretrained_pipelin": [1, 236, 478, 491], "pretrainedpipelin": [1, 10, 200, 205, 223, 236, 237, 263, 453, 459, 477, 492, 513, 518, 519], "resource_download": [1, 236, 478, 491], "resourcedownload": [1, 236, 238, 493, 514, 519], "printprogress": [1, 236, 239, 494], "enum": [1, 240, 478, 496], "textstrippertyp": [1, 240, 241, 242, 495, 497], "pdf_to_text": [1, 240, 478, 496], "pdftotext": [1, 240, 242, 497], "reader2doc": [1, 240, 478, 496], "sparknlp_read": [1, 240, 478, 496], "sparknlpread": [1, 240, 244, 499], "conll": [1, 84, 85, 139, 140, 245, 247, 336, 338, 393, 394, 478, 501, 502, 517], "conllu": [1, 83, 84, 85, 128, 245, 336, 338, 382, 478, 502, 517], "pub_tat": [1, 245, 478, 502], "pubtat": [1, 245, 249, 504, 517], "spacy_to_annot": [1, 245, 478, 502], "spacytoannot": [1, 245, 250, 505], "tfgraph": [1, 245, 478, 502], "arraytyp": [1, 2, 197, 223, 256, 450, 477], "copi": [1, 2, 3, 4, 238, 256, 257, 258, 493], "datatyp": [1, 2, 223, 256, 477], "fromrow": [1, 2, 256], "torow": [1, 2, 256], "check_for_required_info": [1, 252, 507], "create_doc": [1, 252, 507], "list_of_task": [1, 252, 507], "push_to_hub": [1, 252, 507], "unzip_directori": [1, 252, 507], "zip_directori": [1, 252, 507], "exportconllfil": [1, 253, 508], "emptyimagerow": [1, 102, 253, 354, 508], "imageschema": [1, 102, 253, 354, 508], "none": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 213, 214, 218, 226, 229, 231, 233, 235, 237, 238, 244, 250, 252, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 387, 388, 393, 394, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 466, 467, 472, 478, 480, 481, 484, 485, 488, 490, 492, 493, 499, 505, 507, 515], "sourcgpu": [1, 79, 91, 92, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 218, 312, 332, 343, 344, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 472, 478], "fals": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 205, 206, 207, 209, 210, 218, 223, 231, 234, 237, 242, 244, 246, 247, 248, 250, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 459, 460, 461, 463, 464, 472, 477, 478, 485, 489, 492, 497, 499, 500, 501, 503, 505, 510, 513, 514, 515, 520], "apple_silicon": [1, 478], "aarch64": [1, 478], "memori": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 92, 103, 117, 159, 160, 218, 221, 233, 235, 254, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 343, 344, 355, 370, 412, 413, 472, 475, 478, 488, 490], "16g": [1, 254, 478], "cache_fold": [1, 478], "log_fold": [1, 478], "cluster_tmp_dir": [1, 478], "real_time_output": [1, 478], "output_level": [1, 478], "pyspark": [1, 2, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 204, 205, 206, 209, 210, 221, 223, 227, 229, 231, 233, 237, 242, 243, 244, 246, 247, 248, 249, 254, 256, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 457, 459, 460, 463, 464, 475, 477, 478, 481, 484, 485, 488, 492, 497, 498, 499, 500, 501, 503, 504, 514, 515], "instanc": [1, 44, 142, 225, 297, 342, 396, 401, 402, 467, 472, 478, 479, 483, 489], "default": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 148, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 189, 190, 191, 194, 197, 198, 199, 200, 201, 204, 205, 206, 209, 214, 218, 222, 223, 231, 237, 238, 242, 246, 247, 248, 249, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 440, 443, 444, 445, 448, 450, 451, 452, 453, 454, 457, 459, 460, 463, 472, 476, 477, 478, 485, 492, 493, 497, 500, 501, 503, 504, 514], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 214, 218, 221, 222, 223, 228, 229, 231, 233, 234, 235, 237, 238, 242, 243, 244, 246, 247, 248, 249, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 467, 472, 475, 476, 477, 478, 483, 484, 485, 488, 489, 490, 492, 493, 497, 498, 499, 500, 501, 503, 504], "spark": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 219, 221, 223, 224, 226, 227, 231, 233, 235, 237, 238, 242, 243, 244, 246, 247, 248, 249, 250, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 470, 473, 475, 477, 478, 480, 481, 482, 485, 488, 490, 492, 493, 497, 498, 499, 500, 501, 503, 504, 505, 508, 509, 511, 512, 513, 514, 516, 517, 518, 520], "nlp": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 142, 143, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 189, 191, 194, 195, 197, 198, 199, 200, 204, 205, 206, 208, 209, 210, 211, 224, 231, 233, 235, 237, 238, 243, 246, 247, 248, 249, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 387, 388, 393, 394, 395, 396, 397, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 445, 448, 450, 451, 452, 453, 457, 458, 459, 460, 462, 463, 464, 470, 478, 482, 485, 488, 490, 492, 493, 498, 500, 501, 503, 504, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520], "The": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 190, 191, 194, 198, 200, 204, 205, 206, 207, 209, 218, 221, 223, 231, 233, 235, 237, 238, 243, 246, 247, 248, 249, 250, 252, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 444, 445, 448, 451, 453, 457, 459, 460, 461, 463, 472, 475, 477, 478, 485, 488, 490, 492, 493, 498, 500, 501, 503, 504, 505, 507, 510, 513, 514, 515, 517, 518, 520], "would": [1, 28, 63, 86, 97, 112, 131, 154, 280, 316, 339, 349, 365, 384, 408, 478, 514], "result": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 218, 223, 231, 237, 243, 246, 247, 250, 252, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 472, 477, 478, 485, 492, 498, 500, 501, 505, 507, 510, 511, 513, 514, 515, 518, 519], "equival": [1, 17, 18, 23, 27, 32, 36, 49, 56, 205, 269, 270, 275, 279, 284, 288, 302, 309, 459, 478, 518], "sparksess": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 130, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 204, 221, 246, 247, 248, 249, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 383, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 457, 475, 478, 500, 501, 503, 504], "builder": [1, 186, 254, 440, 478], "appnam": [1, 254, 478], "master": [1, 254, 478], "local": [1, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 125, 145, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 185, 205, 218, 237, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 379, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 459, 472, 478, 492, 518], "config": [1, 254, 478, 511], "driver": [1, 160, 254, 413, 478], "serial": [1, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 122, 127, 140, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 254, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 374, 381, 394, 401, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 478], "org": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 138, 139, 140, 141, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 194, 205, 218, 223, 233, 237, 244, 246, 254, 392, 393, 394, 395, 414, 448, 459, 477, 478, 488, 492, 499, 500, 511, 520], "apach": [1, 109, 169, 206, 254, 362, 423, 460, 478], "kryoseri": [1, 254, 478], "buffer": [1, 94, 117, 254, 346, 370, 478], "max": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 72, 74, 75, 76, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 125, 179, 183, 218, 233, 254, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 325, 327, 328, 329, 343, 345, 346, 347, 348, 350, 351, 353, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 379, 432, 437, 472, 478, 488], "2000m": [1, 254, 478], "maxresults": [1, 254, 478], "jar": [1, 254, 478], "com": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 142, 143, 145, 146, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 189, 191, 194, 209, 233, 235, 244, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 387, 388, 393, 394, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 445, 448, 463, 478, 488, 490, 499], "johnsnowlab": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 142, 143, 145, 146, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 189, 191, 194, 199, 200, 209, 235, 243, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 340, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 387, 388, 393, 394, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 445, 448, 452, 453, 463, 478, 490, 498], "nlp_2": [1, 254, 478], "12": [1, 91, 118, 119, 120, 125, 131, 132, 138, 151, 181, 192, 205, 223, 237, 248, 250, 254, 343, 371, 372, 373, 379, 384, 386, 392, 405, 434, 446, 459, 477, 478, 492, 503, 505, 513], "releas": [1, 9, 87, 91, 95, 96, 98, 109, 110, 111, 118, 119, 161, 162, 165, 166, 169, 171, 172, 175, 176, 177, 262, 340, 343, 347, 348, 350, 362, 363, 364, 371, 372, 414, 415, 419, 420, 423, 425, 426, 429, 430, 431, 478], "getorcr": [1, 254, 478], "bool": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 86, 87, 88, 92, 93, 94, 97, 101, 102, 106, 110, 115, 118, 122, 123, 127, 130, 131, 134, 135, 138, 139, 140, 143, 149, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 190, 191, 194, 197, 199, 200, 201, 205, 207, 209, 214, 218, 221, 231, 233, 234, 237, 238, 242, 243, 246, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 312, 321, 323, 324, 325, 326, 327, 328, 329, 330, 334, 339, 340, 341, 344, 345, 346, 349, 353, 354, 359, 363, 368, 371, 374, 376, 381, 383, 384, 388, 389, 392, 393, 394, 397, 402, 407, 408, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 439, 444, 445, 448, 450, 452, 453, 454, 459, 461, 463, 467, 472, 475, 478, 485, 488, 489, 492, 493, 497, 498, 500], "option": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 127, 128, 130, 133, 134, 139, 140, 142, 143, 149, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 191, 194, 196, 198, 204, 205, 206, 218, 221, 222, 223, 229, 231, 233, 235, 237, 238, 242, 244, 246, 247, 248, 249, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 382, 383, 387, 388, 393, 394, 396, 397, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 445, 448, 449, 451, 457, 459, 460, 475, 476, 477, 478, 484, 485, 488, 490, 492, 493, 497, 499, 500, 501, 503, 504, 514], "whether": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 122, 123, 130, 131, 132, 134, 135, 138, 139, 140, 143, 145, 149, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 190, 191, 194, 197, 199, 200, 201, 205, 207, 209, 210, 214, 218, 221, 234, 235, 237, 242, 243, 246, 249, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 374, 376, 383, 384, 386, 388, 389, 392, 393, 394, 397, 399, 402, 407, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 439, 444, 445, 448, 450, 452, 453, 454, 459, 461, 463, 464, 467, 472, 475, 478, 489, 492, 497, 498, 500, 504, 515], "enabl": [1, 81, 92, 120, 140, 159, 160, 165, 171, 172, 175, 179, 182, 199, 218, 234, 235, 242, 243, 334, 344, 373, 394, 412, 413, 419, 425, 426, 429, 432, 436, 472, 478, 490, 497, 498], "acceler": [1, 79, 103, 120, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 312, 332, 355, 373, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 478], "must": [1, 81, 92, 100, 116, 128, 130, 133, 134, 145, 149, 156, 157, 159, 160, 182, 183, 197, 218, 223, 231, 246, 334, 342, 344, 352, 369, 382, 383, 387, 388, 399, 402, 410, 411, 412, 413, 436, 437, 450, 472, 477, 478, 485, 500], "set": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 214, 218, 221, 222, 228, 231, 234, 235, 238, 242, 243, 246, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 440, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 466, 467, 472, 475, 476, 478, 483, 484, 485, 489, 493, 497, 498, 500, 510, 514, 517, 518], "up": [1, 7, 9, 28, 44, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 95, 100, 101, 105, 106, 107, 112, 114, 116, 125, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 254, 255, 259, 262, 280, 297, 312, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 342, 347, 352, 353, 358, 359, 360, 365, 367, 369, 379, 399, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472, 478, 510, 514, 517, 518], "correctli": [1, 478], "appl": [1, 7, 8, 94, 111, 119, 259, 261, 346, 364, 372, 478], "silicon": [1, 7, 8, 259, 261, 478], "support": [1, 7, 8, 9, 28, 44, 68, 69, 70, 71, 88, 91, 92, 95, 101, 102, 105, 106, 107, 125, 140, 143, 154, 159, 160, 167, 168, 170, 173, 175, 176, 185, 204, 207, 209, 218, 233, 235, 243, 259, 261, 262, 280, 297, 312, 320, 321, 323, 324, 341, 343, 347, 353, 354, 358, 359, 360, 379, 394, 397, 408, 412, 413, 421, 422, 424, 427, 429, 430, 439, 457, 461, 463, 472, 478, 488, 490, 498, 511], "maco": [1, 478], "linux": [1, 478], "str": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 214, 218, 221, 222, 223, 228, 231, 233, 234, 235, 237, 238, 242, 243, 244, 246, 247, 248, 249, 252, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 440, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 467, 472, 475, 476, 477, 478, 483, 485, 488, 489, 490, 492, 493, 497, 498, 499, 500, 501, 503, 504, 507], "how": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 84, 85, 86, 88, 91, 92, 93, 95, 96, 97, 98, 99, 101, 103, 105, 109, 110, 112, 114, 118, 120, 122, 123, 127, 128, 130, 133, 134, 138, 139, 140, 143, 145, 149, 153, 156, 159, 160, 162, 167, 182, 183, 190, 191, 194, 198, 201, 206, 207, 217, 218, 219, 221, 222, 246, 247, 250, 254, 255, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 319, 324, 325, 326, 328, 329, 330, 331, 332, 333, 336, 338, 339, 341, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 358, 362, 363, 365, 367, 371, 373, 374, 376, 381, 382, 383, 387, 388, 392, 393, 394, 397, 399, 402, 407, 410, 412, 413, 415, 421, 436, 437, 444, 445, 448, 451, 454, 460, 461, 471, 472, 473, 475, 476, 478, 500, 501, 505, 510, 514, 519], "much": [1, 17, 18, 23, 27, 28, 32, 36, 49, 51, 56, 91, 95, 101, 109, 110, 111, 143, 165, 167, 194, 269, 270, 275, 279, 280, 284, 288, 302, 304, 309, 343, 347, 353, 362, 363, 364, 397, 419, 421, 448, 478, 514], "alloc": [1, 478], "locat": [1, 10, 13, 19, 37, 45, 122, 153, 237, 263, 265, 271, 289, 298, 374, 407, 478, 492, 514], "download": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 123, 127, 128, 130, 134, 139, 140, 141, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 237, 238, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 376, 381, 382, 383, 388, 393, 394, 395, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 478, 492, 493, 513, 514, 517, 518], "extract": [1, 10, 11, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 61, 67, 78, 79, 80, 84, 86, 88, 97, 117, 121, 122, 123, 124, 125, 130, 131, 132, 134, 138, 139, 140, 141, 153, 154, 156, 179, 181, 183, 188, 192, 199, 200, 201, 205, 207, 218, 231, 233, 234, 237, 242, 243, 263, 264, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 313, 319, 331, 332, 333, 336, 339, 341, 349, 370, 374, 375, 376, 378, 379, 383, 384, 386, 388, 392, 393, 394, 395, 407, 408, 410, 432, 434, 437, 441, 446, 452, 453, 454, 459, 461, 472, 478, 485, 488, 489, 492, 497, 498, 510], "model": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 138, 139, 140, 142, 143, 144, 145, 146, 149, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 188, 189, 191, 194, 207, 213, 218, 221, 229, 231, 237, 238, 252, 253, 255, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 387, 388, 392, 393, 394, 396, 397, 399, 400, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 440, 441, 443, 445, 448, 461, 466, 472, 475, 478, 484, 485, 492, 493, 507, 508, 510, 511, 513, 517, 519, 520], "pipelin": [1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 204, 205, 206, 208, 209, 210, 229, 231, 235, 236, 237, 238, 239, 242, 243, 252, 255, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 457, 459, 460, 462, 463, 464, 478, 484, 485, 490, 491, 492, 493, 494, 497, 498, 511, 513, 514, 517], "If": [1, 9, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 112, 117, 122, 127, 131, 132, 138, 139, 140, 143, 149, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 186, 205, 218, 229, 231, 234, 238, 243, 254, 262, 267, 269, 270, 273, 275, 277, 279, 280, 282, 284, 286, 288, 292, 295, 297, 300, 302, 303, 307, 309, 310, 312, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342, 365, 370, 374, 381, 384, 386, 392, 393, 394, 397, 402, 407, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 440, 459, 472, 478, 484, 485, 489, 493, 498, 510, 512, 514], "user": [1, 69, 71, 72, 73, 74, 75, 76, 77, 102, 138, 139, 144, 145, 146, 159, 160, 163, 166, 169, 174, 191, 207, 208, 231, 242, 244, 255, 321, 324, 325, 326, 327, 328, 329, 330, 354, 392, 393, 399, 400, 412, 413, 416, 420, 423, 428, 445, 461, 462, 478, 485, 497, 499, 510], "home": [1, 125, 244, 379, 478, 499], "directori": [1, 160, 233, 238, 244, 413, 478, 488, 493, 499, 510], "under": [1, 2, 99, 107, 109, 120, 125, 169, 176, 256, 351, 360, 362, 373, 379, 423, 430, 478], "cache_pretrain": [1, 478], "us": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 149, 151, 153, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 190, 191, 192, 194, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 217, 218, 223, 231, 233, 234, 235, 237, 238, 242, 243, 244, 246, 247, 248, 249, 255, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 399, 400, 402, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 440, 444, 445, 446, 448, 450, 451, 452, 453, 459, 460, 461, 462, 463, 464, 471, 472, 477, 478, 485, 488, 489, 490, 492, 493, 498, 499, 500, 501, 503, 504, 511, 512, 513, 514, 515, 517], "cluster": [1, 7, 95, 101, 104, 106, 115, 259, 347, 353, 357, 359, 368, 478], "temporarili": [1, 175, 429, 478], "file": [1, 3, 7, 8, 28, 44, 50, 65, 71, 72, 73, 74, 75, 76, 77, 84, 85, 87, 115, 117, 122, 128, 130, 133, 134, 139, 140, 143, 149, 154, 156, 160, 181, 182, 183, 186, 191, 196, 209, 219, 221, 231, 233, 235, 240, 242, 243, 244, 246, 247, 248, 249, 252, 257, 259, 261, 280, 297, 303, 317, 324, 325, 326, 327, 328, 329, 330, 336, 338, 340, 368, 370, 374, 382, 383, 387, 388, 393, 394, 397, 402, 408, 410, 413, 434, 436, 437, 440, 445, 449, 463, 473, 475, 478, 485, 488, 490, 496, 497, 498, 499, 500, 501, 503, 504, 507, 510, 520], "unpack": [1, 478], "index": [1, 2, 59, 61, 108, 113, 114, 125, 130, 190, 221, 246, 256, 313, 361, 366, 367, 379, 383, 444, 475, 478, 500], "wordembed": [1, 5, 90, 97, 112, 117, 140, 199, 349, 365, 370, 394, 452, 478], "By": [1, 114, 156, 161, 177, 185, 190, 199, 231, 342, 367, 410, 414, 431, 439, 444, 452, 478, 485, 510], "thi": [1, 2, 3, 4, 7, 8, 9, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 138, 139, 140, 141, 143, 145, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 189, 190, 191, 192, 194, 196, 198, 199, 201, 204, 205, 206, 207, 208, 209, 210, 214, 217, 218, 225, 229, 231, 233, 235, 237, 238, 243, 244, 248, 250, 254, 255, 256, 257, 258, 259, 261, 262, 264, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 382, 383, 384, 387, 388, 389, 392, 393, 394, 395, 397, 399, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 444, 445, 446, 448, 449, 451, 452, 454, 457, 459, 460, 461, 462, 463, 464, 466, 467, 471, 472, 478, 479, 483, 484, 485, 488, 489, 492, 493, 498, 499, 503, 505, 509, 510, 513, 514, 515, 517, 518, 519], "i": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 186, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 218, 222, 223, 229, 231, 235, 238, 242, 243, 244, 246, 248, 249, 250, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 472, 476, 477, 478, 484, 485, 490, 493, 497, 498, 499, 500, 503, 504, 505, 510, 511, 513, 514, 515, 517, 518, 519, 520], "hadoop": [1, 478], "tmp": [1, 81, 196, 204, 334, 449, 457, 478, 510], "dir": [1, 478], "via": [1, 9, 15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 81, 115, 204, 218, 262, 267, 269, 270, 273, 275, 277, 279, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 334, 368, 457, 472, 478], "configur": [1, 67, 112, 191, 233, 244, 254, 319, 342, 365, 445, 478, 488, 499], "note": [1, 7, 8, 9, 17, 18, 23, 28, 36, 44, 49, 50, 56, 79, 81, 91, 92, 95, 99, 101, 103, 106, 107, 110, 112, 117, 118, 120, 125, 140, 145, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 205, 218, 221, 233, 234, 244, 254, 259, 261, 262, 269, 270, 275, 280, 288, 297, 302, 303, 309, 312, 332, 334, 343, 344, 347, 351, 353, 355, 359, 360, 363, 365, 370, 371, 373, 379, 394, 399, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 459, 472, 475, 478, 488, 489, 499, 519], "s3": [1, 238, 478, 493], "hdf": [1, 478], "dbf": [1, 478], "dict": [1, 2, 3, 4, 81, 84, 85, 122, 128, 130, 133, 134, 139, 141, 142, 143, 145, 149, 156, 181, 182, 183, 191, 205, 218, 222, 229, 231, 233, 234, 235, 237, 244, 252, 256, 257, 258, 334, 336, 338, 374, 382, 383, 387, 388, 393, 395, 396, 397, 399, 402, 410, 434, 436, 437, 445, 459, 472, 476, 478, 484, 485, 488, 489, 490, 492, 499, 507], "custom": [1, 86, 117, 139, 140, 153, 154, 191, 207, 231, 244, 339, 370, 393, 394, 407, 408, 445, 461, 478, 485, 499], "save": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 140, 149, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 221, 231, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 394, 402, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 475, 478, 485, 510, 514], "from": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 148, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 218, 223, 227, 231, 233, 234, 235, 237, 238, 242, 243, 244, 246, 247, 248, 249, 250, 255, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 466, 472, 477, 478, 481, 484, 485, 488, 489, 490, 492, 493, 497, 498, 499, 500, 501, 503, 504, 505, 510, 513, 514, 515, 518, 519, 520], "dure": [1, 7, 28, 44, 50, 66, 92, 99, 104, 139, 140, 149, 153, 159, 160, 179, 181, 218, 231, 234, 259, 280, 297, 303, 318, 344, 351, 357, 393, 394, 402, 407, 412, 413, 432, 434, 472, 478, 485, 510], "annotator_log": [1, 478], "print": [1, 87, 238, 340, 342, 478, 493], "jvm": [1, 185, 439, 478], "output": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 214, 218, 223, 231, 233, 234, 235, 242, 243, 248, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 467, 472, 477, 478, 485, 488, 489, 490, 497, 498, 503, 510, 513, 514, 515], "real": [1, 140, 169, 171, 172, 173, 175, 231, 394, 423, 425, 426, 427, 429, 478, 485, 510], "time": [1, 28, 44, 50, 61, 91, 95, 100, 116, 118, 119, 125, 131, 149, 157, 160, 181, 194, 280, 297, 303, 313, 343, 347, 352, 369, 371, 372, 379, 384, 402, 411, 413, 434, 448, 478, 513, 514, 518, 519], "int": [1, 2, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 123, 125, 127, 131, 135, 137, 139, 140, 143, 145, 148, 149, 151, 153, 154, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 186, 190, 191, 194, 218, 231, 233, 234, 242, 246, 256, 258, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 313, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 341, 343, 344, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 376, 379, 381, 384, 389, 391, 393, 394, 397, 399, 401, 402, 405, 407, 408, 411, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 440, 444, 445, 448, 472, 478, 485, 488, 489, 497, 500], "level": [1, 16, 28, 44, 50, 93, 94, 105, 110, 111, 115, 117, 119, 122, 139, 140, 149, 181, 235, 246, 268, 280, 297, 303, 345, 346, 358, 363, 364, 368, 370, 372, 374, 393, 394, 402, 434, 478, 500], "return": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 128, 130, 134, 135, 137, 139, 140, 142, 145, 151, 153, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 189, 191, 194, 197, 204, 205, 218, 221, 222, 223, 225, 229, 233, 234, 237, 238, 243, 244, 246, 247, 248, 249, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 325, 326, 327, 328, 329, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 381, 382, 383, 388, 389, 391, 393, 394, 396, 399, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 443, 445, 448, 450, 457, 459, 472, 475, 476, 477, 478, 479, 484, 488, 489, 492, 493, 498, 499, 500, 501, 503, 504], "initi": [1, 100, 116, 159, 160, 173, 181, 190, 208, 218, 243, 246, 247, 248, 249, 352, 369, 412, 413, 427, 434, 444, 462, 472, 478, 498, 500, 501, 503, 504, 510], "session": [1, 244, 246, 247, 248, 249, 255, 478, 499, 500, 501, 503, 504], "sinc": [1, 87, 107, 125, 164, 165, 254, 340, 342, 360, 379, 417, 419, 478, 514, 515, 519], "2": [1, 7, 8, 11, 28, 44, 50, 51, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 85, 91, 92, 93, 94, 95, 97, 98, 103, 104, 109, 110, 115, 118, 119, 120, 122, 123, 125, 131, 132, 133, 134, 135, 138, 140, 145, 146, 149, 153, 156, 159, 160, 161, 163, 164, 165, 166, 169, 172, 173, 179, 181, 182, 183, 192, 205, 218, 223, 227, 237, 238, 244, 247, 250, 254, 259, 261, 264, 280, 297, 303, 304, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 338, 343, 344, 345, 346, 347, 349, 350, 355, 357, 362, 363, 368, 371, 372, 373, 374, 376, 379, 384, 386, 387, 388, 389, 392, 394, 399, 400, 402, 407, 412, 413, 414, 416, 417, 419, 420, 423, 426, 427, 432, 434, 436, 446, 459, 472, 477, 478, 481, 492, 493, 499, 501, 505, 513, 514, 519], "python": [1, 127, 233, 255, 381, 478, 488], "deprec": [1, 254, 478], "you": [1, 17, 18, 23, 36, 49, 56, 77, 81, 84, 85, 86, 88, 95, 97, 99, 101, 109, 110, 112, 123, 131, 141, 145, 162, 166, 168, 172, 174, 199, 201, 205, 207, 218, 231, 235, 238, 243, 244, 248, 250, 254, 269, 270, 275, 288, 302, 309, 312, 330, 334, 336, 338, 339, 341, 342, 347, 349, 351, 353, 362, 363, 365, 376, 384, 395, 399, 415, 420, 422, 426, 428, 452, 454, 459, 461, 472, 478, 485, 490, 493, 498, 499, 503, 505, 510, 512, 514, 515, 518, 519, 520], "ar": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 91, 92, 93, 95, 96, 98, 99, 103, 104, 105, 108, 110, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 127, 128, 131, 133, 135, 138, 140, 141, 142, 143, 145, 151, 153, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 184, 194, 199, 204, 205, 207, 208, 209, 217, 218, 219, 223, 231, 233, 234, 238, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 342, 343, 344, 345, 347, 348, 350, 351, 355, 357, 358, 361, 363, 366, 367, 368, 370, 371, 372, 373, 374, 376, 379, 381, 382, 384, 387, 389, 392, 394, 395, 396, 397, 399, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 438, 440, 448, 452, 457, 459, 461, 462, 463, 471, 472, 473, 477, 478, 485, 488, 489, 493, 504, 505, 510, 511, 512, 513, 514, 515, 518, 519, 520], "consid": [1, 86, 117, 123, 125, 145, 157, 159, 160, 162, 166, 168, 174, 181, 182, 183, 185, 189, 218, 233, 234, 238, 254, 312, 339, 370, 376, 379, 399, 412, 413, 415, 420, 422, 428, 434, 436, 437, 439, 443, 472, 478, 488, 493], "stick": [1, 254, 478], "lower": [1, 87, 91, 125, 145, 179, 181, 197, 254, 340, 343, 379, 399, 432, 434, 450, 478], "current": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 88, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 125, 130, 131, 132, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 186, 205, 209, 214, 218, 221, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 341, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 379, 383, 384, 386, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 459, 463, 467, 472, 475, 478, 513, 514, 515], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 244, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 316, 318, 319, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 499, 500, 501, 503, 504, 507, 508, 510, 513, 514], "dataformat": [2, 3, 4, 9, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 122, 123, 128, 130, 131, 132, 133, 134, 139, 140, 143, 149, 156, 161, 173, 177, 182, 183, 191, 194, 196, 198, 200, 201, 204, 206, 207, 209, 233, 235, 242, 243, 244, 246, 247, 248, 249, 250, 256, 257, 258, 262, 313, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 374, 376, 382, 383, 384, 386, 387, 388, 393, 394, 397, 402, 410, 414, 427, 431, 436, 437, 445, 448, 449, 451, 453, 454, 457, 460, 461, 463, 488, 490, 497, 498, 499, 500, 501, 503, 504, 505, 511, 520], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 377, 470, 482, 502, 509, 510, 518, 520], "begin": [2, 63, 86, 88, 138, 164, 189, 191, 197, 198, 206, 223, 256, 316, 339, 341, 392, 417, 443, 445, 450, 451, 460, 477, 513], "end": [2, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 63, 75, 86, 88, 140, 145, 146, 154, 159, 160, 161, 163, 171, 177, 189, 191, 194, 198, 206, 207, 218, 223, 230, 231, 233, 246, 256, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 316, 328, 339, 341, 394, 399, 400, 408, 412, 413, 414, 416, 425, 431, 443, 445, 448, 451, 460, 461, 472, 477, 485, 488, 500, 510, 513, 515], "metadata": [2, 3, 4, 51, 63, 82, 88, 92, 125, 134, 139, 140, 142, 151, 198, 200, 204, 205, 206, 218, 223, 231, 233, 235, 238, 243, 244, 256, 257, 258, 304, 316, 335, 341, 344, 379, 388, 393, 394, 396, 405, 451, 453, 457, 459, 460, 472, 477, 485, 488, 493, 498, 499, 513, 515], "object": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 139, 140, 142, 145, 151, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 184, 185, 194, 205, 215, 216, 217, 218, 219, 221, 231, 237, 238, 252, 253, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 393, 394, 396, 399, 405, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 438, 439, 448, 471, 473, 480, 481, 485, 513, 514], "repres": [2, 3, 4, 84, 85, 91, 98, 104, 108, 113, 114, 120, 122, 123, 130, 134, 135, 145, 146, 163, 169, 191, 231, 237, 256, 257, 258, 336, 338, 343, 350, 357, 361, 366, 367, 373, 374, 376, 383, 388, 389, 399, 400, 416, 423, 445, 485, 492, 514], "detail": [2, 3, 4, 9, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 113, 118, 119, 125, 142, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 256, 257, 258, 262, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 366, 371, 372, 379, 396, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "type": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 218, 223, 225, 232, 233, 234, 235, 237, 240, 241, 242, 243, 248, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 472, 477, 479, 487, 488, 489, 490, 492, 495, 496, 497, 498, 503, 513, 514, 517], "possibl": [2, 3, 4, 60, 61, 97, 99, 118, 119, 122, 153, 181, 183, 198, 206, 207, 217, 218, 219, 231, 256, 257, 258, 312, 349, 351, 371, 372, 374, 407, 434, 437, 451, 460, 461, 471, 472, 473, 485, 510], "valu": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 94, 97, 103, 104, 108, 113, 114, 115, 118, 122, 123, 125, 127, 128, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 186, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 214, 217, 218, 219, 221, 228, 231, 233, 234, 235, 241, 242, 243, 244, 256, 257, 258, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 341, 346, 349, 355, 357, 361, 366, 367, 368, 371, 374, 376, 379, 381, 382, 384, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 411, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 439, 440, 444, 445, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 467, 471, 472, 473, 475, 483, 485, 488, 489, 490, 497, 498, 499, 510, 520], "document": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 205, 206, 207, 209, 210, 211, 215, 231, 232, 233, 234, 235, 237, 242, 243, 244, 246, 247, 248, 250, 254, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 459, 460, 461, 463, 464, 468, 485, 487, 488, 489, 490, 492, 497, 498, 499, 500, 501, 503, 505, 510, 514, 515, 517, 518, 519], "wordpiec": [2, 211, 215, 256, 468], "word_embed": [2, 5, 90, 91, 93, 96, 97, 98, 99, 103, 105, 110, 112, 116, 118, 120, 139, 140, 149, 186, 211, 215, 256, 343, 345, 348, 349, 350, 351, 355, 356, 358, 363, 365, 369, 371, 373, 377, 393, 394, 402, 468], "sentence_embed": [2, 5, 28, 44, 50, 90, 92, 94, 95, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 119, 146, 179, 211, 215, 231, 256, 280, 297, 303, 344, 346, 347, 352, 353, 354, 356, 357, 359, 360, 361, 362, 364, 366, 367, 368, 372, 377, 400, 432, 468, 485, 510, 514], "categori": [2, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 66, 67, 78, 80, 211, 215, 231, 256, 267, 269, 270, 273, 275, 277, 279, 280, 282, 284, 286, 288, 292, 295, 297, 300, 302, 303, 307, 309, 310, 318, 319, 331, 333, 468, 485, 510, 514], "date": [2, 61, 82, 131, 132, 133, 207, 211, 215, 256, 313, 335, 384, 386, 387, 461, 468], "entiti": [2, 10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 63, 78, 82, 96, 121, 122, 123, 129, 130, 134, 136, 137, 138, 139, 140, 141, 142, 188, 192, 200, 205, 211, 215, 237, 252, 256, 263, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311, 316, 331, 335, 348, 374, 375, 376, 383, 388, 390, 391, 392, 393, 394, 395, 396, 441, 446, 453, 459, 468, 492, 507], "chunk": [2, 10, 11, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 60, 61, 82, 86, 88, 92, 97, 100, 116, 122, 125, 130, 133, 134, 135, 138, 159, 160, 188, 192, 197, 200, 211, 215, 223, 231, 232, 234, 235, 249, 252, 256, 263, 264, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 304, 305, 306, 312, 313, 335, 339, 341, 344, 349, 352, 369, 374, 379, 383, 387, 388, 389, 392, 412, 413, 441, 446, 450, 453, 468, 477, 485, 487, 490, 504, 510, 520], "named_ent": [2, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 123, 138, 139, 140, 141, 142, 149, 205, 211, 215, 237, 256, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311, 376, 392, 393, 394, 395, 396, 402, 459, 468, 492], "negex": [2, 211, 215, 256, 468], "labeled_depend": [2, 85, 123, 211, 215, 256, 338, 468], "languag": [2, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 131, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 191, 194, 197, 206, 207, 210, 211, 215, 218, 233, 235, 238, 252, 256, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 380, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 445, 448, 450, 460, 461, 464, 468, 472, 488, 490, 493, 507, 514], "keyword": [2, 124, 125, 156, 252, 256, 377, 378, 379, 410, 507], "dummi": [2, 87, 211, 215, 253, 256, 340, 468, 508], "first": [2, 98, 100, 101, 103, 104, 109, 113, 116, 118, 119, 125, 133, 139, 140, 141, 153, 161, 168, 169, 170, 171, 175, 176, 177, 179, 181, 185, 190, 199, 207, 210, 217, 218, 254, 256, 312, 350, 352, 353, 355, 357, 362, 366, 369, 371, 372, 379, 387, 393, 394, 395, 407, 414, 422, 423, 424, 425, 429, 430, 431, 432, 434, 439, 444, 452, 461, 464, 471, 472, 510, 514, 515, 519], "charact": [2, 13, 19, 37, 45, 87, 103, 105, 122, 127, 133, 135, 143, 153, 154, 181, 182, 183, 190, 191, 194, 200, 233, 234, 256, 265, 271, 289, 298, 340, 355, 358, 374, 381, 387, 389, 397, 407, 408, 434, 436, 437, 444, 445, 448, 453, 488], "last": [2, 92, 106, 108, 113, 114, 131, 132, 159, 160, 188, 207, 218, 250, 256, 344, 359, 361, 366, 367, 384, 386, 412, 413, 441, 461, 472, 505, 518], "string": [2, 9, 13, 19, 28, 37, 44, 45, 50, 60, 63, 84, 87, 122, 133, 135, 141, 143, 154, 156, 159, 160, 177, 179, 183, 185, 189, 197, 198, 200, 204, 205, 206, 207, 218, 233, 234, 235, 242, 244, 256, 262, 265, 271, 280, 289, 297, 298, 303, 312, 316, 336, 340, 374, 387, 389, 395, 397, 408, 412, 413, 431, 437, 439, 443, 450, 451, 453, 457, 459, 460, 461, 472, 488, 489, 490, 497, 499, 518], "associ": [2, 3, 4, 44, 115, 122, 133, 138, 145, 231, 256, 257, 258, 297, 368, 374, 387, 392, 399, 485], "list": [2, 3, 4, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 122, 123, 125, 127, 131, 133, 137, 138, 140, 141, 142, 143, 145, 148, 153, 154, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 185, 186, 189, 191, 199, 200, 205, 206, 214, 218, 223, 229, 231, 233, 235, 237, 238, 244, 250, 252, 256, 257, 258, 259, 261, 262, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 343, 344, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 362, 363, 364, 368, 371, 372, 373, 374, 376, 379, 381, 384, 387, 391, 392, 394, 395, 396, 397, 399, 401, 407, 408, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 439, 440, 443, 445, 452, 453, 459, 460, 467, 472, 477, 484, 485, 488, 490, 492, 493, 499, 505, 507, 509, 514], "vector": [2, 44, 93, 94, 95, 97, 98, 100, 101, 103, 115, 116, 117, 179, 199, 200, 256, 297, 345, 346, 347, 349, 350, 352, 353, 355, 368, 369, 370, 432, 452, 453, 513], "where": [2, 44, 81, 98, 102, 103, 113, 122, 125, 128, 130, 133, 134, 135, 145, 151, 154, 156, 161, 164, 177, 179, 182, 183, 194, 197, 248, 256, 297, 334, 350, 354, 355, 366, 374, 379, 382, 383, 387, 388, 389, 399, 405, 408, 410, 414, 417, 431, 432, 436, 437, 448, 450, 503], "applic": [2, 77, 80, 114, 125, 161, 165, 166, 169, 171, 172, 173, 175, 217, 230, 231, 243, 256, 330, 333, 367, 379, 414, 419, 420, 423, 425, 426, 427, 429, 471, 485, 486, 498, 510, 512], "static": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 221, 237, 238, 253, 256, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 475, 492, 493, 508, 514], "sql": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 130, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 205, 221, 223, 229, 233, 237, 244, 246, 247, 248, 249, 256, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 383, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 457, 459, 475, 477, 484, 488, 492, 499, 500, 501, 503, 504], "creat": [2, 3, 4, 28, 44, 50, 69, 77, 88, 93, 94, 100, 110, 113, 116, 117, 123, 140, 145, 146, 149, 151, 159, 167, 170, 175, 188, 194, 205, 208, 223, 234, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 280, 297, 303, 321, 330, 341, 342, 345, 346, 352, 363, 366, 369, 370, 376, 394, 399, 400, 402, 405, 412, 421, 424, 429, 441, 448, 459, 462, 477, 500, 501, 503, 504, 507, 508, 514, 515, 518, 520], "new": [2, 3, 4, 10, 50, 63, 78, 82, 91, 93, 94, 98, 103, 104, 105, 117, 120, 141, 142, 145, 159, 161, 164, 166, 171, 172, 177, 181, 200, 229, 234, 254, 256, 257, 258, 263, 303, 316, 331, 335, 343, 345, 346, 350, 355, 357, 358, 370, 373, 395, 396, 399, 401, 402, 412, 414, 417, 420, 425, 426, 431, 434, 440, 453, 467, 472, 483, 484, 489, 513, 514], "differ": [2, 3, 4, 67, 78, 84, 85, 102, 103, 104, 110, 111, 118, 120, 125, 131, 153, 154, 163, 170, 175, 181, 191, 194, 205, 231, 240, 256, 257, 258, 319, 331, 336, 338, 354, 355, 357, 363, 364, 371, 373, 379, 384, 407, 408, 416, 424, 429, 434, 445, 448, 459, 485, 496, 518], "all": [2, 3, 4, 5, 9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 91, 93, 94, 95, 96, 108, 112, 113, 114, 117, 120, 122, 127, 131, 135, 140, 143, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 185, 190, 194, 199, 201, 217, 218, 231, 234, 238, 254, 256, 257, 258, 262, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 304, 307, 309, 310, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 340, 343, 345, 346, 347, 348, 361, 365, 366, 367, 370, 373, 374, 377, 381, 384, 394, 397, 399, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 439, 444, 448, 452, 454, 471, 472, 485, 489, 493, 509, 514, 519], "should": [2, 3, 4, 11, 28, 44, 50, 67, 78, 79, 80, 81, 86, 92, 95, 100, 101, 109, 116, 118, 125, 127, 134, 135, 139, 140, 145, 149, 153, 154, 159, 160, 168, 181, 190, 205, 207, 214, 218, 237, 246, 247, 254, 256, 257, 258, 264, 280, 297, 303, 312, 313, 319, 331, 332, 333, 334, 339, 342, 344, 347, 352, 353, 362, 369, 371, 379, 381, 388, 389, 393, 394, 399, 402, 407, 408, 412, 413, 422, 432, 434, 444, 459, 461, 466, 467, 472, 480, 484, 492, 500, 501], "newli": [2, 3, 4, 114, 256, 257, 258, 367], "structtyp": [2, 223, 253, 256], "schema": [2, 81, 138, 231, 253, 256, 334, 392, 485, 508, 510], "look": [2, 140, 160, 171, 172, 173, 175, 182, 256, 342, 394, 413, 425, 426, 427, 429, 436, 513], "like": [2, 7, 14, 20, 24, 28, 29, 33, 38, 41, 46, 52, 53, 63, 79, 87, 91, 95, 97, 99, 105, 112, 120, 123, 125, 133, 138, 145, 154, 157, 159, 160, 163, 164, 167, 170, 175, 181, 191, 194, 218, 231, 256, 259, 266, 272, 276, 280, 281, 285, 291, 294, 299, 305, 306, 316, 332, 340, 343, 347, 349, 351, 358, 365, 373, 376, 379, 387, 392, 399, 408, 411, 412, 413, 416, 417, 421, 424, 429, 434, 445, 448, 472, 485, 510, 512, 513], "struct": [2, 198, 204, 206, 233, 244, 256, 451, 457, 460, 488, 499], "containsnul": [2, 44, 196, 198, 204, 206, 233, 244, 256, 297, 449, 451, 457, 460, 488, 499], "true": [2, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 66, 67, 77, 78, 79, 80, 81, 86, 87, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 130, 131, 132, 134, 138, 140, 143, 153, 154, 156, 159, 164, 167, 179, 181, 182, 185, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 218, 223, 231, 233, 234, 238, 242, 243, 244, 246, 247, 249, 250, 253, 256, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 318, 319, 330, 331, 332, 333, 334, 339, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 383, 384, 386, 388, 392, 394, 397, 407, 408, 412, 421, 432, 434, 436, 444, 445, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 463, 472, 485, 488, 489, 493, 497, 498, 499, 500, 501, 504, 505, 510, 514, 515], "nullabl": [2, 44, 196, 198, 204, 206, 233, 242, 244, 256, 297, 449, 451, 457, 460, 488, 497, 499], "integ": [2, 67, 78, 79, 80, 108, 113, 114, 198, 204, 206, 218, 242, 256, 319, 331, 332, 333, 361, 366, 367, 451, 457, 460, 497], "map": [2, 11, 44, 92, 95, 117, 122, 145, 151, 159, 160, 181, 198, 204, 206, 207, 218, 223, 229, 233, 244, 252, 256, 264, 297, 344, 347, 370, 374, 399, 401, 402, 405, 412, 413, 434, 451, 457, 460, 461, 467, 472, 477, 483, 484, 488, 489, 499, 513], "kei": [2, 7, 67, 70, 84, 85, 110, 111, 118, 119, 128, 142, 170, 198, 204, 205, 206, 231, 233, 237, 244, 252, 256, 259, 319, 323, 336, 338, 363, 364, 371, 372, 382, 396, 424, 451, 457, 459, 460, 485, 488, 492, 499, 507, 510], "valuecontainsnul": [2, 198, 204, 206, 233, 244, 256, 451, 457, 460, 488, 499], "arrai": [2, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 127, 128, 135, 140, 148, 151, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 188, 189, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 223, 233, 235, 244, 256, 259, 261, 262, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 372, 373, 381, 382, 389, 394, 401, 405, 407, 408, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 441, 443, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 477, 488, 490, 499, 515, 518], "element": [2, 44, 135, 145, 179, 196, 198, 204, 206, 207, 233, 234, 235, 244, 256, 297, 389, 399, 432, 449, 451, 457, 460, 461, 488, 489, 499], "float": [2, 3, 7, 8, 9, 28, 44, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 92, 127, 139, 140, 142, 145, 148, 149, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 194, 196, 198, 199, 205, 206, 218, 233, 243, 256, 257, 259, 261, 262, 280, 297, 303, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 344, 381, 393, 394, 396, 399, 401, 402, 408, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 448, 449, 451, 452, 459, 460, 472, 488, 498], "row": [2, 51, 86, 88, 117, 153, 154, 157, 198, 206, 207, 209, 223, 233, 234, 235, 243, 246, 253, 256, 304, 339, 341, 370, 407, 408, 411, 451, 460, 461, 463, 477, 488, 489, 498, 500, 508], "column": [2, 10, 28, 44, 50, 81, 87, 117, 128, 137, 139, 140, 148, 149, 151, 157, 160, 179, 186, 191, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 210, 214, 223, 235, 237, 242, 243, 246, 248, 256, 263, 280, 297, 303, 334, 340, 370, 382, 391, 393, 394, 401, 402, 405, 411, 413, 432, 440, 445, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 464, 467, 477, 490, 492, 497, 498, 500, 503, 514], "transform": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 218, 223, 226, 229, 231, 235, 236, 237, 242, 243, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 463, 464, 472, 477, 480, 484, 485, 490, 492, 497, 498, 510, 513, 514, 515, 518, 519, 520], "an": [2, 7, 8, 9, 11, 28, 44, 50, 51, 66, 67, 70, 78, 79, 80, 84, 86, 87, 92, 96, 98, 103, 104, 105, 107, 108, 109, 113, 114, 120, 122, 125, 127, 130, 131, 132, 133, 134, 135, 139, 140, 142, 145, 149, 151, 153, 154, 156, 157, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 188, 191, 194, 197, 198, 199, 200, 201, 204, 205, 206, 207, 210, 218, 222, 223, 225, 229, 231, 235, 243, 244, 246, 247, 248, 249, 256, 259, 261, 262, 264, 280, 297, 303, 304, 312, 318, 319, 323, 331, 332, 333, 336, 339, 340, 342, 344, 348, 350, 355, 357, 358, 360, 361, 362, 366, 367, 373, 374, 379, 381, 383, 384, 386, 387, 388, 389, 393, 394, 396, 399, 401, 402, 405, 407, 408, 410, 411, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 441, 445, 448, 450, 451, 452, 453, 454, 457, 459, 460, 461, 464, 467, 472, 476, 477, 479, 483, 484, 485, 489, 498, 499, 500, 501, 503, 504, 509, 511, 513, 514, 515, 517, 518], "alreadi": [3, 123, 125, 139, 140, 141, 191, 192, 205, 237, 257, 376, 379, 393, 394, 395, 445, 446, 459, 492, 518], "load": [3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 128, 130, 134, 136, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 204, 218, 221, 235, 237, 238, 242, 243, 250, 254, 255, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 379, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 457, 472, 475, 492, 493, 497, 498, 505, 514, 517], "process": [3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 123, 125, 127, 138, 139, 140, 149, 154, 159, 160, 161, 164, 169, 173, 175, 177, 179, 191, 194, 196, 197, 198, 199, 200, 204, 206, 208, 210, 218, 231, 233, 244, 257, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 376, 379, 381, 392, 393, 394, 402, 408, 412, 413, 414, 417, 423, 427, 429, 431, 432, 448, 449, 450, 451, 452, 453, 457, 460, 462, 464, 472, 485, 488, 499, 510, 513, 514, 515, 516], "byte": [3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 127, 140, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 204, 231, 233, 235, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 381, 394, 401, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 457, 485, 488, 490], "origin": [4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 100, 105, 110, 116, 138, 154, 159, 160, 161, 204, 218, 253, 258, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 352, 358, 363, 369, 392, 408, 412, 413, 414, 457, 472], "height": [4, 67, 78, 79, 80, 204, 218, 253, 258, 319, 331, 332, 333, 457, 472], "width": [4, 67, 78, 79, 80, 92, 159, 160, 204, 218, 253, 258, 319, 331, 332, 333, 344, 412, 413, 457, 472], "nchannel": [4, 204, 253, 258, 457], "mode": [4, 28, 44, 50, 60, 71, 140, 149, 182, 198, 204, 206, 207, 231, 253, 258, 280, 297, 303, 312, 324, 394, 402, 436, 451, 457, 460, 461, 485], "imag": [4, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 160, 173, 204, 205, 211, 215, 218, 237, 253, 258, 313, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 354, 413, 427, 457, 459, 468, 472, 492, 508], "uri": [4, 238, 258, 493], "pixel": [4, 78, 258, 331], "number": [4, 9, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 135, 137, 139, 140, 145, 148, 151, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 186, 194, 218, 234, 242, 246, 247, 258, 262, 269, 270, 275, 279, 280, 284, 288, 297, 302, 303, 309, 313, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 336, 338, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 389, 391, 393, 394, 399, 401, 405, 407, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 440, 448, 472, 497, 500, 501], "color": [4, 258], "channel": [4, 67, 78, 79, 80, 181, 218, 258, 319, 331, 332, 333, 434, 472], "opencv": [4, 204, 258, 457], "hubert_for_ctc": [5, 6, 260, 377], "hubertforctc": [5, 6, 7, 259], "wav2vec2_for_ctc": [5, 6, 260, 377], "wav2vec2forctc": [5, 6, 8, 261], "whisper_for_ctc": [5, 6, 260, 377], "whisperforctc": [5, 6, 9, 262], "albert_for_multiple_choic": [5, 12, 290, 377], "albertformultiplechoic": [5, 12, 13, 265], "albert_for_question_answ": [5, 12, 290, 377], "albertforquestionansw": [5, 12, 14, 266], "albert_for_sequence_classif": [5, 12, 290, 377], "albertforsequenceclassif": [5, 12, 15, 30, 267, 282], "albert_for_token_classif": [5, 12, 290, 377], "albertfortokenclassif": [5, 12, 16, 91, 268, 343], "albert_for_zero_shot_classif": [5, 12, 290, 377], "albertforzeroshotclassif": [5, 12, 17, 269], "bart_for_zero_shot_classif": [5, 12, 290, 377], "bartforzeroshotclassif": [5, 12, 17, 18, 269, 270], "bert_for_multiple_choic": [5, 12, 290, 377], "bertformultiplechoic": [5, 12, 19, 271], "bert_for_question_answ": [5, 12, 290, 377], "bertforquestionansw": [5, 12, 13, 20, 51, 265, 272, 304], "bert_for_sequence_classif": [5, 12, 290, 377], "bertforsequenceclassif": [5, 12, 21, 23, 273, 275], "bert_for_token_classif": [5, 12, 290, 377], "bertfortokenclassif": [5, 12, 22, 274], "bert_for_zero_shot_classif": [5, 12, 290, 377], "bertforzeroshotclassif": [5, 12, 23, 275], "camembert_for_question_answ": [5, 12, 290, 377], "camembertforquestionansw": [5, 12, 24, 276], "camembert_for_sequence_classif": [5, 12, 290, 377], "camembertforsequenceclassif": [5, 12, 25, 27, 277, 279], "camembert_for_token_classif": [5, 12, 290, 377], "camembertfortokenclassif": [5, 12, 26, 278], "camembert_for_zero_shot_classif": [5, 12, 290, 377], "camembertforzeroshotclassif": [5, 12, 27, 279], "classifierdlapproach": [5, 12, 28, 44, 280, 297, 514], "classifierdlmodel": [5, 12, 28, 44, 280, 297, 514], "deberta_for_question_answ": [5, 12, 290, 377], "debertaforquestionansw": [5, 12, 29, 281], "deberta_for_sequence_classif": [5, 12, 290, 377], "debertaforsequenceclassif": [5, 12, 27, 30, 32, 279, 282, 284], "deberta_for_token_classif": [5, 12, 290, 377], "debertafortokenclassif": [5, 12, 31, 283], "deberta_for_zero_shot_classif": [5, 12, 290, 377], "debertaforzeroshotclassif": [5, 12, 32, 284], "distil_bert_for_question_answ": [5, 12, 290, 377], "distilbertforquestionansw": [5, 12, 33, 285], "distil_bert_for_sequence_classif": [5, 12, 290, 377], "distilbertforsequenceclassif": [5, 12, 17, 34, 36, 269, 286, 288], "distil_bert_for_token_classif": [5, 12, 290, 377], "distilbertfortokenclassif": [5, 12, 35, 287], "distil_bert_for_zero_shot_classif": [5, 12, 290, 377], "distilbertforzeroshotclassif": [5, 12, 36, 288], "distilbert_for_multiple_choic": [5, 12, 290, 377], "distilbertformultiplechoic": [5, 12, 37, 289], "longformer_for_question_answ": [5, 12, 290, 377], "longformerforquestionansw": [5, 12, 38, 291], "longformer_for_sequence_classif": [5, 12, 290, 377], "longformerforsequenceclassif": [5, 12, 39, 292], "longformer_for_token_classif": [5, 12, 290, 377], "longformerfortokenclassif": [5, 12, 40, 293], "mpnet_for_question_answ": [5, 12, 290, 377], "mpnetforquestionansw": [5, 12, 41, 294], "mpnet_for_sequence_classif": [5, 12, 290, 377], "mpnetforsequenceclassif": [5, 12, 42, 295], "mpnet_for_token_classif": [5, 12, 290, 377], "mpnetfortokenclassif": [5, 12, 43, 296], "multi_classifier_dl": [5, 12, 290, 377], "multiclassifierdlapproach": [5, 12, 28, 44, 231, 280, 297, 485, 510], "multiclassifierdlmodel": [5, 12, 28, 44, 280, 297], "roberta_for_multiple_choic": [5, 12, 290, 377], "robertaformultiplechoic": [5, 12, 45, 298], "roberta_for_question_answ": [5, 12, 290, 377], "robertaforquestionansw": [5, 12, 45, 46, 142, 298, 299, 396], "roberta_for_sequence_classif": [5, 12, 290, 377], "robertaforsequenceclassif": [5, 12, 47, 49, 300, 302], "roberta_for_token_classif": [5, 12, 290, 377], "robertafortokenclassif": [5, 12, 48, 301], "roberta_for_zero_shot_classif": [5, 12, 290, 377], "robertaforzeroshotclassif": [5, 12, 49, 302], "sentiment_dl": [5, 12, 290, 377], "sentimentdlapproach": [5, 12, 28, 44, 50, 280, 297, 303], "sentimentdlmodel": [5, 12, 28, 44, 50, 280, 297, 303], "tapas_for_question_answ": [5, 12, 290, 377], "tapasforquestionansw": [5, 12, 51, 304], "xlm_roberta_for_multiple_choic": [5, 12, 290, 377], "xlmrobertaformultiplechoic": [5, 12, 52, 305], "xlm_roberta_for_question_answ": [5, 12, 290, 377], "xlmrobertaforquestionansw": [5, 12, 53, 306], "xlm_roberta_for_sequence_classif": [5, 12, 290, 377], "xlmrobertaforsequenceclassif": [5, 12, 54, 56, 307, 309], "xlm_roberta_for_token_classif": [5, 12, 290, 377], "xlmrobertafortokenclassif": [5, 12, 43, 55, 296, 308], "xlm_roberta_for_zero_shot_classif": [5, 12, 290, 377], "xlmrobertaforzeroshotclassif": [5, 12, 56, 309], "xlnet_for_sequence_classif": [5, 12, 290, 377], "xlnetforsequenceclassif": [5, 12, 57, 310], "xlnet_for_token_classif": [5, 12, 290, 377], "xlnetfortokenclassif": [5, 12, 58, 311], "extractor": [5, 59, 130, 134, 188, 314, 377, 383, 388, 441], "spanbert_coref": [5, 62, 315, 377], "spanbertcorefmodel": [5, 62, 63, 316], "blip_for_question_answ": [5, 64, 322, 377], "blipforquestionansw": [5, 64, 65, 317], "clip_for_zero_shot_classif": [5, 64, 322, 377], "clipforzeroshotclassif": [5, 64, 65, 66, 71, 72, 73, 75, 76, 317, 318, 324, 325, 326, 328, 329], "convnext_for_image_classif": [5, 64, 322, 377], "convnextforimageclassif": [5, 64, 67, 319], "florence2_transform": [5, 64, 322, 377], "florence2transform": [5, 64, 68, 320], "gemma3_for_multimod": [5, 64, 322, 377], "gemma3formultimod": [5, 64, 69, 321], "internvl_for_multimod": [5, 64, 322, 377], "internvlformultimod": [5, 64, 70, 323], "janus_for_multimod": [5, 64, 322, 377], "janusformultimod": [5, 64, 71, 324], "llava_for_multimod": [5, 64, 322, 377], "llavaformultimod": [5, 64, 72, 325], "mllama_for_multimod": [5, 64, 322, 377], "mllamaformultimod": [5, 64, 73, 326], "paligemma_for_multimod": [5, 64, 322, 377], "paligemmaformultimod": [5, 64, 74, 327], "phi3_vision_for_multimod": [5, 64, 322, 377], "phi3vis": [5, 64, 75, 328], "qwen2vl_transform": [5, 64, 322, 377], "qwen2vltransform": [5, 64, 76, 329], "smolvlm_transform": [5, 64, 322, 377], "smolvlmtransform": [5, 64, 77, 330], "swin_for_image_classif": [5, 64, 322, 377], "swinforimageclassif": [5, 64, 78, 331], "vision_encoder_decoder_for_image_capt": [5, 64, 322, 377], "visionencoderdecoderforimagecapt": [5, 64, 79, 332], "vit_for_image_classif": [5, 64, 322, 377], "vitforimageclassif": [5, 64, 80, 333], "dependency_pars": [5, 83, 238, 337, 377, 493, 519], "dependencyparserapproach": [5, 83, 84, 247, 336, 501, 520], "dependencyparsermodel": [5, 83, 84, 85, 123, 336, 338, 376], "typed_dependency_pars": [5, 83, 337, 377], "typeddependencyparserapproach": [5, 83, 84, 85, 336, 338], "typeddependencyparsermodel": [5, 83, 85, 123, 338, 376], "albert_embed": [5, 90, 356, 377], "albertembed": [5, 16, 90, 91, 268, 343], "auto_gguf_embed": [5, 90, 356, 377], "autoggufembed": [5, 90, 92, 344], "bert_embed": [5, 90, 356, 377], "bertembed": [5, 90, 93, 97, 104, 112, 140, 199, 345, 349, 357, 365, 394, 452], "bert_sentence_embed": [5, 90, 356, 377], "bertsentenceembed": [5, 44, 50, 90, 94, 111, 119, 297, 303, 346, 364, 372], "bge_embed": [5, 90, 356, 377], "bgeembed": [5, 90, 95, 347], "camembert_embed": [5, 90, 356, 377], "camembertembed": [5, 90, 96, 348], "chunk_embed": [5, 90, 356, 377], "chunkembed": [5, 90, 97, 199, 349, 452], "deberta_embed": [5, 90, 356, 377], "debertaembed": [5, 90, 98, 350], "distil_bert_embed": [5, 90, 356, 377], "distilbertembed": [5, 90, 99, 351], "doc2vec": [5, 90, 356, 377], "doc2vecapproach": [5, 90, 100, 352], "doc2vecmodel": [5, 90, 100, 352], "e5_embed": [5, 90, 356, 377], "e5embed": [5, 90, 101, 107, 109, 179, 353, 360, 362, 432], "e5v_embed": [5, 90, 356, 377], "e5vembed": [5, 90, 102, 253, 354, 508], "elmo_embed": [5, 90, 356, 377], "elmoembed": [5, 90, 103, 355], "instructor_embed": [5, 90, 356, 377], "instructorembed": [5, 90, 104, 357], "longformer_embed": [5, 90, 356, 377], "longformerembed": [5, 90, 105, 358], "minilm_embed": [5, 90, 356, 377], "minilmembed": [5, 90, 106, 359], "mpnet_embed": [5, 90, 356, 377], "mpnetembed": [5, 90, 107, 360], "mxbai_embed": [5, 90, 356, 377], "mxbaiembed": [5, 90, 108, 361], "nomic_embed": [5, 90, 356, 377], "nomicembed": [5, 90, 109, 362], "roberta_embed": [5, 90, 356, 377], "robertaembed": [5, 90, 110, 118, 363, 371], "roberta_sentence_embed": [5, 90, 356, 377], "robertasentenceembed": [5, 90, 111, 364], "sentenceembed": [5, 28, 44, 50, 90, 112, 117, 199, 280, 297, 303, 365, 370, 452], "snowflake_embed": [5, 90, 356, 377], "snowflakeembed": [5, 90, 113, 366], "uae_embed": [5, 90, 356, 377], "uaeembed": [5, 90, 114, 367], "universal_sentence_encod": [5, 90, 356, 377], "universalsentenceencod": [5, 28, 44, 50, 90, 115, 231, 280, 297, 303, 368, 485, 510, 514], "word2vec": [5, 90, 100, 352, 356, 377], "word2vecapproach": [5, 90, 116, 369], "word2vecmodel": [5, 90, 116, 369], "wordembeddingsmodel": [5, 90, 97, 112, 117, 123, 139, 140, 141, 199, 349, 365, 370, 376, 393, 394, 395, 452], "xlm_roberta_embed": [5, 90, 356, 377], "xlmrobertaembed": [5, 90, 118, 371], "xlm_roberta_sentence_embed": [5, 90, 356, 377], "xlmrobertasentenceembed": [5, 90, 119, 372], "xlnet_embed": [5, 90, 356, 377], "xlnetembed": [5, 90, 120, 373], "entity_rul": [5, 121, 375, 377], "entityrulerapproach": [5, 121, 122, 374], "entityrulermodel": [5, 121, 122, 374], "yake_keyword_extract": [5, 124, 377, 378], "yakekeywordextract": [5, 124, 125, 379], "language_detector_dl": [5, 126, 377, 380], "languagedetectordl": [5, 126, 127, 381], "big_text_match": [5, 129, 377, 385], "bigtextmatch": [5, 129, 130, 134, 383, 388], "bigtextmatchermodel": [5, 129, 130, 383], "date_match": [5, 129, 377, 385], "datematch": [5, 82, 129, 131, 335, 384], "datematcherutil": [5, 129, 131, 132, 384], "multi_date_match": [5, 129, 377, 385], "multidatematch": [5, 82, 129, 131, 132, 335, 384, 386], "regex_match": [5, 129, 377, 385], "regexmatch": [5, 129, 133, 387], "regexmatchermodel": [5, 129, 133, 387], "text_match": [5, 129, 377, 385], "textmatch": [5, 129, 130, 134, 188, 383, 388, 441], "textmatchermodel": [5, 129, 130, 134, 383, 388], "ner_approach": [5, 136, 377, 390], "nerapproach": [5, 136, 137, 139, 140, 391], "ner_convert": [5, 136, 377, 390], "nerconvert": [5, 97, 136, 138, 139, 140, 231, 349, 392, 393, 394, 485, 510], "ner_crf": [5, 136, 377, 390], "nercrfapproach": [5, 136, 139, 140, 393, 394], "nercrfmodel": [5, 136, 139, 140, 393, 394], "ner_dl": [5, 136, 377, 390], "nerdlapproach": [5, 136, 139, 140, 246, 393, 394, 500, 520], "nerdlmodel": [5, 123, 136, 138, 139, 140, 141, 231, 238, 376, 392, 393, 394, 395, 485, 493, 510], "ner_overwrit": [5, 136, 377, 390], "neroverwrit": [5, 136, 141, 395], "zero_shot_ner_model": [5, 136, 377, 390], "zeroshotnermodel": [5, 136, 142, 396], "openai_complet": [5, 144, 377, 398], "openaicomplet": [5, 144, 145, 399], "openai_embed": [5, 144, 377, 398], "openaiembed": [5, 144, 146, 400], "classifier_encod": [5, 147, 377, 403], "classifierencod": [5, 28, 44, 50, 147, 148, 401], "evaluation_dl_param": [5, 147, 377, 403], "evaluationdlparam": [5, 28, 44, 50, 140, 147, 149, 402], "perceptron": [5, 83, 84, 150, 336, 377, 404], "perceptronapproach": [5, 150, 151, 248, 405, 503, 520], "perceptronmodel": [5, 11, 84, 85, 123, 139, 150, 151, 246, 264, 336, 338, 376, 393, 405, 500], "sentence_detector": [5, 51, 142, 152, 304, 377, 396, 406], "sentencedetector": [5, 11, 28, 51, 63, 84, 85, 94, 97, 111, 115, 119, 123, 125, 128, 133, 135, 139, 140, 141, 142, 151, 152, 153, 154, 185, 188, 208, 210, 218, 246, 264, 280, 304, 316, 336, 338, 346, 349, 364, 368, 372, 376, 379, 382, 387, 389, 393, 394, 395, 396, 405, 407, 408, 439, 441, 462, 464, 472, 500, 514, 515], "sentencedetectorparam": [5, 152, 153, 407], "sentence_detector_dl": [5, 152, 168, 312, 377, 406, 422], "sentencedetectordlapproach": [5, 152, 154, 408], "sentencedetectordlmodel": [5, 152, 154, 168, 312, 408, 422], "sentiment_detector": [5, 155, 377, 409], "sentimentdetector": [5, 155, 156, 410], "sentimentdetectormodel": [5, 155, 156, 410], "vivekn_senti": [5, 155, 377, 409], "viveknsentimentapproach": [5, 155, 156, 157, 410, 411], "viveknsentimentmodel": [5, 155, 157, 411], "auto_gguf_model": [5, 92, 158, 344, 377, 418], "autoggufmodel": [5, 158, 159, 412], "auto_gguf_vision_model": [5, 158, 377, 418], "autoggufvisionmodel": [5, 158, 160, 413], "bart_transform": [5, 158, 377, 418], "barttransform": [5, 158, 161, 414], "cohere_transform": [5, 158, 377, 418], "coheretransform": [5, 158, 162, 415], "cpm_transform": [5, 158, 377, 418], "cpmtransform": [5, 158, 163, 416], "gpt2_transform": [5, 158, 377, 418], "gpt2transform": [5, 158, 164, 417], "llama2_transform": [5, 158, 377, 418], "llama2transform": [5, 158, 165, 419], "llama3_transform": [5, 158, 377, 418], "llama3transform": [5, 158, 166, 420], "m2m100_transform": [5, 158, 377, 418], "m2m100transform": [5, 158, 167, 421], "marian_transform": [5, 158, 377, 418], "mariantransform": [5, 60, 158, 168, 312, 422], "mistral_transform": [5, 158, 377, 418], "mistraltransform": [5, 158, 169, 423], "nllb_transform": [5, 158, 377, 418], "nllbtransform": [5, 158, 170, 424], "olmo_transform": [5, 158, 377, 418], "olmotransform": [5, 158, 171, 425], "phi2_transform": [5, 158, 377, 418], "phi2transform": [5, 158, 172, 426], "phi3_transform": [5, 158, 377, 418], "phi3transform": [5, 158, 173, 427], "phi4_transform": [5, 158, 377, 418], "phi4transform": [5, 158, 174, 428], "qwen_transform": [5, 158, 377, 418], "qwentransform": [5, 158, 175, 429], "starcoder_transform": [5, 158, 377, 418], "starcodertransform": [5, 158, 176, 430], "t5_transform": [5, 158, 377, 418], "t5transform": [5, 158, 177, 431], "document_similarity_rank": [5, 178, 377, 433], "documentsimilarityrankerapproach": [5, 178, 179, 432], "documentsimilarityrankerfinish": [5, 178, 179, 432], "documentsimilarityrankermodel": [5, 178, 179, 432], "context_spell_check": [5, 180, 377, 435], "contextspellcheckerapproach": [5, 180, 181, 182, 183, 434, 436, 437], "contextspellcheckermodel": [5, 180, 181, 182, 183, 434, 436, 437], "norvig_sweet": [5, 180, 377, 435], "norvigsweetingapproach": [5, 180, 181, 182, 183, 434, 436, 437, 520], "norvigsweetingmodel": [5, 180, 181, 182, 183, 434, 436, 437], "symmetric_delet": [5, 180, 377, 435], "symmetricdeleteapproach": [5, 180, 181, 182, 183, 434, 436, 437, 520], "symmetricdeletemodel": [5, 180, 181, 182, 183, 434, 436, 437], "chunk_token": [5, 187, 377, 442], "chunktoken": [5, 187, 188, 441], "chunktokenizermodel": [5, 187, 188, 441], "recursive_token": [5, 187, 377, 442], "recursivetoken": [5, 187, 189, 443], "recursivetokenizermodel": [5, 187, 189, 443], "regex_token": [5, 187, 377, 442], "regextoken": [5, 187, 190, 194, 444, 448, 515], "tokenizermodel": [5, 130, 187, 188, 191, 383, 445], "word_segment": [5, 193, 377, 447], "wordsegmenterapproach": [5, 193, 194, 448], "wordsegmentermodel": [5, 193, 194, 448], "inputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 209, 210, 211, 214, 232, 235, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 450, 463, 464, 467, 490], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 214, 218, 221, 223, 228, 231, 232, 234, 235, 237, 238, 240, 242, 243, 246, 248, 252, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 463, 464, 467, 472, 475, 477, 483, 485, 490, 492, 493, 497, 498, 500, 503, 507, 510, 514], "outputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 206, 207, 209, 210, 211, 214, 224, 226, 232, 235, 240, 243, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 443, 444, 445, 446, 448, 449, 450, 451, 457, 460, 461, 463, 464, 467, 480, 490, 498], "setparam": [5, 10, 81, 178, 179, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 210, 211, 213, 240, 243, 263, 334, 432, 449, 450, 451, 452, 453, 454, 457, 460, 461, 464, 466, 498], "regexpars": [5, 11, 264], "setregexpars": [5, 11, 264], "docach": [5, 81, 334], "executorcor": [5, 81, 334], "numpartit": [5, 81, 90, 100, 116, 334, 352, 369], "numwork": [5, 81, 334], "outputopt": [5, 81, 334], "persistformat": [5, 81, 334], "persistpath": [5, 81, 334], "setdocach": [5, 81, 334], "setexecutorcor": [5, 81, 334], "setnumpartit": [5, 81, 90, 100, 116, 334, 352, 369], "setnumwork": [5, 81, 334], "setoutputopt": [5, 81, 334], "setpersistformat": [5, 81, 334], "setpersistpath": [5, 81, 334], "entitynam": [5, 82, 335], "setentitynam": [5, 82, 335], "chunkoverlap": [5, 86, 339], "chunksiz": [5, 86, 339], "explodesplit": [5, 86, 88, 339, 341], "keepsepar": [5, 86, 339], "patternsareregex": [5, 86, 339], "setchunkoverlap": [5, 86, 339], "setchunks": [5, 86, 339], "setexplodesplit": [5, 86, 88, 339, 341], "setkeepsepar": [5, 86, 339], "setpatternsareregex": [5, 86, 339], "setsplitpattern": [5, 86, 187, 191, 339, 445], "settrimwhitespac": [5, 86, 88, 187, 190, 339, 341, 444], "splitpattern": [5, 86, 187, 191, 339, 445], "trimwhitespac": [5, 86, 88, 187, 190, 339, 341, 444], "action": [5, 87, 340], "encod": [5, 28, 59, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 87, 93, 94, 98, 104, 105, 109, 115, 142, 161, 167, 168, 170, 231, 280, 312, 317, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 340, 345, 346, 350, 357, 358, 362, 368, 396, 414, 421, 422, 424, 485], "lowercas": [5, 59, 60, 87, 143, 190, 194, 195, 197, 312, 340, 397, 444, 448, 450], "pattern": [5, 11, 60, 61, 86, 87, 122, 131, 133, 143, 182, 183, 187, 190, 191, 193, 194, 207, 234, 264, 312, 313, 339, 340, 374, 384, 387, 397, 436, 437, 444, 445, 448, 461], "polici": [5, 87, 340], "replac": [5, 80, 87, 98, 102, 105, 127, 128, 141, 154, 161, 182, 183, 217, 333, 340, 350, 354, 358, 381, 382, 395, 408, 414, 436, 437, 471, 514], "setact": [5, 87, 340], "setencod": [5, 59, 60, 87, 312, 340], "setlowercas": [5, 59, 60, 87, 143, 195, 197, 210, 312, 340, 397, 450, 464], "setpattern": [5, 87, 187, 190, 193, 194, 340, 444, 448], "setpolici": [5, 87, 340], "setreplac": [5, 87, 340], "numtoken": [5, 88, 341], "setnumtoken": [5, 88, 341], "settokenoverlap": [5, 88, 341], "tokenoverlap": [5, 88, 341], "delimit": [5, 13, 19, 37, 45, 117, 122, 123, 128, 129, 133, 135, 139, 143, 156, 190, 209, 234, 246, 248, 265, 271, 289, 298, 370, 374, 376, 382, 387, 389, 393, 397, 410, 444, 463, 489, 500, 503], "entitytyp": [5, 123, 376], "explodeent": [5, 123, 376], "includeedg": [5, 123, 376], "maxsentences": [5, 123, 376], "mergeent": [5, 123, 376], "mergeentitiesiobformat": [5, 123, 376], "minsentences": [5, 123, 376], "optionalinputannotatortyp": [5, 121, 122, 123, 211, 214, 374, 376, 467], "posmodel": [5, 123, 376], "relationshiptyp": [5, 123, 376], "roottoken": [5, 123, 376], "setdelimit": [5, 123, 129, 133, 135, 376, 387, 389], "setdependencyparsermodel": [5, 123, 376], "setentitytyp": [5, 123, 376], "setexplodeent": [5, 123, 376], "setincludeedg": [5, 123, 376], "setmaxsentences": [5, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 317, 321, 323, 324, 325, 326, 327, 328, 329, 330, 376], "setmergeent": [5, 123, 376], "setmergeentitiesiobformat": [5, 123, 376], "setminsentences": [5, 123, 376], "setposmodel": [5, 123, 376], "setrelationshiptyp": [5, 123, 376], "setroottoken": [5, 123, 376], "settypeddependencyparsermodel": [5, 123, 376], "dictionari": [5, 81, 117, 125, 128, 133, 139, 141, 142, 143, 155, 156, 180, 182, 183, 207, 231, 252, 334, 370, 379, 382, 387, 393, 395, 396, 397, 410, 436, 437, 461, 485, 507], "formcol": [5, 128, 247, 382, 501], "lemmacol": [5, 128, 247, 382, 501], "setdictionari": [5, 128, 155, 156, 180, 182, 183, 382, 410, 436, 437], "setformcol": [5, 128, 382], "setlemmacol": [5, 128, 382], "enablecumul": [5, 135, 389], "n": [5, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 92, 119, 125, 135, 138, 139, 140, 145, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 189, 205, 207, 209, 218, 223, 233, 234, 237, 254, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 339, 341, 344, 372, 379, 389, 392, 393, 394, 399, 407, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 443, 459, 461, 463, 472, 477, 488, 492], "setenablecumul": [5, 135, 389], "setn": [5, 97, 135, 349, 389], "cleanuppattern": [5, 87, 143, 340, 397], "maxlength": [5, 143, 152, 153, 154, 187, 190, 191, 397, 407, 408, 444, 445], "minlength": [5, 143, 152, 153, 154, 187, 190, 191, 397, 407, 408, 444, 445], "setcleanuppattern": [5, 143, 397], "setmaxlength": [5, 143, 152, 153, 154, 187, 190, 191, 397, 407, 408, 444, 445], "setminlength": [5, 143, 152, 153, 154, 187, 190, 191, 397, 407, 408, 444, 445], "setslangdictionari": [5, 143, 397], "slangdictionari": [5, 143, 397], "slangmatchcas": [5, 143, 397], "casesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 129, 130, 134, 180, 182, 185, 211, 218, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 383, 388, 436, 439, 472], "loaddefaultstopword": [5, 124, 125, 185, 379, 439], "setcasesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 97, 99, 105, 110, 118, 129, 130, 134, 139, 180, 182, 185, 199, 210, 211, 218, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 349, 351, 358, 363, 371, 383, 388, 393, 436, 439, 452, 464, 472], "setlocal": [5, 185, 439], "setstopword": [5, 124, 125, 141, 185, 379, 395, 439], "stopword": [5, 124, 125, 141, 185, 379, 395, 439], "getgraphfil": [5, 186, 440], "getgraphfold": [5, 186, 440], "gethiddenunitsnumb": [5, 186, 440], "getinputcol": [5, 178, 179, 186, 195, 199, 200, 211, 214, 432, 440, 452, 453, 467], "getlabelcolumn": [5, 136, 137, 186, 391, 440], "graphfil": [5, 186, 440], "graphfold": [5, 136, 140, 180, 181, 186, 394, 434, 440], "hiddenunitsnumb": [5, 186, 440], "inputcol": [5, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 112, 127, 178, 179, 186, 195, 196, 198, 199, 200, 201, 204, 206, 207, 211, 214, 235, 242, 267, 269, 270, 273, 275, 277, 279, 280, 282, 284, 286, 288, 292, 295, 297, 300, 302, 303, 307, 309, 310, 365, 381, 432, 440, 449, 451, 452, 453, 454, 457, 460, 461, 467, 490, 497], "inputcolsvalid": [5, 186, 211, 214, 440, 467], "labelcolumn": [5, 28, 44, 50, 136, 137, 139, 140, 147, 148, 186, 280, 297, 303, 391, 393, 394, 401, 440], "setgraphfil": [5, 186, 440], "setgraphfold": [5, 136, 140, 180, 181, 186, 394, 434, 440], "sethiddenunitsnumb": [5, 186, 440], "setinputcol": [5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 211, 214, 231, 235, 240, 242, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 463, 464, 467, 485, 490, 497, 510, 514, 515], "setlabelcolumn": [5, 28, 44, 50, 136, 137, 139, 140, 147, 148, 186, 231, 280, 297, 303, 391, 393, 394, 401, 440, 485, 510, 514], "avail": [5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 125, 127, 128, 131, 133, 139, 140, 151, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 185, 194, 218, 237, 238, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 377, 379, 381, 382, 384, 387, 393, 394, 405, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 439, 448, 472, 480, 492, 493, 510, 517], "configprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 126, 127, 136, 140, 147, 148, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 381, 394, 401, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434], "loadsavedmodel": [6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "setconfigprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 62, 63, 64, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 126, 127, 136, 140, 147, 148, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 316, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 362, 363, 364, 368, 371, 372, 373, 381, 394, 401, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434], "getismultilingu": [6, 9, 262], "getlanguag": [6, 9, 262], "ismultilingu": [6, 9, 262], "setlanguag": [6, 9, 262], "settask": [6, 9, 158, 161, 164, 177, 211, 218, 262, 414, 417, 431, 472], "concern": [7, 8, 9, 15, 66, 67, 78, 79, 80, 82, 91, 259, 261, 262, 267, 318, 319, 331, 332, 333, 335, 343], "classnam": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 142, 143, 145, 146, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 189, 191, 194, 209, 212, 213, 220, 226, 235, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 387, 388, 393, 394, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 445, 448, 463, 465, 466, 474, 480, 490], "java_model": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 142, 143, 145, 146, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 188, 189, 191, 194, 203, 209, 213, 229, 235, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 387, 388, 393, 394, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 439, 441, 443, 445, 448, 456, 463, 466, 484, 490], "hubert": [7, 259], "head": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 63, 86, 91, 120, 138, 139, 140, 160, 205, 223, 237, 259, 261, 262, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 316, 339, 343, 373, 392, 393, 394, 413, 459, 477, 492, 514], "top": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 91, 125, 145, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 206, 218, 254, 259, 261, 262, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 343, 379, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 460, 472], "connectionist": [7, 8, 9, 259, 261, 262], "tempor": [7, 8, 9, 259, 261, 262], "classif": [7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 66, 67, 78, 80, 91, 95, 101, 104, 106, 115, 157, 161, 177, 218, 252, 259, 261, 262, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 318, 319, 331, 333, 343, 347, 353, 357, 359, 368, 411, 414, 431, 472, 507, 514], "ctc": [7, 8, 9, 259, 261, 262], "wa": [7, 8, 15, 16, 18, 21, 22, 23, 28, 30, 31, 32, 34, 35, 36, 39, 40, 43, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 86, 87, 88, 96, 98, 99, 105, 110, 111, 117, 118, 119, 125, 145, 146, 157, 161, 164, 165, 167, 169, 172, 176, 181, 233, 237, 259, 261, 267, 268, 270, 273, 274, 275, 280, 282, 283, 284, 286, 287, 288, 292, 293, 296, 300, 301, 302, 303, 307, 308, 309, 310, 311, 318, 319, 331, 339, 340, 341, 348, 350, 351, 358, 363, 364, 370, 371, 372, 379, 399, 400, 411, 414, 417, 419, 421, 423, 426, 430, 434, 488, 492, 514, 515], "propos": [7, 8, 67, 78, 91, 96, 98, 99, 107, 110, 111, 114, 118, 119, 120, 170, 259, 261, 319, 331, 343, 348, 350, 351, 360, 363, 364, 367, 371, 372, 373, 424], "self": [7, 8, 78, 91, 105, 106, 168, 259, 261, 312, 331, 343, 358, 359, 422], "supervis": [7, 8, 9, 91, 101, 103, 109, 115, 125, 161, 164, 167, 173, 259, 261, 262, 343, 353, 355, 362, 368, 379, 414, 417, 421, 427], "speech": [7, 8, 9, 11, 96, 150, 151, 194, 248, 252, 259, 261, 262, 264, 348, 404, 405, 448, 503, 520], "represent": [7, 8, 78, 91, 93, 94, 99, 100, 101, 103, 113, 116, 117, 118, 119, 120, 138, 177, 179, 209, 222, 235, 259, 261, 331, 343, 345, 346, 351, 352, 353, 355, 366, 369, 370, 371, 372, 373, 392, 431, 432, 463, 476], "learn": [7, 8, 28, 44, 50, 71, 73, 77, 82, 91, 99, 100, 103, 110, 111, 115, 116, 118, 119, 120, 125, 139, 140, 148, 154, 159, 160, 161, 163, 164, 165, 166, 171, 172, 173, 175, 177, 181, 218, 231, 259, 261, 280, 297, 303, 324, 326, 330, 335, 343, 351, 352, 355, 363, 364, 368, 369, 371, 372, 373, 379, 393, 394, 401, 408, 412, 413, 414, 416, 417, 419, 420, 425, 426, 427, 429, 431, 434, 472, 485, 512], "mask": [7, 78, 98, 107, 118, 119, 120, 161, 190, 259, 331, 350, 360, 371, 372, 373, 414, 444], "predict": [7, 9, 66, 78, 98, 107, 140, 159, 160, 164, 177, 218, 231, 259, 262, 318, 331, 350, 360, 394, 412, 413, 417, 431, 472, 485, 510], "hidden": [7, 14, 16, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 91, 103, 120, 186, 259, 266, 268, 272, 274, 276, 278, 281, 283, 285, 287, 291, 293, 294, 296, 299, 301, 305, 306, 308, 311, 343, 355, 373, 440], "unit": [7, 164, 165, 186, 259, 417, 419, 440], "wei": [7, 78, 259, 331], "ning": [7, 259], "hsu": [7, 259], "benjamin": [7, 96, 259, 348], "bolt": [7, 259], "yao": [7, 259], "hung": [7, 259], "tsai": [7, 259], "kushal": [7, 259], "lakhotia": [7, 259], "ruslan": [7, 259], "salakhutdinov": [7, 259], "abdelrahman": [7, 8, 259, 261], "moham": [7, 8, 259, 261], "take": [7, 8, 17, 18, 23, 36, 49, 51, 56, 86, 88, 96, 107, 123, 134, 160, 170, 182, 185, 191, 208, 246, 259, 261, 269, 270, 275, 288, 302, 304, 309, 339, 341, 348, 360, 376, 388, 401, 402, 413, 424, 436, 439, 445, 462, 467, 472, 483, 489, 500, 513, 514, 518, 519], "transcrib": [7, 8, 9, 259, 261, 262], "textneed": [7, 8, 9, 11, 17, 84, 85, 95, 99, 101, 109, 110, 117, 122, 123, 125, 128, 131, 133, 139, 140, 143, 149, 151, 154, 157, 159, 160, 164, 167, 170, 172, 181, 182, 183, 190, 191, 196, 204, 205, 207, 231, 238, 246, 247, 248, 254, 259, 261, 262, 264, 269, 336, 338, 342, 347, 351, 353, 362, 363, 370, 374, 376, 379, 384, 387, 393, 394, 397, 402, 405, 408, 411, 412, 413, 417, 421, 424, 426, 434, 436, 437, 444, 445, 449, 457, 459, 461, 485, 493, 500, 501, 503, 510, 512, 514, 515, 518, 520], "provid": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 131, 132, 133, 134, 139, 140, 143, 151, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 194, 205, 218, 223, 237, 253, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 381, 382, 383, 384, 386, 387, 388, 393, 394, 397, 401, 402, 405, 408, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 448, 459, 467, 472, 477, 479, 483, 489, 492, 508, 515], "pre": [7, 8, 9, 28, 44, 50, 66, 80, 93, 94, 98, 99, 101, 103, 106, 107, 109, 115, 140, 149, 161, 177, 191, 198, 200, 206, 210, 247, 259, 261, 262, 280, 297, 303, 318, 333, 345, 346, 350, 351, 353, 355, 359, 360, 362, 368, 394, 402, 414, 431, 451, 453, 460, 464, 501, 514], "processor": [7, 8, 259, 261], "m1": [7, 8, 259, 261], "due": [7, 8, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 91, 105, 114, 161, 259, 261, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 343, 358, 367, 414], "instruct": [7, 8, 73, 76, 90, 104, 163, 166, 169, 173, 259, 261, 326, 329, 357, 416, 420, 423, 427], "xla": [7, 8, 259, 261], "can": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 133, 138, 139, 140, 141, 142, 145, 146, 151, 153, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 192, 194, 198, 199, 206, 207, 208, 209, 214, 218, 222, 231, 237, 238, 243, 244, 246, 247, 248, 254, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 387, 392, 393, 394, 395, 396, 399, 400, 405, 407, 408, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 446, 448, 451, 452, 460, 461, 462, 463, 472, 476, 485, 492, 493, 498, 499, 500, 501, 503, 510, 512, 514, 515, 517, 518, 519, 520], "companion": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 139, 140, 142, 151, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 185, 194, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 393, 394, 396, 405, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 439, 448, 481], "speechtotext": [7, 8, 9, 259, 261, 262], "setoutputcol": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 211, 214, 231, 235, 240, 242, 243, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 463, 464, 467, 485, 490, 497, 498, 510, 514, 515], "asr_hubert_large_ls960": [7, 9, 259, 262], "For": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 142, 143, 145, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 191, 194, 198, 199, 200, 206, 207, 210, 218, 231, 233, 237, 238, 249, 254, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 396, 397, 399, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 445, 448, 451, 452, 453, 460, 461, 464, 472, 485, 488, 492, 493, 504, 510, 511, 513, 514, 515, 516, 517, 518], "pleas": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 72, 74, 75, 76, 78, 79, 80, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 127, 128, 130, 131, 133, 134, 139, 140, 143, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 185, 188, 189, 194, 198, 206, 207, 208, 238, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 325, 327, 328, 329, 331, 332, 333, 336, 338, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 381, 382, 383, 384, 387, 388, 393, 394, 397, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 439, 441, 443, 448, 451, 460, 461, 462, 493, 511, 512, 516, 519], "see": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 191, 194, 198, 199, 200, 201, 206, 207, 210, 218, 221, 231, 237, 238, 249, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 445, 448, 451, 452, 453, 454, 460, 461, 464, 472, 475, 485, 492, 493, 504, 510, 511, 512, 517, 519, 520], "hub": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 127, 128, 139, 140, 151, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 185, 194, 238, 252, 255, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 381, 382, 393, 394, 405, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 439, 448, 493, 507], "To": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 92, 93, 95, 96, 98, 99, 105, 110, 114, 118, 120, 125, 131, 133, 151, 153, 159, 160, 161, 164, 171, 177, 194, 201, 205, 207, 208, 231, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 317, 318, 319, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 344, 345, 347, 348, 350, 351, 358, 363, 367, 371, 373, 379, 384, 387, 405, 407, 412, 413, 414, 417, 425, 431, 448, 454, 459, 461, 462, 485, 510, 518], "which": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 91, 93, 94, 95, 96, 98, 99, 100, 103, 104, 105, 108, 110, 112, 113, 114, 115, 116, 118, 120, 123, 125, 131, 132, 133, 140, 142, 143, 145, 146, 153, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 190, 194, 199, 205, 218, 223, 238, 246, 247, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 347, 348, 350, 351, 352, 355, 357, 358, 361, 363, 365, 366, 367, 368, 369, 371, 373, 376, 379, 384, 386, 387, 394, 396, 397, 399, 400, 407, 408, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 444, 448, 452, 459, 472, 477, 493, 500, 501, 514, 515], "compat": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 96, 98, 99, 105, 110, 115, 118, 120, 140, 199, 204, 238, 253, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 317, 318, 319, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 348, 350, 351, 358, 363, 371, 373, 394, 452, 457, 493, 508], "import": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 223, 231, 237, 242, 243, 244, 246, 247, 248, 249, 250, 254, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 457, 459, 460, 461, 462, 463, 464, 477, 485, 492, 497, 498, 499, 500, 501, 503, 504, 505, 510, 513, 514, 517, 518, 519, 520], "them": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 96, 98, 99, 105, 110, 118, 120, 122, 123, 125, 131, 133, 154, 166, 168, 176, 181, 185, 194, 204, 208, 210, 254, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 348, 350, 351, 358, 363, 371, 373, 374, 376, 379, 384, 387, 408, 420, 422, 430, 434, 439, 448, 457, 462, 464, 514, 515], "5669": [7, 8, 9, 66, 67, 78, 79, 80, 96, 259, 261, 262, 318, 319, 331, 332, 333, 348], "more": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 87, 96, 99, 101, 103, 104, 112, 118, 119, 123, 125, 131, 135, 138, 142, 145, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 190, 191, 198, 199, 200, 206, 207, 210, 218, 231, 233, 235, 237, 243, 244, 249, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340, 348, 351, 353, 355, 357, 365, 371, 372, 376, 379, 384, 389, 392, 396, 399, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 444, 445, 451, 452, 453, 460, 461, 464, 472, 485, 488, 490, 492, 498, 499, 504, 510, 511, 512, 514, 517, 520], "extend": [7, 8, 9, 11, 28, 44, 50, 63, 66, 67, 71, 73, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 99, 103, 110, 112, 115, 117, 118, 120, 125, 127, 128, 131, 132, 133, 134, 135, 139, 140, 142, 143, 149, 151, 153, 154, 156, 157, 159, 160, 161, 168, 177, 179, 181, 182, 184, 185, 189, 191, 194, 198, 199, 200, 206, 207, 210, 237, 259, 261, 262, 264, 280, 297, 303, 312, 316, 318, 319, 324, 326, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 351, 355, 363, 365, 368, 370, 371, 373, 379, 381, 382, 384, 386, 387, 388, 389, 393, 394, 396, 397, 402, 405, 407, 408, 410, 411, 412, 413, 414, 422, 431, 432, 434, 436, 438, 439, 443, 445, 448, 451, 452, 453, 460, 461, 464, 492], "exampl": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 223, 231, 233, 235, 237, 238, 242, 243, 244, 246, 247, 248, 249, 250, 255, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 477, 485, 488, 490, 492, 493, 497, 498, 499, 500, 501, 503, 504, 505, 510, 513, 514, 515, 517, 518, 519, 520], "hubertforctctestspec": [7, 259], "paper": [7, 9, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 125, 154, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 194, 218, 249, 259, 262, 312, 319, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 379, 408, 411, 414, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 448, 504, 520], "abstract": [7, 9, 67, 78, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 120, 125, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 249, 259, 262, 312, 319, 331, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 371, 372, 373, 379, 414, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 440, 475, 504, 520], "approach": [7, 9, 67, 78, 102, 106, 110, 111, 114, 120, 125, 137, 139, 140, 142, 154, 156, 161, 164, 165, 166, 169, 172, 177, 181, 182, 183, 212, 259, 262, 319, 331, 354, 359, 363, 364, 367, 373, 379, 391, 393, 394, 396, 408, 410, 414, 417, 419, 420, 423, 426, 431, 434, 436, 437, 465, 517], "challeng": [7, 44, 78, 99, 103, 104, 110, 111, 114, 125, 169, 170, 172, 259, 297, 331, 351, 355, 357, 363, 364, 367, 379, 423, 424, 426], "three": [7, 95, 181, 192, 259, 347, 434, 446], "uniqu": [7, 145, 146, 161, 221, 259, 399, 400, 414, 475], "problem": [7, 17, 44, 91, 103, 107, 114, 161, 177, 181, 194, 259, 269, 297, 343, 355, 360, 367, 414, 431, 434, 448], "multipl": [7, 9, 13, 19, 37, 44, 45, 77, 80, 95, 96, 122, 125, 131, 153, 161, 166, 170, 175, 176, 179, 191, 223, 231, 233, 242, 246, 259, 262, 265, 271, 289, 297, 298, 330, 333, 347, 348, 374, 379, 384, 407, 414, 420, 424, 429, 430, 432, 445, 477, 485, 488, 497, 500], "sound": [7, 86, 259, 339], "each": [7, 8, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 67, 78, 79, 80, 86, 95, 98, 100, 101, 107, 109, 112, 116, 117, 122, 123, 125, 128, 130, 131, 133, 134, 135, 137, 139, 140, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 160, 161, 175, 179, 181, 182, 183, 190, 191, 194, 198, 206, 217, 218, 223, 229, 248, 259, 261, 269, 270, 275, 279, 280, 284, 288, 297, 302, 303, 309, 319, 331, 332, 333, 339, 347, 350, 352, 353, 360, 362, 365, 369, 370, 374, 376, 379, 382, 383, 384, 387, 388, 389, 391, 393, 394, 396, 397, 399, 400, 402, 405, 407, 408, 410, 413, 414, 429, 432, 434, 436, 437, 444, 445, 448, 451, 460, 471, 472, 477, 484, 503, 515], "input": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 214, 218, 223, 229, 233, 235, 237, 242, 246, 247, 248, 249, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 467, 472, 477, 484, 488, 490, 492, 497, 500, 501, 503, 504, 514, 515, 518, 520], "utter": [7, 259], "lexicon": [7, 259], "phase": [7, 99, 161, 259, 351, 414], "have": [7, 17, 18, 23, 28, 36, 44, 49, 50, 56, 88, 91, 96, 99, 104, 110, 111, 117, 125, 133, 135, 138, 139, 140, 141, 145, 151, 153, 154, 160, 162, 163, 164, 165, 166, 170, 171, 172, 173, 175, 183, 192, 207, 210, 254, 259, 269, 270, 275, 280, 288, 297, 302, 303, 309, 341, 342, 343, 348, 351, 357, 363, 364, 370, 379, 387, 389, 392, 393, 394, 395, 399, 405, 407, 408, 413, 415, 416, 417, 419, 420, 424, 425, 426, 427, 429, 437, 446, 461, 464, 480, 514, 515, 518], "variabl": [7, 100, 116, 207, 259, 352, 369, 461], "length": [7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 135, 143, 145, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 190, 191, 207, 218, 233, 234, 242, 259, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 339, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 389, 397, 399, 407, 408, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 444, 445, 461, 472, 488, 497], "explicit": [7, 131, 153, 164, 259, 342, 407, 417], "segment": [7, 63, 67, 68, 78, 99, 110, 193, 194, 252, 259, 316, 319, 320, 331, 351, 363, 447, 448], "deal": [7, 205, 259, 459, 518], "we": [7, 8, 9, 28, 44, 67, 78, 80, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 114, 115, 116, 118, 119, 120, 125, 139, 140, 143, 145, 154, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 191, 205, 207, 223, 254, 259, 261, 262, 280, 297, 312, 319, 331, 333, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 362, 363, 364, 367, 368, 369, 371, 372, 373, 379, 393, 394, 397, 399, 408, 412, 413, 414, 417, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 445, 459, 461, 477, 510, 513, 514, 515, 518, 519, 520], "bert": [7, 15, 19, 20, 21, 22, 23, 25, 27, 30, 34, 35, 39, 42, 47, 51, 54, 57, 79, 91, 93, 94, 98, 99, 105, 106, 107, 110, 111, 113, 118, 119, 120, 140, 141, 142, 161, 177, 259, 267, 271, 272, 273, 274, 275, 277, 279, 282, 286, 287, 292, 295, 300, 304, 307, 310, 332, 343, 345, 346, 350, 351, 358, 359, 360, 363, 364, 366, 371, 372, 373, 394, 395, 396, 414, 431], "offlin": [7, 231, 259, 485], "step": [7, 28, 44, 50, 100, 116, 140, 149, 231, 259, 280, 297, 303, 352, 369, 394, 402, 485, 510, 514], "align": [7, 173, 175, 259, 427, 429], "target": [7, 81, 115, 128, 159, 160, 161, 167, 168, 170, 191, 197, 205, 218, 237, 259, 312, 334, 368, 412, 413, 414, 421, 422, 424, 445, 450, 459, 472, 492], "label": [7, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 80, 84, 85, 95, 101, 114, 122, 127, 137, 138, 139, 140, 142, 148, 149, 156, 157, 177, 181, 186, 194, 218, 231, 246, 259, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 318, 319, 331, 333, 336, 338, 347, 353, 367, 374, 381, 391, 392, 393, 394, 396, 401, 402, 410, 411, 431, 434, 440, 448, 472, 485, 500, 510, 514], "loss": [7, 91, 99, 104, 140, 177, 259, 343, 351, 357, 394, 431, 510], "A": [7, 8, 50, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 102, 110, 111, 113, 117, 122, 125, 128, 130, 133, 134, 135, 142, 143, 145, 146, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 183, 190, 191, 204, 218, 231, 233, 244, 248, 254, 259, 261, 303, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 342, 343, 354, 363, 364, 366, 370, 374, 379, 382, 383, 387, 388, 389, 396, 397, 399, 400, 410, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 444, 445, 457, 472, 485, 488, 499, 503, 512, 514, 520], "ingredi": [7, 259], "our": [7, 91, 95, 96, 99, 100, 101, 103, 104, 105, 110, 111, 115, 116, 118, 119, 125, 154, 161, 164, 165, 166, 167, 169, 170, 172, 173, 175, 176, 177, 223, 237, 259, 343, 347, 348, 351, 352, 353, 355, 357, 358, 363, 364, 368, 369, 371, 372, 379, 408, 414, 417, 419, 420, 421, 423, 424, 426, 427, 429, 430, 431, 477, 492, 519], "appli": [7, 10, 28, 44, 50, 67, 80, 86, 87, 122, 123, 140, 141, 149, 153, 159, 160, 177, 181, 182, 200, 207, 218, 223, 224, 227, 234, 246, 259, 263, 280, 297, 303, 319, 333, 339, 340, 374, 376, 394, 395, 402, 407, 412, 413, 431, 434, 436, 453, 461, 472, 477, 481, 500], "over": [7, 69, 86, 99, 107, 118, 119, 120, 161, 165, 169, 170, 182, 185, 191, 218, 223, 231, 259, 321, 339, 351, 360, 371, 372, 373, 414, 419, 423, 424, 436, 445, 472, 477, 485, 510], "region": [7, 259], "onli": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 95, 101, 102, 103, 106, 107, 115, 120, 131, 133, 143, 145, 153, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 189, 194, 207, 208, 217, 218, 242, 246, 253, 259, 262, 312, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 347, 353, 354, 355, 359, 360, 368, 373, 384, 387, 397, 399, 407, 408, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 448, 461, 462, 471, 472, 497, 500, 508], "forc": [7, 92, 159, 160, 218, 242, 259, 344, 412, 413, 472], "combin": [7, 17, 18, 23, 27, 32, 36, 49, 56, 79, 99, 105, 117, 125, 161, 167, 170, 177, 181, 182, 194, 259, 269, 270, 275, 279, 284, 288, 302, 309, 332, 351, 358, 370, 379, 414, 421, 424, 431, 434, 436, 448], "acoust": [7, 259], "continu": [7, 138, 159, 160, 164, 179, 201, 218, 259, 392, 412, 413, 417, 432, 454, 472, 510], "reli": [7, 84, 85, 120, 125, 259, 336, 338, 373, 379], "primarili": [7, 114, 259, 367], "consist": [7, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 98, 105, 133, 151, 157, 172, 175, 194, 209, 248, 259, 317, 321, 323, 324, 325, 326, 327, 328, 329, 330, 343, 350, 358, 387, 405, 411, 426, 429, 448, 463, 503], "unsupervis": [7, 118, 119, 120, 125, 161, 164, 259, 371, 372, 373, 379, 414, 417], "rather": [7, 67, 92, 159, 160, 218, 259, 319, 342, 344, 412, 413, 472], "than": [7, 44, 50, 67, 92, 95, 99, 100, 102, 104, 106, 116, 118, 119, 120, 125, 127, 135, 139, 145, 159, 160, 163, 164, 165, 166, 167, 168, 172, 173, 176, 182, 183, 218, 259, 297, 303, 319, 342, 344, 347, 351, 352, 354, 357, 359, 369, 371, 372, 373, 379, 381, 389, 393, 399, 412, 413, 416, 417, 419, 420, 421, 422, 426, 427, 430, 436, 437, 472, 514], "intrins": [7, 67, 259, 319], "qualiti": [7, 70, 78, 113, 114, 164, 166, 167, 170, 173, 176, 259, 323, 331, 366, 367, 417, 420, 421, 424, 427, 430], "assign": [7, 44, 122, 141, 156, 259, 297, 374, 395, 410], "simpl": [7, 60, 93, 94, 106, 122, 164, 259, 312, 345, 346, 359, 374, 417, 515], "k": [7, 9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 199, 218, 259, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 452, 472], "mean": [7, 9, 11, 17, 18, 23, 27, 32, 36, 44, 49, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 92, 108, 113, 114, 118, 125, 127, 131, 132, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 190, 199, 205, 207, 218, 259, 262, 264, 269, 270, 275, 279, 284, 288, 297, 302, 309, 312, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 344, 361, 366, 367, 371, 379, 381, 384, 386, 399, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 444, 452, 459, 461, 472, 514, 515, 518], "teacher": [7, 259], "100": [7, 28, 44, 51, 80, 100, 116, 118, 125, 145, 154, 167, 209, 244, 259, 280, 297, 304, 333, 352, 369, 371, 379, 399, 408, 421, 463, 499], "two": [7, 44, 71, 72, 73, 75, 76, 77, 78, 84, 85, 91, 98, 100, 115, 116, 117, 118, 119, 123, 160, 173, 192, 207, 246, 259, 297, 324, 325, 326, 328, 329, 330, 331, 336, 338, 343, 350, 352, 368, 369, 370, 371, 372, 376, 413, 427, 446, 461, 500, 514], "iter": [7, 84, 85, 91, 100, 116, 151, 166, 194, 207, 231, 259, 336, 338, 343, 352, 369, 405, 420, 448, 461, 485, 510], "either": [7, 9, 28, 50, 80, 81, 85, 96, 97, 112, 122, 125, 127, 133, 156, 157, 177, 194, 197, 205, 206, 209, 237, 242, 259, 262, 280, 303, 333, 334, 338, 348, 349, 365, 374, 379, 381, 387, 410, 411, 431, 448, 450, 459, 460, 463, 492, 497, 515], "match": [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 71, 87, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 122, 129, 130, 131, 132, 133, 134, 143, 151, 153, 161, 164, 166, 176, 191, 194, 197, 207, 217, 218, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 319, 324, 340, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 374, 383, 384, 385, 386, 387, 388, 397, 405, 407, 414, 417, 420, 430, 445, 448, 450, 461, 471, 472, 513], "improv": [7, 81, 91, 93, 94, 96, 98, 103, 104, 110, 111, 114, 118, 119, 139, 140, 164, 165, 166, 170, 171, 172, 173, 175, 177, 179, 259, 334, 343, 345, 346, 348, 350, 355, 357, 363, 364, 367, 371, 372, 393, 394, 417, 419, 420, 424, 425, 426, 427, 429, 431, 432, 519], "upon": [7, 70, 88, 95, 125, 159, 160, 175, 176, 218, 259, 323, 341, 347, 379, 412, 413, 429, 430, 472], "state": [7, 14, 16, 20, 22, 24, 26, 28, 29, 31, 33, 35, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 58, 67, 69, 78, 80, 91, 93, 94, 96, 101, 103, 104, 105, 107, 110, 111, 114, 120, 125, 140, 161, 164, 165, 170, 171, 172, 173, 174, 177, 206, 259, 266, 268, 272, 274, 276, 278, 280, 281, 283, 285, 287, 291, 293, 294, 296, 297, 299, 301, 303, 305, 306, 308, 311, 319, 321, 331, 333, 343, 345, 346, 348, 353, 355, 357, 358, 360, 363, 364, 367, 373, 379, 394, 414, 417, 419, 424, 425, 426, 427, 428, 431, 460, 511, 514], "art": [7, 28, 44, 67, 69, 78, 80, 91, 93, 94, 95, 96, 101, 103, 104, 105, 107, 110, 111, 114, 120, 125, 140, 161, 164, 170, 171, 172, 173, 174, 177, 206, 259, 280, 297, 319, 321, 331, 333, 343, 345, 346, 347, 348, 353, 355, 357, 358, 360, 363, 364, 367, 373, 379, 394, 414, 417, 424, 425, 426, 427, 428, 431, 460], "wav2vec": [7, 8, 259, 261], "perform": [7, 67, 71, 77, 78, 80, 81, 87, 91, 95, 96, 98, 99, 101, 102, 103, 104, 106, 109, 110, 111, 113, 115, 117, 118, 119, 120, 140, 157, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 175, 176, 177, 179, 182, 244, 259, 319, 324, 330, 331, 333, 334, 340, 343, 347, 348, 350, 351, 353, 354, 355, 357, 359, 362, 363, 364, 366, 368, 370, 371, 372, 373, 394, 411, 414, 415, 416, 417, 419, 420, 421, 423, 424, 426, 427, 429, 430, 431, 432, 436, 499], "librispeech": [7, 259], "960h": [7, 259], "libri": [7, 259], "light": [7, 99, 120, 125, 205, 255, 259, 351, 373, 379, 459, 517, 519], "60": [7, 99, 153, 162, 166, 174, 259, 351, 407, 415, 420, 428], "000h": [7, 259], "benchmark": [7, 9, 73, 80, 91, 95, 98, 99, 101, 103, 106, 118, 119, 161, 163, 165, 166, 169, 170, 172, 173, 176, 177, 252, 259, 262, 326, 333, 343, 347, 350, 351, 353, 355, 359, 371, 372, 414, 416, 419, 420, 423, 424, 426, 427, 430, 431, 507], "10min": [7, 259], "1h": [7, 259], "10h": [7, 259], "100h": [7, 259], "fine": [7, 9, 63, 93, 94, 99, 101, 102, 106, 107, 142, 161, 165, 166, 169, 172, 173, 177, 250, 259, 262, 316, 345, 346, 351, 353, 354, 359, 360, 396, 414, 419, 420, 423, 426, 427, 431, 505], "tune": [7, 9, 63, 73, 81, 93, 94, 99, 101, 102, 106, 107, 142, 161, 165, 166, 169, 172, 173, 177, 259, 262, 316, 326, 334, 345, 346, 351, 353, 354, 359, 360, 396, 414, 419, 420, 423, 426, 427, 431], "subset": [7, 170, 259, 424], "1b": [7, 259], "show": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 223, 233, 235, 238, 242, 243, 244, 246, 247, 248, 249, 250, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 463, 464, 477, 488, 490, 493, 497, 498, 499, 500, 501, 503, 504, 505, 510, 513, 514, 515, 519], "19": [7, 82, 95, 101, 109, 135, 248, 250, 259, 335, 347, 353, 362, 389, 503, 505], "13": [7, 10, 11, 63, 118, 119, 123, 151, 172, 176, 200, 250, 259, 263, 264, 316, 371, 372, 376, 405, 426, 430, 453, 505], "rel": [7, 96, 98, 118, 131, 132, 139, 163, 170, 181, 259, 348, 350, 371, 384, 386, 393, 416, 424, 434, 513], "wer": [7, 259], "reduct": [7, 91, 182, 259, 343, 436], "dev": [7, 78, 91, 103, 115, 259, 331, 343, 355, 368], "other": [7, 10, 44, 67, 79, 88, 96, 108, 109, 112, 113, 114, 115, 123, 125, 143, 156, 161, 164, 167, 176, 177, 181, 188, 189, 199, 200, 254, 259, 263, 297, 319, 332, 341, 348, 361, 362, 365, 366, 367, 368, 376, 379, 397, 410, 414, 417, 421, 430, 431, 434, 441, 443, 452, 453, 514], "test": [7, 28, 44, 50, 66, 67, 70, 71, 73, 76, 77, 78, 79, 80, 84, 85, 93, 94, 115, 117, 128, 130, 133, 134, 139, 140, 149, 151, 160, 164, 165, 172, 173, 182, 183, 188, 194, 233, 246, 247, 248, 249, 250, 259, 280, 297, 303, 318, 319, 323, 324, 326, 329, 330, 331, 332, 333, 336, 338, 342, 345, 346, 368, 370, 382, 383, 387, 388, 393, 394, 402, 405, 413, 417, 419, 426, 427, 436, 437, 441, 448, 488, 500, 501, 503, 504, 505, 514, 520], "evalu": [7, 28, 44, 50, 96, 101, 104, 105, 106, 114, 118, 119, 149, 161, 162, 165, 167, 169, 170, 171, 172, 176, 214, 231, 233, 234, 259, 280, 297, 303, 348, 353, 357, 358, 359, 367, 371, 372, 402, 414, 415, 419, 421, 423, 424, 425, 426, 430, 467, 485, 488], "batchsiz": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 136, 140, 147, 148, 161, 168, 180, 181, 211, 218, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 394, 401, 414, 422, 434, 472], "size": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 123, 125, 140, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 211, 218, 233, 235, 243, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 376, 379, 394, 401, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 472, 488, 498, 513, 518, 519], "batch": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 140, 148, 159, 160, 161, 168, 181, 218, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 343, 344, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 394, 401, 412, 413, 414, 422, 434, 472], "refer": [7, 9, 63, 67, 69, 72, 73, 74, 75, 76, 78, 80, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 125, 142, 145, 146, 153, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 194, 197, 198, 206, 218, 221, 233, 254, 255, 259, 262, 312, 316, 319, 321, 325, 326, 327, 328, 329, 331, 333, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 379, 396, 399, 400, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 448, 450, 451, 460, 472, 475, 488, 514, 516, 517], "ml": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 204, 205, 206, 208, 209, 210, 231, 242, 243, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 457, 459, 460, 462, 463, 464, 485, 497, 498, 510, 514, 518], "audio_cont": [7, 8, 9, 196, 259, 261, 262, 449], "setstag": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 199, 209, 210, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 452, 463, 464, 514, 515], "processedaudiofloat": [7, 8, 9, 259, 261, 262], "createdatafram": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 82, 84, 85, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 206, 207, 209, 210, 223, 231, 235, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 316, 335, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 460, 461, 463, 464, 477, 485, 490, 510, 513, 514, 515, 519], "rawfloat": [7, 8, 9, 259, 261, 262], "todf": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 204, 206, 207, 209, 210, 223, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 316, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 399, 400, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 457, 460, 461, 463, 464, 477, 513, 514, 515, 519], "fit": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 149, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 199, 205, 208, 209, 210, 224, 229, 231, 235, 242, 243, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 450, 452, 459, 462, 463, 464, 484, 485, 490, 497, 498, 510, 514, 515, 518], "select": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 92, 97, 99, 102, 117, 123, 125, 127, 139, 140, 142, 145, 146, 157, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 189, 194, 196, 198, 200, 201, 204, 206, 207, 209, 210, 223, 231, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 335, 344, 349, 351, 354, 370, 376, 379, 381, 393, 394, 396, 399, 400, 411, 412, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 443, 448, 449, 451, 453, 454, 457, 460, 461, 463, 464, 477, 485, 510, 515], "truncat": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 66, 67, 69, 70, 71, 73, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 92, 102, 117, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 198, 200, 201, 206, 207, 209, 210, 223, 244, 248, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 318, 319, 321, 323, 324, 326, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 344, 354, 370, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 453, 454, 460, 461, 463, 464, 477, 499, 503, 513, 514, 515], "mister": [7, 8, 259, 261], "quilter": [7, 8, 9, 259, 261, 262], "THE": [7, 8, 87, 259, 261, 340], "apostl": [7, 8, 9, 259, 261, 262], "OF": [7, 8, 91, 259, 261, 343], "midl": [7, 8, 259, 261], "clase": [7, 8, 259, 261], "AND": [7, 8, 259, 261], "glad": [7, 8, 9, 259, 261, 262], "TO": [7, 8, 246, 259, 261, 500, 520], "welcom": [7, 8, 9, 255, 259, 261, 262], "hi": [7, 8, 9, 88, 142, 154, 259, 261, 262, 341, 396, 408], "gospel": [7, 8, 9, 259, 261, 262], "parent": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 214, 218, 221, 234, 235, 242, 243, 336, 338], "undefin": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 214, 218, 221, 234, 235, 242, 243], "doc": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 214, 218, 221, 233, 234, 235, 240, 242, 243, 244, 249, 399, 400, 434, 488, 490, 498, 499, 504, 520], "configproto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 127, 140, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 381, 394, 401, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434], "tensorflow": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 125, 127, 140, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 379, 381, 394, 401, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434], "get": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 125, 127, 137, 140, 148, 151, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 186, 191, 194, 196, 198, 199, 200, 204, 205, 206, 214, 218, 221, 228, 234, 255, 262, 280, 297, 344, 379, 391, 405, 432, 434, 440, 445, 448, 449, 451, 452, 453, 457, 459, 460, 467, 472, 475, 483, 489, 510, 514, 519, 520], "config_proto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 127, 140, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181], "serializetostr": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 127, 140, 148, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181], "folder": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 140, 149, 154, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 183, 186, 238, 246, 252, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 394, 402, 408, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 437, 440, 493, 500, 507], "spark_sess": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "restor": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448], "lang": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 237, 238, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 492, 493, 514, 519], "en": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 120, 122, 123, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 237, 238, 247, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 373, 374, 376, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 492, 493, 501, 514, 519, 520], "remote_loc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 237, 238, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 492, 493], "remot": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 234, 237, 238, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 489, 492, 493], "address": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448], "resourc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 133, 134, 139, 140, 142, 143, 149, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 188, 191, 194, 208, 219, 222, 234, 236, 238, 246, 247, 248, 249, 250, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 381, 382, 383, 387, 388, 393, 394, 396, 397, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 441, 445, 448, 462, 473, 476, 489, 491, 493, 500, 501, 503, 504, 505, 514, 520], "Will": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 142, 151, 153, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 383, 388, 393, 394, 396, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448], "repositori": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 237, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 492, 511], "otherwis": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 142, 151, 154, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 191, 194, 197, 218, 231, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 381, 382, 383, 388, 393, 394, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 445, 448, 450, 472, 485], "b": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 127, 130, 134, 138, 139, 140, 141, 142, 148, 153, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 194, 205, 223, 237, 246, 249, 259, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 316, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 362, 363, 364, 368, 371, 372, 373, 381, 383, 388, 392, 393, 394, 395, 396, 401, 407, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 448, 459, 477, 492, 500, 504, 520], "wav2vec2": [8, 261], "framework": [8, 71, 161, 168, 171, 177, 254, 261, 312, 324, 342, 414, 422, 425, 431], "alexei": [8, 261], "baevski": [8, 261], "henri": [8, 261], "zhou": [8, 261], "michael": [8, 188, 261, 441], "auli": [8, 261], "asr_wav2vec2_base_960h": [8, 261], "wav2vec2forctctestspec": [8, 261], "whisper": [9, 262], "automat": [9, 123, 125, 142, 168, 182, 233, 262, 312, 342, 376, 379, 396, 422, 436, 488, 513, 514], "recognit": [9, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 67, 73, 80, 96, 136, 139, 140, 142, 252, 262, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311, 319, 326, 333, 348, 390, 393, 394, 396, 507], "asr": [9, 262], "system": [9, 76, 92, 125, 159, 160, 161, 164, 166, 167, 170, 174, 207, 218, 262, 329, 344, 379, 412, 413, 414, 417, 420, 421, 424, 428, 461, 472], "680": [9, 262], "000": [9, 51, 125, 164, 170, 194, 209, 262, 304, 379, 417, 424, 448, 463], "hour": [9, 88, 131, 132, 262, 341, 384, 386], "multilingu": [9, 69, 70, 118, 119, 162, 167, 170, 175, 194, 262, 321, 323, 371, 372, 415, 421, 424, 429, 448], "multitask": [9, 104, 164, 262, 357, 417], "collect": [9, 73, 114, 125, 165, 172, 231, 262, 326, 367, 379, 419, 426, 485, 510], "web": [9, 63, 87, 96, 113, 164, 173, 231, 262, 316, 340, 348, 366, 417, 427, 485, 510], "It": [9, 15, 17, 18, 21, 23, 27, 28, 30, 32, 34, 36, 39, 44, 47, 49, 50, 51, 54, 56, 57, 66, 67, 69, 71, 78, 79, 81, 86, 87, 93, 94, 96, 98, 99, 100, 102, 105, 110, 111, 116, 118, 119, 122, 125, 135, 157, 160, 161, 163, 168, 172, 175, 179, 181, 182, 183, 189, 200, 205, 235, 238, 243, 254, 262, 267, 269, 270, 273, 275, 279, 280, 282, 284, 286, 288, 292, 297, 300, 302, 303, 304, 307, 309, 310, 312, 318, 319, 321, 324, 331, 332, 334, 339, 340, 342, 345, 346, 348, 350, 351, 352, 354, 358, 363, 364, 369, 371, 372, 374, 379, 389, 411, 413, 414, 416, 422, 426, 429, 432, 434, 436, 437, 443, 453, 459, 490, 493, 498, 513, 518], "well": [9, 65, 70, 72, 75, 77, 80, 84, 85, 86, 101, 115, 118, 119, 125, 145, 161, 162, 175, 176, 209, 262, 317, 323, 325, 328, 330, 333, 336, 338, 339, 353, 368, 371, 372, 379, 399, 414, 415, 429, 430, 463], "translat": [9, 131, 161, 164, 167, 168, 170, 177, 194, 252, 262, 312, 414, 417, 421, 422, 424, 431, 448], "those": [9, 96, 123, 141, 175, 262, 348, 376, 395, 429, 514, 515], "english": [9, 50, 95, 96, 109, 125, 167, 169, 170, 182, 185, 194, 238, 262, 303, 347, 348, 362, 379, 421, 423, 424, 436, 439, 448, 493], "moment": [9, 160, 207, 262, 413, 461], "greedi": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "search": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 95, 113, 131, 161, 162, 166, 167, 170, 174, 179, 182, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 347, 366, 384, 414, 415, 420, 421, 424, 428, 432, 436, 472], "task": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 67, 68, 71, 77, 78, 80, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 109, 114, 115, 118, 119, 120, 125, 142, 158, 161, 163, 164, 168, 169, 170, 174, 175, 176, 177, 208, 211, 218, 252, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 319, 320, 324, 330, 331, 333, 343, 345, 346, 347, 348, 350, 351, 353, 357, 358, 359, 360, 362, 367, 368, 371, 372, 373, 379, 396, 414, 416, 417, 422, 423, 424, 428, 429, 430, 431, 462, 472, 507], "asr_whisper_tiny_opt": [9, 262], "whisperforctctestspec": [9, 262], "robust": [9, 104, 173, 262, 357, 427], "larg": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 86, 88, 91, 92, 98, 99, 101, 103, 106, 107, 113, 114, 118, 119, 120, 125, 127, 130, 134, 140, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 175, 176, 183, 207, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 331, 332, 333, 339, 341, 343, 344, 350, 351, 353, 355, 359, 360, 366, 367, 371, 372, 373, 379, 381, 383, 388, 394, 412, 413, 414, 415, 416, 417, 419, 420, 421, 426, 429, 430, 461], "scale": [9, 67, 78, 79, 80, 91, 92, 99, 101, 105, 107, 118, 119, 159, 160, 161, 163, 164, 165, 166, 167, 170, 172, 173, 177, 218, 262, 319, 331, 332, 333, 343, 344, 351, 353, 358, 360, 371, 372, 412, 413, 414, 416, 417, 419, 420, 421, 424, 426, 427, 431, 472], "weak": [9, 101, 262, 353], "studi": [9, 88, 99, 110, 111, 161, 171, 177, 262, 341, 351, 363, 364, 414, 425, 431], "capabl": [9, 66, 69, 70, 78, 99, 120, 162, 164, 166, 169, 173, 175, 262, 318, 321, 323, 331, 351, 373, 415, 417, 420, 423, 427, 429], "simpli": [9, 87, 104, 262, 340, 357, 515], "amount": [9, 80, 115, 125, 134, 159, 160, 164, 175, 194, 205, 218, 262, 333, 368, 379, 388, 412, 413, 417, 429, 448, 459, 472, 518], "transcript": [9, 262], "internet": [9, 262], "when": [9, 10, 11, 15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 67, 78, 79, 80, 81, 86, 87, 91, 92, 101, 123, 131, 132, 135, 140, 145, 159, 160, 161, 164, 167, 172, 173, 175, 177, 181, 182, 185, 189, 194, 205, 207, 218, 233, 234, 235, 246, 262, 263, 264, 267, 270, 273, 275, 282, 284, 286, 288, 292, 300, 302, 307, 309, 310, 319, 331, 332, 333, 334, 339, 340, 342, 343, 344, 353, 376, 384, 386, 389, 394, 399, 412, 413, 414, 417, 421, 426, 427, 429, 431, 434, 436, 439, 443, 448, 459, 461, 472, 488, 489, 500, 514, 515, 518], "gener": [9, 28, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 91, 92, 95, 97, 99, 101, 104, 105, 106, 109, 112, 114, 120, 123, 125, 139, 140, 142, 145, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 186, 200, 201, 207, 218, 231, 233, 235, 252, 262, 280, 297, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 343, 344, 347, 349, 351, 353, 357, 358, 359, 362, 365, 367, 373, 376, 379, 393, 394, 396, 399, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 453, 454, 461, 472, 485, 488, 507, 510, 513, 514, 515], "standard": [9, 67, 73, 78, 79, 80, 87, 105, 131, 132, 161, 182, 183, 191, 218, 262, 319, 326, 331, 332, 333, 340, 358, 384, 386, 414, 436, 437, 445, 472], "often": [9, 91, 102, 110, 111, 120, 262, 343, 354, 363, 364, 373], "competit": [9, 118, 119, 125, 167, 175, 262, 371, 372, 379, 421, 429], "prior": [9, 67, 95, 99, 104, 105, 145, 171, 181, 244, 262, 319, 347, 351, 357, 358, 399, 425, 434, 499], "fulli": [9, 109, 237, 262, 362, 492], "zero": [9, 66, 101, 117, 142, 164, 262, 318, 353, 370, 396, 417], "shot": [9, 66, 101, 142, 164, 262, 318, 353, 396, 417], "transfer": [9, 80, 99, 101, 115, 118, 119, 161, 164, 177, 262, 333, 351, 353, 368, 371, 372, 414, 417, 431], "without": [9, 66, 77, 93, 94, 101, 102, 104, 118, 119, 125, 160, 164, 169, 194, 244, 262, 318, 330, 345, 346, 353, 354, 357, 371, 372, 379, 413, 417, 423, 448, 499], "ani": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 81, 95, 100, 101, 104, 115, 116, 122, 125, 140, 164, 167, 177, 181, 199, 200, 218, 238, 252, 262, 269, 270, 275, 279, 284, 288, 302, 309, 318, 334, 342, 347, 352, 353, 357, 368, 369, 374, 379, 394, 417, 421, 431, 434, 452, 453, 472, 493, 507, 511, 514, 515, 520], "compar": [9, 78, 80, 91, 98, 99, 103, 104, 106, 107, 120, 125, 154, 161, 163, 165, 175, 176, 177, 181, 231, 262, 331, 333, 343, 350, 351, 355, 357, 359, 360, 373, 379, 408, 414, 416, 419, 429, 430, 431, 434, 485, 510], "human": [9, 98, 125, 163, 165, 166, 169, 170, 172, 175, 262, 350, 379, 416, 419, 420, 423, 424, 426, 429], "accuraci": [9, 67, 78, 84, 85, 93, 94, 100, 113, 115, 116, 118, 119, 139, 140, 151, 169, 182, 194, 262, 319, 331, 336, 338, 345, 346, 352, 366, 368, 369, 371, 372, 393, 394, 405, 423, 436, 448, 510], "infer": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 68, 77, 92, 93, 94, 96, 99, 120, 159, 160, 163, 165, 169, 171, 204, 262, 269, 270, 275, 279, 284, 288, 302, 309, 318, 320, 330, 344, 345, 346, 348, 351, 373, 412, 413, 416, 419, 423, 425, 457], "code": [9, 63, 66, 98, 100, 104, 105, 109, 110, 111, 116, 118, 119, 125, 127, 161, 163, 169, 171, 173, 174, 175, 176, 177, 244, 262, 316, 318, 342, 350, 352, 357, 358, 362, 363, 364, 369, 371, 372, 379, 381, 414, 416, 423, 425, 427, 428, 429, 430, 431, 499, 511, 519], "serv": [9, 78, 262, 331, 511], "foundat": [9, 165, 166, 262, 419, 420], "further": [9, 10, 91, 104, 106, 113, 125, 139, 140, 145, 173, 210, 262, 263, 343, 357, 359, 366, 379, 393, 394, 399, 427, 464], "work": [9, 67, 99, 104, 105, 114, 127, 145, 159, 161, 165, 167, 168, 172, 175, 177, 188, 218, 235, 254, 262, 312, 319, 351, 357, 358, 367, 381, 399, 412, 414, 419, 421, 422, 426, 429, 431, 441, 472, 490, 513, 515, 519], "e": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 81, 85, 87, 101, 103, 104, 105, 106, 107, 122, 123, 139, 140, 161, 164, 168, 173, 177, 179, 181, 185, 209, 218, 231, 233, 235, 242, 253, 262, 264, 265, 267, 268, 271, 273, 274, 277, 278, 282, 283, 286, 287, 289, 292, 293, 295, 296, 298, 300, 301, 307, 308, 310, 311, 312, 319, 334, 338, 340, 353, 355, 357, 358, 359, 360, 374, 376, 393, 394, 414, 417, 422, 427, 431, 432, 434, 439, 463, 472, 485, 488, 490, 508, 510], "g": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 81, 85, 87, 101, 103, 104, 106, 107, 123, 139, 140, 161, 164, 168, 173, 177, 181, 185, 209, 218, 231, 235, 242, 253, 262, 264, 265, 267, 268, 271, 273, 274, 277, 278, 282, 283, 286, 287, 289, 292, 293, 295, 296, 298, 300, 301, 307, 308, 310, 311, 312, 319, 334, 338, 340, 353, 355, 357, 359, 360, 376, 393, 394, 414, 417, 422, 427, 431, 434, 439, 463, 472, 485, 490, 508, 510], "check": [9, 71, 73, 77, 95, 101, 109, 140, 153, 180, 181, 182, 183, 205, 210, 237, 252, 262, 324, 326, 330, 347, 353, 362, 394, 407, 434, 435, 436, 437, 459, 464, 492, 507, 514, 519], "descript": [9, 85, 104, 112, 125, 131, 165, 172, 182, 189, 217, 219, 252, 262, 338, 357, 365, 379, 384, 419, 426, 436, 443, 471, 473, 507], "minoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "minimum": [9, 44, 50, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 100, 116, 123, 125, 127, 137, 139, 140, 143, 153, 154, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 190, 191, 218, 235, 243, 246, 262, 297, 303, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 352, 369, 376, 379, 381, 391, 393, 394, 397, 407, 408, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 444, 445, 472, 498, 500], "sequenc": [9, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 92, 105, 108, 113, 114, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 185, 207, 218, 262, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 312, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 344, 358, 361, 366, 367, 399, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 439, 461, 472], "maxoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 312, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "maximum": [9, 28, 44, 50, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 100, 116, 123, 125, 137, 139, 140, 143, 145, 148, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 190, 191, 218, 234, 262, 280, 297, 303, 312, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 342, 352, 369, 376, 379, 391, 393, 394, 397, 399, 401, 407, 408, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 444, 445, 472], "dosampl": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "sampl": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 106, 113, 145, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 244, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 359, 366, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472, 499], "decod": [9, 60, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 92, 98, 105, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 312, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 344, 350, 358, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "temperatur": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 144, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "next": [9, 42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 110, 111, 125, 131, 132, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 295, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 363, 364, 379, 384, 386, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "probabl": [9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 125, 145, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 218, 262, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 379, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 472], "topk": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "highest": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 399, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 472], "vocabulari": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 100, 116, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 352, 369, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 472], "keep": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 86, 92, 125, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 339, 344, 379, 397, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "filter": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 118, 119, 125, 138, 139, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 185, 218, 223, 238, 262, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 371, 372, 379, 392, 393, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 472, 477, 493], "topp": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 144, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "most": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 88, 96, 99, 105, 107, 125, 140, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 312, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 339, 341, 348, 351, 358, 360, 379, 394, 399, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "add": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 117, 131, 132, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 191, 207, 218, 252, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 370, 384, 386, 407, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 445, 461, 472, 507, 514], "top_p": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 332, 399], "higher": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 117, 125, 145, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 370, 379, 399, 411, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "kept": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "repetitionpenalti": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "repetit": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "penalti": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "norepeatngrams": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "ngram": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 97, 135, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 349, 389, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "occur": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "onc": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 207, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 461, 472], "beamsiz": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 166, 167, 170, 174, 211, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 420, 421, 424, 428, 472], "beam": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 161, 162, 166, 167, 170, 174, 218, 262, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 420, 421, 424, 428, 472], "mr": [9, 262], "middl": [9, 189, 194, 262, 443, 448], "langaug": [9, 237, 262, 492], "xx": [9, 23, 56, 118, 119, 127, 163, 167, 168, 170, 262, 275, 309, 312, 371, 372, 381, 416, 421, 422, 424], "do": [9, 10, 88, 115, 125, 138, 162, 185, 191, 205, 207, 262, 263, 341, 368, 379, 392, 415, 439, 445, 459, 461, 510, 514, 518], "convert": [10, 60, 79, 82, 87, 97, 107, 112, 117, 131, 132, 135, 138, 143, 145, 161, 177, 190, 192, 194, 197, 200, 201, 231, 242, 263, 312, 332, 335, 340, 349, 360, 365, 370, 384, 386, 389, 392, 397, 399, 414, 431, 444, 446, 448, 450, 453, 454, 485, 510, 517], "back": [10, 88, 145, 161, 263, 341, 399, 414], "try": [10, 181, 246, 263, 434, 500], "re": [10, 95, 101, 109, 207, 263, 347, 353, 362, 461, 514], "analysi": [10, 28, 44, 50, 103, 104, 120, 155, 156, 177, 216, 233, 252, 263, 280, 297, 303, 355, 357, 373, 409, 410, 431, 469, 488, 507, 515], "york": [10, 142, 200, 263, 396, 453], "jersei": [10, 200, 263, 453], "aren": [10, 200, 263, 453], "t": [10, 17, 18, 23, 27, 32, 36, 49, 56, 88, 92, 99, 110, 128, 143, 154, 156, 159, 160, 172, 191, 200, 207, 218, 263, 269, 270, 275, 279, 284, 288, 302, 309, 341, 344, 351, 363, 382, 397, 408, 410, 412, 413, 426, 445, 453, 461, 472], "far": [10, 145, 164, 200, 263, 399, 417, 453], "apart": [10, 84, 85, 200, 263, 336, 338, 453], "actual": [10, 135, 200, 210, 263, 389, 453, 464], "id": [10, 44, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 118, 122, 145, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 197, 198, 200, 206, 210, 218, 231, 246, 263, 297, 313, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 340, 371, 374, 399, 400, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 450, 451, 453, 460, 464, 472, 485, 500], "defin": [10, 11, 138, 139, 140, 181, 185, 189, 200, 207, 223, 231, 237, 242, 263, 264, 392, 393, 394, 434, 439, 443, 453, 461, 477, 485, 492, 497, 510, 514, 518], "amongst": [10, 200, 263, 453], "thing": [10, 166, 181, 200, 263, 420, 434, 453], "explain_document_dl": [10, 200, 205, 223, 237, 263, 453, 459, 477, 492], "chunktodoc": [10, 263], "chunkconvert": [10, 263], "explainresult": [10, 200, 263, 453], "selectexpr": [10, 11, 28, 51, 63, 66, 67, 78, 79, 80, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 128, 130, 131, 132, 133, 134, 135, 138, 141, 142, 143, 151, 153, 154, 156, 160, 168, 184, 185, 188, 190, 191, 192, 197, 199, 200, 223, 246, 247, 248, 263, 264, 280, 304, 312, 316, 318, 319, 331, 332, 333, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 382, 383, 384, 386, 387, 388, 389, 392, 395, 396, 397, 405, 407, 408, 410, 413, 422, 438, 439, 441, 444, 445, 446, 450, 452, 453, 477, 500, 501, 503, 513, 514, 519], "explod": [10, 11, 28, 51, 63, 84, 85, 86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 130, 132, 133, 134, 135, 138, 141, 142, 151, 153, 154, 168, 192, 199, 200, 223, 243, 246, 248, 263, 264, 280, 304, 312, 316, 336, 338, 339, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 383, 386, 387, 388, 389, 392, 395, 396, 405, 407, 408, 422, 446, 452, 453, 477, 498, 500, 503, 513, 514, 519], "col": [10, 84, 85, 122, 130, 138, 141, 179, 197, 199, 200, 201, 206, 223, 244, 263, 336, 338, 374, 383, 392, 395, 453, 477, 499, 513], "7": [10, 50, 78, 93, 94, 98, 131, 132, 146, 151, 164, 165, 169, 172, 173, 200, 248, 250, 254, 263, 303, 331, 345, 346, 350, 384, 386, 400, 405, 417, 419, 423, 426, 427, 453, 503, 505, 513], "loc": [10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 123, 138, 139, 140, 200, 205, 223, 237, 246, 263, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311, 376, 392, 393, 394, 453, 459, 477, 492, 500], "22": [10, 200, 246, 263, 453, 500, 513], "part": [11, 96, 125, 128, 150, 151, 159, 160, 165, 184, 194, 197, 218, 235, 248, 252, 264, 342, 348, 379, 382, 404, 405, 412, 413, 419, 438, 448, 450, 472, 503, 520], "tag": [11, 28, 44, 50, 87, 96, 137, 138, 139, 140, 141, 150, 151, 194, 223, 231, 233, 235, 244, 246, 248, 249, 252, 264, 280, 297, 303, 340, 348, 391, 392, 393, 394, 395, 404, 405, 448, 477, 485, 488, 499, 500, 503, 504, 507, 520], "order": [11, 86, 104, 120, 122, 125, 131, 159, 160, 161, 165, 172, 182, 183, 205, 210, 218, 223, 264, 339, 342, 357, 373, 374, 379, 384, 412, 413, 414, 419, 426, 436, 437, 459, 464, 472, 477, 514, 515, 518, 520], "meaning": [11, 184, 264, 438], "phrase": [11, 96, 100, 116, 130, 134, 264, 348, 352, 369, 383, 388], "onto": [11, 223, 264, 477, 515], "pars": [11, 83, 84, 85, 96, 122, 128, 131, 132, 181, 182, 183, 205, 207, 209, 233, 234, 237, 243, 244, 246, 248, 264, 336, 337, 338, 348, 374, 382, 384, 386, 434, 436, 437, 459, 461, 463, 488, 492, 498, 499, 500, 503], "regular": [11, 86, 133, 139, 153, 264, 339, 387, 393, 407], "express": [11, 50, 63, 86, 131, 133, 153, 264, 303, 316, 339, 384, 387, 407], "wrap": [11, 264, 313, 432, 465, 466, 474, 480, 484], "angl": [11, 114, 264, 367], "bracket": [11, 264], "easili": [11, 103, 151, 199, 264, 355, 405, 452, 510], "distinguish": [11, 264], "itself": [11, 125, 170, 177, 194, 208, 264, 342, 379, 424, 431, 448, 462, 515], "form": [11, 28, 44, 50, 117, 122, 128, 130, 131, 133, 134, 154, 156, 182, 183, 194, 199, 231, 246, 247, 264, 280, 297, 303, 370, 374, 382, 383, 384, 387, 388, 408, 410, 436, 437, 448, 452, 485, 500, 501, 514], "peter": [11, 105, 128, 143, 151, 154, 182, 184, 246, 264, 358, 382, 397, 405, 408, 436, 438, 500], "piper": [11, 128, 151, 184, 264, 382, 405, 438], "employe": [11, 128, 151, 184, 264, 382, 405, 438], "pick": [11, 128, 151, 184, 264, 382, 405, 438], "peck": [11, 128, 151, 184, 264, 382, 405, 438], "pickl": [11, 128, 151, 184, 264, 382, 405, 438], "pepper": [11, 128, 151, 184, 264, 382, 405, 438], "nnp": [11, 151, 205, 223, 246, 247, 248, 249, 264, 405, 459, 477, 500, 501, 503, 504, 513, 518, 519, 520], "nn": [11, 86, 151, 246, 247, 248, 249, 264, 339, 405, 500, 501, 503, 504, 520], "vbp": [11, 151, 205, 247, 264, 405, 459, 501, 513, 518, 519], "vbg": [11, 151, 264, 405], "IN": [11, 151, 205, 223, 247, 248, 249, 264, 405, 459, 477, 501, 503, 504, 513, 518, 519], "jj": [11, 151, 205, 223, 246, 248, 264, 405, 459, 477, 500, 503, 513, 518, 519, 520], "enclos": [11, 264], "treat": [11, 181, 194, 264, 434, 448], "group": [11, 92, 159, 160, 165, 169, 175, 191, 233, 234, 264, 344, 412, 413, 419, 423, 429, 445, 488], "so": [11, 17, 18, 23, 28, 36, 49, 50, 56, 88, 125, 138, 145, 154, 167, 207, 208, 231, 264, 269, 270, 275, 280, 288, 302, 303, 309, 341, 342, 379, 392, 399, 408, 421, 461, 462, 485, 510], "here": [11, 128, 207, 223, 264, 382, 461, 477, 514], "specif": [11, 51, 71, 84, 85, 87, 93, 94, 99, 114, 115, 123, 125, 140, 161, 164, 166, 167, 170, 176, 179, 186, 205, 208, 231, 235, 243, 264, 304, 324, 336, 338, 340, 345, 346, 351, 367, 368, 376, 379, 394, 414, 417, 420, 421, 424, 430, 440, 459, 462, 485, 498, 518], "noun": [11, 247, 264, 501], "success": [11, 96, 107, 164, 264, 348, 360, 417], "grammar": [11, 159, 160, 211, 218, 264, 412, 413, 472], "parser": [11, 84, 85, 123, 252, 264, 336, 338, 376, 377], "Of": [11, 91, 194, 264, 343, 448], "postag": [11, 264], "11": [11, 82, 118, 119, 131, 132, 135, 151, 242, 250, 264, 335, 371, 372, 384, 386, 389, 405, 497, 505], "21": [11, 131, 132, 141, 151, 250, 264, 384, 386, 395, 405, 505], "35": [11, 95, 151, 162, 250, 264, 347, 405, 415, 505], "39": [11, 141, 146, 151, 243, 248, 250, 264, 395, 400, 405, 498, 503, 505], "52": [11, 141, 151, 248, 264, 395, 405, 503], "58": [11, 78, 151, 264, 331, 405], "choicesdelimit": [12, 13, 19, 37, 45, 265, 271, 289, 298], "setchoicesdelimit": [12, 13, 19, 37, 45, 265, 271, 289, 298], "coalescesent": [12, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 126, 127, 266, 267, 269, 270, 272, 273, 275, 276, 277, 279, 281, 282, 284, 285, 286, 288, 291, 292, 295, 299, 300, 302, 306, 307, 309, 310, 381], "getclass": [12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 54, 55, 56, 57, 58, 64, 67, 78, 80, 136, 142, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 300, 301, 302, 307, 308, 309, 310, 311, 319, 331, 333, 396], "setcoalescesent": [12, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 126, 127, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 381], "maxsentencelength": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 211, 218, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 323, 324, 325, 326, 327, 328, 329, 330, 343, 345, 346, 347, 348, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 472], "setmaxsentencelength": [12, 18, 48, 49, 56, 90, 100, 116, 211, 218, 270, 301, 302, 309, 352, 369, 472], "dropout": [12, 28, 50, 136, 140, 280, 303, 394], "setdropout": [12, 28, 50, 136, 140, 280, 303, 394, 514], "setshuffleperepoch": [12, 44, 231, 297, 485, 510], "setthreshold": [12, 44, 50, 124, 125, 126, 127, 211, 218, 231, 232, 234, 297, 303, 379, 381, 472, 485, 489, 510], "setverbos": [12, 44, 136, 139, 140, 147, 149, 297, 393, 394, 402], "shuffleperepoch": [12, 44, 297], "threshold": [12, 44, 50, 92, 100, 116, 124, 125, 126, 127, 139, 142, 159, 160, 181, 194, 211, 218, 232, 233, 234, 235, 243, 297, 303, 344, 352, 369, 379, 381, 393, 396, 412, 413, 434, 448, 472, 488, 489, 498], "setthresholdlabel": [12, 50, 126, 127, 303, 381], "thresholdlabel": [12, 50, 126, 127, 303, 381], "classifi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 78, 125, 199, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 318, 319, 331, 377, 379, 452, 514], "dl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 127, 140, 142, 182, 183, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 381, 394, 396, 436, 437], "albert": [13, 14, 15, 16, 91, 265, 266, 267, 268, 343], "choic": [13, 19, 37, 45, 110, 111, 133, 166, 169, 265, 271, 289, 298, 363, 364, 387, 420, 423], "linear": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 78, 92, 159, 160, 164, 218, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 331, 344, 412, 413, 417, 472], "layer": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 91, 92, 93, 94, 98, 103, 106, 120, 159, 160, 218, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 343, 344, 345, 346, 350, 355, 359, 373, 412, 413, 472], "pool": [13, 15, 19, 21, 25, 30, 34, 37, 39, 42, 45, 47, 54, 57, 92, 97, 103, 108, 112, 113, 114, 159, 160, 218, 265, 267, 271, 273, 277, 282, 286, 289, 292, 295, 298, 300, 307, 310, 344, 349, 355, 361, 365, 366, 367, 412, 413, 472], "softmax": [13, 15, 17, 18, 19, 21, 23, 25, 27, 32, 34, 36, 37, 39, 42, 45, 47, 49, 54, 56, 57, 98, 100, 116, 181, 218, 265, 267, 269, 270, 271, 273, 275, 277, 279, 284, 286, 288, 289, 292, 295, 298, 300, 302, 307, 309, 310, 350, 352, 369, 434, 472], "rocstori": [13, 19, 37, 45, 265, 271, 289, 298], "swag": [13, 19, 37, 45, 265, 271, 289, 298], "spanclassifi": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 305, 306], "document_quest": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 304, 305, 306], "document_context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 305, 306], "answer": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 93, 94, 103, 120, 142, 161, 162, 164, 169, 177, 205, 207, 252, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 304, 305, 306, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 336, 338, 339, 345, 346, 355, 373, 396, 414, 415, 417, 423, 431, 459, 461], "albert_base_uncased_multiple_choic": [13, 265], "allow": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 103, 109, 115, 139, 140, 143, 153, 154, 161, 176, 190, 191, 208, 217, 235, 243, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 355, 362, 368, 393, 394, 397, 407, 408, 414, 430, 444, 445, 462, 471, 490, 498], "faster": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 92, 99, 103, 106, 159, 160, 169, 182, 183, 218, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 344, 351, 355, 359, 412, 413, 423, 436, 437, 472], "requir": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 84, 85, 91, 94, 95, 98, 101, 103, 109, 115, 118, 119, 125, 140, 143, 157, 181, 192, 194, 197, 199, 204, 210, 252, 255, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 335, 336, 338, 342, 343, 346, 347, 350, 353, 355, 362, 368, 371, 372, 379, 394, 397, 411, 434, 446, 448, 450, 452, 457, 464, 507, 513, 514, 515], "8": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 67, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 131, 135, 140, 141, 145, 146, 149, 164, 173, 181, 192, 194, 246, 250, 254, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 319, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 350, 351, 353, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 384, 389, 394, 395, 399, 400, 402, 417, 427, 434, 446, 448, 500, 505], "ignor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 130, 135, 138, 142, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 185, 205, 218, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 383, 389, 392, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 459, 472], "case": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 85, 86, 87, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 122, 127, 130, 134, 143, 162, 165, 172, 181, 182, 185, 191, 197, 218, 246, 247, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 338, 339, 340, 342, 343, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 374, 381, 383, 388, 415, 419, 426, 434, 436, 439, 445, 450, 472, 500, 501, 514], "512": [13, 15, 17, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36, 37, 39, 42, 45, 47, 49, 51, 54, 56, 57, 88, 95, 101, 103, 106, 107, 108, 109, 113, 114, 168, 218, 265, 267, 269, 270, 271, 273, 275, 277, 279, 282, 284, 286, 288, 289, 292, 295, 298, 300, 302, 304, 307, 309, 310, 312, 341, 347, 353, 355, 359, 360, 361, 362, 366, 367, 422, 472], "question": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 93, 94, 103, 110, 111, 120, 142, 151, 161, 162, 164, 169, 177, 205, 252, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 304, 305, 306, 317, 321, 323, 324, 325, 326, 327, 328, 329, 330, 336, 338, 345, 346, 355, 363, 364, 373, 396, 405, 414, 415, 417, 423, 431, 459], "context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 69, 70, 92, 93, 94, 100, 103, 109, 116, 120, 145, 157, 159, 160, 165, 173, 175, 181, 191, 218, 234, 265, 266, 271, 272, 276, 281, 285, 289, 291, 294, 298, 299, 305, 306, 321, 323, 344, 345, 346, 352, 355, 362, 369, 373, 399, 411, 412, 413, 419, 427, 429, 434, 445, 472], "questionansw": [13, 19, 20, 37, 45, 265, 271, 272, 289, 298], "eiffel": [13, 19, 37, 45, 265, 271, 289, 298], "tower": [13, 19, 37, 45, 265, 271, 289, 298], "countri": [13, 19, 37, 45, 181, 265, 271, 289, 298, 434], "germani": [13, 19, 37, 45, 265, 271, 289, 298], "franc": [13, 19, 27, 37, 45, 168, 265, 271, 279, 289, 298, 312, 422], "itali": [13, 19, 37, 45, 265, 271, 289, 298], "split": [13, 19, 37, 45, 66, 67, 77, 78, 79, 80, 86, 88, 92, 153, 154, 159, 160, 168, 188, 189, 190, 194, 218, 234, 242, 265, 271, 289, 298, 312, 318, 319, 330, 331, 332, 333, 339, 341, 344, 407, 408, 412, 413, 422, 441, 443, 444, 448, 472, 497], "bert_base_uncased_multiple_choic": [13, 19, 37, 265, 271, 289], "span": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 161, 176, 177, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 414, 430, 431], "squad": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 91, 93, 94, 98, 107, 110, 111, 161, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 343, 345, 346, 350, 360, 363, 364, 414], "comput": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 67, 78, 80, 81, 91, 98, 99, 104, 115, 164, 168, 169, 170, 179, 183, 194, 205, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 312, 319, 331, 333, 334, 343, 350, 351, 357, 368, 417, 422, 423, 424, 432, 437, 448, 459, 518], "logit": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 49, 52, 53, 54, 56, 57, 145, 159, 160, 218, 266, 267, 269, 270, 272, 273, 275, 276, 277, 279, 281, 284, 285, 286, 288, 291, 292, 294, 295, 299, 300, 302, 305, 306, 307, 309, 310, 399, 412, 413, 472], "albert_base_qa_squad2": [14, 266], "128": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 91, 93, 94, 96, 98, 99, 104, 110, 111, 118, 119, 120, 231, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 343, 345, 346, 348, 350, 351, 357, 363, 364, 371, 372, 373, 485, 510], "what": [14, 20, 24, 29, 33, 38, 41, 46, 50, 52, 53, 65, 67, 72, 73, 84, 85, 125, 127, 142, 145, 168, 170, 174, 181, 189, 247, 266, 272, 276, 281, 285, 291, 294, 299, 303, 305, 306, 312, 317, 319, 325, 326, 336, 338, 379, 381, 396, 399, 422, 424, 428, 434, 443, 501, 511], "": [14, 17, 18, 20, 23, 24, 27, 29, 32, 33, 36, 38, 41, 46, 49, 52, 53, 56, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 88, 91, 95, 96, 98, 99, 100, 101, 105, 109, 110, 111, 115, 116, 118, 119, 122, 125, 133, 140, 143, 145, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 189, 190, 191, 194, 196, 200, 205, 207, 218, 223, 229, 231, 244, 254, 255, 266, 269, 270, 272, 275, 276, 279, 281, 284, 285, 288, 291, 294, 299, 302, 305, 306, 309, 312, 313, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 341, 342, 343, 347, 348, 350, 351, 352, 353, 358, 362, 363, 364, 369, 371, 372, 374, 379, 387, 394, 397, 399, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 443, 444, 445, 448, 449, 453, 459, 461, 465, 466, 472, 474, 477, 480, 484, 485, 499, 510, 513, 514, 515, 518], "my": [14, 16, 17, 20, 22, 24, 28, 29, 31, 33, 35, 38, 40, 41, 42, 43, 46, 48, 50, 52, 53, 55, 58, 86, 87, 88, 133, 135, 142, 145, 153, 163, 164, 165, 169, 171, 172, 173, 175, 185, 188, 190, 207, 266, 268, 269, 272, 274, 276, 280, 281, 283, 285, 287, 291, 293, 294, 295, 296, 299, 301, 303, 305, 306, 308, 311, 339, 340, 341, 387, 389, 396, 399, 407, 416, 417, 419, 423, 425, 426, 427, 429, 439, 441, 444, 461, 514], "clara": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 142, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 396], "live": [14, 16, 20, 22, 24, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 142, 164, 165, 231, 266, 268, 272, 274, 276, 281, 283, 285, 287, 291, 293, 294, 296, 299, 301, 305, 306, 308, 311, 396, 417, 419, 485, 510], "berkelei": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 171, 172, 173, 175, 266, 272, 276, 281, 285, 291, 294, 299, 305, 306, 425, 426, 427, 429], "instead": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 94, 125, 127, 131, 132, 177, 199, 200, 204, 205, 234, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 346, 379, 381, 384, 386, 431, 452, 453, 457, 459, 518], "per": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 81, 95, 101, 109, 118, 119, 127, 131, 135, 137, 138, 139, 140, 145, 148, 194, 205, 207, 223, 234, 237, 242, 246, 267, 268, 269, 270, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 334, 347, 353, 362, 371, 372, 381, 384, 389, 391, 392, 393, 394, 399, 448, 459, 461, 477, 492, 497, 500], "averag": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 95, 97, 101, 104, 109, 112, 118, 119, 127, 140, 151, 179, 218, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 304, 307, 309, 310, 347, 349, 353, 357, 362, 365, 371, 372, 381, 394, 405, 432, 472], "regress": [15, 21, 25, 30, 34, 39, 42, 47, 54, 57, 161, 177, 267, 273, 277, 282, 286, 292, 295, 300, 307, 310, 414, 431], "multi": [15, 21, 25, 28, 30, 34, 39, 42, 44, 47, 50, 54, 57, 91, 113, 115, 118, 119, 125, 127, 168, 218, 267, 273, 277, 280, 282, 286, 292, 295, 297, 300, 303, 307, 310, 312, 343, 366, 368, 371, 372, 379, 381, 422, 472], "sequenceclassifi": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310], "albert_base_sequence_classifier_imdb": [15, 267], "activ": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 125, 175, 204, 211, 218, 254, 267, 269, 270, 273, 275, 277, 279, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 379, 429, 457, 472], "calcul": [15, 17, 18, 21, 23, 25, 27, 28, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 81, 117, 135, 140, 149, 156, 179, 218, 267, 269, 270, 273, 275, 277, 279, 280, 284, 286, 288, 292, 295, 297, 300, 302, 303, 307, 309, 310, 334, 370, 389, 394, 402, 410, 432, 472], "sigmoid": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 218, 267, 269, 270, 273, 275, 277, 279, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 472], "love": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 94, 111, 119, 154, 157, 267, 270, 273, 275, 280, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 346, 364, 372, 408, 411, 514], "movi": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 157, 163, 267, 270, 273, 275, 280, 282, 284, 286, 288, 292, 300, 302, 303, 307, 309, 310, 411, 416, 514], "child": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 267, 270, 273, 275, 282, 284, 286, 288, 292, 300, 302, 307, 309, 310], "pretti": [15, 18, 21, 23, 30, 32, 34, 36, 39, 44, 47, 49, 54, 56, 57, 125, 267, 270, 273, 275, 282, 284, 286, 288, 292, 297, 300, 302, 307, 309, 310, 379], "bore": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 267, 270, 273, 275, 282, 284, 286, 288, 292, 300, 302, 307, 309, 310], "neg": [15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 113, 156, 157, 179, 218, 231, 267, 270, 273, 275, 277, 282, 284, 286, 288, 292, 300, 302, 303, 307, 309, 310, 366, 410, 411, 432, 472, 485, 510], "limit": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 69, 78, 80, 88, 91, 96, 105, 107, 114, 117, 120, 125, 157, 177, 182, 218, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 319, 321, 331, 333, 341, 343, 348, 358, 360, 367, 370, 373, 379, 431, 436, 472], "almost": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310], "help": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 69, 76, 84, 85, 86, 91, 92, 145, 146, 159, 160, 162, 165, 166, 168, 172, 174, 191, 207, 218, 231, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 312, 321, 329, 336, 338, 339, 343, 344, 399, 400, 412, 413, 415, 419, 420, 422, 426, 428, 445, 461, 472, 485, 510, 515, 519], "feed": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310], "entir": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 95, 108, 113, 114, 168, 173, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 300, 302, 307, 309, 310, 312, 319, 347, 361, 366, 367, 422, 427], "one": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 44, 47, 49, 54, 56, 57, 63, 67, 78, 79, 80, 81, 84, 85, 87, 93, 94, 102, 107, 112, 118, 119, 120, 125, 127, 131, 133, 138, 145, 154, 160, 173, 182, 188, 207, 210, 218, 233, 234, 244, 267, 269, 270, 273, 275, 277, 279, 282, 284, 286, 288, 292, 295, 297, 300, 302, 307, 309, 310, 316, 319, 331, 332, 333, 334, 336, 338, 340, 345, 346, 354, 360, 365, 371, 372, 373, 379, 381, 384, 387, 392, 399, 408, 413, 427, 436, 441, 461, 464, 472, 488, 489, 499, 510, 514], "token_classifi": [16, 26, 40, 43, 48, 55, 58, 268, 278, 293, 296, 301, 308, 311], "albert_base_token_classifier_conll03": [16, 268], "tokenclassifi": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311], "john": [16, 22, 31, 35, 40, 43, 48, 55, 58, 63, 94, 111, 119, 122, 123, 141, 143, 154, 201, 244, 250, 268, 274, 283, 287, 293, 296, 301, 308, 311, 316, 346, 364, 372, 374, 376, 395, 397, 408, 454, 499, 505], "lenon": [16, 22, 31, 35, 40, 43, 48, 55, 58, 268, 274, 283, 287, 293, 296, 301, 308, 311], "born": [16, 22, 31, 35, 40, 43, 48, 55, 58, 164, 165, 268, 274, 283, 287, 293, 296, 301, 308, 311, 417, 419], "london": [16, 22, 31, 35, 40, 43, 48, 55, 58, 268, 274, 283, 287, 293, 296, 301, 308, 311], "pari": [16, 22, 31, 35, 40, 43, 48, 55, 58, 142, 268, 274, 283, 287, 293, 296, 301, 308, 311, 396], "sarah": [16, 22, 31, 35, 40, 43, 48, 55, 58, 268, 274, 283, 287, 293, 296, 301, 308, 311], "o": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 138, 139, 140, 141, 205, 223, 237, 246, 249, 268, 274, 278, 283, 287, 293, 296, 301, 308, 311, 392, 393, 394, 395, 459, 477, 492, 500, 504, 520], "modelforsequenceclassif": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "nli": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "natur": [17, 18, 23, 27, 32, 36, 49, 50, 56, 80, 91, 92, 93, 94, 96, 98, 99, 100, 107, 115, 116, 120, 127, 161, 164, 169, 175, 177, 197, 206, 210, 269, 270, 275, 279, 284, 288, 302, 303, 309, 333, 343, 344, 345, 346, 348, 350, 351, 352, 360, 368, 369, 373, 381, 414, 417, 423, 429, 431, 450, 460, 464], "don": [17, 18, 23, 27, 32, 36, 49, 56, 99, 110, 143, 218, 269, 270, 275, 279, 284, 288, 302, 309, 351, 363, 397, 472], "hardcod": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "potenti": [17, 18, 23, 27, 32, 36, 49, 56, 78, 163, 167, 171, 173, 181, 269, 270, 275, 279, 284, 288, 302, 309, 331, 416, 421, 425, 427, 434], "thei": [17, 18, 23, 27, 32, 36, 49, 51, 56, 84, 85, 86, 140, 143, 145, 160, 164, 208, 247, 269, 270, 275, 279, 284, 288, 302, 304, 309, 336, 338, 339, 394, 397, 399, 413, 417, 462, 480, 501, 514], "chosen": [17, 18, 23, 27, 32, 36, 49, 56, 84, 85, 140, 145, 269, 270, 275, 279, 284, 288, 302, 309, 336, 338, 394, 399], "runtim": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "usual": [17, 18, 23, 27, 32, 36, 49, 56, 80, 210, 238, 269, 270, 275, 279, 284, 288, 302, 309, 333, 464, 493], "slower": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "flexibl": [17, 18, 23, 27, 32, 36, 49, 56, 66, 71, 78, 269, 270, 275, 279, 284, 288, 302, 309, 318, 324, 331], "loop": [17, 18, 23, 36, 49, 56, 207, 269, 270, 275, 288, 302, 309, 461], "through": [17, 18, 23, 36, 49, 56, 91, 107, 123, 125, 135, 167, 170, 172, 201, 269, 270, 275, 288, 302, 309, 343, 360, 376, 379, 421, 424, 426, 454, 515], "longer": [17, 18, 23, 36, 49, 56, 91, 100, 105, 116, 127, 165, 168, 169, 269, 270, 275, 288, 302, 309, 312, 343, 352, 358, 369, 381, 419, 422, 423, 519], "pass": [17, 18, 23, 27, 32, 36, 49, 56, 145, 207, 269, 270, 275, 279, 284, 288, 302, 309, 342, 399, 461], "pose": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "premis": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "hypothesi": [17, 18, 23, 27, 32, 36, 49, 56, 269, 270, 275, 279, 284, 288, 302, 309], "pair": [17, 18, 23, 27, 32, 36, 49, 56, 66, 101, 102, 109, 113, 123, 167, 231, 269, 270, 275, 279, 284, 288, 302, 309, 318, 353, 354, 362, 366, 376, 421, 485], "albert_base_zero_shot_classifier_onnx": [17, 269], "iphon": [17, 269], "resolv": [17, 269], "asap": [17, 269], "urgent": [17, 269], "albert_zero_shot_classifier_onnx": [17, 269], "bart": [17, 18, 161, 269, 270, 414], "bartforsequenceclassif": [18, 270], "bart_large_zero_shot_classifier_mnli": [18, 270], "bert_base_cased_qa_squad2": [20, 272], "bert_base_sequence_classifier_imdb": [21, 273], "bert_base_token_classifier_conll03": [22, 274], "bert_zero_shot_classifier_mnli": [23, 275], "camembert": [24, 25, 26, 96, 276, 277, 278, 348], "camembert_base_qa_fquad": [24, 276], "fr": [24, 25, 27, 96, 127, 167, 170, 276, 277, 279, 348, 381, 421, 424], "sequence_classifi": [25, 277], "camembert_base_sequence_classifier_allocin": [25, 277], "j": [25, 122, 277, 374], "ai": [25, 145, 146, 161, 166, 231, 277, 399, 400, 414, 420, 485, 510], "ador\u00e9": [25, 277], "ce": [25, 277], "film": [25, 277], "lorsqu": [25, 277], "\u00e9tai": [25, 277], "enfant": [25, 277], "je": [25, 277], "d\u00e9test": [25, 277], "\u00e7a": [25, 277], "camembert_base_token_classifier_wikin": [26, 278], "georg": [26, 278], "washington": [26, 278], "est": [26, 96, 127, 168, 278, 312, 348, 381, 422], "all\u00e9": [26, 278], "\u00e0": [26, 278], "camembert_zero_shot_classifier_xnli_onnx": [27, 279], "multi_class": [27, 279], "setcandidatelabel": [27, 66, 211, 218, 279, 318, 472], "sport": [27, 279], "politiqu": [27, 279], "scienc": [27, 104, 125, 171, 176, 279, 357, 379, 425, 430, 511], "l": [27, 71, 242, 279, 324], "\u00e9quip": [27, 279], "de": [27, 80, 96, 125, 127, 168, 279, 312, 333, 348, 379, 381, 422], "joue": [27, 279], "aujourd": [27, 279], "hui": [27, 279], "au": [27, 279], "parc": [27, 279], "princ": [27, 279], "classifierdl": [28, 280, 514], "univers": [28, 84, 85, 102, 114, 115, 163, 168, 170, 171, 172, 173, 175, 280, 312, 336, 338, 354, 367, 368, 416, 422, 424, 425, 426, 427, 429], "deep": [28, 93, 94, 103, 106, 125, 139, 154, 181, 218, 280, 345, 346, 355, 359, 379, 393, 408, 434, 472], "dnn": [28, 280], "built": [28, 44, 69, 163, 175, 206, 254, 280, 297, 321, 416, 429, 460], "insid": [28, 44, 138, 151, 191, 246, 280, 297, 392, 405, 445, 500], "instanti": [28, 44, 50, 84, 85, 100, 116, 117, 122, 128, 130, 133, 134, 139, 140, 143, 151, 154, 156, 157, 179, 181, 182, 183, 188, 189, 194, 244, 246, 247, 280, 297, 303, 336, 338, 342, 352, 369, 370, 374, 382, 383, 387, 388, 393, 394, 397, 405, 408, 410, 411, 432, 434, 436, 437, 441, 443, 448, 499, 500, 501], "dataset": [28, 44, 50, 84, 85, 95, 96, 100, 101, 104, 105, 107, 110, 111, 113, 114, 116, 117, 125, 127, 139, 140, 149, 154, 164, 166, 167, 170, 171, 173, 176, 181, 194, 229, 235, 237, 246, 247, 248, 249, 255, 280, 297, 303, 336, 338, 347, 348, 352, 353, 357, 358, 360, 363, 364, 366, 367, 369, 370, 379, 381, 393, 394, 402, 408, 417, 420, 421, 424, 425, 427, 430, 434, 448, 484, 490, 492, 500, 501, 503, 504, 517], "monitor": [28, 44, 50, 140, 145, 146, 230, 231, 280, 297, 303, 394, 399, 400, 485, 510], "metric": [28, 44, 50, 140, 183, 231, 280, 297, 303, 394, 437, 485], "done": [28, 44, 50, 110, 111, 139, 140, 280, 297, 303, 363, 364, 393, 394, 515], "settestdataset": [28, 44, 50, 140, 147, 149, 280, 297, 303, 394, 402], "method": [28, 44, 50, 91, 92, 95, 99, 100, 104, 107, 116, 120, 125, 140, 159, 160, 179, 218, 238, 280, 297, 303, 342, 343, 344, 347, 351, 352, 357, 360, 369, 373, 379, 394, 412, 413, 432, 472, 493, 509], "expect": [28, 44, 50, 95, 101, 109, 120, 140, 160, 191, 207, 223, 253, 280, 297, 303, 347, 353, 362, 373, 394, 413, 445, 461, 477, 508], "path": [28, 44, 50, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 85, 100, 116, 117, 122, 123, 128, 130, 133, 134, 139, 140, 142, 143, 149, 154, 156, 159, 160, 164, 181, 182, 183, 186, 191, 204, 205, 221, 222, 231, 233, 235, 237, 242, 243, 244, 246, 247, 248, 249, 252, 280, 297, 303, 317, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 336, 338, 352, 369, 370, 374, 376, 382, 383, 387, 388, 393, 394, 396, 397, 402, 408, 410, 412, 413, 417, 434, 436, 437, 440, 445, 457, 459, 475, 476, 485, 488, 492, 497, 498, 499, 500, 501, 503, 504, 507, 510], "parquet": [28, 44, 50, 81, 140, 149, 196, 280, 297, 303, 334, 394, 402, 449], "datafram": [28, 44, 50, 81, 100, 116, 117, 140, 149, 151, 179, 194, 204, 205, 218, 219, 223, 229, 231, 233, 235, 237, 243, 244, 246, 247, 248, 249, 253, 280, 297, 303, 334, 352, 369, 370, 394, 402, 405, 432, 448, 457, 459, 472, 473, 477, 484, 485, 488, 492, 498, 499, 500, 501, 503, 504, 508, 510, 514, 518, 520], "ha": [28, 44, 50, 51, 66, 67, 78, 79, 80, 86, 87, 88, 91, 98, 99, 103, 110, 111, 114, 117, 125, 128, 133, 140, 149, 154, 156, 160, 161, 162, 170, 171, 173, 177, 182, 183, 194, 196, 197, 204, 205, 218, 231, 238, 248, 280, 297, 303, 304, 318, 319, 331, 332, 333, 339, 340, 341, 343, 350, 351, 355, 363, 364, 367, 370, 379, 382, 387, 394, 402, 408, 410, 413, 414, 415, 424, 425, 427, 431, 436, 437, 448, 449, 450, 457, 459, 472, 485, 493, 503, 510, 514, 515], "same": [28, 44, 50, 63, 69, 91, 107, 110, 117, 118, 122, 123, 140, 145, 149, 163, 172, 173, 177, 179, 208, 231, 280, 297, 303, 316, 321, 343, 360, 363, 370, 371, 374, 376, 394, 399, 402, 416, 426, 427, 431, 432, 462, 485, 515], "also": [28, 44, 50, 66, 67, 71, 73, 76, 77, 78, 79, 80, 81, 87, 91, 95, 102, 103, 105, 106, 117, 118, 119, 122, 123, 125, 131, 133, 138, 139, 140, 149, 154, 157, 161, 163, 169, 173, 176, 185, 205, 209, 244, 254, 280, 297, 303, 318, 319, 324, 326, 329, 330, 331, 332, 333, 334, 340, 343, 347, 354, 355, 358, 359, 370, 371, 372, 374, 376, 379, 384, 387, 392, 393, 394, 401, 402, 408, 411, 414, 416, 423, 427, 430, 439, 459, 463, 467, 472, 483, 489, 499, 510, 514, 515, 516, 517, 519], "follow": [28, 44, 50, 63, 76, 82, 87, 103, 105, 113, 117, 125, 131, 132, 133, 138, 140, 143, 153, 169, 173, 192, 207, 209, 235, 243, 280, 297, 303, 316, 329, 335, 340, 355, 358, 366, 370, 379, 384, 386, 387, 392, 394, 397, 407, 423, 427, 446, 461, 463, 498, 510, 512, 515], "preprocessingpipelin": [28, 44, 50, 140, 149, 280, 297, 303, 394, 402], "randomsplit": [28, 44, 50, 140, 149, 280, 297, 303, 394, 402], "write": [28, 44, 50, 117, 140, 145, 149, 163, 176, 182, 183, 280, 297, 303, 370, 394, 399, 402, 416, 430, 436, 437, 515], "overwrit": [28, 44, 50, 140, 141, 149, 231, 280, 297, 303, 394, 395, 402, 485], "test_data": [28, 44, 50, 140, 149, 280, 297, 303, 394, 402], "usag": [28, 44, 50, 63, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 99, 103, 110, 115, 117, 118, 120, 122, 125, 127, 128, 131, 132, 133, 134, 139, 140, 143, 151, 153, 154, 156, 157, 159, 160, 161, 168, 177, 179, 181, 182, 184, 185, 189, 191, 194, 280, 297, 303, 312, 316, 336, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 351, 355, 363, 368, 370, 371, 373, 374, 379, 381, 382, 384, 386, 387, 388, 393, 394, 397, 405, 407, 408, 410, 411, 412, 413, 414, 422, 431, 432, 434, 436, 438, 439, 443, 445, 448], "64": [28, 44, 50, 91, 140, 148, 280, 297, 303, 343, 394, 401, 514], "coeffici": [28, 50, 139, 140, 280, 303, 393, 394], "5": [28, 44, 50, 63, 70, 78, 81, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 131, 132, 135, 138, 140, 145, 146, 151, 157, 164, 172, 173, 175, 194, 199, 205, 218, 223, 231, 237, 247, 248, 249, 250, 280, 297, 303, 316, 323, 331, 334, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 381, 384, 386, 389, 392, 394, 399, 400, 405, 417, 426, 427, 429, 448, 452, 459, 472, 477, 485, 492, 501, 503, 504, 505, 510, 513, 514, 520], "enableoutputlog": [28, 44, 50, 140, 147, 149, 280, 297, 303, 394, 402], "stdout": [28, 44, 50, 140, 149, 280, 297, 303, 394, 402], "addit": [28, 44, 50, 81, 84, 85, 93, 94, 122, 139, 140, 145, 149, 153, 160, 164, 176, 191, 231, 280, 297, 303, 334, 336, 338, 342, 345, 346, 374, 393, 394, 399, 402, 407, 413, 417, 430, 445, 485, 513, 514], "evaluationlogextend": [28, 44, 50, 140, 147, 149, 280, 297, 303, 394, 402], "valid": [28, 44, 50, 131, 140, 149, 154, 181, 280, 297, 303, 384, 394, 402, 408, 434, 510], "displai": [28, 44, 50, 149, 164, 231, 280, 297, 303, 402, 417, 485, 510], "lr": [28, 44, 50, 136, 140, 147, 148, 194, 280, 297, 303, 394, 401, 448], "rate": [28, 44, 50, 71, 82, 100, 110, 111, 116, 117, 140, 148, 159, 160, 179, 181, 218, 280, 297, 303, 324, 335, 352, 363, 364, 369, 370, 394, 401, 412, 413, 432, 434, 472], "005": [28, 50, 140, 148, 280, 303, 394, 401], "maxepoch": [28, 44, 50, 136, 137, 139, 140, 147, 148, 280, 297, 303, 391, 393, 394, 401], "epoch": [28, 44, 50, 137, 139, 140, 148, 149, 154, 180, 181, 231, 280, 297, 303, 391, 393, 394, 401, 402, 408, 434, 485], "30": [28, 50, 125, 131, 132, 138, 148, 168, 205, 223, 237, 250, 280, 303, 312, 379, 384, 386, 392, 401, 422, 459, 477, 492, 505, 513], "outputlogspath": [28, 44, 50, 140, 147, 149, 152, 154, 280, 297, 303, 394, 402, 408], "randomse": [28, 44, 50, 136, 137, 139, 140, 147, 148, 280, 297, 303, 391, 393, 394, 401], "random": [28, 44, 50, 100, 116, 137, 139, 140, 145, 148, 168, 179, 199, 280, 297, 303, 352, 369, 391, 393, 394, 399, 401, 422, 432, 452], "seed": [28, 44, 50, 90, 100, 116, 137, 139, 140, 148, 159, 160, 168, 211, 218, 280, 297, 303, 352, 369, 391, 393, 394, 401, 412, 413, 422, 472], "shuffl": [28, 44, 137, 148, 161, 280, 297, 391, 401, 414], "testdataset": [28, 44, 50, 140, 147, 149, 231, 280, 297, 303, 394, 402, 485, 510], "statist": [28, 44, 50, 117, 125, 140, 149, 280, 297, 303, 370, 379, 394, 402], "validationsplit": [28, 44, 50, 140, 147, 149, 152, 154, 280, 297, 303, 394, 402, 408], "choos": [28, 44, 50, 97, 112, 140, 145, 149, 154, 182, 218, 280, 297, 303, 349, 365, 394, 399, 408, 436], "proport": [28, 44, 50, 140, 149, 154, 157, 280, 297, 303, 394, 402, 408], "against": [28, 44, 50, 122, 125, 130, 134, 140, 149, 154, 172, 173, 208, 280, 297, 303, 374, 379, 383, 388, 394, 402, 408, 426, 427, 462], "between": [28, 44, 50, 71, 78, 84, 85, 86, 88, 102, 107, 110, 111, 115, 118, 119, 120, 123, 140, 145, 149, 153, 154, 167, 169, 170, 181, 218, 234, 280, 297, 303, 324, 331, 336, 338, 339, 341, 354, 360, 363, 364, 368, 371, 372, 373, 376, 394, 399, 402, 407, 408, 421, 423, 424, 434, 472], "off": [28, 44, 50, 115, 118, 119, 140, 149, 154, 171, 280, 297, 303, 368, 371, 372, 394, 402, 408, 425], "verbos": [28, 44, 50, 136, 139, 140, 147, 149, 280, 297, 303, 393, 394, 402], "accept": [28, 44, 50, 77, 145, 233, 235, 280, 297, 303, 330, 399, 488, 490], "singl": [28, 44, 50, 71, 101, 102, 104, 117, 123, 125, 161, 167, 179, 188, 189, 191, 207, 218, 234, 242, 246, 280, 297, 303, 324, 342, 353, 354, 357, 370, 376, 379, 414, 421, 432, 441, 443, 445, 461, 472, 489, 497, 500], "item": [28, 50, 117, 145, 207, 231, 246, 280, 303, 370, 399, 461, 485, 500, 510], "doubl": [28, 50, 156, 196, 209, 280, 303, 449, 463], "In": [28, 44, 50, 67, 80, 88, 96, 98, 99, 105, 107, 109, 117, 120, 122, 125, 127, 128, 130, 133, 134, 153, 154, 156, 160, 161, 164, 165, 167, 169, 170, 172, 175, 176, 177, 182, 183, 194, 231, 235, 248, 280, 297, 303, 319, 333, 341, 348, 350, 351, 358, 360, 362, 370, 373, 374, 379, 381, 382, 383, 387, 388, 407, 408, 410, 413, 414, 417, 419, 421, 423, 424, 426, 429, 430, 431, 436, 437, 448, 485, 503, 510, 514, 515, 519, 520], "csv": [28, 50, 81, 122, 149, 209, 240, 244, 280, 303, 334, 374, 402, 463, 499, 514], "best": [28, 50, 91, 96, 101, 104, 110, 111, 125, 127, 140, 145, 161, 163, 167, 176, 207, 280, 303, 343, 348, 353, 357, 363, 364, 379, 381, 394, 399, 414, 416, 421, 430, 461, 514], "wach": [28, 280, 514], "ever": [28, 50, 87, 280, 303, 340, 514], "opinion": [28, 50, 280, 303, 514], "win": [28, 50, 280, 303, 514], "award": [28, 50, 280, 303, 514], "terribl": [28, 50, 280, 303, 514], "act": [28, 50, 214, 280, 303, 514], "bad": [28, 50, 156, 231, 280, 303, 410, 485, 510, 514], "realli": [28, 50, 145, 157, 280, 303, 399, 411, 514], "Then": [28, 44, 139, 140, 167, 170, 210, 231, 254, 280, 297, 393, 394, 421, 424, 464, 485, 514], "trane": [28, 280], "smallcorpu": [28, 50, 280, 303, 514], "header": [28, 50, 51, 81, 207, 209, 233, 234, 235, 244, 280, 303, 304, 334, 461, 463, 488, 489, 490, 499, 514], "src": [28, 50, 66, 67, 78, 79, 80, 84, 85, 117, 128, 130, 133, 134, 139, 140, 151, 160, 169, 182, 183, 188, 194, 246, 247, 248, 249, 250, 280, 303, 318, 319, 331, 332, 333, 336, 338, 370, 382, 383, 387, 388, 393, 394, 405, 413, 423, 436, 437, 441, 448, 500, 501, 503, 504, 505, 514, 520], "useembed": [28, 44, 50, 115, 280, 297, 303, 368, 514], "docclassifi": [28, 44, 50, 280, 297, 303, 514], "setbatchs": [28, 44, 50, 64, 68, 90, 92, 103, 136, 140, 147, 148, 159, 160, 180, 181, 211, 218, 231, 280, 297, 303, 320, 344, 355, 394, 401, 412, 413, 434, 472, 485, 510, 514], "setmaxepoch": [28, 44, 50, 136, 137, 139, 140, 147, 148, 231, 280, 297, 303, 391, 393, 394, 401, 485, 510, 514], "20": [28, 42, 51, 67, 69, 77, 86, 120, 138, 159, 161, 163, 164, 165, 167, 169, 170, 171, 172, 173, 175, 176, 205, 209, 223, 237, 280, 295, 304, 319, 321, 330, 339, 373, 392, 412, 414, 416, 417, 419, 421, 423, 424, 425, 426, 427, 429, 430, 459, 463, 477, 492, 514], "setlr": [28, 44, 50, 136, 140, 147, 148, 231, 280, 297, 303, 394, 401, 485, 510, 514], "5e": [28, 50, 280, 303, 514], "pipelinemodel": [28, 42, 44, 50, 84, 85, 87, 100, 116, 139, 140, 157, 181, 182, 183, 194, 205, 208, 231, 235, 238, 280, 295, 297, 303, 336, 338, 340, 352, 369, 393, 394, 411, 434, 436, 437, 448, 459, 462, 485, 490, 493, 514, 517], "v": [28, 44, 50, 82, 98, 102, 107, 117, 125, 127, 130, 140, 148, 149, 163, 183, 218, 223, 280, 297, 303, 335, 350, 354, 360, 370, 379, 381, 383, 394, 401, 402, 416, 437, 472, 477], "your": [28, 44, 50, 84, 88, 92, 99, 100, 110, 112, 116, 128, 130, 133, 134, 138, 139, 140, 143, 145, 146, 151, 156, 157, 159, 160, 181, 182, 188, 189, 194, 199, 235, 243, 254, 255, 280, 297, 303, 336, 341, 344, 351, 352, 363, 365, 369, 382, 383, 387, 388, 392, 393, 394, 397, 399, 400, 405, 410, 411, 412, 413, 434, 436, 441, 443, 448, 452, 490, 498, 512, 514, 517, 518, 520], "own": [28, 44, 50, 84, 100, 116, 128, 130, 133, 134, 139, 140, 143, 151, 156, 157, 181, 182, 188, 189, 194, 255, 280, 297, 303, 336, 342, 352, 369, 382, 383, 387, 388, 393, 394, 397, 405, 410, 411, 434, 436, 441, 443, 448, 517, 518, 520], "classifierdl_use_trec6": [28, 280, 514], "trec": [28, 280], "sarcasmdl": [28, 280, 514], "classifierdl_use_sarcasm": [28, 280, 514], "sarcasm": [28, 280, 514], "m": [28, 88, 131, 132, 162, 244, 250, 280, 341, 384, 386, 415, 499, 505, 514], "readi": [28, 237, 254, 280, 492, 514], "could": [28, 99, 125, 133, 149, 181, 280, 351, 379, 387, 402, 434, 513, 514, 515], "put": [28, 207, 223, 280, 461, 477, 514], "word": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 85, 91, 97, 98, 100, 102, 103, 110, 112, 115, 116, 117, 120, 122, 123, 125, 128, 135, 138, 141, 142, 143, 151, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 189, 191, 193, 194, 205, 223, 233, 234, 235, 237, 243, 244, 248, 249, 252, 280, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 338, 343, 349, 350, 352, 354, 355, 363, 365, 368, 369, 370, 373, 374, 376, 379, 382, 389, 392, 395, 396, 397, 405, 410, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 443, 445, 447, 448, 459, 477, 488, 490, 492, 498, 499, 503, 504, 513, 514], "wake": [28, 280, 514], "am": [28, 86, 131, 132, 159, 163, 164, 165, 166, 171, 172, 173, 175, 188, 280, 339, 384, 386, 412, 416, 417, 419, 420, 425, 426, 427, 429, 441, 514], "mondai": [28, 280, 514], "arrays_zip": [28, 84, 85, 125, 280, 336, 338, 379, 514], "out": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 92, 95, 101, 109, 125, 128, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 184, 185, 280, 321, 323, 324, 325, 326, 327, 328, 329, 330, 334, 344, 347, 353, 362, 379, 382, 397, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 438, 439, 514], "deberta": [29, 30, 31, 32, 98, 281, 282, 283, 284, 350], "deberta_v3_xsmall_qa_squad2": [29, 281], "v2": [30, 31, 93, 94, 98, 176, 282, 283, 345, 346, 350, 430], "v3": [30, 31, 282, 283], "deberta_v3_xsmall_sequence_classifier_imdb": [30, 282], "deberta_base_sequence_classifier_imdb": [30, 282], "deberta_v3_xsmall_token_classifier_conll03": [31, 283], "deberta_base_zero_shot_classifier_mnli_anli_v3": [32, 284], "distilbert": [33, 34, 36, 37, 99, 285, 286, 288, 289, 351], "distilbert_base_cased_qa_squad2": [33, 285], "distilbert_base_sequence_classifier_imdb": [34, 286], "distilbert_base_token_classifier_conll03": [35, 287], "distilbert_base_zero_shot_classifier_uncased_mnli": [36, 288], "distilbert_base_uncased_multiple_choic": [37, 289], "longform": [38, 39, 40, 105, 291, 292, 293, 358], "longformer_base_base_qa_squad2": [38, 291], "longformer_base_sequence_classifier_imdb": [39, 292], "4096": [39, 69, 70, 91, 105, 160, 218, 292, 321, 323, 343, 358, 413, 472], "xlnet_base_token_classifier_conll03": [40, 58, 293, 311], "longformer_base_token_classifier_conll03": [40, 293], "mpnet": [41, 42, 107, 294, 295, 360], "mpnet_base_question_answering_squad2": [41, 294], "mpnet_sequence_classifier_ukr_messag": [42, 295], "drive": [42, 295], "car": [42, 295], "bu": [42, 295], "arriv": [42, 295], "minut": [42, 44, 295, 297], "pineappl": [42, 295], "pizza": [42, 295], "worst": [42, 295], "transport": [42, 295], "movement": [42, 295], "food": [42, 145, 146, 160, 295, 399, 400, 413], "mpnet_base_sequence_classifier_imdb": [42, 295], "xlm": [43, 52, 53, 54, 55, 118, 119, 296, 305, 306, 307, 308, 371, 372], "roberta": [43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 79, 96, 98, 105, 107, 110, 111, 118, 119, 142, 161, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 332, 348, 350, 358, 360, 363, 364, 371, 372, 396, 414], "mpnet_base_token_classifi": [43, 55, 296, 308], "multiclassifierdl": [44, 297], "bidirect": [44, 93, 94, 103, 120, 161, 297, 345, 346, 355, 373, 414], "gru": [44, 297], "convolut": [44, 67, 80, 297, 319, 333], "machin": [44, 67, 86, 88, 100, 116, 125, 139, 161, 164, 167, 168, 170, 177, 231, 297, 312, 319, 339, 341, 352, 369, 379, 393, 414, 417, 421, 422, 424, 431, 485, 512], "strongli": [44, 297], "relat": [44, 84, 85, 123, 297, 336, 338, 376, 519], "variant": [44, 82, 105, 115, 173, 297, 335, 358, 368, 427], "mai": [44, 88, 92, 145, 159, 160, 165, 167, 172, 197, 218, 244, 297, 341, 342, 344, 399, 412, 413, 419, 421, 426, 450, 472, 499, 513, 514, 515, 518, 519], "multiclass": [44, 218, 297], "categor": [44, 238, 297, 493], "precis": [44, 84, 85, 88, 218, 297, 336, 338, 341, 472], "constraint": [44, 297], "mani": [44, 73, 98, 110, 111, 125, 145, 161, 163, 164, 165, 167, 168, 170, 177, 194, 243, 297, 312, 326, 342, 350, 363, 364, 379, 399, 414, 416, 417, 419, 421, 422, 424, 431, 448, 498], "formal": [44, 297], "find": [44, 84, 85, 109, 110, 111, 114, 115, 122, 123, 128, 131, 161, 164, 176, 297, 336, 338, 362, 363, 364, 367, 368, 374, 376, 382, 384, 414, 417, 430], "x": [44, 71, 223, 246, 254, 297, 324, 477, 500, 520], "binari": [44, 204, 211, 219, 231, 242, 244, 297, 457, 473, 485, 497, 499], "y": [44, 88, 254, 297, 341], "multiclassifi": [44, 231, 297, 485, 510], "001": [44, 82, 139, 140, 297, 335, 393, 394], "10": [44, 63, 68, 84, 88, 95, 125, 131, 132, 141, 145, 162, 167, 179, 182, 231, 250, 297, 316, 320, 336, 341, 347, 379, 384, 386, 395, 399, 415, 421, 432, 436, 485, 505, 513], "44": [44, 100, 116, 151, 170, 297, 352, 369, 405, 424], "ed58abb40640f983": [44, 297], "pn": [44, 297], "newsyou": [44, 297], "toxic": [44, 170, 172, 297, 424, 426], "a1237f726b5f5d89": [44, 297], "dude": [44, 297], "place": [44, 80, 160, 207, 297, 333, 342, 413, 461], "obscen": [44, 297], "insult": [44, 297], "24b0d6c8733c2abe": [44, 297], "thank": [44, 120, 125, 162, 250, 297, 373, 379, 415, 505], "8c4478fb239bcfc0": [44, 297], "gee": [44, 297], "traindataset": [44, 231, 297, 485, 510], "printschema": [44, 196, 198, 204, 206, 233, 242, 244, 297, 449, 451, 457, 460, 488, 497, 499], "root": [44, 63, 84, 85, 123, 196, 198, 204, 206, 233, 242, 244, 247, 297, 316, 336, 338, 376, 449, 451, 457, 460, 488, 497, 499, 501], "setcleanupmod": [44, 195, 198, 206, 297, 451, 460], "shrink": [44, 198, 206, 297, 451, 460], "1e": [44, 231, 297, 485, 510], "setvalidationsplit": [44, 147, 149, 152, 154, 297, 402, 408], "multiclassifierdl_use_tox": [44, 297], "comment": [44, 125, 297, 379], "jigsaw": [44, 297], "good": [44, 96, 99, 115, 157, 297, 348, 351, 368, 411], "stuff": [44, 297], "wtf": [44, 297], "kind": [44, 125, 131, 132, 297, 379, 384, 386], "crap": [44, 297], "roberta_base_uncased_multiple_choic": [45, 298], "roberta_base_qa_squad2": [46, 142, 299, 396], "roberta_base_sequence_classifier_imdb": [47, 300], "roberta_base_token_classifier_conll03": [48, 301], "roberta_base_zero_shot_classifier_nli": [49, 302], "sentimentdl": [50, 303], "affect": [50, 191, 218, 303, 445, 472], "subject": [50, 84, 85, 303, 336, 338], "view": [50, 303], "product": [50, 171, 303, 425], "review": [50, 145, 227, 303, 399, 481], "tweet": [50, 303], "interpret": [50, 86, 122, 175, 221, 303, 339, 374, 429, 475], "posit": [50, 98, 99, 107, 113, 118, 119, 120, 125, 138, 145, 156, 157, 160, 179, 190, 194, 210, 218, 231, 303, 350, 351, 360, 366, 371, 372, 373, 379, 392, 399, 410, 411, 413, 432, 444, 448, 464, 472, 485, 510], "final": [50, 86, 105, 110, 111, 118, 119, 127, 140, 167, 181, 303, 339, 358, 363, 364, 371, 372, 381, 394, 421, 434, 514], "otheriws": [50, 127, 303, 381], "neutral": [50, 127, 303, 381], "score": [50, 93, 94, 118, 119, 125, 127, 139, 140, 142, 156, 157, 164, 303, 345, 346, 371, 372, 379, 381, 393, 394, 396, 410, 411, 417], "less": [50, 99, 127, 131, 135, 139, 168, 172, 182, 303, 351, 381, 384, 389, 393, 422, 426, 436], "watch": [50, 157, 163, 303, 411, 416], "32": [50, 91, 92, 103, 159, 160, 218, 250, 303, 343, 344, 355, 412, 413, 472, 505, 513, 519], "p": [50, 87, 100, 116, 127, 140, 149, 159, 160, 189, 218, 303, 340, 352, 369, 381, 394, 402, 412, 413, 443, 472], "sentimentdl_use_imdb": [50, 303], "imdb": [50, 303], "sentimentdl_use_twitt": [50, 303], "wow": [50, 303], "video": [50, 125, 303, 379], "awesom": [50, 303], "bruh": [50, 303], "damn": [50, 303], "wast": [50, 157, 303, 411], "implement": [51, 100, 116, 118, 142, 154, 181, 202, 203, 304, 313, 342, 352, 369, 371, 396, 408, 432, 434, 455, 456, 465, 466, 474, 480, 484], "tapa": [51, 304], "design": [51, 67, 77, 78, 82, 93, 94, 110, 111, 114, 130, 161, 166, 168, 171, 174, 176, 231, 304, 312, 319, 330, 331, 335, 345, 346, 363, 364, 367, 383, 414, 420, 422, 425, 428, 430, 485, 510], "about": [51, 65, 72, 73, 77, 84, 85, 110, 111, 113, 117, 125, 142, 145, 153, 163, 183, 205, 208, 252, 304, 317, 325, 326, 330, 336, 338, 363, 364, 366, 370, 379, 396, 399, 407, 416, 437, 459, 462, 507, 513, 515, 518, 519], "tabular": [51, 209, 304, 463], "tabl": [51, 179, 209, 211, 215, 233, 235, 244, 304, 432, 463, 468, 488, 499], "tri": [51, 304], "share": [51, 125, 304, 379, 515], "its": [51, 70, 80, 98, 99, 105, 120, 125, 151, 156, 160, 161, 168, 169, 171, 172, 173, 175, 176, 185, 207, 231, 242, 248, 304, 312, 323, 333, 350, 351, 358, 373, 379, 405, 410, 413, 414, 422, 423, 425, 426, 427, 429, 430, 439, 461, 485, 503], "table_qa_tapas_base_finetuned_wtq": [51, 304], "table_json": [51, 304], "document_t": [51, 209, 304, 463], "stage": [51, 113, 179, 205, 208, 231, 235, 242, 243, 304, 366, 432, 459, 462, 485, 490, 497, 498, 510, 514, 515, 518], "json_data": [51, 304], "monei": [51, 209, 304, 463], "ag": [51, 95, 101, 109, 209, 304, 347, 353, 362, 463], "donald": [51, 209, 304, 463], "trump": [51, 209, 304, 463], "75": [51, 125, 173, 209, 304, 379, 427, 463], "elon": [51, 209, 304, 463], "musk": [51, 209, 304, 463], "55": [51, 141, 209, 250, 304, 395, 463, 505], "AS": [51, 63, 142, 304, 316, 396], "who": [51, 86, 88, 166, 189, 304, 339, 341, 420, 443, 514], "earn": [51, 304], "count": [51, 145, 175, 181, 234, 304, 399, 429, 434], "old": [51, 63, 248, 304, 316, 503], "xlm_roberta_base_qa_squad2": [52, 53, 305, 306], "xlm_roberta_base_mc": [52, 305], "xlm_roberta_base_sequence_classifier_imdb": [54, 307], "xlm_roberta_large_zero_shot_classifier_xnli_anli": [56, 309], "xlmroberta": [56, 309], "xlnet": [57, 58, 107, 120, 310, 311, 360, 373], "xlnet_base_sequence_classifier_imdb": [57, 310], "bullet": [59, 60, 61, 244, 312, 499], "cleanpostfixpattern": [59, 60, 312], "cleanprefixpattern": [59, 60, 312], "cleanermod": [59, 60, 312], "dash": [59, 60, 312], "extrawhitespac": [59, 60, 312], "ignorecas": [59, 60, 312], "setbullet": [59, 60, 312], "setcleanpostfixpattern": [59, 60, 312], "setcleanprefixpattern": [59, 60, 312], "setcleanermod": [59, 60, 312], "setdash": [59, 60, 312], "setextrawhitespac": [59, 60, 312], "setignorecas": [59, 60, 312], "setstrip": [59, 60, 312], "settrailingpunctu": [59, 60, 312], "strip": [59, 60, 312], "trailingpunctu": [59, 60, 312], "emailaddress": [59, 61, 313], "emaildatetimetzpattern": [59, 61, 313], "extractormod": [59, 61, 313], "imageurlpattern": [59, 61, 313], "ipaddressnamepattern": [59, 61, 313], "ipaddresspattern": [59, 61, 313], "mapiidpattern": [59, 61, 313], "setemailaddress": [59, 61, 313], "setemaildatetimetzpattern": [59, 61, 313], "setextractormod": [59, 61, 313], "setimageurlpattern": [59, 61, 313], "setindex": [59, 61, 313], "setipaddressnamepattern": [59, 61, 313], "setipaddresspattern": [59, 61, 313], "setmapiidpattern": [59, 61, 313], "settextpattern": [59, 61, 313], "setusphonenumberspattern": [59, 61, 313], "textpattern": [59, 61, 313], "usphonenumberspattern": [59, 61, 313], "handl": [60, 69, 70, 161, 169, 221, 245, 312, 321, 323, 414, 423, 475, 502], "postfix": [60, 312], "regex": [60, 86, 87, 122, 131, 133, 143, 181, 182, 183, 190, 191, 194, 233, 234, 312, 339, 340, 374, 377, 384, 387, 397, 434, 436, 437, 444, 445, 448, 488], "prefix": [60, 138, 159, 160, 187, 189, 191, 231, 312, 392, 412, 413, 443, 445, 485, 510], "clean": [60, 87, 143, 161, 177, 210, 312, 340, 397, 414, 431, 464, 515], "bytes_string_to_str": [60, 312], "clean_non_ascii_char": [60, 312], "clean_ordered_bullet": [60, 312], "clean_postfix": [60, 312], "clean_prefix": [60, 312], "remove_punctu": [60, 312], "replace_unicode_quot": [60, 312], "utf": [60, 87, 312, 340], "remov": [60, 81, 87, 110, 111, 143, 157, 190, 199, 200, 201, 252, 312, 334, 340, 363, 364, 397, 411, 444, 452, 453, 454], "extra": [60, 181, 182, 207, 312, 434, 436, 461, 514], "whitespac": [60, 86, 88, 190, 194, 197, 312, 339, 341, 444, 448, 450], "oper": [60, 99, 105, 181, 189, 312, 351, 358, 434, 443, 513], "lead": [60, 91, 96, 108, 113, 114, 118, 119, 166, 312, 343, 348, 361, 366, 367, 371, 372, 420], "trail": [60, 312], "punctuat": [60, 143, 153, 312, 397, 407], "specifi": [61, 67, 81, 92, 141, 142, 145, 154, 159, 160, 179, 218, 246, 247, 313, 319, 334, 342, 344, 395, 396, 399, 408, 412, 413, 472, 500, 501], "email": [61, 233, 235, 240, 243, 244, 313, 488, 490, 498, 499], "timestamp": [61, 242, 313, 497], "includ": [61, 70, 78, 87, 93, 94, 95, 100, 103, 114, 116, 118, 119, 120, 123, 125, 131, 138, 139, 140, 145, 161, 162, 164, 165, 171, 173, 175, 176, 177, 179, 181, 200, 204, 221, 231, 233, 234, 235, 242, 243, 249, 254, 313, 323, 331, 340, 342, 345, 346, 347, 352, 355, 367, 369, 371, 372, 373, 376, 379, 384, 392, 393, 394, 399, 414, 415, 417, 419, 425, 427, 429, 430, 431, 432, 434, 453, 457, 475, 485, 488, 489, 490, 497, 498, 504, 511, 513, 514, 515, 520], "zone": [61, 114, 313, 367], "email_d": 61, "email_address": 61, "ip_address": 61, "ip_address_nam": 61, "mapi_id": 61, "us_phone_numb": 61, "image_url": 61, "text_aft": 61, "text_befor": 61, "url": [61, 104, 233, 234, 235, 244, 313, 357, 488, 490, 499], "after": [61, 81, 82, 84, 85, 100, 110, 111, 115, 116, 131, 132, 138, 145, 163, 169, 189, 210, 231, 234, 254, 313, 334, 335, 336, 338, 352, 363, 364, 369, 384, 386, 392, 399, 416, 423, 443, 464, 485, 513, 514], "befor": [61, 87, 117, 131, 132, 161, 177, 182, 190, 194, 254, 313, 340, 342, 370, 384, 386, 414, 431, 432, 436, 444, 448, 466, 484, 510], "ip": [61, 313], "mapi": [61, 313], "u": [61, 84, 85, 98, 99, 125, 132, 138, 139, 140, 205, 223, 237, 247, 313, 336, 338, 350, 351, 379, 386, 392, 393, 394, 459, 477, 492, 501, 512, 515, 520], "phone": [61, 125, 173, 313, 379, 427], "maxsegmentlength": [62, 63, 316], "setmaxsegmentlength": [62, 63, 316], "settextgenr": [62, 63, 316], "textgenr": [62, 63, 316], "corefer": [63, 316], "resolut": [63, 78, 316, 331], "spanbert": [63, 316], "identifi": [63, 117, 125, 130, 133, 145, 146, 176, 190, 191, 222, 231, 233, 316, 370, 379, 383, 387, 399, 400, 430, 444, 445, 476, 485, 488, 515], "given": [63, 67, 78, 79, 80, 86, 88, 104, 122, 125, 142, 159, 160, 161, 164, 171, 177, 181, 182, 183, 185, 204, 207, 217, 218, 229, 231, 252, 316, 319, 331, 332, 333, 339, 341, 357, 374, 379, 396, 412, 413, 414, 417, 425, 431, 434, 436, 437, 439, 457, 461, 471, 472, 484, 485, 507], "told": [63, 132, 316, 386], "mari": [63, 94, 111, 119, 154, 316, 346, 364, 372, 408], "he": [63, 86, 88, 98, 132, 189, 250, 316, 339, 341, 350, 386, 443, 505], "borrow": [63, 316], "book": [63, 87, 164, 181, 247, 316, 340, 417, 434, 501], "her": [63, 142, 316, 396], "link": [63, 237, 316, 492], "ontonot": [63, 316], "corefresolut": [63, 316], "spanbert_base_coref": [63, 316], "genr": [63, 316], "One": [63, 104, 125, 160, 189, 192, 316, 357, 379, 413, 443, 446], "bc": [63, 316], "broadcast": [63, 316], "convers": [63, 316], "bn": [63, 316], "nw": [63, 316], "wire": [63, 316], "pt": [63, 316], "pivot": [63, 114, 316, 367], "testament": [63, 316], "tc": [63, 316], "telephon": [63, 316], "wb": [63, 316], "mz": 63, "getcandidatelabel": [64, 66, 318], "croppct": [64, 67, 319], "dorescal": [64, 67, 78, 79, 211, 218, 319, 331, 332, 472], "rescalefactor": [64, 67, 78, 79, 211, 218, 319, 331, 332, 472], "setcroppct": [64, 67, 319], "setdorescal": [64, 67, 211, 218, 319, 472], "setrescalefactor": [64, 67, 211, 218, 319, 472], "ignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "setbeams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 166, 167, 170, 174, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 420, 421, 424, 428, 472], "setdosampl": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "setignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "setmaxoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "setminoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "setnorepeatngrams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "setrepetitionpenalti": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "settemperatur": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 144, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "settopk": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "settopp": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 144, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 399, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "maxinputlength": [64, 69, 158, 168, 312, 321, 422], "imagegeneratemod": [64, 71, 324], "numofparallelimag": [64, 71, 324], "setimagegeneratemod": [64, 71, 324], "setnumofparallelimag": [64, 71, 324], "doimagesplit": [64, 77, 330], "imagetoken": [64, 77, 330], "maximages": [64, 77, 330], "numvisiontoken": [64, 77, 330], "paddingconst": [64, 77, 330], "patchsiz": [64, 77, 330], "setdoimagesplit": [64, 77, 330], "setimagetoken": [64, 77, 330], "setmaximages": [64, 77, 330], "setnumvisiontoken": [64, 77, 330], "setpaddingconst": [64, 77, 330], "setpatchs": [64, 77, 330], "setstoptokenid": [64, 77, 158, 162, 166, 174, 330, 415, 420, 428], "stoptokenid": [64, 77, 158, 162, 166, 174, 330, 415, 420, 428], "blip": [65, 317], "visual": [65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 231, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 485], "vision": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 173, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 427], "togeth": [65, 72, 75, 77, 104, 160, 317, 325, 328, 330, 357, 413], "visualqaclassifi": [65, 71, 72, 73, 74, 75, 76, 77, 317, 324, 325, 326, 327, 328, 329, 330], "blip_vqa_bas": [65, 317], "50": [65, 68, 69, 71, 72, 73, 74, 75, 76, 140, 141, 151, 161, 163, 164, 165, 167, 169, 170, 171, 172, 173, 175, 176, 250, 317, 320, 321, 324, 325, 326, 327, 328, 329, 394, 395, 405, 414, 416, 417, 419, 421, 423, 424, 425, 426, 427, 429, 430, 505], "image_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 102, 317, 320, 323, 324, 325, 326, 327, 328, 329, 354], "sparksessionfortest": [65, 71, 72, 73, 74, 75, 76, 317, 324, 325, 326, 327, 328, 329], "images_path": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330], "test_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 102, 317, 320, 323, 324, 325, 326, 327, 328, 329, 354], "withcolumn": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 102, 160, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 354, 413], "lit": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 102, 160, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 354, 413], "pictur": [65, 71, 72, 73, 75, 77, 317, 324, 325, 326, 328, 330], "setsiz": [65, 211, 218, 317, 472], "384": [65, 71, 77, 106, 317, 324, 330, 359], "cat_imag": [65, 71, 72, 73, 75, 76, 77, 317, 324, 325, 326, 328, 329, 330], "jpg": [65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 160, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 413], "cat": [65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 102, 160, 317, 318, 319, 324, 325, 326, 328, 329, 330, 331, 332, 333, 354, 413], "abov": [65, 102, 117, 123, 248, 354, 370, 376, 503], "skip": [65, 100, 116, 123, 181, 352, 369, 376, 434], "blip_vqa_tf": [65, 317], "clip": [66, 160, 318, 413], "contrast": [66, 101, 104, 105, 109, 130, 177, 318, 353, 357, 358, 362, 383, 431], "neural": [66, 80, 93, 94, 98, 140, 154, 161, 168, 312, 318, 333, 345, 346, 350, 394, 408, 414, 422], "network": [66, 80, 93, 94, 103, 140, 154, 318, 333, 345, 346, 355, 394, 408], "abil": [66, 114, 125, 161, 163, 164, 169, 318, 367, 379, 414, 416, 417, 423], "hard": [66, 113, 184, 318, 366, 438], "make": [66, 67, 77, 78, 87, 92, 96, 105, 107, 118, 119, 125, 145, 146, 154, 157, 159, 160, 161, 166, 169, 176, 182, 254, 318, 319, 330, 331, 340, 344, 348, 358, 360, 371, 372, 379, 399, 400, 408, 411, 412, 413, 414, 420, 423, 430, 436, 516, 520], "veri": [66, 79, 80, 96, 103, 118, 119, 120, 157, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 205, 312, 318, 332, 333, 348, 355, 371, 372, 373, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 459, 513, 515, 518, 519], "gpt": [66, 110, 145, 161, 164, 173, 318, 363, 399, 414, 417, 427], "imageclassifi": [66, 67, 78, 79, 80, 318, 319, 331, 332, 333], "zero_shot_classifier_clip_vit_base_patch32": [66, 318], "huggingfac": [66, 67, 71, 73, 76, 77, 78, 79, 80, 96, 102, 172, 173, 174, 318, 319, 324, 326, 329, 330, 331, 332, 333, 348, 354, 426, 427, 428], "librari": [66, 67, 71, 73, 76, 77, 78, 79, 80, 92, 127, 159, 160, 197, 198, 199, 206, 210, 255, 318, 319, 324, 326, 329, 330, 331, 332, 333, 344, 381, 412, 413, 450, 451, 452, 460, 464, 519], "clipforzeroshotclassificationtestspec": [66, 318], "candidatelabel": [66, 211, 218, 318, 472], "imagedf": [66, 67, 69, 77, 78, 79, 80, 318, 319, 321, 330, 331, 332, 333], "dropinvalid": [66, 67, 78, 79, 80, 318, 319, 331, 332, 333], "photo": [66, 318], "bird": [66, 79, 160, 318, 332, 413], "dog": [66, 74, 79, 160, 318, 327, 332, 413], "hen": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "hippo": [66, 67, 78, 80, 160, 318, 319, 331, 333, 413], "room": [66, 79, 160, 207, 318, 332, 413, 461], "tractor": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "ostrich": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "ox": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "pipelinedf": [66, 67, 78, 79, 80, 318, 319, 331, 332, 333], "revers": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "image_nam": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "palac": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "jpeg": [66, 67, 78, 79, 80, 160, 204, 318, 319, 331, 332, 333, 413, 457], "egyptian_cat": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "hippopotamu": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "junco": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "bluetick": [66, 67, 74, 78, 79, 80, 160, 318, 319, 327, 331, 332, 333, 413], "chihuahua": [66, 67, 78, 79, 80, 160, 318, 319, 331, 332, 333, 413], "image_classifier_vit_base_patch16_224": [66, 80, 318, 333], "convnet": [67, 319], "convnext": [67, 319], "2020": [67, 125, 131, 132, 154, 319, 379, 384, 386, 408], "zhuang": [67, 319], "liu": [67, 78, 98, 110, 111, 319, 331, 350, 363, 364], "hanzi": [67, 319], "mao": [67, 319], "chao": [67, 319], "yuan": [67, 319], "wu": [67, 319], "christoph": [67, 319], "feichtenhof": [67, 319], "trevor": [67, 319], "darrel": [67, 319], "sain": [67, 319], "xie": [67, 319], "pure": [67, 77, 80, 168, 312, 319, 330, 333, 422], "inspir": [67, 157, 171, 182, 183, 227, 319, 411, 425, 436, 437, 481], "claim": [67, 319], "outperform": [67, 73, 95, 101, 105, 107, 109, 114, 115, 118, 119, 120, 125, 163, 164, 165, 166, 169, 172, 176, 319, 326, 347, 353, 358, 360, 362, 367, 368, 371, 372, 373, 379, 416, 417, 419, 420, 423, 426, 430], "convnextforimageclassificationtestspec": [67, 319], "roar": [67, 319], "began": [67, 319], "introduct": [67, 319], "vit": [67, 79, 80, 319, 332, 333], "quickli": [67, 145, 319, 399], "supersed": [67, 319], "vanilla": [67, 319], "hand": [67, 189, 319, 443], "face": [67, 114, 319, 367], "difficulti": [67, 319], "detect": [67, 68, 78, 115, 126, 127, 145, 146, 152, 153, 154, 233, 234, 235, 243, 252, 319, 320, 331, 368, 380, 381, 399, 400, 406, 407, 408, 488, 498], "semant": [67, 78, 95, 103, 104, 114, 115, 179, 194, 319, 331, 347, 355, 357, 367, 368, 432, 448], "hierarch": [67, 78, 100, 116, 319, 331, 352, 369], "swin": [67, 78, 319, 331], "reintroduc": [67, 319], "sever": [67, 160, 176, 233, 319, 413, 430, 488, 520], "practic": [67, 96, 161, 169, 177, 319, 348, 414, 423, 431], "viabl": [67, 319], "backbon": [67, 78, 120, 319, 331, 373], "demonstr": [67, 78, 99, 102, 105, 106, 114, 125, 164, 166, 167, 168, 175, 312, 319, 331, 351, 354, 358, 359, 367, 379, 417, 420, 421, 422, 429], "remark": [67, 166, 319, 420], "wide": [67, 87, 93, 94, 98, 99, 101, 118, 119, 161, 165, 176, 319, 340, 345, 346, 350, 351, 353, 371, 372, 414, 419, 430], "varieti": [67, 68, 105, 107, 118, 119, 162, 319, 320, 358, 360, 371, 372, 415, 519], "howev": [67, 91, 107, 112, 114, 120, 125, 143, 165, 167, 170, 238, 319, 343, 360, 365, 367, 373, 379, 397, 419, 421, 424, 493, 513], "effect": [67, 78, 79, 80, 105, 106, 114, 145, 153, 161, 167, 169, 170, 177, 218, 319, 331, 332, 333, 358, 359, 367, 399, 407, 414, 421, 423, 424, 431, 472], "hybrid": [67, 319], "still": [67, 164, 231, 319, 417, 485], "credit": [67, 319], "superior": [67, 166, 169, 175, 319, 420, 423, 429], "inher": [67, 319], "induct": [67, 99, 319, 351], "bias": [67, 99, 171, 172, 319, 351, 425, 426], "reexamin": [67, 319], "space": [67, 100, 114, 116, 117, 135, 160, 179, 210, 319, 352, 367, 369, 370, 389, 413, 432, 464], "achiev": [67, 95, 98, 101, 104, 105, 106, 107, 110, 111, 118, 119, 120, 140, 161, 163, 164, 165, 168, 170, 173, 177, 205, 312, 319, 347, 350, 353, 357, 358, 359, 360, 363, 364, 371, 372, 373, 394, 414, 416, 417, 419, 422, 424, 427, 431, 459, 518], "gradual": [67, 319], "modern": [67, 319], "resnet": [67, 319], "toward": [67, 160, 164, 170, 319, 413, 417, 424], "discov": [67, 319, 511], "compon": [67, 80, 114, 196, 204, 319, 333, 367, 401, 402, 449, 457, 467, 472, 483, 489, 518], "contribut": [67, 165, 172, 319, 419, 426], "along": [67, 95, 123, 204, 319, 347, 376, 457], "wai": [67, 84, 85, 122, 123, 171, 172, 173, 175, 208, 237, 319, 336, 338, 374, 376, 425, 426, 427, 429, 462, 492], "outcom": [67, 319], "explor": [67, 114, 161, 167, 172, 177, 319, 367, 414, 421, 426, 431], "famili": [67, 69, 87, 95, 101, 165, 166, 173, 319, 321, 340, 347, 353, 419, 420, 427], "dub": [67, 118, 119, 319, 371, 372], "construct": [67, 100, 116, 191, 237, 319, 342, 352, 369, 445, 492, 517], "compet": [67, 319], "favor": [67, 319], "term": [67, 125, 319, 379], "scalabl": [67, 113, 319, 366], "87": [67, 78, 319, 331], "imagenet": [67, 78, 80, 319, 331, 333], "coco": [67, 78, 319, 331], "ade20k": [67, 78, 319, 331], "while": [67, 70, 71, 77, 78, 80, 91, 99, 104, 106, 117, 125, 145, 149, 160, 164, 167, 170, 231, 319, 323, 324, 330, 331, 333, 343, 351, 357, 359, 370, 379, 399, 402, 413, 417, 421, 424, 485, 510, 515], "maintain": [67, 70, 77, 106, 319, 323, 330, 359], "simplic": [67, 161, 319, 414], "effici": [67, 77, 78, 98, 100, 106, 113, 115, 116, 166, 168, 169, 176, 312, 319, 330, 331, 350, 352, 359, 366, 368, 369, 420, 422, 423, 430, 513], "dores": [67, 78, 79, 80, 211, 218, 319, 331, 332, 333, 472], "resiz": [67, 78, 79, 80, 218, 319, 331, 332, 333, 472], "certain": [67, 78, 79, 80, 181, 218, 319, 331, 332, 333, 434, 472], "donorm": [67, 78, 79, 80, 211, 218, 319, 331, 332, 333, 472], "deviat": [67, 78, 79, 80, 218, 319, 331, 332, 333, 472], "featureextractortyp": [67, 78, 79, 80, 211, 218, 319, 331, 332, 333, 472], "architectur": [67, 70, 71, 77, 78, 79, 80, 91, 93, 94, 98, 110, 127, 140, 154, 161, 170, 171, 175, 177, 218, 319, 323, 324, 330, 331, 332, 333, 343, 345, 346, 350, 363, 381, 394, 408, 414, 424, 425, 429, 431, 472], "featur": [67, 69, 70, 76, 78, 79, 80, 84, 100, 108, 113, 114, 116, 125, 135, 139, 149, 157, 160, 169, 179, 218, 231, 235, 319, 321, 323, 329, 331, 332, 333, 336, 352, 361, 366, 367, 369, 379, 389, 393, 402, 413, 423, 432, 472, 485, 490, 517], "imagemean": [67, 78, 79, 80, 211, 218, 319, 331, 332, 333, 472], "imagestd": [67, 78, 79, 80, 211, 218, 319, 331, 332, 333, 472], "resampl": [67, 78, 79, 80, 211, 218, 319, 331, 332, 333, 472], "pil": [67, 78, 79, 80, 218, 319, 331, 332, 333, 472], "nearest": [67, 78, 79, 80, 179, 218, 319, 331, 332, 333, 432, 472], "bilinear": [67, 78, 79, 80, 218, 319, 331, 332, 333, 472], "bicub": [67, 78, 79, 80, 218, 319, 331, 332, 333, 472], "do_res": [67, 78, 79, 80, 218, 319, 331, 332, 333, 472], "tupl": [67, 78, 79, 80, 207, 218, 229, 319, 331, 332, 333, 461, 472, 484], "rescal": [67, 78, 79, 218, 319, 331, 332, 472], "factor": [67, 78, 79, 92, 118, 119, 120, 159, 160, 161, 177, 181, 218, 319, 331, 332, 344, 371, 372, 373, 412, 413, 414, 431, 434, 472], "percentag": [67, 117, 181, 194, 319, 370, 434, 448, 469], "crop": [67, 319], "tabbi": [67, 78, 319, 331], "river": [67, 78, 80, 319, 331, 333], "hors": [67, 78, 80, 319, 331, 333], "amphibiu": [67, 78, 80, 319, 331, 333], "snowbird": [67, 78, 80, 319, 331, 333], "struthio": [67, 78, 80, 319, 331, 333], "camelu": [67, 78, 80, 319, 331, 333], "thresher": [67, 319], "thrasher": [67, 319], "thresh": [67, 319], "image_classifier_convnext_tiny_224_loc": [67, 319], "determin": [67, 118, 207, 218, 234, 319, 342, 371, 461, 472], "smaller": [67, 88, 99, 100, 106, 113, 116, 319, 341, 351, 352, 359, 366, 369], "224": [67, 319], "256": [67, 160, 319, 413], "edg": [67, 99, 123, 163, 166, 319, 351, 376, 416, 420], "afterward": [67, 319], "boolean": [67, 131, 218, 243, 319, 384, 472, 498], "255": [67, 218, 319, 472], "florenc": [68, 320], "prompt": [68, 92, 145, 159, 160, 173, 207, 218, 320, 344, 399, 412, 413, 427, 461, 472], "caption": [68, 73, 79, 160, 320, 326, 332, 413], "ocr": [68, 320], "describ": [68, 69, 71, 76, 77, 84, 85, 109, 123, 125, 168, 312, 320, 321, 324, 329, 330, 336, 338, 362, 376, 379, 422], "florence2": [68, 320], "florence2_base_ft_int4": [68, 320], "200": [68, 86, 161, 170, 177, 320, 339, 414, 424, 431], "od": [68, 320], "use_openvino": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 93, 94, 101, 102, 106, 109, 110, 118, 162, 163, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 345, 346, 353, 354, 359, 362, 363, 371, 415, 416, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430], "gram": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 95, 100, 101, 109, 116, 125, 135, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 347, 352, 353, 362, 369, 379, 389, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "cumul": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "gemma": [69, 321], "merger": [69, 70, 74, 321, 323, 327], "merg": [69, 70, 74, 123, 130, 134, 233, 234, 321, 323, 327, 376, 383, 388, 488, 489], "lightweight": [69, 77, 106, 173, 321, 330, 359, 427], "open": [69, 73, 77, 109, 113, 127, 162, 163, 165, 166, 167, 171, 172, 173, 174, 175, 176, 191, 197, 198, 199, 206, 210, 321, 326, 330, 362, 366, 381, 415, 416, 419, 420, 421, 425, 426, 427, 428, 429, 430, 445, 450, 451, 452, 460, 464, 511], "googl": [69, 91, 93, 94, 98, 100, 103, 110, 111, 115, 116, 125, 177, 235, 247, 321, 343, 345, 346, 350, 352, 355, 363, 364, 368, 369, 379, 431, 490, 501], "research": [69, 91, 93, 94, 98, 100, 116, 162, 168, 170, 171, 172, 174, 177, 312, 321, 343, 345, 346, 350, 352, 369, 415, 422, 424, 425, 426, 428, 431], "technologi": [69, 125, 321, 379], "gemini": [69, 321], "128k": [69, 173, 321, 427], "window": [69, 70, 78, 79, 100, 105, 115, 116, 125, 140, 169, 175, 181, 321, 323, 331, 332, 352, 358, 369, 379, 394, 423, 429, 434], "140": [69, 127, 321, 381], "multimod": [69, 70, 71, 73, 76, 77, 102, 160, 163, 204, 253, 321, 323, 324, 326, 329, 330, 354, 413, 416, 457, 508], "both": [69, 70, 81, 93, 94, 101, 103, 109, 115, 123, 145, 161, 166, 169, 171, 173, 175, 321, 323, 334, 345, 346, 353, 355, 362, 368, 376, 399, 414, 420, 423, 425, 427, 429, 514, 515], "optim": [69, 70, 73, 81, 92, 95, 100, 110, 111, 113, 114, 116, 140, 142, 154, 159, 160, 162, 165, 166, 172, 173, 218, 321, 323, 326, 334, 344, 347, 352, 363, 364, 366, 367, 369, 394, 396, 408, 412, 413, 415, 419, 420, 426, 427, 472], "deploy": [69, 70, 321, 323], "laptop": [69, 321], "desktop": [69, 87, 321, 340], "cloud": [69, 125, 321, 379], "visualqa": [69, 70, 77, 321, 323, 330], "gemma3_4b_it_int4": [69, 321], "9": [69, 98, 118, 119, 135, 146, 159, 163, 167, 173, 174, 321, 350, 371, 372, 389, 400, 412, 416, 421, 427, 428, 513, 518, 519], "testdf": [69, 77, 321, 330], "bo": [69, 159, 160, 321, 412, 413], "start_of_turn": [69, 321], "nyou": [69, 76, 88, 207, 321, 329, 341, 461], "assist": [69, 70, 72, 73, 75, 76, 102, 162, 166, 174, 176, 207, 223, 321, 323, 325, 326, 328, 329, 354, 415, 420, 428, 430, 461, 477], "start_of_imag": [69, 321], "end_of_turn": [69, 321], "http": [69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 95, 96, 98, 100, 102, 103, 104, 109, 115, 116, 145, 146, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 194, 218, 233, 235, 244, 343, 347, 348, 350, 352, 354, 355, 357, 362, 368, 369, 399, 400, 414, 416, 426, 427, 428, 429, 448, 488, 490, 499, 511], "arxiv": [69, 70, 71, 72, 73, 74, 75, 76, 77, 105, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 358, 414, 428], "pdf": [69, 70, 71, 72, 73, 74, 75, 76, 77, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 233, 235, 240, 242, 243, 244, 488, 490, 497, 498, 499], "1909": [69, 70, 71, 72, 73, 74, 75, 76, 77, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218], "05858": [69, 70, 71, 72, 73, 74, 75, 76, 77, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218], "__": [69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 199, 200, 218, 340, 414, 452, 453], "ctrl": [69, 70, 71, 72, 73, 74, 75, 76, 77, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 321, 323, 324, 325, 326, 327, 328, 329, 330, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "condit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 93, 94, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 218, 321, 323, 324, 325, 326, 327, 328, 329, 330, 345, 346, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 472], "control": [69, 70, 71, 72, 73, 74, 75, 76, 77, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 218, 312, 321, 323, 324, 325, 326, 327, 328, 329, 330, 399, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 472], "internvl": [70, 323], "advanc": [70, 95, 127, 166, 169, 174, 175, 176, 197, 207, 210, 323, 347, 381, 420, 423, 428, 429, 430, 450, 461, 464], "mllm": [70, 323], "seri": [70, 163, 171, 175, 323, 416, 425, 429], "build": [70, 98, 99, 110, 111, 123, 125, 130, 164, 165, 167, 171, 172, 176, 231, 243, 254, 323, 350, 351, 363, 364, 376, 379, 383, 417, 419, 421, 425, 426, 430, 485, 498, 510], "core": [70, 81, 114, 323, 334, 367], "introduc": [70, 93, 94, 95, 99, 103, 104, 105, 107, 114, 161, 165, 166, 169, 173, 175, 176, 177, 323, 345, 346, 347, 351, 355, 357, 358, 360, 367, 414, 419, 420, 423, 427, 429, 430, 431], "signific": [70, 110, 111, 118, 119, 125, 128, 165, 175, 323, 363, 364, 371, 372, 379, 382, 419, 429], "enhanc": [70, 71, 98, 157, 161, 166, 169, 172, 323, 324, 350, 411, 414, 420, 423, 426], "strategi": [70, 92, 97, 108, 112, 113, 114, 129, 131, 133, 153, 159, 160, 181, 217, 218, 234, 323, 344, 349, 361, 365, 366, 367, 384, 387, 407, 412, 413, 434, 471, 472], "int4": [70, 323], "quantiz": [70, 323], "internvl2_5_1b_int4": [70, 323], "larger": [70, 71, 73, 77, 79, 92, 95, 96, 99, 110, 111, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 312, 323, 324, 326, 330, 332, 344, 347, 348, 351, 363, 364, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432], "im_start": [70, 76, 77, 323, 329, 330], "ndescrib": [70, 74, 323, 327], "im_end": [70, 76, 323, 329], "janu": [71, 324], "alongsid": [71, 73, 176, 235, 324, 326, 430], "novel": [71, 98, 107, 114, 120, 125, 161, 170, 324, 350, 360, 367, 373, 379, 414, 424], "autoregress": [71, 120, 324, 373], "unifi": [71, 161, 177, 233, 324, 414, 431, 488], "understand": [71, 93, 94, 99, 107, 118, 120, 125, 161, 166, 172, 173, 176, 177, 194, 324, 345, 346, 351, 360, 371, 373, 379, 414, 420, 426, 427, 430, 431, 448, 513], "decoupl": [71, 324], "separ": [71, 86, 88, 99, 110, 133, 135, 153, 154, 182, 191, 194, 200, 223, 234, 235, 243, 246, 324, 339, 341, 351, 363, 387, 389, 407, 408, 436, 445, 448, 453, 477, 498, 500, 512], "pathwai": [71, 324], "allevi": [71, 324], "conflict": [71, 324], "role": [71, 207, 324, 461], "surpass": [71, 78, 98, 109, 163, 169, 324, 331, 350, 362, 416, 423], "previou": [71, 78, 104, 107, 118, 119, 164, 166, 170, 175, 214, 324, 331, 357, 360, 371, 372, 417, 420, 424, 429, 514], "exce": [71, 110, 111, 145, 324, 363, 364, 399], "deepseek": [71, 324], "llm": [71, 73, 114, 165, 166, 172, 175, 176, 324, 326, 367, 419, 420, 426, 429, 430], "3b": [71, 176, 324, 430], "approxim": [71, 179, 324, 432], "500b": [71, 324], "emploi": [71, 88, 120, 324, 341, 373], "siglip": [71, 324], "downsampl": [71, 324], "16": [71, 91, 120, 141, 235, 248, 324, 343, 373, 395, 490, 503, 513], "janus_1_3b_int4": [71, 324], "suit": [71, 73, 76, 77, 95, 113, 324, 326, 329, 330, 347, 366], "image_placehold": [71, 324], "nassist": [71, 74, 77, 324, 327, 330], "unusu": [71, 72, 73, 75, 76, 77, 324, 325, 326, 328, 329, 330], "aspect": [71, 72, 73, 75, 77, 169, 324, 325, 326, 328, 330, 423], "presenc": [71, 72, 73, 75, 77, 159, 160, 218, 324, 325, 326, 328, 330, 412, 413, 472], "ly": [71, 72, 73, 75, 76, 77, 160, 324, 325, 326, 328, 329, 330, 413], "pink": [71, 72, 73, 75, 76, 77, 160, 324, 325, 326, 328, 329, 330, 413], "couch": [71, 72, 73, 75, 76, 77, 79, 324, 325, 326, 328, 329, 330, 332], "parallel": [71, 92, 102, 153, 154, 205, 218, 246, 324, 344, 354, 407, 408, 459, 472, 500, 518], "llava": [72, 325], "llava_1_5_7b_hf": [72, 325], "llama": [73, 92, 159, 160, 165, 166, 169, 172, 204, 207, 326, 344, 412, 413, 419, 420, 423, 426, 457, 461], "compris": [73, 145, 326, 399], "11b": [73, 326], "90b": [73, 326], "These": [73, 78, 91, 110, 111, 114, 120, 125, 139, 164, 166, 175, 207, 237, 326, 331, 343, 363, 364, 367, 373, 379, 393, 417, 420, 429, 461, 492, 512], "reason": [73, 86, 88, 145, 162, 169, 172, 173, 174, 176, 326, 339, 341, 399, 415, 423, 426, 427, 428, 430], "proprietari": [73, 113, 171, 175, 326, 366, 425, 429], "industri": [73, 87, 326, 340], "llama_3_2_11b_vision_instruct_int4": [73, 326], "begin_of_text": [73, 326], "start_header_id": [73, 102, 166, 174, 207, 326, 354, 420, 428, 461], "end_header_id": [73, 102, 166, 174, 207, 326, 354, 420, 428, 461], "eot_id": [73, 102, 207, 326, 354, 461], "paligemma": [74, 327], "paligemma_3b_pt_224_int4": [74, 327], "stand": [74, 79, 93, 94, 160, 169, 327, 332, 345, 346, 413, 423], "grassi": [74, 160, 327, 413], "field": [74, 79, 95, 100, 116, 117, 122, 134, 160, 171, 172, 173, 175, 252, 327, 332, 347, 352, 369, 370, 374, 388, 413, 425, 426, 427, 429, 507], "phi_3_vision_128k_instruct": [75, 328], "image_1": [75, 328], "nwhat": [75, 328], "phi3v": [75, 328], "qwen2": [76, 175, 329, 429], "integr": [76, 95, 120, 125, 144, 168, 231, 312, 329, 347, 373, 379, 398, 422, 485, 510, 512], "respons": [76, 145, 154, 165, 166, 172, 176, 329, 399, 408, 419, 420, 426, 430], "queri": [76, 95, 101, 109, 113, 165, 169, 175, 179, 329, 347, 353, 362, 366, 419, 423, 429, 432, 511], "qwen2_vl_2b_instruct_int4": [76, 329], "vision_start": [76, 329], "image_pad": [76, 329], "vision_end": [76, 329], "becaus": [76, 145, 156, 254, 313, 329, 399, 410, 432, 466, 484], "smolvlm": [77, 330], "compact": [77, 330], "arbitrari": [77, 161, 169, 330, 414, 423], "produc": [77, 330, 514], "stori": [77, 330], "ground": [77, 79, 330, 332], "Its": [77, 78, 85, 142, 161, 330, 331, 338, 396, 414], "suitabl": [77, 165, 172, 330, 419, 426], "devic": [77, 99, 330, 351], "strong": [77, 101, 102, 118, 119, 171, 172, 173, 175, 330, 353, 354, 371, 372, 425, 426, 427, 429], "smolvlm_instruct_int4": [77, 330], "49153": [77, 330], "81": [77, 248, 330, 503], "patch": [77, 80, 330, 333], "14": [77, 138, 151, 192, 205, 223, 237, 243, 248, 330, 392, 405, 446, 459, 477, 492, 498, 503], "pad": [77, 249, 330, 504], "constant": [77, 217, 219, 330, 471, 473], "end_of_utter": [77, 330], "openvino": [77, 93, 94, 101, 102, 106, 110, 118, 330, 345, 346, 353, 354, 359, 363, 371], "stop": [77, 125, 139, 144, 145, 159, 160, 162, 166, 174, 177, 185, 218, 239, 252, 330, 379, 393, 399, 412, 413, 415, 420, 428, 431, 439, 472, 494], "termin": [77, 330], "swinimageclassif": [78, 331], "shift": [78, 331], "ze": [78, 331], "yutong": [78, 331], "lin": [78, 331], "yue": [78, 331], "cao": [78, 331], "han": [78, 331], "hu": [78, 331], "yixuan": [78, 331], "zheng": [78, 331], "zhang": [78, 331], "stephen": [78, 331], "bain": [78, 331], "guo": [78, 331], "basic": [78, 125, 153, 207, 254, 331, 379, 407, 461, 513], "whose": [78, 173, 331, 342, 427], "scheme": [78, 110, 161, 331, 363, 414], "bring": [78, 167, 331, 421, 514], "greater": [78, 125, 145, 159, 160, 218, 331, 379, 399, 412, 413, 472], "attent": [78, 80, 92, 98, 105, 106, 145, 159, 160, 165, 169, 175, 218, 331, 333, 344, 350, 358, 359, 399, 412, 413, 419, 423, 429, 472], "non": [78, 163, 167, 172, 191, 194, 331, 416, 421, 426, 445, 448], "overlap": [78, 86, 88, 130, 134, 232, 234, 331, 339, 341, 383, 388, 489], "cross": [78, 118, 119, 141, 331, 371, 372, 395], "connect": [78, 331], "image_classifier_swin_base_patch4_window7_224": [78, 331], "swinforimageclassificationtest": [78, 331], "present": [78, 91, 101, 103, 105, 106, 110, 111, 115, 118, 119, 123, 145, 149, 154, 161, 168, 179, 312, 331, 343, 353, 355, 358, 359, 363, 364, 368, 371, 372, 376, 399, 402, 408, 414, 422, 432], "call": [78, 93, 94, 99, 101, 106, 114, 125, 145, 164, 165, 172, 173, 207, 229, 238, 246, 331, 342, 345, 346, 351, 353, 359, 367, 379, 399, 417, 419, 426, 427, 461, 484, 493, 500, 514, 520], "purpos": [78, 99, 101, 154, 331, 351, 353, 408], "adapt": [78, 175, 331, 429], "aris": [78, 331], "domain": [78, 104, 114, 125, 164, 244, 331, 357, 367, 379, 417, 499], "variat": [78, 331], "high": [78, 92, 113, 114, 115, 118, 119, 159, 160, 161, 167, 168, 170, 173, 176, 218, 312, 331, 344, 366, 367, 368, 371, 372, 412, 413, 414, 421, 422, 424, 427, 430, 472], "variou": [78, 106, 114, 120, 169, 172, 176, 232, 233, 234, 235, 243, 244, 253, 331, 359, 367, 373, 423, 426, 430, 487, 488, 489, 490, 498, 499, 508], "complex": [78, 103, 114, 115, 125, 169, 175, 182, 183, 331, 355, 367, 368, 379, 423, 429, 436, 437], "respect": [78, 98, 117, 139, 140, 173, 248, 331, 342, 350, 370, 393, 394, 427, 503], "broad": [78, 86, 164, 331, 339, 417], "rang": [78, 93, 94, 98, 99, 101, 104, 118, 119, 159, 160, 161, 165, 166, 172, 218, 331, 345, 346, 350, 351, 353, 357, 371, 372, 412, 413, 414, 419, 420, 426, 472], "1k": [78, 331], "dens": [78, 93, 94, 95, 167, 173, 174, 179, 331, 345, 346, 347, 421, 427, 428, 432], "box": [78, 102, 167, 170, 331, 354, 421, 424], "ap": [78, 331], "51": [78, 198, 206, 248, 331, 451, 460, 503], "53": [78, 130, 134, 331, 383, 388], "miou": [78, 331], "val": [78, 331], "margin": [78, 107, 120, 331, 360, 373], "prove": [78, 331], "benefici": [78, 125, 331, 379], "mlp": [78, 331], "visionencoderdecod": [79, 332], "auto": [79, 161, 186, 332, 414, 440], "beit": [79, 332], "deit": [79, 332], "gpt2": [79, 164, 332, 417], "image_captioning_vit_gpt2": [79, 332], "visionencoderdecodertestspec": [79, 332], "nreturnsequ": [79, 211, 218, 332, 472], "computation": [79, 103, 110, 111, 120, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 312, 332, 355, 363, 364, 373, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431], "expens": [79, 103, 110, 111, 120, 156, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 182, 312, 332, 355, 363, 364, 373, 410, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 436], "especi": [79, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 312, 332, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431], "recommend": [79, 92, 103, 120, 145, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 254, 312, 332, 344, 355, 373, 399, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431], "imagecapt": [79, 332], "fill": [79, 161, 252, 332, 414, 507], "furnitur": [79, 332], "lai": [79, 170, 332, 424], "anoth": [79, 106, 160, 218, 243, 332, 359, 413, 472, 498, 515], "brown": [79, 160, 233, 332, 413, 488], "bear": [79, 233, 332, 488], "bodi": [79, 160, 332, 413], "water": [79, 160, 332, 413], "flock": [79, 332], "chicken": [79, 160, 332, 413], "lush": [79, 332], "green": [79, 160, 332, 413], "small": [79, 80, 87, 91, 92, 96, 99, 100, 109, 116, 128, 151, 159, 160, 170, 172, 173, 176, 205, 218, 234, 248, 332, 333, 340, 343, 344, 348, 351, 352, 362, 369, 382, 405, 412, 413, 424, 426, 427, 430, 459, 472, 503, 518], "wet": [79, 332], "wooden": [79, 332], "floor": [79, 160, 332, 413], "wear": [79, 160, 332, 413], "blue": [79, 332], "sweater": [79, 160, 332, 413], "man": [79, 92, 160, 164, 165, 332, 344, 413, 417, 419], "cow": [79, 332], "altern": [80, 125, 145, 156, 181, 182, 183, 205, 209, 333, 379, 399, 410, 434, 436, 437, 459, 463, 514, 519], "vitimageclassificationtestspec": [80, 333], "becom": [80, 91, 99, 125, 171, 333, 343, 351, 379, 425], "facto": [80, 125, 333, 379], "remain": [80, 87, 91, 99, 125, 252, 333, 340, 343, 351, 379, 507], "conjunct": [80, 333], "overal": [80, 117, 120, 163, 173, 333, 370, 373, 416, 427], "structur": [80, 142, 191, 210, 233, 234, 235, 243, 333, 396, 464, 488, 498, 513], "relianc": [80, 114, 333, 367], "cnn": [80, 127, 140, 154, 333, 381, 394, 408], "necessari": [80, 99, 333, 342, 351, 510, 517], "directli": [80, 81, 167, 170, 205, 231, 238, 333, 334, 421, 424, 459, 485, 493, 510], "mid": [80, 333], "cifar": [80, 333], "vtab": [80, 333], "etc": [80, 97, 101, 104, 106, 107, 163, 175, 199, 210, 235, 333, 349, 353, 357, 359, 360, 416, 429, 452, 464, 490, 510], "attain": [80, 333], "excel": [80, 120, 169, 233, 235, 243, 244, 333, 373, 423, 488, 490, 498, 499], "substanti": [80, 93, 94, 333, 345, 346], "fewer": [80, 91, 104, 179, 333, 343, 357, 432], "worth": [80, 333], "16x16": [80, 333], "egyptian": [80, 333], "repartit": [81, 334], "cach": [81, 92, 117, 159, 160, 161, 177, 179, 218, 238, 334, 344, 370, 412, 413, 414, 431, 432, 472, 493], "persist": [81, 176, 246, 334, 430, 500], "disk": [81, 117, 334, 370, 514, 515], "intend": [81, 208, 334, 462], "prepar": [81, 145, 196, 198, 204, 206, 334, 399, 449, 451, 457, 460], "export": [81, 334], "indirectli": [81, 334], "json": [81, 122, 145, 207, 209, 231, 250, 334, 374, 399, 461, 463, 485, 505], "writer": [81, 334], "executor": [81, 145, 146, 334, 399, 400], "node": [81, 123, 211, 215, 218, 334, 376, 468, 472], "overrid": [81, 159, 160, 218, 229, 233, 334, 342, 412, 413, 472, 484, 488], "worker": [81, 84, 85, 334, 336, 338], "dataframewrit": [81, 334], "compress": [81, 92, 106, 159, 160, 218, 334, 344, 359, 412, 413, 472], "snappi": [81, 334], "preserv": [81, 99, 138, 190, 210, 334, 351, 392, 444, 464], "modifi": [81, 84, 85, 110, 111, 138, 145, 154, 334, 336, 338, 363, 364, 392, 399, 408], "optimized_df": [81, 334], "input_df": [81, 334], "total": [81, 92, 154, 160, 194, 334, 344, 408, 413, 448, 469], "kwarg": [81, 208, 233, 334, 462, 488], "date_chunk": [82, 335], "omicron": [82, 335], "covid": [82, 335], "world": [82, 86, 87, 88, 108, 113, 114, 169, 171, 172, 173, 175, 188, 231, 250, 335, 339, 340, 341, 361, 366, 367, 423, 425, 426, 427, 429, 441, 485, 505, 510], "health": [82, 335], "organ": [82, 125, 168, 207, 312, 335, 379, 422, 461], "nov": [82, 131, 132, 248, 335, 384, 386, 503], "26": [82, 138, 205, 207, 223, 237, 250, 335, 392, 459, 461, 477, 492, 505], "2021": [82, 131, 132, 335, 384, 386], "118": [82, 209, 335, 463], "121": [82, 335], "01": [82, 131, 132, 133, 335, 384, 386, 387], "dependencytreebank": [83, 84, 336], "numberofiter": [83, 84, 85, 336, 338], "setconllu": [83, 84, 85, 336, 338], "setdependencytreebank": [83, 84, 336], "setnumberofiter": [83, 84, 85, 336, 338], "conll2009": [83, 85, 338], "setconll2009": [83, 85, 338], "conllformat": [83, 85, 338], "traindependencypip": [83, 85, 338], "trainopt": [83, 85, 338], "trainparamet": [83, 85, 338], "dependencypars": [84, 85, 123, 336, 338, 376], "unlabel": [84, 93, 94, 95, 161, 164, 177, 336, 345, 346, 347, 414, 417, 431], "grammat": [84, 85, 336, 338], "inform": [84, 85, 104, 107, 117, 118, 125, 131, 138, 159, 160, 161, 181, 198, 206, 244, 249, 255, 336, 338, 357, 360, 370, 371, 379, 384, 392, 412, 413, 414, 434, 451, 460, 499, 504, 510, 511, 512, 513, 514, 520], "relationship": [84, 85, 115, 123, 336, 338, 368, 376], "tell": [84, 85, 125, 223, 336, 338, 379, 477], "verb": [84, 85, 247, 336, 338, 501], "particular": [84, 85, 125, 238, 336, 338, 379, 493, 514], "treebank": [84, 336], "penn": [84, 336], "converg": [84, 85, 151, 194, 336, 338, 405, 448], "better": [84, 85, 91, 98, 102, 107, 120, 125, 139, 151, 153, 154, 157, 161, 163, 165, 194, 336, 338, 343, 350, 354, 360, 373, 379, 393, 405, 407, 408, 411, 414, 416, 419, 448], "postagg": [84, 85, 123, 139, 151, 336, 338, 376, 393, 405], "dependency_treebank": [84, 336], "emptydataset": [84, 85, 336, 338], "tree": [84, 123, 336, 376], "bank": [84, 336], "dep": [84, 336], "dependency_conllu": [84, 123, 336, 376], "typeddependencyparsermdoel": [84, 336], "union": [84, 85, 336, 338], "turner": [84, 85, 336, 338], "newal": [84, 85, 336, 338], "sai": [84, 85, 125, 191, 336, 338, 379, 445], "disappoint": [84, 85, 336, 338], "talk": [84, 85, 145, 336, 338, 399], "stricken": [84, 85, 336, 338], "firm": [84, 85, 336, 338], "feder": [84, 85, 336, 338], "mogul": [84, 85, 336, 338], "typeddependencypars": [85, 123, 338, 376], "beforehand": [85, 338], "2009": [85, 338], "dependency_typ": [85, 123, 338, 376], "train_smal": [85, 338], "txt": [85, 86, 88, 100, 116, 117, 128, 130, 133, 134, 151, 154, 156, 181, 182, 183, 188, 191, 233, 240, 244, 248, 249, 338, 339, 341, 352, 369, 370, 382, 383, 387, 388, 405, 408, 410, 434, 436, 437, 441, 445, 488, 499, 503, 504, 520], "typdep": [85, 338], "dependency_typed_conllu": [85, 123, 338, 376], "amod": [85, 338], "flat": [85, 123, 201, 338, 376, 454], "nsubj": [85, 123, 201, 247, 338, 376, 454, 501], "parataxi": [85, 338], "pipe": 85, "roughli": [86, 339], "subtext": [86, 339], "perfect": [86, 88, 339, 341], "observ": [86, 88, 115, 339, 341, 368], "seen": [86, 88, 161, 339, 341, 414], "addition": [86, 88, 120, 140, 151, 169, 175, 198, 206, 237, 339, 341, 373, 394, 405, 423, 429, 451, 460, 492], "trim": [86, 88, 207, 339, 341, 461], "individu": [86, 88, 125, 181, 234, 339, 341, 342, 379, 434, 489], "documentcharactertextsplittertest": [86, 339], "decreas": [86, 145, 179, 339, 399, 432], "prioriti": [86, 182, 191, 339, 436, 445], "textdf": [86, 88, 102, 339, 341, 354], "sherlockholm": [86, 88, 100, 116, 181, 339, 341, 352, 369, 434, 520], "wholetext": [86, 88, 339, 341], "textsplitt": [86, 88, 339, 341], "20000": [86, 339], "80": [86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 133, 199, 210, 339, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 387, 452, 464], "project": [86, 88, 125, 159, 168, 171, 176, 179, 231, 255, 312, 339, 341, 379, 412, 422, 425, 430, 432, 485, 511], "gutenberg": [86, 88, 339, 341], "adventur": [86, 88, 339, 341], "sherlock": [86, 88, 181, 339, 341, 434], "holm": [86, 88, 181, 339, 341, 434], "arthur": [86, 88, 339, 341], "conan": [86, 88, 339, 341], "doyl": [86, 88, 339, 341], "19994": [86, 339], "And": [86, 339], "mademoisel": [86, 339], "ask": [86, 162, 244, 339, 415, 499], "brioni": [86, 339], "lodg": [86, 339], "serpentin": [86, 339], "aven": [86, 339], "19798": [86, 339], "39395": [86, 339], "19597": [86, 339], "did": [86, 125, 169, 175, 339, 379, 423, 429], "woman": [86, 339], "think": [86, 339], "39371": [86, 339], "59242": [86, 339], "19871": [86, 339], "But": [86, 88, 95, 101, 109, 339, 341, 347, 353, 362], "said": [86, 88, 339, 341], "million": [86, 109, 125, 141, 164, 339, 362, 379, 395, 417], "red": [86, 160, 339, 413], "men": [86, 339], "nwould": [86, 339], "59166": [86, 339], "77833": [86, 339], "18667": [86, 339], "friend": [86, 339], "enthusiast": [86, 339], "musician": [86, 339], "being": [86, 99, 106, 140, 145, 149, 161, 165, 168, 173, 177, 179, 312, 339, 351, 359, 394, 399, 402, 414, 419, 422, 427, 431, 432], "himself": [86, 339], "nveri": [86, 339], "capab": [86, 339], "77835": [86, 339], "97769": [86, 339], "19934": [86, 339], "yet": [86, 238, 339, 493], "convinc": [86, 339], "ncome": [86, 339], "li": [86, 173, 339, 427], "97771": [86, 339], "117248": [86, 339], "19477": [86, 339], "she": [86, 189, 339, 443], "had": [86, 125, 145, 339, 379, 399], "slate": [86, 339], "colour": [86, 339], "brim": [86, 339], "straw": [86, 339], "hat": [86, 339], "nfeather": [86, 339], "117250": [86, 339], "137242": [86, 339], "19992": [86, 339], "That": [86, 125, 189, 231, 339, 379, 443, 485, 510, 515], "littl": [86, 154, 339, 408, 519], "paradox": [86, 339], "profoundli": [86, 339], "singulari": [86, 339], "137244": [86, 339], "157171": [86, 339], "19927": [86, 339], "raw": [87, 160, 164, 189, 191, 194, 204, 233, 235, 340, 413, 417, 443, 445, 448, 457, 488, 513, 515], "scrape": [87, 340], "page": [87, 164, 171, 233, 235, 237, 242, 255, 340, 417, 425, 488, 492, 497, 509, 517, 519], "xml": [87, 240, 244, 340, 499], "dirti": [87, 143, 340, 397], "want": [87, 88, 122, 141, 238, 340, 341, 374, 395, 493, 515], "pretty_al": [87, 340], "normalizeddocu": [87, 340], "div": [87, 340], "theworldsgreatest": [87, 340], "right": [87, 93, 94, 161, 194, 207, 340, 345, 346, 414, 448, 461], "hide": [87, 340], "toptext": [87, 340], "style": [87, 127, 177, 340, 381, 431], "font": [87, 233, 235, 243, 340, 488, 498], "sego": [87, 340], "ui": [87, 340], "arial": [87, 340], "san": [87, 125, 340, 379], "serif": [87, 340], "largest": [87, 125, 164, 340, 379, 417], "develop": [87, 125, 165, 166, 168, 170, 171, 172, 174, 175, 176, 224, 312, 340, 379, 419, 420, 422, 424, 425, 426, 428, 429, 430, 482], "site": [87, 125, 163, 340, 379, 416], "h1": [87, 340], "300": [87, 340], "160": [87, 340], "lorem": [87, 130, 134, 340, 383, 388], "ipsum": [87, 130, 134, 340, 383, 388], "typeset": [87, 340], "been": [87, 96, 164, 165, 166, 172, 192, 210, 238, 340, 348, 417, 419, 420, 426, 446, 464, 493], "1500": [87, 340], "unknown": [87, 88, 127, 340, 341, 381], "printer": [87, 340], "took": [87, 170, 340, 424], "gallei": [87, 340], "scrambl": [87, 340], "specimen": [87, 340], "surviv": [87, 340], "five": [87, 141, 160, 340, 395, 413], "centuri": [87, 169, 194, 340, 423, 448], "leap": [87, 340], "electron": [87, 340], "essenti": [87, 164, 171, 340, 417, 425], "unchang": [87, 340], "popularis": [87, 340], "1960": [87, 340], "letraset": [87, 340], "sheet": [87, 255, 340], "passag": [87, 95, 101, 109, 340, 347, 353, 362], "recent": [87, 93, 94, 98, 110, 111, 125, 145, 161, 340, 345, 346, 350, 363, 364, 379, 399, 414], "publish": [87, 110, 111, 340, 363, 364], "softwar": [87, 176, 340, 430], "aldu": [87, 340], "pagemak": [87, 340], "measur": [88, 99, 110, 111, 161, 173, 231, 341, 351, 363, 364, 414, 427, 485], "futur": [88, 154, 161, 177, 341, 408, 414, 431], "techniqu": [88, 91, 98, 161, 164, 166, 170, 175, 177, 179, 341, 343, 350, 414, 417, 420, 424, 429, 431, 432], "documenttokensplittertest": [88, 341], "3018": [88, 341], "crime": [88, 341], "occupi": [88, 341], "nimmens": [88, 341], "faculti": [88, 341], "extraordinari": [88, 341], "power": [88, 93, 94, 161, 171, 177, 244, 341, 345, 346, 414, 425, 431, 499], "2950": [88, 341], "5707": [88, 341], "2757": [88, 341], "chang": [88, 104, 218, 227, 341, 342, 357, 472, 481], "cloth": [88, 341], "imagin": [88, 341], "ndeduc": [88, 341], "As": [88, 91, 93, 94, 95, 99, 101, 109, 125, 145, 171, 341, 343, 345, 346, 347, 351, 353, 362, 379, 399, 425], "5659": [88, 341], "8483": [88, 341], "2824": [88, 341], "quarter": [88, 341], "receiv": [88, 248, 341, 503, 520], "Be": [88, 341], "chamber": [88, 341], "nnot": [88, 341], "8427": [88, 341], "11241": [88, 341], "2814": [88, 341], "piti": [88, 341], "nto": [88, 341], "miss": [88, 131, 132, 197, 341, 384, 386, 450], "client": [88, 341], "never": [88, 157, 341, 411, 514], "mind": [88, 170, 341, 424], "him": [88, 132, 341, 386], "11188": [88, 341], "13970": [88, 341], "2782": [88, 341], "person": [88, 122, 247, 341, 374, 501], "me": [88, 132, 166, 341, 386, 420], "wish": [88, 341], "agent": [88, 175, 341, 429], "conf": [88, 341], "13918": [88, 341], "16898": [88, 341], "2980": [88, 341], "letter": [88, 143, 164, 165, 181, 248, 341, 397, 417, 419, 434, 503, 520], "secret": [88, 341], "marriag": [88, 341], "16836": [88, 341], "19744": [88, 341], "2908": [88, 341], "seven": [88, 341], "hundr": [88, 118, 119, 341, 371, 372], "nnote": [88, 341], "nholm": [88, 341], "scribbl": [88, 341], "receipt": [88, 341], "shee": [88, 341], "19683": [88, 341], "22551": [88, 341], "2868": [88, 341], "defragmentationthreshold": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "flashattent": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "getmetadata": [90, 92, 211, 218, 344, 472], "gpusplitmod": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "grpattnn": [90, 92, 159, 160, 344, 412, 413], "grpattnw": [90, 92, 159, 160, 344, 412, 413], "maingpu": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "nbatch": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "nchunk": [90, 92, 159, 160, 344, 412, 413], "nctx": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "ngpulay": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "nsequenc": [90, 92, 159, 160, 344, 412, 413], "nthread": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "nthreadsbatch": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "nubatch": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "nokvoffload": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "numastrategi": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "poolingtyp": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "ropefreqbas": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "ropefreqscal": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "ropescalingtyp": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "setdefragmentationthreshold": [90, 92, 211, 218, 344, 472], "setflashattent": [90, 92, 211, 218, 344, 472], "setgpusplitmod": [90, 92, 211, 218, 344, 472], "setgrpattnn": [90, 92, 344], "setgrpattnw": [90, 92, 344], "setmaingpu": [90, 92, 211, 218, 344, 472], "setnbatch": [90, 92, 211, 218, 344, 472], "setnchunk": [90, 92, 344], "setnctx": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "setngpulay": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "setnparallel": [90, 92, 211, 218, 344, 472], "setnsequ": [90, 92, 344], "setnthread": [90, 92, 211, 218, 344, 472], "setnthreadsbatch": [90, 92, 211, 218, 344, 472], "setnubatch": [90, 92, 211, 218, 344, 472], "setnokvoffload": [90, 92, 211, 218, 344, 472], "setnumastrategi": [90, 92, 211, 218, 344, 472], "setpoolingtyp": [90, 92, 211, 218, 344, 472], "setropefreqbas": [90, 92, 211, 218, 344, 472], "setropefreqscal": [90, 92, 211, 218, 344, 472], "setropescalingtyp": [90, 92, 211, 218, 344, 472], "settensorsplit": [90, 92, 344], "setusemlock": [90, 92, 211, 218, 344, 472], "setusemmap": [90, 92, 211, 218, 344, 472], "setyarnattnfactor": [90, 92, 211, 218, 344, 472], "setyarnbetafast": [90, 92, 211, 218, 344, 472], "setyarnbetaslow": [90, 92, 211, 218, 344, 472], "setyarnextfactor": [90, 92, 211, 218, 344, 472], "setyarnorigctx": [90, 92, 211, 218, 344, 472], "tensorsplit": [90, 92, 159, 160, 344, 412, 413], "usemlock": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "usemmap": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "yarnattnfactor": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "yarnbetafast": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "yarnbetaslow": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "yarnextfactor": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "yarnorigctx": [90, 92, 159, 160, 211, 218, 344, 412, 413, 472], "islong": [90, 94, 346], "setislong": [90, 94, 346], "poolingstrategi": [90, 97, 108, 112, 113, 114, 349, 361, 365, 366, 367], "setpoolingstrategi": [90, 97, 108, 112, 113, 114, 349, 361, 365, 366, 367], "setskipoov": [90, 97, 349], "skipoov": [90, 97, 349], "maxit": [90, 100, 116, 352, 369], "mincount": [90, 100, 116, 180, 181, 352, 369, 434], "setmaxit": [90, 100, 116, 352, 369], "setmincount": [90, 100, 116, 180, 181, 352, 369, 434], "setse": [90, 100, 116, 211, 218, 352, 369, 472], "setsteps": [90, 100, 116, 352, 369], "setvectors": [90, 100, 116, 352, 369], "setwindows": [90, 100, 116, 124, 125, 352, 369, 379], "stepsiz": [90, 100, 116, 352, 369], "vectors": [90, 100, 116, 352, 369], "windows": [90, 100, 116, 124, 125, 352, 369, 379], "getvector": [90, 100, 116, 352, 369], "poolinglay": [90, 103, 355], "setpoolinglay": [90, 103, 355], "setinstruct": [90, 104, 357], "loadsp": [90, 115, 368], "setloadsp": [90, 115, 368], "readcaches": [90, 117, 370], "setreadcaches": [90, 117, 370], "setwritebuffers": [90, 117, 370], "writebuffers": [90, 117, 370], "databas": [90, 117, 121, 122, 129, 130, 221, 370, 374, 383, 475], "loadstorag": [90, 117, 121, 122, 129, 130, 211, 221, 370, 374, 383, 475], "overallcoverag": [90, 117, 370], "withcoveragecolumn": [90, 117, 370], "lite": [91, 343], "toyota": [91, 343], "technolog": [91, 343], "institut": [91, 343], "chicago": [91, 343], "offici": [91, 125, 138, 139, 140, 205, 223, 237, 343, 379, 392, 393, 394, 459, 477, 492, 511], "tf": [91, 115, 343, 368], "wrapper": [91, 343, 481], "port": [91, 343], "albert_base_uncas": [91, 343], "albert_bas": [91, 343], "768": [91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 343, 345, 346, 347, 348, 350, 351, 353, 357, 358, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373], "emb": [91, 109, 113, 343, 362, 366], "dim": [91, 92, 159, 160, 218, 343, 344, 412, 413, 472], "12m": [91, 343], "albert_large_uncas": [91, 343], "albert_larg": [91, 343], "1024": [91, 103, 105, 120, 343, 355, 358, 373], "24": [91, 120, 130, 134, 138, 181, 205, 223, 237, 343, 373, 383, 388, 392, 434, 459, 477, 492, 513], "18m": [91, 343], "albert_xlarge_uncas": [91, 343], "albert_xlarg": [91, 343], "2048": [91, 343], "60m": [91, 343], "albert_xxlarge_uncas": [91, 343], "albert_xxlarg": [91, 343], "235m": [91, 343], "sentencepiec": [91, 98, 115, 343, 350, 368], "everi": [91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 140, 157, 168, 181, 198, 206, 208, 218, 312, 343, 345, 346, 347, 348, 350, 351, 353, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 373, 394, 411, 422, 434, 451, 460, 462, 515], "dimens": [91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 211, 218, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 472], "repeat": [91, 145, 159, 160, 218, 343, 399, 412, 413, 472], "footprint": [91, 343], "cost": [91, 169, 181, 182, 343, 423, 434, 436], "FOR": [91, 343], "tfhub": [91, 103, 115, 343, 355, 368], "q": [91, 343], "increas": [91, 92, 95, 101, 109, 117, 125, 145, 159, 160, 161, 164, 167, 179, 182, 183, 218, 343, 344, 347, 353, 362, 370, 379, 399, 412, 413, 414, 417, 421, 432, 436, 472], "downstream": [91, 96, 98, 103, 104, 105, 106, 120, 161, 164, 175, 177, 343, 348, 350, 355, 357, 358, 359, 373, 414, 417, 429, 431], "some": [91, 92, 94, 118, 125, 140, 154, 159, 160, 163, 164, 166, 173, 207, 208, 218, 231, 250, 343, 344, 346, 371, 379, 394, 408, 412, 413, 416, 417, 420, 427, 461, 462, 472, 485, 505, 513, 514, 518, 519], "point": [91, 93, 94, 153, 154, 198, 206, 244, 246, 343, 345, 346, 407, 408, 451, 460, 499, 500], "harder": [91, 343], "tpu": [91, 343], "consumpt": [91, 115, 117, 343, 368, 370], "speed": [91, 139, 163, 168, 169, 312, 343, 393, 416, 422, 423], "devlin": [91, 110, 111, 343, 363, 364], "et": [91, 110, 111, 127, 343, 363, 364, 381], "al": [91, 110, 111, 343, 363, 364], "2019": [91, 96, 98, 110, 111, 118, 119, 161, 343, 348, 350, 363, 364, 371, 372, 414], "comprehens": [91, 95, 114, 161, 163, 164, 166, 169, 175, 176, 343, 347, 367, 414, 416, 417, 420, 423, 429, 430], "empir": [91, 93, 94, 118, 119, 120, 343, 345, 346, 371, 372, 373], "evid": [91, 343], "focus": [91, 113, 125, 145, 160, 175, 176, 343, 366, 379, 399, 413, 429, 430], "inter": [91, 343], "coher": [91, 162, 164, 234, 343, 415, 417], "establish": [91, 343], "glue": [91, 93, 94, 99, 106, 107, 110, 111, 118, 119, 161, 343, 345, 346, 351, 359, 360, 363, 364, 371, 372, 414], "race": [91, 98, 110, 111, 343, 350, 363, 364], "finished_embed": [91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "setoutputasvector": [91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 195, 199, 343, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 452], "setcleanannot": [91, 98, 99, 103, 105, 110, 112, 115, 117, 118, 120, 195, 199, 200, 201, 343, 350, 351, 355, 358, 363, 365, 368, 370, 371, 373, 452, 453, 454], "1342473030090332": [91, 98, 343, 350], "3855540752410889": [91, 98, 343, 350], "9818322062492371": [91, 98, 343, 350], "784737348556518": [91, 98, 343, 350], "847029983997345": [91, 98, 343, 350], "047153353691101": [91, 98, 343, 350], "1520637571811676": [91, 98, 343, 350], "6245765686035156": [91, 98, 343, 350], "009860038757324219": [91, 98, 343, 350], "13450059294700623": [91, 98, 343, 350], "707749128341675": [91, 98, 343, 350], "2916892766952": [91, 98, 343, 350], "04192575812339783": [91, 98, 343, 350], "5764210224151611": [91, 98, 343, 350], "3196685314178467": [91, 98, 343, 350], "527840495109": [91, 98, 343, 350], "15583214163780212": [91, 98, 343, 350], "1614152491092682": [91, 98, 343, 350], "28423872590065": [91, 98, 343, 350], "135491415858268": [91, 98, 343, 350], "cpp": [92, 159, 160, 204, 207, 344, 412, 413, 457, 461], "cl": [92, 95, 108, 113, 114, 218, 344, 347, 361, 366, 367, 472], "nomic_embed_text_v1": [92, 344], "q8_0": [92, 344], "gguf": [92, 344], "autoggufembeddingstest": [92, 344], "notebook": [92, 159, 160, 176, 179, 207, 231, 254, 344, 412, 413, 430, 432, 461, 485, 510], "thread": [92, 159, 160, 218, 344, 412, 413, 472, 485], "logic": [92, 159, 160, 172, 173, 218, 344, 412, 413, 426, 427, 472], "bla": [92, 159, 160, 218, 344, 412, 413, 472], "physic": [92, 159, 160, 218, 344, 412, 413, 472], "maxim": [92, 120, 159, 160, 181, 344, 373, 412, 413, 434], "store": [92, 123, 159, 160, 209, 218, 235, 237, 242, 250, 344, 376, 401, 402, 412, 413, 463, 467, 472, 483, 489, 490, 492, 497, 505, 511], "vram": [92, 159, 160, 218, 344, 412, 413, 472], "across": [92, 103, 159, 160, 164, 165, 166, 169, 175, 179, 218, 344, 355, 412, 413, 417, 419, 420, 423, 429, 432, 472], "main": [92, 122, 159, 160, 179, 191, 218, 255, 344, 374, 412, 413, 432, 445, 472, 513, 517, 520], "scratch": [92, 159, 160, 218, 344, 412, 413, 472], "tensor": [92, 103, 159, 160, 218, 344, 355, 412, 413, 472], "distribut": [92, 100, 116, 159, 160, 218, 344, 352, 369, 412, 413, 472], "rope": [92, 159, 160, 218, 344, 412, 413, 472], "frequenc": [92, 145, 157, 159, 160, 181, 182, 183, 194, 218, 344, 399, 411, 412, 413, 434, 436, 437, 448, 472], "ntk": [92, 159, 160, 218, 344, 412, 413, 472], "awar": [92, 159, 160, 181, 218, 344, 412, 413, 434, 472], "expand": [92, 159, 160, 169, 218, 344, 412, 413, 423, 472], "yarn": [92, 159, 160, 218, 344, 412, 413, 472], "extrapol": [92, 159, 160, 218, 344, 412, 413, 472], "mix": [92, 103, 113, 159, 160, 218, 313, 344, 355, 366, 412, 413, 432, 466, 472, 484], "sqrt": [92, 159, 160, 218, 344, 412, 413, 472], "magnitud": [92, 104, 159, 160, 182, 183, 218, 344, 357, 412, 413, 436, 437, 472], "low": [92, 95, 118, 119, 159, 160, 170, 176, 181, 218, 344, 347, 371, 372, 412, 413, 424, 430, 434, 472], "correct": [92, 118, 159, 160, 181, 182, 183, 194, 218, 344, 371, 412, 413, 434, 436, 437, 448, 472], "beta": [92, 159, 160, 175, 218, 344, 412, 413, 429, 472], "alpha": [92, 159, 160, 163, 181, 218, 344, 412, 413, 416, 434, 472], "kv": [92, 159, 160, 218, 344, 412, 413, 472], "defragment": [92, 159, 160, 218, 344, 412, 413, 472], "numa": [92, 159, 160, 218, 344, 412, 413, 472], "unless": [92, 159, 160, 218, 344, 412, 413, 472], "unspecifi": [92, 159, 160, 218, 344, 412, 413, 472], "flash": [92, 159, 160, 218, 344, 412, 413, 472], "pageout": [92, 159, 160, 218, 344, 412, 413, 472], "mlock": [92, 159, 160, 218, 344, 412, 413, 472], "ram": [92, 159, 160, 218, 344, 412, 413, 472], "swap": [92, 159, 160, 182, 218, 344, 412, 413, 436, 472], "disabl": [92, 157, 159, 160, 198, 206, 218, 242, 344, 412, 413, 451, 460, 472, 497], "offload": [92, 159, 160, 218, 344, 412, 413, 472], "sure": [92, 157, 159, 160, 254, 344, 411, 412, 413], "adjust": [92, 159, 160, 218, 344, 412, 413, 472], "accord": [92, 125, 159, 160, 165, 181, 246, 344, 379, 412, 413, 419, 434, 500], "hardwar": [92, 159, 160, 344, 412, 413], "avoid": [92, 107, 156, 159, 160, 218, 344, 360, 410, 412, 413, 472], "error": [92, 159, 160, 181, 342, 344, 412, 413, 434], "99": [92, 159, 160, 344, 412, 413], "moon": [92, 108, 113, 114, 344, 361, 366, 367], "jupit": [92, 344], "77": [92, 344], "79": [92, 131, 132, 344, 384, 386], "confirm": [92, 344], "satellit": [92, 344], "made": [92, 95, 98, 115, 344, 347, 350, 368, 510], "ones": [92, 160, 344, 413], "034486726": [92, 344], "07770534": [92, 344], "15982522": [92, 344], "017873349": [92, 344], "013914132": [92, 344], "0365736": [92, 344], "nparallel": [92, 218, 344, 472], "alia": [92, 159, 160, 218, 223, 344, 412, 413, 472, 477], "small_bert_l2_768": [93, 345], "unlik": [93, 94, 104, 118, 125, 171, 189, 345, 346, 357, 371, 379, 425, 443], "jointli": [93, 94, 345, 346], "left": [93, 94, 160, 161, 170, 194, 214, 345, 346, 413, 414, 424, 448], "just": [93, 94, 99, 110, 135, 140, 234, 345, 346, 351, 363, 389, 394], "modif": [93, 94, 345, 346], "conceptu": [93, 94, 345, 346], "obtain": [93, 94, 96, 101, 115, 170, 345, 346, 348, 353, 368, 424], "eleven": [93, 94, 345, 346], "push": [93, 94, 252, 345, 346, 507], "absolut": [93, 94, 345, 346], "multinli": [93, 94, 345, 346], "86": [93, 94, 98, 345, 346, 350], "v1": [93, 94, 109, 345, 346, 362], "f1": [93, 94, 118, 119, 140, 164, 345, 346, 371, 372, 394, 417], "93": [93, 94, 345, 346], "83": [93, 94, 98, 248, 249, 345, 346, 350, 503, 504, 520], "small_bert_l2_128": [93, 345], "3497989177703857": [93, 104, 345, 357], "480538547039032": [93, 104, 345, 357], "3238905668258667": [93, 104, 345, 357], "612930893898010": [93, 104, 345, 357], "1357314586639404": [93, 345], "32984697818756104": [93, 345], "6032363176345825": [93, 345], "6791689395904": [93, 345], "8244884014129639": [93, 345], "27088963985443115": [93, 345], "059438943862915": [93, 345], "9817547798156": [93, 345], "1648050546646118": [93, 345], "4725411534309387": [93, 345], "5938255786895752": [93, 345], "5780693292617": [93, 345], "9125322699546814": [93, 345], "4563939869403839": [93, 345], "3975459933280945": [93, 345], "81611204147338": [93, 345], "backend": [93, 94, 101, 106, 110, 118, 207, 345, 346, 353, 359, 363, 371, 461], "sentence_bert_embed": [94, 346], "sent_small_bert_l2_768": [94, 346], "long": [94, 105, 109, 113, 114, 120, 160, 169, 173, 218, 242, 342, 346, 358, 362, 366, 367, 373, 413, 423, 427, 472, 497], "sent_small_bert_l2_128": [94, 346], "orang": [94, 111, 119, 346, 364, 372], "8951074481010437": [94, 111, 119, 346, 364, 372], "13753940165042877": [94, 111, 119, 346, 364, 372], "3108254075050354": [94, 111, 119, 346, 364, 372], "65693199634552": [94, 111, 119, 346, 364, 372], "6180210709571838": [94, 111, 119, 346, 364, 372], "12179657071828842": [94, 111, 119, 346, 364, 372], "191165953874588": [94, 111, 119, 346, 364, 372], "4497021436691": [94, 111, 119, 346, 364, 372], "822715163230896": [94, 111, 119, 346, 364, 372], "7568016648292542": [94, 111, 119, 346, 364, 372], "1165061742067337": [94, 111, 119, 346, 364, 372], "59048593044281": [94, 111, 119, 346, 364, 372], "bge": [95, 347], "baai": [95, 347], "dimension": [95, 115, 347, 368], "retriev": [95, 101, 104, 106, 113, 117, 128, 179, 182, 183, 184, 231, 234, 237, 254, 347, 353, 357, 359, 366, 370, 382, 432, 436, 437, 438, 485, 489, 492, 510, 514, 515], "bge_bas": [95, 347], "c": [95, 96, 100, 116, 125, 168, 194, 254, 312, 347, 348, 352, 369, 379, 422, 448], "pack": [95, 347], "chines": [95, 163, 194, 347, 416, 448], "github": [95, 98, 104, 106, 109, 110, 114, 168, 171, 175, 176, 237, 255, 312, 347, 350, 357, 359, 362, 363, 367, 422, 425, 429, 430, 492], "significantli": [95, 98, 103, 110, 111, 118, 119, 125, 173, 175, 176, 347, 350, 355, 363, 364, 371, 372, 379, 427, 429, 430], "critic": [95, 170, 347, 424], "mteb": [95, 101, 347, 353], "cover": [95, 154, 161, 167, 170, 177, 194, 347, 408, 414, 421, 424, 431, 448, 469], "mtp": [95, 347], "massiv": [95, 167, 347, 421], "curat": [95, 101, 109, 113, 347, 353, 362, 366], "corpora": [95, 107, 125, 130, 347, 360, 379, 383], "tem": [95, 347], "stateof": [95, 347], "meanwhil": [95, 347], "publicli": [95, 98, 118, 119, 173, 347, 350, 371, 372, 427], "flagopen": [95, 347], "flagembed": [95, 347], "useclstoken": [95, 211, 218, 347, 472], "protein": [95, 101, 109, 347, 353, 362], "femal": [95, 101, 109, 347, 353, 362], "eat": [95, 101, 109, 347, 353, 362], "guidelin": [95, 101, 109, 347, 353, 362], "cdc": [95, 101, 109, 347, 353, 362], "women": [95, 101, 109, 347, 353, 362], "70": [95, 101, 104, 109, 165, 166, 172, 347, 353, 357, 362, 419, 420, 426], "46": [95, 101, 109, 250, 347, 353, 362, 505], "dai": [95, 101, 109, 131, 132, 181, 347, 353, 362, 384, 386, 434], "chart": [95, 101, 109, 231, 347, 353, 362, 485, 510], "ll": [95, 101, 109, 194, 347, 353, 362, 448], "marathon": [95, 101, 109, 347, 353, 362], "below": [95, 101, 109, 123, 347, 353, 362, 376, 519], "0190285e": [95, 101, 109, 347, 353, 362], "005974853": [95, 101, 109, 347, 353, 362], "072875895": [95, 101, 109, 347, 353, 362], "007944068": [95, 101, 109, 347, 353, 362], "026059335": [95, 101, 109, 347, 353, 362], "0080": [95, 101, 109, 347, 353, 362], "050514214": [95, 101, 109, 347, 353, 362], "010061974": [95, 101, 109, 347, 353, 362], "04340176": [95, 101, 109, 347, 353, 362], "020937217": [95, 101, 109, 347, 353, 362], "05170225": [95, 101, 109, 347, 353, 362], "01157857": [95, 101, 109, 347, 353, 362], "bge_small_en_v1": [95, 347], "tasti": [96, 348], "french": [96, 125, 168, 185, 312, 348, 379, 422, 439], "loui": [96, 348], "martin": [96, 348], "muller": [96, 348], "pedro": [96, 348], "javier": [96, 348], "ortiz": [96, 348], "su\u00e1rez": [96, 348], "yoann": [96, 348], "dupont": [96, 348], "laurent": [96, 348], "romari": [96, 348], "\u00e9ric": [96, 348], "villemont": [96, 348], "la": [96, 145, 168, 312, 348, 399, 422], "clergeri": [96, 348], "djam\u00e9": [96, 348], "seddah": [96, 348], "beno\u00eet": [96, 348], "sagot": [96, 348], "facebook": [96, 98, 118, 119, 161, 348, 350, 371, 372, 414], "138gb": [96, 348], "camembert_bas": [96, 348], "camembertembeddingstestspec": [96, 348], "co": [96, 102, 125, 172, 173, 174, 348, 354, 379, 426, 427, 428], "now": [96, 154, 205, 254, 348, 408, 459, 515], "ubiquit": [96, 171, 348, 425], "despit": [96, 161, 173, 348, 414, 427], "concaten": [96, 194, 234, 348, 448, 489], "except": [96, 135, 140, 187, 191, 242, 342, 348, 389, 394, 445, 497], "investig": [96, 99, 115, 348, 351, 368], "feasibl": [96, 348], "monolingu": [96, 118, 119, 348, 371, 372], "crawl": [96, 161, 177, 348, 414, 431], "prefer": [96, 123, 173, 201, 348, 376, 427, 454], "wikipedia": [96, 127, 164, 233, 244, 348, 381, 417, 488, 499], "surprisingli": [96, 115, 348, 368], "4gb": [96, 348], "130": [96, 348], "gb": [96, 348], "reach": [96, 125, 164, 194, 348, 379, 417, 448], "four": [96, 154, 160, 192, 194, 348, 408, 413, 446, 448], "un": [96, 127, 348, 381], "08442357927560806": [96, 348], "12863239645957947": [96, 348], "03835778683423996": [96, 348], "200479581952": [96, 348], "048462312668561935": [96, 348], "12637358903884888": [96, 348], "27429091930389404": [96, 348], "07516729831": [96, 348], "02690504491329193": [96, 348], "12104076147079468": [96, 348], "012526623904705048": [96, 348], "031543646007": [96, 348], "05877285450696945": [96, 348], "08773420006036758": [96, 348], "06381352990865707": [96, 348], "122621834278": [96, 348], "aggreg": [97, 112, 179, 349, 365, 432], "sum": [97, 103, 112, 218, 349, 355, 365, 472], "discard": [97, 142, 349, 396], "oov": [97, 349], "55661": [97, 349], "42829502": [97, 349], "86661": [97, 349], "409785": [97, 349], "06316501": [97, 349], "120775": [97, 349], "0732005": [97, 349], "40674996": [97, 349], "22938299": [97, 349], "50597": [97, 349], "288195": [97, 349], "555655": [97, 349], "465145": [97, 349], "140118": [97, 349], "17417": [97, 349], "095253006": [97, 349], "0530925": [97, 349], "218465": [97, 349], "714395": [97, 349], "79860497": [97, 349], "0129999": [97, 349], "139705": [97, 349], "177955": [97, 349], "1887775": [97, 349], "45545": [97, 349], "20030999": [97, 349], "461557": [97, 349], "07891501": [97, 349], "disentangl": [98, 350], "pengcheng": [98, 350], "xiaodong": [98, 350], "jianfeng": [98, 350], "gao": [98, 350], "weizhu": [98, 350], "chen": [98, 110, 111, 350, 363, 364], "2018": [98, 110, 111, 350, 363, 364], "half": [98, 125, 350, 379], "deberta_v3_bas": [98, 350], "microsoft": [98, 101, 107, 109, 168, 172, 173, 174, 312, 350, 353, 360, 362, 422, 426, 427, 428], "www": [98, 233, 235, 244, 350, 488, 490, 499], "blog": [98, 175, 350, 429], "superglu": [98, 350], "progress": [98, 154, 190, 350, 408, 444], "mechan": [98, 105, 350, 358], "weight": [98, 103, 109, 125, 139, 141, 162, 171, 176, 181, 350, 355, 362, 379, 393, 395, 415, 425, 430, 434], "among": [98, 107, 163, 172, 173, 350, 360, 416, 426, 427], "matric": [98, 350], "second": [98, 103, 133, 153, 185, 190, 207, 234, 350, 355, 387, 407, 439, 444, 461, 489, 514], "mnli": [98, 350], "90": [98, 350], "91": [98, 350], "88": [98, 350], "fast": [99, 157, 165, 168, 205, 312, 351, 411, 419, 422, 459, 518], "cheap": [99, 351], "distil": [99, 106, 351, 359], "40": [99, 101, 141, 159, 160, 162, 165, 166, 168, 170, 174, 312, 351, 353, 395, 412, 413, 415, 419, 420, 422, 424, 428], "uncas": [99, 113, 351, 366], "run": [99, 125, 179, 231, 238, 254, 342, 351, 379, 432, 485, 493, 511, 519], "95": [99, 160, 244, 351, 413, 499], "distilbert_base_cas": [99, 351], "doesn": [99, 110, 351, 363], "token_type_id": [99, 110, 351, 363], "indic": [99, 110, 190, 194, 351, 363, 444, 448], "belong": [99, 110, 173, 351, 363, 427], "sep_token": [99, 110, 351, 363], "sep": [99, 351], "position_id": [99, 351], "ad": [99, 103, 145, 181, 207, 235, 244, 351, 355, 399, 434, 461, 499], "though": [99, 125, 351, 379], "let": [99, 145, 189, 254, 351, 399, 443, 514], "know": [99, 168, 208, 312, 351, 422, 462], "cheaper": [99, 351], "lighter": [99, 351], "preval": [99, 351], "constrain": [99, 159, 160, 218, 351, 412, 413, 472], "budget": [99, 351], "counterpart": [99, 351], "leverag": [99, 107, 113, 169, 231, 351, 360, 366, 423, 485, 510], "knowledg": [99, 125, 171, 172, 173, 175, 201, 207, 254, 351, 379, 425, 426, 427, 429, 454, 461], "reduc": [99, 107, 169, 172, 182, 183, 210, 351, 360, 423, 426, 436, 437, 464], "retain": [99, 351], "97": [99, 131, 132, 194, 351, 384, 386, 448], "tripl": [99, 123, 351, 376], "cosin": [99, 114, 351, 367], "distanc": [99, 160, 179, 181, 182, 183, 351, 413, 432, 434, 436, 437], "proof": [99, 351], "concept": [99, 351, 515], "experi": [99, 114, 120, 145, 161, 163, 169, 231, 351, 367, 373, 399, 414, 416, 423, 485, 511], "1127224713563919": [99, 351], "1982710212469101": [99, 351], "5360898375511169": [99, 351], "272536993026733": [99, 351], "35534414649009705": [99, 351], "13215228915214539": [99, 351], "40981462597846985": [99, 351], "14036104083061": [99, 351], "328085333108902": [99, 351], "06269335001707077": [99, 351], "017595693469047546": [99, 351], "024373905733": [99, 351], "15617232024669647": [99, 351], "2967822253704071": [99, 351], "22324979305267334": [99, 351], "04568954557180": [99, 351], "45411425828933716": [99, 351], "01173491682857275": [99, 351], "190129816532135": [99, 351], "1178255230188369": [99, 351], "corpu": [100, 103, 116, 125, 128, 151, 161, 177, 180, 181, 183, 248, 352, 355, 369, 379, 382, 405, 414, 431, 434, 437, 503, 520], "algorithm": [100, 116, 125, 139, 157, 181, 182, 183, 184, 352, 369, 379, 393, 411, 434, 436, 437], "appear": [100, 116, 145, 160, 181, 352, 369, 399, 413, 434], "divid": [100, 116, 352, 369], "1000": [100, 116, 123, 139, 352, 369, 376, 393], "025": [100, 116, 157, 352, 369], "estim": [100, 116, 186, 202, 229, 234, 352, 369, 440, 455, 465, 474, 484, 514], "composition": [100, 116, 352, 369], "numiter": [100, 116, 352, 369], "equal": [100, 116, 352, 369], "doc2vec_gigaword_300": [100, 352], "06222493574023247": [100, 116, 352, 369], "011579325422644615": [100, 116, 352, 369], "009919632226228714": [100, 116, 352, 369], "109361454844": [100, 116, 352, 369], "doc2vec_wiki": [100, 352], "e5": [101, 102, 353, 354], "weakli": [101, 109, 353, 362], "tailor": [101, 104, 170, 353, 357, 424], "e5_smal": [101, 353], "unilm": [101, 109, 353, 362], "manner": [101, 125, 353, 379], "signal": [101, 103, 353, 355], "ccpair": [101, 353], "readili": [101, 353], "conduct": [101, 114, 353, 367], "extens": [101, 114, 169, 176, 227, 353, 367, 423, 430, 481], "56": [101, 248, 353, 503], "beir": [101, 353], "bm25": [101, 353], "baselin": [101, 115, 164, 353, 368, 417], "beat": [101, 353], "exist": [101, 103, 113, 114, 145, 163, 167, 181, 199, 201, 218, 231, 235, 243, 252, 353, 355, 366, 367, 399, 416, 421, 434, 452, 454, 472, 485, 490, 498, 507], "royokong": [102, 354], "bridg": [102, 354], "modal": [102, 354], "gap": [102, 170, 354, 424], "even": [102, 125, 131, 163, 166, 175, 177, 354, 379, 384, 416, 420, 429, 431], "exclus": [102, 145, 175, 354, 399, 429], "yield": [102, 354], "e5v": [102, 354], "e5v_int4": [102, 354], "nsummari": [102, 354], "imageprompt": [102, 354], "textprompt": [102, 354], "sent": [102, 125, 354, 379], "textdesc": [102, 354], "sit": [102, 130, 134, 160, 354, 383, 388, 413], "nullimagedf": [102, 354], "sparkcontext": [102, 354], "engin": [102, 168, 169, 188, 211, 218, 312, 354, 422, 423, 441, 472], "elmo": [103, 355], "billion": [103, 162, 164, 165, 166, 169, 172, 173, 176, 355, 415, 417, 419, 420, 423, 426, 427, 430], "lookup": [103, 117, 120, 130, 159, 160, 182, 183, 221, 355, 370, 373, 383, 412, 413, 436, 437, 475], "word_emb": [103, 355], "shape": [103, 355], "batch_siz": [103, 355], "max_length": [103, 355], "lstm_outputs1": [103, 355], "lstm": [103, 140, 355, 394], "lstm_outputs2": [103, 355], "trainabl": [103, 355], "contextu": [103, 161, 166, 170, 181, 355, 414, 420, 424, 434], "characterist": [103, 234, 355], "syntax": [103, 355], "vari": [103, 145, 175, 355, 399, 429], "linguist": [103, 194, 355, 448], "polysemi": [103, 355], "bilm": [103, 355], "six": [103, 182, 183, 355, 436, 437], "textual": [103, 104, 114, 169, 234, 355, 357, 367, 423, 489], "entail": [103, 355], "expos": [103, 355], "crucial": [103, 113, 114, 355, 366, 367], "semi": [103, 355], "662458181381226e": [103, 355], "2541114091873169": [103, 355], "6275503039360046": [103, 355], "5787073969841": [103, 355], "19154725968837738": [103, 355], "22998669743537903": [103, 355], "2894386649131775": [103, 355], "21524395048618": [103, 355], "10400570929050446": [103, 355], "12288510054349899": [103, 355], "07056470215320587": [103, 355], "246389418840": [103, 355], "49932169914245605": [103, 355], "12706467509269714": [103, 355], "30969417095184326": [103, 355], "2643227577209": [103, 355], "8871506452560425": [103, 355], "20039963722229004": [103, 355], "0601330995559692": [103, 355], "0348707810044": [103, 355], "instructor": [104, 357], "finetun": [104, 105, 120, 175, 357, 358, 373, 429], "financ": [104, 357], "sota": [104, 114, 120, 357, 367, 373], "divers": [104, 115, 161, 164, 166, 176, 177, 357, 368, 414, 417, 420, 430, 431, 511], "medicin": [104, 357], "instructor_bas": [104, 357], "summar": [104, 105, 125, 161, 162, 164, 168, 177, 218, 252, 312, 357, 358, 379, 414, 415, 417, 422, 431, 472], "embedd": [104, 357], "hkunlp": [104, 357], "explain": [104, 231, 357, 485, 510, 517, 519], "special": [104, 175, 181, 194, 357, 429, 434, 448, 479, 515], "330": [104, 357], "mixtur": [104, 170, 175, 357, 424, 429], "66": [104, 141, 357, 395], "unseen": [104, 357], "suggest": [104, 164, 357, 417], "mitig": [104, 114, 357, 367], "io": [104, 175, 357, 429], "dynam": [104, 159, 160, 168, 218, 312, 357, 412, 413, 422, 472], "scalar": [104, 357], "degre": [104, 357], "freedom": [104, 357], "horava": [104, 357], "lifshitz": [104, 357], "graviti": [104, 357], "iz": [105, 358], "beltagi": [105, 358], "matthew": [105, 358], "arman": [105, 358], "cohan": [105, 358], "checkpoint": [105, 171, 358, 425], "mlm": [105, 107, 358, 360], "096": [105, 358], "longformer_base_4096": [105, 358], "unabl": [105, 358], "quadrat": [105, 358], "linearli": [105, 358], "easi": [105, 358], "thousand": [105, 167, 170, 358, 421, 424], "drop": [105, 185, 358, 439], "motiv": [105, 358], "global": [105, 170, 358, 424], "text8": [105, 358], "enwik8": [105, 358], "wikihop": [105, 358], "triviaqa": [105, 358], "led": [105, 110, 111, 125, 358, 363, 364, 379], "found": [105, 117, 125, 182, 189, 197, 246, 358, 370, 379, 436, 443, 450, 500, 517], "18792399764060974": [105, 110, 358, 363], "14591649174690247": [105, 110, 358, 363], "20547787845134735": [105, 110, 358, 363], "1468472778797": [105, 110, 358, 363], "22845706343650818": [105, 110, 358, 363], "18073144555091858": [105, 110, 358, 363], "09725798666477203": [105, 110, 358, 363], "0417917296290": [105, 110, 358, 363], "07037967443466187": [105, 110, 358, 363], "14801117777824402": [105, 110, 358, 363], "03603338822722435": [105, 110, 358, 363], "17893412709": [105, 110, 358, 363], "08734266459941864": [105, 110, 358, 363], "2486150562763214": [105, 110, 358, 363], "009067727252840996": [105, 110, 358, 363], "24408400058": [105, 110, 358, 363], "22409197688102722": [105, 110, 358, 363], "4312366545200348": [105, 110, 358, 363], "1401449590921402": [105, 110, 358, 363], "356410235166549": [105, 110, 358, 363], "minilm": [106, 359], "minilm_l6_v2": [106, 359], "agnost": [106, 359], "3x": [106, 359], "5x": [106, 359], "22x": [106, 359], "12x": [106, 359], "1234567": [106, 359], "2345678": [106, 359], "3456789": [106, 359], "4567890": [106, 359], "5678901": [106, 359], "6789012": [106, 359], "7890123": [106, 359], "adopt": [107, 169, 360, 423], "permut": [107, 120, 360, 373], "inherit": [107, 313, 360, 432, 466, 484], "advantag": [107, 208, 360, 462], "all_mpnet_base_v2": [107, 360], "neglect": [107, 120, 360, 373], "plm": [107, 360], "doe": [107, 118, 125, 138, 167, 168, 170, 205, 208, 238, 360, 371, 379, 392, 421, 422, 424, 459, 462, 493, 515, 518, 519], "full": [107, 109, 120, 175, 176, 233, 235, 360, 362, 373, 429, 430, 488, 514], "thu": [107, 125, 360, 379], "suffer": [107, 120, 360, 373], "discrep": [107, 120, 360, 373], "auxiliari": [107, 360], "160gb": [107, 360], "down": [107, 140, 233, 360, 394, 488, 514, 515], "stream": [107, 145, 159, 160, 163, 218, 360, 399, 412, 413, 416, 472], "experiment": [107, 125, 360, 379], "022502584": [107, 360], "078291744": [107, 360], "023030775": [107, 360], "0051000593": [107, 360], "080340415": [107, 360], "039": [107, 360], "041702367": [107, 360], "0010974605": [107, 360], "015534201": [107, 360], "07092203": [107, 360], "0017729357": [107, 360], "04661": [107, 360], "mxbai": [108, 361], "mxbai_large_v1": [108, 361], "hello": [108, 113, 114, 130, 134, 159, 162, 188, 207, 250, 361, 366, 367, 383, 388, 412, 415, 441, 461, 505], "50387806": [108, 113, 114, 361, 366, 367], "5861606": [108, 113, 114, 361, 366, 367], "35129607": [108, 113, 114, 361, 366, 367], "76046336": [108, 113, 114, 361, 366, 367], "32446072": [108, 113, 114, 361, 366, 367], "117674336": [108, 113, 114, 361, 366, 367], "6660665": [108, 113, 114, 361, 366, 367], "961762": [108, 113, 114, 361, 366, 367], "24854276": [108, 113, 114, 361, 366, 367], "1018044": [108, 113, 114, 361, 366, 367], "6569202": [108, 113, 114, 361, 366, 367], "027635604": [108, 113, 114, 361, 366, 367], "1915": [108, 113, 114, 361, 366, 367], "cls_avg": [108, 113, 114, 361, 366, 367], "avg": [108, 113, 114, 361, 366, 367], "nomic": [109, 362], "8192": [109, 362], "ada": [109, 146, 362, 400], "002": [109, 146, 362, 400], "short": [109, 114, 233, 234, 362, 367, 488], "nomic_embed_v1": [109, 362], "technic": [109, 113, 171, 175, 362, 366, 425, 429], "report": [109, 110, 111, 113, 115, 161, 171, 175, 231, 362, 363, 364, 366, 368, 414, 425, 429, 485, 510], "reproduc": [109, 167, 231, 362, 421, 485, 510, 511], "opendata": [109, 362], "licens": [109, 169, 176, 362, 423, 430], "loader": [109, 362], "235": [109, 362], "replic": [109, 110, 111, 161, 362, 363, 364, 414], "embedtext": [109, 362], "nomicai": [109, 362], "contrastor": [109, 362], "robustli": [110, 111, 142, 363, 364, 396], "yinhan": [110, 111, 363, 364], "myle": [110, 111, 118, 119, 363, 364, 371, 372], "ott": [110, 111, 118, 119, 363, 364, 371, 372], "naman": [110, 111, 118, 119, 363, 364, 371, 372], "goyal": [110, 111, 118, 119, 363, 364, 371, 372], "jingfei": [110, 111, 363, 364], "du": [110, 111, 127, 363, 364, 381], "mandar": [110, 111, 363, 364], "joshi": [110, 111, 363, 364], "danqi": [110, 111, 363, 364], "omer": [110, 111, 363, 364], "levi": [110, 111, 363, 364], "mike": [110, 111, 363, 364], "lewi": [110, 111, 363, 364], "luke": [110, 111, 118, 119, 363, 364, 371, 372], "zettlemoy": [110, 111, 118, 119, 363, 364, 371, 372], "veselin": [110, 111, 118, 119, 363, 364, 371, 372], "stoyanov": [110, 111, 118, 119, 363, 364, 371, 372], "hyperparamet": [110, 111, 363, 364], "mini": [110, 111, 173, 363, 364, 427], "roberta_bas": [110, 363], "bpe": [110, 363], "gain": [110, 111, 118, 119, 161, 167, 363, 364, 371, 372, 414, 421], "care": [110, 111, 191, 363, 364, 445], "comparison": [110, 111, 115, 175, 185, 363, 364, 368, 429, 439], "privat": [110, 111, 363, 364, 479], "impact": [110, 111, 363, 364], "carefulli": [110, 111, 145, 176, 363, 364, 399, 430], "undertrain": [110, 111, 363, 364], "highlight": [110, 111, 363, 364], "previous": [110, 111, 125, 175, 363, 364, 379, 429], "overlook": [110, 111, 363, 364], "rais": [110, 111, 125, 135, 140, 231, 342, 363, 364, 379, 389, 394, 485], "sent_roberta_bas": [111, 364], "embeddingssent": [112, 365], "22093398869037628": [112, 365], "25130119919776917": [112, 365], "41810303926467896": [112, 365], "380883991718": [112, 365], "snowflak": [113, 366], "arctic": [113, 366], "snowflake_artic_m": [113, 366], "accur": [113, 115, 157, 161, 182, 366, 368, 411, 414, 436], "deriv": [113, 183, 366, 437], "400m": [113, 366], "public": [113, 123, 238, 252, 366, 376, 493, 514], "1m": [113, 366], "triplet": [113, 366], "harm": [113, 366], "mine": [113, 167, 170, 366, 421, 424], "shortli": [113, 366], "uae": [114, 367], "satur": [114, 367], "uae_large_v1": [114, 367], "st": [114, 367], "vanish": [114, 367], "gradient": [114, 139, 367, 393], "issu": [114, 194, 255, 367, 448], "idea": [114, 120, 367, 373], "advers": [114, 367], "imped": [114, 367], "hinder": [114, 367], "furthermor": [114, 120, 175, 367, 373, 429], "examin": [114, 367], "scenario": [114, 157, 253, 367, 411, 508], "were": [114, 117, 140, 175, 231, 367, 370, 394, 429, 485, 510], "uae_smal": [114, 367], "tfhub_us": [115, 368], "op": [115, 368], "lingual": [115, 118, 119, 125, 127, 168, 312, 368, 371, 372, 379, 381, 422], "trade": [115, 118, 119, 368, 371, 372], "tend": [115, 368], "With": [115, 120, 125, 176, 368, 373, 379, 430], "minim": [115, 142, 168, 243, 312, 368, 396, 422, 498], "encourag": [115, 166, 368, 420], "weat": [115, 368], "bia": [115, 145, 159, 160, 175, 218, 368, 399, 412, 413, 429, 472], "freeli": [115, 368], "04616805538535118": [115, 368], "022307956591248512": [115, 368], "044395286589860916": [115, 368], "0016493503": [115, 368], "changeabl": 115, "nor": [115, 125, 379], "word2vec_gigaword_300": [116, 369], "word2vec_wiki": [116, 369], "setstoragepath": [117, 130, 211, 221, 370, 383, 475], "line": [117, 122, 130, 134, 145, 154, 156, 181, 233, 234, 237, 242, 244, 246, 248, 370, 374, 383, 388, 399, 408, 410, 434, 488, 492, 499, 500, 503], "39658191506190343": [117, 370], "630968081620067": [117, 370], "5393722253731201": [117, 370], "8428180123359783": [117, 370], "7535235923631415": [117, 370], "9699218875629833": [117, 370], "10397182122983872": [117, 370], "11833962569383116": [117, 370], "stress": [117, 370], "0492683418305907": [117, 370], "9415954572751959": [117, 370], "47624463167525755": [117, 370], "16790967216778263": [117, 370], "induc": [117, 370], "1535748762292387": [117, 370], "33498936903209897": [117, 370], "9235178224122094": [117, 370], "1158772920395934": [117, 370], "dump": [117, 370], "10000": [117, 370], "random_embeddings_dim4": [117, 370], "setstorageref": [117, 211, 221, 370, 475], "glove_4d": [117, 370], "setdimens": [117, 211, 218, 370, 472], "patient": [117, 370], "diagnos": [117, 370], "diabet": [117, 370], "9439099431037903": [117, 370], "4707513153553009": [117, 370], "806300163269043": [117, 370], "16176554560661316": [117, 370], "7966810464859009": [117, 370], "5551124811172485": [117, 370], "8861005902290344": [117, 370], "28284206986427307": [117, 370], "025029370561242104": [117, 370], "35177749395370483": [117, 370], "052506182342767715": [117, 370], "1887107789516449": [117, 370], "08617766946554184": [117, 370], "8399239182472229": [117, 370], "5395117998123169": [117, 370], "7864698767662048": [117, 370], "6599600911140442": [117, 370], "16109347343444824": [117, 370], "6041093468666077": [117, 370], "8913561105728149": [117, 370], "5955275893211365": [117, 370], "01899011991918087": [117, 370], "4397728443145752": [117, 370], "8911281824111938": [117, 370], "9840458631515503": [117, 370], "7599489092826843": [117, 370], "9417727589607239": [117, 370], "8624503016471863": [117, 370], "glove_100d": [117, 140, 370, 394], "There": [117, 122, 123, 160, 189, 370, 374, 376, 413, 443, 512, 514, 515, 520], "conveni": [117, 370], "coverag": [117, 216, 370, 469], "stat": [117, 370], "whole": [117, 171, 221, 237, 370, 425, 475, 492], "570580005645752": [117, 370], "44183000922203064": [117, 370], "7010200023651123": [117, 370], "417129993438720": [117, 370], "542639970779419": [117, 370], "4147599935531616": [117, 370], "0321999788284302": [117, 370], "4024400115013122": [117, 370], "2708599865436554": [117, 370], "04400600120425224": [117, 370], "020260000601410866": [117, 370], "17395000159": [117, 370], "6191999912261963": [117, 370], "14650000631809235": [117, 370], "08592499792575836": [117, 370], "2629800140857": [117, 370], "3397899866104126": [117, 370], "20940999686717987": [117, 370], "46347999572753906": [117, 370], "6479200124740": [117, 370], "storage_ref": [117, 122, 130, 221, 370, 374, 383, 475], "embeddings_col": [117, 370], "coverateresult": [117, 370], "wordsoverallcoverag": [117, 370], "resultdf": [117, 235, 370, 490], "output_col": [117, 370], "wordscoverag": [117, 370], "cov_embed": [117, 370], "alexi": [118, 119, 371, 372], "conneau": [118, 119, 371, 372], "kartikai": [118, 119, 371, 372], "khandelw": [118, 119, 371, 372], "vishrav": [118, 119, 371, 372], "chaudhari": [118, 119, 371, 372], "guillaum": [118, 119, 371, 372], "wenzek": [118, 119, 371, 372], "francisco": [118, 119, 125, 371, 372, 379], "guzman": [118, 371], "edouard": [118, 119, 371, 372], "grave": [118, 119, 371, 372], "5tb": [118, 119, 371, 372], "commoncrawl": [118, 119, 371, 372], "xlm_roberta_bas": [118, 371], "abl": [118, 167, 177, 231, 371, 421, 431, 485, 513], "terabyt": [118, 119, 371, 372], "r": [118, 119, 125, 162, 371, 372, 379, 415], "mbert": [118, 119, 371, 372], "xnli": [118, 119, 371, 372], "mlqa": [118, 119, 371, 372], "particularli": [118, 119, 161, 175, 371, 372, 414, 429], "swahili": [118, 119, 371, 372], "urdu": [118, 119, 371, 372], "capac": [118, 119, 164, 167, 371, 372, 417, 421], "dilut": [118, 119, 371, 372], "sacrif": [118, 119, 371, 372], "ri": [118, 119, 371, 372], "05969233065843582": [118, 371], "030789051204919815": [118, 371], "04443822056055069": [118, 371], "09564960747": [118, 371], "038839809596538544": [118, 371], "011712731793522835": [118, 371], "019954433664679527": [118, 371], "0667808502": [118, 371], "03952755779027939": [118, 371], "03455188870429993": [118, 371], "019103847444057465": [118, 371], "04311436787": [118, 371], "09579929709434509": [118, 371], "02494969218969345": [118, 371], "014753809198737144": [118, 371], "10259044915": [118, 371], "004710011184215546": [118, 371], "022148698568344116": [118, 371], "011723337695002556": [118, 371], "013356896": [118, 371], "guzm\u00e3": [119, 372], "sent_xlm_roberta_bas": [119, 372], "xl": [120, 233, 235, 240, 243, 244, 373, 488, 490, 498, 499], "exhibit": [120, 373], "involv": [120, 154, 171, 373, 408, 425], "rank": [120, 163, 179, 181, 218, 373, 416, 432, 434, 472], "xlnet_large_cas": [120, 373], "xlnet_base_cas": [120, 373], "zihangdai": [120, 373], "denois": [120, 161, 373, 414], "autoencod": [120, 161, 373, 414], "corrupt": [120, 161, 373, 414], "pro": [120, 373], "con": [120, 373], "likelihood": [120, 145, 373, 399], "overcom": [120, 373], "formul": [120, 373], "6287205219268799": [120, 373], "4865287244319916": [120, 373], "186111718416214": [120, 373], "234187275171279": [120, 373], "1967450380325317": [120, 373], "2746637463569641": [120, 373], "9481253027915955": [120, 373], "3431355059146881": [120, 373], "0777631998062134": [120, 373], "092679977416992": [120, 373], "5331977605819702": [120, 373], "11190271377563": [120, 373], "8349916934967041": [120, 373], "45627787709236145": [120, 373], "7890847325325012": [120, 373], "028069257736": [120, 373], "134845569729805": [120, 373], "11672890186309814": [120, 373], "4945235550403595": [120, 373], "66587203741073": [120, 373], "alphabet": [121, 122, 143, 374, 397], "patternsresourc": [121, 122, 374], "sentencematch": [121, 122, 374], "setalphabetresourc": [121, 122, 374], "setpatternsresourc": [121, 122, 374], "setsentencematch": [121, 122, 374], "setusestorag": [121, 122, 374], "usestorag": [121, 122, 374], "entityrul": [122, 374], "exact": [122, 130, 134, 145, 374, 383, 388, 399], "definit": [122, 142, 246, 374, 396, 500], "jsonl": [122, 374], "might": [122, 140, 194, 374, 394, 448, 519], "rule": [122, 129, 131, 133, 156, 187, 189, 191, 217, 222, 235, 374, 384, 387, 410, 443, 445, 471, 476], "winterfel": [122, 374], "jon": [122, 374], "snow": [122, 141, 160, 181, 374, 395, 413, 434], "stark": [122, 374], "eddard": [122, 374], "rocksdb": [122, 374], "lord": [122, 374], "29": [122, 141, 194, 248, 250, 374, 395, 448, 503, 505], "38": [122, 173, 243, 250, 374, 427, 498, 505], "plain": [122, 233, 234, 235, 243, 374, 488, 489, 490, 498, 520], "entity_pattern": [122, 374], "graph": [123, 140, 168, 181, 186, 201, 312, 376, 394, 422, 434, 440, 454], "relev": [123, 125, 145, 157, 376, 379, 399], "taken": [123, 376], "implicitli": [123, 376], "travers": [123, 376], "neighbor": [123, 179, 376, 432], "symbol": [123, 181, 194, 376, 434, 448], "coordin": [123, 153, 242, 244, 376, 407, 499], "remoteloc": [123, 376], "rdf": [123, 201, 376, 454], "nertagg": [123, 139, 140, 141, 376, 393, 394, 395], "morn": [123, 201, 376, 454], "flight": [123, 201, 376, 454], "denver": [123, 201, 376, 454], "18": [123, 131, 132, 135, 138, 141, 160, 205, 223, 237, 376, 384, 386, 389, 392, 395, 413, 459, 477, 492, 513], "path1": [123, 376], "iob": [123, 138, 139, 140, 376, 392, 393, 394], "iob2": [123, 138, 376, 392], "getstopword": [124, 125, 379], "maxngram": [124, 125, 379], "minngram": [124, 125, 379], "nkeyword": [124, 125, 379], "setmaxngram": [124, 125, 379], "setminngram": [124, 125, 379], "setnkeyword": [124, 125, 379], "yake": [125, 379], "independ": [125, 182, 183, 189, 379, 436, 437, 443], "grow": [125, 379], "autom": [125, 169, 379, 423], "adequ": [125, 379], "emerg": [125, 161, 177, 379, 414, 431], "tool": [125, 145, 161, 175, 176, 207, 379, 399, 414, 429, 430, 461], "thesauri": [125, 379], "neither": [125, 379], "written": [125, 168, 312, 379, 422], "plethora": [125, 379], "situat": [125, 154, 379, 408], "access": [125, 171, 207, 379, 425, 461], "restrict": [125, 172, 379, 426], "therefor": [125, 379, 518], "boundari": [125, 153, 154, 157, 191, 194, 233, 234, 235, 379, 407, 408, 411, 445, 448, 488], "detector": [125, 131, 156, 379, 384, 410], "section": [125, 198, 206, 234, 235, 379, 451, 460, 510, 512, 518], "tweakabl": [125, 379], "upper": [125, 379], "bound": [125, 153, 154, 157, 379, 407, 408, 411], "occurr": [125, 217, 379, 471], "campo": [125, 379], "mangaravit": [125, 379], "pasquali": [125, 379], "jatowt": [125, 379], "jorg": [125, 379], "nune": [125, 379], "journal": [125, 194, 379, 448], "elsevi": [125, 379], "vol": [125, 379], "509": [125, 379], "pp": [125, 194, 379, 448], "257": [125, 379], "289": [125, 379], "turn": [125, 210, 379, 464, 514], "come": [125, 138, 145, 165, 171, 379, 392, 399, 419, 425], "fly": [125, 379], "demand": [125, 379], "within": [125, 151, 157, 161, 164, 191, 197, 235, 243, 379, 405, 411, 414, 417, 445, 450, 490, 498], "resort": [125, 379], "alwai": [125, 145, 166, 171, 172, 173, 175, 177, 342, 379, 399, 420, 425, 426, 427, 429, 431], "solut": [125, 169, 379, 423], "articl": [125, 181, 379, 434], "rest": [125, 138, 379, 392], "extern": [125, 128, 133, 134, 139, 140, 181, 186, 208, 222, 246, 247, 248, 249, 254, 379, 382, 387, 388, 394, 434, 440, 462, 476, 500, 501, 503, 504], "merit": [125, 379], "ten": [125, 379], "carri": [125, 379], "twenti": [125, 379], "setcontextchar": [125, 187, 191, 379, 445], "acquir": [125, 379], "kaggl": [125, 176, 379, 430], "platform": [125, 145, 146, 231, 379, 399, 400, 485, 512], "host": [125, 379], "transact": [125, 379], "somewhat": [125, 379], "vagu": [125, 379], "confer": [125, 379], "week": [125, 131, 132, 188, 379, 384, 386, 441], "announc": [125, 141, 379, 395], "earli": [125, 379], "tomorrow": [125, 131, 132, 379, 384, 386], "founder": [125, 379], "ceo": [125, 379], "anthoni": [125, 379], "goldbloom": [125, 379], "declin": [125, 379], "deni": [125, 379], "acquisit": [125, 379], "happen": [125, 379], "rumor": [125, 379], "scientist": [125, 379], "ben": [125, 379], "hamner": [125, 379], "2010": [125, 379], "servic": [125, 145, 168, 312, 379, 399, 422], "got": [125, 379], "few": [125, 191, 248, 379, 445, 503, 520], "competitor": [125, 379], "drivendata": [125, 379], "topcod": [125, 379], "hackerrank": [125, 379], "manag": [125, 238, 254, 379, 493, 511], "stai": [125, 379], "ahead": [125, 379], "nich": [125, 379], "bui": [125, 247, 379, 501], "commun": [125, 165, 166, 171, 172, 379, 419, 420, 425, 426], "mindshar": [125, 379], "too": [125, 156, 379, 410, 513], "plenti": [125, 379], "bit": [125, 154, 379, 408, 519], "histori": [125, 154, 181, 379, 408, 434], "earlier": [125, 379], "month": [125, 131, 132, 248, 379, 384, 386, 503, 520], "team": [125, 168, 231, 312, 379, 422, 485, 510], "around": [125, 160, 170, 379, 413, 424], "youtub": [125, 379], "interest": [125, 171, 172, 173, 175, 379, 425, 426, 427, 429], "kernel": [125, 379], "On": [125, 163, 164, 168, 312, 379, 416, 417, 422], "analyz": [125, 157, 379, 411], "compani": [125, 168, 312, 379, 422], "script": [125, 167, 379, 421], "centric": [125, 167, 170, 379, 421, 424], "job": [125, 197, 379, 450], "board": [125, 151, 248, 379, 405, 503], "unclear": [125, 379], "crunchbas": [125, 379], "pitchbook": [125, 379], "launch": [125, 379], "investor": [125, 379], "ventur": [125, 379], "sv": [125, 379], "angel": [125, 163, 379, 416], "levchin": [125, 379], "naravik": [125, 379], "chie": [125, 379], "economist": [125, 379], "hal": [125, 379], "varian": [125, 379], "khosla": [125, 379], "yuri": [125, 379], "milner": [125, 379], "resulttupl": [125, 379], "ascend": [125, 379], "orderbi": [125, 379], "32051516486864573": [125, 379], "37786450577630676": [125, 379], "39922830978423146": [125, 379], "40224744669493756": [125, 379], "41584827825302534": [125, 379], "danish": [125, 185, 379, 439], "dutch": [125, 185, 379, 439], "finnish": [125, 185, 379, 439], "german": [125, 185, 246, 379, 439, 500, 520], "hungarian": [125, 185, 379, 439], "italian": [125, 145, 181, 185, 379, 399, 434, 439], "norwegian": [125, 185, 379, 439], "portugues": [125, 185, 379, 439], "russian": [125, 185, 379, 439], "spanish": [125, 185, 379, 439], "swedish": [125, 185, 379, 439], "turkish": [125, 185, 379, 439], "ld": [127, 377, 381], "identif": [127, 221, 381, 475], "rnn": [127, 381], "tatoeba": [127, 381], "wiki": [127, 381], "languagedetector": [127, 381], "ld_wiki_tatoeba_cnn_21": [127, 381], "java": [127, 238, 254, 313, 381, 432, 465, 466, 474, 480, 481, 484, 493], "scala": [127, 313, 381, 432, 465, 466, 474, 480, 484], "program": [127, 176, 381, 430], "biblioth\u00e8qu": [127, 381], "traitement": [127, 381], "pour": [127, 381], "le": [127, 168, 312, 381, 422], "avanc\u00e9": [127, 381], "langag": [127, 381], "naturel": [127, 381], "programm": [127, 381], "ist": [127, 381], "ein": [127, 381], "textverarbeitungsbibliothek": [127, 381], "f\u00fcr": [127, 381], "fortgeschritten": [127, 381], "nat\u00fcrlich": [127, 381], "sprachverarbeitung": [127, 381], "die": [127, 381], "programmiersprachen": [127, 381], "und": [127, 381], "lemma": [128, 156, 205, 237, 247, 382, 410, 459, 492, 501, 515, 518, 519], "predefin": [128, 130, 133, 134, 156, 382, 383, 387, 388, 410], "lemmas_smal": [128, 156, 382, 410], "keydelimit": 128, "valuedelimit": 128, "correspend": [128, 382], "key_delimit": [128, 382], "value_delimit": [128, 382], "fromlemma": [128, 382], "lemma_antbnc": [128, 382], "mergeoverlap": [129, 130, 134, 383, 388], "setent": [129, 130, 134, 136, 137, 188, 383, 388, 391, 441], "setmergeoverlap": [129, 130, 134, 383, 388], "settoken": [129, 130, 383], "searchtri": [129, 130, 134, 383, 388], "aggressivematch": [129, 131, 384], "anchordatedai": [129, 131, 132, 384, 386], "anchordatemonth": [129, 131, 132, 384, 386], "anchordateyear": [129, 131, 132, 384, 386], "defaultdaywhenmiss": [129, 131, 132, 384, 386], "inputformat": [129, 131, 195, 209, 384, 463], "outputformat": [129, 131, 384], "readmonthfirst": [129, 131, 132, 384, 386], "relaxedfactorystrategi": [129, 131, 384], "setaggressivematch": [129, 131, 384], "setanchordatedai": [129, 131, 132, 384, 386], "setanchordatemonth": [129, 131, 132, 384, 386], "setanchordateyear": [129, 131, 132, 384, 386], "setdefaultdaywhenmiss": [129, 131, 384], "setinputformat": [129, 131, 195, 209, 384, 463], "setoutputformat": [129, 131, 132, 384, 386], "setreadmonthfirst": [129, 131, 384], "setrelaxedfactorystrategi": [129, 131, 384], "setsourcelanguag": [129, 131, 384], "sourcelanguag": [129, 131, 384], "externalrul": [129, 133, 387], "setexternalrul": [129, 133, 387], "setrul": [129, 133, 387], "setstrategi": [129, 133, 387], "buildfromtoken": [129, 134, 388], "entityvalu": [129, 134, 388], "setbuildfromtoken": [129, 134, 388], "setentityvalu": [129, 134, 388], "trie": [130, 383], "dolor": [130, 134, 383, 388], "magna": [130, 134, 383, 388], "aliqua": [130, 134, 383, 388], "laborum": [130, 134, 383, 388], "entityextractor": [130, 134, 188, 383, 388, 441], "59": [130, 131, 132, 134, 383, 384, 386, 388], "tokenizer_model": [130, 383], "btm": [130, 383], "tmvocab": [130, 383], "tmedg": [130, 383], "tmnode": [130, 383], "1978": [131, 132, 384, 386], "28": [131, 132, 138, 205, 223, 235, 237, 250, 384, 386, 392, 459, 477, 490, 492, 505, 513], "1984": [131, 132, 384, 386], "04": [131, 132, 384, 386], "02": [131, 132, 384, 386], "1980": [131, 132, 384, 386], "31st": [131, 132, 384, 386], "april": [131, 132, 384, 386], "year": [131, 132, 164, 165, 188, 248, 384, 386, 417, 419, 441, 503], "2008": [131, 132, 384, 386], "fri": [131, 132, 384, 386], "1997": [131, 132, 384, 386], "jan": [131, 132, 384, 386], "sun": [131, 132, 384, 386], "1st": [131, 132, 384, 386], "thursdai": [131, 132, 384, 386], "wednesdai": [131, 132, 384, 386], "todai": [131, 132, 162, 170, 207, 250, 384, 386, 415, 424, 461, 505], "yesterdai": [131, 132, 384, 386], "0600h": [131, 132, 384, 386], "06": [131, 132, 384, 386], "00": [131, 132, 384, 386], "6pm": [131, 132, 384, 386], "23": [131, 132, 133, 141, 151, 248, 249, 250, 384, 386, 387, 395, 405, 503, 504, 505, 520], "1988": [131, 132, 384, 386], "31": [131, 132, 133, 141, 151, 248, 384, 386, 387, 395, 405, 503], "dateformat": [131, 132, 384, 386], "desir": [131, 132, 384, 386], "yyyi": [131, 132, 384, 386], "mm": [131, 132, 194, 384, 386, 448], "dd": [131, 132, 133, 384, 386, 387], "anchor": [131, 132, 384, 386], "januari": [131, 132, 384, 386], "15": [131, 242, 243, 250, 384, 497, 498, 505], "aggress": [131, 384], "attempt": [131, 182, 384, 436], "ambigu": [131, 384], "juli": [131, 384], "07": [131, 384], "05": [131, 160, 242, 384, 413, 497], "2015": [131, 384], "relax": [131, 160, 384, 413], "Not": [131, 140, 208, 384, 394, 462], "5th": [131, 384], "match_first": [131, 133, 211, 217, 384, 387, 471], "exhaust": [131, 384], "saw": [132, 386], "visit": [132, 145, 386, 399], "57": [132, 141, 386, 395], "65": [132, 141, 386, 395], "d": [133, 143, 191, 235, 387, 397, 445, 490, 512], "1970": [133, 387], "match_al": [133, 211, 217, 387, 471], "match_complet": [133, 211, 217, 387, 471], "ceremoni": [133, 387], "71": [133, 387], "short_dat": [133, 387], "regardless": [134, 388], "27": [134, 151, 153, 248, 388, 405, 407, 503], "48": [134, 194, 250, 388, 448, 505], "null": [135, 389], "empti": [135, 160, 179, 186, 197, 205, 233, 234, 243, 389, 413, 432, 450, 459, 488, 498], "join": [135, 151, 207, 209, 233, 234, 248, 389, 405, 461, 463, 488, 489, 503], "minepoch": [136, 137, 139, 140, 391, 393, 394], "setminepoch": [136, 137, 139, 391, 393], "setrandomse": [136, 137, 140, 147, 148, 158, 168, 391, 394, 401, 422], "nerhasnoschema": [136, 138, 392], "preserveposit": [136, 138, 187, 190, 195, 210, 392, 444, 464], "setnerhasnoschema": [136, 138, 392], "setpreserveposit": [136, 138, 187, 190, 195, 210, 392, 444, 464], "setwhitelist": [136, 138, 187, 189, 392, 443], "whitelist": [136, 138, 187, 189, 392, 443], "c0": [136, 139, 393], "externalfeatur": [136, 139, 393], "includeconfid": [136, 139, 140, 393, 394], "l2": [136, 139, 393], "lossep": [136, 139, 393], "minw": [136, 139, 393], "setc0": [136, 139, 393], "setexternalfeatur": [136, 139, 393], "setincludeconfid": [136, 139, 140, 393, 394], "setl2": [136, 139, 393], "setlossep": [136, 139, 393], "setminw": [136, 139, 393], "bestmodelmetr": [136, 140, 394], "enablememoryoptim": [136, 140, 394], "includeallconfidencescor": [136, 140, 394], "setbestmodelmetr": [136, 140, 394], "setenablememoryoptim": [136, 140, 394], "setincludeallconfidencescor": [136, 140, 394], "setpo": [136, 140, 394], "setusebestmodel": [136, 140, 394], "setusecontrib": [136, 140, 394], "usebestmodel": [136, 140, 394], "usecontrib": [136, 140, 394], "nerword": [136, 141, 395], "newnerent": [136, 141, 395], "replaceent": [136, 141, 395], "setnerword": [136, 141, 395], "setnewnerent": [136, 141, 395], "setreplaceent": [136, 141, 395], "ignoreent": [136, 142, 396], "predictionthreshold": [136, 142, 396], "setentitydefinit": [136, 142, 396], "setpredictionthreshold": [136, 142, 396], "recogn": [137, 138, 139, 140, 141, 142, 181, 391, 392, 393, 394, 395, 396, 434], "friendli": [138, 145, 168, 312, 392, 399, 422], "outsid": [138, 392], "ekeu": [138, 139, 140, 205, 223, 237, 392, 393, 394, 459, 477, 492], "36": [138, 151, 205, 223, 237, 248, 250, 392, 405, 459, 477, 492, 503, 505], "baghdad": [138, 139, 140, 205, 223, 237, 392, 393, 394, 459, 477, 492], "37": [138, 205, 223, 237, 392, 459, 477, 492], "nercrf": [139, 393], "crf": [139, 140, 393, 394], "2003": [139, 140, 194, 246, 393, 394, 448, 500, 520], "exclud": [139, 140, 393, 394], "decai": [139, 140, 393, 394], "2250000": [139, 393], "ep": [139, 393], "confid": [139, 140, 142, 393, 394, 396], "trainingdata": [139, 140, 154, 182, 183, 246, 393, 394, 408, 436, 437, 500], "readdataset": [139, 140, 151, 194, 245, 246, 247, 248, 249, 250, 393, 394, 405, 448, 500, 501, 503, 504, 505, 520], "conll2003": [139, 140, 246, 393, 394, 500, 520], "eng": [139, 140, 246, 393, 394, 500, 520], "c0valu": [139, 393], "l2valu": [139, 393], "verbosevalu": [139, 393], "prerequisit": [139, 140, 141, 393, 394, 395, 514], "nerdl": [140, 394], "char": [140, 143, 154, 242, 394, 397, 408], "bilstm": [140, 394], "tagger": [140, 248, 394, 503, 520], "rage": [140, 394], "contrib": [140, 394], "cell": [140, 209, 233, 234, 235, 394, 463, 488, 489], "slightli": [140, 154, 175, 394, 408, 429], "slow": [140, 394], "micro": [140, 394], "macro": [140, 394], "nermodel": [140, 394], "setnewresult": [141, 395], "overwritten": [141, 395], "lab": [141, 395], "42": [141, 151, 395, 405], "45": [141, 151, 248, 250, 395, 405, 503, 505], "47": [141, 248, 250, 395, 503, 505], "ner_overwritten": [141, 395], "cardin": [141, 395], "rw": [141, 395], "zeroshotn": [142, 396], "zer_shot_n": [142, 396], "entitydefinit": [142, 396], "citi": [142, 396], "town": [142, 396], "01f": [142, 396], "zero_shot_n": [142, 396], "hellen": [142, 396], "5328949": [142, 396], "9360068": [142, 396], "83294415": [142, 396], "45366877": [142, 396], "shortcut": [142, 396], "zero_shot_ner_roberta": [142, 396], "stem": [143, 184, 205, 237, 397, 438, 459, 492, 518, 519], "henc": [143, 397], "pl": [143, 397], "slang": [143, 397], "alphanumer": [143, 397], "za": [143, 397], "z": [143, 159, 160, 191, 218, 397, 412, 413, 445, 472], "brother": [143, 397], "dont": [143, 157, 397, 411], "sensit": [143, 182, 185, 191, 436, 439, 445], "bestof": [144, 145, 399], "echo": [144, 145, 399], "frequencypenalti": [144, 145, 159, 160, 211, 218, 399, 412, 413, 472], "logitbia": [144, 145, 399], "logprob": [144, 145, 399], "maxtoken": [144, 145, 399], "numberofcomplet": [144, 145, 399], "presencepenalti": [144, 145, 159, 160, 211, 218, 399, 412, 413, 472], "setbestof": [144, 145, 399], "setecho": [144, 145, 399], "setfrequencypenalti": [144, 145, 211, 218, 399, 472], "setlogitbia": [144, 145, 399], "setlogprob": [144, 145, 399], "setmaxtoken": [144, 145, 399], "setmodel": [144, 145, 146, 152, 154, 399, 400, 408], "setnumberofcomplet": [144, 145, 399], "setpresencepenalti": [144, 145, 211, 218, 399, 472], "setstop": [144, 145, 399], "setsuffix": [144, 145, 187, 189, 399, 443], "setus": [144, 145, 146, 399, 400], "suffix": [144, 145, 159, 160, 187, 189, 191, 218, 399, 412, 413, 443, 445, 472, 514], "request": [145, 146, 176, 233, 399, 400, 430, 488], "complet": [145, 159, 160, 176, 218, 231, 399, 412, 413, 430, 472, 485, 511, 514], "api": [145, 146, 255, 399, 400, 510, 514, 517], "insert": [145, 182, 183, 234, 399, 436, 437, 514], "nucleu": [145, 399], "mass": [145, 399], "penal": [145, 159, 160, 218, 399, 412, 413, 472], "topic": [145, 399], "verbatim": [145, 399], "best_of": [145, 399], "server": [145, 159, 160, 399, 412, 413, 519], "side": [145, 160, 163, 194, 399, 413, 416, 448], "abus": [145, 146, 399, 400], "davinci": [145, 399], "003": [145, 399], "empty_df": [145, 146, 399, 400], "sample_text": [145, 146, 399, 400], "restaur": [145, 156, 399, 410], "eateri": [145, 399], "dine": [145, 399], "sample_df": [145, 146, 399, 400], "258": [145, 399], "ni": [145, 207, 399, 461], "pleasur": [145, 399], "fiorita": [145, 399], "truli": [145, 171, 399, 425], "delight": [145, 399], "menu": [145, 399], "boast": [145, 399], "wonder": [145, 399], "classic": [145, 399], "dish": [145, 399], "exquisit": [145, 399], "staff": [145, 156, 399, 410], "227": [145, 399], "barbecu": [145, 399], "joe": [145, 399], "dinner": [145, 399], "amaz": [145, 399], "pull": [145, 176, 399, 430], "pork": [145, 399], "smoke": [145, 399], "turkei": [145, 399], "brisket": [145, 399], "rib": [145, 399], "sandwich": [145, 399], "opt": [145, 399], "172": [145, 399], "overallr": [145, 399], "reviewbodi": [145, 399], "enjoi": [145, 160, 163, 399, 413, 416], "meal": [145, 399], "flavour": [145, 399], "beautifulli": [145, 160, 399, 413], "cannot": [145, 207, 399, 461], "candid": [145, 181, 182, 183, 191, 399, 434, 436, 437, 445], "consum": [145, 399], "quota": [145, 399], "ensur": [145, 169, 170, 176, 399, 423, 424, 430, 480], "max_token": [145, 399], "mathemat": [145, 163, 169, 175, 399, 416, 423, 429], "ban": [145, 399], "50256": [145, 399], "prevent": [145, 399], "endoftext": [145, 399], "plu": [145, 164, 399, 417], "determinist": [145, 399], "alter": [145, 399], "delici": [146, 400], "waiter": [146, 400], "002297497": [146, 400], "009297881": [146, 400], "015739758": [146, 400], "0076794787": [146, 400], "004737794": [146, 400], "01487661": [146, 400], "009856389": [146, 400], "03823238": [146, 400], "0069305706": [146, 400], "028610818": [146, 400], "025208998": [146, 400], "018138802": [146, 400], "0036271256": [146, 400], "025539026": [146, 400], "204275e": [146, 400], "016374426": [146, 400], "02828079": [146, 400], "0054073683": [146, 400], "009710415": [146, 400], "016399812": [146, 400], "015397037": [146, 400], "00427766": [146, 400], "006987691": [146, 400], "0072859847": [146, 400], "003874646": [146, 400], "018544989": [146, 400], "008752067": [146, 400], "022657635": [146, 400], "011493831": [146, 400], "023901584": [146, 400], "015638212": [146, 400], "0035192322": [146, 400], "034932107": [146, 400], "0041919798": [146, 400], "02612292": [146, 400], "021515233": [146, 400], "005715182": [146, 400], "011754045": [146, 400], "008453773": [146, 400], "004080913": [146, 400], "019179657": [146, 400], "014419649": [146, 400], "00893612": [146, 400], "0063911034": [146, 400], "045670684": [146, 400], "017884934": [146, 400], "005610462": [146, 400], "219344e": [146, 400], "02211182": [146, 400], "0039539794": [146, 400], "021007499": [146, 400], "017631067": [146, 400], "011696924": [146, 400], "02260686": [146, 400], "016336346": [146, 400], "017174106": [146, 400], "008466466": [146, 400], "0015922225": [146, 400], "025094759": [146, 400], "024967825": [146, 400], "007806412": [146, 400], "005794516": [146, 400], "022187982": [146, 400], "0029162979": [146, 400], "0060959826": [146, 400], "025564414": [146, 400], "008104706": [146, 400], "0010178483": [146, 400], "9823447e": [146, 400], "0046425937": [146, 400], "02074094": [146, 400], "013467647": [146, 400], "004626727": [146, 400], "016006319": [146, 400], "0166156": [146, 400], "008948814": [146, 400], "007616012": [146, 400], "013619968": [146, 400], "0069749975": [146, 400], "0052677416": [146, 400], "009881775": [146, 400], "04592455": [146, 400], "0030464048": [146, 400], "024003131": [146, 400], "02301305": [146, 400], "006981344": [146, 400], "023571556": [146, 400], "009938896": [146, 400], "006537077": [146, 400], "033332746": [146, 400], "002690991": [146, 400], "019928563": [146, 400], "0017596161": [146, 400], "001090835": [146, 400], "022683023": [146, 400], "005007528": [146, 400], "01540973": [146, 400], "031530287": [146, 400], "0054676617": [146, 400], "015980931": [146, 400], "0051471544": [146, 400], "019890483": [146, 400], "009386734": [146, 400], "0062133963": [146, 400], "031174876": [146, 400], "009405775": [146, 400], "015270104": [146, 400], "028864685": [146, 400], "021020193": [146, 400], "018303815": [146, 400], "0029210579": [146, 400], "012693353": [146, 400], "005102728": [146, 400], "049580235": [146, 400], "04300508": [146, 400], "1293065e": [146, 400], "0215787": [146, 400], "016894853": [146, 400], "0065434235": [146, 400], "041431103": [146, 400], "662815e": [146, 400], "03351045": [146, 400], "0128901": [146, 400], "010510096": [146, 400], "807209e": [146, 400], "01835459": [146, 400], "2869726e": [146, 400], "01309954": [146, 400], "011982525": [146, 400], "005813556": [146, 400], "0070194243": [146, 400], "008637827": [146, 400], "018456135": [146, 400], "5521466e": [146, 400], "019141577": [146, 400], "021896034": [146, 400], "02975322": [146, 400], "0043220865": [146, 400], "0015160623": [146, 400], "0052074483": [146, 400], "0149527695": [146, 400], "0213883": [146, 400], "018836936": [146, 400], "01105591": [146, 400], "0074636918": [146, 400], "022632249": [146, 400], "0036810723": [146, 400], "006286383": [146, 400], "025678653": [146, 400], "027773056": [146, 400], "03668379": [146, 400], "00445854": [146, 400], "013911915": [146, 400], "008015852": [146, 400], "0056739287": [146, 400], "010281616": [146, 400], "0057659554": [146, 400], "00872668": [146, 400], "010649723": [146, 400], "0787844e": [146, 400], "032164957": [146, 400], "023838118": [146, 400], "002641804": [146, 400], "030387888": [146, 400], "029626286": [146, 400], "016602905": [146, 400], "0021784967": [146, 400], "0010519617": [146, 400], "0116524985": [146, 400], "018519603": [146, 400], "007552545": [146, 400], "007419265": [146, 400], "0011090817": [146, 400], "0044331537": [146, 400], "009989669": [146, 400], "007533505": [146, 400], "0061943564": [146, 400], "0057088356": [146, 400], "028230017": [146, 400], "0042554466": [146, 400], "029321646": [146, 400], "024790118": [146, 400], "015676292": [146, 400], "018202268": [146, 400], "0075017717": [146, 400], "00865052": [146, 400], "0063942764": [146, 400], "0020118963": [146, 400], "036963046": [146, 400], "002335577": [146, 400], "020804405": [146, 400], "6888937": [146, 400], "019598536": [146, 400], "0034748053": [146, 400], "0067401705": [146, 400], "02835695": [146, 400], "023393849": [146, 400], "0071527045": [146, 400], "010586256": [146, 400], "0096088685": [146, 400], "009488282": [146, 400], "021337526": [146, 400], "6766098e": [146, 400], "019801632": [146, 400], "0022705235": [146, 400], "009558095": [146, 400], "0020753632": [146, 400], "708839e": [146, 400], "0066449703": [146, 400], "04130417": [146, 400], "011220924": [146, 400], "013391487": [146, 400], "027722282": [146, 400], "011366897": [146, 400], "4434706e": [146, 400], "015460504": [146, 400], "549375e": [146, 400], "01449581": [146, 400], "008529933": [146, 400], "018875016": [146, 400], "017745307": [146, 400], "009437508": [146, 400], "024587024": [146, 400], "013010687": [146, 400], "008993241": [146, 400], "005093208": [146, 400], "024218917": [146, 400], "024066597": [146, 400], "0037857925": [146, 400], "031047942": [146, 400], "015003543": [146, 400], "023266915": [146, 400], "03021018": [146, 400], "0069115306": [146, 400], "010154682": [146, 400], "011430364": [146, 400], "030311726": [146, 400], "01764376": [146, 400], "0020975766": [146, 400], "006746517": [146, 400], "009748495": [146, 400], "01665368": [146, 400], "003658859": [146, 400], "02789999": [146, 400], "0040682196": [146, 400], "0031289116": [146, 400], "029905539": [146, 400], "016882159": [146, 400], "0021689767": [146, 400], "023228835": [146, 400], "011773085": [146, 400], "014292715": [146, 400], "019827018": [146, 400], "029575512": [146, 400], "0015803224": [146, 400], "018405361": [146, 400], "002776671": [146, 400], "019370057": [146, 400], "027569963": [146, 400], "008460119": [146, 400], "012445833": [146, 400], "0028322043": [146, 400], "0052804346": [146, 400], "006422837": [146, 400], "009335961": [146, 400], "02354617": [146, 400], "0010345082": [146, 400], "018900402": [146, 400], "0029908712": [146, 400], "0068544107": [146, 400], "010148335": [146, 400], "007939693": [146, 400], "0072796377": [146, 400], "020537846": [146, 400], "010928977": [146, 400], "029880153": [146, 400], "0038492593": [146, 400], "002795711": [146, 400], "01892579": [146, 400], "029956313": [146, 400], "024612412": [146, 400], "00446806": [146, 400], "026452947": [146, 400], "017605681": [146, 400], "041177236": [146, 400], "02018243": [146, 400], "014648129": [146, 400], "021553313": [146, 400], "0015017823": [146, 400], "0034874987": [146, 400], "034170505": [146, 400], "036125284": [146, 400], "02805231": [146, 400], "018430749": [146, 400], "003404992": [146, 400], "009329614": [146, 400], "020766325": [146, 400], "012560072": [146, 400], "01707256": [146, 400], "011538258": [146, 400], "007711212": [146, 400], "01332802": [146, 400], "007412918": [146, 400], "022492621": [146, 400], "0059055826": [146, 400], "025754813": [146, 400], "01904003": [146, 400], "013353407": [146, 400], "0026005507": [146, 400], "022530701": [146, 400], "007895266": [146, 400], "842112e": [146, 400], "028103083": [146, 400], "013962688": [146, 400], "019979337": [146, 400], "02115982": [146, 400], "0029305778": [146, 400], "01340418": [146, 400], "01609517": [146, 400], "011880978": [146, 400], "016793307": [146, 400], "0048837676": [146, 400], "013036073": [146, 400], "025767507": [146, 400], "030337114": [146, 400], "022454541": [146, 400], "018824242": [146, 400], "0019785764": [146, 400], "006146756": [146, 400], "0021055099": [146, 400], "0014525956": [146, 400], "011157458": [146, 400], "005293128": [146, 400], "011468444": [146, 400], "021591393": [146, 400], "0051535014": [146, 400], "005597769": [146, 400], "1935701e": [146, 400], "012731433": [146, 400], "0034208586": [146, 400], "024688572": [146, 400], "0018103895": [146, 400], "001299482": [146, 400], "005461315": [146, 400], "024878971": [146, 400], "030565593": [146, 400], "016717145": [146, 400], "013226474": [146, 400], "008764761": [146, 400], "007355798": [146, 400], "0070638508": [146, 400], "005734222": [146, 400], "012084072": [146, 400], "023749264": [146, 400], "028813912": [146, 400], "015892077": [146, 400], "0033573918": [146, 400], "0052201413": [146, 400], "01672984": [146, 400], "0014105488": [146, 400], "02184526": [146, 400], "019560456": [146, 400], "0063752364": [146, 400], "008777454": [146, 400], "00418246": [146, 400], "013861141": [146, 400], "012877407": [146, 400], "009500975": [146, 400], "005804036": [146, 400], "0013859555": [146, 400], "025335932": [146, 400], "01779608": [146, 400], "01537165": [146, 400], "0019722297": [146, 400], "011081297": [146, 400], "0073875315": [146, 400], "0015795291": [146, 400], "015968239": [146, 400], "013454954": [146, 400], "0026592575": [146, 400], "0020944031": [146, 400], "014140395": [146, 400], "0023339903": [146, 400], "0064989966": [146, 400], "0030828982": [146, 400], "0046870206": [146, 400], "013239168": [146, 400], "017491441": [146, 400], "011106684": [146, 400], "029702445": [146, 400], "003696939": [146, 400], "013784981": [146, 400], "017250266": [146, 400], "0037762725": [146, 400], "021413686": [146, 400], "017047172": [146, 400], "019268509": [146, 400], "006898837": [146, 400], "013924608": [146, 400], "009266147": [146, 400], "0023577902": [146, 400], "020905953": [146, 400], "005264568": [146, 400], "0014875022": [146, 400], "0064513967": [146, 400], "003044818": [146, 400], "0073431046": [146, 400], "0012431552": [146, 400], "0021166166": [146, 400], "0019404964": [146, 400], "018646536": [146, 400], "6913787e": [146, 400], "01518125": [146, 400], "0013581888": [146, 400], "016755225": [146, 400], "5418405e": [146, 400], "0076921717": [146, 400], "016780613": [146, 400], "56008e": [146, 400], "010948017": [146, 400], "956349e": [146, 400], "006108676": [146, 400], "011290737": [146, 400], "027443029": [146, 400], "008910734": [146, 400], "012858367": [146, 400], "016844079": [146, 400], "017592987": [146, 400], "01476237": [146, 400], "0039793663": [146, 400], "008066626": [146, 400], "0018421229": [146, 400], "03422128": [146, 400], "016526746": [146, 400], "022200674": [146, 400], "0010051549": [146, 400], "004474407": [146, 400], "6767073e": [146, 400], "007749292": [146, 400], "026249854": [146, 400], "006670357": [146, 400], "014775063": [146, 400], "02589444": [146, 400], "0023530303": [146, 400], "0066068904": [146, 400], "0067147836": [146, 400], "0012542619": [146, 400], "018671922": [146, 400], "0022498968": [146, 400], "0048552076": [146, 400], "0031463648": [146, 400], "0217691": [146, 400], "011849245": [146, 400], "0026735375": [146, 400], "011024177": [146, 400], "01733912": [146, 400], "0073621445": [146, 400], "012407753": [146, 400], "0032939252": [146, 400], "0072288644": [146, 400], "014457729": [146, 400], "0011781019": [146, 400], "009615215": [146, 400], "0141150085": [146, 400], "025376e": [146, 400], "04615303": [146, 400], "031631835": [146, 400], "005131288": [146, 400], "006594197": [146, 400], "025386706": [146, 400], "028204631": [146, 400], "023482703": [146, 400], "013086847": [146, 400], "022314915": [146, 400], "2082416e": [146, 400], "023457317": [146, 400], "006013476": [146, 400], "0125029525": [146, 400], "0021404168": [146, 400], "023977743": [146, 400], "0033542186": [146, 400], "029423192": [146, 400], "0019960299": [146, 400], "0076477453": [146, 400], "080113e": [146, 400], "030413274": [146, 400], "008790147": [146, 400], "013493034": [146, 400], "078089505": [146, 400], "004842514": [146, 400], "015232024": [146, 400], "00825068": [146, 400], "036785338": [146, 400], "335175e": [146, 400], "03891782": [146, 400], "004680674": [146, 400], "005451795": [146, 400], "012134845": [146, 400], "02490436": [146, 400], "007101931": [146, 400], "026351402": [146, 400], "0043093935": [146, 400], "0059595294": [146, 400], "024561638": [146, 400], "019331977": [146, 400], "02385081": [146, 400], "008206253": [146, 400], "015942851": [146, 400], "027138388": [146, 400], "01521933": [146, 400], "0043728603": [146, 400], "025500946": [146, 400], "026173694": [146, 400], "0011558884": [146, 400], "023381157": [146, 400], "0016207825": [146, 400], "001237602": [146, 400], "0049916613": [146, 400], "0024085636": [146, 400], "015587438": [146, 400], "0048203007": [146, 400], "35144e": [146, 400], "012255432": [146, 400], "0048742476": [146, 400], "0062546497": [146, 400], "04051718": [146, 400], "0051090745": [146, 400], "016932933": [146, 400], "0016660026": [146, 400], "02774767": [146, 400], "050976507": [146, 400], "03043866": [146, 400], "0028655245": [146, 400], "0023292303": [146, 400], "0104275895": [146, 400], "004360167": [146, 400], "011144764": [146, 400], "024282385": [146, 400], "013988075": [146, 400], "016234798": [146, 400], "014698903": [146, 400], "037673872": [146, 400], "0054644886": [146, 400], "020461684": [146, 400], "012598153": [146, 400], "012363326": [146, 400], "002833791": [146, 400], "0029274046": [146, 400], "01243314": [146, 400], "0037413659": [146, 400], "012820287": [146, 400], "0070511578": [146, 400], "017364508": [146, 400], "0025545373": [146, 400], "0034843255": [146, 400], "009773882": [146, 400], "0010368882": [146, 400], "009894469": [146, 400], "330013e": [146, 400], "008237986": [146, 400], "0013804021": [146, 400], "0035890455": [146, 400], "029194713": [146, 400], "022721102": [146, 400], "026605267": [146, 400], "011151111": [146, 400], "0054200618": [146, 400], "0043919003": [146, 400], "0022181633": [146, 400], "0025402573": [146, 400], "015562051": [146, 400], "021984888": [146, 400], "025145533": [146, 400], "008422039": [146, 400], "0032590183": [146, 400], "008130092": [146, 400], "0019309763": [146, 400], "009278841": [146, 400], "981743e": [146, 400], "04363975": [146, 400], "008510893": [146, 400], "011360551": [146, 400], "025069373": [146, 400], "004252273": [146, 400], "011132071": [146, 400], "020474378": [146, 400], "014889303": [146, 400], "01896387": [146, 400], "0075461986": [146, 400], "012096765": [146, 400], "030489434": [146, 400], "012166579": [146, 400], "032393437": [146, 400], "0035763523": [146, 400], "009018627": [146, 400], "007438305": [146, 400], "0064196633": [146, 400], "025056679": [146, 400], "012230045": [146, 400], "821482e": [146, 400], "0124839125": [146, 400], "0014454556": [146, 400], "012744127": [146, 400], "007159051": [146, 400], "010402203": [146, 400], "010053135": [146, 400], "0042808335": [146, 400], "0025307373": [146, 400], "004128513": [146, 400], "010890896": [146, 400], "025716733": [146, 400], "024155451": [146, 400], "04023793": [146, 400], "015257411": [146, 400], "0129154865": [146, 400], "013264554": [146, 400], "028636204": [146, 400], "023520783": [146, 400], "004890114": [146, 400], "008022199": [146, 400], "016184025": [146, 400], "051535014": [146, 400], "011792125": [146, 400], "009291534": [146, 400], "031707995": [146, 400], "039476328": [146, 400], "004699714": [146, 400], "014216555": [146, 400], "01480045": [146, 400], "0065053436": [146, 400], "0044997935": [146, 400], "021705633": [146, 400], "0904366e": [146, 400], "019585844": [146, 400], "0036842457": [146, 400], "455769e": [146, 400], "006727477": [146, 400], "0108718565": [146, 400], "0046076872": [146, 400], "0303625": [146, 400], "02967706": [146, 400], "026554495": [146, 400], "014825836": [146, 400], "009786575": [146, 400], "009285187": [146, 400], "020931339": [146, 400], "003630299": [146, 400], "004693367": [146, 400], "009589829": [146, 400], "013886528": [146, 400], "017694535": [146, 400], "027493803": [146, 400], "004982141": [146, 400], "0071717445": [146, 400], "03297733": [146, 400], "007571585": [146, 400], "006276863": [146, 400], "016069785": [146, 400], "0464047e": [146, 400], "0025450173": [146, 400], "015358957": [146, 400], "018494215": [146, 400], "7068556e": [146, 400], "027646123": [146, 400], "0011114617": [146, 400], "013429567": [146, 400], "007920653": [146, 400], "0050011813": [146, 400], "013543808": [146, 400], "014381569": [146, 400], "0047346205": [146, 400], "018798856": [146, 400], "019674698": [146, 400], "012629886": [146, 400], "029803993": [146, 400], "009862735": [146, 400], "0033732585": [146, 400], "013048767": [146, 400], "009456548": [146, 400], "03815622": [146, 400], "286778e": [146, 400], "0040301397": [146, 400], "014254635": [146, 400], "0038809928": [146, 400], "016666373": [146, 400], "6997105e": [146, 400], "017351814": [146, 400], "015549357": [146, 400], "02952474": [146, 400], "00431574": [146, 400], "009818309": [146, 400], "470635e": [146, 400], "011404978": [146, 400], "025082065": [146, 400], "021908727": [146, 400], "018951176": [146, 400], "022936888": [146, 400], "013658048": [146, 400], "004671154": [146, 400], "0296009": [146, 400], "0127949": [146, 400], "018341895": [146, 400], "6842424e": [146, 400], "01292818": [146, 400], "0036429923": [146, 400], "030083247": [146, 400], "00215311": [146, 400], "024206225": [146, 400], "02619908": [146, 400], "009837349": [146, 400], "010256229": [146, 400], "008168173": [146, 400], "0100340955": [146, 400], "013150314": [146, 400], "02188334": [146, 400], "010935323": [146, 400], "008371267": [146, 400], "00857436": [146, 400], "0036144322": [146, 400], "009697721": [146, 400], "007863532": [146, 400], "018100722": [146, 400], "019446217": [146, 400], "023495397": [146, 400], "0037032857": [146, 400], "009380388": [146, 400], "027265321": [146, 400], "007140011": [146, 400], "015193944": [146, 400], "004556914": [146, 400], "013632661": [146, 400], "0056358487": [146, 400], "01040855": [146, 400], "0050519546": [146, 400], "008155479": [146, 400], "9020106e": [146, 400], "032571144": [146, 400], "0048076073": [146, 400], "0060293428": [146, 400], "016031705": [146, 400], "021781793": [146, 400], "0015866691": [146, 400], "0016088824": [146, 400], "024752038": [146, 400], "0019547765": [146, 400], "012369673": [146, 400], "015320877": [146, 400], "012706046": [146, 400], "009082094": [146, 400], "010249883": [146, 400], "019128883": [146, 400], "02543748": [146, 400], "0084982": [146, 400], "0032970984": [146, 400], "012991647": [146, 400], "022479929": [146, 400], "02316537": [146, 400], "0012312552": [146, 400], "0042840065": [146, 400], "018227655": [146, 400], "005731049": [146, 400], "02604676": [146, 400], "006689397": [146, 400], "006305423": [146, 400], "018075334": [146, 400], "019484296": [146, 400], "01783416": [146, 400], "0012130085": [146, 400], "015866691": [146, 400], "020626698": [146, 400], "039882515": [146, 400], "008682254": [146, 400], "0022546567": [146, 400], "009323268": [146, 400], "035871416": [146, 400], "014330796": [146, 400], "0145465825": [146, 400], "023216143": [146, 400], "011531911": [146, 400], "020372832": [146, 400], "00641649": [146, 400], "013531114": [146, 400], "016437892": [146, 400], "013124927": [146, 400], "019814324": [146, 400], "0015136823": [146, 400], "016247492": [146, 400], "004753661": [146, 400], "013823061": [146, 400], "007907959": [146, 400], "027113002": [146, 400], "009932549": [146, 400], "009659641": [146, 400], "0044807536": [146, 400], "009850042": [146, 400], "014191168": [146, 400], "042954307": [146, 400], "024701266": [146, 400], "01059895": [146, 400], "0047885673": [146, 400], "021629473": [146, 400], "006651317": [146, 400], "031098714": [146, 400], "0058262493": [146, 400], "0051249415": [146, 400], "0065180366": [146, 400], "0519563e": [146, 400], "009792922": [146, 400], "0423958": [146, 400], "010992444": [146, 400], "008739374": [146, 400], "002449817": [146, 400], "012045992": [146, 400], "014089622": [146, 400], "0018310162": [146, 400], "014406956": [146, 400], "033180423": [146, 400], "0052709146": [146, 400], "0016802826": [146, 400], "012750473": [146, 400], "018329201": [146, 400], "005750089": [146, 400], "048234742": [146, 400], "01771992": [146, 400], "009240761": [146, 400], "789961e": [146, 400], "017669147": [146, 400], "01730104": [146, 400], "0026529108": [146, 400], "022543395": [146, 400], "017288346": [146, 400], "007971426": [146, 400], "019065415": [146, 400], "007857186": [146, 400], "0481933e": [146, 400], "016488666": [146, 400], "709636e": [146, 400], "009348654": [146, 400], "0049281945": [146, 400], "0059436625": [146, 400], "020956725": [146, 400], "003538272": [146, 400], "0038905127": [146, 400], "0016485492": [146, 400], "0044141137": [146, 400], "01271874": [146, 400], "01483853": [146, 400], "01245218": [146, 400], "0023657237": [146, 400], "0037794458": [146, 400], "5497736e": [146, 400], "00882188": [146, 400], "015815917": [146, 400], "016767919": [146, 400], "005185235": [146, 400], "018049948": [146, 400], "007685825": [146, 400], "21934114": [146, 400], "012007912": [146, 400], "005039261": [146, 400], "037445392": [146, 400], "4307736e": [146, 400], "031403355": [146, 400], "0018468829": [146, 400], "0024656837": [146, 400], "01722488": [146, 400], "013213781": [146, 400], "011512871": [146, 400], "0015811158": [146, 400], "0035287521": [146, 400], "0062419563": [146, 400], "0048456877": [146, 400], "025120145": [146, 400], "023800036": [146, 400], "0269697e": [146, 400], "03554139": [146, 400], "01071319": [146, 400], "2110125e": [146, 400], "017313734": [146, 400], "03777542": [146, 400], "0019944431": [146, 400], "04402055": [146, 400], "02442201": [146, 400], "018976564": [146, 400], "005873849": [146, 400], "006924224": [146, 400], "003865126": [146, 400], "0057437425": [146, 400], "0038206992": [146, 400], "013163007": [146, 400], "01646328": [146, 400], "02446009": [146, 400], "018748082": [146, 400], "027239935": [146, 400], "0032479118": [146, 400], "03653147": [146, 400], "015206637": [146, 400], "018773468": [146, 400], "00643553": [146, 400], "010141989": [146, 400], "009183641": [146, 400], "02025859": [146, 400], "019852404": [146, 400], "006054729": [146, 400], "010630683": [146, 400], "009481935": [146, 400], "059881e": [146, 400], "03005786": [146, 400], "014851223": [146, 400], "014280022": [146, 400], "003274885": [146, 400], "0014168955": [146, 400], "025005905": [146, 400], "9089613e": [146, 400], "022302222": [146, 400], "008999587": [146, 400], "010097562": [146, 400], "024942439": [146, 400], "012807593": [146, 400], "019547764": [146, 400], "034957495": [146, 400], "026833748": [146, 400], "7683392e": [146, 400], "0068417173": [146, 400], "011182844": [146, 400], "016907547": [146, 400], "03013402": [146, 400], "0041062995": [146, 400], "014571969": [146, 400], "02070286": [146, 400], "011335164": [146, 400], "012725086": [146, 400], "8341785e": [146, 400], "0013653288": [146, 400], "017859548": [146, 400], "0056802756": [146, 400], "006556117": [146, 400], "0033002717": [146, 400], "011398631": [146, 400], "010954363": [146, 400], "055139925": [146, 400], "009424815": [146, 400], "004959928": [146, 400], "028788524": [146, 400], "0031241516": [146, 400], "0027465243": [146, 400], "036810722": [146, 400], "0031828582": [146, 400], "005543822": [146, 400], "0026053106": [146, 400], "6973375e": [146, 400], "017935708": [146, 400], "0015406557": [146, 400], "0023911104": [146, 400], "016945627": [146, 400], "0035636588": [146, 400], "02396505": [146, 400], "01911619": [146, 400], "0029448578": [146, 400], "033408906": [146, 400], "020550538": [146, 400], "01294722": [146, 400], "011500178": [146, 400], "011988872": [146, 400], "025424786": [146, 400], "011887325": [146, 400], "038587794": [146, 400], "003395472": [146, 400], "007946039": [146, 400], "019966645": [146, 400], "033713546": [146, 400], "018189576": [146, 400], "026859134": [146, 400], "012223699": [146, 400], "024802811": [146, 400], "099946e": [146, 400], "0010448216": [146, 400], "005020221": [146, 400], "012356979": [146, 400], "007590625": [146, 400], "03089562": [146, 400], "014521196": [146, 400], "017212186": [146, 400], "024917051": [146, 400], "020169739": [146, 400], "044680603": [146, 400], "005658062": [146, 400], "013835755": [146, 400], "3776127e": [146, 400], "0028496578": [146, 400], "006467263": [146, 400], "053007443": [146, 400], "011614418": [146, 400], "0056453687": [146, 400], "16145945": [146, 400], "0091963345": [146, 400], "024548944": [146, 400], "016425198": [146, 400], "015701678": [146, 400], "862344e": [146, 400], "023190755": [146, 400], "0074509983": [146, 400], "018088028": [146, 400], "010205456": [146, 400], "010383163": [146, 400], "033028103": [146, 400], "0023324036": [146, 400], "019052723": [146, 400], "016590212": [146, 400], "4408938e": [146, 400], "02324153": [146, 400], "019623924": [146, 400], "0383847": [146, 400], "002686231": [146, 400], "0010852817": [146, 400], "0076223584": [146, 400], "002762391": [146, 400], "030540207": [146, 400], "0037667525": [146, 400], "011005137": [146, 400], "0017850028": [146, 400], "005984916": [146, 400], "0029353378": [146, 400], "02555172": [146, 400], "00855532": [146, 400], "010287963": [146, 400], "2544602e": [146, 400], "0065624635": [146, 400], "017808774": [146, 400], "03528752": [146, 400], "013188394": [146, 400], "027925376": [146, 400], "0014248289": [146, 400], "009342308": [146, 400], "0017247093": [146, 400], "023596942": [146, 400], "004709234": [146, 400], "037369233": [146, 400], "016082479": [146, 400], "0011963486": [146, 400], "00222451": [146, 400], "014165782": [146, 400], "0014414889": [146, 400], "0058865426": [146, 400], "2633766e": [146, 400], "012274472": [146, 400], "011328817": [146, 400], "0020372833": [146, 400], "0013026553": [146, 400], "00635937": [146, 400], "00651169": [146, 400], "0024672705": [146, 400], "0026640175": [146, 400], "0033669118": [146, 400], "0074763848": [146, 400], "311968e": [146, 400], "023444623": [146, 400], "017656455": [146, 400], "0065243836": [146, 400], "021832567": [146, 400], "02320345": [146, 400], "015092397": [146, 400], "034119733": [146, 400], "025983294": [146, 400], "021324834": [146, 400], "015663598": [146, 400], "00417294": [146, 400], "014965463": [146, 400], "014203862": [146, 400], "0074319583": [146, 400], "007381185": [146, 400], "0035446188": [146, 400], "009310574": [146, 400], "02562788": [146, 400], "01101783": [146, 400], "009050361": [146, 400], "010484709": [146, 400], "005835769": [146, 400], "0036620323": [146, 400], "0055565154": [146, 400], "028712364": [146, 400], "033586614": [146, 400], "027087616": [146, 400], "019509684": [146, 400], "005166195": [146, 400], "020042805": [146, 400], "019903177": [146, 400], "010738577": [146, 400], "038816273": [146, 400], "014990849": [146, 400], "025412092": [146, 400], "030464048": [146, 400], "009158255": [146, 400], "046609994": [146, 400], "9095457e": [146, 400], "0016675893": [146, 400], "012921833": [146, 400], "2828116e": [146, 400], "0033288319": [146, 400], "10784273": [146, 400], "022898808": [146, 400], "020563232": [146, 400], "020487072": [146, 400], "0063117696": [146, 400], "005299475": [146, 400], "013442261": [146, 400], "0112590045": [146, 400], "015282797": [146, 400], "013581888": [146, 400], "023723876": [146, 400], "00847916": [146, 400], "025221692": [146, 400], "028686978": [146, 400], "8655227e": [146, 400], "005169368": [146, 400], "0765446e": [146, 400], "011436711": [146, 400], "004963101": [146, 400], "0067592105": [146, 400], "007527158": [146, 400], "029854767": [146, 400], "0072098244": [146, 400], "011246311": [146, 400], "009945242": [146, 400], "017326428": [146, 400], "004052353": [146, 400], "011684231": [146, 400], "311375e": [146, 400], "026986068": [146, 400], "012801247": [146, 400], "0023815904": [146, 400], "047600072": [146, 400], "006886144": [146, 400], "004464887": [146, 400], "9809546e": [146, 400], "018684616": [146, 400], "022924196": [146, 400], "0070575043": [146, 400], "0037730993": [146, 400], "025830973": [146, 400], "029651672": [146, 400], "0046140337": [146, 400], "041710358": [146, 400], "0058960626": [146, 400], "0018706829": [146, 400], "0065878504": [146, 400], "0067338236": [146, 400], "0011431951": [146, 400], "020233205": [146, 400], "008218946": [146, 400], "015930157": [146, 400], "0024022171": [146, 400], "0051439814": [146, 400], "0120777255": [146, 400], "00895516": [146, 400], "010116602": [146, 400], "038638566": [146, 400], "0056231553": [146, 400], "840722e": [146, 400], "009754842": [146, 400], "0074256114": [146, 400], "0011773085": [146, 400], "7314436e": [146, 400], "02014435": [146, 400], "010186416": [146, 400], "0067211306": [146, 400], "015828611": [146, 400], "0043665133": [146, 400], "0112526575": [146, 400], "031073328": [146, 400], "018126108": [146, 400], "014432343": [146, 400], "0021118566": [146, 400], "017389894": [146, 400], "023635022": [146, 400], "0062736897": [146, 400], "040187154": [146, 400], "006905184": [146, 400], "0068163304": [146, 400], "0087838005": [146, 400], "010072175": [146, 400], "00832684": [146, 400], "01061799": [146, 400], "01268066": [146, 400], "0137088215": [146, 400], "007926999": [146, 400], "01711064": [146, 400], "00885996": [146, 400], "015422424": [146, 400], "0052011013": [146, 400], "022327607": [146, 400], "0092280675": [146, 400], "022251448": [146, 400], "0045251804": [146, 400], "5886433e": [146, 400], "020360138": [146, 400], "021870647": [146, 400], "013251861": [146, 400], "027595349": [146, 400], "01094167": [146, 400], "011550951": [146, 400], "0033034452": [146, 400], "026072146": [146, 400], "030032473": [146, 400], "00411582": [146, 400], "012185619": [146, 400], "0096215615": [146, 400], "002618004": [146, 400], "006575157": [146, 400], "03675995": [146, 400], "010986097": [146, 400], "023673104": [146, 400], "011900018": [146, 400], "016044399": [146, 400], "0040206197": [146, 400], "018722696": [146, 400], "0038873393": [146, 400], "011163804": [146, 400], "01919235": [146, 400], "015790531": [146, 400], "0013692954": [146, 400], "011836552": [146, 400], "005096381": [146, 400], "031200262": [146, 400], "0358968": [146, 400], "009126521": [146, 400], "013696128": [146, 400], "014711596": [146, 400], "018608455": [146, 400], "03922246": [146, 400], "0179484": [146, 400], "0069178776": [146, 400], "010909937": [146, 400], "013569194": [146, 400], "019839711": [146, 400], "024447398": [146, 400], "01086551": [146, 400], "010294309": [146, 400], "024726652": [146, 400], "016679065": [146, 400], "0013145554": [146, 400], "004617207": [146, 400], "004690194": [146, 400], "013315327": [146, 400], "0112653505": [146, 400], "0016009491": [146, 400], "003998406": [146, 400], "025272466": [146, 400], "0030051514": [146, 400], "007869879": [146, 400], "031251036": [146, 400], "005375635": [146, 400], "0046203807": [146, 400], "0030099114": [146, 400], "0071273176": [146, 400], "012020606": [146, 400], "016285572": [146, 400], "033865865": [146, 400], "04290353": [146, 400], "009107481": [146, 400], "007400225": [146, 400], "018253041": [146, 400], "016704453": [146, 400], "003957153": [146, 400], "022644943": [146, 400], "0074446513": [146, 400], "012122152": [146, 400], "0013796088": [146, 400], "019014644": [146, 400], "026909908": [146, 400], "003035298": [146, 400], "012153885": [146, 400], "020499766": [146, 400], "006010303": [146, 400], "004026966": [146, 400], "3466855e": [146, 400], "001078935": [146, 400], "0051725414": [146, 400], "0014906756": [146, 400], "009526362": [146, 400], "016310958": [146, 400], "010357776": [146, 400], "0145338895": [146, 400], "015993625": [146, 400], "025259772": [146, 400], "036937658": [146, 400], "0044014202": [146, 400], "008713987": [146, 400], "003931766": [146, 400], "0053597684": [146, 400], "02797615": [146, 400], "020093577": [146, 400], "004550567": [146, 400], "024434704": [146, 400], "0029956312": [146, 400], "6632223e": [146, 400], "51248e": [146, 400], "028915457": [146, 400], "023470009": [146, 400], "008675907": [146, 400], "014013462": [146, 400], "0031527115": [146, 400], "0018865496": [146, 400], "0033986452": [146, 400], "040974144": [146, 400], "002589444": [146, 400], "0018516429": [146, 400], "049504075": [146, 400], "00884092": [146, 400], "004541047": [146, 400], "014076929": [146, 400], "015473197": [146, 400], "0027211376": [146, 400], "031327195": [146, 400], "041126464": [146, 400], "018595763": [146, 400], "0104593225": [146, 400], "01938275": [146, 400], "0027592175": [146, 400], "setenableoutputlog": [147, 149, 231, 402, 485, 510], "setevaluationlogextend": [147, 149, 402], "setoutputlogspath": [147, 149, 152, 154, 231, 402, 408, 485, 510], "assum": [149, 402], "getniter": [150, 151, 193, 194, 405, 448], "niter": [150, 151, 193, 194, 405, 448], "poscol": [150, 151, 193, 194, 246, 405, 448, 500], "setiter": [150, 151, 405], "setposcolumn": [150, 151, 193, 194, 405, 448], "member": [151, 237, 405, 492], "helper": [151, 160, 194, 201, 223, 248, 249, 250, 255, 405, 413, 448, 454, 477, 503, 504, 505, 517, 520], "datasetpath": [151, 405], "pierr": [151, 248, 405, 503], "vinken": [151, 248, 405, 503], "34": [151, 248, 250, 405, 503, 505], "md": [151, 240, 244, 248, 405, 499, 503], "vb": [151, 246, 248, 405, 500, 503, 520], "41": [151, 153, 248, 250, 405, 407, 503, 505], "43": [151, 153, 248, 250, 405, 407, 503, 505], "dt": [151, 248, 249, 405, 503, 504, 520], "49": [151, 248, 405, 503], "anc": [151, 248, 405, 503, 520], "trainingperceptrondf": [151, 405], "trainedpo": [151, 405], "cd": [151, 246, 248, 405, 500, 503], "pos_anc": [151, 405], "25": [151, 153, 248, 250, 405, 407, 503, 505], "33": [151, 242, 250, 405, 497, 505], "detectlist": [152, 153, 407], "setcustombound": [152, 153, 154, 407, 408], "setcustomboundsstrategi": [152, 153, 407], "setdetectlist": [152, 153, 407], "setexplodesent": [152, 153, 154, 407, 408], "setsplitlength": [152, 153, 154, 407, 408], "setuseabbrevi": [152, 153, 407], "setusecustomboundsonli": [152, 153, 154, 407, 408], "custombound": [152, 153, 154, 407, 408], "customboundsstrategi": [152, 153, 407], "explodesent": [152, 153, 154, 246, 247, 407, 408, 500, 501], "splitlength": [152, 153, 154, 407, 408], "useabbrevi": [152, 153, 407], "usecustomboundsonli": [152, 153, 154, 407, 408], "epochsnumb": [152, 154, 408], "impossiblepenultim": [152, 154, 408], "modelarchitectur": [152, 154, 408], "setepochsnumb": [152, 154, 408], "setimpossiblepenultim": [152, 154, 408], "ii": [153, 407], "abbrevi": [153, 407], "period": [153, 407], "geo": [153, 407], "1026": [153, 407], "253": [153, 407], "553": [153, 407], "ellipsi": [153, 407], "quotat": [153, 407], "mark": [153, 154, 194, 407, 408, 448], "exclam": [153, 407], "breaker": [153, 407], "pragmaticcontentformatt": [153, 407], "explicitli": [153, 154, 185, 223, 407, 408, 439, 477, 514], "prepend": [153, 197, 407, 450], "break": [153, 170, 233, 235, 407, 424, 488], "append": [153, 181, 234, 407, 434, 489, 514], "forcibli": [153, 154, 407, 408], "99999": [153, 154, 191, 407, 408, 445], "nhow": [153, 407], "third": [153, 185, 230, 246, 255, 407, 439, 486, 500], "sentencedetectordl": [154, 168, 312, 408, 422], "imposs": [154, 194, 408, 448], "penultim": [154, 408], "eo": [154, 408], "stefan": [154, 408], "schweter": [154, 408], "sajawel": [154, 408], "ahm": [154, 408], "broken": [154, 233, 234, 408, 488], "moder": [154, 408], "lack": [154, 408], "easier": [154, 200, 408, 453, 516, 520], "polit": [154, 408], "successor": [154, 408], "great": [154, 408], "heritag": [154, 176, 408, 430], "bequeath": [154, 408], "nelson": [154, 408], "mandela": [154, 408], "epochs_numb": [154, 408], "impossible_penultim": [154, 408], "model_architectur": [154, 408], "output_logs_path": [154, 408], "validation_split": [154, 408], "sentencedl": [154, 408], "sentencesdl": [154, 408], "helen": [154, 408], "peopl": [154, 408], "decrementmultipli": [155, 156, 410], "enablescor": [155, 156, 410], "incrementmultipli": [155, 156, 410], "negativemultipli": [155, 156, 410], "positivemultipli": [155, 156, 410], "reversemultipli": [155, 156, 410], "featurelimit": [155, 157, 411], "importantfeatureratio": [155, 157, 411], "prunecorpu": [155, 157, 411], "sentimentcol": [155, 157, 411], "setprunecorpu": [155, 157, 411], "setsentimentcol": [155, 157, 411], "unimportantfeaturestep": [155, 157, 411], "els": [156, 207, 410, 461], "cool": [156, 410], "superb": [156, 410], "uninspir": [156, 410], "sentimentscor": [156, 410], "nice": [156, 231, 410, 485, 510], "multipli": 156, "decrement": 156, "increment": [156, 190, 444], "revert": 156, "entri": [156, 198, 206, 238, 410, 451, 460, 493], "sttr": [156, 410], "sda": [156, 157, 377, 410, 411], "pragmat": [156, 410], "viveknsenti": [157, 411], "analys": [157, 411], "vivek": [157, 411], "narayanan": [157, 411], "give": [157, 411], "transit": [157, 181, 411, 434], "unfrequ": [157, 411], "scope": [157, 411], "naiv": [157, 411], "bay": [157, 411], "vivekn": [157, 411], "train_senti": [157, 411], "result_senti": [157, 411], "final_senti": [157, 411], "cast": [157, 196, 411, 449], "horribl": [157, 411], "go": [157, 411, 514], "again": [157, 189, 411, 443], "anyon": [157, 411], "protagonist": [157, 411], "music": [157, 411], "boost": 157, "dirt": 157, "lookahead": 157, "unimport": 157, "sentiment_vivekn": [157, 411], "setcach": [158, 161, 414], "usecach": [158, 161, 177, 414, 431], "setsrclang": [158, 167, 170, 421, 424], "settgtlang": [158, 167, 170, 421, 424], "srclang": [158, 167, 170, 421, 424], "tgtlang": [158, 167, 170, 421, 424], "langid": [158, 168, 312, 422], "setlangid": [158, 168, 422], "setmaxinputlength": [158, 168, 312, 422], "maxnewtoken": [158, 177, 431], "setmaxnewtoken": [158, 177, 431], "setstopateo": [158, 177, 431], "setusecach": [158, 177, 431], "stopateo": [158, 177, 431], "settabl": [159, 160, 412, 413], "explan": [159, 160, 181, 412, 413, 434, 517], "phi3": [159, 173, 412, 427], "5_mini_4k_instruct_q4_gguf": [159, 412], "autoggufmodeltest": [159, 412], "nthreadsdraft": [159, 160, 412, 413], "draft": [159, 160, 218, 412, 413, 472], "nthreadsbatchdraft": [159, 160, 412, 413], "ndraft": [159, 160, 211, 218, 412, 413, 472], "specul": [159, 160, 218, 412, 413, 472], "psplit": [159, 160, 412, 413], "ngpulayersdraft": [159, 160, 211, 218, 412, 413, 472], "modeldraft": [159, 160, 211, 218, 412, 413, 472], "modelalia": [159, 160, 211, 218, 412, 413, 472], "lookupcachestaticfilepath": [159, 160, 412, 413], "updat": [159, 160, 181, 412, 413, 434], "lookupcachedynamicfilepath": [159, 160, 412, 413], "inputprefixbo": [159, 160, 412, 413], "preced": [159, 160, 412, 413, 514], "systemprompt": [159, 160, 211, 218, 412, 413, 472], "chattempl": [159, 160, 195, 207, 211, 218, 412, 413, 461, 472], "chat": [159, 160, 163, 165, 166, 169, 172, 173, 175, 207, 218, 412, 413, 416, 419, 420, 423, 426, 427, 429, 461, 472], "templat": [159, 160, 207, 218, 412, 413, 461, 472], "inputprefix": [159, 160, 211, 218, 412, 413, 472], "inputsuffix": [159, 160, 211, 218, 412, 413, 472], "infil": [159, 160, 218, 412, 413, 472], "cacheprompt": [159, 160, 211, 218, 412, 413, 472], "rememb": [159, 160, 181, 218, 412, 413, 434, 472], "reprocess": [159, 160, 218, 412, 413, 472], "npredict": [159, 160, 211, 218, 412, 413, 472], "minp": [159, 160, 211, 218, 412, 413, 472], "min": [159, 160, 181, 218, 412, 413, 434, 472], "tfsz": [159, 160, 211, 218, 412, 413, 472], "tail": [159, 160, 218, 412, 413, 472], "free": [159, 160, 168, 218, 312, 412, 413, 422, 472], "typicalp": [159, 160, 211, 218, 412, 413, 472], "typic": [159, 160, 164, 218, 235, 412, 413, 417, 472, 490], "dynatemprang": [159, 160, 218, 412, 413], "dynatempexpon": [159, 160, 218, 412, 413], "expon": [159, 160, 218, 412, 413, 472], "repeatlastn": [159, 160, 211, 218, 412, 413, 472], "repeatpenalti": [159, 160, 211, 218, 412, 413, 472], "mirostat": [159, 160, 211, 218, 412, 413, 472], "mirostattau": [159, 160, 211, 218, 412, 413, 472], "entropi": [159, 160, 218, 412, 413, 472], "tau": [159, 160, 218, 412, 413, 472], "mirostateta": [159, 160, 211, 218, 412, 413, 472], "eta": [159, 160, 218, 412, 413, 472], "penalizenl": [159, 160, 211, 218, 412, 413, 472], "newlin": [159, 160, 181, 218, 412, 413, 434, 472], "nkeep": [159, 160, 211, 218, 412, 413, 472], "rng": [159, 160, 218, 412, 413, 472], "nprob": [159, 160, 211, 218, 412, 413, 472], "minkeep": [159, 160, 211, 218, 412, 413, 472], "sampler": [159, 160, 211, 218, 412, 413, 472], "least": [159, 160, 194, 218, 412, 413, 448, 472], "bnf": [159, 160, 218, 412, 413, 472], "penaltyprompt": [159, 160, 211, 218, 412, 413, 472], "ignoreeo": [159, 160, 211, 218, 412, 413, 472], "impli": [159, 160, 218, 412, 413, 472], "inf": [159, 160, 218, 412, 413, 472], "disabletokenid": [159, 160, 211, 218, 412, 413, 472], "stopstr": [159, 160, 211, 218, 412, 413, 472], "usechattempl": [159, 160, 211, 218, 412, 413, 472], "setnpredict": [159, 160, 211, 218, 412, 413, 472], "setpenalizenl": [159, 160, 211, 218, 412, 413, 472], "78": [159, 173, 248, 412, 427, 503], "ingest": [160, 413], "At": [160, 207, 233, 413, 461, 488, 515], "hasllamacppinferenceproperti": [160, 413], "hasllamacppmodelproperti": [160, 413], "preprocess": [160, 231, 233, 413, 485, 488, 510], "loadimagesasbyt": [160, 195, 204, 413, 457], "llava_v1": [160, 413], "5_7b_q4_0_gguf": [160, 413], "autoggufvisionmodeltest": [160, 413], "caption_docu": [160, 413], "imagespath": [160, 413], "setminkeep": [160, 211, 218, 413, 472], "setminp": [160, 211, 218, 413, 472], "setnprob": [160, 211, 218, 413, 472], "setrepeatlastn": [160, 211, 218, 413, 472], "setrepeatpenalti": [160, 211, 218, 413, 472], "setstopstr": [160, 211, 218, 413, 472], "settfsz": [160, 211, 218, 413, 472], "settypicalp": [160, 211, 218, 413, 472], "depict": [160, 413], "ornat": [160, 413], "ceil": [160, 413], "decor": [160, 413], "wall": [160, 413], "chair": [160, 413], "throughout": [160, 413], "cushion": [160, 413], "surfac": [160, 413], "possibli": [160, 413], "bed": [160, 413], "sofa": [160, 413], "scene": [160, 413], "sleep": [160, 413], "hold": [160, 205, 413, 459, 518], "swim": [160, 413], "aquarium": [160, 413], "seem": [160, 413], "babi": [160, 413], "adult": [160, 413], "young": [160, 413], "gather": [160, 237, 413, 492], "neck": [160, 413], "grass": [160, 413], "speci": [160, 413], "held": [160, 413], "black": [160, 413], "white": [160, 181, 413, 434], "chest": [160, 413], "someth": [160, 413], "anim": [160, 413], "vicin": [160, 413], "collar": [160, 413], "stare": [160, 413], "front": [160, 413], "owner": [160, 413], "comfort": [160, 413], "seat": [160, 413], "yellow": [160, 413], "wheel": [160, 413], "tire": [160, 413], "park": [160, 413], "bull": [160, 413], "horn": [160, 413], "modelpath": [160, 413], "mmprojpath": [160, 413], "captur": [161, 179, 414, 432], "past": [161, 168, 238, 312, 414, 422, 493], "incorpor": [161, 173, 414, 427], "versatil": [161, 169, 176, 414, 423, 430], "valuabl": [161, 176, 414, 430], "summari": [161, 163, 164, 165, 167, 169, 170, 171, 172, 173, 175, 177, 414, 416, 417, 419, 421, 423, 424, 425, 426, 427, 429, 431], "distilbart_xsum_12_6": [161, 414], "barttestspec": [161, 414], "ab": [161, 414], "1910": [161, 414], "13461": [161, 414], "pytorch": [161, 167, 170, 414, 421, 424], "fairseq": [161, 167, 170, 414, 421, 424], "nois": [161, 414], "reconstruct": [161, 210, 414, 464], "tranform": [161, 414], "randomli": [161, 414], "dialogu": [161, 165, 166, 172, 414, 419, 420, 426], "roug": [161, 414], "bleu": [161, 167, 170, 414, 421, 424], "ablat": [161, 414], "influenc": [161, 181, 414, 434], "rich": [161, 177, 414, 431], "rise": [161, 177, 414, 431], "methodologi": [161, 177, 414, 431], "landscap": [161, 177, 414, 431], "systemat": [161, 177, 414, 431], "dozen": [161, 177, 414, 431], "insight": [161, 177, 414, 431], "coloss": [161, 177, 414, 431], "facilit": [161, 177, 414, 431], "use_cach": [161, 414], "command": [162, 415], "c4ai": [162, 415], "highli": [162, 175, 415, 429], "rag": [162, 179, 415, 432], "c4ai_command_r_v01_int4": [162, 415], "bos_token": [162, 207, 415, 461], "start_of_turn_token": [162, 415], "user_token": [162, 415], "end_of_turn_token": [162, 415], "chatbot_token": [162, 415], "excit": [162, 165, 415, 419], "whatev": [162, 415], "minicpm": [163, 416], "unveil": [163, 416], "2b": [163, 416], "4b": [163, 175, 416, 429], "close": [163, 165, 166, 171, 172, 416, 419, 420, 425, 426], "mistral": [163, 169, 416, 423], "7b": [163, 165, 169, 171, 172, 173, 175, 176, 416, 419, 423, 425, 426, 427, 429, 430], "llama2": [163, 165, 416, 419], "13b": [163, 165, 169, 175, 176, 416, 419, 423, 429, 430], "mpt": [163, 416], "30b": [163, 416], "falcon": [163, 416], "40b": [163, 416], "mtbench": [163, 416], "closest": [163, 416], "70b": [163, 165, 166, 416, 419, 420], "vicuna": [163, 416], "33b": [163, 176, 416, 430], "v0": [163, 169, 416, 423], "zephyr": [163, 416], "dpo": [163, 416], "multimodel": [163, 416], "phi": [163, 172, 173, 174, 416, 426, 427, 428], "6b": [163, 416], "qwen": [163, 175, 416, 429], "vl": [163, 416], "deploi": [163, 168, 173, 312, 416, 422, 427, 511], "smartphon": [163, 416], "verbal": [163, 416], "cpm": [163, 416], "mini_cpm_2b_8bit": [163, 416], "shengdinghu": [163, 416], "notion": [163, 416], "d4d3a8c426424654a4e80e42a711cb20": [163, 416], "openbmb": [163, 416], "leonardo": [163, 164, 165, 169, 171, 172, 173, 175, 416, 417, 419, 423, 425, 426, 427, 429], "student": [163, 171, 172, 173, 175, 416, 425, 426, 427, 429], "california": [163, 171, 172, 173, 175, 416, 425, 426, 427, 429], "lo": [163, 416], "passion": [163, 171, 172, 173, 175, 416, 425, 426, 427, 429], "cultur": [163, 416], "plai": [163, 416], "basketbal": [163, 416], "caus": [164, 191, 417, 445], "goal": [164, 170, 194, 417, 424, 448], "direct": [164, 167, 170, 173, 417, 421, 424, 427], "10x": [164, 417], "synthet": [164, 172, 173, 417, 426, 427], "unpreced": [164, 417], "prime": [164, 417], "lengthi": [164, 417], "benefit": [164, 417], "suffici": [164, 417], "learner": [164, 417], "taskspecif": [164, 417], "webpag": [164, 233, 417, 488, 511], "webtext": [164, 417], "coqa": [164, 417], "exceed": [164, 166, 417, 420], "127": [164, 417], "fashion": [164, 179, 417, 432], "5b": [164, 175, 417, 429], "underfit": [164, 417], "reflect": [164, 167, 417, 421], "paragraph": [164, 181, 233, 234, 244, 417, 434, 488, 499], "promis": [164, 417], "1776": [164, 165, 417, 419], "came": [164, 165, 417, 419], "kingdom": [164, 165, 417, 419], "4k": [165, 173, 419, 427], "reinforc": [165, 166, 172, 175, 419, 420, 426, 429], "feedback": [165, 166, 172, 175, 419, 420, 426, 429], "rlhf": [165, 166, 175, 419, 420, 429], "safeti": [165, 166, 170, 172, 173, 419, 420, 424, 426, 427], "chatgpt": [165, 419], "llam2": [165, 172, 419, 426], "facebookresearch": [165, 166, 419, 420], "substitut": [165, 172, 419, 426], "llama_2_7b_chat_hf_int4": [165, 419], "cut": [166, 207, 420, 461], "8b": [166, 175, 420, 429], "expans": [166, 420], "offer": [166, 169, 171, 420, 423, 425, 514, 516, 519], "known": [166, 420], "llama3": [166, 420], "llama_3_7b_instruct_hf_int4": [166, 420], "latest": [166, 420], "meta": [166, 231, 420, 485, 512], "commerci": [166, 168, 171, 312, 420, 422, 425], "aim": [166, 170, 179, 420, 424, 432], "foster": [166, 420], "collabor": [166, 176, 420, 430], "minion": [166, 420], "chatbot": [166, 420], "respond": [166, 207, 420, 461], "speak": [166, 420], "oooh": [166, 420], "yeah": [166, 420], "bana": [166, 420], "na": [166, 420], "m2m100": [167, 421], "seq": [167, 170, 421, 424], "900": [167, 421], "m2m100_418m": [167, 421], "beyond": [167, 170, 421, 424], "worldwid": [167, 421], "spars": [167, 170, 421, 424], "focu": [167, 170, 173, 421, 424, 427], "wmt": [167, 421], "m2m": [167, 421], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [167, 170, 421, 424], "life": [167, 170, 421, 424], "chocol": [167, 170, 421, 424], "marian": [168, 312, 422], "mainli": [168, 312, 422], "academ": [168, 173, 312, 422, 427], "notabl": [168, 169, 312, 422, 423], "edinburgh": [168, 312, 422], "adam": [168, 312, 422], "mickiewicz": [168, 312, 422], "pozna\u0144": [168, 312, 422], "contributor": [168, 312, 422], "mariannmt": [168, 312, 422], "behind": [168, 170, 171, 172, 175, 312, 422, 424, 425, 426, 429], "opus_mt_en_fr": [168, 312, 422], "differenti": [168, 312, 422], "toolkit": [168, 312, 422], "capit": [168, 181, 235, 312, 422, 434], "quell": [168, 312, 422], "capital": [168, 312, 422], "devrait": [168, 312, 422], "savoir": [168, 312, 422], "fran\u00e7ai": [168, 312, 422], "34b": [169, 176, 423, 430], "strike": [169, 423], "balanc": [169, 218, 423, 472], "rival": [169, 173, 423, 427], "codellama": [169, 176, 423, 430], "latter": [169, 423], "gqa": [169, 175, 423, 429], "quicker": [169, 423], "compromis": [169, 423], "streamlin": [169, 231, 423, 485, 510], "smoother": [169, 423], "slide": [169, 175, 234, 244, 423, 429, 489, 499], "swa": [169, 175, 423, 429], "reliabl": [169, 231, 423, 485, 510], "mistral_7b": [169, 423], "mistralai": [169, 423], "coupl": [169, 423], "da": [169, 423], "vinci": [169, 423], "invent": [169, 423], "microscop": [169, 423], "No": [169, 170, 218, 247, 423, 424, 472, 501, 513], "late": [169, 423], "16th": [169, 423], "nllb": [170, 424], "nllb_distilled_600m_8int": [170, 424], "driven": [170, 424], "erad": [170, 424], "barrier": [170, 424], "solidifi": [170, 424], "artifici": [170, 171, 172, 173, 175, 424, 425, 426, 427, 429], "intellig": [170, 171, 172, 173, 175, 424, 425, 426, 427, 429], "effort": [170, 171, 424, 425], "coalesc": [170, 424], "leav": [170, 424], "vast": [170, 424], "major": [170, 424], "mostli": [170, 424], "safe": [170, 424], "ethic": [170, 424], "consider": [170, 424], "exploratori": [170, 424], "interview": [170, 424], "nativ": [170, 424, 511], "speaker": [170, 233, 234, 424, 488, 489], "narrow": [170, 424], "gate": [170, 171, 424, 425], "expert": [170, 424], "counteract": [170, 424], "overfit": [170, 424], "flore": [170, 424], "assess": [170, 172, 173, 424, 426, 427], "groundwork": [170, 424], "realiz": [170, 424], "zho_han": [170, 424], "eng_latn": [170, 424], "olmo": [171, 425], "dolma": [171, 425], "soon": [171, 425], "olmo_1b_int4": [171, 425], "lm": [171, 181, 425, 434], "surg": [171, 425], "interfac": [171, 231, 233, 425, 485, 488, 510, 518], "undisclos": [171, 425], "scientif": [171, 176, 425, 430], "risk": [171, 425], "believ": [171, 425], "hope": [171, 425], "empow": [171, 425], "strengthen": [171, 425], "wave": [171, 425], "innov": [171, 173, 425, 427], "skill": [171, 172, 173, 175, 425, 426, 427, 429], "textbook": [172, 426], "augment": [172, 426], "websit": [172, 173, 426, 427], "educ": [172, 426], "sens": [172, 173, 426, 427, 519], "showcas": [172, 173, 175, 426, 427, 429], "nearli": [172, 426], "hasn": [172, 426], "intent": [172, 208, 426, 462], "craft": [172, 426], "vital": [172, 426], "societ": [172, 426], "phi2": [172, 426], "medium": [173, 427], "14b": [173, 174, 175, 427, 428, 429], "underw": [173, 427], "post": [173, 427], "math": [173, 175, 176, 427, 429, 430], "phi_3_mini_128k_instruct": [173, 427], "big": [173, 233, 244, 427, 488, 499], "trillion": [173, 176, 427, 430], "mixtral": [173, 427], "8x7b": [173, 427], "69": [173, 248, 427, 503], "mmlu": [173, 427], "mt": [173, 427], "bench": [173, 427], "enough": [173, 427], "compos": [173, 427], "heavili": [173, 427], "8t": [173, 174, 427, 428], "moreov": [173, 427], "2412": [174, 428], "08905": [174, 428], "phi4": [174, 428], "qwen1": [175, 429], "72b": [175, 429], "stabl": [175, 429], "32k": [175, 429], "swiglu": [175, 429], "qkv": [175, 429], "qwenlm": [175, 429], "revolution": [175, 429], "thought": [175, 429], "instal": [175, 231, 255, 429, 485, 512], "encompass": [175, 429], "distinct": [175, 429], "multitud": [175, 429], "possess": [175, 429], "plan": [175, 194, 429, 448], "impress": [175, 429], "bigger": [175, 429], "fall": [175, 429], "qwen_7": [175, 429], "5b_chat": [175, 429], "starcoder2": [176, 430], "predecessor": [176, 430], "starcoder2transform": [176, 430], "bigcod": [176, 430], "starcod": [176, 430], "partnership": [176, 430], "swh": [176, 430], "stack": [176, 430], "digit": [176, 430], "archiv": [176, 430], "619": [176, 430], "15b": [176, 430], "thoroughli": [176, 430], "starcoderbas": [176, 430], "twice": [176, 430], "although": [176, 430], "deepseekcod": [176, 430], "openrail": [176, 430], "transpar": [176, 430], "regard": [176, 217, 430, 471], "swhid": [176, 430], "def": [176, 223, 430, 477], "t5": [177, 431], "reconsid": [177, 431], "hyper": [177, 431], "t5_small": [177, 431], "encount": [177, 431], "aggregationmethod": [178, 179, 432], "asretriev": [178, 179, 432], "asretrieverqueri": [178, 179, 432], "bucketlength": [178, 179, 432], "identityrank": [178, 179, 432], "numhasht": [178, 179, 432], "numberofneighbour": [178, 179, 432], "setaggregationmethod": [178, 179, 432], "setbucketlength": [178, 179, 432], "setidentityrank": [178, 179, 432], "setnumhasht": [178, 179, 432], "setnumberofneighbour": [178, 179, 432], "setsimilaritymethod": [178, 179, 432], "setvisibledist": [178, 179, 432], "similaritymethod": [178, 179, 432], "visibledist": [178, 179, 432], "extractnearestneighbor": [178, 179, 432], "getoutputcol": [178, 179, 195, 196, 198, 199, 200, 204, 206, 211, 214, 432, 449, 451, 452, 453, 457, 460, 467], "outputcol": [178, 179, 195, 196, 198, 199, 200, 201, 204, 206, 207, 211, 214, 235, 240, 242, 243, 432, 449, 451, 452, 453, 454, 457, 460, 461, 467, 490, 497, 498], "setextractnearestneighbor": [178, 179, 432], "documentsimilarityrank": [179, 432], "lsh": [179, 432], "lib": [179, 432], "execut": [179, 205, 218, 342, 432, 459, 472, 514, 518], "ranker": [179, 432], "jupyt": [179, 231, 254, 432, 485, 510], "doc_similarity_rank": [179, 211, 215, 432, 468], "enablecach": [179, 211, 218, 432, 472], "rdd": [179, 218, 432, 472], "neighbour": [179, 432], "brp": [179, 432], "bucket": [179, 432], "euclidean": [179, 432], "hash": [179, 432], "ident": [179, 432], "debug": [179, 432], "document_similarity_ranker_finish": [179, 432], "finished_doc_similarity_rankings_id": [179, 432], "finished_doc_similarity_rankings_neighbor": [179, 432], "docsimrankerpipelin": [179, 432], "1510101612": [179, 432], "1634839239": [179, 432], "12448559591306324": [179, 432], "612640902": [179, 432], "1274183715": [179, 432], "1220122862046063": [179, 432], "1320876223": [179, 432], "1293373212": [179, 432], "17848855164122393": [179, 432], "1548374770": [179, 432], "1719102856": [179, 432], "23297156732534166": [179, 432], "wise": [179, 432], "inclus": [179, 432], "visibl": [179, 432], "addregexclass": [180, 181, 434], "addvocabclass": [180, 181, 434], "casestrategi": [180, 181, 434], "classcount": [180, 181, 434], "compoundcount": [180, 181, 434], "errorthreshold": [180, 181, 434], "finalr": [180, 181, 434], "initialr": [180, 181, 434], "languagemodelclass": [180, 181, 434], "maxcandid": [180, 181, 434], "maxsentlen": [180, 181, 434], "maxwindowlen": [180, 181, 434], "setcasestrategi": [180, 181, 434], "setclasscount": [180, 181, 434], "setcompoundcount": [180, 181, 434], "setepoch": [180, 181, 434], "seterrorthreshold": [180, 181, 434], "setfinalr": [180, 181, 434], "setinitialr": [180, 181, 434], "setlanguagemodelclass": [180, 181, 434], "setmaxcandid": [180, 181, 434], "setmaxsentlen": [180, 181, 434], "setmaxwindowlen": [180, 181, 434], "settradeoff": [180, 181, 434], "setvalidationfract": [180, 181, 434], "setweighteddistpath": [180, 181, 434], "setwordmaxdist": [180, 181, 434], "tradeoff": [180, 181, 434], "validationfract": [180, 181, 434], "weighteddistpath": [180, 181, 434], "wordmaxdist": [180, 181, 434], "comparelowcas": [180, 181, 434], "correctsymbol": [180, 181, 434], "gamma": [180, 181, 434], "getwordclass": [180, 181, 434], "idsvocab": [180, 181, 434], "setclass": [180, 181, 434], "setcomparelowcas": [180, 181, 434], "setcorrectsymbol": [180, 181, 434], "setgamma": [180, 181, 434], "setidsvocab": [180, 181, 434], "setvocabfreq": [180, 181, 434], "setvocabid": [180, 181, 434], "setweight": [180, 181, 434], "updateregexclass": [180, 181, 434], "updatevocabclass": [180, 181, 434], "vocabfreq": [180, 181, 434], "vocabid": [180, 181, 434], "doublevari": [180, 182, 436], "dupslimit": [180, 182, 183, 436, 437], "frequencyprior": [180, 182, 436], "intersect": [180, 182, 436], "reductlimit": [180, 182, 436], "setdoublevari": [180, 182, 436], "setfrequencyprior": [180, 182, 436], "setshortcircuit": [180, 182, 436], "shortcircuit": [180, 182, 436], "vowelswaplimit": [180, 182, 436], "wordsizeignor": [180, 182, 436], "deletesthreshold": [180, 183, 437], "frequencythreshold": [180, 183, 193, 194, 437, 448], "maxeditdist": [180, 183, 437], "setdeletesthreshold": [180, 183, 437], "setfrequencythreshold": [180, 183, 193, 194, 437, 448], "setmaxeditdist": [180, 183, 437], "spell": [180, 181, 182, 183, 205, 210, 252, 377, 434, 435, 436, 437, 459, 464, 517, 518, 519], "contextspellcheck": [181, 434], "noisi": [181, 434], "surround": [181, 209, 434, 463], "edit": [181, 182, 183, 434, 436, 437], "subword": [181, 434], "checker": [181, 182, 183, 434, 436, 437, 517], "uppercas": [181, 434], "perplex": [181, 434], "nlm": [181, 434], "datapoint": [181, 434], "vocab": [181, 434], "compound": [181, 434], "levenshtein": [181, 182, 183, 434, 436, 437], "depth": [181, 434, 517], "spellcheck": [181, 182, 183, 434, 436, 437], "1650": [181, 434], "_name_": [181, 434], "userdist": [181, 434], "sentlen": [181, 434], "fraction": [181, 434], "dist": [181, 434], "spellcheck_dl": [181, 434], "decis": [181, 434], "usenewlin": [181, 434], "cold": [181, 434], "dreari": [181, 434], "smow": [181, 434], "norvigsweet": [182, 436], "norvig": [182, 436], "bayesian": [182, 436], "tokenpattern": [182, 436], "ham": [182, 436], "duplic": [182, 183, 436], "vowel": [182, 436], "corrector": [182, 436], "gummi": [182, 183, 436, 437], "gummic": [182, 183, 436, 437], "gummier": [182, 183, 436, 437], "gummiest": [182, 183, 436, 437], "gummifer": [182, 183, 436, 437], "basi": [182, 183, 436, 437], "sensitivti": 182, "token_pattern": [182, 183, 436, 437], "symmetr": [182, 183, 436, 437], "delet": [182, 183, 436, 437, 514], "damerau": [182, 183, 436, 437], "transpos": [182, 183, 436, 437], "spellcheck_norvig": [182, 436], "symspel": [182, 183, 436, 437], "somtim": [182, 436], "wrrite": [182, 183, 436, 437], "wordz": [182, 183, 436, 437], "erong": [182, 183, 436, 437], "sometim": [182, 183, 436, 437, 514], "wrong": [182, 183, 436, 437], "symmetricdelet": [183, 437], "teach": [183, 437], "patttern": [183, 437], "spellcheck_sd": [183, 437], "spmetim": [183, 437], "employ": [184, 438], "mllib": [185, 439, 511], "stopwordsremov": [185, 439], "cleantoken": [185, 199, 210, 439, 452, 464], "stopwords_en": [185, 439], "forth": [185, 439], "defaultparamswrit": 186, "defaultparamsread": 186, "assertiondlapproach": [186, 440], "medicalnerapproach": [186, 440], "srt": [186, 440], "greaph": [186, 440], "infix": [187, 189, 191, 443, 445], "setinfix": [187, 189, 443], "setprefix": [187, 189, 443], "positionalmask": [187, 190, 444], "setpositionalmask": [187, 190, 444], "settolowercas": [187, 190, 193, 194, 444, 448], "tolowercas": [187, 190, 193, 194, 444, 448], "addcontextchar": [187, 191, 445], "addexcept": [187, 191, 445], "addinfixpattern": [187, 191, 445], "addsplitchar": [187, 191, 445], "casesensitiveexcept": [187, 191, 445], "contextchar": [187, 191, 445], "exceptionspath": [187, 191, 445], "getcasesensitiveexcept": [187, 191, 445], "getcontextchar": [187, 191, 445], "getexcept": [187, 191, 445], "getinfixpattern": [187, 191, 445], "getprefixpattern": [187, 191, 445], "getsplitchar": [187, 191, 445], "getsuffixpattern": [187, 191, 445], "infixpattern": [187, 191, 445], "prefixpattern": [187, 191, 445], "setcasesensitiveexcept": [187, 191, 445], "setexcept": [187, 191, 445], "setexceptionspath": [187, 191, 445], "setinfixpattern": [187, 191, 445], "setprefixpattern": [187, 191, 445], "setsplitchar": [187, 191, 445], "setsuffixpattern": [187, 191, 445], "settargetpattern": [187, 191, 445], "splitchar": [187, 191, 445], "suffixpattern": [187, 191, 445], "targetpattern": [187, 191, 445], "flatten": [188, 243, 441, 498], "artist": [188, 441], "benezar": [188, 441], "robert": [188, 441], "farendel": [188, 441], "graduat": [188, 441], "luca": [188, 441], "qam": [189, 443], "guarante": [190, 444], "flag": [190, 444], "eventu": [190, 444], "nthi": [190, 444], "tokenizedsent": [191, 445], "rulefactori": [191, 217, 445, 471], "grab": [191, 445], "sub": [191, 445], "won": [191, 445], "didn": [191, 445], "jane": [191, 445], "boyfriend": [191, 445], "piec": [191, 445], "token_rul": [191, 445], "factori": 191, "17": [192, 248, 250, 446, 503, 505], "ambiguitythreshold": [193, 194, 448], "enableregextoken": [193, 194, 448], "getambiguitythreshold": [193, 194, 448], "getfrequencythreshold": [193, 194, 448], "setambiguitythreshold": [193, 194, 448], "setenableregextoken": [193, 194, 448], "setniter": [193, 194, 448], "wordsegment": [194, 448], "korean": [194, 448], "japanes": [194, 448], "correspond": [194, 231, 242, 448, 485], "rr": [194, 448], "likewis": [194, 448], "themselv": [194, 448], "\u4e0a\u6d77": [194, 448], "\u8ba1\u5212": [194, 448], "\u5230": [194, 448], "\u672c": [194, 448], "\u4e16\u7eaa": [194, 448], "\u672b": [194, 448], "\u5b9e\u73b0": [194, 448], "\u4eba\u5747": [194, 448], "\u56fd\u5185": [194, 448], "\u751f\u4ea7": [194, 448], "\u603b\u503c": [194, 448], "\u4e94\u5343": [194, 448], "\u7f8e\u5143": [194, 448], "\u4e0a": [194, 448], "\u6d77": [194, 448], "\u8ba1": [194, 448], "\u5212": [194, 448], "\u4e16": [194, 448], "\u7eaa": [194, 448], "\u5b9e": [194, 448], "\u73b0": [194, 448], "\u4eba": [194, 448], "\u5747": [194, 448], "\u56fd": [194, 448], "\u5185": [194, 448], "\u751f": [194, 448], "\u4ea7": [194, 448], "\u603b": [194, 448], "ll\u503c": [194, 448], "\u4e94": [194, 448], "\u5343": [194, 448], "\u7f8e": [194, 448], "\u5143": [194, 448], "shanghai": [194, 448], "dollar": [194, 448], "capita": [194, 448], "gdp": [194, 448], "tip": [194, 448], "frame": [194, 448], "frequent": [194, 448], "xue": [194, 448], "nianwen": [194, 448], "volum": [194, 448], "februari": [194, 448], "aclweb": [194, 448], "aclanthologi": [194, 448], "o03": [194, 448], "4002": [194, 448], "chinese_train": [194, 448], "utf8": [194, 448], "\u5341": [194, 448], "\u56db": [194, 448], "\u4e0d": [194, 448], "\u662f": [194, 448], "trainingdataset": [194, 448], "plit": [194, 448], "words_seg": [194, 448], "wordseg_pku": [194, 448], "zh": [194, 448], "\u7136\u800c": [194, 448], "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": [194, 448], "\u9019\u6a23": [194, 448], "\u7684": [194, 448], "\u8655\u7406": [194, 448], "\u4e5f": [194, 448], "\u884d\u751f": [194, 448], "\u4e86": [194, 448], "\u4e00\u4e9b": [194, 448], "\u554f\u984c": [194, 448], "chunkcol": [195, 197, 450], "failonmiss": [195, 197, 450], "isarrai": [195, 197, 450], "setchunkcol": [195, 197, 450], "setfailonmiss": [195, 197, 450], "setisarrai": [195, 197, 450], "setstartcol": [195, 197, 450], "setstartcolbytokenindex": [195, 197, 450], "startcol": [195, 197, 450], "startcolbytokenindex": [195, 197, 450], "cleanupmod": [195, 198, 206, 451, 460], "idcol": [195, 198, 206, 451, 460], "metadatacol": [195, 198, 206, 451, 460], "setidcol": [195, 198, 206, 451, 460], "setmetadatacol": [195, 198, 206, 451, 460], "cleanannot": [195, 199, 200, 201, 452, 453, 454], "outputasvector": [195, 199, 452], "annotationsplitsymbol": [195, 200, 453], "includemetadata": [195, 200, 453], "outputasarrai": [195, 200, 201, 453, 454], "parseembeddingsvector": [195, 200, 453], "setannotationsplitsymbol": [195, 200, 453], "setincludemetadata": [195, 200, 453, 515], "setoutputasarrai": [195, 200, 201, 453, 454], "setparseembeddingsvector": [195, 200, 453], "setvaluesplitsymbol": [195, 200, 453], "valuesplitsymbol": [195, 200, 453], "settextcol": [195, 204, 457], "textcol": [195, 204, 246, 247, 457, 500, 501], "fullannot": [195, 205, 236, 237, 459, 492], "fullannotateimag": [195, 205, 236, 237, 459, 492], "getignoreunsupport": [195, 205, 459], "setignoreunsupport": [195, 205, 459], "addassist": [195, 207, 461], "setaddassist": [195, 207, 461], "setchattempl": [195, 207, 211, 218, 461, 472], "csvdelimit": [195, 209, 463], "escapecsvdelimit": [195, 209, 463], "setcsvdelimit": [195, 209, 463], "setescapecsvdelimit": [195, 209, 463], "inferschema": [196, 449], "librispeech_asr_dummy_clean_audio_array_parquet": [196, 449], "float_arrai": [196, 449], "stringtyp": [197, 223, 253, 450], "fail": [197, 342, 450], "chunkassembl": [197, 450], "cleanup": [198, 206, 451, 460], "inplac": [198, 206, 451, 460], "inplace_ful": [198, 206, 451, 460], "shrink_ful": [198, 206, 451, 460], "each_ful": [198, 206, 451, 460], "delete_ful": [198, 206, 451, 460], "usabl": [199, 452], "lda": [199, 452], "forest": [199, 452], "featurecol": [199, 452], "gloveembed": [199, 452], "finished_sentence_embed": [199, 452], "resultwiths": [199, 452], "1619900017976761": [199, 452], "045552998781204224": [199, 452], "03229299932718277": [199, 452], "685609996318": [199, 452], "42416998744010925": [199, 452], "1378999948501587": [199, 452], "5717899799346924": [199, 452], "5078899860382": [199, 452], "08621499687433243": [199, 452], "15772999823093414": [199, 452], "06067200005054474": [199, 452], "395359992980": [199, 452], "4970499873161316": [199, 452], "7164199948310852": [199, 452], "40119001269340515": [199, 452], "05761000141501": [199, 452], "08170200139284134": [199, 452], "7159299850463867": [199, 452], "20677000284194946": [199, 452], "0295659992843": [199, 452], "ouput": 199, "finishedresult": [201, 454], "java_obj": [202, 227, 229, 455, 481, 484], "javaobject": [202, 203, 229, 455, 456, 484], "abc": [202, 229], "classmethod": [204, 225, 457, 479], "png": [204, 457], "gif": [204, 457], "bmp": [204, 457], "parse_embed": [205, 237, 459, 492], "principl": [205, 459, 518], "everyth": [205, 459, 518, 519], "happi": [205, 459, 513, 515, 518, 519], "prp": [205, 247, 248, 459, 501, 503, 513, 518, 519, 520], "rb": [205, 248, 459, 503, 513, 518, 519, 520], "optional_target": [205, 237, 459, 492], "explain_document_pipelin": [205, 223, 237, 459, 477, 492, 513, 518, 519], "dict_kei": [205, 237, 459, 492], "path_to_imag": [205, 237, 459, 492], "unsupport": [205, 459], "text2": [206, 460], "document1": [206, 460], "document2": [206, 460], "assembl": [207, 234, 461, 489], "messag": [207, 342, 461, 512], "df": [207, 233, 461, 488], "custom_tool": [207, 461], "endif": [207, 461], "tools_in_user_messag": [207, 461], "date_str": [207, 461], "jul": [207, 461], "2024": [207, 461], "block": [207, 233, 234, 461, 488, 489], "slot": [207, 461], "system_messag": [207, 461], "builtin": [207, 461], "builtin_tool": [207, 461], "environ": [207, 254, 342, 461, 511], "ipython": [207, 461], "reject": [207, 246, 461, 500, 520], "equalto": [207, 461], "code_interpret": [207, 461], "decemb": [207, 461], "2023": [207, 461], "argument": [207, 238, 252, 342, 461, 493, 507], "tojson": [207, 461], "indent": [207, 461], "endfor": [207, 461], "guidanc": [207, 461], "plug": [207, 461], "first_user_messag": [207, 461], "raise_except": [207, 461], "proper": [207, 461], "tool_cal": [207, 461], "elif": [207, 461], "python_tag": [207, 461], "arg_nam": [207, 461], "arg_val": [207, 461], "eom_id": [207, 461], "add_generation_prompt": [207, 461], "nhello": [207, 461], "arg": [208, 225, 227, 253, 462, 481, 508], "javaestim": [208, 212, 229], "decid": [208, 234, 462], "behav": [208, 462], "exactli": [208, 462], "pipeline_model": [208, 231, 242, 243, 459, 462, 485, 497, 498, 510], "tab": [209, 231, 463, 485, 510], "escap": [209, 463], "quot": [209, 463], "defailt": [209, 463], "comma": [209, 463], "table_csv": [209, 463], "csv_data": [209, 463], "input_format": [209, 463], "cleantext": [210, 464], "opensourc": [210, 464], "getlazyannot": [211, 214, 467], "lazyannot": [211, 214, 467], "setlazyannot": [211, 214, 467], "features": [211, 218, 472], "paddingsid": [211, 218, 472], "paddingvalu": [211, 218, 472], "returnattentionmask": [211, 218, 472], "samplingr": [211, 218, 472], "setdonorm": [211, 218, 472], "setfeatures": [211, 218, 472], "setpaddingsid": [211, 218, 472], "setpaddingvalu": [211, 218, 472], "setreturnattentionmask": [211, 218, 472], "setsamplingr": [211, 218, 472], "getbatchs": [211, 218, 472], "contradictionidparam": [211, 218, 472], "entailmentidparam": [211, 218, 472], "setcontradictionidparam": [211, 218, 472], "setentailmentidparam": [211, 218, 472], "getcasesensit": [211, 218, 472], "getactiv": [211, 218, 472], "getmultilabel": [211, 218, 472], "multilabel": [211, 218, 472], "setactiv": [211, 218, 472], "setmultilabel": [211, 218, 472], "getuseclstoken": [211, 218, 472], "setuseclstoken": [211, 218, 472], "getdimens": [211, 218, 472], "getenablecach": [211, 218, 472], "setenablecach": [211, 218, 472], "getengin": [211, 218, 472], "setnreturnsequ": [211, 218, 472], "setdores": [211, 218, 472], "setfeatureextractortyp": [211, 218, 472], "setimagemean": [211, 218, 472], "setimagestd": [211, 218, 472], "setresampl": [211, 218, 472], "dynamictemperatureexpon": [211, 218, 472], "dynamictemperaturerang": [211, 218, 472], "setcacheprompt": [211, 218, 472], "setdisabletokenid": [211, 218, 472], "setdynamictemperatureexpon": [211, 218, 472], "setdynamictemperaturerang": [211, 218, 472], "setembed": [211, 218, 472], "setgrammar": [211, 218, 472], "setignoreeo": [211, 218, 472], "setinputprefix": [211, 218, 472], "setinputsuffix": [211, 218, 472], "setmirostat": [211, 218, 472], "setmirostateta": [211, 218, 472], "setmirostattau": [211, 218, 472], "setmodelalia": [211, 218, 472], "setmodeldraft": [211, 218, 472], "setndraft": [211, 218, 472], "setngpulayersdraft": [211, 218, 472], "setnkeep": [211, 218, 472], "setpenaltyprompt": [211, 218, 472], "setsampl": [211, 218, 472], "setsystemprompt": [211, 218, 472], "settokenbia": [211, 218, 472], "settokenidbia": [211, 218, 472], "setusechattempl": [211, 218, 472], "max_length_limit": [211, 218, 472], "getmaxsentencelength": [211, 218, 472], "getstoragepath": [211, 221, 475], "storagepath": [211, 221, 475], "savestorag": [211, 221, 475], "enableinmemorystorag": [211, 221, 475], "getenableinmemorystorag": [211, 221, 475], "getincludestorag": [211, 221, 475], "includestorag": [211, 221, 475], "setenableinmemorystorag": [211, 221, 475], "setincludestorag": [211, 221, 475], "getstorageref": [211, 221, 475], "storageref": [211, 221, 475], "javamlwrit": [212, 213, 220, 226, 242], "javamodel": [213, 229], "lazili": [214, 467], "renam": 214, "lazi": 214, "cov_obj": [216, 469], "recal": [218, 472], "spread": [218, 472], "evenli": [218, 472], "isol": [218, 472], "spawn": [218, 472], "cpu": [218, 472], "numa_ctl": [218, 472], "numactl": [218, 472], "mirror": [218, 472], "rerank": [218, 472], "tokenbia": [218, 472], "tokenidbia": [218, 472], "fo": [222, 476], "output_column": [223, 477], "vbz": [223, 246, 477, 500, 520], "f": [223, 231, 242, 243, 477, 485, 498, 510], "filter_po": [223, 477], "epeu": [223, 477], "output_typ": [223, 477], "udf": [223, 477], "userdefinedfunct": [223, 477], "nnp_token": [223, 477], "lambda": [223, 477], "annotatyon_typ": [223, 477], "structfield": [223, 253], "integertyp": [223, 253], "maptyp": 223, "floattyp": 223, "chunks_df": [223, 477], "pos_chunk": [223, 477], "getdatafram": [224, 227, 481], "new_java_arrai": [224, 227, 481], "new_java_array_integ": [224, 227, 481], "new_java_array_str": [224, 227, 481], "new_java_obj": [224, 227, 481], "spark_vers": [224, 227, 481], "getparamvalu": [224, 228, 483], "getter_attr": [224, 228, 483], "setparamvalu": [224, 228, 483], "transform_recurs": [224, 229, 484], "kwd": 225, "javamlread": [225, 242, 479], "mlreader": [225, 479], "clazz": [225, 479], "rl": [225, 479], "javatransform": [226, 242], "javawrapp": [227, 481], "jdf": [227, 481], "pylist": [227, 481], "java_class": [227, 481], "todo": [227, 481], "paramnam": [228, 483], "log_asset": [230, 231, 485], "log_asset_data": [230, 231, 485], "log_completed_run": [230, 231, 485], "log_metr": [230, 231, 485, 510], "log_paramet": [230, 231, 485], "log_pipeline_paramet": [230, 231, 485, 510], "log_visu": [230, 231, 485, 510], "parti": [230, 255, 486], "workspac": [231, 485], "project_nam": [231, 485, 510], "comet_mod": [231, 485, 510], "experiment_id": [231, 485], "experiment_kwarg": [231, 485], "logger": [231, 485, 510], "practition": [231, 485, 510], "lifecycl": [231, 485, 510, 512], "track": [231, 485, 510, 511], "outputlogpath": [231, 485, 510], "onlin": [231, 485, 510], "reus": [231, 235, 243, 485, 490, 498], "importerror": [231, 485], "output_log_path": [231, 485, 510], "embd": [231, 485, 510], "logdir": [231, 485, 510], "attribut": [231, 342], "comet_ml": [231, 485, 510], "submit": [231, 254, 485, 510], "outstand": [231, 485], "asset_path": [231, 485], "upload": [231, 252, 485, 507], "asset": [231, 485], "attach": [231, 233, 234, 244, 401, 402, 467, 472, 483, 485, 488, 489, 499], "log_file_path": [231, 485], "sklearn": [231, 485, 510], "multilabelbinar": [231, 485, 510], "classification_report": [231, 485, 510], "preds_df": [231, 485, 510], "topanda": [231, 485, 510], "mlb": [231, 485, 510], "y_true": [231, 485, 510], "fit_transform": [231, 485, 510], "y_pred": [231, 485, 510], "output_dict": [231, 485, 510], "html": [231, 233, 234, 235, 240, 243, 244, 485, 488, 489, 490, 498, 499, 510], "viz": [231, 485, 510], "colum": [231, 485, 510], "ner_chunk": [231, 485, 510], "sparknlp_displai": [231, 485, 510], "nervisu": [231, 485, 510], "idx": [231, 485, 510], "enumer": [231, 485, 510], "label_col": [231, 485, 510], "document_col": [231, 485, 510], "return_html": [231, 485, 510], "interv": [231, 485], "refresh": [231, 485], "partition_text": [232, 233, 488], "partition_url": [232, 233, 488], "chunkingstrategi": [232, 234, 489], "combinetextundernchar": [232, 234, 489], "maxcharact": [232, 234, 489], "newafternchar": [232, 234, 489], "overlapal": [232, 234, 489], "setchunkingstrategi": [232, 234, 489], "setcombinetextundernchar": [232, 234, 489], "setmaxcharact": [232, 234, 489], "setnewafternchar": [232, 234, 489], "setoverlap": [232, 234, 489], "setoverlapal": [232, 234, 489], "addattachmentcont": [232, 234, 489], "getaddattachmentcont": [232, 234, 489], "setaddattachmentcont": [232, 234, 489], "appendcel": [232, 234, 489], "cellsepar": [232, 234, 489], "getappendcel": [232, 234, 489], "getcellsepar": [232, 234, 489], "setappendcel": [232, 234, 489], "setcellsepar": [232, 234, 489], "gettimeout": [232, 234, 489], "sethead": [232, 234, 235, 489, 490], "settimeout": [232, 234, 489], "timeout": [232, 233, 234, 488, 489], "getincludeslidenot": [232, 234, 489], "includeslidenot": [232, 234, 489], "setincludeslidenot": [232, 234, 489], "getgroupbrokenparagraph": [232, 234, 489], "getmaxlinecount": [232, 234, 489], "getparagraphsplit": [232, 234, 489], "getshortlinewordthreshold": [232, 234, 489], "getthreshold": [232, 234, 489], "gettitlelengths": [232, 234, 489], "groupbrokenparagraph": [232, 234, 489], "maxlinecount": [232, 234, 489], "paragraphsplit": [232, 234, 489], "setgroupbrokenparagraph": [232, 234, 489], "setmaxlinecount": [232, 234, 489], "setparagraphsplit": [232, 234, 489], "setshortlinewordthreshold": [232, 234, 489], "settitlelengths": [232, 234, 489], "shortlinewordthreshold": [232, 234, 489], "titlelengths": [232, 234, 489], "contentpath": [232, 235, 240, 243, 490, 498], "contenttyp": [232, 235, 240, 243, 490, 498], "getcontentpath": [232, 235, 490], "getcontenttyp": [232, 235, 490], "getincludepagebreak": [232, 235, 490], "getinfertablestructur": [232, 235, 490], "getstorecont": [232, 235, 490], "gettitlefonts": [232, 235, 490], "includepagebreak": [232, 235, 490], "infertablestructur": [232, 235, 490], "setcontentpath": [232, 235, 240, 243, 490, 498], "setcontenttyp": [232, 235, 240, 243, 490, 498], "setincludepagebreak": [232, 235, 490], "setinfertablestructur": [232, 235, 490], "setstorecont": [232, 235, 490], "settitlefonts": [232, 235, 490], "storecont": [232, 235, 490], "titlefonts": [232, 235, 490], "docx": [233, 235, 243, 488, 490, 498], "xlsx": [233, 235, 243, 488, 490, 498], "powerpoint": [233, 235, 243, 244, 488, 490, 498, 499], "ppt": [233, 235, 240, 243, 244, 488, 490, 498, 499], "pptx": [233, 235, 243, 488, 490, 498], "eml": [233, 235, 243, 488, 490, 498], "msg": [233, 235, 243, 488, 490, 498], "content_typ": [233, 488], "store_cont": [233, 488], "fetch": [233, 234, 488], "title_font_s": [233, 488], "titl": [233, 234, 235, 243, 244, 249, 252, 488, 490, 498, 499, 504, 507, 520], "include_page_break": [233, 488], "group_broken_paragraph": [233, 488], "title_length_s": [233, 488], "qualifi": [233, 234, 488], "paragraph_split": [233, 488], "short_line_word_threshold": [233, 488], "ratio": [233, 234, 488], "switch": [233, 488], "max_line_count": [233, 488], "include_slide_not": [233, 488], "infer_table_structur": [233, 488], "append_cel": [233, 488], "cell_separ": [233, 488], "add_attachment_cont": [233, 488], "txt_directori": [233, 488], "txtfile": [233, 488], "partition_df": [233, 488], "ema": [233, 488], "sev": [233, 488], "wikip": [233, 488], "wikipedi": [233, 488], "sparknlp_partition_reader_demo": [233, 488], "ipynb": [233, 488], "raw_text": [233, 488], "fox": [233, 488], "walk": [233, 488], "lane": [233, 488], "met": [233, 488], "text_df": [233, 488], "narrativetext": [233, 243, 244, 488, 498, 499], "elementtyp": [233, 243, 244, 488, 498, 499], "urls_df": [233, 488], "adjac": 234, "narr": [234, 243, 489, 498], "fragment": 234, "heurist": [234, 235], "layout": [234, 235, 242, 497], "smoothli": [235, 243, 490, 498], "workflow": [235, 243, 490, 498, 510], "seamless": [235, 243, 490, 498], "blizzard": [235, 490], "blizz": [235, 490], "juego": [235, 490], "gmail": [235, 490], "im": [235, 490], "mime": [235, 243, 498], "manual": [235, 254, 513], "bold": 235, "center": 235, "from_disk": [236, 237, 492], "clearcach": [236, 238, 493], "downloadmodel": [236, 238, 493], "downloadmodeldirectli": [236, 238, 493], "downloadpipelin": [236, 238, 493], "showavailableannot": [236, 238, 493], "showpublicmodel": [236, 238, 493, 514], "showpublicpipelin": [236, 238, 493, 519], "showuncategorizedresourc": [236, 238, 493], "disk_loc": [237, 492], "light_model": [237, 492], "onto_100": [238, 493], "onto_300": [238, 493], "ner_dl_bert": [238, 493], "similarli": [238, 493], "check_spel": [238, 493, 519], "match_datetim": [238, 493, 519], "clear": [238, 493], "j_dwn": [238, 493], "pythonresourcedownload": [238, 493], "obj": [238, 247, 493, 501], "unzip": [238, 252, 493, 507], "filer": [238, 493], "pdf_layout_text_stripp": [240, 241, 495], "pdf_text_stripp": [240, 241, 495], "extractcoordin": [240, 242, 497], "normalizeligatur": [240, 242, 497], "onlypagenum": [240, 242, 497], "pagenumcol": [240, 242, 497], "partitionnum": [240, 242, 497], "setextractcoordin": [240, 242, 497], "setnormalizeligatur": [240, 242, 497], "setonlypagenum": [240, 242, 497], "setpagenumcol": [240, 242, 497], "setpartitionnum": [240, 242, 497], "setsort": [240, 242, 497], "setsplitpag": [240, 242, 497], "setstoresplittedpdf": [240, 242, 497], "settextstripp": [240, 242, 497], "sort": [240, 242, 497], "splitpag": [240, 242, 497], "storesplittedpdf": [240, 242, 497], "textstripp": [240, 242, 497], "explodedoc": [240, 243, 498], "flattenoutput": [240, 243, 498], "setexplodedoc": [240, 243, 498], "setflattenoutput": [240, 243, 498], "settitlethreshold": [240, 243, 498], "titlethreshold": [240, 243, 498], "stripper": [241, 242, 495], "pdflayouttextstripp": [241, 495], "pdftextstripp": [241, 495], "hasinputcol": 242, "hasoutputcol": 242, "pdf_path": [242, 497], "data_fram": [242, 497], "binaryfil": [242, 497], "pdf_df": [242, 244, 497, 499], "modificationtim": [242, 497], "paula": [242, 497], "2025": [242, 497], "height_dimens": [242, 497], "width_dimens": [242, 497], "pagenum": [242, 497], "ligatur": 242, "\ufb02": 242, "pdf_directori": [243, 498], "empty_data_set": [243, 498], "result_df": [243, 498], "pagenumb": [243, 244, 498, 499], "filenam": [243, 498], "68": [243, 498], "html_df": [244, 499], "Or": [244, 499], "shorthand": [244, 499], "email_df": [244, 499], "csvpath": [244, 499], "docpath": [244, 499], "csv_df": [244, 499], "alic": [244, 499], "bob": [244, 499], "tr": [244, 499], "td": [244, 499], "doc_df": [244, 499], "filepath": [244, 499], "simplifi": [244, 499], "sent_to": [244, 499], "danilo": [244, 499], "htmlpath": [244, 499], "illustr": [244, 499], "literatur": [244, 499], "permiss": [244, 499], "markdown": [244, 499], "md_df": [244, 499], "elementid": [244, 499], "pdfpath": [244, 499], "pptdf": [244, 499], "txtdf": [244, 499], "analyt": [244, 499], "xlsdf": [244, 499], "financi": [244, 499], "sheetnam": [244, 499], "xml_df": [244, 499], "smith": [244, 499], "readjsonfil": [245, 250, 505], "documentcol": [246, 247, 500, 501], "sentencecol": [246, 247, 500, 501], "tokencol": [246, 500], "conlllabelindex": [246, 500], "conllposindex": [246, 500], "conlldocidcol": [246, 500], "doc_id": [246, 249, 500, 504], "labelcol": [246, 500], "includedocid": [246, 500], "docstart": [246, 500, 520], "eu": [246, 500, 520], "np": [246, 500, 520], "vp": [246, 500, 520], "misc": [246, 500, 520], "boycott": [246, 500, 520], "british": [246, 500, 520], "lamb": [246, 500, 520], "blackburn": [246, 500], "brussel": [246, 500], "1996": [246, 500], "08": [246, 500], "storage_level": [246, 500], "storagelevel": [246, 500], "lift": [246, 500], "disk_onli": [246, 500], "uposcol": [247, 501], "upo": [247, 501], "xposcol": [247, 501], "xpo": [247, 501], "sent_id": [247, 501], "sell": [247, 501], "pron": [247, 501], "nom": [247, 501], "plur": [247, 501], "_": [247, 501], "tens": [247, 501], "conj": [247, 501], "cc": [247, 501], "spaceaft": [247, 501], "punct": [247, 501], "conllufil": [247, 501, 520], "conlldataset": [247, 501, 520], "morph": [247, 501], "Into": [247, 501], "googleo": [247, 501], "sconj": [247, 501], "propn": [247, 501], "adp": [247, 501], "wp": [247, 501], "vbd": [247, 248, 501, 503, 520], "ago": [248, 503, 520], "posdf": [248, 503], "61": [248, 503], "67": [248, 249, 503, 504, 520], "nonexecut": [248, 503], "76": [248, 503], "director": [248, 503], "84": [248, 503], "outputposcol": [248, 503], "outputdocumentcol": [248, 503], "outputtextcol": [248, 503], "medic": [249, 504, 520], "medment": [249, 504, 520], "25763772": [249, 504, 520], "dctn4": [249, 504, 520], "t116": [249, 504, 520], "t123": [249, 504, 520], "c4308010": [249, 504, 520], "63": [249, 504, 520], "chronic": [249, 504, 520], "pseudomona": [249, 504, 520], "aeruginosa": [249, 504, 520], "infect": [249, 504, 520], "t047": [249, 504, 520], "c0854135": [249, 504, 520], "82": [249, 504, 520], "cystic": [249, 504, 520], "fibrosi": [249, 504, 520], "c0010674": [249, 504, 520], "120": [249, 504, 520], "pa": [249, 504, 520], "124": [249, 504, 520], "139": [249, 504, 520], "pubtatorfil": [249, 504], "corpus_pubtator_sampl": [249, 504], "pubtatordataset": [249, 504], "finished_token": [249, 504, 515], "finished_po": [249, 504], "finished_n": [249, 504], "finished_token_metadata": [249, 504], "finished_pos_metadata": [249, 504], "finished_label_metadata": [249, 504], "mo": [249, 504], "ispaddedtoken": [249, 504], "token_spac": [250, 505], "sentence_end": [250, 505], "spaci": [250, 505], "multi_doc_token": [250, 505], "went": [250, 505], "night": [250, 505], "bought": [250, 505], "bread": [250, 505], "54": [250, 505], "jsonfilepath": [250, 505], "model_data": [252, 507], "dictionary_for_upload": [252, 507], "model_zip_path": [252, 507], "pythoncod": [252, 507], "git_token": [252, 507], "predictedent": [252, 507], "sparknlpvers": [252, 507], "howtous": [252, 507], "livedemo": [252, 507], "runincolab": [252, 507], "scalacod": [252, 507], "nlucod": [252, 507], "datasourc": [252, 507], "includedmodel": [252, 507], "info": [252, 507], "zip_path": [252, 507], "zip": [252, 507], "folder_path": [252, 507], "binarytyp": 253, "quick": [254, 510, 515], "pypi": 254, "pip": 254, "anaconda": 254, "shell": 254, "compil": 254, "sbt": 254, "assembli": 254, "oracl": 254, "openjdk": 254, "0_292": 254, "sparknlp": [254, 510, 513, 514, 515, 516, 518, 519, 520], "python3": 254, "bin": 254, "cheat": 255, "guid": [255, 511], "py": [313, 432, 465, 466, 474, 480, 484], "subclass": [313, 342, 432, 466, 480, 484], "ins": [313, 432, 466, 484], "uid": [313, 432, 466, 484], "documenttokensplittertestspec": 342, "methodnam": 342, "runtest": 342, "fixtur": 342, "testcas": 342, "constructor": 342, "author": 342, "deconstruct": 342, "setup": 342, "teardown": 342, "__init__": 342, "signatur": 342, "failureexcept": 342, "assert": 342, "deem": 342, "longmessag": 342, "repr": 342, "failur": 342, "maxdiff": 342, "diff": 342, "difflib": 342, "hook": 342, "exercis": 342, "test_run": 342, "sbd": 377, "dictionary_path": [436, 437], "py4j": [455, 456, 484], "java_gatewai": [455, 456, 484], "mixin": 479, "javaparam": 479, "_java_obj": 480, "sc": 481, "tf_graph": 506, "tf_graph_1x": 506, "overview": [509, 517], "dedic": 510, "account": 510, "inspect": 510, "init": 510, "sparknlp_experi": 510, "offline_directori": 510, "later": 510, "record": 511, "registri": 511, "central": 511, "send": 512, "mlflow": 512, "clearli": 513, "explain_document_ml": [513, 518, 519], "approx": [513, 518, 519], "mb": [513, 518, 519], "ok": [513, 518, 519], "spearhead": 514, "declar": 514, "accordingli": 514, "extra_loc": 514, "classifierdl_use_trec50": 514, "classifierdl_use_spam": 514, "column_nam": 514, "interchang": 515, "road": 515, "proce": 515, "constantli": 519, "train_po": 520, "training_conl": 520, "train_corpu": 520, "withcolumnrenam": 520, "trainingpubtatordf": 520, "corpus_pubt": 520}, "objects": {"": [[478, 0, 0, "-", "sparknlp"]], "sparknlp": [[256, 0, 0, "-", "annotation"], [257, 0, 0, "-", "annotation_audio"], [258, 0, 0, "-", "annotation_image"], [377, 0, 0, "-", "annotator"], [478, 4, 1, "", "annotators"], [458, 0, 0, "-", "base"], [470, 0, 0, "-", "common"], [478, 4, 1, "", "embeddings"], [477, 0, 0, "-", "functions"], [482, 0, 0, "-", "internal"], [486, 0, 0, "-", "logging"], [487, 0, 0, "-", "partition"], [491, 0, 0, "-", "pretrained"], [478, 5, 1, "", "read"], [496, 0, 0, "-", "reader"], [478, 5, 1, "", "start"], [502, 0, 0, "-", "training"], [507, 0, 0, "-", "upload_to_hub"], [508, 0, 0, "-", "util"], [478, 5, 1, "", "version"]], "sparknlp.annotation": [[256, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[256, 2, 1, "", "annotatorType"], [256, 3, 1, "", "arrayType"], [256, 2, 1, "", "begin"], [256, 3, 1, "", "copy"], [256, 3, 1, "", "dataType"], [256, 2, 1, "", "embeddings"], [256, 2, 1, "", "end"], [256, 3, 1, "", "fromRow"], [256, 2, 1, "", "metadata"], [256, 2, 1, "", "result"], [256, 3, 1, "", "toRow"]], "sparknlp.annotation_audio": [[257, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[257, 2, 1, "", "annotatorType"], [257, 3, 1, "", "copy"], [257, 2, 1, "", "metadata"], [257, 2, 1, "", "result"]], "sparknlp.annotation_image": [[258, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[258, 2, 1, "", "annotatorType"], [258, 3, 1, "", "copy"], [258, 2, 1, "", "height"], [258, 2, 1, "", "metadata"], [258, 2, 1, "", "mode"], [258, 2, 1, "", "nChannels"], [258, 2, 1, "", "origin"], [258, 2, 1, "", "result"], [258, 2, 1, "", "width"]], "sparknlp.annotator": [[377, 4, 1, "", "annotators"], [377, 4, 1, "", "audio"], [260, 0, 0, "-", "audio"], [263, 0, 0, "-", "chunk2_doc"], [264, 0, 0, "-", "chunker"], [377, 4, 1, "", "classifier"], [290, 0, 0, "-", "classifier_dl"], [314, 0, 0, "-", "cleaners"], [377, 4, 1, "", "coref"], [315, 0, 0, "-", "coref"], [377, 4, 1, "", "cv"], [322, 0, 0, "-", "cv"], [334, 0, 0, "-", "dataframe_optimizer"], [335, 0, 0, "-", "date2_chunk"], [337, 0, 0, "-", "dependency"], [339, 0, 0, "-", "document_character_text_splitter"], [340, 0, 0, "-", "document_normalizer"], [341, 0, 0, "-", "document_token_splitter"], [342, 0, 0, "-", "document_token_splitter_test"], [377, 4, 1, "", "embeddings"], [356, 0, 0, "-", "embeddings"], [377, 4, 1, "", "er"], [375, 0, 0, "-", "er"], [376, 0, 0, "-", "graph_extraction"], [377, 4, 1, "", "keyword"], [378, 0, 0, "-", "keyword_extraction"], [377, 4, 1, "", "ld"], [380, 0, 0, "-", "ld_dl"], [382, 0, 0, "-", "lemmatizer"], [385, 0, 0, "-", "matcher"], [389, 0, 0, "-", "n_gram_generator"], [390, 0, 0, "-", "ner"], [397, 0, 0, "-", "normalizer"], [398, 0, 0, "-", "openai"], [403, 0, 0, "-", "param"], [377, 4, 1, "", "parser"], [404, 0, 0, "-", "pos"], [377, 4, 1, "", "regex"], [377, 4, 1, "", "sbd"], [377, 4, 1, "", "sda"], [406, 0, 0, "-", "sentence"], [377, 4, 1, "", "sentence_detector_dl"], [409, 0, 0, "-", "sentiment"], [418, 0, 0, "-", "seq2seq"], [433, 0, 0, "-", "similarity"], [377, 4, 1, "", "spell"], [435, 0, 0, "-", "spell_check"], [438, 0, 0, "-", "stemmer"], [439, 0, 0, "-", "stop_words_cleaner"], [440, 0, 0, "-", "tf_ner_dl_graph_builder"], [442, 0, 0, "-", "token"], [446, 0, 0, "-", "token2_chunk"], [447, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[259, 0, 0, "-", "hubert_for_ctc"], [261, 0, 0, "-", "wav2vec2_for_ctc"], [262, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[259, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[259, 2, 1, "", "configProtoBytes"], [259, 2, 1, "", "inputAnnotatorTypes"], [259, 3, 1, "", "loadSavedModel"], [259, 2, 1, "", "name"], [259, 2, 1, "", "outputAnnotatorType"], [259, 3, 1, "", "pretrained"], [259, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[261, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[261, 2, 1, "", "configProtoBytes"], [261, 2, 1, "", "inputAnnotatorTypes"], [261, 3, 1, "", "loadSavedModel"], [261, 2, 1, "", "name"], [261, 2, 1, "", "outputAnnotatorType"], [261, 3, 1, "", "pretrained"], [261, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[262, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[262, 2, 1, "", "configProtoBytes"], [262, 3, 1, "", "getIsMultilingual"], [262, 3, 1, "", "getLanguage"], [262, 2, 1, "", "inputAnnotatorTypes"], [262, 2, 1, "", "isMultilingual"], [262, 2, 1, "", "language"], [262, 3, 1, "", "loadSavedModel"], [262, 2, 1, "", "name"], [262, 2, 1, "", "outputAnnotatorType"], [262, 3, 1, "", "pretrained"], [262, 3, 1, "", "setConfigProtoBytes"], [262, 3, 1, "", "setLanguage"], [262, 3, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[263, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunk2_doc.Chunk2Doc": [[263, 2, 1, "", "inputAnnotatorTypes"], [263, 2, 1, "", "name"], [263, 2, 1, "", "outputAnnotatorType"], [263, 3, 1, "", "setParams"]], "sparknlp.annotator.chunker": [[264, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[264, 2, 1, "", "inputAnnotatorTypes"], [264, 2, 1, "", "name"], [264, 2, 1, "", "outputAnnotatorType"], [264, 2, 1, "", "regexParsers"], [264, 3, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[265, 0, 0, "-", "albert_for_multiple_choice"], [266, 0, 0, "-", "albert_for_question_answering"], [267, 0, 0, "-", "albert_for_sequence_classification"], [268, 0, 0, "-", "albert_for_token_classification"], [269, 0, 0, "-", "albert_for_zero_shot_classification"], [270, 0, 0, "-", "bart_for_zero_shot_classification"], [271, 0, 0, "-", "bert_for_multiple_choice"], [272, 0, 0, "-", "bert_for_question_answering"], [273, 0, 0, "-", "bert_for_sequence_classification"], [274, 0, 0, "-", "bert_for_token_classification"], [275, 0, 0, "-", "bert_for_zero_shot_classification"], [276, 0, 0, "-", "camembert_for_question_answering"], [277, 0, 0, "-", "camembert_for_sequence_classification"], [278, 0, 0, "-", "camembert_for_token_classification"], [279, 0, 0, "-", "camembert_for_zero_shot_classification"], [280, 0, 0, "-", "classifier_dl"], [281, 0, 0, "-", "deberta_for_question_answering"], [282, 0, 0, "-", "deberta_for_sequence_classification"], [283, 0, 0, "-", "deberta_for_token_classification"], [284, 0, 0, "-", "deberta_for_zero_shot_classification"], [285, 0, 0, "-", "distil_bert_for_question_answering"], [286, 0, 0, "-", "distil_bert_for_sequence_classification"], [287, 0, 0, "-", "distil_bert_for_token_classification"], [288, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [289, 0, 0, "-", "distilbert_for_multiple_choice"], [291, 0, 0, "-", "longformer_for_question_answering"], [292, 0, 0, "-", "longformer_for_sequence_classification"], [293, 0, 0, "-", "longformer_for_token_classification"], [294, 0, 0, "-", "mpnet_for_question_answering"], [295, 0, 0, "-", "mpnet_for_sequence_classification"], [296, 0, 0, "-", "mpnet_for_token_classification"], [297, 0, 0, "-", "multi_classifier_dl"], [298, 0, 0, "-", "roberta_for_multiple_choice"], [299, 0, 0, "-", "roberta_for_question_answering"], [300, 0, 0, "-", "roberta_for_sequence_classification"], [301, 0, 0, "-", "roberta_for_token_classification"], [302, 0, 0, "-", "roberta_for_zero_shot_classification"], [303, 0, 0, "-", "sentiment_dl"], [304, 0, 0, "-", "tapas_for_question_answering"], [305, 0, 0, "-", "xlm_roberta_for_multiple_choice"], [306, 0, 0, "-", "xlm_roberta_for_question_answering"], [307, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [308, 0, 0, "-", "xlm_roberta_for_token_classification"], [309, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [310, 0, 0, "-", "xlnet_for_sequence_classification"], [311, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[265, 1, 1, "", "AlbertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice": [[265, 2, 1, "", "choicesDelimiter"], [265, 2, 1, "", "inputAnnotatorTypes"], [265, 3, 1, "", "loadSavedModel"], [265, 2, 1, "", "name"], [265, 2, 1, "", "outputAnnotatorType"], [265, 3, 1, "", "pretrained"], [265, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[266, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[266, 2, 1, "", "coalesceSentences"], [266, 2, 1, "", "configProtoBytes"], [266, 2, 1, "", "inputAnnotatorTypes"], [266, 3, 1, "", "loadSavedModel"], [266, 2, 1, "", "name"], [266, 2, 1, "", "outputAnnotatorType"], [266, 3, 1, "", "pretrained"], [266, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[267, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[267, 2, 1, "", "coalesceSentences"], [267, 2, 1, "", "configProtoBytes"], [267, 3, 1, "", "getClasses"], [267, 2, 1, "", "inputAnnotatorTypes"], [267, 3, 1, "", "loadSavedModel"], [267, 2, 1, "", "name"], [267, 2, 1, "", "outputAnnotatorType"], [267, 3, 1, "", "pretrained"], [267, 3, 1, "", "setCoalesceSentences"], [267, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[268, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[268, 2, 1, "", "configProtoBytes"], [268, 3, 1, "", "getClasses"], [268, 2, 1, "", "inputAnnotatorTypes"], [268, 3, 1, "", "loadSavedModel"], [268, 2, 1, "", "name"], [268, 2, 1, "", "outputAnnotatorType"], [268, 3, 1, "", "pretrained"], [268, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[269, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[269, 2, 1, "", "coalesceSentences"], [269, 2, 1, "", "configProtoBytes"], [269, 3, 1, "", "getClasses"], [269, 2, 1, "", "inputAnnotatorTypes"], [269, 3, 1, "", "loadSavedModel"], [269, 2, 1, "", "name"], [269, 2, 1, "", "outputAnnotatorType"], [269, 3, 1, "", "pretrained"], [269, 3, 1, "", "setCoalesceSentences"], [269, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[270, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[270, 2, 1, "", "coalesceSentences"], [270, 2, 1, "", "configProtoBytes"], [270, 3, 1, "", "getClasses"], [270, 2, 1, "", "inputAnnotatorTypes"], [270, 3, 1, "", "loadSavedModel"], [270, 2, 1, "", "maxSentenceLength"], [270, 2, 1, "", "name"], [270, 2, 1, "", "outputAnnotatorType"], [270, 3, 1, "", "pretrained"], [270, 3, 1, "", "setCoalesceSentences"], [270, 3, 1, "", "setConfigProtoBytes"], [270, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[271, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[271, 2, 1, "", "choicesDelimiter"], [271, 2, 1, "", "inputAnnotatorTypes"], [271, 3, 1, "", "loadSavedModel"], [271, 2, 1, "", "name"], [271, 2, 1, "", "outputAnnotatorType"], [271, 3, 1, "", "pretrained"], [271, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[272, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[272, 2, 1, "", "coalesceSentences"], [272, 2, 1, "", "configProtoBytes"], [272, 2, 1, "", "inputAnnotatorTypes"], [272, 3, 1, "", "loadSavedModel"], [272, 2, 1, "", "name"], [272, 2, 1, "", "outputAnnotatorType"], [272, 3, 1, "", "pretrained"], [272, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[273, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[273, 2, 1, "", "coalesceSentences"], [273, 2, 1, "", "configProtoBytes"], [273, 3, 1, "", "getClasses"], [273, 2, 1, "", "inputAnnotatorTypes"], [273, 3, 1, "", "loadSavedModel"], [273, 2, 1, "", "name"], [273, 2, 1, "", "outputAnnotatorType"], [273, 3, 1, "", "pretrained"], [273, 3, 1, "", "setCoalesceSentences"], [273, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[274, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[274, 2, 1, "", "configProtoBytes"], [274, 3, 1, "", "getClasses"], [274, 2, 1, "", "inputAnnotatorTypes"], [274, 3, 1, "", "loadSavedModel"], [274, 2, 1, "", "name"], [274, 2, 1, "", "outputAnnotatorType"], [274, 3, 1, "", "pretrained"], [274, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[275, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[275, 2, 1, "", "coalesceSentences"], [275, 2, 1, "", "configProtoBytes"], [275, 3, 1, "", "getClasses"], [275, 2, 1, "", "inputAnnotatorTypes"], [275, 3, 1, "", "loadSavedModel"], [275, 2, 1, "", "name"], [275, 2, 1, "", "outputAnnotatorType"], [275, 3, 1, "", "pretrained"], [275, 3, 1, "", "setCoalesceSentences"], [275, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[276, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[276, 2, 1, "", "coalesceSentences"], [276, 2, 1, "", "configProtoBytes"], [276, 2, 1, "", "inputAnnotatorTypes"], [276, 3, 1, "", "loadSavedModel"], [276, 2, 1, "", "name"], [276, 2, 1, "", "outputAnnotatorType"], [276, 3, 1, "", "pretrained"], [276, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[277, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[277, 2, 1, "", "coalesceSentences"], [277, 2, 1, "", "configProtoBytes"], [277, 3, 1, "", "getClasses"], [277, 2, 1, "", "inputAnnotatorTypes"], [277, 3, 1, "", "loadSavedModel"], [277, 2, 1, "", "name"], [277, 2, 1, "", "outputAnnotatorType"], [277, 3, 1, "", "pretrained"], [277, 3, 1, "", "setCoalesceSentences"], [277, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[278, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[278, 2, 1, "", "configProtoBytes"], [278, 3, 1, "", "getClasses"], [278, 2, 1, "", "inputAnnotatorTypes"], [278, 3, 1, "", "loadSavedModel"], [278, 2, 1, "", "name"], [278, 2, 1, "", "outputAnnotatorType"], [278, 3, 1, "", "pretrained"], [278, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[279, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[279, 2, 1, "", "coalesceSentences"], [279, 2, 1, "", "configProtoBytes"], [279, 3, 1, "", "getClasses"], [279, 2, 1, "", "inputAnnotatorTypes"], [279, 3, 1, "", "loadSavedModel"], [279, 2, 1, "", "name"], [279, 2, 1, "", "outputAnnotatorType"], [279, 3, 1, "", "pretrained"], [279, 3, 1, "", "setCoalesceSentences"], [279, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[280, 1, 1, "", "ClassifierDLApproach"], [280, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[280, 2, 1, "", "dropout"], [280, 2, 1, "", "inputAnnotatorTypes"], [280, 2, 1, "", "outputAnnotatorType"], [280, 3, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[280, 2, 1, "", "classes"], [280, 2, 1, "", "configProtoBytes"], [280, 2, 1, "", "inputAnnotatorTypes"], [280, 2, 1, "", "name"], [280, 2, 1, "", "outputAnnotatorType"], [280, 3, 1, "", "pretrained"], [280, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[281, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[281, 2, 1, "", "coalesceSentences"], [281, 2, 1, "", "configProtoBytes"], [281, 2, 1, "", "inputAnnotatorTypes"], [281, 3, 1, "", "loadSavedModel"], [281, 2, 1, "", "name"], [281, 2, 1, "", "outputAnnotatorType"], [281, 3, 1, "", "pretrained"], [281, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[282, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[282, 2, 1, "", "coalesceSentences"], [282, 2, 1, "", "configProtoBytes"], [282, 3, 1, "", "getClasses"], [282, 2, 1, "", "inputAnnotatorTypes"], [282, 3, 1, "", "loadSavedModel"], [282, 2, 1, "", "name"], [282, 2, 1, "", "outputAnnotatorType"], [282, 3, 1, "", "pretrained"], [282, 3, 1, "", "setCoalesceSentences"], [282, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[283, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[283, 2, 1, "", "configProtoBytes"], [283, 3, 1, "", "getClasses"], [283, 2, 1, "", "inputAnnotatorTypes"], [283, 3, 1, "", "loadSavedModel"], [283, 2, 1, "", "name"], [283, 2, 1, "", "outputAnnotatorType"], [283, 3, 1, "", "pretrained"], [283, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[284, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[284, 2, 1, "", "coalesceSentences"], [284, 2, 1, "", "configProtoBytes"], [284, 3, 1, "", "getClasses"], [284, 2, 1, "", "inputAnnotatorTypes"], [284, 3, 1, "", "loadSavedModel"], [284, 2, 1, "", "name"], [284, 2, 1, "", "outputAnnotatorType"], [284, 3, 1, "", "pretrained"], [284, 3, 1, "", "setCoalesceSentences"], [284, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[285, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[285, 2, 1, "", "coalesceSentences"], [285, 2, 1, "", "configProtoBytes"], [285, 2, 1, "", "inputAnnotatorTypes"], [285, 3, 1, "", "loadSavedModel"], [285, 2, 1, "", "name"], [285, 2, 1, "", "outputAnnotatorType"], [285, 3, 1, "", "pretrained"], [285, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[286, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[286, 2, 1, "", "coalesceSentences"], [286, 2, 1, "", "configProtoBytes"], [286, 3, 1, "", "getClasses"], [286, 2, 1, "", "inputAnnotatorTypes"], [286, 3, 1, "", "loadSavedModel"], [286, 2, 1, "", "name"], [286, 2, 1, "", "outputAnnotatorType"], [286, 3, 1, "", "pretrained"], [286, 3, 1, "", "setCoalesceSentences"], [286, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[287, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[287, 2, 1, "", "configProtoBytes"], [287, 3, 1, "", "getClasses"], [287, 2, 1, "", "inputAnnotatorTypes"], [287, 3, 1, "", "loadSavedModel"], [287, 2, 1, "", "name"], [287, 2, 1, "", "outputAnnotatorType"], [287, 3, 1, "", "pretrained"], [287, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[288, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[288, 2, 1, "", "coalesceSentences"], [288, 2, 1, "", "configProtoBytes"], [288, 3, 1, "", "getClasses"], [288, 2, 1, "", "inputAnnotatorTypes"], [288, 3, 1, "", "loadSavedModel"], [288, 2, 1, "", "name"], [288, 2, 1, "", "outputAnnotatorType"], [288, 3, 1, "", "pretrained"], [288, 3, 1, "", "setCoalesceSentences"], [288, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[289, 1, 1, "", "DistilBertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice": [[289, 2, 1, "", "choicesDelimiter"], [289, 2, 1, "", "inputAnnotatorTypes"], [289, 3, 1, "", "loadSavedModel"], [289, 2, 1, "", "name"], [289, 2, 1, "", "outputAnnotatorType"], [289, 3, 1, "", "pretrained"], [289, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[291, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[291, 2, 1, "", "coalesceSentences"], [291, 2, 1, "", "configProtoBytes"], [291, 2, 1, "", "inputAnnotatorTypes"], [291, 3, 1, "", "loadSavedModel"], [291, 2, 1, "", "name"], [291, 2, 1, "", "outputAnnotatorType"], [291, 3, 1, "", "pretrained"], [291, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[292, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[292, 2, 1, "", "coalesceSentences"], [292, 2, 1, "", "configProtoBytes"], [292, 3, 1, "", "getClasses"], [292, 2, 1, "", "inputAnnotatorTypes"], [292, 3, 1, "", "loadSavedModel"], [292, 2, 1, "", "name"], [292, 2, 1, "", "outputAnnotatorType"], [292, 3, 1, "", "pretrained"], [292, 3, 1, "", "setCoalesceSentences"], [292, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[293, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[293, 2, 1, "", "configProtoBytes"], [293, 3, 1, "", "getClasses"], [293, 2, 1, "", "inputAnnotatorTypes"], [293, 3, 1, "", "loadSavedModel"], [293, 2, 1, "", "name"], [293, 2, 1, "", "outputAnnotatorType"], [293, 3, 1, "", "pretrained"], [293, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[294, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[294, 2, 1, "", "inputAnnotatorTypes"], [294, 3, 1, "", "loadSavedModel"], [294, 2, 1, "", "name"], [294, 2, 1, "", "outputAnnotatorType"], [294, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[295, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[295, 2, 1, "", "coalesceSentences"], [295, 3, 1, "", "getClasses"], [295, 2, 1, "", "inputAnnotatorTypes"], [295, 3, 1, "", "loadSavedModel"], [295, 2, 1, "", "name"], [295, 2, 1, "", "outputAnnotatorType"], [295, 3, 1, "", "pretrained"], [295, 3, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[296, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[296, 2, 1, "", "configProtoBytes"], [296, 3, 1, "", "getClasses"], [296, 2, 1, "", "inputAnnotatorTypes"], [296, 3, 1, "", "loadSavedModel"], [296, 2, 1, "", "name"], [296, 2, 1, "", "outputAnnotatorType"], [296, 3, 1, "", "pretrained"], [296, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[297, 1, 1, "", "MultiClassifierDLApproach"], [297, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[297, 2, 1, "", "inputAnnotatorTypes"], [297, 2, 1, "", "outputAnnotatorType"], [297, 3, 1, "", "setShufflePerEpoch"], [297, 3, 1, "", "setThreshold"], [297, 3, 1, "", "setVerbose"], [297, 2, 1, "", "shufflePerEpoch"], [297, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[297, 2, 1, "", "classes"], [297, 2, 1, "", "configProtoBytes"], [297, 2, 1, "", "inputAnnotatorTypes"], [297, 2, 1, "", "name"], [297, 2, 1, "", "outputAnnotatorType"], [297, 3, 1, "", "pretrained"], [297, 3, 1, "", "setConfigProtoBytes"], [297, 3, 1, "", "setThreshold"], [297, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[298, 1, 1, "", "RoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice": [[298, 2, 1, "", "choicesDelimiter"], [298, 2, 1, "", "inputAnnotatorTypes"], [298, 3, 1, "", "loadSavedModel"], [298, 2, 1, "", "name"], [298, 2, 1, "", "outputAnnotatorType"], [298, 3, 1, "", "pretrained"], [298, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[299, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[299, 2, 1, "", "coalesceSentences"], [299, 2, 1, "", "configProtoBytes"], [299, 2, 1, "", "inputAnnotatorTypes"], [299, 3, 1, "", "loadSavedModel"], [299, 2, 1, "", "name"], [299, 2, 1, "", "outputAnnotatorType"], [299, 3, 1, "", "pretrained"], [299, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[300, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[300, 2, 1, "", "coalesceSentences"], [300, 2, 1, "", "configProtoBytes"], [300, 3, 1, "", "getClasses"], [300, 2, 1, "", "inputAnnotatorTypes"], [300, 3, 1, "", "loadSavedModel"], [300, 2, 1, "", "name"], [300, 2, 1, "", "outputAnnotatorType"], [300, 3, 1, "", "pretrained"], [300, 3, 1, "", "setCoalesceSentences"], [300, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[301, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[301, 2, 1, "", "configProtoBytes"], [301, 3, 1, "", "getClasses"], [301, 2, 1, "", "inputAnnotatorTypes"], [301, 3, 1, "", "loadSavedModel"], [301, 2, 1, "", "maxSentenceLength"], [301, 2, 1, "", "name"], [301, 2, 1, "", "outputAnnotatorType"], [301, 3, 1, "", "pretrained"], [301, 3, 1, "", "setConfigProtoBytes"], [301, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[302, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[302, 2, 1, "", "coalesceSentences"], [302, 2, 1, "", "configProtoBytes"], [302, 3, 1, "", "getClasses"], [302, 2, 1, "", "inputAnnotatorTypes"], [302, 3, 1, "", "loadSavedModel"], [302, 2, 1, "", "maxSentenceLength"], [302, 2, 1, "", "name"], [302, 2, 1, "", "outputAnnotatorType"], [302, 3, 1, "", "pretrained"], [302, 3, 1, "", "setCoalesceSentences"], [302, 3, 1, "", "setConfigProtoBytes"], [302, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[303, 1, 1, "", "SentimentDLApproach"], [303, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[303, 2, 1, "", "dropout"], [303, 2, 1, "", "inputAnnotatorTypes"], [303, 2, 1, "", "outputAnnotatorType"], [303, 3, 1, "", "setDropout"], [303, 3, 1, "", "setThreshold"], [303, 3, 1, "", "setThresholdLabel"], [303, 2, 1, "", "threshold"], [303, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[303, 2, 1, "", "classes"], [303, 2, 1, "", "configProtoBytes"], [303, 2, 1, "", "inputAnnotatorTypes"], [303, 2, 1, "", "name"], [303, 2, 1, "", "outputAnnotatorType"], [303, 3, 1, "", "pretrained"], [303, 3, 1, "", "setConfigProtoBytes"], [303, 3, 1, "", "setThreshold"], [303, 3, 1, "", "setThresholdLabel"], [303, 2, 1, "", "threshold"], [303, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[304, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[304, 2, 1, "", "inputAnnotatorTypes"], [304, 3, 1, "", "loadSavedModel"], [304, 2, 1, "", "name"], [304, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[305, 1, 1, "", "XlmRoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice": [[305, 2, 1, "", "inputAnnotatorTypes"], [305, 3, 1, "", "loadSavedModel"], [305, 2, 1, "", "name"], [305, 2, 1, "", "outputAnnotatorType"], [305, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[306, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[306, 2, 1, "", "coalesceSentences"], [306, 2, 1, "", "configProtoBytes"], [306, 2, 1, "", "inputAnnotatorTypes"], [306, 3, 1, "", "loadSavedModel"], [306, 2, 1, "", "name"], [306, 2, 1, "", "outputAnnotatorType"], [306, 3, 1, "", "pretrained"], [306, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[307, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[307, 2, 1, "", "coalesceSentences"], [307, 2, 1, "", "configProtoBytes"], [307, 3, 1, "", "getClasses"], [307, 2, 1, "", "inputAnnotatorTypes"], [307, 3, 1, "", "loadSavedModel"], [307, 2, 1, "", "name"], [307, 2, 1, "", "outputAnnotatorType"], [307, 3, 1, "", "pretrained"], [307, 3, 1, "", "setCoalesceSentences"], [307, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[308, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[308, 2, 1, "", "configProtoBytes"], [308, 3, 1, "", "getClasses"], [308, 2, 1, "", "inputAnnotatorTypes"], [308, 3, 1, "", "loadSavedModel"], [308, 2, 1, "", "name"], [308, 2, 1, "", "outputAnnotatorType"], [308, 3, 1, "", "pretrained"], [308, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[309, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[309, 2, 1, "", "coalesceSentences"], [309, 2, 1, "", "configProtoBytes"], [309, 3, 1, "", "getClasses"], [309, 2, 1, "", "inputAnnotatorTypes"], [309, 3, 1, "", "loadSavedModel"], [309, 2, 1, "", "maxSentenceLength"], [309, 2, 1, "", "name"], [309, 2, 1, "", "outputAnnotatorType"], [309, 3, 1, "", "pretrained"], [309, 3, 1, "", "setCoalesceSentences"], [309, 3, 1, "", "setConfigProtoBytes"], [309, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[310, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[310, 2, 1, "", "coalesceSentences"], [310, 2, 1, "", "configProtoBytes"], [310, 3, 1, "", "getClasses"], [310, 2, 1, "", "inputAnnotatorTypes"], [310, 3, 1, "", "loadSavedModel"], [310, 2, 1, "", "name"], [310, 2, 1, "", "outputAnnotatorType"], [310, 3, 1, "", "pretrained"], [310, 3, 1, "", "setCoalesceSentences"], [310, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[311, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[311, 2, 1, "", "configProtoBytes"], [311, 3, 1, "", "getClasses"], [311, 2, 1, "", "inputAnnotatorTypes"], [311, 3, 1, "", "loadSavedModel"], [311, 2, 1, "", "name"], [311, 2, 1, "", "outputAnnotatorType"], [311, 3, 1, "", "pretrained"], [311, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cleaners": [[312, 0, 0, "-", "cleaner"], [313, 0, 0, "-", "extractor"]], "sparknlp.annotator.cleaners.cleaner": [[312, 1, 1, "", "Cleaner"]], "sparknlp.annotator.cleaners.cleaner.Cleaner": [[312, 2, 1, "", "bullets"], [312, 2, 1, "", "cleanPostfixPattern"], [312, 2, 1, "", "cleanPrefixPattern"], [312, 2, 1, "", "cleanerMode"], [312, 2, 1, "", "dashes"], [312, 2, 1, "", "encoding"], [312, 2, 1, "", "extraWhitespace"], [312, 2, 1, "", "ignoreCase"], [312, 2, 1, "", "inputAnnotatorTypes"], [312, 2, 1, "", "lowercase"], [312, 2, 1, "", "name"], [312, 2, 1, "", "outputAnnotatorType"], [312, 3, 1, "", "setBullets"], [312, 3, 1, "", "setCleanPostfixPattern"], [312, 3, 1, "", "setCleanPrefixPattern"], [312, 3, 1, "", "setCleanerMode"], [312, 3, 1, "", "setDashes"], [312, 3, 1, "", "setEncoding"], [312, 3, 1, "", "setExtraWhitespace"], [312, 3, 1, "", "setIgnoreCase"], [312, 3, 1, "", "setLowercase"], [312, 3, 1, "", "setStrip"], [312, 3, 1, "", "setTrailingPunctuation"], [312, 2, 1, "", "strip"], [312, 2, 1, "", "trailingPunctuation"]], "sparknlp.annotator.cleaners.extractor": [[313, 1, 1, "", "Extractor"]], "sparknlp.annotator.cleaners.extractor.Extractor": [[313, 2, 1, "", "emailAddress"], [313, 2, 1, "", "emailDateTimeTzPattern"], [313, 2, 1, "", "extractorMode"], [313, 2, 1, "", "imageUrlPattern"], [313, 2, 1, "", "index"], [313, 2, 1, "", "inputAnnotatorTypes"], [313, 2, 1, "", "ipAddressNamePattern"], [313, 2, 1, "", "ipAddressPattern"], [313, 2, 1, "", "mapiIdPattern"], [313, 2, 1, "", "name"], [313, 2, 1, "", "outputAnnotatorType"], [313, 3, 1, "", "setEmailAddress"], [313, 3, 1, "", "setEmailDateTimeTzPattern"], [313, 3, 1, "", "setExtractorMode"], [313, 3, 1, "", "setImageUrlPattern"], [313, 3, 1, "", "setIndex"], [313, 3, 1, "", "setIpAddressNamePattern"], [313, 3, 1, "", "setIpAddressPattern"], [313, 3, 1, "", "setMapiIdPattern"], [313, 3, 1, "", "setTextPattern"], [313, 3, 1, "", "setUsPhoneNumbersPattern"], [313, 2, 1, "", "textPattern"], [313, 2, 1, "", "usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[316, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[316, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[316, 2, 1, "", "configProtoBytes"], [316, 2, 1, "", "inputAnnotatorTypes"], [316, 3, 1, "", "loadSavedModel"], [316, 2, 1, "", "maxSegmentLength"], [316, 2, 1, "", "name"], [316, 2, 1, "", "outputAnnotatorType"], [316, 3, 1, "", "pretrained"], [316, 3, 1, "", "setConfigProtoBytes"], [316, 3, 1, "", "setMaxSegmentLength"], [316, 3, 1, "", "setTextGenre"], [316, 2, 1, "", "textGenre"]], "sparknlp.annotator.cv": [[317, 0, 0, "-", "blip_for_question_answering"], [318, 0, 0, "-", "clip_for_zero_shot_classification"], [319, 0, 0, "-", "convnext_for_image_classification"], [320, 0, 0, "-", "florence2_transformer"], [321, 0, 0, "-", "gemma3_for_multimodal"], [323, 0, 0, "-", "internvl_for_multimodal"], [324, 0, 0, "-", "janus_for_multimodal"], [325, 0, 0, "-", "llava_for_multimodal"], [326, 0, 0, "-", "mllama_for_multimodal"], [327, 0, 0, "-", "paligemma_for_multimodal"], [328, 0, 0, "-", "phi3_vision_for_multimodal"], [329, 0, 0, "-", "qwen2vl_transformer"], [330, 0, 0, "-", "smolvlm_transformer"], [331, 0, 0, "-", "swin_for_image_classification"], [332, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [333, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[317, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[317, 2, 1, "", "configProtoBytes"], [317, 2, 1, "", "inputAnnotatorTypes"], [317, 3, 1, "", "loadSavedModel"], [317, 2, 1, "", "maxSentenceLength"], [317, 2, 1, "", "name"], [317, 2, 1, "", "outputAnnotatorType"], [317, 3, 1, "", "pretrained"], [317, 3, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[318, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[318, 2, 1, "", "configProtoBytes"], [318, 3, 1, "", "getCandidateLabels"], [318, 2, 1, "", "inputAnnotatorTypes"], [318, 3, 1, "", "loadSavedModel"], [318, 2, 1, "", "name"], [318, 2, 1, "", "outputAnnotatorType"], [318, 3, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[319, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[319, 2, 1, "", "configProtoBytes"], [319, 2, 1, "", "cropPct"], [319, 2, 1, "", "doRescale"], [319, 3, 1, "", "getClasses"], [319, 2, 1, "", "inputAnnotatorTypes"], [319, 3, 1, "", "loadSavedModel"], [319, 2, 1, "", "name"], [319, 2, 1, "", "outputAnnotatorType"], [319, 3, 1, "", "pretrained"], [319, 2, 1, "", "rescaleFactor"], [319, 3, 1, "", "setConfigProtoBytes"], [319, 3, 1, "", "setCropPct"], [319, 3, 1, "", "setDoRescale"], [319, 3, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.florence2_transformer": [[320, 1, 1, "", "Florence2Transformer"]], "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer": [[320, 2, 1, "", "batchSize"], [320, 2, 1, "", "beamSize"], [320, 2, 1, "", "doSample"], [320, 2, 1, "", "ignoreTokenIds"], [320, 2, 1, "", "inputAnnotatorTypes"], [320, 3, 1, "", "loadSavedModel"], [320, 2, 1, "", "maxOutputLength"], [320, 2, 1, "", "minOutputLength"], [320, 2, 1, "", "name"], [320, 2, 1, "", "noRepeatNgramSize"], [320, 2, 1, "", "outputAnnotatorType"], [320, 3, 1, "", "pretrained"], [320, 2, 1, "", "repetitionPenalty"], [320, 3, 1, "", "setBatchSize"], [320, 3, 1, "", "setBeamSize"], [320, 3, 1, "", "setDoSample"], [320, 3, 1, "", "setIgnoreTokenIds"], [320, 3, 1, "", "setMaxOutputLength"], [320, 3, 1, "", "setMinOutputLength"], [320, 3, 1, "", "setNoRepeatNgramSize"], [320, 3, 1, "", "setRepetitionPenalty"], [320, 3, 1, "", "setTemperature"], [320, 3, 1, "", "setTopK"], [320, 3, 1, "", "setTopP"], [320, 2, 1, "", "temperature"], [320, 2, 1, "", "topK"], [320, 2, 1, "", "topP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[321, 1, 1, "", "Gemma3ForMultiModal"]], "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal": [[321, 2, 1, "", "beamSize"], [321, 2, 1, "", "configProtoBytes"], [321, 2, 1, "", "doSample"], [321, 2, 1, "", "ignoreTokenIds"], [321, 2, 1, "", "inputAnnotatorTypes"], [321, 3, 1, "", "loadSavedModel"], [321, 2, 1, "", "maxInputLength"], [321, 2, 1, "", "maxOutputLength"], [321, 2, 1, "", "minOutputLength"], [321, 2, 1, "", "name"], [321, 2, 1, "", "noRepeatNgramSize"], [321, 2, 1, "", "outputAnnotatorType"], [321, 3, 1, "", "pretrained"], [321, 2, 1, "", "repetitionPenalty"], [321, 3, 1, "", "setBeamSize"], [321, 3, 1, "", "setConfigProtoBytes"], [321, 3, 1, "", "setDoSample"], [321, 3, 1, "", "setIgnoreTokenIds"], [321, 3, 1, "", "setMaxOutputLength"], [321, 3, 1, "", "setMaxSentenceSize"], [321, 3, 1, "", "setMinOutputLength"], [321, 3, 1, "", "setNoRepeatNgramSize"], [321, 3, 1, "", "setRepetitionPenalty"], [321, 3, 1, "", "setTemperature"], [321, 3, 1, "", "setTopK"], [321, 3, 1, "", "setTopP"], [321, 2, 1, "", "temperature"], [321, 2, 1, "", "topK"], [321, 2, 1, "", "topP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[323, 1, 1, "", "InternVLForMultiModal"]], "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal": [[323, 2, 1, "", "beamSize"], [323, 2, 1, "", "doSample"], [323, 2, 1, "", "ignoreTokenIds"], [323, 2, 1, "", "inputAnnotatorTypes"], [323, 3, 1, "", "loadSavedModel"], [323, 2, 1, "", "maxOutputLength"], [323, 2, 1, "", "minOutputLength"], [323, 2, 1, "", "name"], [323, 2, 1, "", "noRepeatNgramSize"], [323, 2, 1, "", "outputAnnotatorType"], [323, 3, 1, "", "pretrained"], [323, 2, 1, "", "repetitionPenalty"], [323, 3, 1, "", "setBeamSize"], [323, 3, 1, "", "setDoSample"], [323, 3, 1, "", "setIgnoreTokenIds"], [323, 3, 1, "", "setMaxOutputLength"], [323, 3, 1, "", "setMaxSentenceSize"], [323, 3, 1, "", "setMinOutputLength"], [323, 3, 1, "", "setNoRepeatNgramSize"], [323, 3, 1, "", "setRepetitionPenalty"], [323, 3, 1, "", "setTemperature"], [323, 3, 1, "", "setTopK"], [323, 3, 1, "", "setTopP"], [323, 2, 1, "", "temperature"], [323, 2, 1, "", "topK"], [323, 2, 1, "", "topP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[324, 1, 1, "", "JanusForMultiModal"]], "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal": [[324, 2, 1, "", "beamSize"], [324, 2, 1, "", "configProtoBytes"], [324, 2, 1, "", "doSample"], [324, 2, 1, "", "ignoreTokenIds"], [324, 2, 1, "", "imageGenerateMode"], [324, 2, 1, "", "inputAnnotatorTypes"], [324, 3, 1, "", "loadSavedModel"], [324, 2, 1, "", "maxOutputLength"], [324, 2, 1, "", "minOutputLength"], [324, 2, 1, "", "name"], [324, 2, 1, "", "noRepeatNgramSize"], [324, 2, 1, "", "numOfParallelImages"], [324, 2, 1, "", "outputAnnotatorType"], [324, 3, 1, "", "pretrained"], [324, 2, 1, "", "repetitionPenalty"], [324, 3, 1, "", "setBeamSize"], [324, 3, 1, "", "setConfigProtoBytes"], [324, 3, 1, "", "setDoSample"], [324, 3, 1, "", "setIgnoreTokenIds"], [324, 3, 1, "", "setImageGenerateMode"], [324, 3, 1, "", "setMaxOutputLength"], [324, 3, 1, "", "setMaxSentenceSize"], [324, 3, 1, "", "setMinOutputLength"], [324, 3, 1, "", "setNoRepeatNgramSize"], [324, 3, 1, "", "setNumOfParallelImages"], [324, 3, 1, "", "setRepetitionPenalty"], [324, 3, 1, "", "setTemperature"], [324, 3, 1, "", "setTopK"], [324, 3, 1, "", "setTopP"], [324, 2, 1, "", "temperature"], [324, 2, 1, "", "topK"], [324, 2, 1, "", "topP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[325, 1, 1, "", "LLAVAForMultiModal"]], "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal": [[325, 2, 1, "", "beamSize"], [325, 2, 1, "", "configProtoBytes"], [325, 2, 1, "", "doSample"], [325, 2, 1, "", "ignoreTokenIds"], [325, 2, 1, "", "inputAnnotatorTypes"], [325, 3, 1, "", "loadSavedModel"], [325, 2, 1, "", "maxOutputLength"], [325, 2, 1, "", "minOutputLength"], [325, 2, 1, "", "name"], [325, 2, 1, "", "noRepeatNgramSize"], [325, 2, 1, "", "outputAnnotatorType"], [325, 3, 1, "", "pretrained"], [325, 2, 1, "", "repetitionPenalty"], [325, 3, 1, "", "setBeamSize"], [325, 3, 1, "", "setConfigProtoBytes"], [325, 3, 1, "", "setDoSample"], [325, 3, 1, "", "setIgnoreTokenIds"], [325, 3, 1, "", "setMaxOutputLength"], [325, 3, 1, "", "setMaxSentenceSize"], [325, 3, 1, "", "setMinOutputLength"], [325, 3, 1, "", "setNoRepeatNgramSize"], [325, 3, 1, "", "setRepetitionPenalty"], [325, 3, 1, "", "setTemperature"], [325, 3, 1, "", "setTopK"], [325, 3, 1, "", "setTopP"], [325, 2, 1, "", "temperature"], [325, 2, 1, "", "topK"], [325, 2, 1, "", "topP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[326, 1, 1, "", "MLLamaForMultimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal": [[326, 2, 1, "", "beamSize"], [326, 2, 1, "", "configProtoBytes"], [326, 2, 1, "", "doSample"], [326, 2, 1, "", "ignoreTokenIds"], [326, 2, 1, "", "inputAnnotatorTypes"], [326, 3, 1, "", "loadSavedModel"], [326, 2, 1, "", "maxOutputLength"], [326, 2, 1, "", "minOutputLength"], [326, 2, 1, "", "name"], [326, 2, 1, "", "noRepeatNgramSize"], [326, 2, 1, "", "outputAnnotatorType"], [326, 3, 1, "", "pretrained"], [326, 2, 1, "", "repetitionPenalty"], [326, 3, 1, "", "setBeamSize"], [326, 3, 1, "", "setConfigProtoBytes"], [326, 3, 1, "", "setDoSample"], [326, 3, 1, "", "setIgnoreTokenIds"], [326, 3, 1, "", "setMaxOutputLength"], [326, 3, 1, "", "setMaxSentenceSize"], [326, 3, 1, "", "setMinOutputLength"], [326, 3, 1, "", "setNoRepeatNgramSize"], [326, 3, 1, "", "setRepetitionPenalty"], [326, 3, 1, "", "setTemperature"], [326, 3, 1, "", "setTopK"], [326, 3, 1, "", "setTopP"], [326, 2, 1, "", "temperature"], [326, 2, 1, "", "topK"], [326, 2, 1, "", "topP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[327, 1, 1, "", "PaliGemmaForMultiModal"]], "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal": [[327, 2, 1, "", "beamSize"], [327, 2, 1, "", "doSample"], [327, 2, 1, "", "ignoreTokenIds"], [327, 2, 1, "", "inputAnnotatorTypes"], [327, 3, 1, "", "loadSavedModel"], [327, 2, 1, "", "maxOutputLength"], [327, 2, 1, "", "minOutputLength"], [327, 2, 1, "", "name"], [327, 2, 1, "", "noRepeatNgramSize"], [327, 2, 1, "", "outputAnnotatorType"], [327, 3, 1, "", "pretrained"], [327, 2, 1, "", "repetitionPenalty"], [327, 3, 1, "", "setBeamSize"], [327, 3, 1, "", "setDoSample"], [327, 3, 1, "", "setIgnoreTokenIds"], [327, 3, 1, "", "setMaxOutputLength"], [327, 3, 1, "", "setMaxSentenceSize"], [327, 3, 1, "", "setMinOutputLength"], [327, 3, 1, "", "setNoRepeatNgramSize"], [327, 3, 1, "", "setRepetitionPenalty"], [327, 3, 1, "", "setTemperature"], [327, 3, 1, "", "setTopK"], [327, 3, 1, "", "setTopP"], [327, 2, 1, "", "temperature"], [327, 2, 1, "", "topK"], [327, 2, 1, "", "topP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[328, 1, 1, "", "Phi3Vision"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision": [[328, 2, 1, "", "beamSize"], [328, 2, 1, "", "configProtoBytes"], [328, 2, 1, "", "doSample"], [328, 2, 1, "", "ignoreTokenIds"], [328, 2, 1, "", "inputAnnotatorTypes"], [328, 3, 1, "", "loadSavedModel"], [328, 2, 1, "", "maxOutputLength"], [328, 2, 1, "", "minOutputLength"], [328, 2, 1, "", "name"], [328, 2, 1, "", "noRepeatNgramSize"], [328, 2, 1, "", "outputAnnotatorType"], [328, 3, 1, "", "pretrained"], [328, 2, 1, "", "repetitionPenalty"], [328, 3, 1, "", "setBeamSize"], [328, 3, 1, "", "setConfigProtoBytes"], [328, 3, 1, "", "setDoSample"], [328, 3, 1, "", "setIgnoreTokenIds"], [328, 3, 1, "", "setMaxOutputLength"], [328, 3, 1, "", "setMaxSentenceSize"], [328, 3, 1, "", "setMinOutputLength"], [328, 3, 1, "", "setNoRepeatNgramSize"], [328, 3, 1, "", "setRepetitionPenalty"], [328, 3, 1, "", "setTemperature"], [328, 3, 1, "", "setTopK"], [328, 3, 1, "", "setTopP"], [328, 2, 1, "", "temperature"], [328, 2, 1, "", "topK"], [328, 2, 1, "", "topP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[329, 1, 1, "", "Qwen2VLTransformer"]], "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer": [[329, 2, 1, "", "beamSize"], [329, 2, 1, "", "configProtoBytes"], [329, 2, 1, "", "doSample"], [329, 2, 1, "", "ignoreTokenIds"], [329, 2, 1, "", "inputAnnotatorTypes"], [329, 3, 1, "", "loadSavedModel"], [329, 2, 1, "", "maxOutputLength"], [329, 2, 1, "", "minOutputLength"], [329, 2, 1, "", "name"], [329, 2, 1, "", "noRepeatNgramSize"], [329, 2, 1, "", "outputAnnotatorType"], [329, 3, 1, "", "pretrained"], [329, 2, 1, "", "repetitionPenalty"], [329, 3, 1, "", "setBeamSize"], [329, 3, 1, "", "setConfigProtoBytes"], [329, 3, 1, "", "setDoSample"], [329, 3, 1, "", "setIgnoreTokenIds"], [329, 3, 1, "", "setMaxOutputLength"], [329, 3, 1, "", "setMaxSentenceSize"], [329, 3, 1, "", "setMinOutputLength"], [329, 3, 1, "", "setNoRepeatNgramSize"], [329, 3, 1, "", "setRepetitionPenalty"], [329, 3, 1, "", "setTemperature"], [329, 3, 1, "", "setTopK"], [329, 3, 1, "", "setTopP"], [329, 2, 1, "", "temperature"], [329, 2, 1, "", "topK"], [329, 2, 1, "", "topP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[330, 1, 1, "", "SmolVLMTransformer"]], "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer": [[330, 2, 1, "", "beamSize"], [330, 2, 1, "", "doImageSplitting"], [330, 2, 1, "", "doSample"], [330, 2, 1, "", "ignoreTokenIds"], [330, 2, 1, "", "imageToken"], [330, 2, 1, "", "inputAnnotatorTypes"], [330, 3, 1, "", "loadSavedModel"], [330, 2, 1, "", "maxImageSize"], [330, 2, 1, "", "maxOutputLength"], [330, 2, 1, "", "minOutputLength"], [330, 2, 1, "", "name"], [330, 2, 1, "", "noRepeatNgramSize"], [330, 2, 1, "", "numVisionTokens"], [330, 2, 1, "", "outputAnnotatorType"], [330, 2, 1, "", "paddingConstant"], [330, 2, 1, "", "patchSize"], [330, 3, 1, "", "pretrained"], [330, 2, 1, "", "repetitionPenalty"], [330, 3, 1, "", "setBeamSize"], [330, 3, 1, "", "setConfigProtoBytes"], [330, 3, 1, "", "setDoImageSplitting"], [330, 3, 1, "", "setDoSample"], [330, 3, 1, "", "setIgnoreTokenIds"], [330, 3, 1, "", "setImageToken"], [330, 3, 1, "", "setMaxImageSize"], [330, 3, 1, "", "setMaxOutputLength"], [330, 3, 1, "", "setMaxSentenceSize"], [330, 3, 1, "", "setMinOutputLength"], [330, 3, 1, "", "setNoRepeatNgramSize"], [330, 3, 1, "", "setNumVisionTokens"], [330, 3, 1, "", "setPaddingConstant"], [330, 3, 1, "", "setPatchSize"], [330, 3, 1, "", "setRepetitionPenalty"], [330, 3, 1, "", "setStopTokenIds"], [330, 3, 1, "", "setTemperature"], [330, 3, 1, "", "setTopK"], [330, 3, 1, "", "setTopP"], [330, 2, 1, "", "stopTokenIds"], [330, 2, 1, "", "temperature"], [330, 2, 1, "", "topK"], [330, 2, 1, "", "topP"]], "sparknlp.annotator.cv.swin_for_image_classification": [[331, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[331, 2, 1, "", "configProtoBytes"], [331, 3, 1, "", "getClasses"], [331, 2, 1, "", "inputAnnotatorTypes"], [331, 3, 1, "", "loadSavedModel"], [331, 2, 1, "", "name"], [331, 2, 1, "", "outputAnnotatorType"], [331, 3, 1, "", "pretrained"], [331, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[332, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[332, 2, 1, "", "configProtoBytes"], [332, 2, 1, "", "inputAnnotatorTypes"], [332, 3, 1, "", "loadSavedModel"], [332, 2, 1, "", "name"], [332, 2, 1, "", "outputAnnotatorType"], [332, 3, 1, "", "pretrained"], [332, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[333, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[333, 2, 1, "", "configProtoBytes"], [333, 3, 1, "", "getClasses"], [333, 2, 1, "", "inputAnnotatorTypes"], [333, 3, 1, "", "loadSavedModel"], [333, 2, 1, "", "name"], [333, 2, 1, "", "outputAnnotatorType"], [333, 3, 1, "", "pretrained"], [333, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.dataframe_optimizer": [[334, 1, 1, "", "DataFrameOptimizer"], [334, 5, 1, "", "toStringDict"]], "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer": [[334, 2, 1, "", "doCache"], [334, 2, 1, "", "executorCores"], [334, 2, 1, "", "numPartitions"], [334, 2, 1, "", "numWorkers"], [334, 2, 1, "", "outputOptions"], [334, 2, 1, "", "persistFormat"], [334, 2, 1, "", "persistPath"], [334, 3, 1, "", "setDoCache"], [334, 3, 1, "", "setExecutorCores"], [334, 3, 1, "", "setNumPartitions"], [334, 3, 1, "", "setNumWorkers"], [334, 3, 1, "", "setOutputOptions"], [334, 3, 1, "", "setParams"], [334, 3, 1, "", "setPersistFormat"], [334, 3, 1, "", "setPersistPath"]], "sparknlp.annotator.date2_chunk": [[335, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[335, 2, 1, "", "entityName"], [335, 2, 1, "", "inputAnnotatorTypes"], [335, 2, 1, "", "name"], [335, 2, 1, "", "outputAnnotatorType"], [335, 3, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[336, 0, 0, "-", "dependency_parser"], [338, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[336, 1, 1, "", "DependencyParserApproach"], [336, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[336, 2, 1, "", "conllU"], [336, 2, 1, "", "dependencyTreeBank"], [336, 2, 1, "", "inputAnnotatorTypes"], [336, 2, 1, "", "numberOfIterations"], [336, 2, 1, "", "outputAnnotatorType"], [336, 3, 1, "", "setConllU"], [336, 3, 1, "", "setDependencyTreeBank"], [336, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[336, 2, 1, "", "inputAnnotatorTypes"], [336, 2, 1, "", "name"], [336, 2, 1, "", "outputAnnotatorType"], [336, 2, 1, "", "perceptron"], [336, 3, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[338, 1, 1, "", "TypedDependencyParserApproach"], [338, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[338, 2, 1, "", "conll2009"], [338, 2, 1, "", "conllU"], [338, 2, 1, "", "inputAnnotatorTypes"], [338, 2, 1, "", "numberOfIterations"], [338, 2, 1, "", "outputAnnotatorType"], [338, 3, 1, "", "setConll2009"], [338, 3, 1, "", "setConllU"], [338, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[338, 2, 1, "", "conllFormat"], [338, 2, 1, "", "inputAnnotatorTypes"], [338, 2, 1, "", "name"], [338, 2, 1, "", "outputAnnotatorType"], [338, 3, 1, "", "pretrained"], [338, 2, 1, "", "trainDependencyPipe"], [338, 2, 1, "", "trainOptions"], [338, 2, 1, "", "trainParameters"]], "sparknlp.annotator.document_character_text_splitter": [[339, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[339, 2, 1, "", "chunkOverlap"], [339, 2, 1, "", "chunkSize"], [339, 2, 1, "", "explodeSplits"], [339, 2, 1, "", "inputAnnotatorTypes"], [339, 2, 1, "", "keepSeparators"], [339, 2, 1, "", "outputAnnotatorType"], [339, 2, 1, "", "patternsAreRegex"], [339, 3, 1, "", "setChunkOverlap"], [339, 3, 1, "", "setChunkSize"], [339, 3, 1, "", "setExplodeSplits"], [339, 3, 1, "", "setKeepSeparators"], [339, 3, 1, "", "setPatternsAreRegex"], [339, 3, 1, "", "setSplitPatterns"], [339, 3, 1, "", "setTrimWhitespace"], [339, 2, 1, "", "splitPatterns"], [339, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_normalizer": [[340, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[340, 2, 1, "", "action"], [340, 2, 1, "", "encoding"], [340, 2, 1, "", "inputAnnotatorTypes"], [340, 2, 1, "", "lowercase"], [340, 2, 1, "", "outputAnnotatorType"], [340, 2, 1, "", "patterns"], [340, 2, 1, "", "policy"], [340, 2, 1, "", "replacement"], [340, 3, 1, "", "setAction"], [340, 3, 1, "", "setEncoding"], [340, 3, 1, "", "setLowercase"], [340, 3, 1, "", "setPatterns"], [340, 3, 1, "", "setPolicy"], [340, 3, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[341, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[341, 2, 1, "", "explodeSplits"], [341, 2, 1, "", "inputAnnotatorTypes"], [341, 2, 1, "", "numTokens"], [341, 2, 1, "", "outputAnnotatorType"], [341, 3, 1, "", "setExplodeSplits"], [341, 3, 1, "", "setNumTokens"], [341, 3, 1, "", "setTokenOverlap"], [341, 3, 1, "", "setTrimWhitespace"], [341, 2, 1, "", "tokenOverlap"], [341, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[342, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[342, 3, 1, "", "setUp"], [342, 3, 1, "", "test_run"]], "sparknlp.annotator.embeddings": [[343, 0, 0, "-", "albert_embeddings"], [344, 0, 0, "-", "auto_gguf_embeddings"], [345, 0, 0, "-", "bert_embeddings"], [346, 0, 0, "-", "bert_sentence_embeddings"], [347, 0, 0, "-", "bge_embeddings"], [348, 0, 0, "-", "camembert_embeddings"], [349, 0, 0, "-", "chunk_embeddings"], [350, 0, 0, "-", "deberta_embeddings"], [351, 0, 0, "-", "distil_bert_embeddings"], [352, 0, 0, "-", "doc2vec"], [353, 0, 0, "-", "e5_embeddings"], [354, 0, 0, "-", "e5v_embeddings"], [355, 0, 0, "-", "elmo_embeddings"], [357, 0, 0, "-", "instructor_embeddings"], [358, 0, 0, "-", "longformer_embeddings"], [359, 0, 0, "-", "minilm_embeddings"], [360, 0, 0, "-", "mpnet_embeddings"], [361, 0, 0, "-", "mxbai_embeddings"], [362, 0, 0, "-", "nomic_embeddings"], [363, 0, 0, "-", "roberta_embeddings"], [364, 0, 0, "-", "roberta_sentence_embeddings"], [365, 0, 0, "-", "sentence_embeddings"], [366, 0, 0, "-", "snowflake_embeddings"], [367, 0, 0, "-", "uae_embeddings"], [368, 0, 0, "-", "universal_sentence_encoder"], [369, 0, 0, "-", "word2vec"], [370, 0, 0, "-", "word_embeddings"], [371, 0, 0, "-", "xlm_roberta_embeddings"], [372, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [373, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[343, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[343, 2, 1, "", "configProtoBytes"], [343, 2, 1, "", "inputAnnotatorTypes"], [343, 3, 1, "", "loadSavedModel"], [343, 2, 1, "", "name"], [343, 2, 1, "", "outputAnnotatorType"], [343, 3, 1, "", "pretrained"], [343, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[344, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[344, 2, 1, "", "defragmentationThreshold"], [344, 2, 1, "", "embedding"], [344, 2, 1, "", "flashAttention"], [344, 3, 1, "", "getMetadata"], [344, 2, 1, "", "gpuSplitMode"], [344, 2, 1, "", "grpAttnN"], [344, 2, 1, "", "grpAttnW"], [344, 2, 1, "", "inputAnnotatorTypes"], [344, 3, 1, "", "loadSavedModel"], [344, 2, 1, "", "mainGpu"], [344, 2, 1, "", "nBatch"], [344, 2, 1, "", "nChunks"], [344, 2, 1, "", "nCtx"], [344, 2, 1, "", "nGpuLayers"], [344, 2, 1, "", "nSequences"], [344, 2, 1, "", "nThreads"], [344, 2, 1, "", "nThreadsBatch"], [344, 2, 1, "", "nUbatch"], [344, 2, 1, "", "name"], [344, 2, 1, "", "noKvOffload"], [344, 2, 1, "", "numaStrategy"], [344, 2, 1, "", "outputAnnotatorType"], [344, 2, 1, "", "poolingType"], [344, 3, 1, "", "pretrained"], [344, 2, 1, "", "ropeFreqBase"], [344, 2, 1, "", "ropeFreqScale"], [344, 2, 1, "", "ropeScalingType"], [344, 3, 1, "", "setDefragmentationThreshold"], [344, 3, 1, "", "setFlashAttention"], [344, 3, 1, "", "setGpuSplitMode"], [344, 3, 1, "", "setGrpAttnN"], [344, 3, 1, "", "setGrpAttnW"], [344, 3, 1, "", "setMainGpu"], [344, 3, 1, "", "setNBatch"], [344, 3, 1, "", "setNChunks"], [344, 3, 1, "", "setNCtx"], [344, 3, 1, "", "setNGpuLayers"], [344, 3, 1, "", "setNParallel"], [344, 3, 1, "", "setNSequences"], [344, 3, 1, "", "setNThreads"], [344, 3, 1, "", "setNThreadsBatch"], [344, 3, 1, "", "setNUbatch"], [344, 3, 1, "", "setNoKvOffload"], [344, 3, 1, "", "setNumaStrategy"], [344, 3, 1, "", "setPoolingType"], [344, 3, 1, "", "setRopeFreqBase"], [344, 3, 1, "", "setRopeFreqScale"], [344, 3, 1, "", "setRopeScalingType"], [344, 3, 1, "", "setTensorSplit"], [344, 3, 1, "", "setUseMlock"], [344, 3, 1, "", "setUseMmap"], [344, 3, 1, "", "setYarnAttnFactor"], [344, 3, 1, "", "setYarnBetaFast"], [344, 3, 1, "", "setYarnBetaSlow"], [344, 3, 1, "", "setYarnExtFactor"], [344, 3, 1, "", "setYarnOrigCtx"], [344, 2, 1, "", "tensorSplit"], [344, 2, 1, "", "useMlock"], [344, 2, 1, "", "useMmap"], [344, 2, 1, "", "yarnAttnFactor"], [344, 2, 1, "", "yarnBetaFast"], [344, 2, 1, "", "yarnBetaSlow"], [344, 2, 1, "", "yarnExtFactor"], [344, 2, 1, "", "yarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[345, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[345, 2, 1, "", "configProtoBytes"], [345, 2, 1, "", "inputAnnotatorTypes"], [345, 3, 1, "", "loadSavedModel"], [345, 2, 1, "", "name"], [345, 2, 1, "", "outputAnnotatorType"], [345, 3, 1, "", "pretrained"], [345, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[346, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[346, 2, 1, "", "configProtoBytes"], [346, 2, 1, "", "inputAnnotatorTypes"], [346, 2, 1, "", "isLong"], [346, 3, 1, "", "loadSavedModel"], [346, 2, 1, "", "name"], [346, 2, 1, "", "outputAnnotatorType"], [346, 3, 1, "", "pretrained"], [346, 3, 1, "", "setConfigProtoBytes"], [346, 3, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[347, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[347, 2, 1, "", "configProtoBytes"], [347, 2, 1, "", "inputAnnotatorTypes"], [347, 3, 1, "", "loadSavedModel"], [347, 2, 1, "", "name"], [347, 2, 1, "", "outputAnnotatorType"], [347, 3, 1, "", "pretrained"], [347, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[348, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[348, 2, 1, "", "configProtoBytes"], [348, 2, 1, "", "inputAnnotatorTypes"], [348, 3, 1, "", "loadSavedModel"], [348, 2, 1, "", "name"], [348, 2, 1, "", "outputAnnotatorType"], [348, 3, 1, "", "pretrained"], [348, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[349, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[349, 2, 1, "", "inputAnnotatorTypes"], [349, 2, 1, "", "name"], [349, 2, 1, "", "outputAnnotatorType"], [349, 2, 1, "", "poolingStrategy"], [349, 3, 1, "", "setPoolingStrategy"], [349, 3, 1, "", "setSkipOOV"], [349, 2, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[350, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[350, 2, 1, "", "configProtoBytes"], [350, 2, 1, "", "inputAnnotatorTypes"], [350, 3, 1, "", "loadSavedModel"], [350, 2, 1, "", "name"], [350, 2, 1, "", "outputAnnotatorType"], [350, 3, 1, "", "pretrained"], [350, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[351, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[351, 2, 1, "", "configProtoBytes"], [351, 2, 1, "", "inputAnnotatorTypes"], [351, 3, 1, "", "loadSavedModel"], [351, 2, 1, "", "name"], [351, 2, 1, "", "outputAnnotatorType"], [351, 3, 1, "", "pretrained"], [351, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[352, 1, 1, "", "Doc2VecApproach"], [352, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[352, 2, 1, "", "inputAnnotatorTypes"], [352, 2, 1, "", "maxIter"], [352, 2, 1, "", "maxSentenceLength"], [352, 2, 1, "", "minCount"], [352, 2, 1, "", "numPartitions"], [352, 2, 1, "", "outputAnnotatorType"], [352, 2, 1, "", "seed"], [352, 3, 1, "", "setMaxIter"], [352, 3, 1, "", "setMaxSentenceLength"], [352, 3, 1, "", "setMinCount"], [352, 3, 1, "", "setNumPartitions"], [352, 3, 1, "", "setSeed"], [352, 3, 1, "", "setStepSize"], [352, 3, 1, "", "setVectorSize"], [352, 3, 1, "", "setWindowSize"], [352, 2, 1, "", "stepSize"], [352, 2, 1, "", "vectorSize"], [352, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[352, 3, 1, "", "getVectors"], [352, 2, 1, "", "inputAnnotatorTypes"], [352, 2, 1, "", "name"], [352, 2, 1, "", "outputAnnotatorType"], [352, 3, 1, "", "pretrained"], [352, 3, 1, "", "setVectorSize"], [352, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[353, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[353, 2, 1, "", "configProtoBytes"], [353, 2, 1, "", "inputAnnotatorTypes"], [353, 3, 1, "", "loadSavedModel"], [353, 2, 1, "", "name"], [353, 2, 1, "", "outputAnnotatorType"], [353, 3, 1, "", "pretrained"], [353, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[354, 1, 1, "", "E5VEmbeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings": [[354, 2, 1, "", "inputAnnotatorTypes"], [354, 3, 1, "", "loadSavedModel"], [354, 2, 1, "", "name"], [354, 2, 1, "", "outputAnnotatorType"], [354, 3, 1, "", "pretrained"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[355, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[355, 2, 1, "", "batchSize"], [355, 2, 1, "", "configProtoBytes"], [355, 2, 1, "", "inputAnnotatorTypes"], [355, 3, 1, "", "loadSavedModel"], [355, 2, 1, "", "name"], [355, 2, 1, "", "outputAnnotatorType"], [355, 2, 1, "", "poolingLayer"], [355, 3, 1, "", "pretrained"], [355, 3, 1, "", "setBatchSize"], [355, 3, 1, "", "setConfigProtoBytes"], [355, 3, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[357, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[357, 2, 1, "", "configProtoBytes"], [357, 2, 1, "", "inputAnnotatorTypes"], [357, 2, 1, "", "instruction"], [357, 3, 1, "", "loadSavedModel"], [357, 2, 1, "", "name"], [357, 2, 1, "", "outputAnnotatorType"], [357, 3, 1, "", "pretrained"], [357, 3, 1, "", "setConfigProtoBytes"], [357, 3, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[358, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[358, 2, 1, "", "configProtoBytes"], [358, 2, 1, "", "inputAnnotatorTypes"], [358, 3, 1, "", "loadSavedModel"], [358, 2, 1, "", "name"], [358, 2, 1, "", "outputAnnotatorType"], [358, 3, 1, "", "pretrained"], [358, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.minilm_embeddings": [[359, 1, 1, "", "MiniLMEmbeddings"]], "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings": [[359, 2, 1, "", "configProtoBytes"], [359, 2, 1, "", "inputAnnotatorTypes"], [359, 3, 1, "", "loadSavedModel"], [359, 2, 1, "", "name"], [359, 2, 1, "", "outputAnnotatorType"], [359, 3, 1, "", "pretrained"], [359, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[360, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[360, 2, 1, "", "configProtoBytes"], [360, 2, 1, "", "inputAnnotatorTypes"], [360, 3, 1, "", "loadSavedModel"], [360, 2, 1, "", "name"], [360, 2, 1, "", "outputAnnotatorType"], [360, 3, 1, "", "pretrained"], [360, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[361, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[361, 2, 1, "", "inputAnnotatorTypes"], [361, 3, 1, "", "loadSavedModel"], [361, 2, 1, "", "name"], [361, 2, 1, "", "outputAnnotatorType"], [361, 2, 1, "", "poolingStrategy"], [361, 3, 1, "", "pretrained"], [361, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[362, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[362, 2, 1, "", "configProtoBytes"], [362, 2, 1, "", "inputAnnotatorTypes"], [362, 3, 1, "", "loadSavedModel"], [362, 2, 1, "", "name"], [362, 2, 1, "", "outputAnnotatorType"], [362, 3, 1, "", "pretrained"], [362, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[363, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[363, 2, 1, "", "configProtoBytes"], [363, 2, 1, "", "inputAnnotatorTypes"], [363, 3, 1, "", "loadSavedModel"], [363, 2, 1, "", "name"], [363, 2, 1, "", "outputAnnotatorType"], [363, 3, 1, "", "pretrained"], [363, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[364, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[364, 2, 1, "", "configProtoBytes"], [364, 2, 1, "", "inputAnnotatorTypes"], [364, 3, 1, "", "loadSavedModel"], [364, 2, 1, "", "name"], [364, 2, 1, "", "outputAnnotatorType"], [364, 3, 1, "", "pretrained"], [364, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[365, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[365, 2, 1, "", "inputAnnotatorTypes"], [365, 2, 1, "", "name"], [365, 2, 1, "", "outputAnnotatorType"], [365, 2, 1, "", "poolingStrategy"], [365, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[366, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[366, 2, 1, "", "inputAnnotatorTypes"], [366, 3, 1, "", "loadSavedModel"], [366, 2, 1, "", "name"], [366, 2, 1, "", "outputAnnotatorType"], [366, 2, 1, "", "poolingStrategy"], [366, 3, 1, "", "pretrained"], [366, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[367, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[367, 2, 1, "", "inputAnnotatorTypes"], [367, 3, 1, "", "loadSavedModel"], [367, 2, 1, "", "name"], [367, 2, 1, "", "outputAnnotatorType"], [367, 2, 1, "", "poolingStrategy"], [367, 3, 1, "", "pretrained"], [367, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[368, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[368, 2, 1, "", "configProtoBytes"], [368, 2, 1, "", "inputAnnotatorTypes"], [368, 2, 1, "", "loadSP"], [368, 3, 1, "", "loadSavedModel"], [368, 2, 1, "", "name"], [368, 2, 1, "", "outputAnnotatorType"], [368, 3, 1, "", "pretrained"], [368, 3, 1, "", "setConfigProtoBytes"], [368, 3, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[369, 1, 1, "", "Word2VecApproach"], [369, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[369, 2, 1, "", "inputAnnotatorTypes"], [369, 2, 1, "", "maxIter"], [369, 2, 1, "", "maxSentenceLength"], [369, 2, 1, "", "minCount"], [369, 2, 1, "", "numPartitions"], [369, 2, 1, "", "outputAnnotatorType"], [369, 2, 1, "", "seed"], [369, 3, 1, "", "setMaxIter"], [369, 3, 1, "", "setMaxSentenceLength"], [369, 3, 1, "", "setMinCount"], [369, 3, 1, "", "setNumPartitions"], [369, 3, 1, "", "setSeed"], [369, 3, 1, "", "setStepSize"], [369, 3, 1, "", "setVectorSize"], [369, 3, 1, "", "setWindowSize"], [369, 2, 1, "", "stepSize"], [369, 2, 1, "", "vectorSize"], [369, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[369, 3, 1, "", "getVectors"], [369, 2, 1, "", "inputAnnotatorTypes"], [369, 2, 1, "", "name"], [369, 2, 1, "", "outputAnnotatorType"], [369, 3, 1, "", "pretrained"], [369, 3, 1, "", "setVectorSize"], [369, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[370, 1, 1, "", "WordEmbeddings"], [370, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[370, 2, 1, "", "inputAnnotatorTypes"], [370, 2, 1, "", "name"], [370, 2, 1, "", "outputAnnotatorType"], [370, 2, 1, "", "readCacheSize"], [370, 3, 1, "", "setReadCacheSize"], [370, 3, 1, "", "setWriteBufferSize"], [370, 2, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[370, 2, 1, "", "databases"], [370, 2, 1, "", "inputAnnotatorTypes"], [370, 3, 1, "", "loadStorage"], [370, 2, 1, "", "name"], [370, 2, 1, "", "outputAnnotatorType"], [370, 3, 1, "", "overallCoverage"], [370, 3, 1, "", "pretrained"], [370, 2, 1, "", "readCacheSize"], [370, 3, 1, "", "setReadCacheSize"], [370, 3, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[371, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[371, 2, 1, "", "configProtoBytes"], [371, 2, 1, "", "inputAnnotatorTypes"], [371, 3, 1, "", "loadSavedModel"], [371, 2, 1, "", "name"], [371, 2, 1, "", "outputAnnotatorType"], [371, 3, 1, "", "pretrained"], [371, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[372, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[372, 2, 1, "", "configProtoBytes"], [372, 2, 1, "", "inputAnnotatorTypes"], [372, 3, 1, "", "loadSavedModel"], [372, 2, 1, "", "name"], [372, 2, 1, "", "outputAnnotatorType"], [372, 3, 1, "", "pretrained"], [372, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[373, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[373, 2, 1, "", "configProtoBytes"], [373, 2, 1, "", "inputAnnotatorTypes"], [373, 3, 1, "", "loadSavedModel"], [373, 2, 1, "", "name"], [373, 2, 1, "", "outputAnnotatorType"], [373, 3, 1, "", "pretrained"], [373, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[374, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[374, 1, 1, "", "EntityRulerApproach"], [374, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[374, 2, 1, "", "alphabet"], [374, 2, 1, "", "inputAnnotatorTypes"], [374, 2, 1, "", "name"], [374, 2, 1, "", "optionalInputAnnotatorTypes"], [374, 2, 1, "", "outputAnnotatorType"], [374, 2, 1, "", "patternsResource"], [374, 2, 1, "", "sentenceMatch"], [374, 3, 1, "", "setAlphabetResource"], [374, 3, 1, "", "setPatternsResource"], [374, 3, 1, "", "setSentenceMatch"], [374, 3, 1, "", "setUseStorage"], [374, 2, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[374, 2, 1, "", "database"], [374, 2, 1, "", "inputAnnotatorTypes"], [374, 3, 1, "", "loadStorage"], [374, 2, 1, "", "name"], [374, 2, 1, "", "optionalInputAnnotatorTypes"], [374, 2, 1, "", "outputAnnotatorType"], [374, 3, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[376, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[376, 2, 1, "", "delimiter"], [376, 2, 1, "", "dependencyParserModel"], [376, 2, 1, "", "entityTypes"], [376, 2, 1, "", "explodeEntities"], [376, 2, 1, "", "includeEdges"], [376, 2, 1, "", "inputAnnotatorTypes"], [376, 2, 1, "", "maxSentenceSize"], [376, 2, 1, "", "mergeEntities"], [376, 2, 1, "", "mergeEntitiesIOBFormat"], [376, 2, 1, "", "minSentenceSize"], [376, 2, 1, "", "name"], [376, 2, 1, "", "optionalInputAnnotatorTypes"], [376, 2, 1, "", "outputAnnotatorType"], [376, 2, 1, "", "posModel"], [376, 2, 1, "", "relationshipTypes"], [376, 2, 1, "", "rootTokens"], [376, 3, 1, "", "setDelimiter"], [376, 3, 1, "", "setDependencyParserModel"], [376, 3, 1, "", "setEntityTypes"], [376, 3, 1, "", "setExplodeEntities"], [376, 3, 1, "", "setIncludeEdges"], [376, 3, 1, "", "setMaxSentenceSize"], [376, 3, 1, "", "setMergeEntities"], [376, 3, 1, "", "setMergeEntitiesIOBFormat"], [376, 3, 1, "", "setMinSentenceSize"], [376, 3, 1, "", "setPosModel"], [376, 3, 1, "", "setRelationshipTypes"], [376, 3, 1, "", "setRootTokens"], [376, 3, 1, "", "setTypedDependencyParserModel"], [376, 2, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[379, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[379, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[379, 3, 1, "", "getStopWords"], [379, 2, 1, "", "inputAnnotatorTypes"], [379, 3, 1, "", "loadDefaultStopWords"], [379, 2, 1, "", "maxNGrams"], [379, 2, 1, "", "minNGrams"], [379, 2, 1, "", "nKeywords"], [379, 2, 1, "", "name"], [379, 2, 1, "", "outputAnnotatorType"], [379, 3, 1, "", "setMaxNGrams"], [379, 3, 1, "", "setMinNGrams"], [379, 3, 1, "", "setNKeywords"], [379, 3, 1, "", "setStopWords"], [379, 3, 1, "", "setThreshold"], [379, 3, 1, "", "setWindowSize"], [379, 2, 1, "", "stopWords"], [379, 2, 1, "", "threshold"], [379, 2, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[381, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[381, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[381, 2, 1, "", "coalesceSentences"], [381, 2, 1, "", "configProtoBytes"], [381, 2, 1, "", "inputAnnotatorTypes"], [381, 2, 1, "", "languages"], [381, 2, 1, "", "name"], [381, 2, 1, "", "outputAnnotatorType"], [381, 3, 1, "", "pretrained"], [381, 3, 1, "", "setCoalesceSentences"], [381, 3, 1, "", "setConfigProtoBytes"], [381, 3, 1, "", "setThreshold"], [381, 3, 1, "", "setThresholdLabel"], [381, 2, 1, "", "threshold"], [381, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[382, 1, 1, "", "Lemmatizer"], [382, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[382, 2, 1, "", "dictionary"], [382, 2, 1, "", "formCol"], [382, 2, 1, "", "inputAnnotatorTypes"], [382, 2, 1, "", "lemmaCol"], [382, 2, 1, "", "outputAnnotatorType"], [382, 3, 1, "", "setDictionary"], [382, 3, 1, "", "setFormCol"], [382, 3, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[382, 2, 1, "", "inputAnnotatorTypes"], [382, 2, 1, "", "name"], [382, 2, 1, "", "outputAnnotatorType"], [382, 3, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[383, 0, 0, "-", "big_text_matcher"], [384, 0, 0, "-", "date_matcher"], [386, 0, 0, "-", "multi_date_matcher"], [387, 0, 0, "-", "regex_matcher"], [388, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[383, 1, 1, "", "BigTextMatcher"], [383, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[383, 2, 1, "", "caseSensitive"], [383, 2, 1, "", "entities"], [383, 2, 1, "", "inputAnnotatorTypes"], [383, 2, 1, "", "mergeOverlapping"], [383, 2, 1, "", "outputAnnotatorType"], [383, 3, 1, "", "setCaseSensitive"], [383, 3, 1, "", "setEntities"], [383, 3, 1, "", "setMergeOverlapping"], [383, 3, 1, "", "setTokenizer"], [383, 2, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[383, 2, 1, "", "caseSensitive"], [383, 2, 1, "", "databases"], [383, 2, 1, "", "inputAnnotatorTypes"], [383, 3, 1, "", "loadStorage"], [383, 2, 1, "", "mergeOverlapping"], [383, 2, 1, "", "name"], [383, 2, 1, "", "outputAnnotatorType"], [383, 3, 1, "", "pretrained"], [383, 2, 1, "", "searchTrie"], [383, 3, 1, "", "setCaseSensitive"], [383, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[384, 1, 1, "", "DateMatcher"], [384, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[384, 2, 1, "", "inputAnnotatorTypes"], [384, 2, 1, "", "name"], [384, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[384, 2, 1, "", "aggressiveMatching"], [384, 2, 1, "", "anchorDateDay"], [384, 2, 1, "", "anchorDateMonth"], [384, 2, 1, "", "anchorDateYear"], [384, 2, 1, "", "defaultDayWhenMissing"], [384, 2, 1, "", "inputFormats"], [384, 2, 1, "", "outputFormat"], [384, 2, 1, "", "readMonthFirst"], [384, 2, 1, "", "relaxedFactoryStrategy"], [384, 3, 1, "", "setAggressiveMatching"], [384, 3, 1, "", "setAnchorDateDay"], [384, 3, 1, "", "setAnchorDateMonth"], [384, 3, 1, "", "setAnchorDateYear"], [384, 3, 1, "", "setDefaultDayWhenMissing"], [384, 3, 1, "", "setInputFormats"], [384, 3, 1, "", "setOutputFormat"], [384, 3, 1, "", "setReadMonthFirst"], [384, 3, 1, "", "setRelaxedFactoryStrategy"], [384, 3, 1, "", "setSourceLanguage"], [384, 2, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[386, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[386, 2, 1, "", "inputAnnotatorTypes"], [386, 2, 1, "", "name"], [386, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.regex_matcher": [[387, 1, 1, "", "RegexMatcher"], [387, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[387, 2, 1, "", "delimiter"], [387, 2, 1, "", "externalRules"], [387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "outputAnnotatorType"], [387, 2, 1, "", "rules"], [387, 3, 1, "", "setDelimiter"], [387, 3, 1, "", "setExternalRules"], [387, 3, 1, "", "setRules"], [387, 3, 1, "", "setStrategy"], [387, 2, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "name"], [387, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.text_matcher": [[388, 1, 1, "", "TextMatcher"], [388, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[388, 2, 1, "", "buildFromTokens"], [388, 2, 1, "", "caseSensitive"], [388, 2, 1, "", "entities"], [388, 2, 1, "", "entityValue"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 2, 1, "", "mergeOverlapping"], [388, 2, 1, "", "outputAnnotatorType"], [388, 3, 1, "", "setBuildFromTokens"], [388, 3, 1, "", "setCaseSensitive"], [388, 3, 1, "", "setEntities"], [388, 3, 1, "", "setEntityValue"], [388, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[388, 2, 1, "", "buildFromTokens"], [388, 2, 1, "", "entityValue"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 2, 1, "", "mergeOverlapping"], [388, 2, 1, "", "name"], [388, 2, 1, "", "outputAnnotatorType"], [388, 3, 1, "", "pretrained"], [388, 2, 1, "", "searchTrie"], [388, 3, 1, "", "setBuildFromTokens"], [388, 3, 1, "", "setEntityValue"], [388, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[389, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[389, 2, 1, "", "delimiter"], [389, 2, 1, "", "enableCumulative"], [389, 2, 1, "", "inputAnnotatorTypes"], [389, 2, 1, "", "n"], [389, 2, 1, "", "name"], [389, 2, 1, "", "outputAnnotatorType"], [389, 3, 1, "", "setDelimiter"], [389, 3, 1, "", "setEnableCumulative"], [389, 3, 1, "", "setN"]], "sparknlp.annotator.ner": [[391, 0, 0, "-", "ner_approach"], [392, 0, 0, "-", "ner_converter"], [393, 0, 0, "-", "ner_crf"], [394, 0, 0, "-", "ner_dl"], [395, 0, 0, "-", "ner_overwriter"], [396, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[391, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[391, 2, 1, "", "entities"], [391, 3, 1, "", "getLabelColumn"], [391, 2, 1, "", "labelColumn"], [391, 2, 1, "", "maxEpochs"], [391, 2, 1, "", "minEpochs"], [391, 2, 1, "", "randomSeed"], [391, 3, 1, "", "setEntities"], [391, 3, 1, "", "setLabelColumn"], [391, 3, 1, "", "setMaxEpochs"], [391, 3, 1, "", "setMinEpochs"], [391, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[392, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[392, 2, 1, "", "inputAnnotatorTypes"], [392, 2, 1, "", "name"], [392, 2, 1, "", "nerHasNoSchema"], [392, 2, 1, "", "outputAnnotatorType"], [392, 2, 1, "", "preservePosition"], [392, 3, 1, "", "setNerHasNoSchema"], [392, 3, 1, "", "setPreservePosition"], [392, 3, 1, "", "setWhiteList"], [392, 2, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[393, 1, 1, "", "NerCrfApproach"], [393, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[393, 2, 1, "", "c0"], [393, 2, 1, "", "externalFeatures"], [393, 2, 1, "", "includeConfidence"], [393, 2, 1, "", "inputAnnotatorTypes"], [393, 2, 1, "", "l2"], [393, 2, 1, "", "lossEps"], [393, 2, 1, "", "minW"], [393, 2, 1, "", "outputAnnotatorType"], [393, 3, 1, "", "setC0"], [393, 3, 1, "", "setExternalFeatures"], [393, 3, 1, "", "setIncludeConfidence"], [393, 3, 1, "", "setL2"], [393, 3, 1, "", "setLossEps"], [393, 3, 1, "", "setMinW"], [393, 3, 1, "", "setVerbose"], [393, 2, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[393, 2, 1, "", "includeConfidence"], [393, 2, 1, "", "inputAnnotatorTypes"], [393, 2, 1, "", "name"], [393, 2, 1, "", "outputAnnotatorType"], [393, 3, 1, "", "pretrained"], [393, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[394, 1, 1, "", "NerDLApproach"], [394, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[394, 2, 1, "", "batchSize"], [394, 2, 1, "", "bestModelMetric"], [394, 2, 1, "", "configProtoBytes"], [394, 2, 1, "", "dropout"], [394, 2, 1, "", "enableMemoryOptimizer"], [394, 2, 1, "", "graphFolder"], [394, 2, 1, "", "includeAllConfidenceScores"], [394, 2, 1, "", "includeConfidence"], [394, 2, 1, "", "inputAnnotatorTypes"], [394, 2, 1, "", "lr"], [394, 2, 1, "", "outputAnnotatorType"], [394, 2, 1, "", "po"], [394, 3, 1, "", "setBatchSize"], [394, 3, 1, "", "setBestModelMetric"], [394, 3, 1, "", "setConfigProtoBytes"], [394, 3, 1, "", "setDropout"], [394, 3, 1, "", "setEnableMemoryOptimizer"], [394, 3, 1, "", "setGraphFolder"], [394, 3, 1, "", "setIncludeAllConfidenceScores"], [394, 3, 1, "", "setIncludeConfidence"], [394, 3, 1, "", "setLr"], [394, 3, 1, "", "setPo"], [394, 3, 1, "", "setUseBestModel"], [394, 3, 1, "", "setUseContrib"], [394, 2, 1, "", "useBestModel"], [394, 2, 1, "", "useContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[394, 2, 1, "", "classes"], [394, 2, 1, "", "configProtoBytes"], [394, 2, 1, "", "includeAllConfidenceScores"], [394, 2, 1, "", "includeConfidence"], [394, 2, 1, "", "inputAnnotatorTypes"], [394, 2, 1, "", "name"], [394, 2, 1, "", "outputAnnotatorType"], [394, 3, 1, "", "pretrained"], [394, 3, 1, "", "setConfigProtoBytes"], [394, 3, 1, "", "setIncludeAllConfidenceScores"], [394, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[395, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[395, 2, 1, "", "inputAnnotatorTypes"], [395, 2, 1, "", "name"], [395, 2, 1, "", "nerWords"], [395, 2, 1, "", "newNerEntity"], [395, 2, 1, "", "outputAnnotatorType"], [395, 2, 1, "", "replaceEntities"], [395, 3, 1, "", "setNerWords"], [395, 3, 1, "", "setNewNerEntity"], [395, 3, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[396, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[396, 3, 1, "", "getClasses"], [396, 2, 1, "", "ignoreEntities"], [396, 2, 1, "", "inputAnnotatorTypes"], [396, 3, 1, "", "load"], [396, 2, 1, "", "name"], [396, 2, 1, "", "outputAnnotatorType"], [396, 2, 1, "", "predictionThreshold"], [396, 3, 1, "", "pretrained"], [396, 3, 1, "", "setEntityDefinitions"], [396, 3, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[397, 1, 1, "", "Normalizer"], [397, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[397, 2, 1, "", "cleanupPatterns"], [397, 2, 1, "", "inputAnnotatorTypes"], [397, 2, 1, "", "lowercase"], [397, 2, 1, "", "maxLength"], [397, 2, 1, "", "minLength"], [397, 2, 1, "", "outputAnnotatorType"], [397, 3, 1, "", "setCleanupPatterns"], [397, 3, 1, "", "setLowercase"], [397, 3, 1, "", "setMaxLength"], [397, 3, 1, "", "setMinLength"], [397, 3, 1, "", "setSlangDictionary"], [397, 2, 1, "", "slangDictionary"], [397, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[397, 2, 1, "", "cleanupPatterns"], [397, 2, 1, "", "inputAnnotatorTypes"], [397, 2, 1, "", "lowercase"], [397, 2, 1, "", "name"], [397, 2, 1, "", "outputAnnotatorType"], [397, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.openai": [[399, 0, 0, "-", "openai_completion"], [400, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[399, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[399, 2, 1, "", "bestOf"], [399, 2, 1, "", "echo"], [399, 2, 1, "", "frequencyPenalty"], [399, 2, 1, "", "inputAnnotatorTypes"], [399, 2, 1, "", "logitBias"], [399, 2, 1, "", "logprobs"], [399, 2, 1, "", "maxTokens"], [399, 2, 1, "", "model"], [399, 2, 1, "", "name"], [399, 2, 1, "", "numberOfCompletions"], [399, 2, 1, "", "outputAnnotatorType"], [399, 2, 1, "", "presencePenalty"], [399, 3, 1, "", "setBestOf"], [399, 3, 1, "", "setEcho"], [399, 3, 1, "", "setFrequencyPenalty"], [399, 3, 1, "", "setLogitBias"], [399, 3, 1, "", "setLogprobs"], [399, 3, 1, "", "setMaxTokens"], [399, 3, 1, "", "setModel"], [399, 3, 1, "", "setNumberOfCompletions"], [399, 3, 1, "", "setPresencePenalty"], [399, 3, 1, "", "setStop"], [399, 3, 1, "", "setSuffix"], [399, 3, 1, "", "setTemperature"], [399, 3, 1, "", "setTopP"], [399, 3, 1, "", "setUser"], [399, 2, 1, "", "stop"], [399, 2, 1, "", "suffix"], [399, 2, 1, "", "temperature"], [399, 2, 1, "", "topP"], [399, 2, 1, "", "user"]], "sparknlp.annotator.openai.openai_embeddings": [[400, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[400, 2, 1, "", "inputAnnotatorTypes"], [400, 2, 1, "", "model"], [400, 2, 1, "", "name"], [400, 2, 1, "", "outputAnnotatorType"], [400, 3, 1, "", "setModel"], [400, 3, 1, "", "setUser"], [400, 2, 1, "", "user"]], "sparknlp.annotator.param": [[401, 0, 0, "-", "classifier_encoder"], [402, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[401, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[401, 2, 1, "", "batchSize"], [401, 2, 1, "", "configProtoBytes"], [401, 2, 1, "", "labelColumn"], [401, 2, 1, "", "lr"], [401, 2, 1, "", "maxEpochs"], [401, 2, 1, "", "randomSeed"], [401, 3, 1, "", "setBatchSize"], [401, 3, 1, "", "setConfigProtoBytes"], [401, 3, 1, "", "setLabelColumn"], [401, 3, 1, "", "setLr"], [401, 3, 1, "", "setMaxEpochs"], [401, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[402, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[402, 2, 1, "", "enableOutputLogs"], [402, 2, 1, "", "evaluationLogExtended"], [402, 2, 1, "", "outputLogsPath"], [402, 3, 1, "", "setEnableOutputLogs"], [402, 3, 1, "", "setEvaluationLogExtended"], [402, 3, 1, "", "setOutputLogsPath"], [402, 3, 1, "", "setTestDataset"], [402, 3, 1, "", "setValidationSplit"], [402, 3, 1, "", "setVerbose"], [402, 2, 1, "", "testDataset"], [402, 2, 1, "", "validationSplit"], [402, 2, 1, "", "verbose"]], "sparknlp.annotator.pos": [[405, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[405, 1, 1, "", "PerceptronApproach"], [405, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[405, 3, 1, "", "getNIterations"], [405, 2, 1, "", "inputAnnotatorTypes"], [405, 2, 1, "", "nIterations"], [405, 2, 1, "", "outputAnnotatorType"], [405, 2, 1, "", "posCol"], [405, 3, 1, "", "setIterations"], [405, 3, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[405, 2, 1, "", "inputAnnotatorTypes"], [405, 2, 1, "", "name"], [405, 2, 1, "", "outputAnnotatorType"], [405, 3, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[407, 0, 0, "-", "sentence_detector"], [408, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[407, 1, 1, "", "SentenceDetector"], [407, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[407, 2, 1, "", "detectLists"], [407, 2, 1, "", "inputAnnotatorTypes"], [407, 2, 1, "", "name"], [407, 2, 1, "", "outputAnnotatorType"], [407, 3, 1, "", "setCustomBounds"], [407, 3, 1, "", "setCustomBoundsStrategy"], [407, 3, 1, "", "setDetectLists"], [407, 3, 1, "", "setExplodeSentences"], [407, 3, 1, "", "setMaxLength"], [407, 3, 1, "", "setMinLength"], [407, 3, 1, "", "setSplitLength"], [407, 3, 1, "", "setUseAbbreviations"], [407, 3, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[407, 2, 1, "", "customBounds"], [407, 2, 1, "", "customBoundsStrategy"], [407, 2, 1, "", "explodeSentences"], [407, 2, 1, "", "maxLength"], [407, 2, 1, "", "minLength"], [407, 2, 1, "", "splitLength"], [407, 2, 1, "", "useAbbreviations"], [407, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[408, 1, 1, "", "SentenceDetectorDLApproach"], [408, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[408, 2, 1, "", "epochsNumber"], [408, 2, 1, "", "explodeSentences"], [408, 2, 1, "", "impossiblePenultimates"], [408, 2, 1, "", "inputAnnotatorTypes"], [408, 2, 1, "", "modelArchitecture"], [408, 2, 1, "", "name"], [408, 2, 1, "", "outputAnnotatorType"], [408, 2, 1, "", "outputLogsPath"], [408, 3, 1, "", "setEpochsNumber"], [408, 3, 1, "", "setExplodeSentences"], [408, 3, 1, "", "setImpossiblePenultimates"], [408, 3, 1, "", "setModel"], [408, 3, 1, "", "setOutputLogsPath"], [408, 3, 1, "", "setValidationSplit"], [408, 2, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[408, 2, 1, "", "customBounds"], [408, 2, 1, "", "explodeSentences"], [408, 2, 1, "", "impossiblePenultimates"], [408, 2, 1, "", "inputAnnotatorTypes"], [408, 2, 1, "", "maxLength"], [408, 2, 1, "", "minLength"], [408, 2, 1, "", "modelArchitecture"], [408, 2, 1, "", "name"], [408, 2, 1, "", "outputAnnotatorType"], [408, 3, 1, "", "pretrained"], [408, 3, 1, "", "setCustomBounds"], [408, 3, 1, "", "setExplodeSentences"], [408, 3, 1, "", "setImpossiblePenultimates"], [408, 3, 1, "", "setMaxLength"], [408, 3, 1, "", "setMinLength"], [408, 3, 1, "", "setModel"], [408, 3, 1, "", "setSplitLength"], [408, 3, 1, "", "setUseCustomBoundsOnly"], [408, 2, 1, "", "splitLength"], [408, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[410, 0, 0, "-", "sentiment_detector"], [411, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[410, 1, 1, "", "SentimentDetector"], [410, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[410, 2, 1, "", "decrementMultiplier"], [410, 2, 1, "", "dictionary"], [410, 2, 1, "", "enableScore"], [410, 2, 1, "", "incrementMultiplier"], [410, 2, 1, "", "inputAnnotatorTypes"], [410, 2, 1, "", "negativeMultiplier"], [410, 2, 1, "", "outputAnnotatorType"], [410, 2, 1, "", "positiveMultiplier"], [410, 2, 1, "", "reverseMultiplier"], [410, 3, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[410, 2, 1, "", "inputAnnotatorTypes"], [410, 2, 1, "", "name"], [410, 2, 1, "", "outputAnnotatorType"], [410, 2, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[411, 1, 1, "", "ViveknSentimentApproach"], [411, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[411, 2, 1, "", "featureLimit"], [411, 2, 1, "", "importantFeatureRatio"], [411, 2, 1, "", "inputAnnotatorTypes"], [411, 2, 1, "", "outputAnnotatorType"], [411, 2, 1, "", "pruneCorpus"], [411, 2, 1, "", "sentimentCol"], [411, 3, 1, "", "setPruneCorpus"], [411, 3, 1, "", "setSentimentCol"], [411, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[411, 2, 1, "", "featureLimit"], [411, 2, 1, "", "importantFeatureRatio"], [411, 2, 1, "", "inputAnnotatorTypes"], [411, 2, 1, "", "name"], [411, 2, 1, "", "outputAnnotatorType"], [411, 3, 1, "", "pretrained"], [411, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[412, 0, 0, "-", "auto_gguf_model"], [413, 0, 0, "-", "auto_gguf_vision_model"], [414, 0, 0, "-", "bart_transformer"], [415, 0, 0, "-", "cohere_transformer"], [416, 0, 0, "-", "cpm_transformer"], [417, 0, 0, "-", "gpt2_transformer"], [419, 0, 0, "-", "llama2_transformer"], [420, 0, 0, "-", "llama3_transformer"], [421, 0, 0, "-", "m2m100_transformer"], [422, 0, 0, "-", "marian_transformer"], [423, 0, 0, "-", "mistral_transformer"], [424, 0, 0, "-", "nllb_transformer"], [425, 0, 0, "-", "olmo_transformer"], [426, 0, 0, "-", "phi2_transformer"], [427, 0, 0, "-", "phi3_transformer"], [428, 0, 0, "-", "phi4_transformer"], [429, 0, 0, "-", "qwen_transformer"], [430, 0, 0, "-", "starcoder_transformer"], [431, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[412, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[412, 2, 1, "", "inputAnnotatorTypes"], [412, 3, 1, "", "loadSavedModel"], [412, 2, 1, "", "name"], [412, 2, 1, "", "outputAnnotatorType"], [412, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[413, 1, 1, "", "AutoGGUFVisionModel"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel": [[413, 2, 1, "", "inputAnnotatorTypes"], [413, 3, 1, "", "loadSavedModel"], [413, 2, 1, "", "name"], [413, 2, 1, "", "outputAnnotatorType"], [413, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.bart_transformer": [[414, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[414, 2, 1, "", "beamSize"], [414, 2, 1, "", "configProtoBytes"], [414, 2, 1, "", "doSample"], [414, 2, 1, "", "ignoreTokenIds"], [414, 2, 1, "", "inputAnnotatorTypes"], [414, 3, 1, "", "loadSavedModel"], [414, 2, 1, "", "maxOutputLength"], [414, 2, 1, "", "minOutputLength"], [414, 2, 1, "", "name"], [414, 2, 1, "", "noRepeatNgramSize"], [414, 2, 1, "", "outputAnnotatorType"], [414, 3, 1, "", "pretrained"], [414, 2, 1, "", "repetitionPenalty"], [414, 3, 1, "", "setBeamSize"], [414, 3, 1, "", "setCache"], [414, 3, 1, "", "setConfigProtoBytes"], [414, 3, 1, "", "setDoSample"], [414, 3, 1, "", "setIgnoreTokenIds"], [414, 3, 1, "", "setMaxOutputLength"], [414, 3, 1, "", "setMinOutputLength"], [414, 3, 1, "", "setNoRepeatNgramSize"], [414, 3, 1, "", "setRepetitionPenalty"], [414, 3, 1, "", "setTask"], [414, 3, 1, "", "setTemperature"], [414, 3, 1, "", "setTopK"], [414, 3, 1, "", "setTopP"], [414, 2, 1, "", "task"], [414, 2, 1, "", "temperature"], [414, 2, 1, "", "topK"], [414, 2, 1, "", "topP"], [414, 2, 1, "", "useCache"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[415, 1, 1, "", "CoHereTransformer"]], "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer": [[415, 2, 1, "", "beamSize"], [415, 2, 1, "", "configProtoBytes"], [415, 2, 1, "", "doSample"], [415, 2, 1, "", "ignoreTokenIds"], [415, 2, 1, "", "inputAnnotatorTypes"], [415, 3, 1, "", "loadSavedModel"], [415, 2, 1, "", "maxOutputLength"], [415, 2, 1, "", "minOutputLength"], [415, 2, 1, "", "name"], [415, 2, 1, "", "noRepeatNgramSize"], [415, 2, 1, "", "outputAnnotatorType"], [415, 3, 1, "", "pretrained"], [415, 2, 1, "", "repetitionPenalty"], [415, 3, 1, "", "setBeamSize"], [415, 3, 1, "", "setConfigProtoBytes"], [415, 3, 1, "", "setDoSample"], [415, 3, 1, "", "setIgnoreTokenIds"], [415, 3, 1, "", "setMaxOutputLength"], [415, 3, 1, "", "setMinOutputLength"], [415, 3, 1, "", "setNoRepeatNgramSize"], [415, 3, 1, "", "setRepetitionPenalty"], [415, 3, 1, "", "setStopTokenIds"], [415, 3, 1, "", "setTemperature"], [415, 3, 1, "", "setTopK"], [415, 3, 1, "", "setTopP"], [415, 2, 1, "", "stopTokenIds"], [415, 2, 1, "", "temperature"], [415, 2, 1, "", "topK"], [415, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[416, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[416, 2, 1, "", "configProtoBytes"], [416, 2, 1, "", "doSample"], [416, 2, 1, "", "ignoreTokenIds"], [416, 2, 1, "", "inputAnnotatorTypes"], [416, 3, 1, "", "loadSavedModel"], [416, 2, 1, "", "maxOutputLength"], [416, 2, 1, "", "minOutputLength"], [416, 2, 1, "", "name"], [416, 2, 1, "", "noRepeatNgramSize"], [416, 2, 1, "", "outputAnnotatorType"], [416, 3, 1, "", "pretrained"], [416, 2, 1, "", "repetitionPenalty"], [416, 3, 1, "", "setConfigProtoBytes"], [416, 3, 1, "", "setDoSample"], [416, 3, 1, "", "setIgnoreTokenIds"], [416, 3, 1, "", "setMaxOutputLength"], [416, 3, 1, "", "setMinOutputLength"], [416, 3, 1, "", "setNoRepeatNgramSize"], [416, 3, 1, "", "setRepetitionPenalty"], [416, 3, 1, "", "setTemperature"], [416, 3, 1, "", "setTopK"], [416, 3, 1, "", "setTopP"], [416, 2, 1, "", "temperature"], [416, 2, 1, "", "topK"], [416, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[417, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[417, 2, 1, "", "configProtoBytes"], [417, 2, 1, "", "doSample"], [417, 2, 1, "", "ignoreTokenIds"], [417, 2, 1, "", "inputAnnotatorTypes"], [417, 3, 1, "", "loadSavedModel"], [417, 2, 1, "", "maxOutputLength"], [417, 2, 1, "", "minOutputLength"], [417, 2, 1, "", "name"], [417, 2, 1, "", "noRepeatNgramSize"], [417, 2, 1, "", "outputAnnotatorType"], [417, 3, 1, "", "pretrained"], [417, 2, 1, "", "repetitionPenalty"], [417, 3, 1, "", "setConfigProtoBytes"], [417, 3, 1, "", "setDoSample"], [417, 3, 1, "", "setIgnoreTokenIds"], [417, 3, 1, "", "setMaxOutputLength"], [417, 3, 1, "", "setMinOutputLength"], [417, 3, 1, "", "setNoRepeatNgramSize"], [417, 3, 1, "", "setRepetitionPenalty"], [417, 3, 1, "", "setTask"], [417, 3, 1, "", "setTemperature"], [417, 3, 1, "", "setTopK"], [417, 3, 1, "", "setTopP"], [417, 2, 1, "", "task"], [417, 2, 1, "", "temperature"], [417, 2, 1, "", "topK"], [417, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[419, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[419, 2, 1, "", "configProtoBytes"], [419, 2, 1, "", "doSample"], [419, 2, 1, "", "ignoreTokenIds"], [419, 2, 1, "", "inputAnnotatorTypes"], [419, 3, 1, "", "loadSavedModel"], [419, 2, 1, "", "maxOutputLength"], [419, 2, 1, "", "minOutputLength"], [419, 2, 1, "", "name"], [419, 2, 1, "", "noRepeatNgramSize"], [419, 2, 1, "", "outputAnnotatorType"], [419, 3, 1, "", "pretrained"], [419, 2, 1, "", "repetitionPenalty"], [419, 3, 1, "", "setConfigProtoBytes"], [419, 3, 1, "", "setDoSample"], [419, 3, 1, "", "setIgnoreTokenIds"], [419, 3, 1, "", "setMaxOutputLength"], [419, 3, 1, "", "setMinOutputLength"], [419, 3, 1, "", "setNoRepeatNgramSize"], [419, 3, 1, "", "setRepetitionPenalty"], [419, 3, 1, "", "setTemperature"], [419, 3, 1, "", "setTopK"], [419, 3, 1, "", "setTopP"], [419, 2, 1, "", "temperature"], [419, 2, 1, "", "topK"], [419, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[420, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[420, 2, 1, "", "beamSize"], [420, 2, 1, "", "configProtoBytes"], [420, 2, 1, "", "doSample"], [420, 2, 1, "", "ignoreTokenIds"], [420, 2, 1, "", "inputAnnotatorTypes"], [420, 3, 1, "", "loadSavedModel"], [420, 2, 1, "", "maxOutputLength"], [420, 2, 1, "", "minOutputLength"], [420, 2, 1, "", "name"], [420, 2, 1, "", "noRepeatNgramSize"], [420, 2, 1, "", "outputAnnotatorType"], [420, 3, 1, "", "pretrained"], [420, 2, 1, "", "repetitionPenalty"], [420, 3, 1, "", "setBeamSize"], [420, 3, 1, "", "setConfigProtoBytes"], [420, 3, 1, "", "setDoSample"], [420, 3, 1, "", "setIgnoreTokenIds"], [420, 3, 1, "", "setMaxOutputLength"], [420, 3, 1, "", "setMinOutputLength"], [420, 3, 1, "", "setNoRepeatNgramSize"], [420, 3, 1, "", "setRepetitionPenalty"], [420, 3, 1, "", "setStopTokenIds"], [420, 3, 1, "", "setTemperature"], [420, 3, 1, "", "setTopK"], [420, 3, 1, "", "setTopP"], [420, 2, 1, "", "stopTokenIds"], [420, 2, 1, "", "temperature"], [420, 2, 1, "", "topK"], [420, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[421, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[421, 2, 1, "", "beamSize"], [421, 2, 1, "", "configProtoBytes"], [421, 2, 1, "", "doSample"], [421, 2, 1, "", "ignoreTokenIds"], [421, 2, 1, "", "inputAnnotatorTypes"], [421, 3, 1, "", "loadSavedModel"], [421, 2, 1, "", "maxOutputLength"], [421, 2, 1, "", "minOutputLength"], [421, 2, 1, "", "name"], [421, 2, 1, "", "noRepeatNgramSize"], [421, 2, 1, "", "outputAnnotatorType"], [421, 3, 1, "", "pretrained"], [421, 2, 1, "", "repetitionPenalty"], [421, 3, 1, "", "setBeamSize"], [421, 3, 1, "", "setConfigProtoBytes"], [421, 3, 1, "", "setDoSample"], [421, 3, 1, "", "setIgnoreTokenIds"], [421, 3, 1, "", "setMaxOutputLength"], [421, 3, 1, "", "setMinOutputLength"], [421, 3, 1, "", "setNoRepeatNgramSize"], [421, 3, 1, "", "setRepetitionPenalty"], [421, 3, 1, "", "setSrcLang"], [421, 3, 1, "", "setTemperature"], [421, 3, 1, "", "setTgtLang"], [421, 3, 1, "", "setTopK"], [421, 3, 1, "", "setTopP"], [421, 2, 1, "", "srcLang"], [421, 2, 1, "", "temperature"], [421, 2, 1, "", "tgtLang"], [421, 2, 1, "", "topK"], [421, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[422, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[422, 2, 1, "", "configProtoBytes"], [422, 2, 1, "", "doSample"], [422, 2, 1, "", "ignoreTokenIds"], [422, 2, 1, "", "inputAnnotatorTypes"], [422, 2, 1, "", "langId"], [422, 3, 1, "", "loadSavedModel"], [422, 2, 1, "", "maxInputLength"], [422, 2, 1, "", "maxOutputLength"], [422, 2, 1, "", "name"], [422, 2, 1, "", "noRepeatNgramSize"], [422, 2, 1, "", "outputAnnotatorType"], [422, 3, 1, "", "pretrained"], [422, 2, 1, "", "repetitionPenalty"], [422, 3, 1, "", "setConfigProtoBytes"], [422, 3, 1, "", "setDoSample"], [422, 3, 1, "", "setIgnoreTokenIds"], [422, 3, 1, "", "setLangId"], [422, 3, 1, "", "setMaxInputLength"], [422, 3, 1, "", "setMaxOutputLength"], [422, 3, 1, "", "setNoRepeatNgramSize"], [422, 3, 1, "", "setRandomSeed"], [422, 3, 1, "", "setRepetitionPenalty"], [422, 3, 1, "", "setTemperature"], [422, 3, 1, "", "setTopK"], [422, 3, 1, "", "setTopP"], [422, 2, 1, "", "temperature"], [422, 2, 1, "", "topK"], [422, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[423, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[423, 2, 1, "", "configProtoBytes"], [423, 2, 1, "", "doSample"], [423, 2, 1, "", "ignoreTokenIds"], [423, 2, 1, "", "inputAnnotatorTypes"], [423, 3, 1, "", "loadSavedModel"], [423, 2, 1, "", "maxOutputLength"], [423, 2, 1, "", "minOutputLength"], [423, 2, 1, "", "name"], [423, 2, 1, "", "noRepeatNgramSize"], [423, 2, 1, "", "outputAnnotatorType"], [423, 3, 1, "", "pretrained"], [423, 2, 1, "", "repetitionPenalty"], [423, 3, 1, "", "setConfigProtoBytes"], [423, 3, 1, "", "setDoSample"], [423, 3, 1, "", "setIgnoreTokenIds"], [423, 3, 1, "", "setMaxOutputLength"], [423, 3, 1, "", "setMinOutputLength"], [423, 3, 1, "", "setNoRepeatNgramSize"], [423, 3, 1, "", "setRepetitionPenalty"], [423, 3, 1, "", "setTemperature"], [423, 3, 1, "", "setTopK"], [423, 3, 1, "", "setTopP"], [423, 2, 1, "", "temperature"], [423, 2, 1, "", "topK"], [423, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[424, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[424, 2, 1, "", "beamSize"], [424, 2, 1, "", "configProtoBytes"], [424, 2, 1, "", "doSample"], [424, 2, 1, "", "ignoreTokenIds"], [424, 2, 1, "", "inputAnnotatorTypes"], [424, 3, 1, "", "loadSavedModel"], [424, 2, 1, "", "maxOutputLength"], [424, 2, 1, "", "minOutputLength"], [424, 2, 1, "", "name"], [424, 2, 1, "", "noRepeatNgramSize"], [424, 2, 1, "", "outputAnnotatorType"], [424, 3, 1, "", "pretrained"], [424, 2, 1, "", "repetitionPenalty"], [424, 3, 1, "", "setBeamSize"], [424, 3, 1, "", "setConfigProtoBytes"], [424, 3, 1, "", "setDoSample"], [424, 3, 1, "", "setIgnoreTokenIds"], [424, 3, 1, "", "setMaxOutputLength"], [424, 3, 1, "", "setMinOutputLength"], [424, 3, 1, "", "setNoRepeatNgramSize"], [424, 3, 1, "", "setRepetitionPenalty"], [424, 3, 1, "", "setSrcLang"], [424, 3, 1, "", "setTemperature"], [424, 3, 1, "", "setTgtLang"], [424, 3, 1, "", "setTopK"], [424, 3, 1, "", "setTopP"], [424, 2, 1, "", "srcLang"], [424, 2, 1, "", "temperature"], [424, 2, 1, "", "tgtLang"], [424, 2, 1, "", "topK"], [424, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[425, 1, 1, "", "OLMoTransformer"]], "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer": [[425, 2, 1, "", "configProtoBytes"], [425, 2, 1, "", "doSample"], [425, 2, 1, "", "ignoreTokenIds"], [425, 2, 1, "", "inputAnnotatorTypes"], [425, 3, 1, "", "loadSavedModel"], [425, 2, 1, "", "maxOutputLength"], [425, 2, 1, "", "minOutputLength"], [425, 2, 1, "", "name"], [425, 2, 1, "", "noRepeatNgramSize"], [425, 2, 1, "", "outputAnnotatorType"], [425, 3, 1, "", "pretrained"], [425, 2, 1, "", "repetitionPenalty"], [425, 3, 1, "", "setConfigProtoBytes"], [425, 3, 1, "", "setDoSample"], [425, 3, 1, "", "setIgnoreTokenIds"], [425, 3, 1, "", "setMaxOutputLength"], [425, 3, 1, "", "setMinOutputLength"], [425, 3, 1, "", "setNoRepeatNgramSize"], [425, 3, 1, "", "setRepetitionPenalty"], [425, 3, 1, "", "setTemperature"], [425, 3, 1, "", "setTopK"], [425, 3, 1, "", "setTopP"], [425, 2, 1, "", "temperature"], [425, 2, 1, "", "topK"], [425, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[426, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[426, 2, 1, "", "configProtoBytes"], [426, 2, 1, "", "doSample"], [426, 2, 1, "", "ignoreTokenIds"], [426, 2, 1, "", "inputAnnotatorTypes"], [426, 3, 1, "", "loadSavedModel"], [426, 2, 1, "", "maxOutputLength"], [426, 2, 1, "", "minOutputLength"], [426, 2, 1, "", "name"], [426, 2, 1, "", "noRepeatNgramSize"], [426, 2, 1, "", "outputAnnotatorType"], [426, 3, 1, "", "pretrained"], [426, 2, 1, "", "repetitionPenalty"], [426, 3, 1, "", "setConfigProtoBytes"], [426, 3, 1, "", "setDoSample"], [426, 3, 1, "", "setIgnoreTokenIds"], [426, 3, 1, "", "setMaxOutputLength"], [426, 3, 1, "", "setMinOutputLength"], [426, 3, 1, "", "setNoRepeatNgramSize"], [426, 3, 1, "", "setRepetitionPenalty"], [426, 3, 1, "", "setTemperature"], [426, 3, 1, "", "setTopK"], [426, 3, 1, "", "setTopP"], [426, 2, 1, "", "temperature"], [426, 2, 1, "", "topK"], [426, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[427, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[427, 2, 1, "", "configProtoBytes"], [427, 2, 1, "", "doSample"], [427, 2, 1, "", "ignoreTokenIds"], [427, 2, 1, "", "inputAnnotatorTypes"], [427, 3, 1, "", "loadSavedModel"], [427, 2, 1, "", "maxOutputLength"], [427, 2, 1, "", "minOutputLength"], [427, 2, 1, "", "name"], [427, 2, 1, "", "noRepeatNgramSize"], [427, 2, 1, "", "outputAnnotatorType"], [427, 3, 1, "", "pretrained"], [427, 2, 1, "", "repetitionPenalty"], [427, 3, 1, "", "setConfigProtoBytes"], [427, 3, 1, "", "setDoSample"], [427, 3, 1, "", "setIgnoreTokenIds"], [427, 3, 1, "", "setMaxOutputLength"], [427, 3, 1, "", "setMinOutputLength"], [427, 3, 1, "", "setNoRepeatNgramSize"], [427, 3, 1, "", "setRepetitionPenalty"], [427, 3, 1, "", "setTemperature"], [427, 3, 1, "", "setTopK"], [427, 3, 1, "", "setTopP"], [427, 2, 1, "", "temperature"], [427, 2, 1, "", "topK"], [427, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi4_transformer": [[428, 1, 1, "", "Phi4Transformer"]], "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer": [[428, 2, 1, "", "beamSize"], [428, 2, 1, "", "configProtoBytes"], [428, 2, 1, "", "doSample"], [428, 2, 1, "", "ignoreTokenIds"], [428, 2, 1, "", "inputAnnotatorTypes"], [428, 3, 1, "", "loadSavedModel"], [428, 2, 1, "", "maxOutputLength"], [428, 2, 1, "", "minOutputLength"], [428, 2, 1, "", "name"], [428, 2, 1, "", "noRepeatNgramSize"], [428, 2, 1, "", "outputAnnotatorType"], [428, 3, 1, "", "pretrained"], [428, 2, 1, "", "repetitionPenalty"], [428, 3, 1, "", "setBeamSize"], [428, 3, 1, "", "setConfigProtoBytes"], [428, 3, 1, "", "setDoSample"], [428, 3, 1, "", "setIgnoreTokenIds"], [428, 3, 1, "", "setMaxOutputLength"], [428, 3, 1, "", "setMinOutputLength"], [428, 3, 1, "", "setNoRepeatNgramSize"], [428, 3, 1, "", "setRepetitionPenalty"], [428, 3, 1, "", "setStopTokenIds"], [428, 3, 1, "", "setTemperature"], [428, 3, 1, "", "setTopK"], [428, 3, 1, "", "setTopP"], [428, 2, 1, "", "stopTokenIds"], [428, 2, 1, "", "temperature"], [428, 2, 1, "", "topK"], [428, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[429, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[429, 2, 1, "", "configProtoBytes"], [429, 2, 1, "", "doSample"], [429, 2, 1, "", "ignoreTokenIds"], [429, 2, 1, "", "inputAnnotatorTypes"], [429, 3, 1, "", "loadSavedModel"], [429, 2, 1, "", "maxOutputLength"], [429, 2, 1, "", "minOutputLength"], [429, 2, 1, "", "name"], [429, 2, 1, "", "noRepeatNgramSize"], [429, 2, 1, "", "outputAnnotatorType"], [429, 3, 1, "", "pretrained"], [429, 2, 1, "", "repetitionPenalty"], [429, 3, 1, "", "setConfigProtoBytes"], [429, 3, 1, "", "setDoSample"], [429, 3, 1, "", "setIgnoreTokenIds"], [429, 3, 1, "", "setMaxOutputLength"], [429, 3, 1, "", "setMinOutputLength"], [429, 3, 1, "", "setNoRepeatNgramSize"], [429, 3, 1, "", "setRepetitionPenalty"], [429, 3, 1, "", "setTemperature"], [429, 3, 1, "", "setTopK"], [429, 3, 1, "", "setTopP"], [429, 2, 1, "", "temperature"], [429, 2, 1, "", "topK"], [429, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[430, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[430, 2, 1, "", "configProtoBytes"], [430, 2, 1, "", "doSample"], [430, 2, 1, "", "ignoreTokenIds"], [430, 2, 1, "", "inputAnnotatorTypes"], [430, 3, 1, "", "loadSavedModel"], [430, 2, 1, "", "maxOutputLength"], [430, 2, 1, "", "minOutputLength"], [430, 2, 1, "", "name"], [430, 2, 1, "", "noRepeatNgramSize"], [430, 2, 1, "", "outputAnnotatorType"], [430, 3, 1, "", "pretrained"], [430, 2, 1, "", "repetitionPenalty"], [430, 3, 1, "", "setConfigProtoBytes"], [430, 3, 1, "", "setDoSample"], [430, 3, 1, "", "setIgnoreTokenIds"], [430, 3, 1, "", "setMaxOutputLength"], [430, 3, 1, "", "setMinOutputLength"], [430, 3, 1, "", "setNoRepeatNgramSize"], [430, 3, 1, "", "setRepetitionPenalty"], [430, 3, 1, "", "setTemperature"], [430, 3, 1, "", "setTopK"], [430, 3, 1, "", "setTopP"], [430, 2, 1, "", "temperature"], [430, 2, 1, "", "topK"], [430, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[431, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[431, 2, 1, "", "configProtoBytes"], [431, 2, 1, "", "doSample"], [431, 2, 1, "", "ignoreTokenIds"], [431, 2, 1, "", "inputAnnotatorTypes"], [431, 3, 1, "", "loadSavedModel"], [431, 2, 1, "", "maxNewTokens"], [431, 2, 1, "", "maxOutputLength"], [431, 2, 1, "", "minOutputLength"], [431, 2, 1, "", "name"], [431, 2, 1, "", "noRepeatNgramSize"], [431, 2, 1, "", "outputAnnotatorType"], [431, 3, 1, "", "pretrained"], [431, 2, 1, "", "repetitionPenalty"], [431, 3, 1, "", "setConfigProtoBytes"], [431, 3, 1, "", "setDoSample"], [431, 3, 1, "", "setIgnoreTokenIds"], [431, 3, 1, "", "setMaxNewTokens"], [431, 3, 1, "", "setMaxOutputLength"], [431, 3, 1, "", "setMinOutputLength"], [431, 3, 1, "", "setNoRepeatNgramSize"], [431, 3, 1, "", "setRepetitionPenalty"], [431, 3, 1, "", "setStopAtEos"], [431, 3, 1, "", "setTask"], [431, 3, 1, "", "setTemperature"], [431, 3, 1, "", "setTopK"], [431, 3, 1, "", "setTopP"], [431, 3, 1, "", "setUseCache"], [431, 2, 1, "", "stopAtEos"], [431, 2, 1, "", "task"], [431, 2, 1, "", "temperature"], [431, 2, 1, "", "topK"], [431, 2, 1, "", "topP"], [431, 2, 1, "", "useCache"]], "sparknlp.annotator.similarity": [[432, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[432, 1, 1, "", "DocumentSimilarityRankerApproach"], [432, 1, 1, "", "DocumentSimilarityRankerFinisher"], [432, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[432, 2, 1, "", "aggregationMethod"], [432, 3, 1, "", "asRetriever"], [432, 2, 1, "", "asRetrieverQuery"], [432, 2, 1, "", "bucketLength"], [432, 2, 1, "", "identityRanking"], [432, 2, 1, "", "inputAnnotatorTypes"], [432, 2, 1, "", "numHashTables"], [432, 2, 1, "", "numberOfNeighbours"], [432, 2, 1, "", "outputAnnotatorType"], [432, 3, 1, "", "setAggregationMethod"], [432, 3, 1, "", "setBucketLength"], [432, 3, 1, "", "setIdentityRanking"], [432, 3, 1, "", "setNumHashTables"], [432, 3, 1, "", "setNumberOfNeighbours"], [432, 3, 1, "", "setSimilarityMethod"], [432, 3, 1, "", "setVisibleDistances"], [432, 2, 1, "", "similarityMethod"], [432, 2, 1, "", "visibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[432, 2, 1, "", "extractNearestNeighbor"], [432, 3, 1, "", "getInputCols"], [432, 3, 1, "", "getOutputCols"], [432, 2, 1, "", "inputCols"], [432, 2, 1, "", "name"], [432, 2, 1, "", "outputCols"], [432, 3, 1, "", "setExtractNearestNeighbor"], [432, 3, 1, "", "setInputCols"], [432, 3, 1, "", "setOutputCols"], [432, 3, 1, "", "setParams"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel": [[432, 2, 1, "", "inputAnnotatorTypes"], [432, 2, 1, "", "name"], [432, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.spell_check": [[434, 0, 0, "-", "context_spell_checker"], [436, 0, 0, "-", "norvig_sweeting"], [437, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[434, 1, 1, "", "ContextSpellCheckerApproach"], [434, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[434, 3, 1, "", "addRegexClass"], [434, 3, 1, "", "addVocabClass"], [434, 2, 1, "", "batchSize"], [434, 2, 1, "", "caseStrategy"], [434, 2, 1, "", "classCount"], [434, 2, 1, "", "compoundCount"], [434, 2, 1, "", "configProtoBytes"], [434, 2, 1, "", "epochs"], [434, 2, 1, "", "errorThreshold"], [434, 2, 1, "", "finalRate"], [434, 2, 1, "", "graphFolder"], [434, 2, 1, "", "initialRate"], [434, 2, 1, "", "inputAnnotatorTypes"], [434, 2, 1, "", "languageModelClasses"], [434, 2, 1, "", "maxCandidates"], [434, 2, 1, "", "maxSentLen"], [434, 2, 1, "", "maxWindowLen"], [434, 2, 1, "", "minCount"], [434, 2, 1, "", "name"], [434, 2, 1, "", "outputAnnotatorType"], [434, 3, 1, "", "setBatchSize"], [434, 3, 1, "", "setCaseStrategy"], [434, 3, 1, "", "setClassCount"], [434, 3, 1, "", "setCompoundCount"], [434, 3, 1, "", "setConfigProtoBytes"], [434, 3, 1, "", "setEpochs"], [434, 3, 1, "", "setErrorThreshold"], [434, 3, 1, "", "setFinalRate"], [434, 3, 1, "", "setGraphFolder"], [434, 3, 1, "", "setInitialRate"], [434, 3, 1, "", "setLanguageModelClasses"], [434, 3, 1, "", "setMaxCandidates"], [434, 3, 1, "", "setMaxSentLen"], [434, 3, 1, "", "setMaxWindowLen"], [434, 3, 1, "", "setMinCount"], [434, 3, 1, "", "setTradeoff"], [434, 3, 1, "", "setValidationFraction"], [434, 3, 1, "", "setWeightedDistPath"], [434, 3, 1, "", "setWordMaxDistance"], [434, 2, 1, "", "tradeoff"], [434, 2, 1, "", "validationFraction"], [434, 2, 1, "", "weightedDistPath"], [434, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[434, 2, 1, "", "caseStrategy"], [434, 2, 1, "", "classes"], [434, 2, 1, "", "compareLowcase"], [434, 2, 1, "", "configProtoBytes"], [434, 2, 1, "", "correctSymbols"], [434, 2, 1, "", "errorThreshold"], [434, 2, 1, "", "gamma"], [434, 3, 1, "", "getWordClasses"], [434, 2, 1, "", "idsVocab"], [434, 2, 1, "", "inputAnnotatorTypes"], [434, 2, 1, "", "maxCandidates"], [434, 2, 1, "", "maxWindowLen"], [434, 2, 1, "", "name"], [434, 2, 1, "", "outputAnnotatorType"], [434, 3, 1, "", "pretrained"], [434, 3, 1, "", "setCaseStrategy"], [434, 3, 1, "", "setClasses"], [434, 3, 1, "", "setCompareLowcase"], [434, 3, 1, "", "setConfigProtoBytes"], [434, 3, 1, "", "setCorrectSymbols"], [434, 3, 1, "", "setErrorThreshold"], [434, 3, 1, "", "setGamma"], [434, 3, 1, "", "setIdsVocab"], [434, 3, 1, "", "setMaxCandidates"], [434, 3, 1, "", "setMaxWindowLen"], [434, 3, 1, "", "setTradeoff"], [434, 3, 1, "", "setVocabFreq"], [434, 3, 1, "", "setVocabIds"], [434, 3, 1, "", "setWeights"], [434, 3, 1, "", "setWordMaxDistance"], [434, 2, 1, "", "tradeoff"], [434, 3, 1, "", "updateRegexClass"], [434, 3, 1, "", "updateVocabClass"], [434, 2, 1, "", "vocabFreq"], [434, 2, 1, "", "vocabIds"], [434, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[436, 1, 1, "", "NorvigSweetingApproach"], [436, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[436, 2, 1, "", "caseSensitive"], [436, 2, 1, "", "dictionary"], [436, 2, 1, "", "dictionary_path"], [436, 2, 1, "", "doubleVariants"], [436, 2, 1, "", "dupsLimit"], [436, 2, 1, "", "frequencyPriority"], [436, 2, 1, "", "inputAnnotatorTypes"], [436, 2, 1, "", "intersections"], [436, 2, 1, "", "outputAnnotatorType"], [436, 2, 1, "", "reductLimit"], [436, 3, 1, "", "setCaseSensitive"], [436, 3, 1, "", "setDictionary"], [436, 3, 1, "", "setDoubleVariants"], [436, 3, 1, "", "setFrequencyPriority"], [436, 3, 1, "", "setShortCircuit"], [436, 2, 1, "", "shortCircuit"], [436, 2, 1, "", "vowelSwapLimit"], [436, 2, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[436, 2, 1, "", "inputAnnotatorTypes"], [436, 2, 1, "", "name"], [436, 2, 1, "", "outputAnnotatorType"], [436, 3, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[437, 1, 1, "", "SymmetricDeleteApproach"], [437, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[437, 2, 1, "", "corpus"], [437, 2, 1, "", "deletesThreshold"], [437, 2, 1, "", "dictionary"], [437, 2, 1, "", "dictionary_path"], [437, 2, 1, "", "dupsLimit"], [437, 2, 1, "", "frequencyThreshold"], [437, 2, 1, "", "inputAnnotatorTypes"], [437, 2, 1, "", "maxEditDistance"], [437, 2, 1, "", "outputAnnotatorType"], [437, 3, 1, "", "setDeletesThreshold"], [437, 3, 1, "", "setDictionary"], [437, 3, 1, "", "setFrequencyThreshold"], [437, 3, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[437, 2, 1, "", "inputAnnotatorTypes"], [437, 2, 1, "", "name"], [437, 2, 1, "", "outputAnnotatorType"], [437, 3, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[438, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[438, 2, 1, "", "inputAnnotatorTypes"], [438, 2, 1, "", "language"], [438, 2, 1, "", "name"], [438, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.stop_words_cleaner": [[439, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[439, 2, 1, "", "caseSensitive"], [439, 2, 1, "", "inputAnnotatorTypes"], [439, 3, 1, "", "loadDefaultStopWords"], [439, 2, 1, "", "locale"], [439, 2, 1, "", "name"], [439, 2, 1, "", "outputAnnotatorType"], [439, 3, 1, "", "pretrained"], [439, 3, 1, "", "setCaseSensitive"], [439, 3, 1, "", "setLocale"], [439, 3, 1, "", "setStopWords"], [439, 2, 1, "", "stopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[440, 1, 1, "", "TFNerDLGraphBuilder"], [440, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[440, 3, 1, "", "getGraphFile"], [440, 3, 1, "", "getGraphFolder"], [440, 3, 1, "", "getHiddenUnitsNumber"], [440, 3, 1, "", "getInputCols"], [440, 3, 1, "", "getLabelColumn"], [440, 2, 1, "", "graphFile"], [440, 2, 1, "", "graphFolder"], [440, 2, 1, "", "hiddenUnitsNumber"], [440, 2, 1, "", "inputAnnotatorTypes"], [440, 2, 1, "", "inputCols"], [440, 3, 1, "", "inputColsValidation"], [440, 2, 1, "", "labelColumn"], [440, 3, 1, "", "setGraphFile"], [440, 3, 1, "", "setGraphFolder"], [440, 3, 1, "", "setHiddenUnitsNumber"], [440, 3, 1, "", "setInputCols"], [440, 3, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[441, 0, 0, "-", "chunk_tokenizer"], [443, 0, 0, "-", "recursive_tokenizer"], [444, 0, 0, "-", "regex_tokenizer"], [445, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[441, 1, 1, "", "ChunkTokenizer"], [441, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[443, 1, 1, "", "RecursiveTokenizer"], [443, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[443, 2, 1, "", "infixes"], [443, 2, 1, "", "inputAnnotatorTypes"], [443, 2, 1, "", "name"], [443, 2, 1, "", "outputAnnotatorType"], [443, 2, 1, "", "prefixes"], [443, 3, 1, "", "setInfixes"], [443, 3, 1, "", "setPrefixes"], [443, 3, 1, "", "setSuffixes"], [443, 3, 1, "", "setWhitelist"], [443, 2, 1, "", "suffixes"], [443, 2, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[443, 2, 1, "", "inputAnnotatorTypes"], [443, 2, 1, "", "name"], [443, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.token.regex_tokenizer": [[444, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[444, 2, 1, "", "inputAnnotatorTypes"], [444, 2, 1, "", "maxLength"], [444, 2, 1, "", "minLength"], [444, 2, 1, "", "name"], [444, 2, 1, "", "outputAnnotatorType"], [444, 2, 1, "", "pattern"], [444, 2, 1, "", "positionalMask"], [444, 2, 1, "", "preservePosition"], [444, 3, 1, "", "setMaxLength"], [444, 3, 1, "", "setMinLength"], [444, 3, 1, "", "setPattern"], [444, 3, 1, "", "setPositionalMask"], [444, 3, 1, "", "setPreservePosition"], [444, 3, 1, "", "setToLowercase"], [444, 3, 1, "", "setTrimWhitespace"], [444, 2, 1, "", "toLowercase"], [444, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[445, 1, 1, "", "Tokenizer"], [445, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[445, 3, 1, "", "addContextChars"], [445, 3, 1, "", "addException"], [445, 3, 1, "", "addInfixPattern"], [445, 3, 1, "", "addSplitChars"], [445, 2, 1, "", "caseSensitiveExceptions"], [445, 2, 1, "", "contextChars"], [445, 2, 1, "", "exceptions"], [445, 2, 1, "", "exceptionsPath"], [445, 3, 1, "", "getCaseSensitiveExceptions"], [445, 3, 1, "", "getContextChars"], [445, 3, 1, "", "getExceptions"], [445, 3, 1, "", "getInfixPatterns"], [445, 3, 1, "", "getPrefixPattern"], [445, 3, 1, "", "getSplitChars"], [445, 3, 1, "", "getSuffixPattern"], [445, 2, 1, "", "infixPatterns"], [445, 2, 1, "", "inputAnnotatorTypes"], [445, 2, 1, "", "maxLength"], [445, 2, 1, "", "minLength"], [445, 2, 1, "", "name"], [445, 2, 1, "", "outputAnnotatorType"], [445, 2, 1, "", "prefixPattern"], [445, 3, 1, "", "setCaseSensitiveExceptions"], [445, 3, 1, "", "setContextChars"], [445, 3, 1, "", "setExceptions"], [445, 3, 1, "", "setExceptionsPath"], [445, 3, 1, "", "setInfixPatterns"], [445, 3, 1, "", "setMaxLength"], [445, 3, 1, "", "setMinLength"], [445, 3, 1, "", "setPrefixPattern"], [445, 3, 1, "", "setSplitChars"], [445, 3, 1, "", "setSplitPattern"], [445, 3, 1, "", "setSuffixPattern"], [445, 3, 1, "", "setTargetPattern"], [445, 2, 1, "", "splitChars"], [445, 2, 1, "", "splitPattern"], [445, 2, 1, "", "suffixPattern"], [445, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[445, 3, 1, "", "addSplitChars"], [445, 2, 1, "", "caseSensitiveExceptions"], [445, 2, 1, "", "exceptions"], [445, 2, 1, "", "inputAnnotatorTypes"], [445, 2, 1, "", "name"], [445, 2, 1, "", "outputAnnotatorType"], [445, 3, 1, "", "pretrained"], [445, 2, 1, "", "rules"], [445, 3, 1, "", "setSplitChars"], [445, 3, 1, "", "setSplitPattern"], [445, 2, 1, "", "splitChars"], [445, 2, 1, "", "splitPattern"], [445, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token2_chunk": [[446, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token2_chunk.Token2Chunk": [[446, 2, 1, "", "inputAnnotatorTypes"], [446, 2, 1, "", "name"], [446, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.ws": [[448, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[448, 1, 1, "", "WordSegmenterApproach"], [448, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[448, 2, 1, "", "ambiguityThreshold"], [448, 2, 1, "", "enableRegexTokenizer"], [448, 2, 1, "", "frequencyThreshold"], [448, 3, 1, "", "getAmbiguityThreshold"], [448, 3, 1, "", "getFrequencyThreshold"], [448, 3, 1, "", "getNIterations"], [448, 2, 1, "", "inputAnnotatorTypes"], [448, 2, 1, "", "nIterations"], [448, 2, 1, "", "name"], [448, 2, 1, "", "outputAnnotatorType"], [448, 2, 1, "", "pattern"], [448, 2, 1, "", "posCol"], [448, 3, 1, "", "setAmbiguityThreshold"], [448, 3, 1, "", "setEnableRegexTokenizer"], [448, 3, 1, "", "setFrequencyThreshold"], [448, 3, 1, "", "setNIterations"], [448, 3, 1, "", "setPattern"], [448, 3, 1, "", "setPosColumn"], [448, 3, 1, "", "setToLowercase"], [448, 2, 1, "", "toLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[448, 2, 1, "", "enableRegexTokenizer"], [448, 2, 1, "", "inputAnnotatorTypes"], [448, 2, 1, "", "name"], [448, 2, 1, "", "outputAnnotatorType"], [448, 2, 1, "", "pattern"], [448, 3, 1, "", "pretrained"], [448, 3, 1, "", "setEnableRegexTokenizer"], [448, 3, 1, "", "setPattern"], [448, 3, 1, "", "setToLowercase"], [448, 2, 1, "", "toLowercase"]], "sparknlp.base": [[449, 0, 0, "-", "audio_assembler"], [450, 0, 0, "-", "doc2_chunk"], [451, 0, 0, "-", "document_assembler"], [452, 0, 0, "-", "embeddings_finisher"], [453, 0, 0, "-", "finisher"], [454, 0, 0, "-", "graph_finisher"], [455, 0, 0, "-", "has_recursive_fit"], [456, 0, 0, "-", "has_recursive_transform"], [457, 0, 0, "-", "image_assembler"], [459, 0, 0, "-", "light_pipeline"], [460, 0, 0, "-", "multi_document_assembler"], [461, 0, 0, "-", "prompt_assembler"], [462, 0, 0, "-", "recursive_pipeline"], [463, 0, 0, "-", "table_assembler"], [464, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[449, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[449, 3, 1, "", "getOutputCol"], [449, 2, 1, "", "inputCol"], [449, 2, 1, "", "name"], [449, 2, 1, "", "outputAnnotatorType"], [449, 2, 1, "", "outputCol"], [449, 3, 1, "", "setInputCol"], [449, 3, 1, "", "setOutputCol"], [449, 3, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[450, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[450, 2, 1, "", "chunkCol"], [450, 2, 1, "", "failOnMissing"], [450, 2, 1, "", "inputAnnotatorTypes"], [450, 2, 1, "", "isArray"], [450, 2, 1, "", "lowerCase"], [450, 2, 1, "", "name"], [450, 2, 1, "", "outputAnnotatorType"], [450, 3, 1, "", "setChunkCol"], [450, 3, 1, "", "setFailOnMissing"], [450, 3, 1, "", "setIsArray"], [450, 3, 1, "", "setLowerCase"], [450, 3, 1, "", "setParams"], [450, 3, 1, "", "setStartCol"], [450, 3, 1, "", "setStartColByTokenIndex"], [450, 2, 1, "", "startCol"], [450, 2, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[451, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[451, 2, 1, "", "cleanupMode"], [451, 3, 1, "", "getOutputCol"], [451, 2, 1, "", "idCol"], [451, 2, 1, "", "inputCol"], [451, 2, 1, "", "metadataCol"], [451, 2, 1, "", "name"], [451, 2, 1, "", "outputAnnotatorType"], [451, 2, 1, "", "outputCol"], [451, 3, 1, "", "setCleanupMode"], [451, 3, 1, "", "setIdCol"], [451, 3, 1, "", "setInputCol"], [451, 3, 1, "", "setMetadataCol"], [451, 3, 1, "", "setOutputCol"], [451, 3, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[452, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[452, 2, 1, "", "cleanAnnotations"], [452, 3, 1, "", "getInputCols"], [452, 3, 1, "", "getOutputCols"], [452, 2, 1, "", "inputCols"], [452, 2, 1, "", "name"], [452, 2, 1, "", "outputAsVector"], [452, 2, 1, "", "outputCols"], [452, 3, 1, "", "setCleanAnnotations"], [452, 3, 1, "", "setInputCols"], [452, 3, 1, "", "setOutputAsVector"], [452, 3, 1, "", "setOutputCols"], [452, 3, 1, "", "setParams"]], "sparknlp.base.finisher": [[453, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[453, 2, 1, "", "annotationSplitSymbol"], [453, 2, 1, "", "cleanAnnotations"], [453, 3, 1, "", "getInputCols"], [453, 3, 1, "", "getOutputCols"], [453, 2, 1, "", "includeMetadata"], [453, 2, 1, "", "inputCols"], [453, 2, 1, "", "name"], [453, 2, 1, "", "outputAsArray"], [453, 2, 1, "", "outputCols"], [453, 2, 1, "", "parseEmbeddingsVectors"], [453, 3, 1, "", "setAnnotationSplitSymbol"], [453, 3, 1, "", "setCleanAnnotations"], [453, 3, 1, "", "setIncludeMetadata"], [453, 3, 1, "", "setInputCols"], [453, 3, 1, "", "setOutputAsArray"], [453, 3, 1, "", "setOutputCols"], [453, 3, 1, "", "setParams"], [453, 3, 1, "", "setParseEmbeddingsVectors"], [453, 3, 1, "", "setValueSplitSymbol"], [453, 2, 1, "", "valueSplitSymbol"]], "sparknlp.base.graph_finisher": [[454, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[454, 2, 1, "", "cleanAnnotations"], [454, 2, 1, "", "inputCol"], [454, 2, 1, "", "name"], [454, 2, 1, "", "outputAsArray"], [454, 2, 1, "", "outputCol"], [454, 3, 1, "", "setCleanAnnotations"], [454, 3, 1, "", "setInputCol"], [454, 3, 1, "", "setOutputAsArray"], [454, 3, 1, "", "setOutputCol"], [454, 3, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[455, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[456, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[457, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[457, 3, 1, "", "getOutputCol"], [457, 2, 1, "", "inputCol"], [457, 3, 1, "", "loadImagesAsBytes"], [457, 2, 1, "", "name"], [457, 2, 1, "", "outputAnnotatorType"], [457, 2, 1, "", "outputCol"], [457, 3, 1, "", "setInputCol"], [457, 3, 1, "", "setOutputCol"], [457, 3, 1, "", "setParams"], [457, 3, 1, "", "setTextCol"], [457, 2, 1, "", "textCol"]], "sparknlp.base.light_pipeline": [[459, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[459, 3, 1, "", "annotate"], [459, 3, 1, "", "fullAnnotate"], [459, 3, 1, "", "fullAnnotateImage"], [459, 3, 1, "", "getIgnoreUnsupported"], [459, 2, 1, "", "parse_embeddings"], [459, 2, 1, "", "pipeline_model"], [459, 3, 1, "", "setIgnoreUnsupported"], [459, 3, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[460, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[460, 2, 1, "", "cleanupMode"], [460, 3, 1, "", "getOutputCols"], [460, 2, 1, "", "idCol"], [460, 2, 1, "", "inputCols"], [460, 2, 1, "", "metadataCol"], [460, 2, 1, "", "name"], [460, 2, 1, "", "outputAnnotatorType"], [460, 2, 1, "", "outputCols"], [460, 3, 1, "", "setCleanupMode"], [460, 3, 1, "", "setIdCol"], [460, 3, 1, "", "setInputCols"], [460, 3, 1, "", "setMetadataCol"], [460, 3, 1, "", "setOutputCols"], [460, 3, 1, "", "setParams"]], "sparknlp.base.prompt_assembler": [[461, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[461, 2, 1, "", "addAssistant"], [461, 2, 1, "", "chatTemplate"], [461, 2, 1, "", "inputCol"], [461, 2, 1, "", "name"], [461, 2, 1, "", "outputAnnotatorType"], [461, 2, 1, "", "outputCol"], [461, 3, 1, "", "setAddAssistant"], [461, 3, 1, "", "setChatTemplate"], [461, 3, 1, "", "setInputCol"], [461, 3, 1, "", "setOutputCol"], [461, 3, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[462, 1, 1, "", "RecursivePipeline"], [462, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline.RecursivePipelineModel": [[462, 2, 1, "", "stages"]], "sparknlp.base.table_assembler": [[463, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[463, 2, 1, "", "csvDelimiter"], [463, 2, 1, "", "escapeCsvDelimiter"], [463, 2, 1, "", "inputAnnotatorTypes"], [463, 2, 1, "", "inputFormat"], [463, 2, 1, "", "name"], [463, 2, 1, "", "outputAnnotatorType"], [463, 3, 1, "", "setCsvDelimiter"], [463, 3, 1, "", "setEscapeCsvDelimiter"], [463, 3, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[464, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[464, 2, 1, "", "inputAnnotatorTypes"], [464, 2, 1, "", "name"], [464, 2, 1, "", "outputAnnotatorType"], [464, 2, 1, "", "preservePosition"], [464, 3, 1, "", "setParams"], [464, 3, 1, "", "setPreservePosition"]], "sparknlp.common": [[465, 0, 0, "-", "annotator_approach"], [466, 0, 0, "-", "annotator_model"], [467, 0, 0, "-", "annotator_properties"], [468, 0, 0, "-", "annotator_type"], [469, 0, 0, "-", "coverage_result"], [471, 0, 0, "-", "match_strategy"], [472, 0, 0, "-", "properties"], [473, 0, 0, "-", "read_as"], [474, 0, 0, "-", "recursive_annotator_approach"], [475, 0, 0, "-", "storage"], [476, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[465, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[466, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[466, 3, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[467, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[467, 3, 1, "", "getInputCols"], [467, 3, 1, "", "getLazyAnnotator"], [467, 3, 1, "", "getOutputCol"], [467, 2, 1, "", "inputAnnotatorTypes"], [467, 2, 1, "", "inputCols"], [467, 3, 1, "", "inputColsValidation"], [467, 2, 1, "", "lazyAnnotator"], [467, 2, 1, "", "optionalInputAnnotatorTypes"], [467, 2, 1, "", "outputAnnotatorType"], [467, 2, 1, "", "outputCol"], [467, 3, 1, "", "setInputCols"], [467, 3, 1, "", "setLazyAnnotator"], [467, 3, 1, "", "setOutputCol"]], "sparknlp.common.annotator_type": [[468, 1, 1, "", "AnnotatorType"]], "sparknlp.common.annotator_type.AnnotatorType": [[468, 2, 1, "", "AUDIO"], [468, 2, 1, "", "CATEGORY"], [468, 2, 1, "", "CHUNK"], [468, 2, 1, "", "DATE"], [468, 2, 1, "", "DEPENDENCY"], [468, 2, 1, "", "DOCUMENT"], [468, 2, 1, "", "DOC_SIMILARITY_RANKINGS"], [468, 2, 1, "", "DUMMY"], [468, 2, 1, "", "ENTITY"], [468, 2, 1, "", "IMAGE"], [468, 2, 1, "", "LABELED_DEPENDENCY"], [468, 2, 1, "", "LANGUAGE"], [468, 2, 1, "", "NAMED_ENTITY"], [468, 2, 1, "", "NEGEX"], [468, 2, 1, "", "NODE"], [468, 2, 1, "", "POS"], [468, 2, 1, "", "SENTENCE_EMBEDDINGS"], [468, 2, 1, "", "SENTIMENT"], [468, 2, 1, "", "TABLE"], [468, 2, 1, "", "TOKEN"], [468, 2, 1, "", "WORDPIECE"], [468, 2, 1, "", "WORD_EMBEDDINGS"]], "sparknlp.common.coverage_result": [[469, 1, 1, "", "CoverageResult"]], "sparknlp.common.coverage_result.CoverageResult": [[469, 2, 1, "", "covered"], [469, 2, 1, "", "percentage"], [469, 2, 1, "", "total"]], "sparknlp.common.match_strategy": [[471, 1, 1, "", "MatchStrategy"]], "sparknlp.common.match_strategy.MatchStrategy": [[471, 2, 1, "", "MATCH_ALL"], [471, 2, 1, "", "MATCH_COMPLETE"], [471, 2, 1, "", "MATCH_FIRST"]], "sparknlp.common.properties": [[472, 1, 1, "", "HasAudioFeatureProperties"], [472, 1, 1, "", "HasBatchedAnnotate"], [472, 1, 1, "", "HasBatchedAnnotateAudio"], [472, 1, 1, "", "HasBatchedAnnotateImage"], [472, 1, 1, "", "HasCandidateLabelsProperties"], [472, 1, 1, "", "HasCaseSensitiveProperties"], [472, 1, 1, "", "HasClassifierActivationProperties"], [472, 1, 1, "", "HasClsTokenProperties"], [472, 1, 1, "", "HasEmbeddingsProperties"], [472, 1, 1, "", "HasEnableCachingProperties"], [472, 1, 1, "", "HasEngine"], [472, 1, 1, "", "HasGeneratorProperties"], [472, 1, 1, "", "HasImageFeatureProperties"], [472, 1, 1, "", "HasLlamaCppProperties"], [472, 1, 1, "", "HasLongMaxSentenceLengthLimit"], [472, 1, 1, "", "HasMaxSentenceLengthLimit"], [472, 1, 1, "", "HasRescaleFactor"]], "sparknlp.common.properties.HasAudioFeatureProperties": [[472, 2, 1, "", "doNormalize"], [472, 2, 1, "", "featureSize"], [472, 2, 1, "", "paddingSide"], [472, 2, 1, "", "paddingValue"], [472, 2, 1, "", "returnAttentionMask"], [472, 2, 1, "", "samplingRate"], [472, 3, 1, "", "setDoNormalize"], [472, 3, 1, "", "setFeatureSize"], [472, 3, 1, "", "setPaddingSide"], [472, 3, 1, "", "setPaddingValue"], [472, 3, 1, "", "setReturnAttentionMask"], [472, 3, 1, "", "setSamplingRate"]], "sparknlp.common.properties.HasBatchedAnnotate": [[472, 2, 1, "", "batchSize"], [472, 3, 1, "", "getBatchSize"], [472, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateAudio": [[472, 2, 1, "", "batchSize"], [472, 3, 1, "", "getBatchSize"], [472, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateImage": [[472, 2, 1, "", "batchSize"], [472, 3, 1, "", "getBatchSize"], [472, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCandidateLabelsProperties": [[472, 2, 1, "", "candidateLabels"], [472, 2, 1, "", "contradictionIdParam"], [472, 2, 1, "", "entailmentIdParam"], [472, 3, 1, "", "setCandidateLabels"], [472, 3, 1, "", "setContradictionIdParam"], [472, 3, 1, "", "setEntailmentIdParam"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[472, 2, 1, "", "caseSensitive"], [472, 3, 1, "", "getCaseSensitive"], [472, 3, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[472, 2, 1, "", "activation"], [472, 3, 1, "", "getActivation"], [472, 3, 1, "", "getMultilabel"], [472, 2, 1, "", "multilabel"], [472, 3, 1, "", "setActivation"], [472, 3, 1, "", "setMultilabel"], [472, 3, 1, "", "setThreshold"], [472, 2, 1, "", "threshold"]], "sparknlp.common.properties.HasClsTokenProperties": [[472, 3, 1, "", "getUseCLSToken"], [472, 3, 1, "", "setUseCLSToken"], [472, 2, 1, "", "useCLSToken"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[472, 2, 1, "", "dimension"], [472, 3, 1, "", "getDimension"], [472, 3, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[472, 2, 1, "", "enableCaching"], [472, 3, 1, "", "getEnableCaching"], [472, 3, 1, "", "setEnableCaching"]], "sparknlp.common.properties.HasEngine": [[472, 2, 1, "", "engine"], [472, 3, 1, "", "getEngine"]], "sparknlp.common.properties.HasGeneratorProperties": [[472, 2, 1, "", "beamSize"], [472, 2, 1, "", "doSample"], [472, 2, 1, "", "maxOutputLength"], [472, 2, 1, "", "minOutputLength"], [472, 2, 1, "", "nReturnSequences"], [472, 2, 1, "", "noRepeatNgramSize"], [472, 2, 1, "", "repetitionPenalty"], [472, 3, 1, "", "setBeamSize"], [472, 3, 1, "", "setDoSample"], [472, 3, 1, "", "setMaxOutputLength"], [472, 3, 1, "", "setMinOutputLength"], [472, 3, 1, "", "setNReturnSequences"], [472, 3, 1, "", "setNoRepeatNgramSize"], [472, 3, 1, "", "setRepetitionPenalty"], [472, 3, 1, "", "setTask"], [472, 3, 1, "", "setTemperature"], [472, 3, 1, "", "setTopK"], [472, 3, 1, "", "setTopP"], [472, 2, 1, "", "task"], [472, 2, 1, "", "temperature"], [472, 2, 1, "", "topK"], [472, 2, 1, "", "topP"]], "sparknlp.common.properties.HasImageFeatureProperties": [[472, 2, 1, "", "doNormalize"], [472, 2, 1, "", "doResize"], [472, 2, 1, "", "featureExtractorType"], [472, 2, 1, "", "imageMean"], [472, 2, 1, "", "imageStd"], [472, 2, 1, "", "resample"], [472, 3, 1, "", "setDoNormalize"], [472, 3, 1, "", "setDoResize"], [472, 3, 1, "", "setFeatureExtractorType"], [472, 3, 1, "", "setImageMean"], [472, 3, 1, "", "setImageStd"], [472, 3, 1, "", "setResample"], [472, 3, 1, "", "setSize"], [472, 2, 1, "", "size"]], "sparknlp.common.properties.HasLlamaCppProperties": [[472, 2, 1, "", "cachePrompt"], [472, 2, 1, "", "chatTemplate"], [472, 2, 1, "", "defragmentationThreshold"], [472, 2, 1, "", "disableTokenIds"], [472, 2, 1, "", "dynamicTemperatureExponent"], [472, 2, 1, "", "dynamicTemperatureRange"], [472, 2, 1, "", "embedding"], [472, 2, 1, "", "flashAttention"], [472, 2, 1, "", "frequencyPenalty"], [472, 3, 1, "", "getMetadata"], [472, 2, 1, "", "gpuSplitMode"], [472, 2, 1, "", "grammar"], [472, 2, 1, "", "ignoreEos"], [472, 2, 1, "", "inputPrefix"], [472, 2, 1, "", "inputSuffix"], [472, 2, 1, "", "mainGpu"], [472, 2, 1, "", "minKeep"], [472, 2, 1, "", "minP"], [472, 2, 1, "", "miroStat"], [472, 2, 1, "", "miroStatEta"], [472, 2, 1, "", "miroStatTau"], [472, 2, 1, "", "modelAlias"], [472, 2, 1, "", "modelDraft"], [472, 2, 1, "", "nBatch"], [472, 2, 1, "", "nCtx"], [472, 2, 1, "", "nDraft"], [472, 2, 1, "", "nGpuLayers"], [472, 2, 1, "", "nGpuLayersDraft"], [472, 2, 1, "", "nKeep"], [472, 2, 1, "", "nPredict"], [472, 2, 1, "", "nProbs"], [472, 2, 1, "", "nThreads"], [472, 2, 1, "", "nThreadsBatch"], [472, 2, 1, "", "nUbatch"], [472, 2, 1, "", "noKvOffload"], [472, 2, 1, "", "numaStrategy"], [472, 2, 1, "", "penalizeNl"], [472, 2, 1, "", "penaltyPrompt"], [472, 2, 1, "", "poolingType"], [472, 2, 1, "", "presencePenalty"], [472, 2, 1, "", "repeatLastN"], [472, 2, 1, "", "repeatPenalty"], [472, 2, 1, "", "ropeFreqBase"], [472, 2, 1, "", "ropeFreqScale"], [472, 2, 1, "", "ropeScalingType"], [472, 2, 1, "", "samplers"], [472, 2, 1, "", "seed"], [472, 3, 1, "", "setCachePrompt"], [472, 3, 1, "", "setChatTemplate"], [472, 3, 1, "", "setDefragmentationThreshold"], [472, 3, 1, "", "setDisableTokenIds"], [472, 3, 1, "", "setDynamicTemperatureExponent"], [472, 3, 1, "", "setDynamicTemperatureRange"], [472, 3, 1, "", "setEmbedding"], [472, 3, 1, "", "setFlashAttention"], [472, 3, 1, "", "setFrequencyPenalty"], [472, 3, 1, "", "setGpuSplitMode"], [472, 3, 1, "", "setGrammar"], [472, 3, 1, "", "setIgnoreEos"], [472, 3, 1, "", "setInputPrefix"], [472, 3, 1, "", "setInputSuffix"], [472, 3, 1, "", "setMainGpu"], [472, 3, 1, "", "setMinKeep"], [472, 3, 1, "", "setMinP"], [472, 3, 1, "", "setMiroStat"], [472, 3, 1, "", "setMiroStatEta"], [472, 3, 1, "", "setMiroStatTau"], [472, 3, 1, "", "setModelAlias"], [472, 3, 1, "", "setModelDraft"], [472, 3, 1, "", "setNBatch"], [472, 3, 1, "", "setNCtx"], [472, 3, 1, "", "setNDraft"], [472, 3, 1, "", "setNGpuLayers"], [472, 3, 1, "", "setNGpuLayersDraft"], [472, 3, 1, "", "setNKeep"], [472, 3, 1, "", "setNParallel"], [472, 3, 1, "", "setNPredict"], [472, 3, 1, "", "setNProbs"], [472, 3, 1, "", "setNThreads"], [472, 3, 1, "", "setNThreadsBatch"], [472, 3, 1, "", "setNUbatch"], [472, 3, 1, "", "setNoKvOffload"], [472, 3, 1, "", "setNumaStrategy"], [472, 3, 1, "", "setPenalizeNl"], [472, 3, 1, "", "setPenaltyPrompt"], [472, 3, 1, "", "setPoolingType"], [472, 3, 1, "", "setPresencePenalty"], [472, 3, 1, "", "setRepeatLastN"], [472, 3, 1, "", "setRepeatPenalty"], [472, 3, 1, "", "setRopeFreqBase"], [472, 3, 1, "", "setRopeFreqScale"], [472, 3, 1, "", "setRopeScalingType"], [472, 3, 1, "", "setSamplers"], [472, 3, 1, "", "setSeed"], [472, 3, 1, "", "setStopStrings"], [472, 3, 1, "", "setSystemPrompt"], [472, 3, 1, "", "setTemperature"], [472, 3, 1, "", "setTfsZ"], [472, 3, 1, "", "setTokenBias"], [472, 3, 1, "", "setTokenIdBias"], [472, 3, 1, "", "setTopK"], [472, 3, 1, "", "setTopP"], [472, 3, 1, "", "setTypicalP"], [472, 3, 1, "", "setUseChatTemplate"], [472, 3, 1, "", "setUseMlock"], [472, 3, 1, "", "setUseMmap"], [472, 3, 1, "", "setYarnAttnFactor"], [472, 3, 1, "", "setYarnBetaFast"], [472, 3, 1, "", "setYarnBetaSlow"], [472, 3, 1, "", "setYarnExtFactor"], [472, 3, 1, "", "setYarnOrigCtx"], [472, 2, 1, "", "stopStrings"], [472, 2, 1, "", "systemPrompt"], [472, 2, 1, "", "temperature"], [472, 2, 1, "", "tfsZ"], [472, 2, 1, "", "topK"], [472, 2, 1, "", "topP"], [472, 2, 1, "", "typicalP"], [472, 2, 1, "", "useChatTemplate"], [472, 2, 1, "", "useMlock"], [472, 2, 1, "", "useMmap"], [472, 2, 1, "", "yarnAttnFactor"], [472, 2, 1, "", "yarnBetaFast"], [472, 2, 1, "", "yarnBetaSlow"], [472, 2, 1, "", "yarnExtFactor"], [472, 2, 1, "", "yarnOrigCtx"]], "sparknlp.common.properties.HasLongMaxSentenceLengthLimit": [[472, 2, 1, "", "max_length_limit"]], "sparknlp.common.properties.HasMaxSentenceLengthLimit": [[472, 3, 1, "", "getMaxSentenceLength"], [472, 2, 1, "", "maxSentenceLength"], [472, 2, 1, "", "max_length_limit"], [472, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.common.properties.HasRescaleFactor": [[472, 2, 1, "", "doRescale"], [472, 2, 1, "", "rescaleFactor"], [472, 3, 1, "", "setDoRescale"], [472, 3, 1, "", "setRescaleFactor"]], "sparknlp.common.read_as": [[473, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[473, 2, 1, "", "BINARY"], [473, 2, 1, "", "SPARK"], [473, 2, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[474, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[475, 1, 1, "", "HasStorage"], [475, 1, 1, "", "HasStorageModel"], [475, 1, 1, "", "HasStorageOptions"], [475, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[475, 3, 1, "", "getStoragePath"], [475, 3, 1, "", "setStoragePath"], [475, 2, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[475, 3, 1, "", "loadStorage"], [475, 3, 1, "", "loadStorages"], [475, 3, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[475, 2, 1, "", "enableInMemoryStorage"], [475, 3, 1, "", "getEnableInMemoryStorage"], [475, 3, 1, "", "getIncludeStorage"], [475, 2, 1, "", "includeStorage"], [475, 3, 1, "", "setEnableInMemoryStorage"], [475, 3, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[475, 3, 1, "", "getStorageRef"], [475, 3, 1, "", "setStorageRef"], [475, 2, 1, "", "storageRef"]], "sparknlp.common.utils": [[476, 5, 1, "", "ExternalResource"], [476, 5, 1, "", "RegexRule"]], "sparknlp.functions": [[477, 5, 1, "", "explode_annotations_col"], [477, 5, 1, "", "filter_by_annotations_col"], [477, 5, 1, "", "map_annotations"], [477, 5, 1, "", "map_annotations_array"], [477, 5, 1, "", "map_annotations_col"], [477, 5, 1, "", "map_annotations_cols"], [477, 5, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[479, 0, 0, "-", "annotator_java_ml"], [480, 0, 0, "-", "annotator_transformer"], [481, 0, 0, "-", "extended_java_wrapper"], [483, 0, 0, "-", "params_getters_setters"], [484, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[479, 1, 1, "", "AnnotatorJavaMLReadable"], [479, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[479, 3, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[480, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer.AnnotatorTransformer": [[480, 2, 1, "", "outputAnnotatorType"]], "sparknlp.internal.extended_java_wrapper": [[481, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[481, 3, 1, "", "apply"], [481, 3, 1, "", "getDataFrame"], [481, 2, 1, "", "java_obj"], [481, 3, 1, "", "new_java_array"], [481, 3, 1, "", "new_java_array_integer"], [481, 3, 1, "", "new_java_array_string"], [481, 3, 1, "", "new_java_obj"], [481, 2, 1, "", "sc"], [481, 3, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[483, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[483, 3, 1, "", "getParamValue"], [483, 2, 1, "", "getter_attrs"], [483, 3, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[484, 1, 1, "", "RecursiveEstimator"], [484, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[484, 3, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[484, 3, 1, "", "transform_recursive"]], "sparknlp.logging": [[485, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[485, 1, 1, "", "CometLogger"], [485, 4, 1, "", "comet_ml"]], "sparknlp.logging.comet.CometLogger": [[485, 2, 1, "", "comet_mode"], [485, 3, 1, "", "end"], [485, 2, 1, "", "experiment"], [485, 2, 1, "", "experiment_id"], [485, 2, 1, "", "experiment_kwargs"], [485, 3, 1, "", "log_asset"], [485, 3, 1, "", "log_asset_data"], [485, 3, 1, "", "log_completed_run"], [485, 3, 1, "", "log_metrics"], [485, 3, 1, "", "log_parameters"], [485, 3, 1, "", "log_pipeline_parameters"], [485, 3, 1, "", "log_visualization"], [485, 3, 1, "", "monitor"], [485, 2, 1, "", "project_name"], [485, 2, 1, "", "thread"], [485, 2, 1, "", "workspace"]], "sparknlp.partition": [[488, 0, 0, "-", "partition"], [489, 0, 0, "-", "partition_properties"], [490, 0, 0, "-", "partition_transformer"]], "sparknlp.partition.partition": [[488, 1, 1, "", "Partition"]], "sparknlp.partition.partition.Partition": [[488, 3, 1, "", "partition"], [488, 3, 1, "", "partition_text"], [488, 3, 1, "", "partition_urls"], [488, 2, 1, "", "spark"]], "sparknlp.partition.partition_properties": [[489, 1, 1, "", "HasChunkerProperties"], [489, 1, 1, "", "HasEmailReaderProperties"], [489, 1, 1, "", "HasExcelReaderProperties"], [489, 1, 1, "", "HasHTMLReaderProperties"], [489, 1, 1, "", "HasPowerPointProperties"], [489, 1, 1, "", "HasTextReaderProperties"]], "sparknlp.partition.partition_properties.HasChunkerProperties": [[489, 2, 1, "", "chunkingStrategy"], [489, 2, 1, "", "combineTextUnderNChars"], [489, 2, 1, "", "maxCharacters"], [489, 2, 1, "", "newAfterNChars"], [489, 2, 1, "", "overlap"], [489, 2, 1, "", "overlapAll"], [489, 3, 1, "", "setChunkingStrategy"], [489, 3, 1, "", "setCombineTextUnderNChars"], [489, 3, 1, "", "setMaxCharacters"], [489, 3, 1, "", "setNewAfterNChars"], [489, 3, 1, "", "setOverlap"], [489, 3, 1, "", "setOverlapAll"]], "sparknlp.partition.partition_properties.HasEmailReaderProperties": [[489, 2, 1, "", "addAttachmentContent"], [489, 3, 1, "", "getAddAttachmentContent"], [489, 3, 1, "", "setAddAttachmentContent"]], "sparknlp.partition.partition_properties.HasExcelReaderProperties": [[489, 2, 1, "", "appendCells"], [489, 2, 1, "", "cellSeparator"], [489, 3, 1, "", "getAppendCells"], [489, 3, 1, "", "getCellSeparator"], [489, 3, 1, "", "setAppendCells"], [489, 3, 1, "", "setCellSeparator"]], "sparknlp.partition.partition_properties.HasHTMLReaderProperties": [[489, 3, 1, "", "getTimeout"], [489, 3, 1, "", "setHeaders"], [489, 3, 1, "", "setTimeout"], [489, 2, 1, "", "timeout"]], "sparknlp.partition.partition_properties.HasPowerPointProperties": [[489, 3, 1, "", "getIncludeSlideNotes"], [489, 2, 1, "", "includeSlideNotes"], [489, 3, 1, "", "setIncludeSlideNotes"]], "sparknlp.partition.partition_properties.HasTextReaderProperties": [[489, 3, 1, "", "getGroupBrokenParagraphs"], [489, 3, 1, "", "getMaxLineCount"], [489, 3, 1, "", "getParagraphSplit"], [489, 3, 1, "", "getShortLineWordThreshold"], [489, 3, 1, "", "getThreshold"], [489, 3, 1, "", "getTitleLengthSize"], [489, 2, 1, "", "groupBrokenParagraphs"], [489, 2, 1, "", "maxLineCount"], [489, 2, 1, "", "paragraphSplit"], [489, 3, 1, "", "setGroupBrokenParagraphs"], [489, 3, 1, "", "setMaxLineCount"], [489, 3, 1, "", "setParagraphSplit"], [489, 3, 1, "", "setShortLineWordThreshold"], [489, 3, 1, "", "setThreshold"], [489, 3, 1, "", "setTitleLengthSize"], [489, 2, 1, "", "shortLineWordThreshold"], [489, 2, 1, "", "threshold"], [489, 2, 1, "", "titleLengthSize"]], "sparknlp.partition.partition_transformer": [[490, 1, 1, "", "PartitionTransformer"]], "sparknlp.partition.partition_transformer.PartitionTransformer": [[490, 2, 1, "", "contentPath"], [490, 2, 1, "", "contentType"], [490, 3, 1, "", "getContentPath"], [490, 3, 1, "", "getContentType"], [490, 3, 1, "", "getIncludePageBreaks"], [490, 3, 1, "", "getInferTableStructure"], [490, 3, 1, "", "getStoreContent"], [490, 3, 1, "", "getTitleFontSize"], [490, 2, 1, "", "includePageBreaks"], [490, 2, 1, "", "inferTableStructure"], [490, 2, 1, "", "inputAnnotatorTypes"], [490, 2, 1, "", "name"], [490, 2, 1, "", "outputAnnotatorType"], [490, 3, 1, "", "setContentPath"], [490, 3, 1, "", "setContentType"], [490, 3, 1, "", "setIncludePageBreaks"], [490, 3, 1, "", "setInferTableStructure"], [490, 3, 1, "", "setStoreContent"], [490, 3, 1, "", "setTitleFontSize"], [490, 2, 1, "", "storeContent"], [490, 2, 1, "", "titleFontSize"]], "sparknlp.pretrained": [[492, 0, 0, "-", "pretrained_pipeline"], [493, 0, 0, "-", "resource_downloader"], [494, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[492, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[492, 3, 1, "", "annotate"], [492, 3, 1, "", "from_disk"], [492, 3, 1, "", "fullAnnotate"], [492, 3, 1, "", "fullAnnotateImage"], [492, 2, 1, "", "light_model"], [492, 3, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[493, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[493, 3, 1, "", "clearCache"], [493, 3, 1, "", "downloadModel"], [493, 3, 1, "", "downloadModelDirectly"], [493, 3, 1, "", "downloadPipeline"], [493, 3, 1, "", "showAvailableAnnotators"], [493, 3, 1, "", "showPublicModels"], [493, 3, 1, "", "showPublicPipelines"], [493, 3, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[494, 5, 1, "", "printProgress"]], "sparknlp.reader": [[495, 0, 0, "-", "enums"], [497, 0, 0, "-", "pdf_to_text"], [498, 0, 0, "-", "reader2doc"], [499, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.enums": [[495, 1, 1, "", "TextStripperType"]], "sparknlp.reader.enums.TextStripperType": [[495, 2, 1, "", "PDF_LAYOUT_TEXT_STRIPPER"], [495, 2, 1, "", "PDF_TEXT_STRIPPER"]], "sparknlp.reader.pdf_to_text": [[497, 1, 1, "", "PdfToText"]], "sparknlp.reader.pdf_to_text.PdfToText": [[497, 2, 1, "", "extractCoordinates"], [497, 2, 1, "", "normalizeLigatures"], [497, 2, 1, "", "onlyPageNum"], [497, 2, 1, "", "pageNumCol"], [497, 2, 1, "", "partitionNum"], [497, 3, 1, "", "setExtractCoordinates"], [497, 3, 1, "", "setInputCol"], [497, 3, 1, "", "setNormalizeLigatures"], [497, 3, 1, "", "setOnlyPageNum"], [497, 3, 1, "", "setOutputCol"], [497, 3, 1, "", "setPageNumCol"], [497, 3, 1, "", "setPartitionNum"], [497, 3, 1, "", "setSort"], [497, 3, 1, "", "setSplitPage"], [497, 3, 1, "", "setStoreSplittedPdf"], [497, 3, 1, "", "setTextStripper"], [497, 2, 1, "", "sort"], [497, 2, 1, "", "splitPage"], [497, 2, 1, "", "storeSplittedPdf"], [497, 2, 1, "", "textStripper"]], "sparknlp.reader.reader2doc": [[498, 1, 1, "", "Reader2Doc"]], "sparknlp.reader.reader2doc.Reader2Doc": [[498, 2, 1, "", "contentPath"], [498, 2, 1, "", "contentType"], [498, 2, 1, "", "explodeDocs"], [498, 2, 1, "", "flattenOutput"], [498, 2, 1, "", "name"], [498, 2, 1, "", "outputAnnotatorType"], [498, 2, 1, "", "outputCol"], [498, 3, 1, "", "setContentPath"], [498, 3, 1, "", "setContentType"], [498, 3, 1, "", "setExplodeDocs"], [498, 3, 1, "", "setFlattenOutput"], [498, 3, 1, "", "setOutputCol"], [498, 3, 1, "", "setParams"], [498, 3, 1, "", "setTitleThreshold"], [498, 2, 1, "", "titleThreshold"]], "sparknlp.reader.sparknlp_reader": [[499, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[499, 3, 1, "", "csv"], [499, 3, 1, "", "doc"], [499, 3, 1, "", "email"], [499, 3, 1, "", "html"], [499, 3, 1, "", "md"], [499, 3, 1, "", "pdf"], [499, 3, 1, "", "ppt"], [499, 2, 1, "", "spark"], [499, 3, 1, "", "txt"], [499, 3, 1, "", "xls"], [499, 3, 1, "", "xml"]], "sparknlp.training": [[500, 0, 0, "-", "conll"], [501, 0, 0, "-", "conllu"], [503, 0, 0, "-", "pos"], [504, 0, 0, "-", "pub_tator"], [505, 0, 0, "-", "spacy_to_annotation"], [506, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[500, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[500, 3, 1, "", "readDataset"]], "sparknlp.training.conllu": [[501, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[501, 3, 1, "", "readDataset"]], "sparknlp.training.pos": [[503, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[503, 3, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[504, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[504, 3, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[505, 1, 1, "", "SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation.SpacyToAnnotation": [[505, 3, 1, "", "readJsonFile"]], "sparknlp.training.tfgraphs": [[506, 4, 1, "", "tf_graph"], [506, 4, 1, "", "tf_graph_1x"]], "sparknlp.upload_to_hub": [[507, 1, 1, "", "PushToHub"]], "sparknlp.upload_to_hub.PushToHub": [[507, 3, 1, "", "check_for_required_info"], [507, 3, 1, "", "create_docs"], [507, 2, 1, "", "list_of_tasks"], [507, 3, 1, "", "push_to_hub"], [507, 3, 1, "", "unzip_directory"], [507, 3, 1, "", "zip_directory"]], "sparknlp.util": [[508, 1, 1, "", "CoNLLGenerator"], [508, 1, 1, "", "EmbeddingsDataFrameUtils"], [508, 5, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[508, 3, 1, "", "exportConllFiles"]], "sparknlp.util.EmbeddingsDataFrameUtils": [[508, 2, 1, "", "emptyImageRow"], [508, 2, 1, "", "imageSchema"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"sparknlp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508], "packag": [1, 5, 6, 12, 59, 62, 64, 83, 90, 121, 124, 126, 129, 136, 144, 147, 150, 152, 155, 158, 178, 180, 187, 193, 195, 211, 224, 230, 232, 236, 240, 245, 377, 478], "subpackag": [1, 5, 377, 478], "submodul": [1, 5, 6, 12, 59, 62, 64, 83, 90, 121, 124, 126, 129, 136, 144, 147, 150, 152, 155, 158, 178, 180, 187, 193, 195, 211, 224, 230, 232, 236, 240, 245, 260, 290, 314, 315, 322, 337, 356, 375, 377, 378, 380, 385, 390, 398, 403, 404, 406, 409, 418, 433, 435, 442, 447, 458, 470, 478, 482, 486, 487, 491, 496, 502], "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509], "content": [1, 5, 6, 12, 59, 62, 64, 83, 90, 121, 124, 126, 129, 136, 144, 147, 150, 152, 155, 158, 178, 180, 187, 193, 195, 211, 224, 230, 232, 236, 240, 245, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 513, 514, 515], "annotation_audio": [3, 257], "annotation_imag": [4, 258], "audio": [6, 7, 8, 9, 259, 260, 261, 262], "hubert_for_ctc": [7, 259], "wav2vec2_for_ctc": [8, 261], "whisper_for_ctc": [9, 262], "chunk2_doc": [10, 263], "chunker": [11, 264], "classifier_dl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "albert_for_multiple_choic": [13, 265], "albert_for_question_answ": [14, 266], "albert_for_sequence_classif": [15, 267], "albert_for_token_classif": [16, 268], "albert_for_zero_shot_classif": [17, 269], "bart_for_zero_shot_classif": [18, 270], "bert_for_multiple_choic": [19, 271], "bert_for_question_answ": [20, 272], "bert_for_sequence_classif": [21, 273], "bert_for_token_classif": [22, 274], "bert_for_zero_shot_classif": [23, 275], "camembert_for_question_answ": [24, 276], "camembert_for_sequence_classif": [25, 277], "camembert_for_token_classif": [26, 278], "camembert_for_zero_shot_classif": [27, 279], "exampl": [27, 32, 279, 284], "deberta_for_question_answ": [29, 281], "deberta_for_sequence_classif": [30, 282], "deberta_for_token_classif": [31, 283], "deberta_for_zero_shot_classif": [32, 284], "return": [32, 70, 71, 77, 284, 323, 324, 330], "distil_bert_for_question_answ": [33, 285], "distil_bert_for_sequence_classif": [34, 286], "distil_bert_for_token_classif": [35, 287], "distil_bert_for_zero_shot_classif": [36, 288], "distilbert_for_multiple_choic": [37, 289], "longformer_for_question_answ": [38, 291], "longformer_for_sequence_classif": [39, 292], "longformer_for_token_classif": [40, 293], "mpnet_for_question_answ": [41, 294], "mpnet_for_sequence_classif": [42, 295], "mpnet_for_token_classif": [43, 296], "multi_classifier_dl": [44, 297], "roberta_for_multiple_choic": [45, 298], "roberta_for_question_answ": [46, 299], "roberta_for_sequence_classif": [47, 300], "roberta_for_token_classif": [48, 301], "roberta_for_zero_shot_classif": [49, 302], "sentiment_dl": [50, 303], "tapas_for_question_answ": [51, 304], "xlm_roberta_for_multiple_choic": [52, 305], "xlm_roberta_for_question_answ": [53, 306], "xlm_roberta_for_sequence_classif": [54, 307], "xlm_roberta_for_token_classif": [55, 308], "xlm_roberta_for_zero_shot_classif": [56, 309], "xlnet_for_sequence_classif": [57, 310], "xlnet_for_token_classif": [58, 311], "cleaner": [59, 60, 61, 312, 313, 314], "extractor": [61, 313], "coref": [62, 63, 315, 316], "spanbert_coref": [63, 316], "cv": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "blip_for_question_answ": [65, 317], "clip_for_zero_shot_classif": [66, 318], "convnext_for_image_classif": [67, 319], "florence2_transform": [68, 320], "gemma3_for_multimod": [69, 321], "internvl_for_multimod": [70, 323], "refer": [70, 71, 77, 323, 324, 330, 509], "janus_for_multimod": [71, 324], "llava_for_multimod": [72, 325], "mllama_for_multimod": [73, 326], "paligemma_for_multimod": [74, 327], "phi3_vision_for_multimod": [75, 328], "qwen2vl_transform": [76, 329], "smolvlm_transform": [77, 330], "swin_for_image_classif": [78, 331], "vision_encoder_decoder_for_image_capt": [79, 332], "vit_for_image_classif": [80, 333], "dataframe_optim": [81, 334], "date2_chunk": [82, 335], "depend": [83, 84, 85, 336, 337, 338], "dependency_pars": [84, 336], "typed_dependency_pars": [85, 338], "document_character_text_splitt": [86, 339], "document_norm": [87, 340], "document_token_splitt": [88, 341], "document_token_splitter_test": [89, 342], "embed": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "albert_embed": [91, 343], "auto_gguf_embed": [92, 344], "bert_embed": [93, 345], "bert_sentence_embed": [94, 346], "bge_embed": [95, 347], "camembert_embed": [96, 348], "chunk_embed": [97, 349], "deberta_embed": [98, 350], "distil_bert_embed": [99, 351], "doc2vec": [100, 352], "e5_embed": [101, 353], "e5v_embed": [102, 354], "elmo_embed": [103, 355], "instructor_embed": [104, 357], "longformer_embed": [105, 358], "minilm_embed": [106, 359], "mpnet_embed": [107, 360], "mxbai_embed": [108, 361], "nomic_embed": [109, 362], "roberta_embed": [110, 363], "roberta_sentence_embed": [111, 364], "sentence_embed": [112, 365], "snowflake_embed": [113, 366], "uae_embed": [114, 367], "universal_sentence_encod": [115, 368], "word2vec": [116, 369], "word_embed": [117, 370], "xlm_roberta_embed": [118, 371], "xlm_roberta_sentence_embed": [119, 372], "xlnet_embed": [120, 373], "er": [121, 122, 374, 375], "entity_rul": [122, 374], "graph_extract": [123, 376], "keyword_extract": [124, 125, 378, 379], "yake_keyword_extract": [125, 379], "ld_dl": [126, 127, 380, 381], "language_detector_dl": [127, 381], "lemmat": [128, 382], "matcher": [129, 130, 131, 132, 133, 134, 383, 384, 385, 386, 387, 388], "big_text_match": [130, 383], "date_match": [131, 384], "multi_date_match": [132, 386], "regex_match": [133, 387], "text_match": [134, 388], "n_gram_gener": [135, 389], "ner": [136, 137, 138, 139, 140, 141, 142, 390, 391, 392, 393, 394, 395, 396], "ner_approach": [137, 391], "ner_convert": [138, 392], "ner_crf": [139, 393], "ner_dl": [140, 394], "ner_overwrit": [141, 395], "zero_shot_ner_model": [142, 396], "normal": [143, 397], "openai": [144, 145, 146, 398, 399, 400], "openai_complet": [145, 399], "openai_embed": [146, 400], "param": [147, 148, 149, 401, 402, 403], "classifier_encod": [148, 401], "evaluation_dl_param": [149, 402], "po": [150, 151, 248, 404, 405, 503, 520], "perceptron": [151, 405], "sentenc": [152, 153, 154, 406, 407, 408, 515], "sentence_detector": [153, 407], "sentence_detector_dl": [154, 408], "sentiment": [155, 156, 157, 409, 410, 411], "sentiment_detector": [156, 410], "vivekn_senti": [157, 411], "seq2seq": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "auto_gguf_model": [159, 412], "auto_gguf_vision_model": [160, 413], "bart_transform": [161, 414], "cohere_transform": [162, 415], "cpm_transform": [163, 416], "gpt2_transform": [164, 417], "llama2_transform": [165, 419], "llama3_transform": [166, 420], "m2m100_transform": [167, 421], "marian_transform": [168, 422], "mistral_transform": [169, 423], "nllb_transform": [170, 424], "olmo_transform": [171, 425], "phi2_transform": [172, 426], "phi3_transform": [173, 427], "phi4_transform": [174, 428], "qwen_transform": [175, 429], "starcoder_transform": [176, 430], "t5_transform": [177, 431], "similar": [178, 179, 432, 433], "document_similarity_rank": [179, 432], "spell_check": [180, 181, 182, 183, 434, 435, 436, 437], "context_spell_check": [181, 434], "norvig_sweet": [182, 436], "symmetric_delet": [183, 437], "stemmer": [184, 438], "stop_words_clean": [185, 439], "tf_ner_dl_graph_build": [186, 440], "token": [187, 188, 189, 190, 191, 441, 442, 443, 444, 445, 515], "chunk_token": [188, 441], "recursive_token": [189, 443], "regex_token": [190, 444], "token2_chunk": [192, 446], "w": [193, 194, 447, 448], "word_segment": [194, 448], "base": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "audio_assembl": [196, 449], "doc2_chunk": [197, 450], "document_assembl": [198, 451], "embeddings_finish": [199, 452], "finish": [200, 453, 515], "graph_finish": [201, 454], "has_recursive_fit": [202, 455], "has_recursive_transform": [203, 456], "image_assembl": [204, 457], "light_pipelin": [205, 459], "multi_document_assembl": [206, 460], "prompt_assembl": [207, 461], "recursive_pipelin": [208, 462], "table_assembl": [209, 463], "token_assembl": [210, 464], "common": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 514], "annotator_approach": [212, 465], "annotator_model": [213, 466], "annotator_properti": [214, 467], "annotator_typ": [215, 468], "coverage_result": [216, 469], "match_strategi": [217, 471], "properti": [218, 472], "read_a": [219, 473], "recursive_annotator_approach": [220, 474], "storag": [221, 475], "util": [222, 239, 253, 476, 494, 508], "function": [223, 334, 476, 477, 478, 494, 508, 514, 516], "intern": [224, 225, 226, 227, 228, 229, 479, 480, 481, 482, 483, 484], "annotator_java_ml": [225, 479], "annotator_transform": [226, 480], "extended_java_wrapp": [227, 481], "params_getters_sett": [228, 483], "recurs": [229, 484], "log": [230, 231, 485, 486, 510, 512], "comet": [231, 485, 510], "partit": [232, 233, 234, 235, 487, 488, 489, 490], "partition_properti": [234, 489], "partition_transform": [235, 490], "pretrain": [236, 237, 238, 239, 491, 492, 493, 494, 514, 518, 519], "pretrained_pipelin": [237, 492], "resource_download": [238, 493], "reader": [240, 241, 242, 243, 244, 495, 496, 497, 498, 499], "enum": [241, 495], "pdf_to_text": [242, 497], "reader2doc": [243, 498], "sparknlp_read": [244, 499], "train": [245, 246, 247, 248, 249, 250, 251, 500, 501, 502, 503, 504, 505, 506, 520], "conll": [246, 500, 520], "conllu": [247, 501, 520], "pub_tat": [249, 504], "spacy_to_annot": [250, 505], "tfgraph": [251, 506], "upload_to_hub": [252, 507], "get": [254, 515], "start": 254, "spark": [254, 255, 510, 515, 519], "nlp": [254, 255, 510, 519], "cheat": 254, "sheet": 254, "requir": 254, "instal": [254, 510], "us": [254, 510, 519], "conda": 254, "virtualenv": 254, "session": 254, "from": 254, "python": 254, "document": 255, "class": [256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 479, 480, 481, 483, 484, 485, 488, 489, 490, 492, 493, 495, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508], "attribut": [478, 485], "api": 509, "A": 510, "meta": 510, "machin": [510, 511], "learn": [510, 511], "platform": [510, 511], "pipelin": [510, 515, 518, 519], "paramet": 510, "evalu": 510, "metric": 510, "visual": 510, "run": 510, "an": 510, "offlin": 510, "experi": 510, "mlflow": 511, "lifecycl": 511, "third": 512, "parti": 512, "project": 512, "approach": 514, "model": 514, "note": 514, "avail": [514, 519], "set": 515, "up": 515, "your": 515, "own": 515, "type": 515, "necessari": 515, "import": 515, "construct": 515, "documentassembl": 515, "data": 515, "detect": 515, "out": 515, "put": 515, "all": 515, "togeth": 515, "ml": [515, 519], "helper": 516, "user": 517, "guid": 517, "light": 518, "convert": 518, "pipelinemodel": 518, "download": 519, "As": 519, "lightpipelin": 519, "load": 520, "dataset": 520, "spell": 520, "checker": 520, "pubtat": 520}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp": [[0, "sparknlp"], [478, "module-sparknlp"]], "sparknlp package": [[1, "sparknlp-package"]], "Subpackages": [[1, "subpackages"], [5, "subpackages"], [377, "subpackages"], [478, "subpackages"]], "Submodules": [[1, "submodules"], [5, "submodules"], [6, "submodules"], [12, "submodules"], [59, "submodules"], [62, "submodules"], [64, "submodules"], [83, "submodules"], [90, "submodules"], [121, "submodules"], [124, "submodules"], [126, "submodules"], [129, "submodules"], [136, "submodules"], [144, "submodules"], [147, "submodules"], [150, "submodules"], [152, "submodules"], [155, "submodules"], [158, "submodules"], [178, "submodules"], [180, "submodules"], [187, "submodules"], [193, "submodules"], [195, "submodules"], [211, "submodules"], [224, "submodules"], [230, "submodules"], [232, "submodules"], [236, "submodules"], [240, "submodules"], [245, "submodules"], [260, "submodules"], [290, "submodules"], [314, "submodules"], [315, "submodules"], [322, "submodules"], [337, "submodules"], [356, "submodules"], [375, "submodules"], [377, "submodules"], [378, "submodules"], [380, "submodules"], [385, "submodules"], [390, "submodules"], [398, "submodules"], [403, "submodules"], [404, "submodules"], [406, "submodules"], [409, "submodules"], [418, "submodules"], [433, "submodules"], [435, "submodules"], [442, "submodules"], [447, "submodules"], [458, "submodules"], [470, "submodules"], [478, "submodules"], [482, "submodules"], [486, "submodules"], [487, "submodules"], [491, "submodules"], [496, "submodules"], [502, "submodules"]], "Module contents": [[1, "module-sparknlp"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [12, "module-sparknlp.annotator.classifier_dl"], [59, "module-sparknlp.annotator.cleaners"], [62, "module-sparknlp.annotator.coref"], [64, "module-sparknlp.annotator.cv"], [83, "module-sparknlp.annotator.dependency"], [90, "module-sparknlp.annotator.embeddings"], [121, "module-sparknlp.annotator.er"], [124, "module-sparknlp.annotator.keyword_extraction"], [126, "module-sparknlp.annotator.ld_dl"], [129, "module-sparknlp.annotator.matcher"], [136, "module-sparknlp.annotator.ner"], [144, "module-sparknlp.annotator.openai"], [147, "module-sparknlp.annotator.param"], [150, "module-sparknlp.annotator.pos"], [152, "module-sparknlp.annotator.sentence"], [155, "module-sparknlp.annotator.sentiment"], [158, "module-sparknlp.annotator.seq2seq"], [178, "module-sparknlp.annotator.similarity"], [180, "module-sparknlp.annotator.spell_check"], [187, "module-sparknlp.annotator.token"], [193, "module-sparknlp.annotator.ws"], [195, "module-sparknlp.base"], [211, "module-sparknlp.common"], [224, "module-sparknlp.internal"], [230, "module-sparknlp.logging"], [232, "module-sparknlp.partition"], [236, "module-sparknlp.pretrained"], [240, "module-sparknlp.reader"], [245, "module-sparknlp.training"]], "sparknlp.annotation module": [[2, "module-sparknlp.annotation"]], "sparknlp.annotation_audio module": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image module": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator package": [[5, "sparknlp-annotator-package"]], "sparknlp.annotator.audio package": [[6, "sparknlp-annotator-audio-package"]], "sparknlp.annotator.audio.hubert_for_ctc module": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc module": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc module": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc module": [[10, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker module": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl package": [[12, "sparknlp-annotator-classifier-dl-package"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering module": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification module": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering module": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification module": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering module": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification module": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[27, "examples"], [32, "examples"], [279, "examples"], [284, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl module": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering module": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification module": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[32, "returns"], [32, "id1"], [70, "returns"], [70, "id1"], [71, "returns"], [71, "id1"], [77, "returns"], [77, "id1"], [284, "returns"], [284, "id1"], [323, "returns"], [323, "id1"], [324, "returns"], [324, "id1"], [330, "returns"], [330, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering module": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification module": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl module": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering module": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification module": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl module": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering module": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners package": [[59, "sparknlp-annotator-cleaners-package"]], "sparknlp.annotator.cleaners.cleaner module": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor module": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.coref package": [[62, "sparknlp-annotator-coref-package"]], "sparknlp.annotator.coref.spanbert_coref module": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv package": [[64, "sparknlp-annotator-cv-package"]], "sparknlp.annotator.cv.blip_for_question_answering module": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification module": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification module": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer module": [[68, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal module": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv.internvl_for_multimodal module": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "References": [[70, "references"], [71, "references"], [77, "references"], [323, "references"], [324, "references"], [330, "references"]], "sparknlp.annotator.cv.janus_for_multimodal module": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal module": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal module": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal module": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal module": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer module": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer module": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification module": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification module": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.dataframe_optimizer module": [[81, "module-sparknlp.annotator.dataframe_optimizer"]], "sparknlp.annotator.date2_chunk module": [[82, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency package": [[83, "sparknlp-annotator-dependency-package"]], "sparknlp.annotator.dependency.dependency_parser module": [[84, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency.typed_dependency_parser module": [[85, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter module": [[86, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer module": [[87, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter module": [[88, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test module": [[89, "sparknlp-annotator-document-token-splitter-test-module"]], "sparknlp.annotator.embeddings package": [[90, "sparknlp-annotator-embeddings-package"]], "sparknlp.annotator.embeddings.albert_embeddings module": [[91, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings module": [[92, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings module": [[93, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings module": [[94, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings module": [[95, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings module": [[96, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings module": [[97, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings module": [[98, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings module": [[99, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec module": [[100, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings module": [[101, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings module": [[102, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings module": [[103, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings module": [[104, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings module": [[105, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.minilm_embeddings module": [[106, "module-sparknlp.annotator.embeddings.minilm_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings module": [[107, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings module": [[108, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings module": [[109, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings module": [[110, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings module": [[111, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings module": [[112, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings module": [[113, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings module": [[114, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder module": [[115, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec module": [[116, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings module": [[117, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings module": [[118, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module": [[119, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings module": [[120, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er package": [[121, "sparknlp-annotator-er-package"]], "sparknlp.annotator.er.entity_ruler module": [[122, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.graph_extraction module": [[123, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator.keyword_extraction package": [[124, "sparknlp-annotator-keyword-extraction-package"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module": [[125, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl package": [[126, "sparknlp-annotator-ld-dl-package"]], "sparknlp.annotator.ld_dl.language_detector_dl module": [[127, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer module": [[128, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher package": [[129, "sparknlp-annotator-matcher-package"]], "sparknlp.annotator.matcher.big_text_matcher module": [[130, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher module": [[131, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher.multi_date_matcher module": [[132, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher module": [[133, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher module": [[134, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator module": [[135, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner package": [[136, "sparknlp-annotator-ner-package"]], "sparknlp.annotator.ner.ner_approach module": [[137, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter module": [[138, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf module": [[139, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl module": [[140, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter module": [[141, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model module": [[142, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer module": [[143, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai package": [[144, "sparknlp-annotator-openai-package"]], "sparknlp.annotator.openai.openai_completion module": [[145, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings module": [[146, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param package": [[147, "sparknlp-annotator-param-package"]], "sparknlp.annotator.param.classifier_encoder module": [[148, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params module": [[149, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.pos package": [[150, "sparknlp-annotator-pos-package"]], "sparknlp.annotator.pos.perceptron module": [[151, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence package": [[152, "sparknlp-annotator-sentence-package"]], "sparknlp.annotator.sentence.sentence_detector module": [[153, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl module": [[154, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment package": [[155, "sparknlp-annotator-sentiment-package"]], "sparknlp.annotator.sentiment.sentiment_detector module": [[156, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment module": [[157, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq package": [[158, "sparknlp-annotator-seq2seq-package"]], "sparknlp.annotator.seq2seq.auto_gguf_model module": [[159, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model module": [[160, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer module": [[161, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer module": [[162, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer module": [[163, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer module": [[164, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer module": [[165, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer module": [[166, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer module": [[167, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer module": [[168, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer module": [[169, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer module": [[170, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer module": [[171, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer module": [[172, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer module": [[173, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.phi4_transformer module": [[174, "module-sparknlp.annotator.seq2seq.phi4_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer module": [[175, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer module": [[176, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer module": [[177, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity package": [[178, "sparknlp-annotator-similarity-package"]], "sparknlp.annotator.similarity.document_similarity_ranker module": [[179, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.spell_check package": [[180, "sparknlp-annotator-spell-check-package"]], "sparknlp.annotator.spell_check.context_spell_checker module": [[181, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check.norvig_sweeting module": [[182, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete module": [[183, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer module": [[184, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner module": [[185, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder module": [[186, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token package": [[187, "sparknlp-annotator-token-package"]], "sparknlp.annotator.token.chunk_tokenizer module": [[188, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token.recursive_tokenizer module": [[189, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer module": [[190, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer module": [[191, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk module": [[192, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws package": [[193, "sparknlp-annotator-ws-package"]], "sparknlp.annotator.ws.word_segmenter module": [[194, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base package": [[195, "sparknlp-base-package"]], "sparknlp.base.audio_assembler module": [[196, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk module": [[197, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler module": [[198, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher module": [[199, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher module": [[200, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher module": [[201, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit module": [[202, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform module": [[203, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler module": [[204, "module-sparknlp.base.image_assembler"]], "sparknlp.base.light_pipeline module": [[205, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler module": [[206, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler module": [[207, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline module": [[208, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler module": [[209, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler module": [[210, "module-sparknlp.base.token_assembler"]], "sparknlp.common package": [[211, "sparknlp-common-package"]], "sparknlp.common.annotator_approach module": [[212, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model module": [[213, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties module": [[214, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type module": [[215, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result module": [[216, "module-sparknlp.common.coverage_result"]], "sparknlp.common.match_strategy module": [[217, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties module": [[218, "module-sparknlp.common.properties"]], "sparknlp.common.read_as module": [[219, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach module": [[220, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage module": [[221, "module-sparknlp.common.storage"]], "sparknlp.common.utils module": [[222, "module-sparknlp.common.utils"]], "sparknlp.functions module": [[223, "module-sparknlp.functions"]], "sparknlp.internal package": [[224, "sparknlp-internal-package"]], "sparknlp.internal.annotator_java_ml module": [[225, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer module": [[226, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper module": [[227, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal.params_getters_setters module": [[228, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive module": [[229, "module-sparknlp.internal.recursive"]], "sparknlp.logging package": [[230, "sparknlp-logging-package"]], "sparknlp.logging.comet module": [[231, "module-sparknlp.logging.comet"]], "sparknlp.partition package": [[232, "sparknlp-partition-package"]], "sparknlp.partition.partition module": [[233, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties module": [[234, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer module": [[235, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained package": [[236, "sparknlp-pretrained-package"]], "sparknlp.pretrained.pretrained_pipeline module": [[237, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader module": [[238, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils module": [[239, "module-sparknlp.pretrained.utils"]], "sparknlp.reader package": [[240, "sparknlp-reader-package"]], "sparknlp.reader.enums module": [[241, "module-sparknlp.reader.enums"]], "sparknlp.reader.pdf_to_text module": [[242, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.reader2doc module": [[243, "module-sparknlp.reader.reader2doc"]], "sparknlp.reader.sparknlp_reader module": [[244, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training package": [[245, "sparknlp-training-package"]], "sparknlp.training.conll module": [[246, "module-sparknlp.training.conll"]], "sparknlp.training.conllu module": [[247, "module-sparknlp.training.conllu"]], "sparknlp.training.pos module": [[248, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator module": [[249, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation module": [[250, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs module": [[251, "sparknlp-training-tfgraphs-module"]], "sparknlp.upload_to_hub module": [[252, "module-sparknlp.upload_to_hub"]], "sparknlp.util module": [[253, "module-sparknlp.util"]], "Getting Started": [[254, "getting-started"]], "Spark NLP Cheat Sheet": [[254, "spark-nlp-cheat-sheet"]], "Requirements": [[254, "requirements"]], "Installation": [[254, "installation"], [510, "installation"]], "Using Conda": [[254, "using-conda"]], "Using Virtualenv": [[254, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[254, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[255, "spark-nlp-documentation"]], "Content": [[255, "content"]], "sparknlp.annotation": [[256, "module-sparknlp.annotation"]], "Module Contents": [[256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [379, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"]], "Classes": [[256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [376, "classes"], [379, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [405, "classes"], [407, "classes"], [408, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [471, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [492, "classes"], [493, "classes"], [495, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [507, "classes"], [508, "classes"]], "sparknlp.annotation_audio": [[257, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[258, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[259, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[260, "module-sparknlp.annotator.audio"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[261, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[262, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[263, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[264, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[265, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[266, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[267, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[268, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[269, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[270, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[271, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[272, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[273, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[274, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[275, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[276, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[277, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[278, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[279, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[280, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[281, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[282, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[283, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[284, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[285, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[286, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[287, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[288, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[289, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl": [[290, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[291, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[292, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[293, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[294, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[295, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[296, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[297, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[298, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[299, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[300, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[301, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[302, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[303, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[304, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[305, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[306, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[307, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[308, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[309, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[310, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[311, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners.cleaner": [[312, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor": [[313, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.cleaners": [[314, "module-sparknlp.annotator.cleaners"]], "sparknlp.annotator.coref": [[315, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[316, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.blip_for_question_answering": [[317, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[318, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[319, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer": [[320, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[321, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv": [[322, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[323, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "sparknlp.annotator.cv.janus_for_multimodal": [[324, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal": [[325, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[326, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[327, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[328, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[329, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer": [[330, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification": [[331, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[332, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[333, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.dataframe_optimizer": [[334, "module-sparknlp.annotator.dataframe_optimizer"]], "Functions": [[334, "functions"], [476, "functions"], [477, "functions"], [478, "functions"], [494, "functions"], [508, "functions"]], "sparknlp.annotator.date2_chunk": [[335, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[336, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[337, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[338, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[339, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[340, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[341, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[342, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[343, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[344, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[345, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[346, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[347, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[348, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[349, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[350, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[351, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[352, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[353, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[354, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[355, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[356, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[357, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[358, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.minilm_embeddings": [[359, "module-sparknlp.annotator.embeddings.minilm_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[360, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[361, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[362, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[363, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[364, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[365, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[366, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[367, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[368, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[369, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[370, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[371, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[372, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[373, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[374, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[375, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[376, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[377, "module-sparknlp.annotator"]], "Package Contents": [[377, "package-contents"], [478, "package-contents"]], "sparknlp.annotator.keyword_extraction": [[378, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[379, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[380, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[381, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[382, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[383, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[384, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[385, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[386, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[387, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[388, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[389, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[390, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[391, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[392, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[393, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[394, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[395, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[396, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[397, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[398, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[399, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[400, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[401, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[402, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[403, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[404, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[405, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[406, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[407, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[408, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[409, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[410, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[411, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[412, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[413, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[414, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[415, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[416, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[417, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[418, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[419, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[420, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[421, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[422, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[423, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[424, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[425, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[426, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[427, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.phi4_transformer": [[428, "module-sparknlp.annotator.seq2seq.phi4_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[429, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[430, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[431, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[432, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[433, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[434, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[435, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[436, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[437, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[438, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[439, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[440, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[441, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[442, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[443, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[444, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[445, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[446, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[447, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[448, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[449, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[450, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[451, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[452, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[453, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[454, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[455, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[456, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[457, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[458, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[459, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[460, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler": [[461, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline": [[462, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[463, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[464, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[465, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[466, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[467, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[468, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[469, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[470, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[471, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[472, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[473, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[474, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[475, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[476, "module-sparknlp.common.utils"]], "sparknlp.functions": [[477, "module-sparknlp.functions"]], "Attributes": [[478, "attributes"], [485, "attributes"]], "sparknlp.internal.annotator_java_ml": [[479, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[480, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[481, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[482, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[483, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[484, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[485, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[486, "module-sparknlp.logging"]], "sparknlp.partition": [[487, "module-sparknlp.partition"]], "sparknlp.partition.partition": [[488, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties": [[489, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer": [[490, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained": [[491, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[492, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[493, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[494, "module-sparknlp.pretrained.utils"]], "sparknlp.reader.enums": [[495, "module-sparknlp.reader.enums"]], "sparknlp.reader": [[496, "module-sparknlp.reader"]], "sparknlp.reader.pdf_to_text": [[497, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.reader2doc": [[498, "module-sparknlp.reader.reader2doc"]], "sparknlp.reader.sparknlp_reader": [[499, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training.conll": [[500, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[501, "module-sparknlp.training.conllu"]], "sparknlp.training": [[502, "module-sparknlp.training"]], "sparknlp.training.pos": [[503, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[504, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[505, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[506, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[507, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[508, "module-sparknlp.util"]], "API Reference": [[509, "api-reference"]], "Modules": [[509, "modules"]], "Comet - A meta machine learning platform": [[510, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[510, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[510, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[510, "logging-evaluation-metrics"]], "Logging Visualizations": [[510, "logging-visualizations"]], "Running An Offline Experiment": [[510, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[511, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[512, "third-party-projects"]], "Logging": [[512, "logging"]], "Annotation": [[513, "annotation"]], "Annotators": [[514, "annotators"]], "Annotator Approaches": [[514, "annotator-approaches"]], "Annotator Models": [[514, "annotator-models"]], "Note": [[514, "note"]], "Pretrained Models": [[514, "pretrained-models"]], "Common Functions": [[514, "common-functions"]], "Available Annotators": [[514, "available-annotators"]], "Setting up your own pipeline": [[515, "setting-up-your-own-pipeline"]], "Annotator types": [[515, "annotator-types"]], "Necessary imports": [[515, "necessary-imports"]], "Constructing the Pipeline": [[515, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[515, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[515, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[515, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[515, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[516, "helper-functions"]], "User Guide": [[517, "user-guide"]], "Light Pipelines": [[518, "light-pipelines"]], "Converting PipelineModels": [[518, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[518, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[519, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[519, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[519, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[519, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[519, "available-pipelines"]], "Loading datasets for training": [[520, "loading-datasets-for-training"]], "POS Dataset": [[520, "pos-dataset"]], "CoNLL Dataset": [[520, "conll-dataset"]], "CoNLLU Dataset": [[520, "conllu-dataset"]], "Spell Checkers Dataset": [[520, "spell-checkers-dataset"]], "PubTator Dataset": [[520, "pubtator-dataset"]]}, "indexentries": {"module": [[1, "module-sparknlp"], [2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [10, "module-sparknlp.annotator.chunk2_doc"], [11, "module-sparknlp.annotator.chunker"], [12, "module-sparknlp.annotator.classifier_dl"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [59, "module-sparknlp.annotator.cleaners"], [60, "module-sparknlp.annotator.cleaners.cleaner"], [61, "module-sparknlp.annotator.cleaners.extractor"], [62, "module-sparknlp.annotator.coref"], [63, "module-sparknlp.annotator.coref.spanbert_coref"], [64, "module-sparknlp.annotator.cv"], [65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [68, "module-sparknlp.annotator.cv.florence2_transformer"], [69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [81, "module-sparknlp.annotator.dataframe_optimizer"], [82, "module-sparknlp.annotator.date2_chunk"], [83, "module-sparknlp.annotator.dependency"], [84, "module-sparknlp.annotator.dependency.dependency_parser"], [85, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [86, "module-sparknlp.annotator.document_character_text_splitter"], [87, "module-sparknlp.annotator.document_normalizer"], [88, "module-sparknlp.annotator.document_token_splitter"], [90, "module-sparknlp.annotator.embeddings"], [91, "module-sparknlp.annotator.embeddings.albert_embeddings"], [92, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [93, "module-sparknlp.annotator.embeddings.bert_embeddings"], [94, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [95, "module-sparknlp.annotator.embeddings.bge_embeddings"], [96, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [97, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [98, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [99, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [100, "module-sparknlp.annotator.embeddings.doc2vec"], [101, "module-sparknlp.annotator.embeddings.e5_embeddings"], [102, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [103, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [104, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [105, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [106, "module-sparknlp.annotator.embeddings.minilm_embeddings"], [107, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [108, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [109, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [110, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [111, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [112, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [113, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [114, "module-sparknlp.annotator.embeddings.uae_embeddings"], [115, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [116, "module-sparknlp.annotator.embeddings.word2vec"], [117, "module-sparknlp.annotator.embeddings.word_embeddings"], [118, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [119, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [120, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [121, "module-sparknlp.annotator.er"], [122, "module-sparknlp.annotator.er.entity_ruler"], [123, "module-sparknlp.annotator.graph_extraction"], [124, "module-sparknlp.annotator.keyword_extraction"], [125, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [126, "module-sparknlp.annotator.ld_dl"], [127, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [128, "module-sparknlp.annotator.lemmatizer"], [129, "module-sparknlp.annotator.matcher"], [130, "module-sparknlp.annotator.matcher.big_text_matcher"], [131, "module-sparknlp.annotator.matcher.date_matcher"], [132, "module-sparknlp.annotator.matcher.multi_date_matcher"], [133, "module-sparknlp.annotator.matcher.regex_matcher"], [134, "module-sparknlp.annotator.matcher.text_matcher"], [135, "module-sparknlp.annotator.n_gram_generator"], [136, "module-sparknlp.annotator.ner"], [137, "module-sparknlp.annotator.ner.ner_approach"], [138, "module-sparknlp.annotator.ner.ner_converter"], [139, "module-sparknlp.annotator.ner.ner_crf"], [140, "module-sparknlp.annotator.ner.ner_dl"], [141, "module-sparknlp.annotator.ner.ner_overwriter"], [142, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [143, "module-sparknlp.annotator.normalizer"], [144, "module-sparknlp.annotator.openai"], [145, "module-sparknlp.annotator.openai.openai_completion"], [146, "module-sparknlp.annotator.openai.openai_embeddings"], [147, "module-sparknlp.annotator.param"], [148, "module-sparknlp.annotator.param.classifier_encoder"], [149, "module-sparknlp.annotator.param.evaluation_dl_params"], [150, "module-sparknlp.annotator.pos"], [151, "module-sparknlp.annotator.pos.perceptron"], [152, "module-sparknlp.annotator.sentence"], [153, "module-sparknlp.annotator.sentence.sentence_detector"], [154, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [155, "module-sparknlp.annotator.sentiment"], [156, "module-sparknlp.annotator.sentiment.sentiment_detector"], [157, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [158, "module-sparknlp.annotator.seq2seq"], [159, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [160, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [161, "module-sparknlp.annotator.seq2seq.bart_transformer"], [162, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [163, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [164, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [165, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [166, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [167, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [168, "module-sparknlp.annotator.seq2seq.marian_transformer"], [169, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [170, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [171, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [172, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [173, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [174, "module-sparknlp.annotator.seq2seq.phi4_transformer"], [175, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [176, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [177, "module-sparknlp.annotator.seq2seq.t5_transformer"], [178, "module-sparknlp.annotator.similarity"], [179, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [180, "module-sparknlp.annotator.spell_check"], [181, "module-sparknlp.annotator.spell_check.context_spell_checker"], [182, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [183, "module-sparknlp.annotator.spell_check.symmetric_delete"], [184, "module-sparknlp.annotator.stemmer"], [185, "module-sparknlp.annotator.stop_words_cleaner"], [186, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [187, "module-sparknlp.annotator.token"], [188, "module-sparknlp.annotator.token.chunk_tokenizer"], [189, "module-sparknlp.annotator.token.recursive_tokenizer"], [190, "module-sparknlp.annotator.token.regex_tokenizer"], [191, "module-sparknlp.annotator.token.tokenizer"], [192, "module-sparknlp.annotator.token2_chunk"], [193, "module-sparknlp.annotator.ws"], [194, "module-sparknlp.annotator.ws.word_segmenter"], [195, "module-sparknlp.base"], [196, "module-sparknlp.base.audio_assembler"], [197, "module-sparknlp.base.doc2_chunk"], [198, "module-sparknlp.base.document_assembler"], [199, "module-sparknlp.base.embeddings_finisher"], [200, "module-sparknlp.base.finisher"], [201, "module-sparknlp.base.graph_finisher"], [202, "module-sparknlp.base.has_recursive_fit"], [203, "module-sparknlp.base.has_recursive_transform"], [204, "module-sparknlp.base.image_assembler"], [205, "module-sparknlp.base.light_pipeline"], [206, "module-sparknlp.base.multi_document_assembler"], [207, "module-sparknlp.base.prompt_assembler"], [208, "module-sparknlp.base.recursive_pipeline"], [209, "module-sparknlp.base.table_assembler"], [210, "module-sparknlp.base.token_assembler"], [211, "module-sparknlp.common"], [212, "module-sparknlp.common.annotator_approach"], [213, "module-sparknlp.common.annotator_model"], [214, "module-sparknlp.common.annotator_properties"], [215, "module-sparknlp.common.annotator_type"], [216, "module-sparknlp.common.coverage_result"], [217, "module-sparknlp.common.match_strategy"], [218, "module-sparknlp.common.properties"], [219, "module-sparknlp.common.read_as"], [220, "module-sparknlp.common.recursive_annotator_approach"], [221, "module-sparknlp.common.storage"], [222, "module-sparknlp.common.utils"], [223, "module-sparknlp.functions"], [224, "module-sparknlp.internal"], [225, "module-sparknlp.internal.annotator_java_ml"], [226, "module-sparknlp.internal.annotator_transformer"], [227, "module-sparknlp.internal.extended_java_wrapper"], [228, "module-sparknlp.internal.params_getters_setters"], [229, "module-sparknlp.internal.recursive"], [230, "module-sparknlp.logging"], [231, "module-sparknlp.logging.comet"], [232, "module-sparknlp.partition"], [233, "module-sparknlp.partition.partition"], [234, "module-sparknlp.partition.partition_properties"], [235, "module-sparknlp.partition.partition_transformer"], [236, "module-sparknlp.pretrained"], [237, "module-sparknlp.pretrained.pretrained_pipeline"], [238, "module-sparknlp.pretrained.resource_downloader"], [239, "module-sparknlp.pretrained.utils"], [240, "module-sparknlp.reader"], [241, "module-sparknlp.reader.enums"], [242, "module-sparknlp.reader.pdf_to_text"], [243, "module-sparknlp.reader.reader2doc"], [244, "module-sparknlp.reader.sparknlp_reader"], [245, "module-sparknlp.training"], [246, "module-sparknlp.training.conll"], [247, "module-sparknlp.training.conllu"], [248, "module-sparknlp.training.pos"], [249, "module-sparknlp.training.pub_tator"], [250, "module-sparknlp.training.spacy_to_annotation"], [252, "module-sparknlp.upload_to_hub"], [253, "module-sparknlp.util"], [256, "module-sparknlp.annotation"], [257, "module-sparknlp.annotation_audio"], [258, "module-sparknlp.annotation_image"], [259, "module-sparknlp.annotator.audio.hubert_for_ctc"], [260, "module-sparknlp.annotator.audio"], [261, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [262, "module-sparknlp.annotator.audio.whisper_for_ctc"], [263, "module-sparknlp.annotator.chunk2_doc"], [264, "module-sparknlp.annotator.chunker"], [265, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [266, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [267, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [268, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [269, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [270, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [271, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [272, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [273, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [274, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [275, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [276, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [277, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [278, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [279, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [280, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [281, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [282, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [283, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [284, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [285, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [286, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [287, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [288, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [289, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [290, "module-sparknlp.annotator.classifier_dl"], [291, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [292, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [293, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [294, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [295, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [296, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [297, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [298, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [299, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [300, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [301, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [302, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [303, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [304, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [305, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [306, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [307, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [308, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [309, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [310, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [311, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [312, "module-sparknlp.annotator.cleaners.cleaner"], [313, "module-sparknlp.annotator.cleaners.extractor"], [314, "module-sparknlp.annotator.cleaners"], [315, "module-sparknlp.annotator.coref"], [316, "module-sparknlp.annotator.coref.spanbert_coref"], [317, "module-sparknlp.annotator.cv.blip_for_question_answering"], [318, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [319, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [320, "module-sparknlp.annotator.cv.florence2_transformer"], [321, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [322, "module-sparknlp.annotator.cv"], [323, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [324, "module-sparknlp.annotator.cv.janus_for_multimodal"], [325, "module-sparknlp.annotator.cv.llava_for_multimodal"], [326, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [327, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [328, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [329, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [330, "module-sparknlp.annotator.cv.smolvlm_transformer"], [331, "module-sparknlp.annotator.cv.swin_for_image_classification"], [332, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [333, "module-sparknlp.annotator.cv.vit_for_image_classification"], [334, "module-sparknlp.annotator.dataframe_optimizer"], [335, "module-sparknlp.annotator.date2_chunk"], [336, "module-sparknlp.annotator.dependency.dependency_parser"], [337, "module-sparknlp.annotator.dependency"], [338, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [339, "module-sparknlp.annotator.document_character_text_splitter"], [340, "module-sparknlp.annotator.document_normalizer"], [341, "module-sparknlp.annotator.document_token_splitter"], [342, "module-sparknlp.annotator.document_token_splitter_test"], [343, "module-sparknlp.annotator.embeddings.albert_embeddings"], [344, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [345, "module-sparknlp.annotator.embeddings.bert_embeddings"], [346, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [347, "module-sparknlp.annotator.embeddings.bge_embeddings"], [348, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [349, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [350, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [351, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [352, "module-sparknlp.annotator.embeddings.doc2vec"], [353, "module-sparknlp.annotator.embeddings.e5_embeddings"], [354, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [355, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [356, "module-sparknlp.annotator.embeddings"], [357, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [358, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [359, "module-sparknlp.annotator.embeddings.minilm_embeddings"], [360, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [361, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [362, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [363, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [364, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [365, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [366, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [367, "module-sparknlp.annotator.embeddings.uae_embeddings"], [368, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [369, "module-sparknlp.annotator.embeddings.word2vec"], [370, "module-sparknlp.annotator.embeddings.word_embeddings"], [371, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [372, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [373, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [374, "module-sparknlp.annotator.er.entity_ruler"], [375, "module-sparknlp.annotator.er"], [376, "module-sparknlp.annotator.graph_extraction"], [377, "module-sparknlp.annotator"], [378, "module-sparknlp.annotator.keyword_extraction"], [379, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [380, "module-sparknlp.annotator.ld_dl"], [381, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [382, "module-sparknlp.annotator.lemmatizer"], [383, "module-sparknlp.annotator.matcher.big_text_matcher"], [384, "module-sparknlp.annotator.matcher.date_matcher"], [385, "module-sparknlp.annotator.matcher"], [386, "module-sparknlp.annotator.matcher.multi_date_matcher"], [387, "module-sparknlp.annotator.matcher.regex_matcher"], [388, "module-sparknlp.annotator.matcher.text_matcher"], [389, "module-sparknlp.annotator.n_gram_generator"], [390, "module-sparknlp.annotator.ner"], [391, "module-sparknlp.annotator.ner.ner_approach"], [392, "module-sparknlp.annotator.ner.ner_converter"], [393, "module-sparknlp.annotator.ner.ner_crf"], [394, "module-sparknlp.annotator.ner.ner_dl"], [395, "module-sparknlp.annotator.ner.ner_overwriter"], [396, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [397, "module-sparknlp.annotator.normalizer"], [398, "module-sparknlp.annotator.openai"], [399, "module-sparknlp.annotator.openai.openai_completion"], [400, "module-sparknlp.annotator.openai.openai_embeddings"], [401, "module-sparknlp.annotator.param.classifier_encoder"], [402, "module-sparknlp.annotator.param.evaluation_dl_params"], [403, "module-sparknlp.annotator.param"], [404, "module-sparknlp.annotator.pos"], [405, "module-sparknlp.annotator.pos.perceptron"], [406, "module-sparknlp.annotator.sentence"], [407, "module-sparknlp.annotator.sentence.sentence_detector"], [408, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [409, "module-sparknlp.annotator.sentiment"], [410, "module-sparknlp.annotator.sentiment.sentiment_detector"], [411, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [412, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [413, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [414, "module-sparknlp.annotator.seq2seq.bart_transformer"], [415, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [416, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [417, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [418, "module-sparknlp.annotator.seq2seq"], [419, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [420, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [421, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [422, "module-sparknlp.annotator.seq2seq.marian_transformer"], [423, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [424, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [425, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [426, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [427, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [428, "module-sparknlp.annotator.seq2seq.phi4_transformer"], [429, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [430, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [431, "module-sparknlp.annotator.seq2seq.t5_transformer"], [432, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [433, "module-sparknlp.annotator.similarity"], [434, "module-sparknlp.annotator.spell_check.context_spell_checker"], [435, "module-sparknlp.annotator.spell_check"], [436, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [437, "module-sparknlp.annotator.spell_check.symmetric_delete"], [438, "module-sparknlp.annotator.stemmer"], [439, "module-sparknlp.annotator.stop_words_cleaner"], [440, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [441, "module-sparknlp.annotator.token.chunk_tokenizer"], [442, "module-sparknlp.annotator.token"], [443, "module-sparknlp.annotator.token.recursive_tokenizer"], [444, "module-sparknlp.annotator.token.regex_tokenizer"], [445, "module-sparknlp.annotator.token.tokenizer"], [446, "module-sparknlp.annotator.token2_chunk"], [447, "module-sparknlp.annotator.ws"], [448, "module-sparknlp.annotator.ws.word_segmenter"], [449, "module-sparknlp.base.audio_assembler"], [450, "module-sparknlp.base.doc2_chunk"], [451, "module-sparknlp.base.document_assembler"], [452, "module-sparknlp.base.embeddings_finisher"], [453, "module-sparknlp.base.finisher"], [454, "module-sparknlp.base.graph_finisher"], [455, "module-sparknlp.base.has_recursive_fit"], [456, "module-sparknlp.base.has_recursive_transform"], [457, "module-sparknlp.base.image_assembler"], [458, "module-sparknlp.base"], [459, "module-sparknlp.base.light_pipeline"], [460, "module-sparknlp.base.multi_document_assembler"], [461, "module-sparknlp.base.prompt_assembler"], [462, "module-sparknlp.base.recursive_pipeline"], [463, "module-sparknlp.base.table_assembler"], [464, "module-sparknlp.base.token_assembler"], [465, "module-sparknlp.common.annotator_approach"], [466, "module-sparknlp.common.annotator_model"], [467, "module-sparknlp.common.annotator_properties"], [468, "module-sparknlp.common.annotator_type"], [469, "module-sparknlp.common.coverage_result"], [470, "module-sparknlp.common"], [471, "module-sparknlp.common.match_strategy"], [472, "module-sparknlp.common.properties"], [473, "module-sparknlp.common.read_as"], [474, "module-sparknlp.common.recursive_annotator_approach"], [475, "module-sparknlp.common.storage"], [476, "module-sparknlp.common.utils"], [477, "module-sparknlp.functions"], [478, "module-sparknlp"], [479, "module-sparknlp.internal.annotator_java_ml"], [480, "module-sparknlp.internal.annotator_transformer"], [481, "module-sparknlp.internal.extended_java_wrapper"], [482, "module-sparknlp.internal"], [483, "module-sparknlp.internal.params_getters_setters"], [484, "module-sparknlp.internal.recursive"], [485, "module-sparknlp.logging.comet"], [486, "module-sparknlp.logging"], [487, "module-sparknlp.partition"], [488, "module-sparknlp.partition.partition"], [489, "module-sparknlp.partition.partition_properties"], [490, "module-sparknlp.partition.partition_transformer"], [491, "module-sparknlp.pretrained"], [492, "module-sparknlp.pretrained.pretrained_pipeline"], [493, "module-sparknlp.pretrained.resource_downloader"], [494, "module-sparknlp.pretrained.utils"], [495, "module-sparknlp.reader.enums"], [496, "module-sparknlp.reader"], [497, "module-sparknlp.reader.pdf_to_text"], [498, "module-sparknlp.reader.reader2doc"], [499, "module-sparknlp.reader.sparknlp_reader"], [500, "module-sparknlp.training.conll"], [501, "module-sparknlp.training.conllu"], [502, "module-sparknlp.training"], [503, "module-sparknlp.training.pos"], [504, "module-sparknlp.training.pub_tator"], [505, "module-sparknlp.training.spacy_to_annotation"], [506, "module-sparknlp.training.tfgraphs"], [507, "module-sparknlp.upload_to_hub"], [508, "module-sparknlp.util"]], "read() (in module sparknlp)": [[1, "sparknlp.read"], [478, "sparknlp.read"]], "sparknlp": [[1, "module-sparknlp"], [478, "module-sparknlp"]], "start() (in module sparknlp)": [[1, "sparknlp.start"], [478, "sparknlp.start"]], "version() (in module sparknlp)": [[1, "sparknlp.version"], [478, "sparknlp.version"]], "annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"], [256, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"], [256, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"], [256, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"], [256, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"], [256, "sparknlp.annotation.Annotation.fromRow"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"], [256, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"], [256, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"], [257, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"], [257, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"], [257, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"], [258, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"], [258, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"], [258, "module-sparknlp.annotation_image"]], "sparknlp.annotator": [[5, "module-sparknlp.annotator"], [377, "module-sparknlp.annotator"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"], [260, "module-sparknlp.annotator.audio"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "configprotobytes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"]], "inputannotatortypes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "name (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"]], "outputannotatortype (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"]], "pretrained() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"], [259, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [259, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "configprotobytes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"]], "inputannotatortypes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "name (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"]], "outputannotatortype (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"]], "pretrained() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"], [261, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [261, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "configprotobytes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"]], "getismultilingual() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "inputannotatortypes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"]], "ismultilingual (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"]], "language (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"]], "loadsavedmodel() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "name (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"]], "outputannotatortype (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"]], "pretrained() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"], [262, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [262, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc"], [263, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "inputannotatortypes (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"], [263, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"]], "name (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"], [263, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"]], "outputannotatortype (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"], [263, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"]], "setparams() (chunk2doc method)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"], [263, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"]], "sparknlp.annotator.chunk2_doc": [[10, "module-sparknlp.annotator.chunk2_doc"], [263, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[11, "sparknlp.annotator.chunker.Chunker"], [264, "sparknlp.annotator.chunker.Chunker"]], "inputannotatortypes (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"], [264, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"]], "name (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.name"], [264, "sparknlp.annotator.chunker.Chunker.name"]], "outputannotatortype (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"], [264, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"]], "regexparsers (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.regexParsers"], [264, "sparknlp.annotator.chunker.Chunker.regexParsers"]], "setregexparsers() (chunker method)": [[11, "sparknlp.annotator.chunker.Chunker.setRegexParsers"], [264, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[11, "module-sparknlp.annotator.chunker"], [264, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl": [[12, "module-sparknlp.annotator.classifier_dl"], [290, "module-sparknlp.annotator.classifier_dl"]], "albertformultiplechoice (class in sparknlp.annotator.classifier_dl.albert_for_multiple_choice)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"]], "choicesdelimiter (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"]], "name (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"]], "outputannotatortype (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"]], "pretrained() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (albertformultiplechoice method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"], [265, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [265, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "coalescesentences (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"]], "configprotobytes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "name (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"]], "outputannotatortype (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"], [266, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [266, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "coalescesentences (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"]], "configprotobytes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"]], "getclasses() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "inputannotatortypes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "name (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"]], "outputannotatortype (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"]], "pretrained() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"], [267, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [267, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "configprotobytes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"]], "getclasses() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "inputannotatortypes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "name (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"]], "outputannotatortype (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"]], "pretrained() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"], [268, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [268, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "coalescesentences (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"]], "configprotobytes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"]], "getclasses() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "inputannotatortypes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "name (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"]], "outputannotatortype (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"], [269, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [269, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "coalescesentences (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"]], "configprotobytes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"]], "getclasses() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "inputannotatortypes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "maxsentencelength (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"]], "name (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"]], "outputannotatortype (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"], [270, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [270, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "choicesdelimiter (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "name (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"]], "outputannotatortype (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"]], "pretrained() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"], [271, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [271, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "coalescesentences (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"]], "configprotobytes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "name (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"]], "outputannotatortype (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"], [272, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [272, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "coalescesentences (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"]], "configprotobytes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"]], "getclasses() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "inputannotatortypes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "name (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"]], "outputannotatortype (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"]], "pretrained() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"], [273, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [273, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "configprotobytes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"]], "getclasses() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "inputannotatortypes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "name (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"]], "outputannotatortype (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"]], "pretrained() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"], [274, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [274, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "coalescesentences (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"]], "configprotobytes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"]], "getclasses() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "inputannotatortypes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "name (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"]], "outputannotatortype (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"], [275, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [275, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "coalescesentences (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "name (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"]], "outputannotatortype (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"], [276, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [276, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "coalescesentences (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"]], "configprotobytes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"]], "getclasses() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "inputannotatortypes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "name (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"]], "outputannotatortype (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"], [277, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [277, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "configprotobytes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"]], "getclasses() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "inputannotatortypes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "name (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"]], "outputannotatortype (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"]], "pretrained() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"], [278, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [278, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "coalescesentences (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"]], "getclasses() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "inputannotatortypes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "name (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"]], "outputannotatortype (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"], [279, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [279, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "classes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"]], "configprotobytes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"]], "dropout (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"]], "inputannotatortypes (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"]], "name (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"]], "outputannotatortype (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"]], "pretrained() (classifierdlmodel static method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"], [280, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [280, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "coalescesentences (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "name (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"]], "outputannotatortype (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"], [281, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [281, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "coalescesentences (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"]], "getclasses() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "inputannotatortypes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "name (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"]], "outputannotatortype (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"], [282, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [282, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "configprotobytes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"]], "getclasses() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "inputannotatortypes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "name (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"]], "outputannotatortype (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"], [283, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [283, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "coalescesentences (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "name (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"]], "outputannotatortype (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"], [284, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [284, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "coalescesentences (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "name (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"]], "outputannotatortype (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"], [285, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [285, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "coalescesentences (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "name (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"]], "outputannotatortype (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"], [286, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [286, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "configprotobytes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"]], "getclasses() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "inputannotatortypes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "name (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"]], "outputannotatortype (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"]], "pretrained() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"], [287, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [287, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "coalescesentences (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"]], "getclasses() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "inputannotatortypes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "name (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"]], "outputannotatortype (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"], [288, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [288, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "distilbertformultiplechoice (class in sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"]], "choicesdelimiter (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"]], "name (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"]], "outputannotatortype (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"]], "pretrained() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (distilbertformultiplechoice method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"], [289, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [289, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "coalescesentences (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"]], "configprotobytes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "name (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"]], "outputannotatortype (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"]], "pretrained() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"], [291, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [291, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "coalescesentences (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"]], "configprotobytes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"]], "getclasses() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "inputannotatortypes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "name (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"]], "outputannotatortype (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"]], "pretrained() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"], [292, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [292, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "configprotobytes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"]], "getclasses() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "inputannotatortypes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "name (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"]], "outputannotatortype (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"]], "pretrained() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"], [293, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [293, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"], [294, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "inputannotatortypes (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"], [294, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"], [294, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "name (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"], [294, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"]], "outputannotatortype (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"], [294, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"]], "pretrained() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"], [294, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [294, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "coalescesentences (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"]], "getclasses() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "inputannotatortypes (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "name (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"]], "outputannotatortype (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"]], "pretrained() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"], [295, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [295, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "configprotobytes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"]], "getclasses() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "inputannotatortypes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "name (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"]], "outputannotatortype (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"]], "pretrained() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"], [296, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [296, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "classes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"]], "configprotobytes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"]], "inputannotatortypes (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"]], "name (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"]], "outputannotatortype (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"]], "pretrained() (multiclassifierdlmodel static method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setshuffleperepoch() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"]], "setthreshold() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "shuffleperepoch (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [297, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "threshold (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"]], "threshold (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"], [297, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"]], "robertaformultiplechoice (class in sparknlp.annotator.classifier_dl.roberta_for_multiple_choice)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"]], "choicesdelimiter (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"]], "name (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"]], "outputannotatortype (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"]], "setchoicesdelimiter() (robertaformultiplechoice method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"], [298, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [298, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "coalescesentences (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "name (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"]], "outputannotatortype (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"], [299, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [299, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "coalescesentences (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "name (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"]], "outputannotatortype (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"], [300, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [300, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "configprotobytes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"]], "getclasses() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "inputannotatortypes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "maxsentencelength (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"]], "name (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"]], "outputannotatortype (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"], [301, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [301, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "coalescesentences (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"]], "name (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"]], "outputannotatortype (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"], [302, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [302, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "classes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"]], "configprotobytes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"]], "dropout (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"]], "inputannotatortypes (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"]], "name (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"]], "outputannotatortype (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"]], "outputannotatortype (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"]], "pretrained() (sentimentdlmodel static method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [303, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "threshold (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"]], "threshold (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"]], "thresholdlabel (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"]], "thresholdlabel (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"], [303, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"], [304, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "inputannotatortypes (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"], [304, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"], [304, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "name (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"], [304, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"]], "pretrained() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"], [304, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [304, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaformultiplechoice (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"]], "inputannotatortypes (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"]], "name (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"]], "outputannotatortype (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [305, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "coalescesentences (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "name (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"]], "outputannotatortype (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"], [306, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [306, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "coalescesentences (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "name (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"]], "outputannotatortype (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"], [307, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [307, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "configprotobytes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"]], "getclasses() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "inputannotatortypes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "name (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"]], "outputannotatortype (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"], [308, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [308, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "coalescesentences (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"]], "name (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"]], "outputannotatortype (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"], [309, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [309, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "coalescesentences (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"]], "configprotobytes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"]], "getclasses() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "inputannotatortypes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "name (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"]], "outputannotatortype (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"], [310, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [310, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "configprotobytes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"]], "getclasses() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "inputannotatortypes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "name (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"]], "outputannotatortype (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"]], "pretrained() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"], [311, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [311, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners": [[59, "module-sparknlp.annotator.cleaners"], [314, "module-sparknlp.annotator.cleaners"]], "cleaner (class in sparknlp.annotator.cleaners.cleaner)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner"]], "bullets (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"]], "cleanpostfixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"]], "cleanprefixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"]], "cleanermode (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"]], "dashes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"]], "encoding (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"]], "extrawhitespace (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"]], "ignorecase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"]], "inputannotatortypes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"]], "lowercase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"]], "name (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"]], "outputannotatortype (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"]], "setbullets() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"]], "setcleanpostfixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"]], "setcleanprefixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"]], "setcleanermode() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"]], "setdashes() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"]], "setencoding() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"]], "setextrawhitespace() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"]], "setignorecase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"]], "setlowercase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"]], "setstrip() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"]], "settrailingpunctuation() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"]], "sparknlp.annotator.cleaners.cleaner": [[60, "module-sparknlp.annotator.cleaners.cleaner"], [312, "module-sparknlp.annotator.cleaners.cleaner"]], "strip (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"]], "trailingpunctuation (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"], [312, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"]], "extractor (class in sparknlp.annotator.cleaners.extractor)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor"], [313, "sparknlp.annotator.cleaners.extractor.Extractor"]], "emailaddress (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"]], "emaildatetimetzpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"]], "extractormode (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"]], "imageurlpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"]], "index (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.index"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.index"]], "inputannotatortypes (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"]], "ipaddressnamepattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"]], "ipaddresspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"]], "mapiidpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"]], "name (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.name"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.name"]], "outputannotatortype (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"]], "setemailaddress() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"]], "setemaildatetimetzpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"]], "setextractormode() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"]], "setimageurlpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"]], "setindex() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"]], "setipaddressnamepattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"]], "setipaddresspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"]], "setmapiidpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"]], "settextpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"]], "setusphonenumberspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"]], "sparknlp.annotator.cleaners.extractor": [[61, "module-sparknlp.annotator.cleaners.extractor"], [313, "module-sparknlp.annotator.cleaners.extractor"]], "textpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"]], "usphonenumberspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"], [313, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[62, "module-sparknlp.annotator.coref"], [315, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "configprotobytes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"]], "inputannotatortypes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "maxsegmentlength (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"]], "name (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"]], "outputannotatortype (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"]], "pretrained() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[63, "module-sparknlp.annotator.coref.spanbert_coref"], [316, "module-sparknlp.annotator.coref.spanbert_coref"]], "textgenre (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"], [316, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"]], "sparknlp.annotator.cv": [[64, "module-sparknlp.annotator.cv"], [322, "module-sparknlp.annotator.cv"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "configprotobytes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "maxsentencelength (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"]], "name (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"]], "outputannotatortype (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"]], "pretrained() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"], [317, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [317, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "configprotobytes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "inputannotatortypes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "name (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"]], "outputannotatortype (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"]], "pretrained() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"], [318, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [318, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "configprotobytes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"]], "croppct (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"]], "dorescale (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"]], "getclasses() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "inputannotatortypes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "name (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"]], "outputannotatortype (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"]], "pretrained() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "rescalefactor (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"]], "setconfigprotobytes() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"], [319, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [319, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "florence2transformer (class in sparknlp.annotator.cv.florence2_transformer)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"]], "batchsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"]], "beamsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"]], "dosample (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"]], "ignoretokenids (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"]], "inputannotatortypes (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"]], "maxoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"]], "minoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"]], "name (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"]], "norepeatngramsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"]], "outputannotatortype (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"]], "pretrained() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"]], "repetitionpenalty (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"]], "setbatchsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"]], "setbeamsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"]], "setdosample() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"]], "setignoretokenids() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"]], "setminoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"]], "settemperature() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"]], "settopk() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"]], "settopp() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"]], "sparknlp.annotator.cv.florence2_transformer": [[68, "module-sparknlp.annotator.cv.florence2_transformer"], [320, "module-sparknlp.annotator.cv.florence2_transformer"]], "temperature (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"]], "topk (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"]], "topp (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"], [320, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"]], "gemma3formultimodal (class in sparknlp.annotator.cv.gemma3_for_multimodal)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"]], "beamsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"]], "configprotobytes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"]], "dosample (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"]], "ignoretokenids (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"]], "inputannotatortypes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"]], "maxinputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"]], "maxoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"]], "minoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"]], "name (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"]], "norepeatngramsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"]], "outputannotatortype (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"]], "pretrained() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"]], "repetitionpenalty (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"]], "setbeamsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"]], "setconfigprotobytes() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"]], "setdosample() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"]], "setignoretokenids() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"]], "settemperature() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"]], "settopk() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"]], "settopp() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [321, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "temperature (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"]], "topk (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"]], "topp (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"], [321, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"]], "internvlformultimodal (class in sparknlp.annotator.cv.internvl_for_multimodal)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"]], "beamsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"]], "dosample (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"]], "ignoretokenids (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"]], "inputannotatortypes (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"]], "maxoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"]], "minoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"]], "name (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"]], "norepeatngramsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"]], "outputannotatortype (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"]], "pretrained() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"]], "repetitionpenalty (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"]], "setbeamsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"]], "setdosample() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"]], "setignoretokenids() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"]], "settemperature() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"]], "settopk() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"]], "settopp() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [323, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "temperature (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"]], "topk (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"]], "topp (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"], [323, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"]], "janusformultimodal (class in sparknlp.annotator.cv.janus_for_multimodal)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"]], "beamsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"]], "configprotobytes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"]], "dosample (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"]], "ignoretokenids (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"]], "imagegeneratemode (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"]], "inputannotatortypes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"]], "maxoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"]], "minoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"]], "name (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"]], "norepeatngramsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"]], "numofparallelimages (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"]], "outputannotatortype (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"]], "pretrained() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"]], "repetitionpenalty (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"]], "setbeamsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"]], "setconfigprotobytes() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"]], "setdosample() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"]], "setignoretokenids() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"]], "setimagegeneratemode() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"]], "setmaxoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"]], "setnumofparallelimages() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"]], "setrepetitionpenalty() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"]], "settemperature() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"]], "settopk() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"]], "settopp() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [324, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "temperature (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"]], "topk (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"]], "topp (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"], [324, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"]], "llavaformultimodal (class in sparknlp.annotator.cv.llava_for_multimodal)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"]], "beamsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"]], "configprotobytes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"]], "dosample (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"]], "ignoretokenids (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"]], "inputannotatortypes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"]], "maxoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"]], "minoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"]], "name (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"]], "norepeatngramsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"]], "outputannotatortype (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"]], "pretrained() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"]], "repetitionpenalty (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"]], "setbeamsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"]], "setconfigprotobytes() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"]], "setdosample() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"]], "setignoretokenids() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"]], "settemperature() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"]], "settopk() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"]], "settopp() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [325, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "temperature (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"]], "topk (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"]], "topp (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"], [325, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"]], "mllamaformultimodal (class in sparknlp.annotator.cv.mllama_for_multimodal)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"]], "beamsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"]], "configprotobytes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"]], "dosample (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"]], "ignoretokenids (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"]], "inputannotatortypes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"]], "loadsavedmodel() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"]], "maxoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"]], "minoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"]], "name (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"]], "norepeatngramsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"]], "outputannotatortype (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"]], "pretrained() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"]], "repetitionpenalty (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"]], "setbeamsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"]], "setconfigprotobytes() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"]], "setdosample() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"]], "setignoretokenids() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"]], "setmaxoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"]], "setmaxsentencesize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"]], "setminoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"]], "setnorepeatngramsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"]], "settemperature() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"]], "settopk() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"]], "settopp() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [326, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "temperature (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"]], "topk (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"]], "topp (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"], [326, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"]], "paligemmaformultimodal (class in sparknlp.annotator.cv.paligemma_for_multimodal)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"]], "beamsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"]], "dosample (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"]], "ignoretokenids (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"]], "inputannotatortypes (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"]], "maxoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"]], "minoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"]], "name (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"]], "norepeatngramsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"]], "outputannotatortype (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"]], "pretrained() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"]], "repetitionpenalty (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"]], "setbeamsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"]], "setdosample() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"]], "setignoretokenids() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"]], "settemperature() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"]], "settopk() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"]], "settopp() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [327, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "temperature (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"]], "topk (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"]], "topp (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"], [327, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"]], "phi3vision (class in sparknlp.annotator.cv.phi3_vision_for_multimodal)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"]], "beamsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"]], "configprotobytes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"]], "dosample (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"]], "ignoretokenids (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"]], "inputannotatortypes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"]], "loadsavedmodel() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"]], "maxoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"]], "minoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"]], "name (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"]], "norepeatngramsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"]], "outputannotatortype (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"]], "pretrained() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"]], "repetitionpenalty (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"]], "setbeamsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"]], "setconfigprotobytes() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"]], "setdosample() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"]], "setignoretokenids() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"]], "setmaxsentencesize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"]], "setminoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"]], "setnorepeatngramsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"]], "settemperature() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"]], "settopk() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"]], "settopp() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [328, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "temperature (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"]], "topk (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"]], "topp (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"], [328, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"]], "qwen2vltransformer (class in sparknlp.annotator.cv.qwen2vl_transformer)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"]], "beamsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"]], "configprotobytes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"]], "dosample (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"]], "ignoretokenids (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"]], "inputannotatortypes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"]], "maxoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"]], "minoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"]], "name (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"]], "norepeatngramsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"]], "outputannotatortype (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"]], "pretrained() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"]], "repetitionpenalty (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"]], "setbeamsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"]], "setconfigprotobytes() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"]], "setdosample() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"]], "setignoretokenids() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"]], "setmaxsentencesize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"]], "setminoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"]], "settemperature() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"]], "settopk() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"]], "settopp() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [329, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "temperature (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"]], "topk (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"]], "topp (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"], [329, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"]], "smolvlmtransformer (class in sparknlp.annotator.cv.smolvlm_transformer)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"]], "beamsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"]], "doimagesplitting (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"]], "dosample (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"]], "ignoretokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"]], "imagetoken (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"]], "inputannotatortypes (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"]], "maximagesize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"]], "maxoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"]], "minoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"]], "name (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"]], "norepeatngramsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"]], "numvisiontokens (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"]], "outputannotatortype (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"]], "paddingconstant (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"]], "patchsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"]], "pretrained() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"]], "repetitionpenalty (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"]], "setbeamsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"]], "setconfigprotobytes() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"]], "setdoimagesplitting() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"]], "setdosample() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"]], "setignoretokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"]], "setimagetoken() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"]], "setmaximagesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"]], "setmaxoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"]], "setmaxsentencesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"]], "setminoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"]], "setnumvisiontokens() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"]], "setpaddingconstant() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"]], "setpatchsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"]], "setrepetitionpenalty() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"]], "setstoptokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"]], "settemperature() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"]], "settopk() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"]], "settopp() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [330, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "stoptokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"]], "temperature (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"]], "topk (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"]], "topp (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"], [330, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "configprotobytes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"]], "getclasses() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "inputannotatortypes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "name (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"]], "outputannotatortype (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"]], "pretrained() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"], [331, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [331, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "configprotobytes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"]], "inputannotatortypes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "name (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"]], "outputannotatortype (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"], [332, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [332, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "configprotobytes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"]], "getclasses() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "inputannotatortypes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "name (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"]], "outputannotatortype (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"]], "pretrained() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"], [333, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [333, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "dataframeoptimizer (class in sparknlp.annotator.dataframe_optimizer)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer"]], "docache (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.doCache"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.doCache"]], "executorcores (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.executorCores"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.executorCores"]], "numpartitions (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numPartitions"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numPartitions"]], "numworkers (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numWorkers"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numWorkers"]], "outputoptions (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.outputOptions"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.outputOptions"]], "persistformat (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistFormat"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistFormat"]], "persistpath (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistPath"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistPath"]], "setdocache() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setDoCache"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setDoCache"]], "setexecutorcores() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setExecutorCores"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setExecutorCores"]], "setnumpartitions() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumPartitions"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumPartitions"]], "setnumworkers() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumWorkers"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumWorkers"]], "setoutputoptions() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setOutputOptions"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setOutputOptions"]], "setparams() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setParams"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setParams"]], "setpersistformat() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistFormat"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistFormat"]], "setpersistpath() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistPath"], [334, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistPath"]], "sparknlp.annotator.dataframe_optimizer": [[81, "module-sparknlp.annotator.dataframe_optimizer"], [334, "module-sparknlp.annotator.dataframe_optimizer"]], "tostringdict() (in module sparknlp.annotator.dataframe_optimizer)": [[81, "sparknlp.annotator.dataframe_optimizer.toStringDict"], [334, "sparknlp.annotator.dataframe_optimizer.toStringDict"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk"], [335, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "entityname (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"], [335, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"]], "inputannotatortypes (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"], [335, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"]], "name (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.name"], [335, "sparknlp.annotator.date2_chunk.Date2Chunk.name"]], "outputannotatortype (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"], [335, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"]], "setentityname() (date2chunk method)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"], [335, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[82, "module-sparknlp.annotator.date2_chunk"], [335, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency": [[83, "module-sparknlp.annotator.dependency"], [337, "module-sparknlp.annotator.dependency"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "conllu (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"]], "dependencytreebank (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"]], "inputannotatortypes (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"]], "name (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"]], "numberofiterations (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"]], "outputannotatortype (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"]], "perceptron (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"]], "pretrained() (dependencyparsermodel static method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"], [336, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[84, "module-sparknlp.annotator.dependency.dependency_parser"], [336, "module-sparknlp.annotator.dependency.dependency_parser"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "conll2009 (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"]], "conllformat (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"]], "conllu (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"]], "inputannotatortypes (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"]], "name (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"]], "numberofiterations (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"]], "outputannotatortype (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"]], "pretrained() (typeddependencyparsermodel static method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[85, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [338, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "traindependencypipe (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"]], "trainoptions (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"]], "trainparameters (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"], [338, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "chunkoverlap (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"]], "chunksize (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"]], "explodesplits (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"]], "inputannotatortypes (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"]], "keepseparators (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"]], "outputannotatortype (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"]], "patternsareregex (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[86, "module-sparknlp.annotator.document_character_text_splitter"], [339, "module-sparknlp.annotator.document_character_text_splitter"]], "splitpatterns (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"]], "trimwhitespace (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"], [339, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "action (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"]], "encoding (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"]], "inputannotatortypes (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"]], "lowercase (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"]], "outputannotatortype (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"]], "patterns (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"]], "policy (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"]], "replacement (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"]], "setaction() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"], [340, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[87, "module-sparknlp.annotator.document_normalizer"], [340, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "explodesplits (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"]], "inputannotatortypes (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"]], "numtokens (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"]], "outputannotatortype (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"]], "setexplodesplits() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[88, "module-sparknlp.annotator.document_token_splitter"], [341, "module-sparknlp.annotator.document_token_splitter"]], "tokenoverlap (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"]], "trimwhitespace (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"], [341, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"]], "sparknlp.annotator.embeddings": [[90, "module-sparknlp.annotator.embeddings"], [356, "module-sparknlp.annotator.embeddings"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "configprotobytes (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"]], "inputannotatortypes (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (albertembeddings static method)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "name (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"]], "outputannotatortype (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"]], "pretrained() (albertembeddings static method)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"], [343, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[91, "module-sparknlp.annotator.embeddings.albert_embeddings"], [343, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "defragmentationthreshold (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"]], "embedding (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"]], "flashattention (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"]], "getmetadata() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "gpusplitmode (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"]], "grpattnn (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"]], "grpattnw (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"]], "inputannotatortypes (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufembeddings static method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "maingpu (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"]], "nbatch (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"]], "nchunks (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"]], "nctx (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"]], "ngpulayers (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"]], "nsequences (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"]], "nthreads (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"]], "nthreadsbatch (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"]], "nubatch (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"]], "name (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"]], "nokvoffload (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"]], "numastrategy (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"]], "outputannotatortype (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"]], "poolingtype (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"]], "pretrained() (autoggufembeddings static method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "ropefreqbase (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"]], "ropefreqscale (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"]], "ropescalingtype (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnparallel() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"]], "setnsequences() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[92, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [344, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "tensorsplit (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"]], "usemlock (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"]], "usemmap (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"]], "yarnattnfactor (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"]], "yarnbetafast (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"]], "yarnbetaslow (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"]], "yarnextfactor (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"]], "yarnorigctx (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"], [344, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "configprotobytes (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"]], "inputannotatortypes (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bertembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "name (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"]], "outputannotatortype (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"]], "pretrained() (bertembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"], [345, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[93, "module-sparknlp.annotator.embeddings.bert_embeddings"], [345, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "configprotobytes (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"]], "islong (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "name (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"]], "outputannotatortype (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentenceembeddings static method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"], [346, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[94, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [346, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "configprotobytes (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"]], "inputannotatortypes (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bgeembeddings static method)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "name (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"]], "outputannotatortype (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"]], "pretrained() (bgeembeddings static method)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"], [347, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[95, "module-sparknlp.annotator.embeddings.bge_embeddings"], [347, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "configprotobytes (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"]], "inputannotatortypes (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (camembertembeddings static method)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "name (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"]], "outputannotatortype (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"]], "pretrained() (camembertembeddings static method)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"], [348, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[96, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [348, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "inputannotatortypes (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"]], "name (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"]], "outputannotatortype (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"]], "poolingstrategy (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"]], "setpoolingstrategy() (chunkembeddings method)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "skipoov (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"], [349, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[97, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [349, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "configprotobytes (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (debertaembeddings static method)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "name (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"]], "outputannotatortype (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"]], "pretrained() (debertaembeddings static method)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"], [350, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[98, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [350, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "configprotobytes (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"]], "inputannotatortypes (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertembeddings static method)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "name (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"]], "outputannotatortype (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"]], "pretrained() (distilbertembeddings static method)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"], [351, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[99, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [351, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "inputannotatortypes (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"]], "maxiter (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"]], "maxsentencelength (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"]], "mincount (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"]], "name (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"]], "numpartitions (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"]], "outputannotatortype (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"]], "outputannotatortype (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"]], "pretrained() (doc2vecmodel static method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "seed (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"]], "setmaxiter() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[100, "module-sparknlp.annotator.embeddings.doc2vec"], [352, "module-sparknlp.annotator.embeddings.doc2vec"]], "stepsize (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"]], "vectorsize (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"]], "vectorsize (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"]], "windowsize (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"], [352, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "configprotobytes (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"]], "inputannotatortypes (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5embeddings static method)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "name (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"]], "outputannotatortype (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"]], "pretrained() (e5embeddings static method)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"], [353, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[101, "module-sparknlp.annotator.embeddings.e5_embeddings"], [353, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "e5vembeddings (class in sparknlp.annotator.embeddings.e5v_embeddings)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings"], [354, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings"]], "inputannotatortypes (e5vembeddings attribute)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.inputAnnotatorTypes"], [354, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5vembeddings static method)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.loadSavedModel"], [354, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.loadSavedModel"]], "name (e5vembeddings attribute)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.name"], [354, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.name"]], "outputannotatortype (e5vembeddings attribute)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.outputAnnotatorType"], [354, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.outputAnnotatorType"]], "pretrained() (e5vembeddings static method)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.pretrained"], [354, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.pretrained"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[102, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [354, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "batchsize (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"]], "configprotobytes (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"]], "inputannotatortypes (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (elmoembeddings static method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "name (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"]], "outputannotatortype (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"]], "poolinglayer (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"]], "pretrained() (elmoembeddings static method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"], [355, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[103, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [355, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "configprotobytes (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"]], "inputannotatortypes (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"]], "instruction (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"]], "loadsavedmodel() (instructorembeddings static method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "name (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"]], "outputannotatortype (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"]], "pretrained() (instructorembeddings static method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"], [357, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[104, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [357, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "configprotobytes (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"]], "inputannotatortypes (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (longformerembeddings static method)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "name (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"]], "outputannotatortype (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"]], "pretrained() (longformerembeddings static method)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"], [358, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[105, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [358, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "minilmembeddings (class in sparknlp.annotator.embeddings.minilm_embeddings)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings"]], "configprotobytes (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.configProtoBytes"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.configProtoBytes"]], "inputannotatortypes (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.inputAnnotatorTypes"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (minilmembeddings static method)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.loadSavedModel"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.loadSavedModel"]], "name (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.name"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.name"]], "outputannotatortype (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.outputAnnotatorType"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.outputAnnotatorType"]], "pretrained() (minilmembeddings static method)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.pretrained"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.pretrained"]], "setconfigprotobytes() (minilmembeddings method)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.setConfigProtoBytes"], [359, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.minilm_embeddings": [[106, "module-sparknlp.annotator.embeddings.minilm_embeddings"], [359, "module-sparknlp.annotator.embeddings.minilm_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "configprotobytes (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"]], "inputannotatortypes (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetembeddings static method)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "name (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"]], "outputannotatortype (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"]], "pretrained() (mpnetembeddings static method)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"], [360, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[107, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [360, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "inputannotatortypes (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mxbaiembeddings static method)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "name (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"]], "outputannotatortype (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"]], "poolingstrategy (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"]], "pretrained() (mxbaiembeddings static method)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"], [361, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[108, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [361, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "configprotobytes (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"]], "inputannotatortypes (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (nomicembeddings static method)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "name (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"]], "outputannotatortype (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"]], "pretrained() (nomicembeddings static method)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"], [362, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[109, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [362, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "configprotobytes (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertaembeddings static method)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "name (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"]], "outputannotatortype (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (robertaembeddings static method)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"], [363, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[110, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [363, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "configprotobytes (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "name (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"]], "outputannotatortype (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (robertasentenceembeddings static method)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"], [364, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[111, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [364, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"], [365, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "inputannotatortypes (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"], [365, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"]], "name (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"], [365, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"]], "outputannotatortype (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"], [365, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"]], "poolingstrategy (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"], [365, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"]], "setpoolingstrategy() (sentenceembeddings method)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"], [365, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[112, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [365, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "inputannotatortypes (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (snowflakeembeddings static method)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "name (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"]], "outputannotatortype (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"]], "poolingstrategy (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"]], "pretrained() (snowflakeembeddings static method)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"], [366, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[113, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [366, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "inputannotatortypes (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (uaeembeddings static method)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "name (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"]], "outputannotatortype (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"]], "poolingstrategy (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"]], "pretrained() (uaeembeddings static method)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"], [367, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[114, "module-sparknlp.annotator.embeddings.uae_embeddings"], [367, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "configprotobytes (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"]], "inputannotatortypes (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"]], "loadsp (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"]], "loadsavedmodel() (universalsentenceencoder static method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "name (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"]], "outputannotatortype (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"]], "pretrained() (universalsentenceencoder static method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"], [368, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[115, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [368, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "inputannotatortypes (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"]], "maxiter (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"]], "maxsentencelength (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"]], "mincount (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"]], "name (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"]], "numpartitions (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"]], "outputannotatortype (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"]], "outputannotatortype (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"]], "pretrained() (word2vecmodel static method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "seed (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"]], "setmaxiter() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[116, "module-sparknlp.annotator.embeddings.word2vec"], [369, "module-sparknlp.annotator.embeddings.word2vec"]], "stepsize (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"]], "vectorsize (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"]], "vectorsize (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"]], "windowsize (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"], [369, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "databases (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"]], "inputannotatortypes (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"]], "inputannotatortypes (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"]], "loadstorage() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "name (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"]], "name (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"]], "outputannotatortype (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"]], "outputannotatortype (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"]], "overallcoverage() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "readcachesize (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"]], "readcachesize (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"]], "setreadcachesize() (wordembeddings method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[117, "module-sparknlp.annotator.embeddings.word_embeddings"], [370, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "writebuffersize (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"], [370, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "configprotobytes (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "name (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"]], "outputannotatortype (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertaembeddings static method)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"], [371, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[118, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [371, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "configprotobytes (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "name (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"]], "outputannotatortype (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"], [372, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[119, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [372, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "configprotobytes (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"]], "inputannotatortypes (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetembeddings static method)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "name (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"]], "outputannotatortype (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"]], "pretrained() (xlnetembeddings static method)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"], [373, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[120, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [373, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er": [[121, "module-sparknlp.annotator.er"], [375, "module-sparknlp.annotator.er"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "alphabet (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"]], "database (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"]], "inputannotatortypes (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"]], "loadstorage() (entityrulermodel static method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"]], "name (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"]], "name (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"]], "optionalinputannotatortypes (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"]], "outputannotatortype (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"]], "patternsresource (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"]], "pretrained() (entityrulermodel static method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"]], "sentencematch (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"]], "setalphabetresource() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[122, "module-sparknlp.annotator.er.entity_ruler"], [374, "module-sparknlp.annotator.er.entity_ruler"]], "usestorage (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"], [374, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "delimiter (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"]], "dependencyparsermodel (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"]], "entitytypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"]], "explodeentities (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"]], "includeedges (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"]], "inputannotatortypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"]], "maxsentencesize (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"]], "mergeentities (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"]], "mergeentitiesiobformat (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"]], "minsentencesize (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"]], "name (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.name"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.name"]], "optionalinputannotatortypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"]], "posmodel (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"]], "relationshiptypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"]], "roottokens (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"]], "setdelimiter() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[123, "module-sparknlp.annotator.graph_extraction"], [376, "module-sparknlp.annotator.graph_extraction"]], "typeddependencyparsermodel (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"], [376, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[124, "module-sparknlp.annotator.keyword_extraction"], [378, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "inputannotatortypes (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "maxngrams (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"]], "minngrams (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"]], "nkeywords (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"]], "name (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"]], "outputannotatortype (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"]], "setmaxngrams() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[125, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [379, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "stopwords (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"]], "threshold (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"]], "windowsize (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"], [379, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"]], "sparknlp.annotator.ld_dl": [[126, "module-sparknlp.annotator.ld_dl"], [380, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "coalescesentences (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"]], "configprotobytes (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"]], "inputannotatortypes (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"]], "languages (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"]], "name (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"]], "outputannotatortype (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"]], "pretrained() (languagedetectordl static method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[127, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [381, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "threshold (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"]], "thresholdlabel (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"], [381, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel"], [382, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "dictionary (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"]], "formcol (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"]], "inputannotatortypes (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"]], "inputannotatortypes (lemmatizermodel attribute)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"], [382, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"]], "lemmacol (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"]], "name (lemmatizermodel attribute)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"], [382, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"]], "outputannotatortype (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"]], "outputannotatortype (lemmatizermodel attribute)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"], [382, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"]], "pretrained() (lemmatizermodel static method)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"], [382, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"], [382, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[128, "module-sparknlp.annotator.lemmatizer"], [382, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher": [[129, "module-sparknlp.annotator.matcher"], [385, "module-sparknlp.annotator.matcher"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "casesensitive (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"]], "casesensitive (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"]], "databases (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"]], "entities (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"]], "inputannotatortypes (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"]], "loadstorage() (bigtextmatchermodel static method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "mergeoverlapping (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"]], "mergeoverlapping (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"]], "name (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"]], "outputannotatortype (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"]], "outputannotatortype (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"]], "pretrained() (bigtextmatchermodel static method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "searchtrie (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"]], "setcasesensitive() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[130, "module-sparknlp.annotator.matcher.big_text_matcher"], [383, "module-sparknlp.annotator.matcher.big_text_matcher"]], "tokenizer (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"], [383, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "aggressivematching (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"]], "anchordateday (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"]], "anchordatemonth (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"]], "anchordateyear (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"]], "defaultdaywhenmissing (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"]], "inputannotatortypes (datematcher attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"]], "inputformats (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"]], "name (datematcher attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"]], "outputannotatortype (datematcher attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"]], "outputformat (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"]], "readmonthfirst (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"]], "relaxedfactorystrategy (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"]], "setaggressivematching() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "setsourcelanguage() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"]], "sourcelanguage (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"], [384, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"]], "sparknlp.annotator.matcher.date_matcher": [[131, "module-sparknlp.annotator.matcher.date_matcher"], [384, "module-sparknlp.annotator.matcher.date_matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"], [386, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "inputannotatortypes (multidatematcher attribute)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"], [386, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"]], "name (multidatematcher attribute)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"], [386, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"]], "outputannotatortype (multidatematcher attribute)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"], [386, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"]], "sparknlp.annotator.matcher.multi_date_matcher": [[132, "module-sparknlp.annotator.matcher.multi_date_matcher"], [386, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "delimiter (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"]], "externalrules (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"]], "inputannotatortypes (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"]], "inputannotatortypes (regexmatchermodel attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"]], "name (regexmatchermodel attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"]], "outputannotatortype (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"]], "outputannotatortype (regexmatchermodel attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"]], "rules (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"]], "setdelimiter() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[133, "module-sparknlp.annotator.matcher.regex_matcher"], [387, "module-sparknlp.annotator.matcher.regex_matcher"]], "strategy (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"], [387, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "buildfromtokens (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"]], "buildfromtokens (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"]], "casesensitive (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"]], "entities (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"]], "entityvalue (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"]], "entityvalue (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"]], "inputannotatortypes (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"]], "mergeoverlapping (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"]], "name (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"]], "outputannotatortype (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"]], "outputannotatortype (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"]], "pretrained() (textmatchermodel static method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "searchtrie (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"]], "setbuildfromtokens() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"], [388, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[134, "module-sparknlp.annotator.matcher.text_matcher"], [388, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "delimiter (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"]], "enablecumulative (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"]], "inputannotatortypes (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"]], "n (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"]], "name (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"]], "outputannotatortype (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"]], "setdelimiter() (ngramgenerator method)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"], [389, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[135, "module-sparknlp.annotator.n_gram_generator"], [389, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[136, "module-sparknlp.annotator.ner"], [390, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "entities (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"]], "getlabelcolumn() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "labelcolumn (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"]], "maxepochs (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"]], "minepochs (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"]], "randomseed (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"]], "setentities() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"], [391, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[137, "module-sparknlp.annotator.ner.ner_approach"], [391, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "inputannotatortypes (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"]], "name (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.name"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.name"]], "nerhasnoschema (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"]], "outputannotatortype (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"]], "preserveposition (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"]], "setnerhasnoschema() (nerconverter method)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[138, "module-sparknlp.annotator.ner.ner_converter"], [392, "module-sparknlp.annotator.ner.ner_converter"]], "whitelist (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"], [392, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "c0 (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"]], "externalfeatures (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"]], "includeconfidence (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"]], "includeconfidence (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"]], "inputannotatortypes (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"]], "inputannotatortypes (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"]], "l2 (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"]], "losseps (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"]], "minw (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"]], "name (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"]], "outputannotatortype (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"]], "outputannotatortype (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"]], "pretrained() (nercrfmodel static method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[139, "module-sparknlp.annotator.ner.ner_crf"], [393, "module-sparknlp.annotator.ner.ner_crf"]], "verbose (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"], [393, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "batchsize (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"]], "bestmodelmetric (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"]], "classes (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"]], "configprotobytes (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"]], "configprotobytes (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"]], "dropout (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"]], "enablememoryoptimizer (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"]], "graphfolder (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"]], "includeallconfidencescores (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"]], "includeallconfidencescores (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"]], "includeconfidence (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"]], "includeconfidence (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"]], "inputannotatortypes (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"]], "lr (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"]], "name (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"]], "outputannotatortype (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"]], "outputannotatortype (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"]], "po (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"]], "pretrained() (nerdlmodel static method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"], [394, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[140, "module-sparknlp.annotator.ner.ner_dl"], [394, "module-sparknlp.annotator.ner.ner_dl"]], "usebestmodel (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"]], "usecontrib (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"], [394, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "inputannotatortypes (neroverwriter attribute)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"]], "name (neroverwriter attribute)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"]], "nerwords (neroverwriter attribute)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"]], "newnerentity (neroverwriter attribute)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"]], "outputannotatortype (neroverwriter attribute)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"]], "replaceentities (neroverwriter attribute)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"]], "setnerwords() (neroverwriter method)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[141, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"], [395, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[141, "module-sparknlp.annotator.ner.ner_overwriter"], [395, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[142, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"], [396, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[142, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [396, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[143, "sparknlp.annotator.normalizer.Normalizer"], [397, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[143, "sparknlp.annotator.normalizer.NormalizerModel"], [397, "sparknlp.annotator.normalizer.NormalizerModel"]], "cleanuppatterns (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"], [397, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"]], "cleanuppatterns (normalizermodel attribute)": [[143, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"], [397, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"]], "inputannotatortypes (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"], [397, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"]], "inputannotatortypes (normalizermodel attribute)": [[143, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"], [397, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"]], "lowercase (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.lowercase"], [397, "sparknlp.annotator.normalizer.Normalizer.lowercase"]], "lowercase (normalizermodel attribute)": [[143, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"], [397, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"]], "maxlength (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.maxLength"], [397, "sparknlp.annotator.normalizer.Normalizer.maxLength"]], "minlength (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.minLength"], [397, "sparknlp.annotator.normalizer.Normalizer.minLength"]], "name (normalizermodel attribute)": [[143, "sparknlp.annotator.normalizer.NormalizerModel.name"], [397, "sparknlp.annotator.normalizer.NormalizerModel.name"]], "outputannotatortype (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"], [397, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"]], "outputannotatortype (normalizermodel attribute)": [[143, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"], [397, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"]], "setcleanuppatterns() (normalizer method)": [[143, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"], [397, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[143, "sparknlp.annotator.normalizer.Normalizer.setLowercase"], [397, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[143, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"], [397, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[143, "sparknlp.annotator.normalizer.Normalizer.setMinLength"], [397, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[143, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"], [397, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "slangdictionary (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"], [397, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"]], "slangmatchcase (normalizer attribute)": [[143, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"], [397, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"]], "slangmatchcase (normalizermodel attribute)": [[143, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"], [397, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"]], "sparknlp.annotator.normalizer": [[143, "module-sparknlp.annotator.normalizer"], [397, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[144, "module-sparknlp.annotator.openai"], [398, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "bestof (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"]], "echo (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"]], "frequencypenalty (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"]], "inputannotatortypes (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"]], "logitbias (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"]], "logprobs (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"]], "maxtokens (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"]], "model (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"]], "name (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"]], "numberofcompletions (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"]], "outputannotatortype (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"]], "presencepenalty (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"]], "setbestof() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[145, "module-sparknlp.annotator.openai.openai_completion"], [399, "module-sparknlp.annotator.openai.openai_completion"]], "stop (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"]], "suffix (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"]], "temperature (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"]], "topp (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"]], "user (openaicompletion attribute)": [[145, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"], [399, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "inputannotatortypes (openaiembeddings attribute)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"]], "model (openaiembeddings attribute)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"]], "name (openaiembeddings attribute)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"]], "outputannotatortype (openaiembeddings attribute)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"]], "setmodel() (openaiembeddings method)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[146, "module-sparknlp.annotator.openai.openai_embeddings"], [400, "module-sparknlp.annotator.openai.openai_embeddings"]], "user (openaiembeddings attribute)": [[146, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"], [400, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"]], "sparknlp.annotator.param": [[147, "module-sparknlp.annotator.param"], [403, "module-sparknlp.annotator.param"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "batchsize (classifierencoder attribute)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"]], "configprotobytes (classifierencoder attribute)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"]], "labelcolumn (classifierencoder attribute)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"]], "lr (classifierencoder attribute)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"]], "maxepochs (classifierencoder attribute)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"]], "randomseed (classifierencoder attribute)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"]], "setbatchsize() (classifierencoder method)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[148, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"], [401, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[148, "module-sparknlp.annotator.param.classifier_encoder"], [401, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "enableoutputlogs (evaluationdlparams attribute)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"]], "evaluationlogextended (evaluationdlparams attribute)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"]], "outputlogspath (evaluationdlparams attribute)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"]], "setenableoutputlogs() (evaluationdlparams method)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[149, "module-sparknlp.annotator.param.evaluation_dl_params"], [402, "module-sparknlp.annotator.param.evaluation_dl_params"]], "testdataset (evaluationdlparams attribute)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"]], "validationsplit (evaluationdlparams attribute)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"]], "verbose (evaluationdlparams attribute)": [[149, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"], [402, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"]], "sparknlp.annotator.pos": [[150, "module-sparknlp.annotator.pos"], [404, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronModel"], [405, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "inputannotatortypes (perceptronapproach attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"]], "inputannotatortypes (perceptronmodel attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"], [405, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"]], "niterations (perceptronapproach attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"]], "name (perceptronmodel attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"], [405, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"]], "outputannotatortype (perceptronapproach attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"]], "outputannotatortype (perceptronmodel attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"], [405, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"]], "poscol (perceptronapproach attribute)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"]], "pretrained() (perceptronmodel static method)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"], [405, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[151, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"], [405, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[151, "module-sparknlp.annotator.pos.perceptron"], [405, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[152, "module-sparknlp.annotator.sentence"], [406, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "custombounds (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"]], "customboundsstrategy (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"]], "detectlists (sentencedetector attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"]], "explodesentences (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"]], "inputannotatortypes (sentencedetector attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"]], "maxlength (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"]], "minlength (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"]], "name (sentencedetector attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"]], "outputannotatortype (sentencedetector attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"]], "setcustombounds() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[153, "module-sparknlp.annotator.sentence.sentence_detector"], [407, "module-sparknlp.annotator.sentence.sentence_detector"]], "splitlength (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"]], "useabbreviations (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"]], "usecustomboundsonly (sentencedetectorparams attribute)": [[153, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"], [407, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "custombounds (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"]], "epochsnumber (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"]], "explodesentences (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"]], "explodesentences (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"]], "impossiblepenultimates (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"]], "impossiblepenultimates (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"]], "inputannotatortypes (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"]], "maxlength (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"]], "minlength (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"]], "modelarchitecture (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"]], "modelarchitecture (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"]], "name (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"]], "name (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"]], "outputannotatortype (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"]], "outputannotatortype (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"]], "outputlogspath (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"]], "pretrained() (sentencedetectordlmodel static method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[154, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [408, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "splitlength (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"]], "usecustomboundsonly (sentencedetectordlmodel attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"]], "validationsplit (sentencedetectordlapproach attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"], [408, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"]], "sparknlp.annotator.sentiment": [[155, "module-sparknlp.annotator.sentiment"], [409, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "decrementmultiplier (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"]], "dictionary (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"]], "enablescore (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"]], "incrementmultiplier (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"]], "inputannotatortypes (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdetectormodel attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"]], "name (sentimentdetectormodel attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"]], "negativemultiplier (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"]], "outputannotatortype (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"]], "outputannotatortype (sentimentdetectormodel attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"]], "positivemultiplier (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"]], "positivemultiplier (sentimentdetectormodel attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"]], "reversemultiplier (sentimentdetector attribute)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"]], "setdictionary() (sentimentdetector method)": [[156, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"], [410, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[156, "module-sparknlp.annotator.sentiment.sentiment_detector"], [410, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "featurelimit (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"]], "featurelimit (viveknsentimentmodel attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"]], "importantfeatureratio (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"]], "importantfeatureratio (viveknsentimentmodel attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"]], "inputannotatortypes (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"]], "inputannotatortypes (viveknsentimentmodel attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"]], "name (viveknsentimentmodel attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"]], "outputannotatortype (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"]], "outputannotatortype (viveknsentimentmodel attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"]], "pretrained() (viveknsentimentmodel static method)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "prunecorpus (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"]], "sentimentcol (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"]], "setprunecorpus() (viveknsentimentapproach method)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[157, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [411, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "unimportantfeaturestep (viveknsentimentapproach attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"]], "unimportantfeaturestep (viveknsentimentmodel attribute)": [[157, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"], [411, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[158, "module-sparknlp.annotator.seq2seq"], [418, "module-sparknlp.annotator.seq2seq"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[159, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"], [412, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "inputannotatortypes (autoggufmodel attribute)": [[159, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"], [412, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufmodel static method)": [[159, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"], [412, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "name (autoggufmodel attribute)": [[159, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"], [412, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"]], "outputannotatortype (autoggufmodel attribute)": [[159, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"], [412, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"]], "pretrained() (autoggufmodel static method)": [[159, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"], [412, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[159, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [412, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "autoggufvisionmodel (class in sparknlp.annotator.seq2seq.auto_gguf_vision_model)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"], [413, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"]], "inputannotatortypes (autoggufvisionmodel attribute)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"], [413, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufvisionmodel static method)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"], [413, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"]], "name (autoggufvisionmodel attribute)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"], [413, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"]], "outputannotatortype (autoggufvisionmodel attribute)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"], [413, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"]], "pretrained() (autoggufvisionmodel static method)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"], [413, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[160, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [413, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "beamsize (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"]], "configprotobytes (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"]], "dosample (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"]], "ignoretokenids (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"]], "inputannotatortypes (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (barttransformer static method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "maxoutputlength (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"]], "minoutputlength (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"]], "name (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"]], "norepeatngramsize (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"]], "outputannotatortype (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"]], "pretrained() (barttransformer static method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "repetitionpenalty (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"]], "setbeamsize() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[161, "module-sparknlp.annotator.seq2seq.bart_transformer"], [414, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "task (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"]], "temperature (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"]], "topk (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"]], "topp (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"]], "usecache (barttransformer attribute)": [[161, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"], [414, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"]], "coheretransformer (class in sparknlp.annotator.seq2seq.cohere_transformer)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"]], "beamsize (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"]], "configprotobytes (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"]], "dosample (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"]], "ignoretokenids (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"]], "inputannotatortypes (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (coheretransformer static method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"]], "maxoutputlength (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"]], "minoutputlength (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"]], "name (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"]], "norepeatngramsize (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"]], "outputannotatortype (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"]], "pretrained() (coheretransformer static method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"]], "repetitionpenalty (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"]], "setbeamsize() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"]], "setconfigprotobytes() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"]], "setdosample() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"]], "setignoretokenids() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"]], "setminoutputlength() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"]], "setnorepeatngramsize() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"]], "setstoptokenids() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"]], "settemperature() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"]], "settopk() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"]], "settopp() (coheretransformer method)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[162, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [415, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "stoptokenids (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"]], "temperature (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"]], "topk (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"]], "topp (coheretransformer attribute)": [[162, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"], [415, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "configprotobytes (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"]], "dosample (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"]], "ignoretokenids (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"]], "inputannotatortypes (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (cpmtransformer static method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "maxoutputlength (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"]], "minoutputlength (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"]], "name (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"]], "norepeatngramsize (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"]], "outputannotatortype (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"]], "pretrained() (cpmtransformer static method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "repetitionpenalty (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"]], "setconfigprotobytes() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[163, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [416, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "temperature (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"]], "topk (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"]], "topp (cpmtransformer attribute)": [[163, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"], [416, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "configprotobytes (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"]], "dosample (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"]], "ignoretokenids (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"]], "inputannotatortypes (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (gpt2transformer static method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "maxoutputlength (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"]], "minoutputlength (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"]], "name (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"]], "norepeatngramsize (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"]], "outputannotatortype (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"]], "pretrained() (gpt2transformer static method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "repetitionpenalty (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"]], "setconfigprotobytes() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[164, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [417, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "task (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"]], "temperature (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"]], "topk (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"]], "topp (gpt2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"], [417, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "configprotobytes (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"]], "dosample (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"]], "ignoretokenids (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"]], "inputannotatortypes (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama2transformer static method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "maxoutputlength (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"]], "minoutputlength (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"]], "name (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"]], "norepeatngramsize (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"]], "outputannotatortype (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"]], "pretrained() (llama2transformer static method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "repetitionpenalty (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"]], "setconfigprotobytes() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[165, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [419, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "temperature (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"]], "topk (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"]], "topp (llama2transformer attribute)": [[165, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"], [419, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "beamsize (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"]], "configprotobytes (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"]], "dosample (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"]], "ignoretokenids (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"]], "inputannotatortypes (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama3transformer static method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "maxoutputlength (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"]], "minoutputlength (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"]], "name (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"]], "norepeatngramsize (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"]], "outputannotatortype (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"]], "pretrained() (llama3transformer static method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "repetitionpenalty (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"]], "setbeamsize() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[166, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [420, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "stoptokenids (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"]], "temperature (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"]], "topk (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"]], "topp (llama3transformer attribute)": [[166, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"], [420, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "beamsize (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"]], "configprotobytes (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"]], "dosample (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"]], "ignoretokenids (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"]], "inputannotatortypes (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (m2m100transformer static method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "maxoutputlength (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"]], "minoutputlength (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"]], "name (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"]], "norepeatngramsize (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"]], "outputannotatortype (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"]], "pretrained() (m2m100transformer static method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "repetitionpenalty (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"]], "setbeamsize() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[167, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [421, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "srclang (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"]], "temperature (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"]], "tgtlang (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"]], "topk (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"]], "topp (m2m100transformer attribute)": [[167, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"], [421, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "configprotobytes (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"]], "dosample (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"]], "ignoretokenids (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"]], "inputannotatortypes (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"]], "langid (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"]], "loadsavedmodel() (mariantransformer static method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "maxinputlength (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"]], "maxoutputlength (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"]], "name (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"]], "norepeatngramsize (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"]], "outputannotatortype (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"]], "pretrained() (mariantransformer static method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "repetitionpenalty (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"]], "setconfigprotobytes() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[168, "module-sparknlp.annotator.seq2seq.marian_transformer"], [422, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "temperature (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"]], "topk (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"]], "topp (mariantransformer attribute)": [[168, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"], [422, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "configprotobytes (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"]], "dosample (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"]], "ignoretokenids (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"]], "inputannotatortypes (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (mistraltransformer static method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "maxoutputlength (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"]], "minoutputlength (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"]], "name (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"]], "norepeatngramsize (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"]], "outputannotatortype (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"]], "pretrained() (mistraltransformer static method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "repetitionpenalty (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"]], "setconfigprotobytes() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[169, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [423, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "temperature (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"]], "topk (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"]], "topp (mistraltransformer attribute)": [[169, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"], [423, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "beamsize (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"]], "configprotobytes (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"]], "dosample (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"]], "ignoretokenids (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"]], "inputannotatortypes (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (nllbtransformer static method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "maxoutputlength (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"]], "minoutputlength (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"]], "name (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"]], "norepeatngramsize (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"]], "outputannotatortype (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"]], "pretrained() (nllbtransformer static method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "repetitionpenalty (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"]], "setbeamsize() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[170, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [424, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "srclang (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"]], "temperature (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"]], "tgtlang (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"]], "topk (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"]], "topp (nllbtransformer attribute)": [[170, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"], [424, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"]], "olmotransformer (class in sparknlp.annotator.seq2seq.olmo_transformer)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"]], "configprotobytes (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"]], "dosample (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"]], "ignoretokenids (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"]], "inputannotatortypes (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (olmotransformer static method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"]], "maxoutputlength (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"]], "minoutputlength (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"]], "name (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"]], "norepeatngramsize (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"]], "outputannotatortype (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"]], "pretrained() (olmotransformer static method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"]], "repetitionpenalty (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"]], "setconfigprotobytes() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"]], "setdosample() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"]], "setignoretokenids() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"]], "setminoutputlength() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"]], "setnorepeatngramsize() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"]], "settemperature() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"]], "settopk() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"]], "settopp() (olmotransformer method)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[171, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [425, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "temperature (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"]], "topk (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"]], "topp (olmotransformer attribute)": [[171, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"], [425, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "configprotobytes (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"]], "dosample (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"]], "ignoretokenids (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"]], "inputannotatortypes (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi2transformer static method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "maxoutputlength (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"]], "minoutputlength (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"]], "name (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"]], "norepeatngramsize (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"]], "outputannotatortype (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"]], "pretrained() (phi2transformer static method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "repetitionpenalty (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[172, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [426, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "temperature (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"]], "topk (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"]], "topp (phi2transformer attribute)": [[172, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"], [426, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "configprotobytes (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"]], "dosample (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"]], "ignoretokenids (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"]], "inputannotatortypes (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi3transformer static method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "maxoutputlength (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"]], "minoutputlength (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"]], "name (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"]], "norepeatngramsize (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"]], "outputannotatortype (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"]], "pretrained() (phi3transformer static method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "repetitionpenalty (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[173, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [427, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "temperature (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"]], "topk (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"]], "topp (phi3transformer attribute)": [[173, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"], [427, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"]], "phi4transformer (class in sparknlp.annotator.seq2seq.phi4_transformer)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer"]], "beamsize (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.beamSize"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.beamSize"]], "configprotobytes (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.configProtoBytes"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.configProtoBytes"]], "dosample (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.doSample"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.doSample"]], "ignoretokenids (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.ignoreTokenIds"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.ignoreTokenIds"]], "inputannotatortypes (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.inputAnnotatorTypes"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi4transformer static method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.loadSavedModel"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.loadSavedModel"]], "maxoutputlength (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.maxOutputLength"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.maxOutputLength"]], "minoutputlength (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.minOutputLength"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.minOutputLength"]], "name (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.name"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.name"]], "norepeatngramsize (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.noRepeatNgramSize"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.noRepeatNgramSize"]], "outputannotatortype (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.outputAnnotatorType"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.outputAnnotatorType"]], "pretrained() (phi4transformer static method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.pretrained"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.pretrained"]], "repetitionpenalty (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.repetitionPenalty"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.repetitionPenalty"]], "setbeamsize() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setBeamSize"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setBeamSize"]], "setconfigprotobytes() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setConfigProtoBytes"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setConfigProtoBytes"]], "setdosample() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setDoSample"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setDoSample"]], "setignoretokenids() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setIgnoreTokenIds"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMaxOutputLength"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMaxOutputLength"]], "setminoutputlength() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMinOutputLength"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setNoRepeatNgramSize"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setRepetitionPenalty"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setRepetitionPenalty"]], "setstoptokenids() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setStopTokenIds"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setStopTokenIds"]], "settemperature() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTemperature"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTemperature"]], "settopk() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopK"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopK"]], "settopp() (phi4transformer method)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopP"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi4_transformer": [[174, "module-sparknlp.annotator.seq2seq.phi4_transformer"], [428, "module-sparknlp.annotator.seq2seq.phi4_transformer"]], "stoptokenids (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.stopTokenIds"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.stopTokenIds"]], "temperature (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.temperature"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.temperature"]], "topk (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topK"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topK"]], "topp (phi4transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topP"], [428, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topP"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "configprotobytes (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"]], "dosample (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"]], "ignoretokenids (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"]], "inputannotatortypes (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwentransformer static method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "maxoutputlength (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"]], "minoutputlength (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"]], "name (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"]], "norepeatngramsize (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"]], "outputannotatortype (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"]], "pretrained() (qwentransformer static method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "repetitionpenalty (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"]], "setconfigprotobytes() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[175, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [429, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "temperature (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"]], "topk (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"]], "topp (qwentransformer attribute)": [[175, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"], [429, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "configprotobytes (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"]], "dosample (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"]], "ignoretokenids (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"]], "inputannotatortypes (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (starcodertransformer static method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "maxoutputlength (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"]], "minoutputlength (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"]], "name (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"]], "norepeatngramsize (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"]], "outputannotatortype (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"]], "pretrained() (starcodertransformer static method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "repetitionpenalty (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"]], "setconfigprotobytes() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[176, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [430, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "temperature (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"]], "topk (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"]], "topp (starcodertransformer attribute)": [[176, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"], [430, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "configprotobytes (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"]], "dosample (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"]], "ignoretokenids (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"]], "inputannotatortypes (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (t5transformer static method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "maxnewtokens (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"]], "maxoutputlength (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"]], "minoutputlength (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"]], "name (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"]], "norepeatngramsize (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"]], "outputannotatortype (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"]], "pretrained() (t5transformer static method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "repetitionpenalty (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"]], "setconfigprotobytes() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[177, "module-sparknlp.annotator.seq2seq.t5_transformer"], [431, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "stopateos (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"]], "task (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"]], "temperature (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"]], "topk (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"]], "topp (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"]], "usecache (t5transformer attribute)": [[177, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"], [431, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"]], "sparknlp.annotator.similarity": [[178, "module-sparknlp.annotator.similarity"], [433, "module-sparknlp.annotator.similarity"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "aggregationmethod (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"]], "asretriever() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "asretrieverquery (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"]], "bucketlength (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"]], "extractnearestneighbor (documentsimilarityrankerfinisher attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "identityranking (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"]], "inputannotatortypes (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentsimilarityrankermodel attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"]], "inputcols (documentsimilarityrankerfinisher attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"]], "name (documentsimilarityrankerfinisher attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"]], "name (documentsimilarityrankermodel attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"]], "numhashtables (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"]], "numberofneighbours (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"]], "outputannotatortype (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"]], "outputannotatortype (documentsimilarityrankermodel attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"]], "outputcols (documentsimilarityrankerfinisher attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setparams() (documentsimilarityrankerfinisher method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "similaritymethod (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[179, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [432, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "visibledistances (documentsimilarityrankerapproach attribute)": [[179, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"], [432, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"]], "sparknlp.annotator.spell_check": [[180, "module-sparknlp.annotator.spell_check"], [435, "module-sparknlp.annotator.spell_check"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "batchsize (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"]], "casestrategy (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"]], "casestrategy (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"]], "classcount (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"]], "classes (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"]], "comparelowcase (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"]], "compoundcount (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"]], "configprotobytes (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"]], "configprotobytes (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"]], "correctsymbols (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"]], "epochs (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"]], "errorthreshold (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"]], "errorthreshold (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"]], "finalrate (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"]], "gamma (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"]], "getwordclasses() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "graphfolder (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"]], "idsvocab (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"]], "initialrate (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"]], "inputannotatortypes (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"]], "languagemodelclasses (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"]], "maxcandidates (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"]], "maxcandidates (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"]], "maxsentlen (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"]], "maxwindowlen (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"]], "maxwindowlen (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"]], "mincount (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"]], "name (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"]], "name (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"]], "outputannotatortype (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"]], "outputannotatortype (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"]], "pretrained() (contextspellcheckermodel static method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[181, "module-sparknlp.annotator.spell_check.context_spell_checker"], [434, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "tradeoff (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"]], "tradeoff (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"]], "updateregexclass() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "validationfraction (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"]], "vocabfreq (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"]], "vocabids (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"]], "weighteddistpath (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"]], "wordmaxdistance (contextspellcheckerapproach attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"]], "wordmaxdistance (contextspellcheckermodel attribute)": [[181, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"], [434, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "casesensitive (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"]], "dictionary (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"]], "doublevariants (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"]], "dupslimit (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"]], "frequencypriority (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"]], "inputannotatortypes (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"]], "inputannotatortypes (norvigsweetingmodel attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"]], "intersections (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"]], "name (norvigsweetingmodel attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"]], "outputannotatortype (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"]], "outputannotatortype (norvigsweetingmodel attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"]], "pretrained() (norvigsweetingmodel static method)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "reductlimit (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"]], "setcasesensitive() (norvigsweetingapproach method)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "shortcircuit (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[182, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [436, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "vowelswaplimit (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"]], "wordsizeignore (norvigsweetingapproach attribute)": [[182, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"], [436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "corpus (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"]], "deletesthreshold (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"]], "dictionary (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"]], "dupslimit (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"]], "frequencythreshold (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"]], "inputannotatortypes (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"]], "inputannotatortypes (symmetricdeletemodel attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"]], "maxeditdistance (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"]], "name (symmetricdeletemodel attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"]], "outputannotatortype (symmetricdeleteapproach attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"]], "outputannotatortype (symmetricdeletemodel attribute)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"]], "pretrained() (symmetricdeletemodel static method)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[183, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"], [437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[183, "module-sparknlp.annotator.spell_check.symmetric_delete"], [437, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[184, "sparknlp.annotator.stemmer.Stemmer"], [438, "sparknlp.annotator.stemmer.Stemmer"]], "inputannotatortypes (stemmer attribute)": [[184, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"], [438, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"]], "language (stemmer attribute)": [[184, "sparknlp.annotator.stemmer.Stemmer.language"], [438, "sparknlp.annotator.stemmer.Stemmer.language"]], "name (stemmer attribute)": [[184, "sparknlp.annotator.stemmer.Stemmer.name"], [438, "sparknlp.annotator.stemmer.Stemmer.name"]], "outputannotatortype (stemmer attribute)": [[184, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"], [438, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"]], "sparknlp.annotator.stemmer": [[184, "module-sparknlp.annotator.stemmer"], [438, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "casesensitive (stopwordscleaner attribute)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"]], "inputannotatortypes (stopwordscleaner attribute)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"]], "loaddefaultstopwords() (stopwordscleaner method)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "locale (stopwordscleaner attribute)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"]], "name (stopwordscleaner attribute)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"]], "outputannotatortype (stopwordscleaner attribute)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"]], "pretrained() (stopwordscleaner static method)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[185, "module-sparknlp.annotator.stop_words_cleaner"], [439, "module-sparknlp.annotator.stop_words_cleaner"]], "stopwords (stopwordscleaner attribute)": [[185, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"], [439, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "graphfile (tfnerdlgraphbuilder attribute)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"]], "graphfolder (tfnerdlgraphbuilder attribute)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"]], "hiddenunitsnumber (tfnerdlgraphbuilder attribute)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"]], "inputannotatortypes (tfnerdlgraphbuilder attribute)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"]], "inputcols (tfnerdlgraphbuilder attribute)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"]], "inputcolsvalidation() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"]], "labelcolumn (tfnerdlgraphbuilder attribute)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[186, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"], [440, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[186, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [440, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token": [[187, "module-sparknlp.annotator.token"], [442, "module-sparknlp.annotator.token"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[188, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"], [441, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[188, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"], [441, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "inputannotatortypes (chunktokenizer attribute)": [[188, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"], [441, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (chunktokenizermodel attribute)": [[188, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"], [441, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"]], "name (chunktokenizer attribute)": [[188, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"], [441, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"]], "name (chunktokenizermodel attribute)": [[188, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"], [441, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"]], "sparknlp.annotator.token.chunk_tokenizer": [[188, "module-sparknlp.annotator.token.chunk_tokenizer"], [441, "module-sparknlp.annotator.token.chunk_tokenizer"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "infixes (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"]], "inputannotatortypes (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (recursivetokenizermodel attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"]], "name (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"]], "name (recursivetokenizermodel attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"]], "outputannotatortype (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"]], "outputannotatortype (recursivetokenizermodel attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"]], "prefixes (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"]], "setinfixes() (recursivetokenizer method)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[189, "module-sparknlp.annotator.token.recursive_tokenizer"], [443, "module-sparknlp.annotator.token.recursive_tokenizer"]], "suffixes (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"]], "whitelist (recursivetokenizer attribute)": [[189, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"], [443, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "inputannotatortypes (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"]], "maxlength (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"]], "minlength (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"]], "name (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"]], "outputannotatortype (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"]], "pattern (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"]], "positionalmask (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"]], "preserveposition (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"]], "setmaxlength() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[190, "module-sparknlp.annotator.token.regex_tokenizer"], [444, "module-sparknlp.annotator.token.regex_tokenizer"]], "tolowercase (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"]], "trimwhitespace (regextokenizer attribute)": [[190, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"], [444, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "casesensitiveexceptions (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"]], "casesensitiveexceptions (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"]], "contextchars (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"]], "exceptions (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"]], "exceptions (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"]], "exceptionspath (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"]], "getcasesensitiveexceptions() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "infixpatterns (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"]], "inputannotatortypes (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"]], "inputannotatortypes (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"]], "maxlength (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"]], "minlength (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"]], "name (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.name"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.name"]], "name (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"]], "outputannotatortype (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"]], "outputannotatortype (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"]], "prefixpattern (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"]], "pretrained() (tokenizermodel static method)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "rules (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"]], "setcasesensitiveexceptions() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[191, "module-sparknlp.annotator.token.tokenizer"], [445, "module-sparknlp.annotator.token.tokenizer"]], "splitchars (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"]], "splitchars (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"]], "splitpattern (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"]], "splitpattern (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"]], "suffixpattern (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"]], "targetpattern (tokenizer attribute)": [[191, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"], [445, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"]], "targetpattern (tokenizermodel attribute)": [[191, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"], [445, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[192, "sparknlp.annotator.token2_chunk.Token2Chunk"], [446, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "inputannotatortypes (token2chunk attribute)": [[192, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"], [446, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"]], "name (token2chunk attribute)": [[192, "sparknlp.annotator.token2_chunk.Token2Chunk.name"], [446, "sparknlp.annotator.token2_chunk.Token2Chunk.name"]], "outputannotatortype (token2chunk attribute)": [[192, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"], [446, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"]], "sparknlp.annotator.token2_chunk": [[192, "module-sparknlp.annotator.token2_chunk"], [446, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[193, "module-sparknlp.annotator.ws"], [447, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "ambiguitythreshold (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"]], "enableregextokenizer (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"]], "enableregextokenizer (wordsegmentermodel attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"]], "frequencythreshold (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "inputannotatortypes (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"]], "inputannotatortypes (wordsegmentermodel attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"]], "niterations (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"]], "name (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"]], "name (wordsegmentermodel attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"]], "outputannotatortype (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"]], "outputannotatortype (wordsegmentermodel attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"]], "pattern (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"]], "pattern (wordsegmentermodel attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"]], "poscol (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"]], "pretrained() (wordsegmentermodel static method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[194, "module-sparknlp.annotator.ws.word_segmenter"], [448, "module-sparknlp.annotator.ws.word_segmenter"]], "tolowercase (wordsegmenterapproach attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"]], "tolowercase (wordsegmentermodel attribute)": [[194, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"], [448, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"]], "sparknlp.base": [[195, "module-sparknlp.base"], [458, "module-sparknlp.base"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[196, "sparknlp.base.audio_assembler.AudioAssembler"], [449, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"], [449, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "inputcol (audioassembler attribute)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"], [449, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"]], "name (audioassembler attribute)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.name"], [449, "sparknlp.base.audio_assembler.AudioAssembler.name"]], "outputannotatortype (audioassembler attribute)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"], [449, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"]], "outputcol (audioassembler attribute)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"], [449, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"]], "setinputcol() (audioassembler method)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"], [449, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"], [449, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "setparams() (audioassembler method)": [[196, "sparknlp.base.audio_assembler.AudioAssembler.setParams"], [449, "sparknlp.base.audio_assembler.AudioAssembler.setParams"]], "sparknlp.base.audio_assembler": [[196, "module-sparknlp.base.audio_assembler"], [449, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "chunkcol (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"]], "failonmissing (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"]], "inputannotatortypes (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"]], "isarray (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"]], "lowercase (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"]], "name (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.name"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.name"]], "outputannotatortype (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"]], "setchunkcol() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setparams() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"]], "setstartcol() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[197, "module-sparknlp.base.doc2_chunk"], [450, "module-sparknlp.base.doc2_chunk"]], "startcol (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"]], "startcolbytokenindex (doc2chunk attribute)": [[197, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"], [450, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"]], "documentassembler (class in sparknlp.base.document_assembler)": [[198, "sparknlp.base.document_assembler.DocumentAssembler"], [451, "sparknlp.base.document_assembler.DocumentAssembler"]], "cleanupmode (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"], [451, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"]], "getoutputcol() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "idcol (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.idCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.idCol"]], "inputcol (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"]], "metadatacol (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"]], "name (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.name"], [451, "sparknlp.base.document_assembler.DocumentAssembler.name"]], "outputannotatortype (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"], [451, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"]], "outputcol (documentassembler attribute)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"]], "setcleanupmode() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"], [451, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"], [451, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "setparams() (documentassembler method)": [[198, "sparknlp.base.document_assembler.DocumentAssembler.setParams"], [451, "sparknlp.base.document_assembler.DocumentAssembler.setParams"]], "sparknlp.base.document_assembler": [[198, "module-sparknlp.base.document_assembler"], [451, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "cleanannotations (embeddingsfinisher attribute)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"]], "getinputcols() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "inputcols (embeddingsfinisher attribute)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"]], "name (embeddingsfinisher attribute)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"]], "outputasvector (embeddingsfinisher attribute)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"]], "outputcols (embeddingsfinisher attribute)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "setparams() (embeddingsfinisher method)": [[199, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"], [452, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"]], "sparknlp.base.embeddings_finisher": [[199, "module-sparknlp.base.embeddings_finisher"], [452, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[200, "sparknlp.base.finisher.Finisher"], [453, "sparknlp.base.finisher.Finisher"]], "annotationsplitsymbol (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"], [453, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"]], "cleanannotations (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.cleanAnnotations"], [453, "sparknlp.base.finisher.Finisher.cleanAnnotations"]], "getinputcols() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.getInputCols"], [453, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.getOutputCols"], [453, "sparknlp.base.finisher.Finisher.getOutputCols"]], "includemetadata (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.includeMetadata"], [453, "sparknlp.base.finisher.Finisher.includeMetadata"]], "inputcols (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.inputCols"], [453, "sparknlp.base.finisher.Finisher.inputCols"]], "name (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.name"], [453, "sparknlp.base.finisher.Finisher.name"]], "outputasarray (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.outputAsArray"], [453, "sparknlp.base.finisher.Finisher.outputAsArray"]], "outputcols (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.outputCols"], [453, "sparknlp.base.finisher.Finisher.outputCols"]], "parseembeddingsvectors (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"], [453, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"]], "setannotationsplitsymbol() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"], [453, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setCleanAnnotations"], [453, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setIncludeMetadata"], [453, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setInputCols"], [453, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setOutputAsArray"], [453, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setOutputCols"], [453, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparams() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setParams"], [453, "sparknlp.base.finisher.Finisher.setParams"]], "setparseembeddingsvectors() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"], [453, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[200, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"], [453, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[200, "module-sparknlp.base.finisher"], [453, "module-sparknlp.base.finisher"]], "valuesplitsymbol (finisher attribute)": [[200, "sparknlp.base.finisher.Finisher.valueSplitSymbol"], [453, "sparknlp.base.finisher.Finisher.valueSplitSymbol"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[201, "sparknlp.base.graph_finisher.GraphFinisher"], [454, "sparknlp.base.graph_finisher.GraphFinisher"]], "cleanannotations (graphfinisher attribute)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"], [454, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"]], "inputcol (graphfinisher attribute)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"], [454, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"]], "name (graphfinisher attribute)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.name"], [454, "sparknlp.base.graph_finisher.GraphFinisher.name"]], "outputasarray (graphfinisher attribute)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"], [454, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"]], "outputcol (graphfinisher attribute)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"], [454, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"]], "setcleanannotations() (graphfinisher method)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"], [454, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"], [454, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"], [454, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"], [454, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "setparams() (graphfinisher method)": [[201, "sparknlp.base.graph_finisher.GraphFinisher.setParams"], [454, "sparknlp.base.graph_finisher.GraphFinisher.setParams"]], "sparknlp.base.graph_finisher": [[201, "module-sparknlp.base.graph_finisher"], [454, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[202, "sparknlp.base.has_recursive_fit.HasRecursiveFit"], [455, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[202, "module-sparknlp.base.has_recursive_fit"], [455, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[203, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"], [456, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[203, "module-sparknlp.base.has_recursive_transform"], [456, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[204, "sparknlp.base.image_assembler.ImageAssembler"], [457, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[204, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "inputcol (imageassembler attribute)": [[204, "sparknlp.base.image_assembler.ImageAssembler.inputCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.inputCol"]], "loadimagesasbytes() (imageassembler class method)": [[204, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"], [457, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"]], "name (imageassembler attribute)": [[204, "sparknlp.base.image_assembler.ImageAssembler.name"], [457, "sparknlp.base.image_assembler.ImageAssembler.name"]], "outputannotatortype (imageassembler attribute)": [[204, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"], [457, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"]], "outputcol (imageassembler attribute)": [[204, "sparknlp.base.image_assembler.ImageAssembler.outputCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.outputCol"]], "setinputcol() (imageassembler method)": [[204, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[204, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "setparams() (imageassembler method)": [[204, "sparknlp.base.image_assembler.ImageAssembler.setParams"], [457, "sparknlp.base.image_assembler.ImageAssembler.setParams"]], "settextcol() (imageassembler method)": [[204, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[204, "module-sparknlp.base.image_assembler"], [457, "module-sparknlp.base.image_assembler"]], "textcol (imageassembler attribute)": [[204, "sparknlp.base.image_assembler.ImageAssembler.textCol"], [457, "sparknlp.base.image_assembler.ImageAssembler.textCol"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[205, "sparknlp.base.light_pipeline.LightPipeline"], [459, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[205, "sparknlp.base.light_pipeline.LightPipeline.annotate"], [459, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[205, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"], [459, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[205, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"], [459, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[205, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"], [459, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[205, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"], [459, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[205, "module-sparknlp.base.light_pipeline"], [459, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[205, "sparknlp.base.light_pipeline.LightPipeline.transform"], [459, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "cleanupmode (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"]], "getoutputcols() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "idcol (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"]], "inputcols (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"]], "metadatacol (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"]], "name (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"]], "outputannotatortype (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"]], "outputcols (multidocumentassembler attribute)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"]], "setcleanupmode() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "setparams() (multidocumentassembler method)": [[206, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"], [460, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"]], "sparknlp.base.multi_document_assembler": [[206, "module-sparknlp.base.multi_document_assembler"], [460, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler"], [461, "sparknlp.base.prompt_assembler.PromptAssembler"]], "addassistant (promptassembler attribute)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"]], "chattemplate (promptassembler attribute)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"]], "inputcol (promptassembler attribute)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"]], "name (promptassembler attribute)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.name"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.name"]], "outputannotatortype (promptassembler attribute)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"]], "outputcol (promptassembler attribute)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"]], "setaddassistant() (promptassembler method)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "setparams() (promptassembler method)": [[207, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"], [461, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"]], "sparknlp.base.prompt_assembler": [[207, "module-sparknlp.base.prompt_assembler"], [461, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[208, "sparknlp.base.recursive_pipeline.RecursivePipeline"], [462, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[208, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"], [462, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[208, "module-sparknlp.base.recursive_pipeline"], [462, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[209, "sparknlp.base.table_assembler.TableAssembler"], [463, "sparknlp.base.table_assembler.TableAssembler"]], "csvdelimiter (tableassembler attribute)": [[209, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"], [463, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"]], "escapecsvdelimiter (tableassembler attribute)": [[209, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"], [463, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"]], "inputannotatortypes (tableassembler attribute)": [[209, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"], [463, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"]], "inputformat (tableassembler attribute)": [[209, "sparknlp.base.table_assembler.TableAssembler.inputFormat"], [463, "sparknlp.base.table_assembler.TableAssembler.inputFormat"]], "name (tableassembler attribute)": [[209, "sparknlp.base.table_assembler.TableAssembler.name"], [463, "sparknlp.base.table_assembler.TableAssembler.name"]], "outputannotatortype (tableassembler attribute)": [[209, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"], [463, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"]], "setcsvdelimiter() (tableassembler method)": [[209, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"], [463, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[209, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"], [463, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[209, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"], [463, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[209, "module-sparknlp.base.table_assembler"], [463, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[210, "sparknlp.base.token_assembler.TokenAssembler"], [464, "sparknlp.base.token_assembler.TokenAssembler"]], "inputannotatortypes (tokenassembler attribute)": [[210, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"], [464, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"]], "name (tokenassembler attribute)": [[210, "sparknlp.base.token_assembler.TokenAssembler.name"], [464, "sparknlp.base.token_assembler.TokenAssembler.name"]], "outputannotatortype (tokenassembler attribute)": [[210, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"], [464, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"]], "preserveposition (tokenassembler attribute)": [[210, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"], [464, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"]], "setparams() (tokenassembler method)": [[210, "sparknlp.base.token_assembler.TokenAssembler.setParams"], [464, "sparknlp.base.token_assembler.TokenAssembler.setParams"]], "setpreserveposition() (tokenassembler method)": [[210, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"], [464, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[210, "module-sparknlp.base.token_assembler"], [464, "module-sparknlp.base.token_assembler"]], "sparknlp.common": [[211, "module-sparknlp.common"], [470, "module-sparknlp.common"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[212, "sparknlp.common.annotator_approach.AnnotatorApproach"], [465, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[212, "module-sparknlp.common.annotator_approach"], [465, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[213, "sparknlp.common.annotator_model.AnnotatorModel"], [466, "sparknlp.common.annotator_model.AnnotatorModel"]], "setparams() (annotatormodel method)": [[213, "sparknlp.common.annotator_model.AnnotatorModel.setParams"], [466, "sparknlp.common.annotator_model.AnnotatorModel.setParams"]], "sparknlp.common.annotator_model": [[213, "module-sparknlp.common.annotator_model"], [466, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "inputannotatortypes (annotatorproperties attribute)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"]], "inputcols (annotatorproperties attribute)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"]], "inputcolsvalidation() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"]], "lazyannotator (annotatorproperties attribute)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"]], "optionalinputannotatortypes (annotatorproperties attribute)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorproperties attribute)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"]], "outputcol (annotatorproperties attribute)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"]], "setinputcols() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[214, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"], [467, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[214, "module-sparknlp.common.annotator_properties"], [467, "module-sparknlp.common.annotator_properties"]], "audio (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"], [468, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"]], "annotatortype (class in sparknlp.common.annotator_type)": [[215, "sparknlp.common.annotator_type.AnnotatorType"], [468, "sparknlp.common.annotator_type.AnnotatorType"]], "category (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"], [468, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"]], "chunk (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"], [468, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"]], "date (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.DATE"], [468, "sparknlp.common.annotator_type.AnnotatorType.DATE"]], "dependency (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"], [468, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"]], "document (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"], [468, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"]], "doc_similarity_rankings (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"], [468, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"]], "dummy (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"], [468, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"]], "entity (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"], [468, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"]], "image (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"], [468, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"]], "labeled_dependency (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"], [468, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"]], "language (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"], [468, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"]], "named_entity (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"], [468, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"]], "negex (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"], [468, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"]], "node (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.NODE"], [468, "sparknlp.common.annotator_type.AnnotatorType.NODE"]], "pos (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.POS"], [468, "sparknlp.common.annotator_type.AnnotatorType.POS"]], "sentence_embeddings (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"], [468, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"]], "sentiment (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"], [468, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"]], "table (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.TABLE"], [468, "sparknlp.common.annotator_type.AnnotatorType.TABLE"]], "token (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"], [468, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"]], "wordpiece (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"], [468, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"]], "word_embeddings (annotatortype attribute)": [[215, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"], [468, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"]], "sparknlp.common.annotator_type": [[215, "module-sparknlp.common.annotator_type"], [468, "module-sparknlp.common.annotator_type"]], "coverageresult (class in sparknlp.common.coverage_result)": [[216, "sparknlp.common.coverage_result.CoverageResult"], [469, "sparknlp.common.coverage_result.CoverageResult"]], "sparknlp.common.coverage_result": [[216, "module-sparknlp.common.coverage_result"], [469, "module-sparknlp.common.coverage_result"]], "match_all (matchstrategy attribute)": [[217, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"], [471, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"]], "match_complete (matchstrategy attribute)": [[217, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"], [471, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"]], "match_first (matchstrategy attribute)": [[217, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"], [471, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[217, "sparknlp.common.match_strategy.MatchStrategy"], [471, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[217, "module-sparknlp.common.match_strategy"], [471, "module-sparknlp.common.match_strategy"]], "hasaudiofeatureproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties"], [472, "sparknlp.common.properties.HasAudioFeatureProperties"]], "hasbatchedannotate (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasBatchedAnnotate"], [472, "sparknlp.common.properties.HasBatchedAnnotate"]], "hasbatchedannotateaudio (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasBatchedAnnotateAudio"], [472, "sparknlp.common.properties.HasBatchedAnnotateAudio"]], "hasbatchedannotateimage (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasBatchedAnnotateImage"], [472, "sparknlp.common.properties.HasBatchedAnnotateImage"]], "hascandidatelabelsproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties"]], "hascasesensitiveproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasCaseSensitiveProperties"], [472, "sparknlp.common.properties.HasCaseSensitiveProperties"]], "hasclassifieractivationproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties"], [472, "sparknlp.common.properties.HasClassifierActivationProperties"]], "hasclstokenproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasClsTokenProperties"], [472, "sparknlp.common.properties.HasClsTokenProperties"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasEmbeddingsProperties"], [472, "sparknlp.common.properties.HasEmbeddingsProperties"]], "hasenablecachingproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasEnableCachingProperties"], [472, "sparknlp.common.properties.HasEnableCachingProperties"]], "hasengine (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasEngine"], [472, "sparknlp.common.properties.HasEngine"]], "hasgeneratorproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasGeneratorProperties"], [472, "sparknlp.common.properties.HasGeneratorProperties"]], "hasimagefeatureproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasImageFeatureProperties"], [472, "sparknlp.common.properties.HasImageFeatureProperties"]], "hasllamacppproperties (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasLlamaCppProperties"], [472, "sparknlp.common.properties.HasLlamaCppProperties"]], "haslongmaxsentencelengthlimit (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"], [472, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"]], "hasmaxsentencelengthlimit (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasMaxSentenceLengthLimit"], [472, "sparknlp.common.properties.HasMaxSentenceLengthLimit"]], "hasrescalefactor (class in sparknlp.common.properties)": [[218, "sparknlp.common.properties.HasRescaleFactor"], [472, "sparknlp.common.properties.HasRescaleFactor"]], "activation (hasclassifieractivationproperties attribute)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.activation"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.activation"]], "batchsize (hasbatchedannotate attribute)": [[218, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"]], "batchsize (hasbatchedannotateaudio attribute)": [[218, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"]], "batchsize (hasbatchedannotateimage attribute)": [[218, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"]], "beamsize (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.beamSize"], [472, "sparknlp.common.properties.HasGeneratorProperties.beamSize"]], "cacheprompt (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"], [472, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"]], "candidatelabels (hascandidatelabelsproperties attribute)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"]], "casesensitive (hascasesensitiveproperties attribute)": [[218, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"], [472, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"]], "chattemplate (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"], [472, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"]], "contradictionidparam (hascandidatelabelsproperties attribute)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"]], "defragmentationthreshold (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"], [472, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"]], "dimension (hasembeddingsproperties attribute)": [[218, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"], [472, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"]], "disabletokenids (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"], [472, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"]], "donormalize (hasaudiofeatureproperties attribute)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"]], "donormalize (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"], [472, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"]], "dorescale (hasrescalefactor attribute)": [[218, "sparknlp.common.properties.HasRescaleFactor.doRescale"], [472, "sparknlp.common.properties.HasRescaleFactor.doRescale"]], "doresize (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.doResize"], [472, "sparknlp.common.properties.HasImageFeatureProperties.doResize"]], "dosample (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.doSample"], [472, "sparknlp.common.properties.HasGeneratorProperties.doSample"]], "dynamictemperatureexponent (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"], [472, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"]], "dynamictemperaturerange (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"], [472, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"]], "embedding (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.embedding"], [472, "sparknlp.common.properties.HasLlamaCppProperties.embedding"]], "enablecaching (hasenablecachingproperties attribute)": [[218, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"], [472, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"]], "engine (hasengine attribute)": [[218, "sparknlp.common.properties.HasEngine.engine"], [472, "sparknlp.common.properties.HasEngine.engine"]], "entailmentidparam (hascandidatelabelsproperties attribute)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"]], "featureextractortype (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"], [472, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"]], "featuresize (hasaudiofeatureproperties attribute)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"]], "flashattention (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"], [472, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"]], "frequencypenalty (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"], [472, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"]], "getactivation() (hasclassifieractivationproperties method)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"]], "getbatchsize() (hasbatchedannotate method)": [[218, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"]], "getbatchsize() (hasbatchedannotateaudio method)": [[218, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"]], "getbatchsize() (hasbatchedannotateimage method)": [[218, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"]], "getcasesensitive() (hascasesensitiveproperties method)": [[218, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"], [472, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"]], "getdimension() (hasembeddingsproperties method)": [[218, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"], [472, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "getenablecaching() (hasenablecachingproperties method)": [[218, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"], [472, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"]], "getengine() (hasengine method)": [[218, "sparknlp.common.properties.HasEngine.getEngine"], [472, "sparknlp.common.properties.HasEngine.getEngine"]], "getmaxsentencelength() (hasmaxsentencelengthlimit method)": [[218, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"], [472, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"]], "getmetadata() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"], [472, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"]], "getmultilabel() (hasclassifieractivationproperties method)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"]], "getuseclstoken() (hasclstokenproperties method)": [[218, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"], [472, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"]], "gpusplitmode (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"], [472, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"]], "grammar (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.grammar"], [472, "sparknlp.common.properties.HasLlamaCppProperties.grammar"]], "ignoreeos (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"], [472, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"]], "imagemean (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"], [472, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"]], "imagestd (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"], [472, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"]], "inputprefix (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"], [472, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"]], "inputsuffix (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"], [472, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"]], "maingpu (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"], [472, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"]], "maxoutputlength (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"], [472, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"]], "maxsentencelength (hasmaxsentencelengthlimit attribute)": [[218, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"], [472, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"]], "max_length_limit (haslongmaxsentencelengthlimit attribute)": [[218, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"], [472, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"]], "max_length_limit (hasmaxsentencelengthlimit attribute)": [[218, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"], [472, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"]], "minkeep (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"], [472, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"]], "minoutputlength (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"], [472, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"]], "minp (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.minP"], [472, "sparknlp.common.properties.HasLlamaCppProperties.minP"]], "mirostat (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"], [472, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"]], "mirostateta (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"], [472, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"]], "mirostattau (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"], [472, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"]], "modelalias (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"], [472, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"]], "modeldraft (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"], [472, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"]], "multilabel (hasclassifieractivationproperties attribute)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"]], "nbatch (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"]], "nctx (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"]], "ndraft (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"]], "ngpulayers (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"]], "ngpulayersdraft (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"]], "nkeep (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"]], "npredict (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"]], "nprobs (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"]], "nreturnsequences (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"], [472, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"]], "nthreads (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"]], "nthreadsbatch (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"]], "nubatch (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"], [472, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"]], "nokvoffload (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"], [472, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"]], "norepeatngramsize (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"], [472, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"]], "numastrategy (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"], [472, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"]], "paddingside (hasaudiofeatureproperties attribute)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"]], "paddingvalue (hasaudiofeatureproperties attribute)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"]], "penalizenl (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"], [472, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"]], "penaltyprompt (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"], [472, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"]], "poolingtype (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"], [472, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"]], "presencepenalty (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"], [472, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"]], "repeatlastn (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"], [472, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"]], "repeatpenalty (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"], [472, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"]], "repetitionpenalty (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"], [472, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"]], "resample (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.resample"], [472, "sparknlp.common.properties.HasImageFeatureProperties.resample"]], "rescalefactor (hasrescalefactor attribute)": [[218, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"], [472, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"]], "returnattentionmask (hasaudiofeatureproperties attribute)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"]], "ropefreqbase (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"], [472, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"]], "ropefreqscale (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"], [472, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"]], "ropescalingtype (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"], [472, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"]], "samplers (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.samplers"], [472, "sparknlp.common.properties.HasLlamaCppProperties.samplers"]], "samplingrate (hasaudiofeatureproperties attribute)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"]], "seed (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.seed"], [472, "sparknlp.common.properties.HasLlamaCppProperties.seed"]], "setactivation() (hasclassifieractivationproperties method)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"]], "setbatchsize() (hasbatchedannotate method)": [[218, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"]], "setbatchsize() (hasbatchedannotateaudio method)": [[218, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"]], "setbatchsize() (hasbatchedannotateimage method)": [[218, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"], [472, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"]], "setbeamsize() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"], [472, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"]], "setcacheprompt() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"]], "setcandidatelabels() (hascandidatelabelsproperties method)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"]], "setcasesensitive() (hascasesensitiveproperties method)": [[218, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"], [472, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"]], "setchattemplate() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"]], "setcontradictionidparam() (hascandidatelabelsproperties method)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"]], "setdefragmentationthreshold() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"]], "setdimension() (hasembeddingsproperties method)": [[218, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"], [472, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdisabletokenids() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"]], "setdonormalize() (hasaudiofeatureproperties method)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"]], "setdonormalize() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"]], "setdorescale() (hasrescalefactor method)": [[218, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"], [472, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"]], "setdoresize() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"]], "setdosample() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"], [472, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"]], "setdynamictemperatureexponent() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"]], "setembedding() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"]], "setenablecaching() (hasenablecachingproperties method)": [[218, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"], [472, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"]], "setentailmentidparam() (hascandidatelabelsproperties method)": [[218, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"], [472, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"]], "setfeatureextractortype() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"]], "setfeaturesize() (hasaudiofeatureproperties method)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"]], "setflashattention() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"]], "setfrequencypenalty() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"]], "setgpusplitmode() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"]], "setgrammar() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"]], "setignoreeos() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"]], "setimagemean() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"]], "setimagestd() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"]], "setinputprefix() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"]], "setinputsuffix() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"]], "setmaingpu() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"]], "setmaxoutputlength() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"], [472, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"]], "setmaxsentencelength() (hasmaxsentencelengthlimit method)": [[218, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"], [472, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"]], "setminkeep() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"]], "setminoutputlength() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"], [472, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"]], "setminp() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"]], "setmirostat() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"]], "setmirostateta() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"]], "setmirostattau() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"]], "setmodelalias() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"]], "setmodeldraft() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"]], "setmultilabel() (hasclassifieractivationproperties method)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"]], "setnbatch() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"]], "setnctx() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"]], "setndraft() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"]], "setngpulayers() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"]], "setngpulayersdraft() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"]], "setnkeep() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"]], "setnparallel() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"]], "setnpredict() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"]], "setnprobs() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"]], "setnreturnsequences() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"], [472, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"]], "setnthreads() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"]], "setnthreadsbatch() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"]], "setnubatch() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"]], "setnokvoffload() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"]], "setnorepeatngramsize() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"], [472, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"]], "setnumastrategy() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"]], "setpaddingside() (hasaudiofeatureproperties method)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"]], "setpaddingvalue() (hasaudiofeatureproperties method)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"]], "setpenalizenl() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"]], "setpenaltyprompt() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"]], "setpoolingtype() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"]], "setpresencepenalty() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"]], "setrepeatlastn() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"]], "setrepeatpenalty() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"]], "setrepetitionpenalty() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"], [472, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"]], "setresample() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setResample"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setResample"]], "setrescalefactor() (hasrescalefactor method)": [[218, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"], [472, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"]], "setreturnattentionmask() (hasaudiofeatureproperties method)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"]], "setropefreqbase() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"]], "setropefreqscale() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"]], "setropescalingtype() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"]], "setsamplers() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"]], "setsamplingrate() (hasaudiofeatureproperties method)": [[218, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"], [472, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"]], "setseed() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"]], "setsize() (hasimagefeatureproperties method)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.setSize"], [472, "sparknlp.common.properties.HasImageFeatureProperties.setSize"]], "setstopstrings() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"]], "setsystemprompt() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"]], "settask() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setTask"], [472, "sparknlp.common.properties.HasGeneratorProperties.setTask"]], "settemperature() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"], [472, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"]], "settemperature() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"]], "settfsz() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"]], "setthreshold() (hasclassifieractivationproperties method)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"]], "settokenbias() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"]], "settokenidbias() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"]], "settopk() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setTopK"], [472, "sparknlp.common.properties.HasGeneratorProperties.setTopK"]], "settopk() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"]], "settopp() (hasgeneratorproperties method)": [[218, "sparknlp.common.properties.HasGeneratorProperties.setTopP"], [472, "sparknlp.common.properties.HasGeneratorProperties.setTopP"]], "settopp() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"]], "settypicalp() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"]], "setuseclstoken() (hasclstokenproperties method)": [[218, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"], [472, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"]], "setusechattemplate() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"]], "setusemlock() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"]], "setusemmap() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"]], "setyarnattnfactor() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"]], "setyarnbetafast() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"]], "setyarnbetaslow() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"]], "setyarnextfactor() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"]], "setyarnorigctx() (hasllamacppproperties method)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"], [472, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"]], "size (hasimagefeatureproperties attribute)": [[218, "sparknlp.common.properties.HasImageFeatureProperties.size"], [472, "sparknlp.common.properties.HasImageFeatureProperties.size"]], "sparknlp.common.properties": [[218, "module-sparknlp.common.properties"], [472, "module-sparknlp.common.properties"]], "stopstrings (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"], [472, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"]], "systemprompt (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"], [472, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"]], "task (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.task"], [472, "sparknlp.common.properties.HasGeneratorProperties.task"]], "temperature (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.temperature"], [472, "sparknlp.common.properties.HasGeneratorProperties.temperature"]], "temperature (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.temperature"], [472, "sparknlp.common.properties.HasLlamaCppProperties.temperature"]], "tfsz (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"], [472, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"]], "threshold (hasclassifieractivationproperties attribute)": [[218, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"], [472, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"]], "topk (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.topK"], [472, "sparknlp.common.properties.HasGeneratorProperties.topK"]], "topk (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.topK"], [472, "sparknlp.common.properties.HasLlamaCppProperties.topK"]], "topp (hasgeneratorproperties attribute)": [[218, "sparknlp.common.properties.HasGeneratorProperties.topP"], [472, "sparknlp.common.properties.HasGeneratorProperties.topP"]], "topp (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.topP"], [472, "sparknlp.common.properties.HasLlamaCppProperties.topP"]], "typicalp (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"], [472, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"]], "useclstoken (hasclstokenproperties attribute)": [[218, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"], [472, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"]], "usechattemplate (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"], [472, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"]], "usemlock (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"], [472, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"]], "usemmap (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"], [472, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"]], "yarnattnfactor (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"], [472, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"]], "yarnbetafast (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"], [472, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"]], "yarnbetaslow (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"], [472, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"]], "yarnextfactor (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"], [472, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"]], "yarnorigctx (hasllamacppproperties attribute)": [[218, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"], [472, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"]], "binary (readas attribute)": [[219, "sparknlp.common.read_as.ReadAs.BINARY"], [473, "sparknlp.common.read_as.ReadAs.BINARY"]], "readas (class in sparknlp.common.read_as)": [[219, "sparknlp.common.read_as.ReadAs"], [473, "sparknlp.common.read_as.ReadAs"]], "spark (readas attribute)": [[219, "sparknlp.common.read_as.ReadAs.SPARK"], [473, "sparknlp.common.read_as.ReadAs.SPARK"]], "text (readas attribute)": [[219, "sparknlp.common.read_as.ReadAs.TEXT"], [473, "sparknlp.common.read_as.ReadAs.TEXT"]], "sparknlp.common.read_as": [[219, "module-sparknlp.common.read_as"], [473, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[220, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"], [474, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[220, "module-sparknlp.common.recursive_annotator_approach"], [474, "module-sparknlp.common.recursive_annotator_approach"]], "hasstorage (class in sparknlp.common.storage)": [[221, "sparknlp.common.storage.HasStorage"], [475, "sparknlp.common.storage.HasStorage"]], "hasstoragemodel (class in sparknlp.common.storage)": [[221, "sparknlp.common.storage.HasStorageModel"], [475, "sparknlp.common.storage.HasStorageModel"]], "hasstorageoptions (class in sparknlp.common.storage)": [[221, "sparknlp.common.storage.HasStorageOptions"], [475, "sparknlp.common.storage.HasStorageOptions"]], "hasstorageref (class in sparknlp.common.storage)": [[221, "sparknlp.common.storage.HasStorageRef"], [475, "sparknlp.common.storage.HasStorageRef"]], "enableinmemorystorage (hasstorageoptions attribute)": [[221, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"], [475, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"]], "getenableinmemorystorage() (hasstorageoptions method)": [[221, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"], [475, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"]], "getincludestorage() (hasstorageoptions method)": [[221, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"], [475, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"]], "getstoragepath() (hasstorage method)": [[221, "sparknlp.common.storage.HasStorage.getStoragePath"], [475, "sparknlp.common.storage.HasStorage.getStoragePath"]], "getstorageref() (hasstorageref method)": [[221, "sparknlp.common.storage.HasStorageRef.getStorageRef"], [475, "sparknlp.common.storage.HasStorageRef.getStorageRef"]], "includestorage (hasstorageoptions attribute)": [[221, "sparknlp.common.storage.HasStorageOptions.includeStorage"], [475, "sparknlp.common.storage.HasStorageOptions.includeStorage"]], "loadstorage() (hasstoragemodel static method)": [[221, "sparknlp.common.storage.HasStorageModel.loadStorage"], [475, "sparknlp.common.storage.HasStorageModel.loadStorage"]], "loadstorages() (hasstoragemodel static method)": [[221, "sparknlp.common.storage.HasStorageModel.loadStorages"], [475, "sparknlp.common.storage.HasStorageModel.loadStorages"]], "savestorage() (hasstoragemodel method)": [[221, "sparknlp.common.storage.HasStorageModel.saveStorage"], [475, "sparknlp.common.storage.HasStorageModel.saveStorage"]], "setenableinmemorystorage() (hasstorageoptions method)": [[221, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"], [475, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"]], "setincludestorage() (hasstorageoptions method)": [[221, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"], [475, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"]], "setstoragepath() (hasstorage method)": [[221, "sparknlp.common.storage.HasStorage.setStoragePath"], [475, "sparknlp.common.storage.HasStorage.setStoragePath"]], "setstorageref() (hasstorageref method)": [[221, "sparknlp.common.storage.HasStorageRef.setStorageRef"], [475, "sparknlp.common.storage.HasStorageRef.setStorageRef"]], "sparknlp.common.storage": [[221, "module-sparknlp.common.storage"], [475, "module-sparknlp.common.storage"]], "storagepath (hasstorage attribute)": [[221, "sparknlp.common.storage.HasStorage.storagePath"], [475, "sparknlp.common.storage.HasStorage.storagePath"]], "storageref (hasstorageref attribute)": [[221, "sparknlp.common.storage.HasStorageRef.storageRef"], [475, "sparknlp.common.storage.HasStorageRef.storageRef"]], "externalresource() (in module sparknlp.common.utils)": [[222, "sparknlp.common.utils.ExternalResource"], [476, "sparknlp.common.utils.ExternalResource"]], "regexrule() (in module sparknlp.common.utils)": [[222, "sparknlp.common.utils.RegexRule"], [476, "sparknlp.common.utils.RegexRule"]], "sparknlp.common.utils": [[222, "module-sparknlp.common.utils"], [476, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[223, "sparknlp.functions.explode_annotations_col"], [477, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[223, "sparknlp.functions.filter_by_annotations_col"], [477, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[223, "sparknlp.functions.map_annotations"], [477, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[223, "sparknlp.functions.map_annotations_array"], [477, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[223, "sparknlp.functions.map_annotations_col"], [477, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[223, "sparknlp.functions.map_annotations_cols"], [477, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[223, "sparknlp.functions.map_annotations_strict"], [477, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[223, "module-sparknlp.functions"], [477, "module-sparknlp.functions"]], "sparknlp.internal": [[224, "module-sparknlp.internal"], [482, "module-sparknlp.internal"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[225, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"], [479, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[225, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"], [479, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[225, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"], [479, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[225, "module-sparknlp.internal.annotator_java_ml"], [479, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[226, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"], [480, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "outputannotatortype (annotatortransformer attribute)": [[226, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"], [480, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"]], "sparknlp.internal.annotator_transformer": [[226, "module-sparknlp.internal.annotator_transformer"], [480, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "getdataframe() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"]], "new_java_array() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "spark_version() (extendedjavawrapper method)": [[227, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"], [481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"]], "sparknlp.internal.extended_java_wrapper": [[227, "module-sparknlp.internal.extended_java_wrapper"], [481, "module-sparknlp.internal.extended_java_wrapper"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[228, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"], [483, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[228, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"], [483, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "getter_attrs (paramsgetterssetters attribute)": [[228, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"], [483, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"]], "setparamvalue() (paramsgetterssetters method)": [[228, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"], [483, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[228, "module-sparknlp.internal.params_getters_setters"], [483, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[229, "sparknlp.internal.recursive.RecursiveEstimator"], [484, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[229, "sparknlp.internal.recursive.RecursiveTransformer"], [484, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[229, "sparknlp.internal.recursive.RecursiveEstimator.fit"], [484, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[229, "module-sparknlp.internal.recursive"], [484, "module-sparknlp.internal.recursive"]], "transform_recursive() (recursivetransformer method)": [[229, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"], [484, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"]], "sparknlp.logging": [[230, "module-sparknlp.logging"], [486, "module-sparknlp.logging"]], "cometlogger (class in sparknlp.logging.comet)": [[231, "sparknlp.logging.comet.CometLogger"], [485, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.end"], [485, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_asset"], [485, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_asset_data"], [485, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_completed_run"], [485, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_metrics"], [485, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_parameters"], [485, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"], [485, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.log_visualization"], [485, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[231, "sparknlp.logging.comet.CometLogger.monitor"], [485, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[231, "module-sparknlp.logging.comet"], [485, "module-sparknlp.logging.comet"]], "sparknlp.partition": [[232, "module-sparknlp.partition"], [487, "module-sparknlp.partition"]], "partition (class in sparknlp.partition.partition)": [[233, "sparknlp.partition.partition.Partition"], [488, "sparknlp.partition.partition.Partition"]], "partition() (partition method)": [[233, "sparknlp.partition.partition.Partition.partition"], [488, "sparknlp.partition.partition.Partition.partition"]], "partition_text() (partition method)": [[233, "sparknlp.partition.partition.Partition.partition_text"], [488, "sparknlp.partition.partition.Partition.partition_text"]], "partition_urls() (partition method)": [[233, "sparknlp.partition.partition.Partition.partition_urls"], [488, "sparknlp.partition.partition.Partition.partition_urls"]], "sparknlp.partition.partition": [[233, "module-sparknlp.partition.partition"], [488, "module-sparknlp.partition.partition"]], "haschunkerproperties (class in sparknlp.partition.partition_properties)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties"]], "hasemailreaderproperties (class in sparknlp.partition.partition_properties)": [[234, "sparknlp.partition.partition_properties.HasEmailReaderProperties"], [489, "sparknlp.partition.partition_properties.HasEmailReaderProperties"]], "hasexcelreaderproperties (class in sparknlp.partition.partition_properties)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties"]], "hashtmlreaderproperties (class in sparknlp.partition.partition_properties)": [[234, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"], [489, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"]], "haspowerpointproperties (class in sparknlp.partition.partition_properties)": [[234, "sparknlp.partition.partition_properties.HasPowerPointProperties"], [489, "sparknlp.partition.partition_properties.HasPowerPointProperties"]], "hastextreaderproperties (class in sparknlp.partition.partition_properties)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties"]], "addattachmentcontent (hasemailreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"], [489, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"]], "appendcells (hasexcelreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"]], "cellseparator (hasexcelreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"]], "chunkingstrategy (haschunkerproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.chunkingStrategy"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.chunkingStrategy"]], "combinetextundernchars (haschunkerproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.combineTextUnderNChars"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.combineTextUnderNChars"]], "getaddattachmentcontent() (hasemailreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"], [489, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"]], "getappendcells() (hasexcelreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"]], "getcellseparator() (hasexcelreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"]], "getgroupbrokenparagraphs() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"]], "getincludeslidenotes() (haspowerpointproperties method)": [[234, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"], [489, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"]], "getmaxlinecount() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"]], "getparagraphsplit() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"]], "getshortlinewordthreshold() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"]], "getthreshold() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"]], "gettimeout() (hashtmlreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"], [489, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"]], "gettitlelengthsize() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"]], "groupbrokenparagraphs (hastextreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"]], "includeslidenotes (haspowerpointproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"], [489, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"]], "maxcharacters (haschunkerproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.maxCharacters"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.maxCharacters"]], "maxlinecount (hastextreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"]], "newafternchars (haschunkerproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.newAfterNChars"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.newAfterNChars"]], "overlap (haschunkerproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.overlap"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.overlap"]], "overlapall (haschunkerproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.overlapAll"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.overlapAll"]], "paragraphsplit (hastextreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"]], "setaddattachmentcontent() (hasemailreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"], [489, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"]], "setappendcells() (hasexcelreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"]], "setcellseparator() (hasexcelreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"], [489, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"]], "setchunkingstrategy() (haschunkerproperties method)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.setChunkingStrategy"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.setChunkingStrategy"]], "setcombinetextundernchars() (haschunkerproperties method)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.setCombineTextUnderNChars"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.setCombineTextUnderNChars"]], "setgroupbrokenparagraphs() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"]], "setheaders() (hashtmlreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"], [489, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"]], "setincludeslidenotes() (haspowerpointproperties method)": [[234, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"], [489, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"]], "setmaxcharacters() (haschunkerproperties method)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.setMaxCharacters"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.setMaxCharacters"]], "setmaxlinecount() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"]], "setnewafternchars() (haschunkerproperties method)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.setNewAfterNChars"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.setNewAfterNChars"]], "setoverlap() (haschunkerproperties method)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlap"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlap"]], "setoverlapall() (haschunkerproperties method)": [[234, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlapAll"], [489, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlapAll"]], "setparagraphsplit() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"]], "setshortlinewordthreshold() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"]], "setthreshold() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"]], "settimeout() (hashtmlreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"], [489, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"]], "settitlelengthsize() (hastextreaderproperties method)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"]], "shortlinewordthreshold (hastextreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"]], "sparknlp.partition.partition_properties": [[234, "module-sparknlp.partition.partition_properties"], [489, "module-sparknlp.partition.partition_properties"]], "threshold (hastextreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"]], "timeout (hashtmlreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"], [489, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"]], "titlelengthsize (hastextreaderproperties attribute)": [[234, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"], [489, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"]], "partitiontransformer (class in sparknlp.partition.partition_transformer)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer"]], "contentpath (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"]], "contenttype (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"]], "getcontentpath() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"]], "getcontenttype() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"]], "getincludepagebreaks() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"]], "getinfertablestructure() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"]], "getstorecontent() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"]], "gettitlefontsize() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"]], "includepagebreaks (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"]], "infertablestructure (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"]], "inputannotatortypes (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"]], "name (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.name"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.name"]], "outputannotatortype (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"]], "setcontentpath() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"]], "setcontenttype() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"]], "setincludepagebreaks() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"]], "setinfertablestructure() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"]], "setstorecontent() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"]], "settitlefontsize() (partitiontransformer method)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"]], "sparknlp.partition.partition_transformer": [[235, "module-sparknlp.partition.partition_transformer"], [490, "module-sparknlp.partition.partition_transformer"]], "storecontent (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"]], "titlefontsize (partitiontransformer attribute)": [[235, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"], [490, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"]], "sparknlp.pretrained": [[236, "module-sparknlp.pretrained"], [491, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[237, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"], [492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[237, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"], [492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "from_disk() (pretrainedpipeline static method)": [[237, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"], [492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "fullannotate() (pretrainedpipeline method)": [[237, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"], [492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[237, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"], [492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[237, "module-sparknlp.pretrained.pretrained_pipeline"], [492, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[237, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"], [492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[238, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"], [493, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[238, "module-sparknlp.pretrained.resource_downloader"], [493, "module-sparknlp.pretrained.resource_downloader"]], "printprogress() (in module sparknlp.pretrained.utils)": [[239, "sparknlp.pretrained.utils.printProgress"], [494, "sparknlp.pretrained.utils.printProgress"]], "sparknlp.pretrained.utils": [[239, "module-sparknlp.pretrained.utils"], [494, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[240, "module-sparknlp.reader"], [496, "module-sparknlp.reader"]], "pdf_layout_text_stripper (textstrippertype attribute)": [[241, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"], [495, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"]], "pdf_text_stripper (textstrippertype attribute)": [[241, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"], [495, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"]], "textstrippertype (class in sparknlp.reader.enums)": [[241, "sparknlp.reader.enums.TextStripperType"], [495, "sparknlp.reader.enums.TextStripperType"]], "sparknlp.reader.enums": [[241, "module-sparknlp.reader.enums"], [495, "module-sparknlp.reader.enums"]], "pdftotext (class in sparknlp.reader.pdf_to_text)": [[242, "sparknlp.reader.pdf_to_text.PdfToText"], [497, "sparknlp.reader.pdf_to_text.PdfToText"]], "extractcoordinates (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.extractCoordinates"], [497, "sparknlp.reader.pdf_to_text.PdfToText.extractCoordinates"]], "normalizeligatures (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.normalizeLigatures"], [497, "sparknlp.reader.pdf_to_text.PdfToText.normalizeLigatures"]], "onlypagenum (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"], [497, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"]], "pagenumcol (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"], [497, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"], [497, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"]], "setextractcoordinates() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setExtractCoordinates"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setExtractCoordinates"]], "setinputcol() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"]], "setnormalizeligatures() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setNormalizeLigatures"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setNormalizeLigatures"]], "setonlypagenum() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"]], "setoutputcol() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"]], "setsort() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setSort"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setSort"]], "setsplitpage() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"]], "setstoresplittedpdf() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "settextstripper() (pdftotext method)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"], [497, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"]], "sort (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.sort"], [497, "sparknlp.reader.pdf_to_text.PdfToText.sort"]], "sparknlp.reader.pdf_to_text": [[242, "module-sparknlp.reader.pdf_to_text"], [497, "module-sparknlp.reader.pdf_to_text"]], "splitpage (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"], [497, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"]], "storesplittedpdf (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"], [497, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"]], "textstripper (pdftotext attribute)": [[242, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"], [497, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"]], "reader2doc (class in sparknlp.reader.reader2doc)": [[243, "sparknlp.reader.reader2doc.Reader2Doc"], [498, "sparknlp.reader.reader2doc.Reader2Doc"]], "contentpath (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.contentPath"], [498, "sparknlp.reader.reader2doc.Reader2Doc.contentPath"]], "contenttype (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.contentType"], [498, "sparknlp.reader.reader2doc.Reader2Doc.contentType"]], "explodedocs (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.explodeDocs"], [498, "sparknlp.reader.reader2doc.Reader2Doc.explodeDocs"]], "flattenoutput (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.flattenOutput"], [498, "sparknlp.reader.reader2doc.Reader2Doc.flattenOutput"]], "name (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.name"], [498, "sparknlp.reader.reader2doc.Reader2Doc.name"]], "outputannotatortype (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.outputAnnotatorType"], [498, "sparknlp.reader.reader2doc.Reader2Doc.outputAnnotatorType"]], "outputcol (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.outputCol"], [498, "sparknlp.reader.reader2doc.Reader2Doc.outputCol"]], "setcontentpath() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setContentPath"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setContentPath"]], "setcontenttype() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setContentType"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setContentType"]], "setexplodedocs() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setExplodeDocs"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setExplodeDocs"]], "setflattenoutput() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setFlattenOutput"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setFlattenOutput"]], "setoutputcol() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setOutputCol"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setOutputCol"]], "setparams() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setParams"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setParams"]], "settitlethreshold() (reader2doc method)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.setTitleThreshold"], [498, "sparknlp.reader.reader2doc.Reader2Doc.setTitleThreshold"]], "sparknlp.reader.reader2doc": [[243, "module-sparknlp.reader.reader2doc"], [498, "module-sparknlp.reader.reader2doc"]], "titlethreshold (reader2doc attribute)": [[243, "sparknlp.reader.reader2doc.Reader2Doc.titleThreshold"], [498, "sparknlp.reader.reader2doc.Reader2Doc.titleThreshold"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "csv() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.csv"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.csv"]], "doc() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "md() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.md"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.md"]], "pdf() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"]], "ppt() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"]], "sparknlp.reader.sparknlp_reader": [[244, "module-sparknlp.reader.sparknlp_reader"], [499, "module-sparknlp.reader.sparknlp_reader"]], "txt() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"]], "xls() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"]], "xml() (sparknlpreader method)": [[244, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xml"], [499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xml"]], "sparknlp.training": [[245, "module-sparknlp.training"], [502, "module-sparknlp.training"]], "conll (class in sparknlp.training.conll)": [[246, "sparknlp.training.conll.CoNLL"], [500, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[246, "sparknlp.training.conll.CoNLL.readDataset"], [500, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[246, "module-sparknlp.training.conll"], [500, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[247, "sparknlp.training.conllu.CoNLLU"], [501, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[247, "sparknlp.training.conllu.CoNLLU.readDataset"], [501, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[247, "module-sparknlp.training.conllu"], [501, "module-sparknlp.training.conllu"]], "pos (class in sparknlp.training.pos)": [[248, "sparknlp.training.pos.POS"], [503, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[248, "sparknlp.training.pos.POS.readDataset"], [503, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[248, "module-sparknlp.training.pos"], [503, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[249, "sparknlp.training.pub_tator.PubTator"], [504, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[249, "sparknlp.training.pub_tator.PubTator.readDataset"], [504, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[249, "module-sparknlp.training.pub_tator"], [504, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[250, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"], [505, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "readjsonfile() (spacytoannotation method)": [[250, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"], [505, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"]], "sparknlp.training.spacy_to_annotation": [[250, "module-sparknlp.training.spacy_to_annotation"], [505, "module-sparknlp.training.spacy_to_annotation"]], "pushtohub (class in sparknlp.upload_to_hub)": [[252, "sparknlp.upload_to_hub.PushToHub"], [507, "sparknlp.upload_to_hub.PushToHub"]], "check_for_required_info() (pushtohub method)": [[252, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"], [507, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"]], "create_docs() (pushtohub method)": [[252, "sparknlp.upload_to_hub.PushToHub.create_docs"], [507, "sparknlp.upload_to_hub.PushToHub.create_docs"]], "list_of_tasks (pushtohub attribute)": [[252, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"], [507, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"]], "push_to_hub() (pushtohub method)": [[252, "sparknlp.upload_to_hub.PushToHub.push_to_hub"], [507, "sparknlp.upload_to_hub.PushToHub.push_to_hub"]], "sparknlp.upload_to_hub": [[252, "module-sparknlp.upload_to_hub"], [507, "module-sparknlp.upload_to_hub"]], "unzip_directory() (pushtohub method)": [[252, "sparknlp.upload_to_hub.PushToHub.unzip_directory"], [507, "sparknlp.upload_to_hub.PushToHub.unzip_directory"]], "zip_directory() (pushtohub method)": [[252, "sparknlp.upload_to_hub.PushToHub.zip_directory"], [507, "sparknlp.upload_to_hub.PushToHub.zip_directory"]], "conllgenerator (class in sparknlp.util)": [[253, "sparknlp.util.CoNLLGenerator"], [508, "sparknlp.util.CoNLLGenerator"]], "embeddingsdataframeutils (class in sparknlp.util)": [[253, "sparknlp.util.EmbeddingsDataFrameUtils"], [508, "sparknlp.util.EmbeddingsDataFrameUtils"]], "emptyimagerow (embeddingsdataframeutils attribute)": [[253, "sparknlp.util.EmbeddingsDataFrameUtils.emptyImageRow"], [508, "sparknlp.util.EmbeddingsDataFrameUtils.emptyImageRow"]], "exportconllfiles() (conllgenerator static method)": [[253, "sparknlp.util.CoNLLGenerator.exportConllFiles"], [508, "sparknlp.util.CoNLLGenerator.exportConllFiles"]], "get_config_path() (in module sparknlp.util)": [[253, "sparknlp.util.get_config_path"], [508, "sparknlp.util.get_config_path"]], "imageschema (embeddingsdataframeutils attribute)": [[253, "sparknlp.util.EmbeddingsDataFrameUtils.imageSchema"], [508, "sparknlp.util.EmbeddingsDataFrameUtils.imageSchema"]], "sparknlp.util": [[253, "module-sparknlp.util"], [508, "module-sparknlp.util"]], "annotatortype (annotation attribute)": [[256, "sparknlp.annotation.Annotation.annotatorType"]], "begin (annotation attribute)": [[256, "sparknlp.annotation.Annotation.begin"]], "embeddings (annotation attribute)": [[256, "sparknlp.annotation.Annotation.embeddings"]], "end (annotation attribute)": [[256, "sparknlp.annotation.Annotation.end"]], "metadata (annotation attribute)": [[256, "sparknlp.annotation.Annotation.metadata"]], "result (annotation attribute)": [[256, "sparknlp.annotation.Annotation.result"]], "annotatortype (annotationaudio attribute)": [[257, "sparknlp.annotation_audio.AnnotationAudio.annotatorType"]], "metadata (annotationaudio attribute)": [[257, "sparknlp.annotation_audio.AnnotationAudio.metadata"]], "result (annotationaudio attribute)": [[257, "sparknlp.annotation_audio.AnnotationAudio.result"]], "annotatortype (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.annotatorType"]], "height (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.height"]], "metadata (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.metadata"]], "mode (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.mode"]], "nchannels (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.nChannels"]], "origin (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.origin"]], "result (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.result"]], "width (annotationimage attribute)": [[258, "sparknlp.annotation_image.AnnotationImage.width"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[342, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[342, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[342, "module-sparknlp.annotator.document_token_splitter_test"]], "test_run() (documenttokensplittertestspec method)": [[342, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.test_run"]], "annotators (in module sparknlp.annotator)": [[377, "sparknlp.annotator.annotators"]], "audio (in module sparknlp.annotator)": [[377, "sparknlp.annotator.audio"]], "classifier (in module sparknlp.annotator)": [[377, "sparknlp.annotator.classifier"]], "coref (in module sparknlp.annotator)": [[377, "sparknlp.annotator.coref"]], "cv (in module sparknlp.annotator)": [[377, "sparknlp.annotator.cv"]], "embeddings (in module sparknlp.annotator)": [[377, "sparknlp.annotator.embeddings"]], "er (in module sparknlp.annotator)": [[377, "sparknlp.annotator.er"]], "keyword (in module sparknlp.annotator)": [[377, "sparknlp.annotator.keyword"]], "ld (in module sparknlp.annotator)": [[377, "sparknlp.annotator.ld"]], "ner (in module sparknlp.annotator)": [[377, "sparknlp.annotator.ner"]], "parser (in module sparknlp.annotator)": [[377, "sparknlp.annotator.parser"]], "pos (in module sparknlp.annotator)": [[377, "sparknlp.annotator.pos"]], "regex (in module sparknlp.annotator)": [[377, "sparknlp.annotator.regex"]], "sbd (in module sparknlp.annotator)": [[377, "sparknlp.annotator.sbd"]], "sda (in module sparknlp.annotator)": [[377, "sparknlp.annotator.sda"]], "sentence_detector_dl (in module sparknlp.annotator)": [[377, "sparknlp.annotator.sentence_detector_dl"]], "seq2seq (in module sparknlp.annotator)": [[377, "sparknlp.annotator.seq2seq"]], "spell (in module sparknlp.annotator)": [[377, "sparknlp.annotator.spell"]], "ws (in module sparknlp.annotator)": [[377, "sparknlp.annotator.ws"]], "dictionary_path (norvigsweetingapproach attribute)": [[436, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary_path"]], "dictionary_path (symmetricdeleteapproach attribute)": [[437, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary_path"]], "parse_embeddings (lightpipeline attribute)": [[459, "sparknlp.base.light_pipeline.LightPipeline.parse_embeddings"]], "pipeline_model (lightpipeline attribute)": [[459, "sparknlp.base.light_pipeline.LightPipeline.pipeline_model"]], "stages (recursivepipelinemodel attribute)": [[462, "sparknlp.base.recursive_pipeline.RecursivePipelineModel.stages"]], "covered (coverageresult attribute)": [[469, "sparknlp.common.coverage_result.CoverageResult.covered"]], "percentage (coverageresult attribute)": [[469, "sparknlp.common.coverage_result.CoverageResult.percentage"]], "total (coverageresult attribute)": [[469, "sparknlp.common.coverage_result.CoverageResult.total"]], "annotators (in module sparknlp)": [[478, "sparknlp.annotators"]], "embeddings (in module sparknlp)": [[478, "sparknlp.embeddings"]], "java_obj (extendedjavawrapper attribute)": [[481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.java_obj"]], "sc (extendedjavawrapper attribute)": [[481, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.sc"]], "comet_ml (in module sparknlp.logging.comet)": [[485, "sparknlp.logging.comet.comet_ml"]], "comet_mode (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.comet_mode"]], "experiment (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.experiment"]], "experiment_id (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.experiment_id"]], "experiment_kwargs (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.experiment_kwargs"]], "project_name (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.project_name"]], "thread (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.thread"]], "workspace (cometlogger attribute)": [[485, "sparknlp.logging.comet.CometLogger.workspace"]], "spark (partition attribute)": [[488, "sparknlp.partition.partition.Partition.spark"]], "light_model (pretrainedpipeline attribute)": [[492, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.light_model"]], "spark (sparknlpreader attribute)": [[499, "sparknlp.reader.sparknlp_reader.SparkNLPReader.spark"]], "sparknlp.training.tfgraphs": [[506, "module-sparknlp.training.tfgraphs"]], "tf_graph (in module sparknlp.training.tfgraphs)": [[506, "sparknlp.training.tfgraphs.tf_graph"]], "tf_graph_1x (in module sparknlp.training.tfgraphs)": [[506, "sparknlp.training.tfgraphs.tf_graph_1x"]]}})