Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token2_chunk/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token2_chunk/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 89, 90, 91, 94, 95, 96, 99, 100, 101, 102, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 136, 137, 139, 140, 142, 143, 145, 148, 150, 151, 152, 153, 154, 155, 157, 158, 162, 163, 169, 170, 174, 175, 176, 179, 180, 185, 187, 191, 192, 195, 196, 197, 199, 200, 201], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 94, 99, 100, 101, 102, 103, 106, 107, 112, 114, 115, 117, 119, 120, 122, 123, 126, 128, 129, 131, 139, 142, 143, 151, 152, 153, 154, 163, 167, 176, 179, 180, 182, 183, 185, 192, 194, 196, 197, 199, 200, 201, 202], "quick": [0, 192, 197], "refer": [0, 1, 5, 8, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 86, 103, 114, 115, 118, 119, 120, 122, 123, 126, 128, 129, 139, 141, 142, 151, 163, 196, 198, 199], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 66, 67, 70, 72, 74, 78, 80, 81, 83, 88, 89, 90, 94, 95, 99, 100, 101, 104, 106, 109, 114, 117, 128, 129, 136, 137, 139, 142, 145, 151, 162, 164, 167, 169, 182, 183, 187, 192, 196, 201], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 132, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 155, 157, 158, 163, 167, 169, 174, 175, 176, 180, 182, 192, 196, 199, 200], "up": [0, 1, 5, 8, 22, 34, 65, 70, 74, 76, 86, 106, 119, 120, 122, 123, 163, 169, 192, 196, 199, 200], "your": [0, 1, 22, 34, 39, 54, 64, 65, 72, 74, 76, 89, 90, 94, 95, 99, 100, 101, 104, 106, 107, 112, 117, 118, 126, 128, 133, 135, 139, 143, 194, 196, 199, 200, 202], "environ": [0, 193], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 61, 65, 76, 86, 122, 139], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 94, 95, 100, 101, 103, 104, 106, 107, 112, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 137, 139, 143, 144, 153, 169], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 86, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 148, 179, 180, 187, 196, 199], "shell": 0, "packag": [0, 58, 63, 176, 193, 194], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 94, 95, 100, 101, 103, 104, 106, 107, 112, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 137, 139, 153, 169], "nlp_2": [0, 169], "12": [0, 58, 78, 79, 80, 86, 91, 93, 99, 112, 126, 150, 154, 168, 169, 179, 185, 187, 195], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 148, 150, 151, 153, 154, 155, 168, 169, 172, 175, 176, 179, 182, 183, 185, 186, 196, 197], "submit": [0, 176, 192], "extern": [0, 86, 89, 94, 95, 101, 126, 132, 152, 167, 182, 183, 185, 186], "jar": [0, 169], "after": [0, 53, 54, 56, 65, 72, 73, 76, 91, 93, 99, 106, 135, 155, 176, 195, 196], "compil": 0, "build": [0, 63, 64, 72, 73, 83, 86, 90, 120, 176, 192], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 155, 167, 168, 169, 175, 176, 180, 182, 185, 186, 187, 192, 193, 195, 196, 197, 199, 200, 201, 202], "built": [0, 22, 34, 151], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 49, 51, 58, 86, 106, 119, 120, 123, 151, 163], "apach": [0, 151, 169], "x": [0, 34, 168, 182, 202], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 103, 104, 106, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 137, 139, 142, 143, 144, 151, 155, 163, 176, 179, 180, 186, 192, 193, 195, 196, 197, 198, 199, 200], "you": [0, 14, 18, 29, 38, 44, 54, 56, 62, 64, 66, 72, 74, 83, 91, 102, 106, 122, 143, 145, 150, 169, 176, 180, 185, 187, 192, 194, 196, 197, 200, 201, 202], "need": [0, 5, 7, 8, 10, 54, 56, 64, 66, 72, 77, 81, 83, 86, 91, 94, 100, 101, 104, 109, 112, 115, 118, 120, 126, 128, 129, 136, 137, 140, 148, 150, 176, 180, 182, 183, 185, 192, 194, 196, 197, 200, 202], "java": [0, 88, 106, 107, 124, 156, 157, 165, 171, 172, 175, 180], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 54, 56, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 78, 79, 80, 91, 96, 101, 102, 106, 109, 120, 126, 139, 154, 182, 187], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 61, 63, 64, 67, 69, 70, 72, 75, 77, 78, 79, 80, 81, 83, 86, 88, 89, 91, 94, 96, 99, 101, 102, 103, 104, 106, 112, 114, 115, 118, 119, 120, 122, 123, 126, 130, 132, 139, 143, 150, 152, 153, 162, 163, 164, 168, 169, 176, 180, 186, 187, 192, 193, 194, 195, 196, 197, 200, 201, 202], "note": [0, 5, 7, 8, 14, 18, 22, 29, 34, 38, 39, 44, 58, 64, 67, 72, 74, 77, 78, 80, 86, 101, 106, 119, 120, 122, 123, 150, 169, 201], "sinc": [0, 57, 71, 86, 120, 169, 196, 197, 201], "version": [0, 57, 64, 108, 109, 132, 158, 163, 169, 174, 175, 179, 180, 196, 201], "6": [0, 22, 39, 51, 59, 60, 63, 67, 86, 90, 95, 96, 102, 112, 119, 128, 154, 169, 183, 187, 196], "deprec": [0, 169], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 51, 52, 74, 77, 81, 88, 91, 93, 99, 100, 101, 104, 109, 114, 115, 119, 120, 122, 123, 126, 132, 163, 169, 175, 176, 180, 192, 194, 196], "consid": [0, 77, 83, 86, 106, 122, 126, 128, 129, 131, 135, 169, 180], "stick": [0, 169], "lower": [0, 57, 58, 86, 106, 126, 141, 169], "7": [0, 9, 39, 51, 59, 60, 63, 91, 93, 112, 120, 144, 185, 187, 195], "we": [0, 5, 7, 8, 22, 34, 49, 51, 52, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 86, 100, 101, 104, 106, 115, 119, 120, 122, 123, 126, 128, 137, 150, 168, 192, 195, 196, 197, 200, 201, 202], "recommend": [0, 67, 80, 106, 117, 118, 119, 120, 122, 123], "4": [0, 5, 59, 60, 63, 66, 67, 69, 70, 77, 94, 100, 102, 106, 112, 119, 120, 132, 154, 183, 187], "It": [0, 8, 12, 14, 16, 18, 22, 24, 27, 29, 32, 34, 36, 38, 39, 40, 42, 44, 45, 49, 51, 57, 59, 60, 61, 63, 64, 65, 70, 72, 73, 76, 78, 79, 81, 86, 96, 118, 119, 122, 126, 128, 129, 135, 144, 150, 180, 195, 200], "have": [0, 5, 14, 18, 22, 29, 34, 38, 39, 44, 58, 61, 64, 69, 72, 73, 77, 86, 94, 96, 99, 100, 101, 102, 106, 112, 114, 115, 120, 124, 129, 154, 155, 171, 196, 197, 200], "basic": [0, 51, 86, 114, 195], "knowledg": [0, 64, 86, 145], "framework": [0, 7, 119, 122, 123], "work": [0, 8, 49, 64, 69, 70, 88, 106, 119, 122, 123, 133, 195, 197, 201], "befor": [0, 57, 77, 91, 93, 106, 107, 119, 123, 124, 128, 136, 139, 157, 175, 192], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 88, 89, 90, 91, 94, 95, 100, 101, 104, 112, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 131, 133, 135, 139, 142, 151, 152, 180, 193, 194, 198, 201], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 150, 151, 153, 154, 155, 176, 179, 182, 183, 185, 187, 192, 196, 197, 199, 200, 201], "first": [0, 2, 63, 65, 66, 67, 69, 76, 78, 79, 86, 94, 100, 101, 102, 114, 119, 122, 123, 126, 131, 136, 143, 155, 162, 192, 196, 197, 201], "let": [0, 64, 135, 196], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 29, 31, 35, 38, 41, 44, 49, 51, 52, 57, 58, 61, 63, 64, 65, 66, 70, 72, 73, 76, 78, 79, 81, 86, 94, 101, 104, 106, 107, 118, 119, 120, 122, 123, 124, 126, 128, 129, 135, 136, 137, 139, 140, 144, 150, 156, 157, 163, 165, 168, 171, 175, 176, 192, 195, 196, 197, 200], "make": [0, 49, 51, 57, 61, 70, 71, 78, 79, 86, 106, 115, 118, 119, 128, 198, 202], "sure": [0, 118], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 22, 34, 39, 59, 60, 65, 72, 76, 77, 83, 101, 109, 112, 133, 139, 150, 152, 168, 182, 183, 185, 186, 196, 197, 200, 202], "new": [0, 2, 3, 4, 9, 39, 48, 51, 53, 58, 59, 60, 63, 67, 69, 70, 77, 80, 102, 103, 106, 108, 109, 119, 120, 123, 126, 132, 144, 158, 163, 174, 175, 195, 196], "manag": [0, 86, 180, 193], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 51, 57, 58, 59, 60, 61, 74, 77, 80, 81, 84, 88, 91, 101, 104, 119, 120, 123, 126, 131, 136, 139, 143, 145, 162, 163, 176, 180, 191, 196, 201], "depend": [0, 2, 48, 61, 71, 74, 80, 81, 83, 84, 86, 88, 101, 122, 126, 139, 169], "Then": [0, 22, 34, 100, 101, 155, 176, 196], "sparknlp": [0, 192, 195, 196, 197, 198, 200, 201, 202], "n": [0, 79, 86, 96, 99, 100, 101, 106, 114, 115, 119, 120, 123, 135, 150, 153, 163, 168, 179], "y": [0, 34], "activ": [0, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 86], "jupyt": [0, 176, 192], "now": [0, 61, 115, 150, 197], "should": [0, 2, 3, 4, 10, 22, 34, 39, 49, 51, 52, 65, 66, 76, 78, 86, 88, 95, 96, 100, 101, 106, 107, 109, 114, 115, 122, 124, 126, 136, 150, 157, 158, 171, 175, 179, 182, 183], "readi": [0, 22, 179, 196], "notebook": [0, 176, 192], "run": [0, 64, 86, 176, 180, 193, 201], "also": [0, 22, 34, 39, 49, 51, 52, 57, 58, 67, 70, 77, 78, 79, 81, 83, 86, 91, 94, 99, 100, 101, 108, 109, 115, 118, 119, 131, 150, 153, 158, 163, 174, 192, 196, 197, 198, 199, 201], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 182, 183, 185, 186, 187, 193], "bin": 0, "A": [0, 5, 7, 39, 48, 49, 58, 72, 73, 77, 81, 86, 89, 90, 94, 95, 96, 103, 104, 106, 107, 117, 119, 120, 122, 123, 128, 129, 136, 137, 163, 176, 185, 194, 196, 202], "retriev": [0, 66, 69, 77, 89, 128, 129, 130, 176, 179, 192, 196, 197], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 155, 168, 176, 179, 182, 183, 185, 186, 187, 192, 195, 196, 199, 200, 201, 202], "manual": [0, 195], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 90, 119, 120, 122, 123, 169, 182, 183, 185, 186], "becaus": [0, 106, 107, 117, 124, 157, 175], "other": [0, 5, 9, 34, 49, 61, 74, 75, 83, 86, 104, 117, 119, 120, 123, 126, 133, 135, 143, 144, 196], "configur": [0, 49, 74, 137, 169], "includ": [0, 51, 57, 59, 60, 65, 67, 76, 78, 79, 80, 83, 86, 91, 99, 100, 101, 119, 120, 123, 126, 144, 176, 186, 193, 195, 196, 197, 202], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 58, 59, 61, 63, 64, 70, 72, 78, 80, 81, 83, 86, 91, 94, 115, 122, 126, 131, 139, 152, 155, 196, 197], "builder": [0, 132, 169], "appnam": [0, 169], "master": [0, 169], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 86, 119, 120, 122, 123, 131, 150, 169, 179, 200], "config": [0, 169, 193], "driver": [0, 169], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 58, 67, 77, 169], "16g": [0, 169], "maxresults": [0, 169], "0": [0, 5, 7, 8, 9, 10, 22, 34, 39, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 88, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 108, 109, 112, 114, 115, 117, 119, 120, 123, 124, 126, 129, 132, 137, 139, 142, 143, 144, 150, 151, 153, 154, 155, 158, 163, 168, 169, 172, 174, 175, 176, 179, 180, 183, 185, 186, 187, 192, 195, 196, 201, 202], "kryoseri": [0, 169], "buffer": [0, 60, 77, 169], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 58, 59, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 78, 79, 80, 86, 129, 169], "2000m": [0, 169], "getorcr": [0, 169], "main": [1, 81, 137, 195, 199, 202], "page": [1, 57, 120, 179, 191, 199, 201], "github": [1, 63, 69, 72, 122, 179], "issu": [1, 139], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 168, 176, 179, 180, 182, 183, 185, 186, 187, 192, 195, 196, 197, 199, 200, 201, 202], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 94, 95, 99, 100, 101, 103, 104, 106, 107, 109, 112, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 132, 133, 135, 137, 139, 157, 163, 169, 175, 176, 179, 180, 192, 193, 195, 199, 201, 202], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 88, 89, 100, 101, 112, 115, 119, 120, 122, 123, 126, 128, 129, 131, 139, 180], "welcom": [1, 5, 7, 8], "python": [1, 88, 169], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 106, 107, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 190, 192, 195, 196], "inform": [1, 54, 56, 69, 71, 77, 78, 86, 91, 99, 119, 126, 142, 151, 186, 192, 193, 194, 195, 196, 202], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 103, 106, 107, 109, 112, 114, 115, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 132, 136, 137, 139, 141, 142, 143, 144, 150, 151, 152, 153, 154, 155, 162, 163, 168, 169, 176, 179, 180, 182, 183, 185, 186, 193, 194, 195, 196, 197, 199], "librari": [1, 49, 51, 52, 88, 141, 142, 143, 151, 155, 201], "get": [1, 8, 22, 34, 86, 98, 112, 124, 126, 132, 137, 139, 140, 142, 143, 144, 148, 150, 151, 158, 163, 174, 192, 196, 201, 202], "start": [1, 5, 11, 15, 19, 23, 26, 31, 35, 41, 70, 83, 86, 100, 101, 115, 141, 169, 176, 192, 195, 197, 200, 201], "cheat": 1, "sheet": [1, 57], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 53, 54, 56, 58, 60, 63, 66, 67, 75, 78, 79, 86, 101, 104, 118, 126, 139, 141, 143, 154, 155, 195, 196, 197], "instal": [1, 176, 194], "session": [1, 169, 182, 183, 185, 186], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 157, 163, 168, 169, 172, 175, 176, 179, 180, 182, 183, 185, 186, 187, 192, 195, 196, 197, 200, 201, 202], "user": [1, 99, 100, 106, 107, 137, 152, 169, 176, 192], "guid": [1, 193], "annot": [1, 3, 4, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 168, 169, 170, 171, 173, 175, 176, 179, 180, 181, 185, 187, 192, 193, 198, 199, 200, 201, 202], "own": [1, 22, 34, 39, 54, 65, 76, 89, 90, 94, 95, 100, 101, 104, 112, 117, 118, 126, 128, 133, 135, 139, 199, 200, 202], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 155, 169, 175, 176, 178, 179, 180, 181, 193, 195, 196, 199], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 88, 89, 90, 91, 94, 95, 100, 101, 102, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 143, 144, 150, 168, 169, 176, 192, 195, 199], "dataset": [1, 22, 34, 39, 54, 56, 61, 65, 66, 69, 70, 71, 72, 73, 76, 77, 86, 88, 100, 101, 109, 115, 120, 126, 139, 175, 179, 182, 183, 185, 186, 199], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 86, 88, 89, 90, 94, 95, 98, 100, 101, 104, 108, 109, 112, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 133, 135, 139, 141, 150, 169, 176, 179, 192, 196, 197, 199, 200], "light": [1, 5, 64, 80, 86, 150, 199, 201], "helper": [1, 112, 139, 145, 168, 185, 186, 187, 199, 202], "function": [1, 67, 77, 119, 123, 143, 180, 191, 199], "third": [1, 114, 131, 177, 182], "parti": [1, 177], "project": [1, 86, 122, 124, 176, 193], "log": [1, 22, 34, 39, 101, 106, 109, 115, 120, 169], "api": [1, 106, 192, 196, 199], "modul": [1, 30, 55, 68, 82, 84, 85, 87, 92, 97, 105, 110, 111, 113, 116, 121, 127, 134, 138, 149, 161, 173, 178, 184], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 155, 168, 176, 179, 182, 183, 184, 185, 186, 193, 195, 196, 200, 201, 202], "format": [2, 3, 4, 8, 49, 51, 52, 54, 56, 81, 83, 89, 90, 91, 93, 94, 95, 100, 101, 104, 109, 117, 119, 123, 128, 129, 137, 139, 140, 142, 144, 145, 148, 151, 153, 182, 183, 185, 186, 187, 193, 202], "annotatortyp": [2, 3, 4, 62, 96, 141, 142, 148, 151, 195], "begin": [2, 48, 99, 120, 135, 137, 141, 142, 151, 168, 195], "end": [2, 11, 15, 19, 23, 26, 31, 35, 41, 48, 101, 106, 107, 115, 119, 135, 137, 139, 142, 151, 168, 176, 182, 192, 195, 197], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 168, 169, 176, 179, 182, 183, 187, 192, 193, 195, 196, 197, 200, 201], "metadata": [2, 3, 4, 40, 48, 53, 86, 95, 100, 101, 103, 112, 142, 144, 148, 150, 151, 168, 176, 180, 195, 197], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 83, 84, 100, 101, 102, 124, 142, 143, 144, 150, 151, 163, 168, 169, 175, 179, 195], "repres": [2, 3, 4, 54, 56, 58, 63, 69, 80, 81, 83, 90, 95, 96, 106, 107, 137, 176, 179, 196], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 158, 163, 168, 169, 176, 185, 192, 195, 196, 197], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 164, 168, 169, 171, 172, 173, 176, 179, 180, 182, 183, 185, 186, 187, 191, 193, 194, 195, 196, 198, 199, 200, 202], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 88, 89, 90, 94, 95, 100, 101, 102, 103, 104, 112, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 137, 139, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 155, 161, 169, 173, 176, 179, 180, 182, 183, 185, 186, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202], "detail": [2, 3, 4, 8, 78, 79, 86, 103, 119, 120, 123, 163], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 158, 163, 167, 168, 169, 174, 175, 176, 179, 180, 182, 183, 185, 186], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 132, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 155, 158, 163, 167, 168, 169, 174, 176, 179, 180, 182, 183, 185, 186], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 99, 100, 101, 102, 103, 104, 106, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 136, 137, 139, 142, 144, 150, 151, 153, 163, 168, 169, 176, 179, 180, 182, 183, 185, 186, 187, 192, 195, 196, 197, 199, 200, 202], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 168, 170, 179, 185, 195, 196, 199], "possibl": [2, 3, 4, 62, 64, 78, 79, 81, 114, 126, 129, 142, 151, 162, 164, 176, 192], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 60, 62, 67, 69, 75, 78, 81, 83, 86, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 118, 119, 120, 122, 123, 124, 126, 128, 131, 132, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 155, 158, 162, 163, 164, 174, 176, 192, 202], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 86, 89, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 109, 112, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 139, 141, 143, 150, 152, 154, 155, 163, 169, 179, 182, 186, 187, 196, 200, 201], "wordpiec": 2, "word_embed": [2, 58, 59, 61, 62, 63, 64, 67, 68, 70, 72, 74, 76, 78, 80, 84, 100, 101, 109], "sentence_embed": [2, 22, 34, 39, 60, 65, 66, 68, 69, 71, 73, 75, 79, 84, 176, 192, 196], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 51, 52, 176, 192, 196], "date": [2, 53, 91, 93, 94], "entiti": [2, 9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 48, 51, 53, 61, 81, 82, 83, 90, 95, 97, 98, 99, 100, 101, 102, 103, 133, 144, 150, 154, 179], "sentiment": [2, 22, 34, 39, 67, 80, 84, 123, 169, 196, 197], "po": [2, 10, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 54, 56, 83, 84, 100, 101, 135, 139, 150, 168, 169, 179, 182, 184, 195, 199, 200, 201], "chunk": [2, 9, 10, 11, 15, 19, 23, 26, 31, 35, 40, 41, 53, 62, 65, 76, 81, 86, 90, 94, 95, 96, 99, 133, 141, 144, 154, 168, 176, 186, 192, 202], "named_ent": [2, 13, 17, 21, 25, 28, 33, 37, 43, 46, 83, 99, 100, 101, 102, 103, 109, 150, 179], "negex": 2, "labeled_depend": [2, 56], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 141, 151, 155, 163, 180, 196], "keyword": [2, 85, 86, 117], "dummi": [2, 57], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 83, 86, 88, 91, 96, 98, 100, 101, 104, 106, 108, 109, 112, 114, 115, 118, 119, 120, 122, 123, 124, 126, 129, 132, 136, 137, 139, 163, 169, 176, 182], "index": [2, 86, 90, 136, 169, 182], "charact": [2, 57, 67, 70, 81, 88, 94, 96, 104, 114, 115, 126, 128, 129, 136, 137, 139, 144], "under": [2, 64, 71, 80, 86, 169], "last": [2, 91, 93, 133, 187, 200], "string": [2, 8, 22, 34, 39, 48, 54, 57, 81, 94, 96, 102, 104, 115, 123, 129, 131, 135, 141, 142, 144, 148, 150, 151, 200], "dict": [2, 3, 4, 54, 56, 81, 89, 90, 94, 95, 100, 102, 103, 104, 106, 109, 117, 126, 128, 129, 137, 150, 167, 169, 175, 176, 179], "associ": [2, 3, 4, 34, 75, 81, 94, 99, 106, 176], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 57, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 83, 86, 88, 91, 94, 98, 99, 101, 102, 103, 104, 106, 108, 114, 115, 119, 120, 122, 123, 124, 126, 131, 135, 137, 143, 144, 150, 151, 158, 168, 175, 176, 179, 180, 187, 191, 196], "vector": [2, 34, 59, 60, 62, 63, 65, 66, 67, 75, 76, 77, 143, 144, 195], "where": [2, 34, 63, 67, 81, 86, 89, 90, 94, 95, 96, 106, 112, 115, 117, 119, 120, 123, 128, 129, 139, 141, 185], "applic": [2, 52, 86, 119, 162, 176, 177, 192, 194], "copi": [2, 3, 4, 180], "differ": [2, 3, 4, 49, 51, 54, 56, 67, 69, 72, 73, 78, 80, 86, 91, 114, 115, 126, 137, 139, 150, 176, 200], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 88, 89, 90, 95, 96, 98, 100, 101, 103, 106, 112, 114, 115, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 135, 137, 139, 141, 150, 163, 167, 168, 169, 170, 175, 179, 180, 182, 183, 185, 186], "newli": [2, 3, 4], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 180, 196], "datatyp": [2, 168], "structtyp": 2, "schema": [2, 99, 176, 192], "look": [2, 101, 128, 195], "like": [2, 5, 11, 15, 19, 22, 23, 26, 31, 35, 41, 48, 57, 58, 62, 64, 70, 74, 80, 83, 86, 94, 99, 106, 115, 118, 120, 126, 137, 139, 176, 192, 194, 195], "struct": [2, 142, 148, 151], "containsnul": [2, 34, 140, 142, 148, 151], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 52, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 88, 90, 91, 93, 95, 99, 101, 104, 114, 115, 126, 128, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 151, 153, 176, 180, 182, 183, 186, 187, 192, 196, 197], "nullabl": [2, 34, 140, 142, 148, 151], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 150, 151, 153, 154, 155, 168, 169, 176, 179, 182, 183, 185, 187, 192, 195, 196, 197, 202], "integ": [2, 49, 51, 52, 142, 148, 151], "map": [2, 10, 34, 77, 81, 106, 108, 109, 112, 126, 142, 148, 151, 158, 163, 168, 174, 175, 195], "kei": [2, 5, 49, 54, 56, 72, 73, 78, 79, 89, 103, 142, 148, 150, 151, 176, 179, 192], "valuecontainsnul": [2, 142, 148, 151], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 88, 89, 96, 101, 108, 112, 114, 115, 119, 120, 122, 123, 126, 133, 135, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 168, 197, 200], "element": [2, 34, 96, 106, 140, 142, 148, 151], "float": [2, 3, 5, 7, 8, 22, 34, 39, 49, 53, 88, 100, 101, 103, 106, 108, 109, 115, 119, 120, 123, 124, 126, 139, 140, 142, 143, 150, 151, 163], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 90, 119, 120, 122, 123, 150, 168, 175, 179, 182, 183, 185, 186], "arraytyp": [2, 141, 168], "fromrow": 2, "row": [2, 40, 77, 114, 115, 118, 142, 151, 153, 168, 182], "column": [2, 9, 22, 34, 39, 57, 77, 89, 98, 100, 101, 108, 109, 112, 118, 124, 132, 137, 139, 140, 141, 142, 143, 144, 145, 148, 151, 155, 158, 168, 179, 182, 185, 196], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 154, 155, 163, 168, 171, 175, 176, 179, 192, 195, 196, 197, 200, 201, 202], "an": [2, 5, 7, 8, 10, 22, 34, 39, 40, 49, 51, 52, 54, 57, 61, 63, 67, 69, 70, 71, 80, 81, 86, 88, 90, 91, 93, 94, 95, 96, 100, 101, 103, 106, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 133, 137, 139, 141, 142, 143, 144, 145, 150, 151, 155, 158, 163, 167, 168, 170, 174, 175, 176, 182, 183, 185, 186, 191, 193, 195, 196, 197, 199, 200], "annotationaudio": 3, "audio": [3, 140, 176], "alreadi": [3, 83, 86, 100, 101, 102, 137, 150, 154, 179, 200], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 78, 79, 80, 83, 86, 88, 99, 100, 101, 109, 115, 119, 120, 123, 139, 140, 141, 142, 143, 144, 148, 151, 152, 155, 176, 192, 195, 196, 197, 198], "file": [3, 5, 7, 22, 34, 39, 54, 56, 57, 75, 77, 81, 89, 90, 94, 95, 100, 101, 104, 109, 115, 117, 126, 128, 129, 132, 137, 140, 153, 164, 169, 176, 182, 183, 185, 186, 192, 202], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 88, 101, 108, 119, 120, 122, 123, 126, 176], "annotationimag": [4, 150, 179], "origin": [4, 49, 51, 52, 58, 65, 70, 72, 76, 99, 115, 119, 148], "height": [4, 49, 51, 52, 148], "width": [4, 49, 51, 52, 148], "nchannel": [4, 148], "mode": [4, 22, 34, 39, 101, 109, 128, 142, 148, 151, 176], "imag": [4, 49, 51, 52, 148, 150, 179], "uri": [4, 180], "pixel": [4, 51], "number": [4, 8, 14, 18, 22, 29, 34, 38, 39, 44, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 96, 98, 100, 101, 106, 108, 112, 114, 115, 119, 120, 123, 124, 126, 132, 139, 163, 182, 183], "color": 4, "channel": [4, 49, 51, 52, 126], "opencv": 4, "concern": [5, 7, 8, 12, 49, 51, 52, 53, 58], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 94, 95, 100, 101, 103, 104, 106, 107, 112, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 137, 139, 153, 156, 157, 165, 171], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 94, 95, 100, 101, 103, 104, 106, 107, 112, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 133, 135, 137, 139, 147, 153, 157, 175], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 94, 95, 100, 101, 103, 104, 106, 107, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 157, 169, 175, 176, 179, 180, 197], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 48, 58, 80, 99, 100, 101, 150, 168, 179, 196], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 49, 51, 52, 58, 66, 69, 75, 118, 119, 123, 196], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 57, 61, 63, 64, 70, 72, 73, 77, 78, 79, 86, 118, 119, 120, 126, 179, 196, 197], "propos": [5, 7, 49, 51, 58, 61, 63, 64, 71, 72, 73, 78, 79, 80], "self": [5, 7, 51, 58, 70, 122, 163], "supervis": [5, 7, 8, 58, 66, 67, 75, 86, 119, 120], "speech": [5, 7, 8, 10, 61, 111, 112, 139, 185, 202], "represent": [5, 7, 51, 58, 59, 60, 64, 65, 66, 67, 76, 77, 78, 79, 80, 99, 123, 153, 167], "learn": [5, 7, 22, 34, 39, 53, 58, 64, 65, 67, 72, 73, 75, 76, 78, 79, 80, 86, 100, 101, 108, 115, 119, 120, 123, 126, 176, 194], "mask": [5, 51, 63, 71, 78, 79, 80, 119, 136], "predict": [5, 8, 51, 63, 71, 101, 120, 123, 176, 192], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 58, 67, 80, 132], "unit": [5, 120, 132], "wei": [5, 51], "ning": 5, "hsu": 5, "benjamin": [5, 61], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 29, 38, 40, 44, 61, 71, 83, 95, 108, 109, 128, 131, 137, 152, 158, 163, 174, 182, 195, 196, 200, 201], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 106, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 151, 153, 154, 155, 162, 163, 164, 167, 168, 176, 182, 183, 185, 186, 192, 195, 196, 197, 201, 202], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 91, 93, 94, 95, 100, 101, 104, 108, 109, 112, 115, 117, 119, 120, 122, 123, 126, 128, 129, 139, 150, 158, 163, 168, 170, 174, 179, 197], "pre": [5, 7, 8, 22, 34, 39, 52, 59, 60, 63, 64, 66, 67, 71, 75, 101, 109, 119, 123, 142, 144, 151, 155, 183, 196], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 86, 90, 91, 93, 115, 119, 120, 122, 123, 132, 150, 153, 158, 169, 195, 196, 197], "support": [5, 7, 8, 22, 34, 58, 70, 86, 101, 104, 115, 122, 131, 153, 169, 193], "appl": [5, 7, 60, 73, 79, 169], "silicon": [5, 7, 169], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 58, 70, 119], "instruct": [5, 7, 69], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 100, 101, 103, 112, 115, 119, 120, 122, 123, 126, 128, 129, 131, 139, 172], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 100, 101, 103, 106, 112, 115, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 139, 162, 164, 171, 172, 176, 195, 196], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 151, 153, 154, 155, 158, 176, 192, 196, 197], "audio_assembl": [5, 7, 8, 149, 169], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 151, 153, 154, 155, 158, 176, 192, 196, 197], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 132, 135, 136, 137, 139, 141, 142, 143, 144, 145, 150, 151, 153, 167, 168, 169, 176, 179, 180, 182, 183, 185, 186, 196], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 95, 97, 98, 100, 101, 103, 108, 112, 115, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 145, 148, 151, 153, 155, 158, 168, 174, 176, 179, 180, 182, 185, 192, 196], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 84, 86, 88, 89, 91, 94, 100, 101, 112, 115, 119, 120, 122, 123, 124, 126, 128, 129, 131, 139, 171, 179, 180, 192, 199], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 137, 139, 142, 143, 144, 145, 151, 155, 163, 176, 179, 180, 186, 192, 193, 194, 199, 201, 202], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 58, 59, 61, 63, 64, 70, 72, 78, 80, 86, 91, 94, 112, 114, 119, 120, 123, 139, 145, 150, 152, 176, 192, 200], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 70, 72, 74, 75, 76, 78, 80, 83, 86, 91, 93, 94, 101, 103, 104, 106, 107, 114, 115, 117, 119, 120, 122, 123, 128, 136, 139, 143, 150, 168, 180, 182, 183, 196, 197], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 58, 59, 61, 63, 64, 70, 72, 78, 80, 101, 143, 180], "5669": [5, 7, 8, 49, 51, 52, 61], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 57, 61, 64, 66, 67, 69, 74, 78, 79, 83, 86, 91, 96, 99, 103, 106, 115, 119, 120, 123, 128, 136, 137, 142, 143, 144, 151, 155, 163, 176, 179, 186, 192, 193, 194, 196, 199, 202], "extend": [5, 7, 8, 10, 22, 34, 39, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 67, 72, 74, 75, 77, 78, 80, 86, 88, 89, 91, 93, 94, 95, 96, 100, 101, 103, 104, 109, 112, 114, 115, 117, 118, 119, 122, 123, 126, 128, 130, 131, 135, 137, 139, 142, 143, 144, 151, 155, 179], "hubertforctctestspec": 5, "paper": [5, 8, 49, 51, 52, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 86, 115, 118, 119, 120, 122, 123, 139, 186, 202], "abstract": [5, 8, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 86, 119, 120, 122, 123, 132, 186, 202], "approach": [5, 8, 49, 51, 72, 73, 80, 86, 98, 100, 101, 103, 115, 117, 119, 120, 123, 126, 128, 129, 156, 199], "challeng": [5, 34, 51, 64, 67, 69, 72, 73, 86], "three": [5, 126, 154], "uniqu": [5, 106, 107, 119], "problem": [5, 34, 58, 67, 71, 119, 123, 126, 139], "multipl": [5, 8, 34, 52, 61, 81, 86, 91, 114, 119, 137, 168, 176, 182], "sound": 5, "each": [5, 7, 14, 18, 22, 29, 34, 38, 39, 44, 49, 51, 52, 63, 65, 66, 71, 74, 76, 77, 81, 83, 86, 89, 90, 91, 94, 95, 96, 98, 100, 101, 103, 104, 106, 109, 112, 114, 115, 117, 119, 124, 126, 128, 129, 136, 137, 139, 142, 151, 162, 168, 175, 185, 197], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 158, 168, 175, 179, 182, 183, 185, 186, 196, 197, 200, 202], "utter": 5, "lexicon": 5, "dure": [5, 22, 34, 39, 64, 69, 100, 101, 109, 114, 126, 169, 176, 192], "phase": [5, 64, 119], "variabl": [5, 65, 76], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 76, 78, 79, 80, 96, 104, 106, 114, 115, 119, 120, 122, 123, 124, 126, 136, 137, 163], "explicit": [5, 114, 120], "segment": [5, 48, 49, 51, 64, 72, 138, 139], "deal": [5, 150, 200], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 27, 28, 32, 36, 40, 42, 45, 58, 59, 60, 63, 64, 70, 71, 72, 73, 78, 79, 80, 101, 102, 103, 119, 123], "util": [5, 62, 100, 103, 114, 115, 129, 152, 160, 161, 164, 166, 169, 170, 174, 178], "offlin": [5, 176], "cluster": [5, 66, 69, 75, 169], "step": [5, 22, 34, 39, 65, 76, 101, 109, 176, 192, 196], "align": 5, "target": [5, 75, 119, 122, 137, 141, 150, 179], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 66, 81, 88, 98, 99, 100, 101, 103, 108, 109, 117, 118, 123, 126, 132, 139, 176, 182, 192, 196], "loss": [5, 58, 64, 69, 101, 123, 192], "ingredi": 5, "our": [5, 58, 61, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 86, 115, 119, 120, 123, 168, 179, 201], "appli": [5, 9, 22, 34, 39, 49, 52, 57, 81, 83, 101, 102, 109, 114, 123, 126, 128, 144, 168, 182], "over": [5, 64, 71, 78, 79, 80, 119, 128, 137, 168, 176, 192], "region": 5, "onli": [5, 8, 49, 51, 52, 54, 56, 57, 67, 75, 80, 91, 94, 104, 106, 114, 115, 119, 120, 122, 123, 135, 139, 152, 162, 163, 182], "forc": 5, "combin": [5, 14, 18, 29, 38, 44, 64, 70, 77, 86, 119, 123, 126, 128, 139], "acoust": 5, "continu": [5, 99, 120, 145, 192], "reli": [5, 54, 56, 80, 86], "primarili": 5, "consist": [5, 58, 63, 70, 94, 112, 118, 139, 153, 185], "unsupervis": [5, 78, 79, 80, 86, 119, 120], "rather": [5, 49], "than": [5, 34, 39, 49, 64, 65, 69, 76, 78, 79, 80, 86, 88, 96, 100, 106, 120, 122, 128, 129, 196], "intrins": [5, 49], "qualiti": [5, 51, 120], "assign": [5, 34, 81, 102, 117], "simpl": [5, 59, 60, 81, 120, 197], "k": [5, 8, 119, 120, 123, 143, 163], "mean": [5, 8, 10, 14, 18, 29, 34, 38, 44, 49, 51, 52, 78, 86, 88, 91, 93, 106, 119, 120, 122, 123, 136, 143, 150, 163, 196, 197, 200], "teacher": 5, "100": [5, 22, 34, 40, 52, 65, 76, 78, 86, 106, 115, 153], "two": [5, 34, 51, 54, 56, 58, 63, 65, 75, 76, 77, 78, 79, 83, 154, 182, 196], "iter": [5, 54, 56, 58, 65, 76, 112, 139, 176, 192], "either": [5, 8, 22, 39, 52, 56, 61, 62, 74, 81, 86, 88, 94, 117, 118, 123, 139, 141, 150, 151, 153, 179, 197], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 78, 79, 80, 81, 90, 91, 92, 93, 94, 95, 104, 112, 114, 119, 120, 137, 139, 141, 162, 195], "improv": [5, 58, 59, 60, 61, 63, 67, 69, 72, 73, 78, 79, 100, 101, 120, 201], "upon": [5, 86], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 26, 28, 31, 33, 34, 35, 37, 39, 41, 43, 46, 49, 51, 52, 58, 59, 60, 61, 66, 67, 69, 70, 71, 72, 73, 80, 86, 101, 119, 120, 123, 151, 193, 196], "art": [5, 22, 34, 49, 51, 52, 58, 59, 60, 61, 66, 67, 69, 70, 71, 72, 73, 80, 86, 101, 119, 120, 123, 151], "wav2vec": [5, 7], "perform": [5, 49, 51, 52, 57, 58, 61, 63, 64, 66, 67, 69, 72, 73, 75, 77, 78, 79, 80, 101, 118, 119, 120, 128], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 64, 114], "000h": 5, "benchmark": [5, 8, 52, 58, 63, 64, 66, 67, 78, 79, 119, 123], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 48, 59, 60, 64, 66, 71, 103, 119, 123, 187], "tune": [5, 8, 48, 59, 60, 64, 66, 71, 103, 119, 123], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 151, 153, 154, 155, 168, 180, 182, 183, 185, 186, 187, 192, 195, 196, 197, 201], "19": [5, 53, 66, 96, 185, 187], "13": [5, 9, 10, 48, 78, 79, 83, 112, 144, 187], "rel": [5, 61, 63, 78, 91, 93, 100, 126, 195], "wer": 5, "reduct": [5, 58, 128], "dev": [5, 51, 58, 67, 75], "test": [5, 22, 34, 39, 49, 51, 52, 54, 56, 59, 60, 75, 77, 89, 90, 94, 95, 100, 101, 109, 112, 120, 128, 129, 133, 139, 182, 183, 185, 186, 187, 196, 202], "evalu": [5, 22, 34, 39, 61, 66, 69, 70, 78, 79, 109, 119, 158, 176], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 101, 119, 122, 126], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 86, 101, 108, 119, 120, 122, 123, 124, 126, 128, 163, 195, 200, 201], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 101, 108, 119, 122, 126], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 106, 107, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 156, 157, 158, 161, 165, 169, 171, 175, 176, 192, 196, 197, 200], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 106, 107, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 142, 143, 148, 150, 151, 152, 153, 154, 155, 176, 192, 196, 200], "audioassembl": [5, 7, 8, 140], "audio_cont": [5, 7, 8, 140], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 143, 153, 154, 155, 196, 197], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 142, 143, 144, 151, 153, 154, 155, 168, 176, 192, 195, 196, 197, 201], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 142, 143, 144, 148, 151, 153, 154, 155, 168, 195, 196, 197, 201], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 141, 143, 150, 152, 153, 154, 155, 175, 176, 192, 196, 197, 200], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 62, 64, 77, 83, 86, 88, 100, 101, 103, 106, 118, 119, 120, 123, 126, 128, 129, 135, 139, 140, 142, 144, 145, 148, 151, 153, 155, 168, 176, 192, 197], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 77, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 142, 144, 145, 151, 153, 154, 155, 168, 185, 195, 196, 197], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 57], "apostl": [5, 7, 8], "OF": [5, 7, 58], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 182, 202], "hi": [5, 7, 8, 103, 115], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 88, 101, 108, 119, 120, 122, 123, 126], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 88, 90, 95, 99, 100, 101, 102, 103, 108, 114, 119, 120, 122, 123, 126, 139, 150, 168, 179, 182, 186, 202], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 88, 101, 108, 119, 120, 122, 123, 126], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 86, 88, 101, 108, 119, 120, 122, 123, 126], "serial": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 88, 101, 108, 119, 120, 122, 123, 126, 169], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 119, 120, 122, 123], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 101, 109, 115, 119, 120, 122, 123, 126, 129, 132, 180, 182], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 119, 120, 122, 123], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 101, 109, 115, 119, 120, 122, 123, 169, 176, 192, 196], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 83, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 179, 180, 196, 201], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 80, 83, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 179, 180, 183, 196, 201, 202], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 179, 180], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 83, 88, 89, 90, 95, 100, 101, 102, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 169, 179, 180, 195, 196, 199, 200], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 86, 88, 89, 90, 94, 95, 100, 101, 103, 104, 109, 112, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 140, 142, 146, 147, 150, 151, 167, 168, 169, 175, 176, 179, 180, 182, 183, 185, 186, 196], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 179, 180], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 94, 95, 100, 101, 103, 104, 109, 112, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 131, 133, 137, 139, 152, 164, 167, 178, 180, 182, 183, 185, 186, 187, 196, 202], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 114, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 179, 193], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 88, 89, 90, 95, 100, 101, 103, 112, 115, 118, 119, 120, 122, 123, 126, 128, 129, 131, 137, 139, 141, 163, 176], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 133], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 83, 86, 103, 122, 128, 195, 196], "recognit": [8, 13, 17, 21, 25, 28, 33, 37, 43, 46, 49, 52, 61, 97, 100, 101, 103], "asr": 8, "system": [8, 86, 119, 120], "680": 8, "000": [8, 40, 86, 120, 139, 153], "hour": [8, 91, 93], "multilingu": [8, 78, 79, 139], "multitask": [8, 69, 120], "collect": [8, 86, 176, 192], "web": [8, 48, 57, 61, 120, 176, 192], "well": [8, 52, 54, 56, 66, 75, 78, 79, 86, 106, 119, 153], "translat": [8, 119, 120, 122, 123, 139], "those": [8, 61, 83, 102, 196, 197], "english": [8, 39, 61, 86, 128, 131, 139, 180], "moment": 8, "greedi": [8, 119, 120, 123, 163], "search": [8, 91, 119, 128, 163], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 69, 70, 71, 75, 78, 79, 80, 86, 103, 119, 120, 122, 123, 152, 163], "setlanguag": 8, "settask": [8, 119, 120, 123, 163], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 69], "via": [8, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 75, 148, 169], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 58, 63, 64, 66, 67, 71, 78, 79, 80, 86, 88, 90, 95, 101, 119, 120], "scale": [8, 49, 51, 52, 58, 64, 66, 70, 71, 78, 79, 119, 120, 123], "weak": [8, 66], "studi": [8, 64, 72, 73, 119, 123], "capabl": [8, 51, 64, 80, 120], "simpli": [8, 57, 69, 197], "amount": [8, 52, 75, 86, 95, 120, 139, 150, 200], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 57, 58, 66, 83, 91, 93, 96, 101, 106, 119, 120, 126, 128, 131, 135, 139, 150, 182, 196, 197, 200], "gener": [8, 22, 34, 49, 51, 58, 62, 64, 66, 69, 70, 74, 80, 83, 86, 100, 101, 103, 106, 115, 119, 120, 123, 126, 128, 129, 144, 145, 163, 176, 192, 195, 196, 197], "standard": [8, 49, 51, 52, 57, 70, 91, 93, 119, 128, 129, 137], "often": [8, 58, 72, 73, 80], "competit": [8, 78, 79, 86], "prior": [8, 49, 64, 69, 70, 106, 126], "fulli": [8, 179], "zero": [8, 66, 77, 103, 120], "shot": [8, 66, 103, 120], "transfer": [8, 52, 64, 66, 75, 78, 79, 119, 120, 123], "without": [8, 59, 60, 66, 69, 78, 79, 86, 120, 139], "ani": [8, 14, 18, 29, 38, 44, 65, 66, 69, 75, 76, 81, 86, 101, 120, 123, 126, 143, 144, 180, 193, 196, 197, 202], "compar": [8, 51, 52, 58, 63, 64, 67, 69, 71, 80, 86, 115, 119, 123, 126, 176, 192], "human": [8, 63, 86], "accuraci": [8, 49, 51, 54, 56, 59, 60, 65, 75, 76, 78, 79, 100, 101, 112, 128, 139, 192], "releas": [8, 57, 58, 61, 63, 72, 73, 78, 79, 119, 123, 169], "infer": [8, 14, 18, 29, 38, 44, 59, 60, 61, 64, 80], "code": [8, 48, 63, 65, 69, 70, 72, 73, 76, 78, 79, 86, 88, 119, 123, 193, 201], "serv": [8, 51, 193], "foundat": 8, "further": [8, 9, 58, 69, 86, 100, 101, 106, 155], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 49, 56, 57, 66, 67, 69, 70, 71, 81, 83, 100, 101, 119, 120, 122, 123, 126, 131, 153, 163, 176, 192], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 49, 56, 57, 66, 67, 69, 71, 83, 100, 101, 119, 120, 122, 123, 126, 131, 153, 163, 176, 192], "check": [8, 66, 101, 114, 126, 127, 128, 129, 150, 155, 179, 196, 201], "descript": [8, 56, 69, 74, 86, 91, 128, 135, 162, 164], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 83, 90, 91, 93, 95, 96, 99, 100, 101, 104, 106, 109, 114, 115, 119, 120, 123, 124, 126, 128, 131, 136, 137, 139, 141, 143, 144, 145, 150, 153, 155, 158, 163, 169, 179, 182, 186, 197], "minoutputlength": [8, 119, 120, 123], "minimum": [8, 34, 39, 65, 76, 83, 86, 88, 98, 100, 101, 104, 114, 115, 119, 120, 123, 128, 129, 136, 137, 163, 182], "sequenc": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 70, 106, 119, 120, 121, 122, 123, 126, 131, 163], "maxoutputlength": [8, 119, 120, 122, 123], "maximum": [8, 22, 34, 39, 48, 65, 76, 83, 86, 98, 100, 101, 104, 106, 108, 114, 115, 119, 120, 122, 123, 126, 128, 136, 137, 163], "dosampl": [8, 119, 120, 123], "sampl": [8, 106, 119, 120, 123, 163], "decod": [8, 63, 70, 119, 120, 122, 123, 163], "temperatur": [8, 106, 119, 120, 123], "next": [8, 72, 73, 86, 91, 93, 119, 120, 123, 163], "probabl": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 86, 106, 119, 120, 123, 128, 163], "topk": [8, 119, 120, 123], "highest": [8, 106, 119, 120, 123, 128, 163], "vocabulari": [8, 65, 76, 119, 120, 123, 126, 163], "keep": [8, 52, 86, 104, 119, 120, 123, 163], "filter": [8, 49, 51, 52, 78, 79, 86, 99, 100, 119, 120, 122, 123, 131, 163, 168, 180], "topp": [8, 119, 120, 123, 163], "most": [8, 61, 64, 70, 71, 86, 101, 106, 119, 120, 122, 123, 163], "add": [8, 77, 91, 93, 114, 119, 120, 123, 126, 137, 163, 196], "top_p": [8, 106], "higher": [8, 77, 86, 106, 118, 119, 120, 123, 163], "kept": [8, 119, 120, 123, 163], "repetitionpenalti": [8, 119, 120, 123], "repetit": [8, 119, 120, 123, 163], "penalti": [8, 119, 120, 123, 163], "norepeatngrams": [8, 119, 120, 123], "ngram": [8, 62, 96, 119, 120, 123, 163], "occur": [8, 119, 120, 123, 163], "onc": [8, 119, 120, 123, 163], "beamsiz": [8, 119], "beam": [8, 119, 163], "mr": 8, "middl": [8, 135, 139], "getlanguag": 8, "langaug": [8, 179], "getismultilingu": 8, "do": [8, 9, 75, 86, 99, 131, 137, 150, 192, 196, 200], "xx": [8, 44, 78, 79, 88, 122], "chunk2doc": [9, 141], "convert": [9, 53, 57, 62, 71, 74, 77, 91, 93, 96, 99, 104, 106, 119, 123, 136, 139, 141, 144, 145, 154, 176, 192, 199], "back": [9, 106, 119], "try": [9, 126, 182], "re": [9, 66, 196], "analysi": [9, 22, 34, 39, 67, 69, 80, 116, 117, 123, 160, 197], "doc2chunk": [9, 141], "pretrainedpipelin": [9, 144, 150, 168, 179, 195, 200, 201], "locat": [9, 81, 114, 169, 179, 196], "extract": [9, 10, 11, 15, 19, 23, 26, 31, 35, 41, 49, 51, 52, 54, 62, 77, 81, 82, 83, 85, 86, 90, 91, 93, 95, 99, 100, 101, 102, 114, 115, 117, 124, 126, 129, 133, 143, 144, 145, 150, 154, 169, 176, 179, 192], "york": [9, 103, 144], "jersei": [9, 144], "aren": [9, 144], "t": [9, 14, 18, 29, 38, 44, 64, 72, 89, 104, 115, 117, 137, 144], "far": [9, 106, 120, 144], "apart": [9, 54, 56, 144], "actual": [9, 96, 144, 155], "id": [9, 34, 57, 78, 81, 106, 107, 119, 120, 122, 123, 126, 141, 142, 144, 151, 155, 176, 182], "defin": [9, 10, 99, 100, 101, 126, 131, 135, 144, 168, 176, 179, 192, 196, 200], "amongst": [9, 144], "thing": [9, 126, 144], "explain_document_dl": [9, 144, 150, 168, 179], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 144], "selectexpr": [9, 10, 22, 40, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 89, 90, 91, 93, 94, 95, 96, 99, 102, 103, 104, 112, 114, 115, 117, 122, 130, 131, 133, 136, 137, 141, 143, 144, 154, 168, 182, 183, 185, 195, 196, 201], "explod": [9, 10, 22, 40, 48, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 90, 93, 94, 95, 96, 99, 102, 103, 112, 114, 115, 122, 143, 144, 154, 168, 182, 185, 195, 196, 201], "col": [9, 54, 56, 81, 90, 99, 102, 144, 168, 195], "loc": [9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 83, 99, 100, 101, 144, 150, 168, 179, 182], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 112, 118, 119, 122, 126, 131, 133, 136, 139, 142, 144, 150, 151, 153, 154, 155, 169, 179, 182, 183, 185, 186, 187, 196, 200, 201], "22": [9, 144, 182, 195], "pattern": [10, 57, 81, 91, 94, 104, 128, 129, 136, 137, 139], "part": [10, 61, 86, 89, 111, 112, 130, 139, 141, 185, 202], "tag": [10, 22, 34, 39, 57, 61, 98, 99, 100, 101, 102, 111, 112, 139, 168, 176, 182, 185, 186, 202], "order": [10, 69, 80, 81, 86, 91, 119, 128, 129, 150, 155, 168, 196, 197, 200, 202], "meaning": [10, 130], "phrase": [10, 61, 65, 76, 90, 95], "onto": [10, 168, 197], "pars": [10, 54, 55, 56, 61, 81, 89, 91, 93, 126, 128, 129, 150, 153, 179, 182, 185], "regular": [10, 94, 100, 114], "express": [10, 39, 48, 91, 94, 114], "wrap": [10, 106, 107, 124, 156, 157, 165, 171, 175], "angl": 10, "bracket": 10, "easili": [10, 67, 112, 143, 192], "distinguish": 10, "itself": [10, 86, 123, 139, 152, 197], "form": [10, 22, 34, 39, 77, 81, 89, 90, 91, 94, 95, 115, 117, 128, 129, 139, 143, 176, 182, 183, 196], "peter": [10, 70, 89, 104, 112, 115, 128, 130, 182], "piper": [10, 89, 112, 130], "employe": [10, 89, 112, 130], "pick": [10, 89, 112, 130], "peck": [10, 89, 112, 130], "pickl": [10, 89, 112, 130], "pepper": [10, 89, 112, 130], "nnp": [10, 112, 150, 168, 182, 183, 185, 186, 195, 200, 201, 202], "nn": [10, 112, 182, 183, 185, 186, 202], "vbp": [10, 112, 150, 183, 195, 200, 201], "vbg": [10, 112], "IN": [10, 112, 150, 168, 183, 185, 186, 195, 200, 201], "jj": [10, 112, 150, 168, 182, 185, 195, 200, 201, 202], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 126, 139], "group": [10, 137], "so": [10, 14, 18, 22, 29, 38, 39, 44, 86, 99, 106, 115, 152, 176, 192], "here": [10, 89, 168, 196], "specif": [10, 40, 54, 56, 57, 59, 60, 64, 75, 83, 86, 101, 119, 120, 132, 150, 152, 176, 200], "noun": [10, 183], "success": [10, 61, 71, 120], "grammar": 10, "parser": [10, 54, 56, 83], "perceptronmodel": [10, 54, 56, 83, 100, 112, 182], "Of": [10, 58, 139], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 103, 104, 112, 114, 115, 117, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 141, 142, 143, 151, 152, 153, 154, 155, 176, 182, 192, 196], "sentencedetector": [10, 22, 40, 48, 54, 56, 60, 62, 73, 75, 79, 83, 86, 89, 94, 96, 100, 101, 102, 103, 112, 114, 115, 131, 133, 152, 155, 182, 196, 197], "postag": 10, "11": [10, 53, 78, 79, 91, 93, 96, 112, 187], "21": [10, 91, 93, 102, 112, 187], "35": [10, 112, 187], "39": [10, 102, 112, 185, 187], "52": [10, 102, 112, 185], "58": [10, 51, 112], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 86, 143, 196], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 88, 101, 103, 128, 129], "albert": [11, 12, 13, 58], "span": [11, 15, 19, 23, 26, 31, 35, 41, 119, 123], "question": [11, 15, 19, 23, 26, 31, 35, 40, 41, 54, 56, 59, 60, 67, 72, 73, 80, 103, 112, 119, 120, 123, 150], "answer": [11, 15, 19, 23, 26, 31, 35, 40, 41, 54, 56, 59, 60, 67, 80, 103, 119, 120, 123, 150], "squad": [11, 15, 19, 23, 26, 31, 35, 41, 58, 59, 60, 63, 71, 72, 73, 119], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 51, 120], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 58, 59, 60, 63, 67, 80], "comput": [11, 15, 19, 23, 26, 31, 35, 41, 49, 51, 52, 58, 63, 64, 69, 75, 120, 122, 129, 139, 150, 200], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 29, 31, 32, 35, 36, 38, 41, 42, 44, 45, 106], "spanclassifi": [11, 15, 19, 23, 26, 31, 35, 41], "document_quest": [11, 15, 19, 23, 26, 31, 35, 40, 41], "document_context": [11, 15, 19, 23, 26, 31, 35, 41], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 67, 75, 100, 101, 104, 114, 115, 119, 136, 137, 152, 162], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 64, 67, 128, 129], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 90, 95, 128, 131], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 90, 96, 99, 119, 120, 122, 123, 128, 131, 150], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 81, 88, 90, 95, 126, 128, 131, 137, 141, 182, 183, 196], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 80, 88, 101, 119, 120, 122, 123, 126], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 76, 78, 79, 80], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 63, 64, 69, 72, 73, 78, 79, 80, 176, 192], "multidocumentassembl": [11, 15, 19, 23, 26, 31, 35, 40, 41, 151], "context": [11, 15, 19, 23, 26, 31, 35, 41, 59, 60, 65, 67, 76, 80, 106, 118, 126, 137], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 62, 64, 70, 72, 78, 90, 95, 100, 128, 131, 143, 155], "what": [11, 15, 19, 23, 26, 31, 35, 39, 41, 49, 54, 56, 86, 88, 103, 106, 122, 126, 135, 183, 193], "my": [11, 13, 15, 17, 19, 22, 23, 25, 26, 28, 31, 33, 35, 37, 39, 41, 43, 46, 57, 94, 96, 103, 114, 120, 131, 133, 136, 196], "clara": [11, 15, 19, 23, 26, 31, 35, 41, 103], "live": [11, 13, 15, 17, 19, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 103, 120, 176, 192], "berkelei": [11, 15, 19, 23, 26, 31, 35, 41], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 27, 32, 36, 42, 45, 119, 123], "pool": [12, 16, 20, 24, 27, 32, 36, 42, 45, 62, 67, 74], "multi": [12, 16, 20, 22, 24, 27, 32, 34, 36, 39, 42, 45, 58, 75, 78, 79, 86, 88, 122], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 88], "instead": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 60, 86, 88, 91, 93, 123, 143, 144, 150, 200], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 66, 78, 79, 88, 91, 96, 98, 99, 100, 101, 106, 139, 150, 168, 179, 182], "inputcol": [12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 74, 88, 140, 142, 143, 144, 145, 148, 151], "averag": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 62, 66, 69, 74, 78, 79, 88, 101, 112, 124], "calcul": [12, 14, 16, 18, 20, 22, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 77, 96, 101, 109, 117, 124], "softmax": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 63, 65, 76, 126], "sigmoid": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45], "love": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 42, 44, 45, 60, 73, 79, 115, 118, 196], "movi": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 118, 196], "child": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "pretti": [12, 14, 16, 18, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 86], "bore": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "neg": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 117, 118, 176, 192], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 42, 43, 44, 45, 46, 49, 51, 52, 103], "setcoalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 88], "limit": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 51, 52, 58, 61, 70, 71, 77, 80, 86, 123, 128], "almost": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "512": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 66, 67, 71, 122], "help": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 54, 56, 58, 106, 107, 122, 137, 176, 192, 197, 201], "feed": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "entir": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 49, 122], "bool": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 57, 60, 62, 75, 81, 83, 88, 90, 91, 95, 96, 99, 100, 101, 104, 109, 114, 115, 119, 120, 123, 124, 126, 128, 131, 136, 137, 139, 141, 143, 144, 145, 150, 153, 158, 163, 169, 176, 179, 180, 182], "one": [12, 14, 16, 18, 20, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 48, 49, 51, 52, 54, 56, 57, 59, 60, 71, 74, 78, 79, 80, 86, 88, 91, 94, 99, 106, 115, 128, 133, 155, 192, 196], "albertfortokenclassif": [13, 58], "ner": [13, 17, 21, 25, 28, 33, 37, 43, 46, 78, 79, 83, 84, 133, 150, 168, 169, 176, 179, 192], "token_classifi": [13, 21, 33, 37, 43, 46], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 58], "level": [13, 22, 34, 39, 59, 60, 70, 72, 73, 75, 77, 79, 81, 100, 101, 109, 126, 169, 182], "tokenclassifi": [13, 17, 21, 25, 28, 33, 37, 43, 46], "john": [13, 17, 25, 28, 33, 37, 43, 46, 48, 60, 73, 79, 81, 83, 102, 104, 115, 145, 187], "lenon": [13, 17, 25, 28, 33, 37, 43, 46], "born": [13, 17, 25, 28, 33, 37, 43, 46, 120], "london": [13, 17, 25, 28, 33, 37, 43, 46], "pari": [13, 17, 25, 28, 33, 37, 43, 46, 103], "sarah": [13, 17, 25, 28, 33, 37, 43, 46], "o": [13, 17, 21, 25, 28, 33, 37, 43, 46, 99, 100, 101, 102, 150, 168, 179, 182, 186, 202], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 29, 38, 44], "nli": [14, 18, 29, 38, 44], "natur": [14, 18, 29, 38, 39, 44, 52, 58, 59, 60, 61, 63, 64, 65, 71, 75, 76, 80, 88, 119, 120, 123, 141, 151, 155], "equival": [14, 18, 29, 38, 44, 150, 169, 200], "bartforsequenceclassif": 14, "don": [14, 18, 29, 38, 44, 64, 72, 104], "hardcod": [14, 18, 29, 38, 44], "potenti": [14, 18, 29, 38, 44, 51, 126], "thei": [14, 18, 29, 38, 40, 44, 54, 56, 101, 104, 106, 120, 124, 152, 171, 183, 196], "chosen": [14, 18, 29, 38, 44, 54, 56, 101, 106], "runtim": [14, 18, 29, 38, 44], "usual": [14, 18, 29, 38, 44, 52, 155, 180], "slower": [14, 18, 29, 38, 44], "much": [14, 18, 22, 29, 38, 40, 44, 58, 66, 72, 73, 104, 139, 169, 196], "flexibl": [14, 18, 29, 38, 44, 51], "loop": [14, 18, 29, 38, 44], "through": [14, 18, 29, 38, 44, 58, 71, 83, 86, 145, 197], "longer": [14, 18, 29, 38, 44, 58, 65, 70, 76, 88, 122, 201], "pass": [14, 18, 29, 38, 44, 106], "pose": [14, 18, 29, 38, 44], "premis": [14, 18, 29, 38, 44], "hypothesi": [14, 18, 29, 38, 44], "pair": [14, 18, 29, 38, 44, 66, 83, 176], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 37, 38, 44, 65, 76], "bart": [14, 119], "bertforquestionansw": [15, 40], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_base_cased_zero_shot_classifier_xnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 61], "camembert_base_qa_fquad": 19, "fr": [19, 20, 61, 88], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 81], "ai": [20, 106, 107, 119, 176, 192], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 61, 88, 122], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 196], "classifierdlapproach": [22, 34, 196], "univers": [22, 54, 56, 75, 122], "encod": [22, 57, 59, 60, 63, 69, 70, 75, 103, 119, 122, 176], "deep": [22, 59, 60, 67, 86, 100, 115, 126], "dnn": 22, "insid": [22, 34, 99, 112, 137, 182], "instanti": [22, 34, 39, 54, 56, 65, 76, 77, 81, 89, 90, 94, 95, 100, 101, 104, 112, 115, 117, 118, 126, 128, 129, 133, 135, 139, 182, 183], "classifierdlmodel": [22, 34, 196], "monitor": [22, 34, 39, 101, 106, 107, 176, 192], "metric": [22, 34, 39, 101, 129, 176], "done": [22, 34, 39, 72, 73, 100, 101, 197], "settestdataset": [22, 34, 39, 101, 109], "method": [22, 34, 39, 58, 64, 65, 69, 71, 76, 80, 86, 101, 124, 180, 191], "expect": [22, 34, 39, 66, 80, 101, 137, 168], "path": [22, 34, 39, 54, 56, 65, 76, 77, 81, 83, 89, 90, 94, 95, 100, 101, 103, 104, 109, 115, 117, 120, 126, 128, 129, 132, 137, 148, 150, 167, 176, 179, 182, 183, 185, 186, 192], "parquet": [22, 34, 39, 101, 109, 140], "datafram": [22, 34, 39, 52, 65, 76, 77, 101, 109, 112, 139, 150, 164, 168, 175, 176, 179, 182, 183, 185, 186, 192, 196, 200, 202], "ha": [22, 34, 39, 40, 49, 51, 52, 57, 58, 63, 64, 67, 72, 73, 77, 86, 89, 94, 101, 109, 115, 117, 119, 123, 128, 129, 139, 140, 141, 148, 150, 176, 180, 185, 192, 196, 197], "same": [22, 34, 39, 48, 58, 71, 72, 77, 78, 81, 83, 101, 106, 109, 123, 152, 176, 197], "follow": [22, 34, 39, 48, 53, 57, 67, 70, 77, 86, 91, 93, 94, 99, 101, 104, 114, 153, 154, 192, 194, 197], "universalsentenceencod": [22, 34, 39, 75, 176, 192, 196], "preprocessingpipelin": [22, 34, 39, 101, 109], "randomsplit": [22, 34, 39, 101, 109], "write": [22, 34, 39, 77, 101, 109, 128, 129, 197], "overwrit": [22, 34, 39, 101, 102, 109, 176], "test_data": [22, 34, 39, 101, 109], "setlabelcolumn": [22, 34, 39, 98, 100, 101, 108, 132, 176, 192, 196], "usag": [22, 34, 39, 48, 54, 56, 57, 58, 59, 60, 61, 62, 64, 67, 72, 75, 77, 78, 80, 81, 86, 88, 89, 91, 93, 94, 95, 100, 101, 104, 112, 114, 115, 117, 118, 119, 122, 123, 126, 128, 130, 131, 135, 137, 139], "64": [22, 34, 39, 58, 101, 108, 196], "dropout": [22, 39, 101], "coeffici": [22, 39, 100, 101], "enableoutputlog": [22, 34, 39, 101], "stdout": [22, 34, 39, 101, 109], "addit": [22, 34, 39, 54, 56, 59, 60, 81, 100, 101, 106, 109, 114, 120, 137, 176, 195, 196], "evaluationlogextend": [22, 34, 39, 101], "valid": [22, 34, 39, 91, 101, 109, 115, 126, 192], "displai": [22, 34, 39, 109, 120, 176, 192], "time": [22, 34, 39, 58, 65, 76, 78, 79, 86, 91, 109, 118, 126, 139, 169, 195, 196, 200, 201], "labelcolumn": [22, 34, 39, 100, 101], "lr": [22, 34, 39, 101, 139], "rate": [22, 34, 39, 53, 65, 72, 73, 76, 77, 101, 108, 126], "005": [22, 39, 101, 108], "maxepoch": [22, 34, 39, 100, 101], "epoch": [22, 34, 39, 98, 100, 101, 108, 109, 115, 126, 176], "30": [22, 39, 86, 91, 93, 99, 108, 122, 150, 168, 179, 187, 195], "outputlogspath": [22, 34, 39, 101, 115], "randomse": [22, 34, 39, 100, 101], "random": [22, 34, 39, 65, 76, 98, 100, 101, 106, 108, 124, 143], "seed": [22, 34, 39, 65, 76, 98, 100, 101, 108], "shuffl": [22, 34, 98, 108, 119], "testdataset": [22, 34, 39, 101, 176, 192], "statist": [22, 34, 39, 77, 86, 101, 109], "validationsplit": [22, 34, 39, 101, 115], "choos": [22, 34, 39, 62, 74, 101, 115, 128], "proport": [22, 34, 39, 101, 109, 115], "against": [22, 34, 39, 81, 86, 90, 95, 101, 109, 115, 152], "between": [22, 34, 39, 51, 54, 56, 71, 72, 73, 75, 78, 79, 80, 83, 101, 106, 109, 114, 115, 126], "off": [22, 34, 39, 75, 78, 79, 101, 109, 115], "verbos": [22, 34, 39, 100, 101, 109], "multiclassifierdlapproach": [22, 34, 176, 192], "sentimentdlapproach": [22, 34, 39], "accept": [22, 34, 39, 106], "singl": [22, 34, 39, 66, 69, 77, 83, 86, 119, 133, 135, 137, 182], "item": [22, 39, 77, 176, 182, 192], "doubl": [22, 39, 140, 153], "sentenceembed": [22, 34, 39, 74, 77, 143], "In": [22, 34, 39, 49, 52, 61, 63, 64, 70, 71, 77, 80, 81, 86, 88, 89, 90, 94, 95, 114, 115, 117, 119, 120, 123, 128, 129, 139, 176, 185, 192, 196, 197, 201, 202], "csv": [22, 39, 81, 109, 153, 196], "best": [22, 39, 58, 61, 66, 69, 72, 73, 86, 88, 101, 106, 119, 196], "wach": [22, 196], "ever": [22, 39, 57, 196], "opinion": [22, 39, 196], "win": [22, 39, 196], "award": [22, 39, 196], "terribl": [22, 39, 196], "act": [22, 39, 196], "bad": [22, 39, 117, 176, 192, 196], "realli": [22, 39, 118, 196], "trane": 22, "smallcorpu": [22, 39, 196], "read": [22, 39, 49, 51, 52, 54, 56, 65, 76, 86, 89, 90, 91, 93, 94, 95, 100, 103, 104, 109, 115, 117, 120, 126, 128, 129, 137, 139, 140, 142, 148, 151, 164, 167, 169, 170, 176, 180, 182, 183, 185, 186, 192, 196, 202], "header": [22, 39, 40, 153, 196], "src": [22, 39, 49, 51, 52, 54, 56, 77, 89, 90, 94, 95, 100, 101, 112, 128, 129, 133, 139, 182, 183, 185, 186, 187, 196, 202], "useembed": [22, 34, 39, 75, 196], "docclassifi": [22, 34, 39, 196], "setbatchs": [22, 34, 39, 67, 101, 108, 126, 176, 192, 196], "setmaxepoch": [22, 34, 39, 98, 100, 101, 108, 176, 192, 196], "20": [22, 40, 49, 80, 99, 119, 120, 150, 153, 168, 179, 196], "setlr": [22, 34, 39, 101, 108, 176, 192, 196], "5e": [22, 39, 196], "setdropout": [22, 39, 101, 196], "pipelinemodel": [22, 34, 39, 54, 56, 57, 65, 76, 100, 101, 118, 126, 128, 129, 139, 150, 152, 176, 180, 196, 199], "v": [22, 34, 39, 53, 63, 71, 77, 86, 88, 90, 101, 108, 109, 129, 168], "classifierdl_use_trec6": [22, 196], "trec": 22, "multiclassifierdlmodel": [22, 34], "sentimentdlmodel": [22, 34, 39], "sarcasmdl": [22, 196], "classifierdl_use_sarcasm": [22, 196], "sarcasm": [22, 196], "m": [22, 91, 93, 187, 196], "could": [22, 64, 86, 94, 109, 126, 195, 196, 197], "put": [22, 168, 196], "word": [22, 51, 52, 54, 56, 58, 62, 63, 65, 67, 72, 74, 75, 76, 77, 80, 81, 83, 86, 89, 96, 99, 102, 103, 104, 112, 117, 119, 120, 122, 123, 126, 128, 129, 130, 131, 135, 137, 138, 139, 150, 168, 179, 185, 186, 195, 196], "wake": [22, 196], "am": [22, 91, 93, 120, 133, 196], "mondai": [22, 196], "would": [22, 48, 62, 74, 91, 115, 169, 196], "arrays_zip": [22, 54, 56, 86, 196], "out": [22, 66, 86, 89, 104, 119, 120, 122, 123, 130, 131, 196], "normal": [22, 49, 51, 52, 57, 84, 90, 115, 118, 131, 143, 152, 155, 169, 196, 197], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 63], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": 24, "v2": [24, 25, 59, 60, 63], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "distilbertforquestionansw": 26, "distilbert": [26, 27, 29, 64], "distilbert_base_cased_qa_squad2": 26, "distilbertforsequenceclassif": [27, 29], "distilbert_base_sequence_classifier_imdb": 27, "distilbertfortokenclassif": 28, "distilbert_base_token_classifier_conll03": 28, "distilbertforzeroshotclassif": 29, "distilbert_base_zero_shot_classifier_uncased_mnli": 29, "albert_for_sequence_classif": [30, 84], "albert_for_token_classif": [30, 84], "bart_for_zero_shot_classif": [30, 84], "bert_for_sequence_classif": [30, 84], "bert_for_token_classif": [30, 84], "bert_for_zero_shot_classif": [30, 84], "camembert_for_sequence_classif": [30, 84], "camembert_for_token_classif": [30, 84], "deberta_for_sequence_classif": [30, 84], "deberta_for_token_classif": [30, 84], "distil_bert_for_sequence_classif": [30, 84], "distil_bert_for_token_classif": [30, 84], "distil_bert_for_zero_shot_classif": [30, 84], "longformer_for_sequence_classif": [30, 84], "longformer_for_token_classif": [30, 84], "multi_classifier_dl": [30, 84], "roberta_for_sequence_classif": [30, 84], "roberta_for_token_classif": [30, 84], "roberta_for_zero_shot_classif": [30, 84], "sentiment_dl": [30, 84], "xlm_roberta_for_sequence_classif": [30, 84], "xlm_roberta_for_token_classif": [30, 84], "xlm_roberta_for_zero_shot_classif": [30, 84], "xlnet_for_sequence_classif": [30, 84], "xlnet_for_token_classif": [30, 84], "longformerforquestionansw": 31, "longform": [31, 32, 33, 70], "longformer_base_base_qa_squad2": 31, "longformerforsequenceclassif": 32, "longformer_base_sequence_classifier_imdb": 32, "4096": [32, 58, 70], "longformerfortokenclassif": 33, "xlnet_base_token_classifier_conll03": [33, 46], "longformer_base_token_classifier_conll03": 33, "multiclassifierdl": 34, "bidirect": [34, 59, 60, 67, 80, 119], "gru": 34, "convolut": [34, 49, 52], "machin": [34, 49, 65, 76, 86, 100, 119, 120, 122, 123, 176, 194], "strongli": 34, "relat": [34, 54, 56, 83, 201], "variant": [34, 53, 70, 75], "mai": [34, 106, 141, 195, 196, 197, 200, 201], "instanc": [34, 103, 108, 109, 158, 163, 169, 170, 174], "multiclass": 34, "categor": [34, 180], "precis": [34, 54, 56], "constraint": 34, "mani": [34, 63, 72, 73, 86, 106, 119, 120, 122, 123, 139], "formal": 34, "find": [34, 54, 56, 72, 73, 75, 81, 83, 89, 91, 119, 120], "binari": [34, 148, 164, 176], "bertsentenceembed": [34, 39, 60, 73, 79], "multiclassifi": [34, 176, 192], "001": [34, 53, 100, 101], "10": [34, 48, 54, 86, 91, 93, 102, 106, 124, 128, 176, 187, 195], "44": [34, 65, 76, 112], "shuffleperepoch": 34, "threshold": [34, 39, 65, 76, 86, 88, 100, 103, 126, 139], "ed58abb40640f983": 34, "pn": 34, "newsyou": 34, "toxic": 34, "a1237f726b5f5d89": 34, "dude": 34, "place": [34, 52], "obscen": 34, "insult": 34, "24b0d6c8733c2abe": 34, "thank": [34, 80, 86, 187], "8c4478fb239bcfc0": 34, "gee": 34, "minut": 34, "traindataset": [34, 176, 192], "printschema": [34, 140, 142, 148, 151], "root": [34, 48, 54, 56, 83, 140, 142, 148, 151, 183], "setcleanupmod": [34, 142, 151], "shrink": [34, 142, 151], "1e": [34, 176, 192], "setthreshold": [34, 39, 86, 88, 176, 192], "setvalidationsplit": [34, 109, 115], "setverbos": [34, 100, 101, 109], "multiclassifierdl_use_tox": 34, "comment": [34, 86], "jigsaw": 34, "good": [34, 61, 64, 75, 118], "stuff": 34, "wtf": 34, "kind": [34, 86, 91, 93], "crap": 34, "robertaforquestionansw": [35, 103], "roberta": [35, 36, 37, 38, 41, 42, 43, 61, 63, 70, 71, 72, 73, 78, 79, 103, 119], "roberta_base_qa_squad2": [35, 103], "robertaforsequenceclassif": [36, 38], "roberta_base_sequence_classifier_imdb": 36, "robertafortokenclassif": 37, "roberta_base_token_classifier_conll03": 37, "robertaforzeroshotclassif": 38, "roberta_base_zero_shot_classifier_nli": 38, "sentimentdl": 39, "affect": [39, 137], "subject": [39, 54, 56], "view": 39, "common": [39, 81, 133, 141, 169, 199], "product": 39, "review": [39, 172], "tweet": 39, "interpret": [39, 81], "posit": [39, 63, 64, 71, 78, 79, 80, 86, 99, 106, 117, 118, 136, 139, 155, 176, 192], "final": [39, 70, 72, 73, 78, 79, 88, 101, 126, 196], "otheriws": [39, 88], "neutral": [39, 88], "thresholdlabel": [39, 88], "score": [39, 59, 60, 78, 79, 86, 88, 100, 101, 103, 117, 118, 120], "less": [39, 64, 88, 91, 96, 100, 122, 128], "watch": [39, 118], "32": [39, 58, 67, 187, 195, 201], "setthresholdlabel": [39, 88], "p": [39, 57, 65, 76, 88, 101, 109, 135], "sentimentdl_use_imdb": 39, "imdb": 39, "sentimentdl_use_twitt": 39, "wow": 39, "video": [39, 86], "awesom": 39, "bruh": 39, "damn": 39, "wast": [39, 118], "tapasforquestionansw": 40, "implement": [40, 65, 76, 78, 103, 106, 107, 115, 124, 126, 146, 147, 156, 157, 165, 171, 175], "tapa": 40, "design": [40, 49, 51, 53, 59, 60, 72, 73, 90, 119, 122, 176, 192], "about": [40, 54, 56, 72, 73, 77, 86, 103, 106, 114, 129, 150, 152, 195, 197, 200, 201], "tabular": [40, 153], "tabl": [40, 124, 153], "tri": 40, "share": [40, 86, 197], "its": [40, 52, 63, 64, 70, 80, 86, 112, 117, 119, 122, 131, 176, 185], "table_qa_tapas_base_finetuned_wtq": 40, "document_assembl": [40, 103, 149, 153, 169], "table_json": 40, "document_t": [40, 153], "sentence_detector": [40, 84, 103, 113], "table_assembl": [40, 149, 169], "tableassembl": [40, 153], "stage": [40, 150, 152, 176, 192, 196, 197, 200], "json_data": 40, "monei": [40, 153], "ag": [40, 66, 153], "donald": [40, 153], "trump": [40, 153], "75": [40, 86, 153], "elon": [40, 153], "musk": [40, 153], "55": [40, 102, 153, 187], "AS": [40, 48, 103], "who": [40, 135, 196], "earn": 40, "count": [40, 106, 126], "old": [40, 48, 185], "xlmrobertaforquestionansw": 41, "xlm": [41, 42, 43, 78, 79], "xlm_roberta_base_qa_squad2": 41, "xlmrobertaforsequenceclassif": [42, 44], "xlm_roberta_base_sequence_classifier_imdb": 42, "xlmrobertafortokenclassif": 43, "xlm_roberta_base_token_classifier_conll03": 43, "xlmrobertaforzeroshotclassif": 44, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 44, "xlmroberta": 44, "xlnetforsequenceclassif": 45, "xlnet": [45, 46, 71, 80], "xlnet_base_sequence_classifier_imdb": 45, "xlnetfortokenclassif": 46, "spanbert_coref": 47, "spanbertcorefmodel": 48, "corefer": 48, "resolut": [48, 51], "spanbert": 48, "identifi": [48, 77, 86, 90, 94, 106, 107, 136, 137, 176, 197], "given": [48, 49, 51, 52, 69, 81, 86, 103, 119, 120, 123, 126, 128, 129, 131, 162, 175, 176], "told": [48, 93], "mari": [48, 60, 73, 79, 115], "he": [48, 63, 93, 135, 187], "borrow": 48, "book": [48, 57, 120, 126, 183], "her": [48, 103], "link": [48, 179], "ontonot": 48, "corefresolut": 48, "spanbert_base_coref": 48, "maxsegmentlength": 48, "textgenr": 48, "genr": 48, "One": [48, 69, 86, 135, 154], "bc": 48, "broadcast": 48, "convers": 48, "bn": 48, "nw": 48, "wire": 48, "pt": 48, "pivot": 48, "testament": 48, "tc": 48, "telephon": 48, "wb": 48, "setmaxsegmentlength": 48, "settextgenr": 48, "convnextforimageclassif": 49, "convnet": 49, "convnext": 49, "2020": [49, 86, 91, 93, 115], "zhuang": 49, "liu": [49, 51, 63, 72, 73], "hanzi": 49, "mao": 49, "chao": 49, "yuan": 49, "wu": 49, "christoph": 49, "feichtenhof": 49, "trevor": 49, "darrel": 49, "sain": 49, "xie": 49, "pure": [49, 52, 122], "inspir": [49, 118, 128, 129, 172], "vision": [49, 51, 52], "claim": 49, "outperform": [49, 66, 70, 71, 75, 78, 79, 80, 86, 120], "huggingfac": [49, 51, 52, 61], "convnextforimageclassificationtestspec": 49, "roar": 49, "visual": [49, 51, 176], "began": 49, "introduct": 49, "vit": [49, 52], "quickli": [49, 106], "supersed": 49, "vanilla": 49, "hand": [49, 135], "face": 49, "difficulti": 49, "detect": [49, 51, 75, 87, 88, 106, 107, 113, 114, 115], "semant": [49, 51, 67, 69, 75, 139], "hierarch": [49, 51, 65, 76], "swin": [49, 51], "reintroduc": 49, "sever": [49, 202], "practic": [49, 61, 119, 123], "viabl": 49, "backbon": [49, 51, 80], "demonstr": [49, 51, 64, 70, 86, 120, 122], "remark": 49, "wide": [49, 57, 59, 60, 63, 64, 66, 78, 79, 119], "varieti": [49, 70, 71, 78, 79, 201], "howev": [49, 58, 71, 74, 80, 86, 104, 180, 195], "effect": [49, 51, 52, 70, 106, 114, 119, 123], "hybrid": 49, "still": [49, 120, 176], "credit": 49, "superior": 49, "inher": 49, "induct": [49, 64], "bias": [49, 64], "reexamin": 49, "space": [49, 65, 76, 77, 96, 155], "achiev": [49, 63, 66, 69, 70, 71, 72, 73, 78, 79, 80, 101, 119, 120, 122, 123, 150, 200], "gradual": 49, "modern": 49, "resnet": 49, "toward": [49, 120], "discov": [49, 193], "compon": [49, 52, 108, 109, 140, 148, 158, 163, 174, 200], "contribut": 49, "along": [49, 83], "wai": [49, 54, 56, 81, 83, 152, 179], "outcom": 49, "explor": [49, 119, 123], "famili": [49, 57, 66], "dub": [49, 78, 79], "construct": [49, 65, 76, 137, 179, 199], "compet": 49, "favor": 49, "term": [49, 86], "scalabl": 49, "87": [49, 51], "imagenet": [49, 51, 52], "coco": [49, 51], "ade20k": [49, 51], "while": [49, 51, 52, 58, 64, 69, 77, 86, 106, 109, 120, 176, 192, 197], "maintain": 49, "simplic": [49, 119], "effici": [49, 51, 63, 65, 75, 76, 122, 195], "dores": [49, 51, 52], "resiz": [49, 51, 52], "certain": [49, 51, 52, 126], "donorm": [49, 51, 52], "deviat": [49, 51, 52], "featureextractortyp": [49, 51, 52], "architectur": [49, 51, 52, 58, 59, 60, 63, 72, 88, 101, 115, 119, 123], "featur": [49, 51, 52, 54, 65, 76, 86, 96, 100, 109, 176, 199], "imagemean": [49, 51, 52], "imagestd": [49, 51, 52], "resampl": [49, 51, 52], "pil": [49, 51, 52], "nearest": [49, 51, 52, 124], "bilinear": [49, 51, 52], "bicub": [49, 51, 52], "do_res": [49, 51, 52], "tupl": [49, 51, 52, 175], "dorescal": [49, 51], "rescal": [49, 51], "rescalefactor": [49, 51], "factor": [49, 51, 78, 79, 80, 119, 123, 126], "croppct": 49, "percentag": [49, 77, 126, 139], "crop": 49, "imagedf": [49, 51, 52], "dropinvalid": [49, 51, 52], "imageassembl": [49, 51, 52, 148], "image_assembl": [49, 51, 52, 149, 169], "imageclassifi": [49, 51, 52], "pipelinedf": [49, 51, 52], "revers": [49, 51, 52], "split": [49, 51, 52, 114, 115, 122, 133, 135, 136, 139], "image_nam": [49, 51, 52], "bluetick": [49, 51, 52], "jpg": [49, 51, 52], "chihuahua": [49, 51, 52], "egyptian_cat": [49, 51, 52], "jpeg": [49, 51, 52], "tabbi": [49, 51], "cat": [49, 51, 52], "hen": [49, 51, 52], "hippopotamu": [49, 51, 52], "hippo": [49, 51, 52], "river": [49, 51, 52], "hors": [49, 51, 52], "amphibiu": [49, 51, 52], "junco": [49, 51, 52], "snowbird": [49, 51, 52], "ostrich": [49, 51, 52], "struthio": [49, 51, 52], "camelu": [49, 51, 52], "ox": [49, 51, 52], "palac": [49, 51, 52], "tractor": [49, 51, 52], "thresher": 49, "thrasher": 49, "thresh": 49, "setdorescal": [49, 51], "boolean": [49, 51], "setrescalefactor": [49, 51], "255": [49, 51], "setcroppct": 49, "determin": [49, 78], "smaller": [49, 64, 65, 76], "224": 49, "256": 49, "specifi": [49, 102, 103, 106, 115, 182, 183], "edg": [49, 64, 83], "afterward": 49, "image_classifier_convnext_tiny_224_loc": 49, "convnext_for_image_classif": 50, "swin_for_image_classif": 50, "vit_for_image_classif": 50, "swinforimageclassif": 51, "swinimageclassif": 51, "shift": 51, "window": [51, 65, 70, 76, 86, 101, 126], "ze": 51, "yutong": 51, "lin": 51, "yue": 51, "cao": 51, "han": 51, "hu": 51, "yixuan": 51, "zheng": 51, "zhang": 51, "stephen": 51, "bain": 51, "guo": 51, "whose": 51, "scheme": [51, 72, 119], "bring": [51, 196], "greater": [51, 86, 106], "attent": [51, 52, 63, 70], "non": [51, 137, 139], "overlap": [51, 90, 95], "cross": [51, 78, 79, 102], "connect": 51, "image_classifier_swin_base_patch4_window7_224": 51, "swinforimageclassificationtest": 51, "present": [51, 58, 66, 67, 70, 72, 73, 75, 78, 79, 83, 109, 115, 119, 122], "call": [51, 59, 60, 64, 66, 86, 106, 120, 175, 180, 182, 196, 202], "purpos": [51, 64, 66, 115], "adapt": 51, "aris": 51, "domain": [51, 69, 86, 120], "variat": 51, "high": [51, 75, 78, 79, 119, 122], "variou": [51, 80, 190], "complex": [51, 67, 75, 86, 128, 129], "respect": [51, 63, 77, 100, 101, 185], "These": [51, 58, 72, 73, 80, 86, 100, 120, 179, 194], "broad": [51, 120], "rang": [51, 59, 60, 63, 64, 66, 69, 78, 79, 119], "1k": 51, "dens": [51, 59, 60], "box": 51, "ap": 51, "51": [51, 142, 151, 185], "53": [51, 90, 95], "miou": 51, "val": 51, "Its": [51, 56, 103, 119], "surpass": [51, 63], "previou": [51, 69, 71, 78, 79, 120, 196], "margin": [51, 71, 80], "prove": 51, "benefici": [51, 86], "mlp": 51, "vitforimageclassif": 52, "altern": [52, 86, 106, 117, 126, 128, 129, 150, 153, 196, 201], "neural": [52, 59, 60, 63, 101, 115, 119, 122], "network": [52, 59, 60, 67, 101, 115], "image_classifier_vit_base_patch16_224": 52, "vitimageclassificationtestspec": 52, "becom": [52, 58, 64, 86], "de": [52, 61, 86, 88, 122], "facto": [52, 86], "remain": [52, 57, 58, 64, 86], "conjunct": 52, "replac": [52, 57, 63, 70, 88, 89, 102, 115, 119, 128, 129, 162, 196], "overal": [52, 77, 80], "structur": [52, 103, 155, 195], "relianc": 52, "cnn": [52, 88, 101, 115], "necessari": [52, 64, 192, 199], "directli": [52, 150, 176, 180, 192], "patch": 52, "veri": [52, 61, 67, 78, 79, 80, 119, 120, 122, 123, 150, 195, 197, 200, 201], "mid": 52, "small": [52, 57, 58, 61, 64, 65, 76, 89, 112, 150, 185, 200], "cifar": 52, "vtab": 52, "etc": [52, 62, 66, 69, 71, 143, 155, 192], "attain": 52, "excel": [52, 80], "substanti": [52, 59, 60], "fewer": [52, 58, 69], "worth": 52, "16x16": 52, "egyptian": 52, "date2chunk": 53, "datematch": [53, 91], "multidatematch": [53, 91, 93], "entitynam": 53, "date_chunk": 53, "omicron": 53, "covid": 53, "world": [53, 57, 133, 176, 187, 192], "health": 53, "organ": [53, 86, 122], "nov": [53, 91, 93, 185], "26": [53, 99, 150, 168, 179, 187], "2021": [53, 91, 93], "118": [53, 153], "121": 53, "01": [53, 91, 93, 94], "setentitynam": 53, "dependencypars": [54, 56, 83], "dependencyparserapproach": [54, 183, 202], "unlabel": [54, 59, 60, 119, 120, 123], "grammat": [54, 56], "dependencyparsermodel": [54, 56, 83], "relationship": [54, 56, 75, 83], "tell": [54, 56, 86, 168], "verb": [54, 56, 183], "modifi": [54, 56, 72, 73, 99, 106, 115], "describ": [54, 56, 83, 86, 122], "particular": [54, 56, 86, 180, 196], "treebank": 54, "penn": 54, "setdependencytreebank": 54, "conll": [54, 56, 100, 101, 169, 183, 184, 199], "u": [54, 56, 63, 64, 86, 93, 99, 100, 101, 150, 168, 179, 183, 194, 197, 202], "setconllu": [54, 56], "dependencytreebank": 54, "conllu": [54, 56, 89, 169, 184, 199], "numberofiter": [54, 56], "converg": [54, 56, 112, 139], "better": [54, 56, 58, 63, 71, 80, 86, 100, 112, 114, 115, 118, 119, 139], "typeddependencyparserapproach": [54, 56], "postagg": [54, 56, 83, 100, 112], "dependency_treebank": 54, "emptydataset": [54, 56], "tree": [54, 83], "bank": 54, "setnumberofiter": [54, 56], "read_a": [54, 56, 81, 89, 90, 94, 95, 100, 104, 109, 117, 128, 129, 137, 161, 167, 169, 182, 183], "reada": [54, 56, 77, 81, 89, 90, 94, 95, 100, 104, 109, 117, 128, 129, 133, 137, 164, 167, 182, 183], "dep": 54, "dependency_conllu": [54, 83], "perceptron": [54, 84, 111], "typeddependencyparsermdoel": 54, "union": [54, 56], "worker": [54, 56], "turner": [54, 56], "newal": [54, 56], "sai": [54, 56, 86, 137], "disappoint": [54, 56], "talk": [54, 56, 106], "stricken": [54, 56], "parent": [54, 56], "firm": [54, 56], "feder": [54, 56], "mogul": [54, 56], "dependency_pars": [55, 84, 180, 201], "typed_dependency_pars": [55, 84], "typeddependencypars": [56, 83], "conll2009": 56, "typeddependencyparsermodel": [56, 83], "beforehand": 56, "2009": 56, "setconll2009": 56, "dependency_typ": [56, 83], "train_smal": 56, "txt": [56, 65, 76, 77, 89, 90, 94, 95, 112, 115, 117, 126, 128, 129, 133, 137, 185, 186, 202], "typdep": 56, "dependency_typed_conllu": [56, 83], "amod": 56, "flat": [56, 83, 145], "nsubj": [56, 83, 145, 183], "parataxi": 56, "documentnorm": 57, "raw": [57, 120, 135, 137, 139, 195, 197], "scrape": 57, "xml": 57, "remov": [57, 72, 73, 104, 118, 136, 143, 144, 145], "dirti": [57, 104], "regex": [57, 81, 91, 94, 104, 126, 128, 129, 136, 137, 139], "want": [57, 81, 102, 180, 197], "polici": 57, "__": [57, 119, 143, 144], "action": 57, "clean": [57, 104, 119, 123, 155, 197], "lowercas": [57, 104, 136, 139, 141], "pretty_al": 57, "utf": 57, "cleanuppattern": [57, 104], "normalizeddocu": 57, "setact": 57, "setpattern": [57, 136, 139], "setreplac": 57, "setpolici": 57, "setlowercas": [57, 104, 141, 155], "div": 57, "theworldsgreatest": 57, "right": [57, 59, 60, 119, 139], "hide": 57, "toptext": 57, "style": [57, 88, 123], "font": 57, "sego": 57, "ui": 57, "arial": 57, "san": [57, 86], "serif": 57, "largest": [57, 86, 120], "develop": [57, 86, 122, 173], "site": [57, 86], "h1": 57, "300": 57, "160": 57, "lorem": [57, 90, 95], "ipsum": [57, 90, 95], "print": [57, 169, 180], "typeset": 57, "industri": 57, "been": [57, 61, 120, 154, 155, 180], "1500": 57, "unknown": [57, 88], "printer": 57, "took": 57, "gallei": 57, "scrambl": 57, "specimen": 57, "surviv": 57, "five": [57, 102], "centuri": [57, 139], "leap": 57, "electron": 57, "essenti": [57, 120], "unchang": 57, "popularis": 57, "1960": 57, "letraset": 57, "passag": [57, 66], "recent": [57, 59, 60, 63, 72, 73, 86, 119], "desktop": 57, "publish": [57, 72, 73], "softwar": 57, "aldu": 57, "pagemak": 57, "setencod": 57, "lite": 58, "googl": [58, 59, 60, 63, 65, 67, 72, 73, 75, 76, 86, 123, 183], "research": [58, 59, 60, 63, 65, 76, 122, 123], "toyota": 58, "technolog": 58, "institut": 58, "chicago": 58, "offici": [58, 86, 99, 100, 101, 150, 168, 179, 193], "tf": [58, 75], "wrapper": [58, 172], "port": 58, "properti": [58, 146, 147, 158, 161, 169], "albert_base_uncas": 58, "albert_bas": 58, "768": [58, 59, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 78, 79, 80], "emb": 58, "dim": 58, "12m": 58, "albert_large_uncas": 58, "albert_larg": 58, "1024": [58, 67, 70, 80], "24": [58, 80, 90, 95, 99, 126, 150, 168, 179, 195], "16": [58, 80, 102, 185, 195], "18m": 58, "albert_xlarge_uncas": 58, "albert_xlarg": 58, "2048": 58, "60m": 58, "albert_xxlarge_uncas": 58, "albert_xxlarg": 58, "235m": 58, "sentencepiec": [58, 63, 75], "everi": [58, 59, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 78, 79, 80, 101, 118, 122, 126, 142, 151, 152, 197], "dimens": [58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 163], "repeat": [58, 106], "footprint": 58, "cost": [58, 126, 128], "similar": [58, 69, 75, 86, 88], "FOR": 58, "http": [58, 61, 63, 65, 67, 69, 75, 76, 119, 139, 193], "tfhub": [58, 67, 75], "q": 58, "increas": [58, 66, 77, 86, 106, 119, 120, 128], "downstream": [58, 61, 63, 67, 69, 70, 80, 119, 120, 123], "some": [58, 60, 78, 86, 101, 115, 120, 152, 176, 187, 195, 196, 200, 201], "point": [58, 59, 60, 114, 115, 142, 151, 182], "harder": 58, "gpu": [58, 119, 120, 122, 123, 169], "tpu": 58, "techniqu": [58, 63, 119, 120, 123], "consumpt": [58, 75, 77], "speed": [58, 100, 122], "devlin": [58, 72, 73], "et": [58, 72, 73, 88], "al": [58, 72, 73], "2019": [58, 61, 63, 72, 73, 78, 79, 119], "comprehens": [58, 119, 120], "empir": [58, 59, 60, 78, 79, 80], "evid": 58, "lead": [58, 61, 78, 79], "focus": [58, 86, 106], "inter": 58, "coher": [58, 120], "As": [58, 59, 60, 64, 66, 86, 106], "establish": 58, "glue": [58, 59, 60, 64, 71, 72, 73, 78, 79, 119], "race": [58, 63, 72, 73], "embeddingsfinish": [58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 143], "finished_embed": [58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "setoutputasvector": [58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 143], "setcleanannot": [58, 63, 64, 67, 70, 72, 74, 75, 77, 78, 80, 143, 144, 145], "80": [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 94, 143, 155], "1342473030090332": [58, 63], "3855540752410889": [58, 63], "9818322062492371": [58, 63], "784737348556518": [58, 63], "847029983997345": [58, 63], "047153353691101": [58, 63], "1520637571811676": [58, 63], "6245765686035156": [58, 63], "009860038757324219": [58, 63], "13450059294700623": [58, 63], "707749128341675": [58, 63], "2916892766952": [58, 63], "04192575812339783": [58, 63], "5764210224151611": [58, 63], "3196685314178467": [58, 63], "527840495109": [58, 63], "15583214163780212": [58, 63], "1614152491092682": [58, 63], "28423872590065": [58, 63], "135491415858268": [58, 63], "bertembed": [59, 62, 69, 74, 101, 143], "small_bert_l2_768": 59, "understand": [59, 60, 64, 71, 78, 80, 86, 119, 123, 139, 195], "introduc": [59, 60, 64, 67, 69, 70, 71, 119, 123], "stand": [59, 60], "unlik": [59, 60, 69, 78, 86, 135], "jointli": [59, 60], "condit": [59, 60, 119, 120, 123, 163], "both": [59, 60, 66, 67, 75, 83, 106, 119, 196, 197], "left": [59, 60, 119, 139], "just": [59, 60, 64, 72, 96, 101], "modif": [59, 60], "conceptu": [59, 60], "power": [59, 60, 119, 123], "obtain": [59, 60, 61, 66, 75], "eleven": [59, 60], "push": [59, 60], "absolut": [59, 60], "multinli": [59, 60], "86": [59, 60, 63], "v1": [59, 60], "f1": [59, 60, 78, 79, 101, 120], "93": [59, 60], "83": [59, 60, 63, 185, 186, 202], "small_bert_l2_128": 59, "3497989177703857": [59, 69], "480538547039032": [59, 69], "3238905668258667": [59, 69], "612930893898010": [59, 69], "1357314586639404": 59, "32984697818756104": 59, "6032363176345825": 59, "6791689395904": 59, "8244884014129639": 59, "27088963985443115": 59, "059438943862915": 59, "9817547798156": 59, "1648050546646118": 59, "4725411534309387": 59, "5938255786895752": 59, "5780693292617": 59, "9125322699546814": 59, "4563939869403839": 59, "3975459933280945": 59, "81611204147338": 59, "sentence_bert_embed": 60, "sent_small_bert_l2_768": 60, "islong": 60, "long": [60, 70, 80], "sent_small_bert_l2_128": 60, "orang": [60, 73, 79], "8951074481010437": [60, 73, 79], "13753940165042877": [60, 73, 79], "3108254075050354": [60, 73, 79], "65693199634552": [60, 73, 79], "6180210709571838": [60, 73, 79], "12179657071828842": [60, 73, 79], "191165953874588": [60, 73, 79], "4497021436691": [60, 73, 79], "822715163230896": [60, 73, 79], "7568016648292542": [60, 73, 79], "1165061742067337": [60, 73, 79], "59048593044281": [60, 73, 79], "setislong": 60, "camembertembed": 61, "tasti": 61, "french": [61, 86, 122, 131], "loui": 61, "martin": 61, "muller": 61, "pedro": 61, "javier": 61, "ortiz": 61, "su\u00e1rez": 61, "yoann": 61, "dupont": 61, "laurent": 61, "romari": 61, "\u00e9ric": 61, "villemont": 61, "la": [61, 122], "clergeri": 61, "djam\u00e9": 61, "seddah": 61, "beno\u00eet": 61, "sagot": 61, "facebook": [61, 63, 78, 79, 119], "138gb": 61, "camembert_bas": 61, "camembertembeddingstestspec": 61, "co": [61, 86], "ubiquit": 61, "despit": [61, 119], "concaten": [61, 139], "except": [61, 96, 101, 137], "investig": [61, 64, 75], "feasibl": 61, "monolingu": [61, 78, 79], "crawl": [61, 119, 123], "prefer": [61, 83, 145], "wikipedia": [61, 88, 120], "surprisingli": [61, 75], "4gb": 61, "larger": [61, 64, 72, 73, 119, 120, 122, 123], "130": 61, "gb": 61, "reach": [61, 86, 120, 139], "four": [61, 115, 139, 154], "un": [61, 88], "08442357927560806": 61, "12863239645957947": 61, "03835778683423996": 61, "200479581952": 61, "048462312668561935": 61, "12637358903884888": 61, "27429091930389404": 61, "07516729831": 61, "02690504491329193": 61, "12104076147079468": 61, "012526623904705048": 61, "031543646007": 61, "05877285450696945": 61, "08773420006036758": 61, "06381352990865707": 61, "122621834278": 61, "chunkembed": [62, 143], "wordembed": [62, 74, 77, 101, 143, 169], "chunker": [62, 84, 169], "ngramgener": [62, 96], "nerconvert": [62, 99, 100, 101, 176, 192], "poolingstrategi": [62, 74], "aggreg": [62, 74], "sum": [62, 67, 74], "skipoov": 62, "discard": [62, 103], "oov": 62, "setn": [62, 96], "wordembeddingsmodel": [62, 74, 77, 83, 100, 101, 102, 143], "setpoolingstrategi": [62, 74], "55661": 62, "42829502": 62, "86661": 62, "409785": 62, "06316501": 62, "120775": 62, "0732005": 62, "40674996": 62, "22938299": 62, "50597": 62, "288195": 62, "555655": 62, "465145": 62, "140118": 62, "17417": 62, "095253006": 62, "0530925": 62, "218465": 62, "714395": 62, "79860497": 62, "0129999": 62, "139705": 62, "177955": 62, "1887775": 62, "45545": 62, "20030999": 62, "461557": 62, "07891501": 62, "strategi": [62, 74, 91, 94, 114, 126, 162], "setskipoov": 62, "debertaembed": 63, "enhanc": [63, 118, 119], "disentangl": 63, "pengcheng": 63, "xiaodong": 63, "jianfeng": 63, "gao": 63, "weizhu": 63, "chen": [63, 72, 73], "2018": [63, 72, 73], "half": [63, 86], "deberta_v3_bas": 63, "microsoft": [63, 66, 71, 122], "www": 63, "blog": 63, "superglu": 63, "progress": [63, 115, 136], "significantli": [63, 67, 72, 73, 78, 79, 86], "novel": [63, 71, 80, 86, 119], "mechan": [63, 70], "weight": [63, 67, 86, 100, 102, 126], "among": [63, 71], "matric": 63, "second": [63, 67, 94, 114, 131, 136, 196], "mnli": 63, "9": [63, 78, 79, 96, 195, 200, 201], "90": 63, "91": 63, "88": 63, "made": [63, 75, 192], "publicli": [63, 78, 79], "distilbertembed": 64, "fast": [64, 118, 122, 150, 200], "cheap": 64, "distil": 64, "40": [64, 66, 102, 122], "uncas": 64, "preserv": [64, 99, 136, 155], "95": 64, "measur": [64, 72, 73, 119, 176], "distilbert_base_cas": 64, "doesn": [64, 72], "token_type_id": [64, 72], "indic": [64, 72, 136, 139], "belong": [64, 72], "separ": [64, 72, 94, 96, 114, 115, 128, 137, 139, 144, 168, 182, 194], "sep_token": [64, 72], "sep": 64, "position_id": 64, "ad": [64, 67, 106, 126], "though": [64, 86], "know": [64, 122, 152], "cheaper": 64, "lighter": 64, "preval": 64, "oper": [64, 70, 126, 135, 195], "constrain": 64, "budget": 64, "counterpart": 64, "leverag": [64, 71, 176, 192], "reduc": [64, 71, 128, 129, 155], "retain": 64, "97": [64, 91, 93, 139], "being": [64, 101, 106, 109, 119, 122, 123], "tripl": [64, 83], "cosin": 64, "distanc": [64, 124, 126, 128, 129], "devic": 64, "proof": 64, "concept": [64, 197], "experi": [64, 80, 119, 176, 193], "1127224713563919": 64, "1982710212469101": 64, "5360898375511169": 64, "272536993026733": 64, "35534414649009705": 64, "13215228915214539": 64, "40981462597846985": 64, "14036104083061": 64, "328085333108902": 64, "06269335001707077": 64, "017595693469047546": 64, "024373905733": 64, "15617232024669647": 64, "2967822253704071": 64, "22324979305267334": 64, "04568954557180": 64, "45411425828933716": 64, "01173491682857275": 64, "190129816532135": 64, "1178255230188369": 64, "doc2vecapproach": 65, "word2vec": [65, 68, 84], "corpu": [65, 67, 76, 86, 89, 112, 119, 123, 126, 185, 202], "algorithm": [65, 76, 86, 100, 118, 126, 128, 129], "skip": [65, 76, 83, 126], "gram": [65, 66, 76, 86, 96, 119, 120, 123, 163], "doc2vecmodel": 65, "vectors": [65, 76], "windows": [65, 76, 86], "numpartit": [65, 76], "partit": [65, 76, 182], "mincount": [65, 76, 126], "must": [65, 76, 89, 90, 94, 95, 106, 109, 117, 118, 128, 129, 141, 168, 169, 176, 182], "appear": [65, 76, 106, 126], "divid": [65, 76], "1000": [65, 76, 83, 100], "stepsiz": [65, 76], "optim": [65, 72, 73, 76, 101, 103, 115], "025": [65, 76], "maxit": [65, 76], "estim": [65, 76, 124, 132, 146, 156, 165, 175, 196], "distribut": [65, 76], "composition": [65, 76], "sherlockholm": [65, 76, 126, 202], "setvectors": [65, 76], "setwindows": [65, 76, 86], "setsteps": [65, 76], "initi": [65, 76, 126, 136, 152, 169, 182, 183, 185, 186, 192], "setnumpartit": [65, 76], "setmaxit": [65, 76], "numiter": [65, 76], "equal": [65, 76], "setse": [65, 76], "setmincount": [65, 76, 126], "doc2vec_gigaword_300": 65, "06222493574023247": [65, 76], "011579325422644615": [65, 76], "009919632226228714": [65, 76], "109361454844": [65, 76], "doc2vec_wiki": 65, "getvector": [65, 76], "field": [65, 76, 77, 81, 95], "e5embed": [66, 71], "e5": 66, "weakli": 66, "tailor": [66, 69], "e5_smal": 66, "contrast": [66, 69, 70, 90, 123], "unilm": 66, "manner": [66, 86], "signal": [66, 67], "curat": 66, "ccpair": 66, "readili": 66, "strong": [66, 78, 79], "conduct": 66, "extens": [66, 172], "56": [66, 185], "beir": 66, "mteb": 66, "bm25": 66, "baselin": [66, 75, 120], "beat": 66, "exist": [66, 67, 106, 126, 143, 145, 176], "queri": [66, 193], "protein": 66, "femal": 66, "eat": 66, "guidelin": 66, "cdc": 66, "women": 66, "70": [66, 69], "46": [66, 187], "dai": [66, 91, 93, 126], "But": 66, "chart": [66, 176, 192], "ll": [66, 139], "marathon": 66, "below": [66, 83, 201], "0190285e": 66, "005974853": 66, "072875895": 66, "007944068": 66, "026059335": 66, "0080": 66, "050514214": 66, "010061974": 66, "04340176": 66, "020937217": 66, "05170225": 66, "01157857": 66, "elmoembed": 67, "elmo": 67, "billion": [67, 120], "computation": [67, 72, 73, 80, 119, 120, 122, 123], "expens": [67, 72, 73, 80, 117, 119, 120, 122, 123, 128], "lookup": [67, 77, 80, 90, 128, 129], "acceler": [67, 80, 119, 120, 122, 123, 169], "setpoolinglay": 67, "word_emb": 67, "shape": 67, "batch_siz": 67, "max_length": 67, "lstm_outputs1": 67, "lstm": [67, 101], "lstm_outputs2": 67, "trainabl": 67, "tensor": 67, "poolinglay": 67, "contextu": [67, 119, 126], "characterist": 67, "syntax": 67, "vari": [67, 106], "across": [67, 120], "linguist": [67, 139], "polysemi": 67, "intern": [67, 108, 109, 126, 137, 139, 153, 158, 163, 169], "bilm": 67, "six": [67, 128, 129], "textual": [67, 69], "entail": 67, "expos": 67, "crucial": 67, "mix": [67, 106, 107, 124, 157, 175], "semi": 67, "662458181381226e": 67, "2541114091873169": 67, "6275503039360046": 67, "5787073969841": 67, "19154725968837738": 67, "22998669743537903": 67, "2894386649131775": 67, "21524395048618": 67, "10400570929050446": 67, "12288510054349899": 67, "07056470215320587": 67, "246389418840": 67, "49932169914245605": 67, "12706467509269714": 67, "30969417095184326": 67, "2643227577209": 67, "8871506452560425": 67, "20039963722229004": 67, "0601330995559692": 67, "0348707810044": 67, "albert_embed": [68, 84], "bert_embed": [68, 84], "bert_sentence_embed": [68, 84], "camembert_embed": [68, 84], "chunk_embed": [68, 84], "deberta_embed": [68, 84], "distil_bert_embed": [68, 84], "doc2vec": [68, 84], "e5_embed": [68, 84], "elmo_embed": [68, 84], "instructor_embed": [68, 84], "longformer_embed": [68, 84], "mpnet_embed": [68, 84], "roberta_embed": [68, 84], "roberta_sentence_embed": [68, 84], "universal_sentence_encod": [68, 84], "xlm_roberta_embed": [68, 84], "xlm_roberta_sentence_embed": [68, 84], "xlnet_embed": [68, 84], "instructorembed": 69, "instructor": 69, "finetun": [69, 70, 80], "scienc": [69, 86, 193], "financ": 69, "sota": [69, 80], "divers": [69, 75, 119, 120, 123, 193], "setinstruct": 69, "medicin": 69, "instructor_bas": 69, "summar": [69, 70, 86, 119, 120, 122, 123, 163], "embedd": 69, "hkunlp": 69, "togeth": 69, "explain": [69, 176, 192, 199, 201], "special": [69, 126, 139, 170, 197], "330": 69, "mixtur": 69, "66": [69, 102], "unseen": 69, "magnitud": [69, 128, 129], "suggest": [69, 120], "chang": [69, 172], "mitig": 69, "url": 69, "io": 69, "dynam": [69, 122], "scalar": 69, "degre": 69, "freedom": 69, "horava": 69, "lifshitz": 69, "graviti": 69, "longformerembed": 70, "iz": 70, "beltagi": 70, "matthew": 70, "arman": 70, "cohan": 70, "checkpoint": 70, "mlm": [70, 71], "096": 70, "longformer_base_4096": 70, "unabl": 70, "quadrat": 70, "linearli": 70, "easi": 70, "thousand": 70, "drop": [70, 131], "motiv": 70, "global": 70, "text8": 70, "enwik8": 70, "wikihop": 70, "triviaqa": 70, "led": [70, 72, 73, 86], "arxiv": [70, 119], "found": [70, 77, 86, 128, 135, 141, 182, 199], "18792399764060974": [70, 72], "14591649174690247": [70, 72], "20547787845134735": [70, 72], "1468472778797": [70, 72], "22845706343650818": [70, 72], "18073144555091858": [70, 72], "09725798666477203": [70, 72], "0417917296290": [70, 72], "07037967443466187": [70, 72], "14801117777824402": [70, 72], "03603338822722435": [70, 72], "17893412709": [70, 72], "08734266459941864": [70, 72], "2486150562763214": [70, 72], "009067727252840996": [70, 72], "24408400058": [70, 72], "22409197688102722": [70, 72], "4312366545200348": [70, 72], "1401449590921402": [70, 72], "356410235166549": [70, 72], "mpnetembed": 71, "mpnet": 71, "adopt": 71, "permut": [71, 80], "inherit": [71, 106, 107, 124, 157, 175], "advantag": [71, 152], "all_mpnet_base_v2": 71, "neglect": [71, 80], "plm": 71, "doe": [71, 78, 86, 99, 122, 150, 152, 180, 197, 200, 201], "full": [71, 80, 196], "thu": [71, 86], "suffer": [71, 80], "discrep": [71, 80], "avoid": [71, 117], "auxiliari": 71, "160gb": 71, "corpora": [71, 86, 90], "down": [71, 101, 196, 197], "stream": [71, 106], "experiment": [71, 86], "022502584": 71, "078291744": 71, "023030775": 71, "0051000593": 71, "080340415": 71, "039": 71, "041702367": 71, "0010974605": 71, "015534201": 71, "07092203": 71, "0017729357": 71, "04661": 71, "robertaembed": [72, 78], "robustli": [72, 73, 103], "yinhan": [72, 73], "myle": [72, 73, 78, 79], "ott": [72, 73, 78, 79], "naman": [72, 73, 78, 79], "goyal": [72, 73, 78, 79], "jingfei": [72, 73], "du": [72, 73, 88], "mandar": [72, 73], "joshi": [72, 73], "danqi": [72, 73], "omer": [72, 73], "levi": [72, 73], "mike": [72, 73], "lewi": [72, 73], "luke": [72, 73, 78, 79], "zettlemoy": [72, 73, 78, 79], "veselin": [72, 73, 78, 79], "stoyanov": [72, 73, 78, 79], "hyperparamet": [72, 73], "mini": [72, 73], "roberta_bas": 72, "bpe": 72, "gpt": [72, 106, 119, 120], "signific": [72, 73, 78, 79, 86, 89], "gain": [72, 73, 78, 79, 119], "care": [72, 73, 137], "comparison": [72, 73, 75, 131], "privat": [72, 73, 170], "choic": [72, 73, 94], "impact": [72, 73], "replic": [72, 73, 119], "carefulli": [72, 73, 106], "undertrain": [72, 73], "exce": [72, 73, 106], "highlight": [72, 73], "previous": [72, 73, 86], "overlook": [72, 73], "rais": [72, 73, 86, 96, 101, 176], "report": [72, 73, 75, 119, 176, 192], "robertasentenceembed": 73, "sent_roberta_bas": 73, "embeddingssent": 74, "22093398869037628": 74, "25130119919776917": 74, "41810303926467896": 74, "380883991718": 74, "dimension": 75, "tfhub_us": 75, "loadsp": 75, "op": 75, "lingual": [75, 78, 79, 86, 88, 122], "accur": [75, 118, 119, 128], "trade": [75, 78, 79], "tend": 75, "With": [75, 80, 86], "observ": 75, "minim": [75, 103, 122], "encourag": 75, "weat": 75, "bia": [75, 106], "freeli": 75, "04616805538535118": 75, "022307956591248512": 75, "044395286589860916": 75, "0016493503": 75, "setloadsp": 75, "word2vecapproach": 76, "word2vecmodel": 76, "word2vec_gigaword_300": 76, "word2vec_wiki": 76, "custom": [77, 100, 101, 114, 115, 137, 169, 176], "dictionari": [77, 86, 89, 94, 100, 102, 103, 104, 117, 128, 129, 176], "setstoragepath": [77, 90], "line": [77, 81, 90, 95, 106, 115, 117, 126, 179, 182, 185], "delimit": [77, 81, 83, 89, 94, 96, 100, 104, 117, 136, 153, 182, 185], "39658191506190343": 77, "630968081620067": 77, "5393722253731201": 77, "8428180123359783": 77, "were": [77, 101, 176, 192], "7535235923631415": 77, "9699218875629833": 77, "10397182122983872": 77, "11833962569383116": 77, "stress": 77, "0492683418305907": 77, "9415954572751959": 77, "47624463167525755": 77, "16790967216778263": 77, "induc": 77, "1535748762292387": 77, "33498936903209897": 77, "9235178224122094": 77, "1158772920395934": 77, "withcoveragecolumn": 77, "overallcoverag": 77, "writebuffers": 77, "dump": 77, "disk": [77, 196, 197], "storag": [77, 81, 90, 161, 169], "10000": 77, "readcaches": 77, "cach": [77, 119, 180], "random_embeddings_dim4": 77, "abov": [77, 83, 185], "setstorageref": 77, "glove_4d": 77, "setdimens": [77, 163], "patient": 77, "diagnos": 77, "diabet": 77, "9439099431037903": 77, "4707513153553009": 77, "806300163269043": 77, "16176554560661316": 77, "7966810464859009": 77, "5551124811172485": 77, "8861005902290344": 77, "28284206986427307": 77, "025029370561242104": 77, "35177749395370483": 77, "052506182342767715": 77, "1887107789516449": 77, "08617766946554184": 77, "8399239182472229": 77, "5395117998123169": 77, "7864698767662048": 77, "6599600911140442": 77, "16109347343444824": 77, "6041093468666077": 77, "8913561105728149": 77, "5955275893211365": 77, "01899011991918087": 77, "4397728443145752": 77, "8911281824111938": 77, "9840458631515503": 77, "7599489092826843": 77, "9417727589607239": 77, "8624503016471863": 77, "setwritebuffers": 77, "setreadcaches": 77, "glove_100d": [77, 101], "There": [77, 81, 83, 135, 194, 196, 197, 202], "conveni": 77, "coverag": [77, 160], "stat": 77, "whole": [77, 179], "570580005645752": 77, "44183000922203064": 77, "7010200023651123": 77, "417129993438720": 77, "542639970779419": 77, "4147599935531616": 77, "0321999788284302": 77, "4024400115013122": 77, "2708599865436554": 77, "04400600120425224": 77, "020260000601410866": 77, "17395000159": 77, "6191999912261963": 77, "14650000631809235": 77, "08592499792575836": 77, "2629800140857": 77, "3397899866104126": 77, "20940999686717987": 77, "46347999572753906": 77, "6479200124740": 77, "embeddings_col": 77, "coverageresult": 77, "coverateresult": 77, "wordsoverallcoverag": 77, "resultdf": 77, "output_col": 77, "wordscoverag": 77, "cov_embed": 77, "loadstorag": [77, 90], "storage_ref": [77, 90], "xlmrobertaembed": 78, "alexi": [78, 79], "conneau": [78, 79], "kartikai": [78, 79], "khandelw": [78, 79], "vishrav": [78, 79], "chaudhari": [78, 79], "guillaum": [78, 79], "wenzek": [78, 79], "francisco": [78, 79, 86], "guzman": 78, "edouard": [78, 79], "grave": [78, 79], "5tb": [78, 79], "commoncrawl": [78, 79], "xlm_roberta_bas": 78, "abl": [78, 123, 176, 195], "correct": [78, 126, 128, 129, 139], "hundr": [78, 79], "terabyt": [78, 79], "r": [78, 79, 86], "mbert": [78, 79], "xnli": [78, 79], "mlqa": [78, 79], "particularli": [78, 79, 119], "low": [78, 79, 126], "swahili": [78, 79], "urdu": [78, 79], "capac": [78, 79, 120], "dilut": [78, 79], "sacrif": [78, 79], "ri": [78, 79], "05969233065843582": 78, "030789051204919815": 78, "04443822056055069": 78, "09564960747": 78, "038839809596538544": 78, "011712731793522835": 78, "019954433664679527": 78, "0667808502": 78, "03952755779027939": 78, "03455188870429993": 78, "019103847444057465": 78, "04311436787": 78, "09579929709434509": 78, "02494969218969345": 78, "014753809198737144": 78, "10259044915": 78, "004710011184215546": 78, "022148698568344116": 78, "011723337695002556": 78, "013356896": 78, "xlmrobertasentenceembed": 79, "guzm\u00e3": 79, "sent_xlm_roberta_bas": 79, "xlnetembed": 80, "autoregress": 80, "addition": [80, 101, 112, 142, 151, 179], "emploi": 80, "xl": 80, "exhibit": 80, "involv": [80, 115], "rank": [80, 124, 126], "xlnet_large_cas": 80, "xlnet_base_cas": 80, "zihangdai": 80, "denois": [80, 119], "autoencod": [80, 119], "corrupt": [80, 119], "pro": 80, "con": 80, "enabl": [80, 101, 128, 169], "maxim": [80, 126], "likelihood": [80, 106], "overcom": 80, "formul": 80, "furthermor": 80, "integr": [80, 86, 105, 122, 176, 192, 194], "idea": 80, "6287205219268799": 80, "4865287244319916": 80, "186111718416214": 80, "234187275171279": 80, "1967450380325317": 80, "2746637463569641": 80, "9481253027915955": 80, "3431355059146881": 80, "0777631998062134": 80, "092679977416992": 80, "5331977605819702": 80, "11190271377563": 80, "8349916934967041": 80, "45627787709236145": 80, "7890847325325012": 80, "028069257736": 80, "134845569729805": 80, "11672890186309814": 80, "4945235550403595": 80, "66587203741073": 80, "entityrul": 81, "entityrulerapproach": 81, "exact": [81, 90, 95, 106], "definit": [81, 103, 182], "json": [81, 106, 153, 176, 187], "jsonl": 81, "setpatternsresourc": 81, "might": [81, 101, 139, 201], "rule": [81, 91, 94, 117, 135, 137, 162], "person": [81, 183], "w": [81, 84, 94, 100, 104, 135, 137, 169], "winterfel": 81, "jon": 81, "snow": [81, 102, 126], "stark": 81, "eddard": 81, "patternsresourc": 81, "usestorag": 81, "rocksdb": 81, "lord": 81, "29": [81, 102, 139, 185, 187], "38": [81, 187], "setusestorag": 81, "setsentencematch": 81, "setalphabetresourc": 81, "alphabet": [81, 104], "plain": [81, 202], "entityrulermodel": 81, "entity_rul": [82, 84], "graphextract": [83, 145], "graph": [83, 101, 122, 126, 132, 145], "nerdlmodel": [83, 99, 100, 101, 102, 176, 180, 192], "store": [83, 108, 109, 153, 158, 163, 174, 179, 187, 193], "node": 83, "relev": [83, 86, 106], "taken": 83, "implicitli": 83, "setmergeent": 83, "setdependencyparsermodel": 83, "settypeddependencyparsermodel": 83, "setrelationshiptyp": 83, "public": [83, 180, 196], "relationshiptyp": 83, "entitytyp": 83, "explodeent": 83, "roottoken": 83, "travers": 83, "maxsentences": 83, "minsentences": 83, "mergeent": 83, "merg": [83, 90, 95], "neighbor": [83, 124], "includeedg": 83, "symbol": [83, 126, 139], "posmodel": 83, "coordin": [83, 114], "remoteloc": 83, "graphfinish": [83, 145], "rdf": [83, 145], "nertagg": [83, 100, 101, 102], "morn": [83, 145], "flight": [83, 145], "denver": [83, 145], "18": [83, 91, 93, 96, 99, 102, 150, 168, 179, 195], "path1": 83, "setentitytyp": 83, "setexplodeent": 83, "setroottoken": 83, "setmaxsentences": 83, "setminsentences": 83, "setmergeentitiesiobformat": 83, "iob": [83, 99, 100, 101], "iob2": [83, 99], "setincludeedg": 83, "setdelimit": [83, 94, 96], "setposmodel": 83, "class": [84, 161, 166, 173, 184, 191, 192, 200, 202], "classifier_dl": [84, 169], "er": [84, 169], "keyword_extract": [84, 169], "yake_keyword_extract": [84, 85], "ld_dl": [84, 169], "language_detector_dl": [84, 87], "matcher": [84, 169], "big_text_match": [84, 92], "date_match": [84, 92], "multi_date_match": [84, 92], "regex_match": [84, 92], "text_match": [84, 92], "ner_approach": [84, 97], "ner_convert": [84, 97], "ner_crf": [84, 97], "ner_dl": [84, 97], "ner_overwrit": [84, 97], "openai": [84, 120, 169], "openai_complet": [84, 105], "openai_embed": [84, 105], "param": [84, 100, 106, 107, 124, 157, 158, 163, 169, 174, 175], "sentence_detector_dl": [84, 113, 122], "sentiment_detector": [84, 116], "vivekn_senti": [84, 116], "seq2seq": [84, 169], "bart_transform": [84, 121], "gpt2_transform": [84, 121], "marian_transform": [84, 121], "t5_transform": [84, 121], "spell_check": [84, 169], "context_spell_check": [84, 127], "norvig_sweet": [84, 127], "symmetric_delet": [84, 127], "chunk_token": [84, 134], "recursive_token": [84, 134], "regex_token": [84, 134], "word_segment": [84, 138], "chunk2_doc": [84, 169], "date2_chunk": [84, 169], "document_norm": [84, 169], "graph_extract": [84, 169], "lemmat": [84, 117, 131, 152, 155, 169], "n_gram_gener": [84, 169], "stemmer": [84, 131, 169], "stop_words_clean": [84, 169], "yakekeywordextract": 86, "yake": 86, "independ": [86, 128, 129, 135], "individu": [86, 126], "grow": 86, "autom": 86, "adequ": 86, "emerg": [86, 119, 123], "tool": [86, 106, 119], "nor": 86, "thesauri": 86, "neither": 86, "written": [86, 122], "plethora": 86, "situat": [86, 115], "access": 86, "restrict": 86, "therefor": [86, 200], "sent": 86, "boundari": [86, 114, 115, 118, 137, 139], "detector": [86, 91, 117], "section": [86, 142, 151, 192, 194, 200], "tweakabl": 86, "upper": 86, "bound": [86, 114, 115, 118], "minngram": 86, "maxngram": 86, "occurr": [86, 162], "nkeyword": 86, "stopword": [86, 102, 131], "stop": [86, 100, 106, 131], "campo": 86, "mangaravit": 86, "pasquali": 86, "jatowt": 86, "jorg": 86, "nune": 86, "journal": [86, 139], "elsevi": 86, "vol": 86, "509": 86, "pp": [86, 139], "257": 86, "289": 86, "turn": [86, 155, 196], "come": [86, 99, 106], "fly": 86, "demand": 86, "abil": [86, 119, 120], "within": [86, 112, 118, 119, 120, 137, 141], "resort": 86, "alwai": [86, 106, 123], "solut": 86, "articl": [86, 126], "rest": [86, 99], "merit": 86, "ten": 86, "carri": 86, "twenti": 86, "setcontextchar": [86, 137], "setminngram": 86, "setnkeyword": 86, "acquir": 86, "kaggl": 86, "platform": [86, 176, 194], "host": 86, "transact": 86, "somewhat": 86, "vagu": 86, "cloud": 86, "confer": 86, "week": [86, 91, 93, 133], "announc": [86, 102], "earli": 86, "tomorrow": [86, 91, 93], "phone": 86, "founder": 86, "ceo": 86, "anthoni": 86, "goldbloom": 86, "declin": 86, "deni": 86, "acquisit": 86, "happen": 86, "rumor": 86, "million": [86, 102, 120], "scientist": 86, "ben": 86, "hamner": 86, "2010": 86, "servic": [86, 122], "got": 86, "even": [86, 123], "few": [86, 137, 185, 202], "competitor": 86, "drivendata": 86, "topcod": 86, "hackerrank": 86, "stai": 86, "ahead": 86, "nich": 86, "home": [86, 169], "bui": [86, 183], "commun": 86, "mindshar": 86, "too": [86, 117, 195], "plenti": 86, "bit": [86, 115, 201], "histori": [86, 115, 126], "earlier": 86, "month": [86, 91, 93, 185, 202], "team": [86, 122, 176, 192], "around": 86, "youtub": 86, "That": [86, 135, 176, 192, 197], "had": 86, "technologi": 86, "did": 86, "interest": 86, "kernel": 86, "On": [86, 120, 122], "analyz": [86, 118], "compani": [86, 122], "script": 86, "centric": 86, "job": [86, 141], "board": [86, 112, 185], "unclear": 86, "accord": [86, 126, 182], "crunchbas": 86, "pitchbook": 86, "launch": 86, "investor": 86, "ventur": 86, "sv": 86, "angel": 86, "levchin": 86, "naravik": 86, "chie": 86, "economist": 86, "hal": 86, "varian": 86, "khosla": 86, "yuri": 86, "milner": 86, "resulttupl": 86, "ascend": 86, "orderbi": 86, "32051516486864573": 86, "37786450577630676": 86, "39922830978423146": 86, "40224744669493756": 86, "41584827825302534": 86, "setmaxngram": 86, "setstopword": [86, 102, 131], "getstopword": 86, "loaddefaultstopword": [86, 131], "danish": [86, 131], "dutch": [86, 131], "finnish": [86, 131], "german": [86, 131, 182, 202], "hungarian": [86, 131], "italian": [86, 126, 131], "norwegian": [86, 131], "portugues": [86, 131], "russian": [86, 131], "spanish": [86, 131], "swedish": [86, 131], "turkish": [86, 131], "languagedetectordl": 88, "ld": 88, "identif": 88, "rnn": 88, "tatoeba": 88, "140": 88, "wiki": 88, "languagedetector": 88, "ld_wiki_tatoeba_cnn_21": 88, "open": [88, 137, 141, 142, 143, 151, 155, 193], "advanc": [88, 141, 155], "scala": [88, 106, 107, 124, 156, 157, 165, 171, 175], "program": 88, "biblioth\u00e8qu": 88, "traitement": 88, "pour": 88, "le": [88, 122], "avanc\u00e9": 88, "langag": 88, "naturel": 88, "programm": 88, "ist": 88, "ein": 88, "textverarbeitungsbibliothek": 88, "f\u00fcr": 88, "fortgeschritten": 88, "nat\u00fcrlich": 88, "sprachverarbeitung": 88, "die": 88, "programmiersprachen": 88, "und": 88, "lemma": [89, 117, 150, 179, 183, 197, 200, 201], "predefin": [89, 90, 94, 95, 117], "setdictionari": [89, 117, 128, 129], "lemmatizermodel": 89, "lemmas_smal": [89, 117], "setformcol": 89, "correspend": 89, "formcol": [89, 183], "setlemmacol": 89, "fromlemma": 89, "key_delimit": 89, "value_delimit": 89, "lemma_antbnc": 89, "bigtextmatch": [90, 95], "textmatch": [90, 95, 133], "externalresourc": [90, 95, 167], "mergeoverlap": [90, 95], "tokenizermodel": [90, 137], "trie": 90, "dolor": [90, 95], "magna": [90, 95], "aliqua": [90, 95], "sit": [90, 95], "laborum": [90, 95], "hello": [90, 95, 133, 187], "entityextractor": [90, 95, 133], "extractor": [90, 95, 133], "59": [90, 91, 93, 95], "setent": [90, 95, 98, 133], "setmergeoverlap": [90, 95], "settoken": 90, "tokenizer_model": 90, "bigtextmatchermodel": 90, "btm": 90, "textmatchermodel": [90, 95], "searchtri": 90, "datematcherutil": 91, "setinputformat": [91, 153], "setoutputformat": [91, 93], "desir": [91, 93], "yyyi": [91, 93], "mm": [91, 93, 139], "dd": [91, 93, 94], "Not": [91, 101, 152], "setreadmonthfirst": 91, "juli": 91, "5th": 91, "2015": 91, "07": 91, "05": 91, "setdefaultdaywhenmiss": 91, "miss": [91, 93, 141], "setanchordateyear": [91, 93], "anchor": [91, 93], "year": [91, 93, 120, 133, 185], "setanchordatemonth": [91, 93], "januari": [91, 93], "setanchordatedai": [91, 93], "setrelaxedfactorystrategi": 91, "matchstrategi": [91, 162], "match_first": [91, 94, 162], "relax": 91, "exhaust": 91, "1978": [91, 93], "28": [91, 93, 99, 150, 168, 179, 187, 195], "1984": [91, 93], "04": [91, 93], "02": [91, 93], "1980": [91, 93], "79": [91, 93], "31st": [91, 93], "april": [91, 93], "2008": [91, 93], "fri": [91, 93], "1997": [91, 93], "jan": [91, 93], "sun": [91, 93], "1st": [91, 93], "thursdai": [91, 93], "wednesdai": [91, 93], "todai": [91, 93, 187], "yesterdai": [91, 93], "0600h": [91, 93], "06": [91, 93], "00": [91, 93], "6pm": [91, 93], "23": [91, 93, 94, 102, 112, 185, 186, 187, 202], "1988": [91, 93], "31": [91, 93, 94, 102, 112, 185], "dateformat": [91, 93], "readmonthfirst": [91, 93], "defaultdaywhenmiss": [91, 93], "anchordateyear": [91, 93], "anchordatemonth": [91, 93], "anchordatedai": [91, 93], "15": [91, 187], "saw": 93, "him": 93, "me": 93, "visit": 93, "57": [93, 102], "65": [93, 102], "regexmatch": 94, "d": [94, 104, 137, 194], "1970": 94, "setrul": 94, "setexternalrul": 94, "match_al": [94, 162], "match_complet": [94, 162], "externalrul": 94, "ceremoni": 94, "setstrategi": 94, "71": 94, "short_dat": 94, "regexmatchermodel": 94, "regardless": 95, "entityvalu": 95, "buildfromtoken": 95, "27": [95, 112, 114, 185], "48": [95, 139, 187], "setentityvalu": 95, "setbuildfromtoken": 95, "null": 96, "empti": [96, 141], "enablecumul": 96, "join": [96, 112, 153, 185], "setenablecumul": 96, "nerapproach": 98, "recogn": [98, 99, 100, 101, 102, 103, 126], "setminepoch": [98, 100], "setrandomse": [98, 101, 108], "getlabelcolumn": [98, 132], "friendli": [99, 122], "whitelist": [99, 135], "setwhitelist": [99, 135], "outsid": 99, "prefix": [99, 135, 137, 176, 192], "preserveposit": [99, 136, 155], "org": [99, 100, 101, 102, 119, 139, 150, 168, 169, 179, 182, 193, 202], "14": [99, 112, 150, 154, 168, 179, 185], "ekeu": [99, 100, 101, 150, 168, 179], "36": [99, 112, 150, 168, 179, 185, 187], "baghdad": [99, 100, 101, 150, 168, 179], "37": [99, 150, 168, 179], "setpreserveposit": [99, 136, 155], "setnerhasnoschema": 99, "nercrf": 100, "nercrfapproach": [100, 101], "nercrfmodel": [100, 101], "crf": [100, 101], "2003": [100, 101, 139, 182, 202], "exclud": [100, 101], "setexternalfeatur": 100, "minepoch": [100, 101], "l2": 100, "c0": 100, "decai": [100, 101], "gradient": 100, "2250000": 100, "lossep": 100, "ep": 100, "minw": 100, "includeconfid": [100, 101], "confid": [100, 101, 103], "externalfeatur": 100, "nerdlapproach": [100, 101, 182, 202], "trainingdata": [100, 101, 115, 128, 129, 182], "readdataset": [100, 101, 112, 139, 182, 183, 185, 186, 187, 202], "conll2003": [100, 101, 182, 202], "eng": [100, 101, 182, 202], "setl2": 100, "l2valu": 100, "setc0": 100, "c0valu": 100, "setlossep": 100, "setminw": 100, "setincludeconfid": [100, 101], "verbosevalu": 100, "prerequisit": [100, 101, 102, 196], "nerdl": 101, "char": [101, 104, 115], "bilstm": 101, "tagger": [101, 185, 202], "50": [101, 102, 112, 119, 120, 187], "real": [101, 169, 176, 192], "rage": 101, "graphfold": [101, 126], "usecontrib": 101, "contrib": 101, "cell": [101, 153], "slightli": [101, 115], "includeallconfidencescor": 101, "enablememoryoptim": 101, "slow": 101, "usebestmodel": 101, "bestmodelmetr": 101, "micro": 101, "macro": 101, "setgraphfold": [101, 126, 132], "setusecontrib": 101, "setpo": 101, "setincludeallconfidencescor": 101, "setenablememoryoptim": 101, "setusebestmodel": 101, "setbestmodelmetr": 101, "nermodel": 101, "neroverwrit": 102, "setnewresult": 102, "nerword": 102, "overwritten": 102, "newnerent": 102, "lab": 102, "42": [102, 112], "45": [102, 112, 185, 187], "47": [102, 185, 187], "ner_overwritten": 102, "setnerword": 102, "setnewnerent": 102, "cardin": 102, "setreplaceent": 102, "rw": 102, "zeroshotnermodel": 103, "zeroshotn": 103, "zer_shot_n": 103, "entitydefinit": 103, "citi": 103, "town": 103, "predictionthreshold": 103, "01f": 103, "ignoreent": 103, "zero_shot_n": 103, "setentitydefinit": 103, "hellen": 103, "5328949": 103, "9360068": 103, "83294415": 103, "45366877": 103, "setpredictionthreshold": 103, "zero_shot_ner_roberta": 103, "shortcut": 103, "stem": [104, 130, 150, 179, 200, 201], "henc": 104, "pl": 104, "slangdictionari": 104, "slang": 104, "minlength": [104, 114, 115, 136, 137], "maxlength": [104, 114, 115, 136, 137], "setcleanuppattern": 104, "punctuat": [104, 114], "alphanumer": 104, "letter": [104, 120, 126, 185, 202], "za": 104, "z": [104, 137], "brother": 104, "dont": [104, 118], "setslangdictionari": 104, "setminlength": [104, 114, 115, 136, 137], "setmaxlength": [104, 114, 115, 136, 137], "normalizermodel": 104, "openaicomplet": 106, "py": [106, 107, 124, 156, 157, 165, 171, 175], "subclass": [106, 107, 124, 157, 171, 175], "ins": [106, 107, 124, 157, 175], "uid": [106, 107, 124, 157, 175], "setmodel": [106, 107, 115], "setsuffix": [106, 135], "suffix": [106, 135, 137, 196], "complet": [106, 176, 193, 196], "insert": [106, 128, 129, 196], "setmaxtoken": 106, "prompt": 106, "plu": [106, 120], "max_token": 106, "cannot": 106, "settemperatur": [106, 119, 120, 123, 163], "determinist": 106, "alter": 106, "settopp": [106, 119, 120, 123, 163], "nucleu": 106, "mass": 106, "compris": 106, "setnumberofcomplet": 106, "consum": 106, "quota": 106, "ensur": [106, 124, 171], "reason": 106, "setlogprob": 106, "logprob": 106, "respons": [106, 115], "setecho": 106, "echo": 106, "setstop": 106, "setpresencepenalti": 106, "penal": 106, "topic": 106, "setfrequencypenalti": 106, "frequenc": [106, 118, 126, 128, 129, 139], "decreas": 106, "verbatim": 106, "setbestof": 106, "best_of": 106, "server": [106, 201], "side": [106, 139], "control": [106, 119, 120, 122, 123, 124, 126, 163], "candid": [106, 126, 128, 129, 137], "setlogitbia": 106, "mathemat": 106, "ban": 106, "exclus": 106, "50256": 106, "prevent": 106, "endoftext": 106, "setus": [106, 107], "abus": [106, 107], "openaiembed": 107, "classifierencod": 108, "attach": [108, 109, 158, 163, 174, 176], "evaluationdlparam": 109, "setevaluationlogextend": 109, "setenableoutputlog": [109, 176, 192], "setoutputlogspath": [109, 115, 176, 192], "assum": 109, "perceptronapproach": [112, 185, 202], "member": [112, 179], "datasetpath": 112, "pierr": [112, 185], "vinken": [112, 185], "34": [112, 185, 187], "md": [112, 185], "vb": [112, 182, 185, 202], "41": [112, 114, 185, 187], "43": [112, 114, 185, 187], "dt": [112, 185, 186, 202], "49": [112, 185], "poscol": [112, 139, 182], "niter": [112, 139], "anc": [112, 185, 202], "trainingperceptrondf": 112, "trainedpo": 112, "setposcolumn": [112, 139], "cd": [112, 182, 185], "setiter": 112, "getniter": [112, 139], "pos_anc": 112, "25": [112, 114, 185, 187], "33": [112, 187], "sentencedetectorparam": 114, "ii": 114, "abbrevi": 114, "period": 114, "geo": 114, "1026": 114, "253": 114, "553": 114, "ellipsi": 114, "quotat": 114, "mark": [114, 115, 139], "exclam": 114, "breaker": 114, "pragmaticcontentformatt": 114, "custombound": [114, 115], "setcustombound": [114, 115], "usecustomboundsonli": [114, 115], "explodesent": [114, 115, 182, 183], "useabbrevi": 114, "explicitli": [114, 115, 131, 168, 196], "customboundsstrategi": 114, "prepend": [114, 141], "break": 114, "append": [114, 126, 196], "parallel": [114, 115, 150, 182, 200], "splitlength": [114, 115], "forcibli": [114, 115], "99999": [114, 115, 137], "detectlist": 114, "nhow": 114, "setcustomboundsstrategi": 114, "setuseabbrevi": 114, "setdetectlist": 114, "setusecustomboundsonli": [114, 115], "setexplodesent": [114, 115], "setsplitlength": [114, 115], "sentencedetectordl": [115, 122], "sentencedetectordlapproach": 115, "futur": [115, 119, 123], "sentencedetectordlmodel": [115, 122], "modelarchitectur": 115, "impossiblepenultim": 115, "imposs": [115, 139], "penultim": 115, "epochsnumb": 115, "eo": 115, "stefan": 115, "schweter": 115, "sajawel": 115, "ahm": 115, "littl": [115, 201], "cover": [115, 119, 123, 139], "broken": 115, "moder": 115, "lack": 115, "easier": [115, 144, 198, 202], "polit": 115, "successor": 115, "great": 115, "heritag": 115, "bequeath": 115, "nelson": 115, "mandela": 115, "setepochsnumb": 115, "model_architectur": 115, "validation_split": 115, "epochs_numb": 115, "output_logs_path": 115, "setimpossiblepenultim": 115, "impossible_penultim": 115, "sentencedl": 115, "sentencesdl": 115, "helen": 115, "total": [115, 139], "peopl": 115, "sentimentdetector": 117, "By": [117, 119, 123, 131, 136, 143, 169, 176, 192], "els": 117, "viveknsentimentapproach": [117, 118], "cool": 117, "superb": 117, "uninspir": 117, "sentimentscor": 117, "staff": 117, "restaur": 117, "nice": [117, 176, 192], "entri": [117, 142, 151, 180], "sttr": 117, "sentimentdetectormodel": 117, "sda": [117, 118], "pragmat": 117, "viveknsenti": 118, "analys": 118, "vivek": 118, "narayanan": 118, "give": 118, "transit": [118, 126], "sentimentcol": 118, "prunecorpu": 118, "unfrequ": 118, "scenario": 118, "scope": 118, "naiv": 118, "bay": 118, "vivekn": 118, "setsentimentcol": 118, "train_senti": 118, "result_senti": 118, "finish": [118, 124, 143, 145, 149, 152, 169], "final_senti": 118, "cast": [118, 140], "horribl": 118, "never": [118, 196], "go": [118, 196], "again": [118, 135], "anyon": 118, "protagonist": 118, "music": 118, "setprunecorpu": 118, "viveknsentimentmodel": 118, "sentiment_vivekn": 118, "barttransform": 119, "auto": [119, 132], "handl": [119, 166, 184], "captur": 119, "past": [119, 122, 180], "incorpor": 119, "versatil": 119, "valuabl": 119, "summari": [119, 120, 123], "distilbart_xsum_12_6": 119, "barttestspec": 119, "cumul": [119, 120, 123, 163], "ignoretokenid": [119, 120, 123], "usecach": 119, "especi": [119, 120, 122, 123], "ab": 119, "1910": 119, "13461": 119, "pytorch": 119, "fairseq": 119, "arbitrari": 119, "nois": 119, "reconstruct": [119, 155], "tranform": 119, "seen": 119, "randomli": 119, "fill": 119, "dialogu": 119, "roug": 119, "bleu": 119, "ablat": 119, "influenc": [119, 126], "setmaxoutputlength": [119, 120, 122, 123, 163], "200": [119, 123], "rich": [119, 123], "rise": [119, 123], "methodologi": [119, 123], "landscap": [119, 123], "unifi": [119, 123], "systemat": [119, 123], "dozen": [119, 123], "insight": [119, 123], "coloss": [119, 123], "facilit": [119, 123], "setignoretokenid": [119, 120, 122, 123], "setminoutputlength": [119, 120, 123, 163], "setdosampl": [119, 120, 123, 163], "settopk": [119, 120, 123, 163], "setrepetitionpenalti": [119, 120, 123, 163], "ctrl": [119, 120, 123, 163], "setnorepeatngrams": [119, 120, 123, 163], "setbeams": [119, 163], "setcach": 119, "use_cach": 119, "gpt2transform": 120, "gpt2": 120, "caus": [120, 137], "goal": [120, 139], "direct": 120, "10x": 120, "synthet": 120, "unpreced": 120, "prime": 120, "lengthi": 120, "benefit": 120, "suffici": 120, "learner": 120, "typic": 120, "taskspecif": 120, "webpag": [120, 193], "webtext": 120, "coqa": 120, "exceed": 120, "127": 120, "fashion": 120, "5b": 120, "underfit": 120, "reflect": 120, "paragraph": [120, 126], "promis": 120, "leonardo": 120, "man": 120, "1776": 120, "came": 120, "kingdom": 120, "mariantransform": 122, "marian": 122, "free": 122, "mainli": 122, "academ": 122, "notabl": 122, "edinburgh": 122, "adam": 122, "mickiewicz": 122, "pozna\u0144": 122, "commerci": 122, "contributor": 122, "mariannmt": 122, "engin": [122, 133], "behind": 122, "deploi": [122, 193], "opus_mt_en_fr": 122, "langid": 122, "maxinputlength": 122, "differenti": 122, "toolkit": 122, "setmaxinputlength": 122, "capit": [122, 126], "franc": 122, "quell": 122, "capital": 122, "devrait": 122, "savoir": 122, "fran\u00e7ai": 122, "setlangid": 122, "t5transform": 123, "t5": 123, "reconsid": 123, "hyper": 123, "t5_small": 123, "documentsimilarityrank": 124, "documentsimilarityrankerapproach": 124, "setsimilaritymethod": 124, "neighbour": 124, "brp": 124, "bucket": 124, "euclidean": 124, "setnumberofneighbour": 124, "setbucketlength": 124, "hash": 124, "setnumhasht": 124, "setvisibledist": 124, "visibl": 124, "setidentityrank": 124, "ident": 124, "inclus": 124, "debug": 124, "documentsimilarityrankermodel": 124, "documentsimilarityrankerfinish": 124, "_java_obj": [124, 171], "setextractnearestneighbor": 124, "getinputcol": [124, 132, 143, 144, 158], "getoutputcol": [124, 140, 142, 143, 144, 148, 151, 158], "document_similarity_rank": 125, "contextspellcheck": 126, "contextspellcheckerapproach": [126, 128, 129], "noisi": 126, "spell": [126, 127, 128, 129, 150, 155, 199, 200, 201], "contextspellcheckermodel": [126, 128, 129], "error": 126, "surround": [126, 153], "edit": [126, 128, 129], "subword": 126, "checker": [126, 128, 129, 199], "languagemodelclass": 126, "lm": 126, "wordmaxdist": 126, "maxcandid": 126, "casestrategi": 126, "uppercas": 126, "errorthreshold": 126, "perplex": 126, "nlm": 126, "initialr": 126, "finalr": 126, "validationfract": 126, "datapoint": 126, "min": 126, "vocab": 126, "compoundcount": 126, "compound": 126, "classcount": 126, "tradeoff": 126, "weighteddistpath": 126, "levenshtein": [126, 128, 129], "maxwindowlen": 126, "rememb": 126, "maxsentlen": 126, "norvigsweetingapproach": [126, 128, 129, 202], "symmetricdeleteapproach": [126, 128, 129, 202], "depth": [126, 199], "explan": [126, 199], "awar": 126, "sherlock": 126, "holm": 126, "spellcheck": [126, 128, 129], "setwordmaxdist": 126, "setepoch": 126, "setlanguagemodelclass": 126, "1650": 126, "addvocabclass": 126, "_name_": 126, "extra": [126, 128, 196], "dist": 126, "setmaxcandid": 126, "setcasestrategi": 126, "seterrorthreshold": 126, "setinitialr": 126, "setfinalr": 126, "setvalidationfract": 126, "fraction": 126, "setcompoundcount": 126, "setclasscount": 126, "settradeoff": 126, "alpha": 126, "setweighteddistpath": 126, "setmaxwindowlen": 126, "setmaxsentlen": 126, "sentlen": 126, "userdist": 126, "addregexclass": 126, "spellcheck_dl": 126, "gamma": 126, "decis": 126, "correctsymbol": 126, "comparelowcas": 126, "vocabfreq": 126, "idsvocab": 126, "vocabid": 126, "usenewlin": 126, "newlin": 126, "norvigsweetingmodel": [126, 128, 129], "symmetricdeletemodel": [126, 128, 129], "doc": [126, 186, 202], "cold": 126, "dreari": 126, "countri": 126, "white": 126, "smow": 126, "setweight": 126, "setgamma": 126, "setvocabfreq": 126, "setidsvocab": 126, "setvocabid": 126, "setclass": 126, "getwordclass": 126, "updateregexclass": 126, "updat": 126, "updatevocabclass": 126, "setcorrectsymbol": 126, "setcomparelowcas": 126, "norvigsweet": 128, "norvig": 128, "bayesian": 128, "tokenpattern": 128, "sensit": [128, 131, 137], "doublevari": 128, "shortcircuit": 128, "frequencyprior": 128, "ham": 128, "intersect": 128, "prioriti": [128, 137], "wordsizeignor": 128, "dupslimit": 128, "duplic": 128, "reductlimit": 128, "attempt": 128, "vowelswaplimit": 128, "vowel": 128, "swap": 128, "corrector": 128, "gummi": [128, 129], "gummic": [128, 129], "gummier": [128, 129], "gummiest": [128, 129], "gummifer": [128, 129], "basi": [128, 129], "token_pattern": [128, 129], "setdoublevari": 128, "setshortcircuit": 128, "setfrequencyprior": 128, "symmetr": [128, 129], "delet": [128, 129, 196], "damerau": [128, 129], "transpos": [128, 129], "spellcheck_norvig": 128, "symspel": [128, 129], "somtim": 128, "wrrite": [128, 129], "wordz": [128, 129], "erong": [128, 129], "sometim": [128, 129, 196], "wrong": [128, 129], "symmetricdelet": 129, "deriv": 129, "teach": 129, "maxeditdist": 129, "frequencythreshold": [129, 139], "deletesthreshold": 129, "patttern": 129, "setmaxeditdist": 129, "setfrequencythreshold": [129, 139], "setdeletesthreshold": 129, "spellcheck_sd": 129, "spmetim": 129, "hard": 130, "employ": 130, "stopwordsclean": [131, 143, 155], "mllib": [131, 193], "stopwordsremov": 131, "cleantoken": [131, 143, 155], "stopwords_en": 131, "jvm": [131, 169], "forth": 131, "setlocal": 131, "tfnerdlgraphbuildermodel": 132, "tfnerdlgraphbuild": 132, "sethiddenunitsnumb": 132, "assertiondlapproach": 132, "medicalnerapproach": 132, "gethiddenunitsnumb": 132, "srt": 132, "getgraphfold": 132, "setgraphfil": 132, "greaph": 132, "getgraphfil": 132, "chunktoken": 133, "flatten": 133, "artist": 133, "benezar": 133, "robert": 133, "farendel": 133, "graduat": 133, "luca": 133, "chunktokenizermodel": 133, "recursivetoken": 135, "recurs": [135, 152, 165, 169, 173], "infix": [135, 137], "she": 135, "qam": 135, "setprefix": 135, "setinfix": 135, "recursivetokenizermodel": 135, "regextoken": [136, 139, 197], "whitespac": [136, 139, 141], "tolowercas": [136, 139], "positionalmask": 136, "guarante": 136, "increment": 136, "trimwhitespac": 136, "flag": 136, "eventu": 136, "settolowercas": [136, 139], "nthi": 136, "setpositionalmask": 136, "settrimwhitespac": 136, "tokenizedsent": 137, "rulefactori": [137, 162], "targetpattern": 137, "grab": 137, "prefixpattern": 137, "suffixpattern": 137, "infixpattern": 137, "sub": 137, "won": 137, "exceptionspath": 137, "casesensitiveexcept": 137, "contextchar": 137, "splitpattern": 137, "splitchar": 137, "didn": 137, "jane": 137, "boyfriend": 137, "getinfixpattern": 137, "getsuffixpattern": 137, "getprefixpattern": 137, "getcontextchar": 137, "getsplitchar": 137, "settargetpattern": 137, "setprefixpattern": 137, "setsuffixpattern": 137, "setinfixpattern": 137, "addinfixpattern": 137, "setexcept": 137, "getexcept": 137, "setexceptionspath": 137, "addexcept": 137, "setcasesensitiveexcept": 137, "getcasesensitiveexcept": 137, "addcontextchar": 137, "setsplitpattern": 137, "setsplitchar": 137, "addsplitchar": 137, "piec": 137, "token_rul": 137, "wordsegment": 139, "wordsegmenterapproach": 139, "korean": 139, "japanes": 139, "chines": 139, "correspond": [139, 176], "rr": 139, "likewis": 139, "themselv": 139, "\u4e0a\u6d77": 139, "\u8ba1\u5212": 139, "\u5230": 139, "\u672c": 139, "\u4e16\u7eaa": 139, "\u672b": 139, "\u5b9e\u73b0": 139, "\u4eba\u5747": 139, "\u56fd\u5185": 139, "\u751f\u4ea7": 139, "\u603b\u503c": 139, "\u4e94\u5343": 139, "\u7f8e\u5143": 139, "\u4e0a": 139, "\u6d77": 139, "\u8ba1": 139, "\u5212": 139, "\u4e16": 139, "\u7eaa": 139, "\u5b9e": 139, "\u73b0": 139, "\u4eba": 139, "\u5747": 139, "\u56fd": 139, "\u5185": 139, "\u751f": 139, "\u4ea7": 139, "\u603b": 139, "ll\u503c": 139, "\u4e94": 139, "\u5343": 139, "\u7f8e": 139, "\u5143": 139, "shanghai": 139, "plan": 139, "dollar": 139, "capita": 139, "gdp": 139, "wordsegmentermodel": 139, "tip": 139, "frame": 139, "least": 139, "frequent": 139, "ambiguitythreshold": 139, "enableregextoken": 139, "xue": 139, "nianwen": 139, "volum": 139, "februari": 139, "aclweb": 139, "aclanthologi": 139, "o03": 139, "4002": 139, "chinese_train": 139, "utf8": 139, "\u5341": 139, "\u56db": 139, "\u4e0d": 139, "\u662f": 139, "setniter": 139, "trainingdataset": 139, "setambiguitythreshold": 139, "getfrequencythreshold": 139, "getambiguitythreshold": 139, "setenableregextoken": 139, "plit": 139, "words_seg": 139, "wordseg_pku": 139, "zh": 139, "\u7136\u800c": 139, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 139, "\u9019\u6a23": 139, "\u7684": 139, "\u8655\u7406": 139, "\u4e5f": 139, "\u884d\u751f": 139, "\u4e86": 139, "\u4e00\u4e9b": 139, "\u554f\u984c": 139, "prepar": [140, 142, 148, 151], "outputcol": [140, 142, 143, 144, 145, 148, 151], "inferschema": 140, "tmp": [140, 148, 169, 192], "librispeech_asr_dummy_clean_audio_array_parquet": 140, "float_arrai": 140, "chunkcol": 141, "stringtyp": 141, "setisarrai": 141, "startcol": 141, "startcolbytokenindex": 141, "isarrai": 141, "failonmiss": 141, "fail": 141, "chunkassembl": 141, "setchunkcol": 141, "setstartcol": 141, "setstartcolbytokenindex": 141, "setfailonmiss": 141, "disabl": [142, 151], "idcol": [142, 151], "metadatacol": [142, 151], "cleanupmod": [142, 151], "cleanup": [142, 151], "inplac": [142, 151], "inplace_ful": [142, 151], "shrink_ful": [142, 151], "each_ful": [142, 151], "delete_ful": [142, 151], "setidcol": [142, 151], "setmetadatacol": [142, 151], "usabl": 143, "lda": 143, "forest": 143, "featurecol": 143, "cleanannot": [143, 144, 145], "outputasvector": 143, "gloveembed": 143, "finished_sentence_embed": 143, "resultwiths": 143, "1619900017976761": 143, "045552998781204224": 143, "03229299932718277": 143, "685609996318": 143, "42416998744010925": 143, "1378999948501587": 143, "5717899799346924": 143, "5078899860382": 143, "08621499687433243": 143, "15772999823093414": 143, "06067200005054474": 143, "395359992980": 143, "4970499873161316": 143, "7164199948310852": 143, "40119001269340515": 143, "05761000141501": 143, "08170200139284134": 143, "7159299850463867": 143, "20677000284194946": 143, "0295659992843": 143, "valuesplitsymbol": 144, "annotationsplitsymbol": 144, "includemetadata": 144, "outputasarrai": [144, 145], "parseembeddingsvector": 144, "setvaluesplitsymbol": 144, "setannotationsplitsymbol": 144, "setincludemetadata": [144, 197], "setoutputasarrai": [144, 145], "setparseembeddingsvector": 144, "finishedresult": 145, "hasrecursivefit": [146, 147], "java_obj": [146, 172, 175], "py4j": [146, 147, 175], "java_gatewai": [146, 147, 175], "javaobject": [146, 147, 175], "recursivepipelin": [146, 147, 152, 158], "hasrecursivetransform": 147, "doc2_chunk": [149, 169], "embeddings_finish": [149, 169], "graph_finish": [149, 169], "has_recursive_fit": [149, 169], "has_recursive_transform": [149, 169], "light_pipelin": [149, 169], "recursive_pipelin": [149, 169], "token2_chunk": [149, 169], "token_assembl": [149, 169], "lightpipelin": [150, 179, 200], "parse_embed": [150, 179], "execut": [150, 196, 200], "hold": [150, 200], "principl": [150, 200], "everyth": [150, 200, 201], "fullannot": [150, 179], "happi": [150, 195, 197, 200, 201], "prp": [150, 183, 185, 195, 200, 201, 202], "rb": [150, 185, 195, 200, 201, 202], "optional_target": [150, 179], "explain_document_pipelin": [150, 168, 179, 195, 200, 201], "dict_kei": [150, 179], "fullannotateimag": [150, 179], "path_to_imag": [150, 179], "setignoreunsupport": 150, "unsupport": 150, "annotatormodel": [150, 157, 180], "getignoreunsupport": 150, "text2": 151, "document1": 151, "document2": 151, "arg": [152, 172], "kwarg": 152, "decid": 152, "behav": 152, "exactli": 152, "intent": 152, "recursivepipelinemodel": 152, "pipeline_model": [152, 176, 192], "intend": 152, "tab": [153, 176, 192], "escap": 153, "quot": 153, "inputformat": 153, "csvdelimit": 153, "defailt": 153, "comma": 153, "escapecsvdelimit": 153, "table_csv": 153, "csv_data": 153, "input_format": 153, "setcsvdelimit": 153, "setescapecsvdelimit": 153, "token2chunk": 154, "17": [154, 185, 187], "tokenassembl": 155, "cleantext": 155, "opensourc": 155, "annotatorapproach": [156, 165, 176], "annotatorproperti": 158, "setlazyannot": 158, "lazili": 158, "getlazyannot": 158, "annotator_approach": [161, 169], "annotator_model": [161, 169], "annotator_properti": [161, 169], "coverage_result": [161, 169], "match_strategi": [161, 169], "recursive_annotator_approach": [161, 169], "regard": 162, "constant": [162, 164], "hasembeddingsproperti": 163, "getdimens": 163, "setnreturnsequ": 163, "recursiveannotatorapproach": 165, "fo": 167, "assist": 168, "map_annot": 168, "f": [168, 176, 192], "output_typ": 168, "udf": 168, "userdefinedfunct": 168, "def": 168, "nnp_token": 168, "lambda": 168, "alia": 168, "epeu": 168, "map_annotations_arrai": 168, "map_annotations_strict": 168, "map_annotations_col": 168, "output_column": 168, "annotatyon_typ": 168, "chunks_df": 168, "pos_chunk": 168, "vbz": [168, 182, 202], "filter_by_annotations_col": 168, "filter_po": 168, "explode_annotations_col": 168, "annotator_java_ml": [169, 173], "annotator_transform": [169, 173], "extended_java_wrapp": [169, 173], "params_getters_sett": [169, 173], "comet": [169, 177, 194], "pretrained_pipelin": [169, 178], "resource_download": [169, 178], "pub_tat": [169, 184], "annotation_audio": 169, "annotation_imag": 169, "apple_silicon": 169, "aarch64": 169, "cache_fold": 169, "log_fold": 169, "cluster_tmp_dir": 169, "real_time_output": 169, "output_level": 169, "correctli": 169, "maco": 169, "linux": 169, "alloc": 169, "directori": [169, 180, 192], "cache_pretrain": 169, "temporarili": 169, "unpack": 169, "hadoop": 169, "dir": 169, "s3": [169, 180], "hdf": 169, "dbf": 169, "annotator_log": 169, "annotatorjavamlread": 170, "mixin": 170, "javamlread": 170, "classmethod": 170, "mlreader": 170, "clazz": 170, "rl": 170, "javaparam": 170, "annotatortransform": 171, "javawrapp": 172, "extendedjavawrapp": 172, "new_java_arrai": 172, "pylist": 172, "java_class": 172, "todo": 172, "paramsgetterssett": 174, "getparamvalu": 174, "paramnam": 174, "setparamvalu": 174, "recursiveestim": 175, "overrid": 175, "recursivetransform": 175, "cometlogg": [176, 192], "workspac": 176, "project_nam": [176, 192], "comet_mod": [176, 192], "experiment_id": 176, "experiment_kwarg": 176, "logger": [176, 192], "meta": [176, 194], "practition": [176, 192], "reliabl": [176, 192], "streamlin": [176, 192], "lifecycl": [176, 192, 194], "track": [176, 192, 193], "reproduc": [176, 192, 193], "outputlogpath": [176, 192], "onlin": [176, 192], "reus": 176, "importerror": 176, "output_log_path": [176, 192], "embd": [176, 192], "setshuffleperepoch": [176, 192], "logdir": [176, 192], "interfac": [176, 192, 200], "attribut": 176, "comet_ml": [176, 192], "log_pipeline_paramet": [176, 192], "log_visu": [176, 192], "html": [176, 192], "viz": [176, 192], "upload": 176, "colum": [176, 192], "ner_chunk": [176, 192], "sparknlp_displai": [176, 192], "nervisu": [176, 192], "idx": [176, 192], "enumer": [176, 192], "label_col": [176, 192], "document_col": [176, 192], "return_html": [176, 192], "log_metr": [176, 192], "sklearn": [176, 192], "preprocess": [176, 192], "multilabelbinar": [176, 192], "classification_report": [176, 192], "preds_df": [176, 192], "topanda": [176, 192], "mlb": [176, 192], "y_true": [176, 192], "fit_transform": [176, 192], "y_pred": [176, 192], "output_dict": [176, 192], "log_paramet": 176, "log_completed_run": 176, "log_file_path": 176, "log_asset": 176, "asset_path": 176, "asset": 176, "log_asset_data": 176, "interv": 176, "refresh": 176, "outstand": 176, "disk_loc": 179, "light_model": 179, "gather": 179, "resourcedownload": [180, 196, 201], "showpublicmodel": [180, 196], "onto_100": 180, "onto_300": 180, "ner_dl_bert": 180, "similarli": 180, "showpublicpipelin": [180, 201], "check_spel": [180, 201], "match_datetim": [180, 201], "downloadmodel": 180, "reader": 180, "j_dwn": 180, "pythonresourcedownload": 180, "downloadmodeldirectli": 180, "unzip": 180, "downloadpipelin": 180, "clearcach": 180, "clear": 180, "argument": 180, "filer": 180, "showuncategorizedresourc": 180, "yet": 180, "showavailableannot": 180, "documentcol": [182, 183], "sentencecol": [182, 183], "tokencol": 182, "conlllabelindex": 182, "conllposindex": 182, "conlldocidcol": 182, "doc_id": [182, 186], "textcol": [182, 183], "labelcol": 182, "includedocid": 182, "docstart": [182, 202], "eu": [182, 202], "np": [182, 202], "reject": [182, 202], "vp": [182, 202], "misc": [182, 202], "boycott": [182, 202], "british": [182, 202], "lamb": [182, 202], "blackburn": 182, "brussel": 182, "1996": 182, "08": 182, "storage_level": 182, "storagelevel": 182, "disk_onli": 182, "lift": 182, "persist": 182, "uposcol": 183, "upo": 183, "xposcol": 183, "xpo": 183, "lemmacol": 183, "sent_id": 183, "sell": 183, "pron": 183, "nom": 183, "plur": 183, "_": 183, "tens": 183, "conj": 183, "cc": 183, "obj": 183, "spaceaft": 183, "No": [183, 195], "punct": 183, "conllufil": [183, 202], "conlldataset": [183, 202], "morph": 183, "Into": 183, "googleo": 183, "sconj": 183, "propn": 183, "adp": 183, "wp": 183, "vbd": [183, 185, 202], "ago": [185, 202], "receiv": [185, 202], "posdf": 185, "61": 185, "67": [185, 186, 202], "nonexecut": 185, "69": 185, "76": 185, "director": 185, "78": 185, "81": 185, "84": 185, "outputposcol": 185, "outputdocumentcol": 185, "outputtextcol": 185, "pubtat": [186, 199], "medic": [186, 202], "titl": [186, 202], "medment": [186, 202], "25763772": [186, 202], "dctn4": [186, 202], "t116": [186, 202], "t123": [186, 202], "c4308010": [186, 202], "63": [186, 202], "chronic": [186, 202], "pseudomona": [186, 202], "aeruginosa": [186, 202], "infect": [186, 202], "t047": [186, 202], "c0854135": [186, 202], "82": [186, 202], "cystic": [186, 202], "fibrosi": [186, 202], "c0010674": [186, 202], "120": [186, 202], "pa": [186, 202], "124": [186, 202], "139": [186, 202], "pubtatorfil": 186, "corpus_pubtator_sampl": 186, "pubtatordataset": 186, "finished_token": [186, 197], "finished_po": 186, "finished_n": 186, "finished_token_metadata": 186, "finished_pos_metadata": 186, "finished_label_metadata": 186, "mo": 186, "ispaddedtoken": 186, "pad": 186, "spacytoannot": 187, "token_spac": 187, "sentence_end": 187, "spaci": 187, "multi_doc_token": 187, "went": 187, "night": 187, "bought": 187, "bread": 187, "54": 187, "overview": [191, 199], "workflow": 192, "dedic": 192, "account": 192, "inspect": 192, "init": 192, "sparknlp_experi": 192, "offline_directori": 192, "later": 192, "nativ": 193, "record": 193, "registri": 193, "central": 193, "send": 194, "messag": 194, "mlflow": 194, "content": [195, 201], "clearli": 195, "explain_document_ml": [195, 200, 201], "approx": [195, 200, 201], "mb": [195, 200, 201], "ok": [195, 200, 201], "spearhead": 196, "produc": 196, "declar": 196, "accordingli": 196, "extra_loc": 196, "offer": [196, 198, 201], "classifierdl_use_trec50": 196, "classifierdl_use_spam": 196, "column_nam": 196, "preced": 196, "interchang": 197, "anoth": 197, "road": 197, "proce": 197, "At": 197, "sens": 201, "constantli": 201, "train_po": 202, "training_conl": 202, "train_corpu": 202, "withcolumnrenam": 202, "trainingpubtatordf": 202, "corpus_pubt": 202}, "objects": {"": [[169, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [84, 0, 0, "-", "annotator"], [149, 0, 0, "-", "base"], [161, 0, 0, "-", "common"], [168, 0, 0, "-", "functions"], [173, 0, 0, "-", "internal"], [177, 0, 0, "-", "logging"], [178, 0, 0, "-", "pretrained"], [169, 3, 1, "", "start"], [184, 0, 0, "-", "training"], [189, 0, 0, "-", "upload_to_hub"], [190, 0, 0, "-", "util"], [169, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [30, 0, 0, "-", "classifier_dl"], [47, 0, 0, "-", "coref"], [50, 0, 0, "-", "cv"], [53, 0, 0, "-", "date2_chunk"], [55, 0, 0, "-", "dependency"], [57, 0, 0, "-", "document_normalizer"], [68, 0, 0, "-", "embeddings"], [82, 0, 0, "-", "er"], [83, 0, 0, "-", "graph_extraction"], [85, 0, 0, "-", "keyword_extraction"], [87, 0, 0, "-", "ld_dl"], [89, 0, 0, "-", "lemmatizer"], [92, 0, 0, "-", "matcher"], [96, 0, 0, "-", "n_gram_generator"], [97, 0, 0, "-", "ner"], [104, 0, 0, "-", "normalizer"], [105, 0, 0, "-", "openai"], [110, 0, 0, "-", "param"], [111, 0, 0, "-", "pos"], [113, 0, 0, "-", "sentence"], [116, 0, 0, "-", "sentiment"], [121, 0, 0, "-", "seq2seq"], [125, 0, 0, "-", "similarity"], [127, 0, 0, "-", "spell_check"], [130, 0, 0, "-", "stemmer"], [131, 0, 0, "-", "stop_words_cleaner"], [132, 0, 0, "-", "tf_ner_dl_graph_builder"], [134, 0, 0, "-", "token"], [138, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "distil_bert_for_question_answering"], [27, 0, 0, "-", "distil_bert_for_sequence_classification"], [28, 0, 0, "-", "distil_bert_for_token_classification"], [29, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [31, 0, 0, "-", "longformer_for_question_answering"], [32, 0, 0, "-", "longformer_for_sequence_classification"], [33, 0, 0, "-", "longformer_for_token_classification"], [34, 0, 0, "-", "multi_classifier_dl"], [35, 0, 0, "-", "roberta_for_question_answering"], [36, 0, 0, "-", "roberta_for_sequence_classification"], [37, 0, 0, "-", "roberta_for_token_classification"], [38, 0, 0, "-", "roberta_for_zero_shot_classification"], [39, 0, 0, "-", "sentiment_dl"], [40, 0, 0, "-", "tapas_for_question_answering"], [41, 0, 0, "-", "xlm_roberta_for_question_answering"], [42, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [43, 0, 0, "-", "xlm_roberta_for_token_classification"], [44, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [45, 0, 0, "-", "xlnet_for_sequence_classification"], [46, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, 1, 1, "", "MultiClassifierDLApproach"], [34, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[34, 2, 1, "", "setThreshold"], [34, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, 1, 1, "", "SentimentDLApproach"], [39, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[39, 2, 1, "", "setDropout"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[48, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSegmentLength"], [48, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[49, 0, 0, "-", "convnext_for_image_classification"], [51, 0, 0, "-", "swin_for_image_classification"], [52, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setCropPct"], [49, 2, 1, "", "setDoRescale"], [49, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setDoRescale"], [51, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.vit_for_image_classification": [[52, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[52, 2, 1, "", "getClasses"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[53, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[53, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[54, 0, 0, "-", "dependency_parser"], [56, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[54, 1, 1, "", "DependencyParserApproach"], [54, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[54, 2, 1, "", "setConllU"], [54, 2, 1, "", "setDependencyTreeBank"], [54, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[54, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[56, 1, 1, "", "TypedDependencyParserApproach"], [56, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[56, 2, 1, "", "setConll2009"], [56, 2, 1, "", "setConllU"], [56, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[56, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[57, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[57, 2, 1, "", "setAction"], [57, 2, 1, "", "setEncoding"], [57, 2, 1, "", "setLowercase"], [57, 2, 1, "", "setPatterns"], [57, 2, 1, "", "setPolicy"], [57, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[58, 0, 0, "-", "albert_embeddings"], [59, 0, 0, "-", "bert_embeddings"], [60, 0, 0, "-", "bert_sentence_embeddings"], [61, 0, 0, "-", "camembert_embeddings"], [62, 0, 0, "-", "chunk_embeddings"], [63, 0, 0, "-", "deberta_embeddings"], [64, 0, 0, "-", "distil_bert_embeddings"], [65, 0, 0, "-", "doc2vec"], [66, 0, 0, "-", "e5_embeddings"], [67, 0, 0, "-", "elmo_embeddings"], [69, 0, 0, "-", "instructor_embeddings"], [70, 0, 0, "-", "longformer_embeddings"], [71, 0, 0, "-", "mpnet_embeddings"], [72, 0, 0, "-", "roberta_embeddings"], [73, 0, 0, "-", "roberta_sentence_embeddings"], [74, 0, 0, "-", "sentence_embeddings"], [75, 0, 0, "-", "universal_sentence_encoder"], [76, 0, 0, "-", "word2vec"], [77, 0, 0, "-", "word_embeddings"], [78, 0, 0, "-", "xlm_roberta_embeddings"], [79, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [80, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[58, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[59, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[60, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"], [60, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[61, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[62, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[62, 2, 1, "", "setPoolingStrategy"], [62, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[63, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[64, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[65, 1, 1, "", "Doc2VecApproach"], [65, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[65, 2, 1, "", "setMaxIter"], [65, 2, 1, "", "setMaxSentenceLength"], [65, 2, 1, "", "setMinCount"], [65, 2, 1, "", "setNumPartitions"], [65, 2, 1, "", "setSeed"], [65, 2, 1, "", "setStepSize"], [65, 2, 1, "", "setVectorSize"], [65, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[65, 2, 1, "", "getVectors"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[66, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[67, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setBatchSize"], [67, 2, 1, "", "setConfigProtoBytes"], [67, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[69, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"], [69, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[70, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[71, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[72, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[73, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[74, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[74, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[75, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"], [75, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[76, 1, 1, "", "Word2VecApproach"], [76, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[76, 2, 1, "", "setMaxIter"], [76, 2, 1, "", "setMaxSentenceLength"], [76, 2, 1, "", "setMinCount"], [76, 2, 1, "", "setNumPartitions"], [76, 2, 1, "", "setSeed"], [76, 2, 1, "", "setStepSize"], [76, 2, 1, "", "setVectorSize"], [76, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[76, 2, 1, "", "getVectors"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[77, 1, 1, "", "WordEmbeddings"], [77, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[77, 2, 1, "", "setReadCacheSize"], [77, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[77, 2, 1, "", "loadStorage"], [77, 2, 1, "", "overallCoverage"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setReadCacheSize"], [77, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[78, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[79, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[80, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[81, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[81, 1, 1, "", "EntityRulerApproach"], [81, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[81, 2, 1, "", "setAlphabetResource"], [81, 2, 1, "", "setPatternsResource"], [81, 2, 1, "", "setSentenceMatch"], [81, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[83, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[83, 2, 1, "", "setDelimiter"], [83, 2, 1, "", "setDependencyParserModel"], [83, 2, 1, "", "setEntityTypes"], [83, 2, 1, "", "setExplodeEntities"], [83, 2, 1, "", "setIncludeEdges"], [83, 2, 1, "", "setMaxSentenceSize"], [83, 2, 1, "", "setMergeEntities"], [83, 2, 1, "", "setMergeEntitiesIOBFormat"], [83, 2, 1, "", "setMinSentenceSize"], [83, 2, 1, "", "setPosModel"], [83, 2, 1, "", "setRelationshipTypes"], [83, 2, 1, "", "setRootTokens"], [83, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[86, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[86, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[86, 2, 1, "", "getStopWords"], [86, 2, 1, "", "loadDefaultStopWords"], [86, 2, 1, "", "setMaxNGrams"], [86, 2, 1, "", "setMinNGrams"], [86, 2, 1, "", "setNKeywords"], [86, 2, 1, "", "setStopWords"], [86, 2, 1, "", "setThreshold"], [86, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[88, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[88, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setCoalesceSentences"], [88, 2, 1, "", "setConfigProtoBytes"], [88, 2, 1, "", "setThreshold"], [88, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[89, 1, 1, "", "Lemmatizer"], [89, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[89, 2, 1, "", "setDictionary"], [89, 2, 1, "", "setFormCol"], [89, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[89, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[90, 0, 0, "-", "big_text_matcher"], [91, 0, 0, "-", "date_matcher"], [93, 0, 0, "-", "multi_date_matcher"], [94, 0, 0, "-", "regex_matcher"], [95, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[90, 1, 1, "", "BigTextMatcher"], [90, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[90, 2, 1, "", "setCaseSensitive"], [90, 2, 1, "", "setEntities"], [90, 2, 1, "", "setMergeOverlapping"], [90, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[90, 2, 1, "", "loadStorage"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setCaseSensitive"], [90, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[91, 1, 1, "", "DateMatcher"], [91, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[91, 2, 1, "", "setAnchorDateDay"], [91, 2, 1, "", "setAnchorDateMonth"], [91, 2, 1, "", "setAnchorDateYear"], [91, 2, 1, "", "setDefaultDayWhenMissing"], [91, 2, 1, "", "setInputFormats"], [91, 2, 1, "", "setOutputFormat"], [91, 2, 1, "", "setReadMonthFirst"], [91, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[93, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[94, 1, 1, "", "RegexMatcher"], [94, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[94, 2, 1, "", "setDelimiter"], [94, 2, 1, "", "setExternalRules"], [94, 2, 1, "", "setRules"], [94, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[95, 1, 1, "", "TextMatcher"], [95, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[95, 2, 1, "", "setBuildFromTokens"], [95, 2, 1, "", "setCaseSensitive"], [95, 2, 1, "", "setEntities"], [95, 2, 1, "", "setEntityValue"], [95, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setBuildFromTokens"], [95, 2, 1, "", "setEntityValue"], [95, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[96, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[96, 2, 1, "", "setDelimiter"], [96, 2, 1, "", "setEnableCumulative"], [96, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[98, 0, 0, "-", "ner_approach"], [99, 0, 0, "-", "ner_converter"], [100, 0, 0, "-", "ner_crf"], [101, 0, 0, "-", "ner_dl"], [102, 0, 0, "-", "ner_overwriter"], [103, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[98, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[98, 2, 1, "", "getLabelColumn"], [98, 2, 1, "", "setEntities"], [98, 2, 1, "", "setLabelColumn"], [98, 2, 1, "", "setMaxEpochs"], [98, 2, 1, "", "setMinEpochs"], [98, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[99, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[99, 2, 1, "", "setNerHasNoSchema"], [99, 2, 1, "", "setPreservePosition"], [99, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[100, 1, 1, "", "NerCrfApproach"], [100, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[100, 2, 1, "", "setC0"], [100, 2, 1, "", "setExternalFeatures"], [100, 2, 1, "", "setIncludeConfidence"], [100, 2, 1, "", "setL2"], [100, 2, 1, "", "setLossEps"], [100, 2, 1, "", "setMinW"], [100, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[101, 1, 1, "", "NerDLApproach"], [101, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[101, 2, 1, "", "setBatchSize"], [101, 2, 1, "", "setBestModelMetric"], [101, 2, 1, "", "setConfigProtoBytes"], [101, 2, 1, "", "setDropout"], [101, 2, 1, "", "setEnableMemoryOptimizer"], [101, 2, 1, "", "setGraphFolder"], [101, 2, 1, "", "setIncludeAllConfidenceScores"], [101, 2, 1, "", "setIncludeConfidence"], [101, 2, 1, "", "setLr"], [101, 2, 1, "", "setPo"], [101, 2, 1, "", "setUseBestModel"], [101, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setConfigProtoBytes"], [101, 2, 1, "", "setIncludeAllConfidenceScores"], [101, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[102, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[102, 2, 1, "", "setNerWords"], [102, 2, 1, "", "setNewNerEntity"], [102, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[103, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[103, 2, 1, "", "getClasses"], [103, 2, 1, "", "load"], [103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setEntityDefinitions"], [103, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[104, 1, 1, "", "Normalizer"], [104, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[104, 2, 1, "", "setCleanupPatterns"], [104, 2, 1, "", "setLowercase"], [104, 2, 1, "", "setMaxLength"], [104, 2, 1, "", "setMinLength"], [104, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[106, 0, 0, "-", "openai_completion"], [107, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[106, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[106, 2, 1, "", "setBestOf"], [106, 2, 1, "", "setEcho"], [106, 2, 1, "", "setFrequencyPenalty"], [106, 2, 1, "", "setLogitBias"], [106, 2, 1, "", "setLogprobs"], [106, 2, 1, "", "setMaxTokens"], [106, 2, 1, "", "setModel"], [106, 2, 1, "", "setNumberOfCompletions"], [106, 2, 1, "", "setPresencePenalty"], [106, 2, 1, "", "setStop"], [106, 2, 1, "", "setSuffix"], [106, 2, 1, "", "setTemperature"], [106, 2, 1, "", "setTopP"], [106, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[107, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[107, 2, 1, "", "setModel"], [107, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[108, 0, 0, "-", "classifier_encoder"], [109, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[108, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[108, 2, 1, "", "setBatchSize"], [108, 2, 1, "", "setConfigProtoBytes"], [108, 2, 1, "", "setLabelColumn"], [108, 2, 1, "", "setLr"], [108, 2, 1, "", "setMaxEpochs"], [108, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[109, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[109, 2, 1, "", "setEnableOutputLogs"], [109, 2, 1, "", "setEvaluationLogExtended"], [109, 2, 1, "", "setOutputLogsPath"], [109, 2, 1, "", "setTestDataset"], [109, 2, 1, "", "setValidationSplit"], [109, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[112, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[112, 1, 1, "", "PerceptronApproach"], [112, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[112, 2, 1, "", "getNIterations"], [112, 2, 1, "", "setIterations"], [112, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[112, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[114, 0, 0, "-", "sentence_detector"], [115, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[114, 1, 1, "", "SentenceDetector"], [114, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[114, 2, 1, "", "setCustomBounds"], [114, 2, 1, "", "setCustomBoundsStrategy"], [114, 2, 1, "", "setDetectLists"], [114, 2, 1, "", "setExplodeSentences"], [114, 2, 1, "", "setMaxLength"], [114, 2, 1, "", "setMinLength"], [114, 2, 1, "", "setSplitLength"], [114, 2, 1, "", "setUseAbbreviations"], [114, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[115, 1, 1, "", "SentenceDetectorDLApproach"], [115, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[115, 2, 1, "", "setEpochsNumber"], [115, 2, 1, "", "setExplodeSentences"], [115, 2, 1, "", "setImpossiblePenultimates"], [115, 2, 1, "", "setModel"], [115, 2, 1, "", "setOutputLogsPath"], [115, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[115, 2, 1, "", "pretrained"], [115, 2, 1, "", "setCustomBounds"], [115, 2, 1, "", "setExplodeSentences"], [115, 2, 1, "", "setImpossiblePenultimates"], [115, 2, 1, "", "setMaxLength"], [115, 2, 1, "", "setMinLength"], [115, 2, 1, "", "setModel"], [115, 2, 1, "", "setSplitLength"], [115, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[117, 0, 0, "-", "sentiment_detector"], [118, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[117, 1, 1, "", "SentimentDetector"], [117, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[117, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[118, 1, 1, "", "ViveknSentimentApproach"], [118, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[118, 2, 1, "", "setPruneCorpus"], [118, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[118, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[119, 0, 0, "-", "bart_transformer"], [120, 0, 0, "-", "gpt2_transformer"], [122, 0, 0, "-", "marian_transformer"], [123, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[119, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[119, 2, 1, "", "loadSavedModel"], [119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setBeamSize"], [119, 2, 1, "", "setCache"], [119, 2, 1, "", "setConfigProtoBytes"], [119, 2, 1, "", "setDoSample"], [119, 2, 1, "", "setIgnoreTokenIds"], [119, 2, 1, "", "setMaxOutputLength"], [119, 2, 1, "", "setMinOutputLength"], [119, 2, 1, "", "setNoRepeatNgramSize"], [119, 2, 1, "", "setRepetitionPenalty"], [119, 2, 1, "", "setTask"], [119, 2, 1, "", "setTemperature"], [119, 2, 1, "", "setTopK"], [119, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[120, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[120, 2, 1, "", "loadSavedModel"], [120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setConfigProtoBytes"], [120, 2, 1, "", "setDoSample"], [120, 2, 1, "", "setIgnoreTokenIds"], [120, 2, 1, "", "setMaxOutputLength"], [120, 2, 1, "", "setMinOutputLength"], [120, 2, 1, "", "setNoRepeatNgramSize"], [120, 2, 1, "", "setRepetitionPenalty"], [120, 2, 1, "", "setTask"], [120, 2, 1, "", "setTemperature"], [120, 2, 1, "", "setTopK"], [120, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[122, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[122, 2, 1, "", "loadSavedModel"], [122, 2, 1, "", "pretrained"], [122, 2, 1, "", "setConfigProtoBytes"], [122, 2, 1, "", "setIgnoreTokenIds"], [122, 2, 1, "", "setLangId"], [122, 2, 1, "", "setMaxInputLength"], [122, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[123, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[123, 2, 1, "", "loadSavedModel"], [123, 2, 1, "", "pretrained"], [123, 2, 1, "", "setConfigProtoBytes"], [123, 2, 1, "", "setDoSample"], [123, 2, 1, "", "setIgnoreTokenIds"], [123, 2, 1, "", "setMaxOutputLength"], [123, 2, 1, "", "setMinOutputLength"], [123, 2, 1, "", "setNoRepeatNgramSize"], [123, 2, 1, "", "setRepetitionPenalty"], [123, 2, 1, "", "setTask"], [123, 2, 1, "", "setTemperature"], [123, 2, 1, "", "setTopK"], [123, 2, 1, "", "setTopP"]], "sparknlp.annotator.similarity": [[124, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[124, 1, 1, "", "DocumentSimilarityRankerApproach"], [124, 1, 1, "", "DocumentSimilarityRankerFinisher"], [124, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[124, 2, 1, "", "setBucketLength"], [124, 2, 1, "", "setIdentityRanking"], [124, 2, 1, "", "setNumHashTables"], [124, 2, 1, "", "setNumberOfNeighbours"], [124, 2, 1, "", "setSimilarityMethod"], [124, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[124, 2, 1, "", "getInputCols"], [124, 2, 1, "", "getOutputCols"], [124, 2, 1, "", "setExtractNearestNeighbor"], [124, 2, 1, "", "setInputCols"], [124, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[126, 0, 0, "-", "context_spell_checker"], [128, 0, 0, "-", "norvig_sweeting"], [129, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[126, 1, 1, "", "ContextSpellCheckerApproach"], [126, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[126, 2, 1, "", "addRegexClass"], [126, 2, 1, "", "addVocabClass"], [126, 2, 1, "", "setBatchSize"], [126, 2, 1, "", "setCaseStrategy"], [126, 2, 1, "", "setClassCount"], [126, 2, 1, "", "setCompoundCount"], [126, 2, 1, "", "setConfigProtoBytes"], [126, 2, 1, "", "setEpochs"], [126, 2, 1, "", "setErrorThreshold"], [126, 2, 1, "", "setFinalRate"], [126, 2, 1, "", "setGraphFolder"], [126, 2, 1, "", "setInitialRate"], [126, 2, 1, "", "setLanguageModelClasses"], [126, 2, 1, "", "setMaxCandidates"], [126, 2, 1, "", "setMaxSentLen"], [126, 2, 1, "", "setMaxWindowLen"], [126, 2, 1, "", "setMinCount"], [126, 2, 1, "", "setTradeoff"], [126, 2, 1, "", "setValidationFraction"], [126, 2, 1, "", "setWeightedDistPath"], [126, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[126, 2, 1, "", "getWordClasses"], [126, 2, 1, "", "pretrained"], [126, 2, 1, "", "setCaseStrategy"], [126, 2, 1, "", "setClasses"], [126, 2, 1, "", "setCompareLowcase"], [126, 2, 1, "", "setConfigProtoBytes"], [126, 2, 1, "", "setCorrectSymbols"], [126, 2, 1, "", "setErrorThreshold"], [126, 2, 1, "", "setGamma"], [126, 2, 1, "", "setIdsVocab"], [126, 2, 1, "", "setMaxCandidates"], [126, 2, 1, "", "setMaxWindowLen"], [126, 2, 1, "", "setTradeoff"], [126, 2, 1, "", "setVocabFreq"], [126, 2, 1, "", "setVocabIds"], [126, 2, 1, "", "setWeights"], [126, 2, 1, "", "setWordMaxDistance"], [126, 2, 1, "", "updateRegexClass"], [126, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[128, 1, 1, "", "NorvigSweetingApproach"], [128, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[128, 2, 1, "", "setCaseSensitive"], [128, 2, 1, "", "setDictionary"], [128, 2, 1, "", "setDoubleVariants"], [128, 2, 1, "", "setFrequencyPriority"], [128, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[128, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[129, 1, 1, "", "SymmetricDeleteApproach"], [129, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[129, 2, 1, "", "setDeletesThreshold"], [129, 2, 1, "", "setDictionary"], [129, 2, 1, "", "setFrequencyThreshold"], [129, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[129, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[130, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[131, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[131, 2, 1, "", "loadDefaultStopWords"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setCaseSensitive"], [131, 2, 1, "", "setLocale"], [131, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[132, 1, 1, "", "TFNerDLGraphBuilder"], [132, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[132, 2, 1, "", "getGraphFile"], [132, 2, 1, "", "getGraphFolder"], [132, 2, 1, "", "getHiddenUnitsNumber"], [132, 2, 1, "", "getInputCols"], [132, 2, 1, "", "getLabelColumn"], [132, 2, 1, "", "setGraphFile"], [132, 2, 1, "", "setGraphFolder"], [132, 2, 1, "", "setHiddenUnitsNumber"], [132, 2, 1, "", "setInputCols"], [132, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[133, 0, 0, "-", "chunk_tokenizer"], [135, 0, 0, "-", "recursive_tokenizer"], [136, 0, 0, "-", "regex_tokenizer"], [137, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[133, 1, 1, "", "ChunkTokenizer"], [133, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[135, 1, 1, "", "RecursiveTokenizer"], [135, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[135, 2, 1, "", "setInfixes"], [135, 2, 1, "", "setPrefixes"], [135, 2, 1, "", "setSuffixes"], [135, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[136, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[136, 2, 1, "", "setMaxLength"], [136, 2, 1, "", "setMinLength"], [136, 2, 1, "", "setPattern"], [136, 2, 1, "", "setPositionalMask"], [136, 2, 1, "", "setPreservePosition"], [136, 2, 1, "", "setToLowercase"], [136, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[137, 1, 1, "", "Tokenizer"], [137, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[137, 2, 1, "", "addContextChars"], [137, 2, 1, "", "addException"], [137, 2, 1, "", "addInfixPattern"], [137, 2, 1, "", "addSplitChars"], [137, 2, 1, "", "getCaseSensitiveExceptions"], [137, 2, 1, "", "getContextChars"], [137, 2, 1, "", "getExceptions"], [137, 2, 1, "", "getInfixPatterns"], [137, 2, 1, "", "getPrefixPattern"], [137, 2, 1, "", "getSplitChars"], [137, 2, 1, "", "getSuffixPattern"], [137, 2, 1, "", "setCaseSensitiveExceptions"], [137, 2, 1, "", "setContextChars"], [137, 2, 1, "", "setExceptions"], [137, 2, 1, "", "setExceptionsPath"], [137, 2, 1, "", "setInfixPatterns"], [137, 2, 1, "", "setMaxLength"], [137, 2, 1, "", "setMinLength"], [137, 2, 1, "", "setPrefixPattern"], [137, 2, 1, "", "setSplitChars"], [137, 2, 1, "", "setSplitPattern"], [137, 2, 1, "", "setSuffixPattern"], [137, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[137, 2, 1, "", "addSplitChars"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setSplitChars"], [137, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.ws": [[139, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[139, 1, 1, "", "WordSegmenterApproach"], [139, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[139, 2, 1, "", "getAmbiguityThreshold"], [139, 2, 1, "", "getFrequencyThreshold"], [139, 2, 1, "", "getNIterations"], [139, 2, 1, "", "setAmbiguityThreshold"], [139, 2, 1, "", "setEnableRegexTokenizer"], [139, 2, 1, "", "setFrequencyThreshold"], [139, 2, 1, "", "setNIterations"], [139, 2, 1, "", "setPattern"], [139, 2, 1, "", "setPosColumn"], [139, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[139, 2, 1, "", "pretrained"], [139, 2, 1, "", "setEnableRegexTokenizer"], [139, 2, 1, "", "setPattern"], [139, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[140, 0, 0, "-", "audio_assembler"], [141, 0, 0, "-", "doc2_chunk"], [142, 0, 0, "-", "document_assembler"], [143, 0, 0, "-", "embeddings_finisher"], [144, 0, 0, "-", "finisher"], [145, 0, 0, "-", "graph_finisher"], [146, 0, 0, "-", "has_recursive_fit"], [147, 0, 0, "-", "has_recursive_transform"], [148, 0, 0, "-", "image_assembler"], [150, 0, 0, "-", "light_pipeline"], [151, 0, 0, "-", "multi_document_assembler"], [152, 0, 0, "-", "recursive_pipeline"], [153, 0, 0, "-", "table_assembler"], [154, 0, 0, "-", "token2_chunk"], [155, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[140, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[140, 2, 1, "", "getOutputCol"], [140, 2, 1, "", "setInputCol"], [140, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[141, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[141, 2, 1, "", "setChunkCol"], [141, 2, 1, "", "setFailOnMissing"], [141, 2, 1, "", "setIsArray"], [141, 2, 1, "", "setLowerCase"], [141, 2, 1, "", "setStartCol"], [141, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[142, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[142, 2, 1, "", "getOutputCol"], [142, 2, 1, "", "setCleanupMode"], [142, 2, 1, "", "setIdCol"], [142, 2, 1, "", "setInputCol"], [142, 2, 1, "", "setMetadataCol"], [142, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[143, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[143, 2, 1, "", "getInputCols"], [143, 2, 1, "", "getOutputCols"], [143, 2, 1, "", "setCleanAnnotations"], [143, 2, 1, "", "setInputCols"], [143, 2, 1, "", "setOutputAsVector"], [143, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[144, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[144, 2, 1, "", "getInputCols"], [144, 2, 1, "", "getOutputCols"], [144, 2, 1, "", "setAnnotationSplitSymbol"], [144, 2, 1, "", "setCleanAnnotations"], [144, 2, 1, "", "setIncludeMetadata"], [144, 2, 1, "", "setInputCols"], [144, 2, 1, "", "setOutputAsArray"], [144, 2, 1, "", "setOutputCols"], [144, 2, 1, "", "setParseEmbeddingsVectors"], [144, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[145, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[145, 2, 1, "", "setCleanAnnotations"], [145, 2, 1, "", "setInputCol"], [145, 2, 1, "", "setOutputAsArray"], [145, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[146, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[147, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[148, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[148, 2, 1, "", "getOutputCol"], [148, 2, 1, "", "setInputCol"], [148, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[150, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[150, 2, 1, "", "annotate"], [150, 2, 1, "", "fullAnnotate"], [150, 2, 1, "", "fullAnnotateImage"], [150, 2, 1, "", "getIgnoreUnsupported"], [150, 2, 1, "", "setIgnoreUnsupported"], [150, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[151, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[151, 2, 1, "", "getOutputCols"], [151, 2, 1, "", "setCleanupMode"], [151, 2, 1, "", "setIdCol"], [151, 2, 1, "", "setInputCols"], [151, 2, 1, "", "setMetadataCol"], [151, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[152, 1, 1, "", "RecursivePipeline"], [152, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[153, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[153, 2, 1, "", "setCsvDelimiter"], [153, 2, 1, "", "setEscapeCsvDelimiter"], [153, 2, 1, "", "setInputFormat"]], "sparknlp.base.token2_chunk": [[154, 1, 1, "", "Token2Chunk"]], "sparknlp.base.token_assembler": [[155, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[155, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[156, 0, 0, "-", "annotator_approach"], [157, 0, 0, "-", "annotator_model"], [158, 0, 0, "-", "annotator_properties"], [159, 0, 0, "-", "annotator_type"], [160, 0, 0, "-", "coverage_result"], [162, 0, 0, "-", "match_strategy"], [163, 0, 0, "-", "properties"], [164, 0, 0, "-", "read_as"], [165, 0, 0, "-", "recursive_annotator_approach"], [166, 0, 0, "-", "storage"], [167, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[156, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[157, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[158, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[158, 2, 1, "", "getInputCols"], [158, 2, 1, "", "getLazyAnnotator"], [158, 2, 1, "", "getOutputCol"], [158, 2, 1, "", "setInputCols"], [158, 2, 1, "", "setLazyAnnotator"], [158, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[162, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[163, 1, 1, "", "HasEmbeddingsProperties"], [163, 3, 1, "", "setBeamSize"], [163, 3, 1, "", "setDoSample"], [163, 3, 1, "", "setMaxOutputLength"], [163, 3, 1, "", "setMinOutputLength"], [163, 3, 1, "", "setNReturnSequences"], [163, 3, 1, "", "setNoRepeatNgramSize"], [163, 3, 1, "", "setRepetitionPenalty"], [163, 3, 1, "", "setTask"], [163, 3, 1, "", "setTemperature"], [163, 3, 1, "", "setTopK"], [163, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[163, 2, 1, "", "getDimension"], [163, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[164, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[165, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[167, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[168, 3, 1, "", "explode_annotations_col"], [168, 3, 1, "", "filter_by_annotations_col"], [168, 3, 1, "", "map_annotations"], [168, 3, 1, "", "map_annotations_array"], [168, 3, 1, "", "map_annotations_col"], [168, 3, 1, "", "map_annotations_cols"], [168, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[170, 0, 0, "-", "annotator_java_ml"], [171, 0, 0, "-", "annotator_transformer"], [172, 0, 0, "-", "extended_java_wrapper"], [174, 0, 0, "-", "params_getters_setters"], [175, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[170, 1, 1, "", "AnnotatorJavaMLReadable"], [170, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[170, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[171, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[172, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[172, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[174, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[174, 2, 1, "", "getParamValue"], [174, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[175, 1, 1, "", "RecursiveEstimator"], [175, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[175, 2, 1, "", "fit"]], "sparknlp.logging": [[176, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[176, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[176, 2, 1, "", "end"], [176, 2, 1, "", "log_asset"], [176, 2, 1, "", "log_asset_data"], [176, 2, 1, "", "log_completed_run"], [176, 2, 1, "", "log_metrics"], [176, 2, 1, "", "log_parameters"], [176, 2, 1, "", "log_pipeline_parameters"], [176, 2, 1, "", "log_visualization"], [176, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[179, 0, 0, "-", "pretrained_pipeline"], [180, 0, 0, "-", "resource_downloader"], [181, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[179, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[179, 2, 1, "", "annotate"], [179, 2, 1, "", "fullAnnotate"], [179, 2, 1, "", "fullAnnotateImage"], [179, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[180, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[180, 2, 1, "", "clearCache"], [180, 2, 1, "", "downloadModel"], [180, 2, 1, "", "downloadModelDirectly"], [180, 2, 1, "", "downloadPipeline"], [180, 2, 1, "", "showAvailableAnnotators"], [180, 2, 1, "", "showPublicModels"], [180, 2, 1, "", "showPublicPipelines"], [180, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[182, 0, 0, "-", "conll"], [183, 0, 0, "-", "conllu"], [185, 0, 0, "-", "pos"], [186, 0, 0, "-", "pub_tator"], [187, 0, 0, "-", "spacy_to_annotation"], [188, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[182, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[182, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[183, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[183, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[185, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[185, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[186, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[186, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[187, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 197], "start": 0, "spark": [0, 1, 192, 197, 201], "nlp": [0, 1, 192, 201], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 192], "us": [0, 192, 201], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 182, 183, 185, 186, 187], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 195, 196, 197], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 167, 168, 170, 171, 172, 174, 175, 176, 179, 180, 182, 183, 185, 186, 187, 191], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 170, 171, 172, 174, 175, 176, 179, 180, 182, 183, 185, 186, 187], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 30, 47, 50, 55, 68, 82, 84, 85, 87, 92, 97, 105, 111, 113, 116, 121, 125, 127, 134, 138, 149, 161, 169, 173, 177, 178, 184], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "distil_bert_for_question_answ": 26, "distil_bert_for_sequence_classif": 27, "distil_bert_for_token_classif": 28, "distil_bert_for_zero_shot_classif": 29, "longformer_for_question_answ": 31, "longformer_for_sequence_classif": 32, "longformer_for_token_classif": 33, "multi_classifier_dl": 34, "roberta_for_question_answ": 35, "roberta_for_sequence_classif": 36, "roberta_for_token_classif": 37, "roberta_for_zero_shot_classif": 38, "sentiment_dl": 39, "tapas_for_question_answ": 40, "xlm_roberta_for_question_answ": 41, "xlm_roberta_for_sequence_classif": 42, "xlm_roberta_for_token_classif": 43, "xlm_roberta_for_zero_shot_classif": 44, "xlnet_for_sequence_classif": 45, "xlnet_for_token_classif": 46, "coref": [47, 48], "spanbert_coref": 48, "cv": [49, 50, 51, 52], "convnext_for_image_classif": 49, "swin_for_image_classif": 51, "vit_for_image_classif": 52, "date2_chunk": 53, "depend": [54, 55, 56], "dependency_pars": 54, "typed_dependency_pars": 56, "document_norm": 57, "embed": [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "albert_embed": 58, "bert_embed": 59, "bert_sentence_embed": 60, "camembert_embed": 61, "chunk_embed": 62, "deberta_embed": 63, "distil_bert_embed": 64, "doc2vec": 65, "e5_embed": 66, "elmo_embed": 67, "instructor_embed": 69, "longformer_embed": 70, "mpnet_embed": 71, "roberta_embed": 72, "roberta_sentence_embed": 73, "sentence_embed": 74, "universal_sentence_encod": 75, "word2vec": 76, "word_embed": 77, "xlm_roberta_embed": 78, "xlm_roberta_sentence_embed": 79, "xlnet_embed": 80, "er": [81, 82], "entity_rul": 81, "graph_extract": 83, "subpackag": [84, 169], "keyword_extract": [85, 86], "yake_keyword_extract": 86, "ld_dl": [87, 88], "language_detector_dl": 88, "lemmat": 89, "matcher": [90, 91, 92, 93, 94, 95], "big_text_match": 90, "date_match": 91, "multi_date_match": 93, "regex_match": 94, "text_match": 95, "n_gram_gener": 96, "ner": [97, 98, 99, 100, 101, 102, 103], "ner_approach": 98, "ner_convert": 99, "ner_crf": 100, "ner_dl": 101, "ner_overwrit": 102, "zero_shot_ner_model": 103, "normal": 104, "openai": [105, 106, 107], "openai_complet": 106, "openai_embed": 107, "param": [108, 109, 110], "classifier_encod": 108, "evaluation_dl_param": 109, "po": [111, 112, 185, 202], "perceptron": 112, "sentenc": [113, 114, 115, 197], "sentence_detector": 114, "sentence_detector_dl": 115, "sentiment": [116, 117, 118], "sentiment_detector": 117, "vivekn_senti": 118, "seq2seq": [119, 120, 121, 122, 123], "bart_transform": 119, "gpt2_transform": 120, "marian_transform": 122, "t5_transform": 123, "similar": [124, 125], "document_similarity_rank": 124, "spell_check": [126, 127, 128, 129], "context_spell_check": 126, "norvig_sweet": 128, "symmetric_delet": 129, "stemmer": 130, "stop_words_clean": 131, "tf_ner_dl_graph_build": 132, "token": [133, 134, 135, 136, 137, 197], "chunk_token": 133, "recursive_token": 135, "regex_token": 136, "w": [138, 139], "word_segment": 139, "base": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "audio_assembl": 140, "doc2_chunk": 141, "document_assembl": 142, "embeddings_finish": 143, "finish": [144, 197], "graph_finish": 145, "has_recursive_fit": 146, "has_recursive_transform": 147, "image_assembl": 148, "light_pipelin": 150, "multi_document_assembl": 151, "recursive_pipelin": 152, "table_assembl": 153, "token2_chunk": 154, "token_assembl": 155, "common": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 196], "annotator_approach": 156, "annotator_model": 157, "annotator_properti": 158, "annotator_typ": 159, "coverage_result": 160, "match_strategi": 162, "properti": 163, "function": [163, 167, 168, 169, 196, 198], "read_a": 164, "recursive_annotator_approach": 165, "storag": 166, "util": [167, 181, 190], "packag": 169, "intern": [170, 171, 172, 173, 174, 175], "annotator_java_ml": 170, "annotator_transform": 171, "extended_java_wrapp": 172, "params_getters_sett": 174, "recurs": 175, "log": [176, 177, 192, 194], "comet": [176, 192], "pretrain": [178, 179, 180, 181, 196, 200, 201], "pretrained_pipelin": 179, "resource_download": 180, "train": [182, 183, 184, 185, 186, 187, 188, 202], "conll": [182, 202], "conllu": [183, 202], "pub_tat": 186, "spacy_to_annot": 187, "tfgraph": 188, "upload_to_hub": 189, "api": 191, "refer": 191, "A": 192, "meta": 192, "machin": [192, 193], "learn": [192, 193], "platform": [192, 193], "pipelin": [192, 197, 200, 201], "paramet": 192, "evalu": 192, "metric": 192, "visual": 192, "run": 192, "an": 192, "offlin": 192, "experi": 192, "mlflow": 193, "lifecycl": 193, "third": 194, "parti": 194, "project": 194, "approach": 196, "model": 196, "note": 196, "avail": [196, 201], "set": 197, "up": 197, "your": 197, "own": 197, "type": 197, "necessari": 197, "import": 197, "construct": 197, "documentassembl": 197, "data": 197, "detect": 197, "out": 197, "put": 197, "all": 197, "togeth": 197, "ml": [197, 201], "helper": 198, "user": 199, "guid": 199, "light": 200, "convert": 200, "pipelinemodel": 200, "download": 201, "As": 201, "lightpipelin": 201, "load": 202, "dataset": 202, "spell": 202, "checker": 202, "pubtat": 202}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [192, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [83, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [83, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [187, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [30, "submodules"], [47, "submodules"], [50, "submodules"], [55, "submodules"], [68, "submodules"], [82, "submodules"], [84, "submodules"], [85, "submodules"], [87, "submodules"], [92, "submodules"], [97, "submodules"], [105, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [121, "submodules"], [125, "submodules"], [127, "submodules"], [134, "submodules"], [138, "submodules"], [149, "submodules"], [161, "submodules"], [169, "submodules"], [173, "submodules"], [177, "submodules"], [178, "submodules"], [184, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vit_for_image_classification": [[52, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[53, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[54, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[55, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[56, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_normalizer": [[57, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.embeddings.albert_embeddings": [[58, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[59, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[60, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[61, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[62, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[63, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[64, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[65, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[66, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[67, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[68, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[69, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[70, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[71, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[73, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[75, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[76, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[77, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[78, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[79, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[80, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[81, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[82, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[83, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[84, "module-sparknlp.annotator"]], "Subpackages": [[84, "subpackages"], [169, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[85, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[86, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[87, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[88, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[89, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[90, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[91, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[92, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[93, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[94, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[95, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[96, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[97, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[98, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[99, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[100, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[101, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[102, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[103, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[104, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[105, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[106, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[107, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[108, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[109, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[110, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[111, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[112, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[113, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[114, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[115, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[116, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[117, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[118, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[119, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[120, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[121, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[122, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[123, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[124, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[125, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[126, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[127, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[128, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[129, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[130, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[131, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[132, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[133, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[134, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[135, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[136, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[137, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[138, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[139, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[140, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[141, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[142, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[143, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[144, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[145, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[146, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[147, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[148, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[149, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[150, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[151, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[152, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[153, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token2_chunk": [[154, "module-sparknlp.base.token2_chunk"]], "sparknlp.base.token_assembler": [[155, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[156, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[157, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[158, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[159, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[160, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[161, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[162, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[163, "module-sparknlp.common.properties"]], "Functions": [[163, "functions"], [167, "functions"], [168, "functions"], [169, "functions"]], "sparknlp.common.read_as": [[164, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[165, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[166, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[167, "module-sparknlp.common.utils"]], "sparknlp.functions": [[168, "module-sparknlp.functions"]], "sparknlp": [[169, "module-sparknlp"]], "Package Contents": [[169, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[170, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[171, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[172, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[173, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[174, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[175, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[176, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[177, "module-sparknlp.logging"]], "sparknlp.pretrained": [[178, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[179, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[180, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[181, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[182, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[183, "module-sparknlp.training.conllu"]], "sparknlp.training": [[184, "module-sparknlp.training"]], "sparknlp.training.pos": [[185, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[186, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[187, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[188, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[189, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[190, "module-sparknlp.util"]], "API Reference": [[191, "api-reference"]], "Modules": [[191, "modules"]], "Comet - A meta machine learning platform": [[192, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[192, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[192, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[192, "logging-evaluation-metrics"]], "Logging Visualizations": [[192, "logging-visualizations"]], "Running An Offline Experiment": [[192, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[193, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[194, "third-party-projects"]], "Logging": [[194, "logging"]], "Annotation": [[195, "annotation"]], "Annotators": [[196, "annotators"]], "Annotator Approaches": [[196, "annotator-approaches"]], "Annotator Models": [[196, "annotator-models"]], "Note": [[196, "note"]], "Pretrained Models": [[196, "pretrained-models"]], "Common Functions": [[196, "common-functions"]], "Available Annotators": [[196, "available-annotators"]], "Setting up your own pipeline": [[197, "setting-up-your-own-pipeline"]], "Annotator types": [[197, "annotator-types"]], "Necessary imports": [[197, "necessary-imports"]], "Constructing the Pipeline": [[197, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[197, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[197, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[197, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[197, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[198, "helper-functions"]], "User Guide": [[199, "user-guide"]], "Light Pipelines": [[200, "light-pipelines"]], "Converting PipelineModels": [[200, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[200, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[201, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[201, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[201, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[201, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[201, "available-pipelines"]], "Loading datasets for training": [[202, "loading-datasets-for-training"]], "POS Dataset": [[202, "pos-dataset"]], "CoNLL Dataset": [[202, "conll-dataset"]], "CoNLLU Dataset": [[202, "conllu-dataset"]], "Spell Checkers Dataset": [[202, "spell-checkers-dataset"]], "PubTator Dataset": [[202, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [47, "module-sparknlp.annotator.coref"], [48, "module-sparknlp.annotator.coref.spanbert_coref"], [49, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [50, "module-sparknlp.annotator.cv"], [51, "module-sparknlp.annotator.cv.swin_for_image_classification"], [52, "module-sparknlp.annotator.cv.vit_for_image_classification"], [53, "module-sparknlp.annotator.date2_chunk"], [54, "module-sparknlp.annotator.dependency.dependency_parser"], [55, "module-sparknlp.annotator.dependency"], [56, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [57, "module-sparknlp.annotator.document_normalizer"], [58, "module-sparknlp.annotator.embeddings.albert_embeddings"], [59, "module-sparknlp.annotator.embeddings.bert_embeddings"], [60, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [61, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [62, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [63, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [64, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [65, "module-sparknlp.annotator.embeddings.doc2vec"], [66, "module-sparknlp.annotator.embeddings.e5_embeddings"], [67, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [68, "module-sparknlp.annotator.embeddings"], [69, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [70, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [71, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [72, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [73, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [74, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [75, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [76, "module-sparknlp.annotator.embeddings.word2vec"], [77, "module-sparknlp.annotator.embeddings.word_embeddings"], [78, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [79, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [80, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [81, "module-sparknlp.annotator.er.entity_ruler"], [82, "module-sparknlp.annotator.er"], [83, "module-sparknlp.annotator.graph_extraction"], [84, "module-sparknlp.annotator"], [85, "module-sparknlp.annotator.keyword_extraction"], [86, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [87, "module-sparknlp.annotator.ld_dl"], [88, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [89, "module-sparknlp.annotator.lemmatizer"], [90, "module-sparknlp.annotator.matcher.big_text_matcher"], [91, "module-sparknlp.annotator.matcher.date_matcher"], [92, "module-sparknlp.annotator.matcher"], [93, "module-sparknlp.annotator.matcher.multi_date_matcher"], [94, "module-sparknlp.annotator.matcher.regex_matcher"], [95, "module-sparknlp.annotator.matcher.text_matcher"], [96, "module-sparknlp.annotator.n_gram_generator"], [97, "module-sparknlp.annotator.ner"], [98, "module-sparknlp.annotator.ner.ner_approach"], [99, "module-sparknlp.annotator.ner.ner_converter"], [100, "module-sparknlp.annotator.ner.ner_crf"], [101, "module-sparknlp.annotator.ner.ner_dl"], [102, "module-sparknlp.annotator.ner.ner_overwriter"], [103, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [104, "module-sparknlp.annotator.normalizer"], [105, "module-sparknlp.annotator.openai"], [106, "module-sparknlp.annotator.openai.openai_completion"], [107, "module-sparknlp.annotator.openai.openai_embeddings"], [108, "module-sparknlp.annotator.param.classifier_encoder"], [109, "module-sparknlp.annotator.param.evaluation_dl_params"], [110, "module-sparknlp.annotator.param"], [111, "module-sparknlp.annotator.pos"], [112, "module-sparknlp.annotator.pos.perceptron"], [113, "module-sparknlp.annotator.sentence"], [114, "module-sparknlp.annotator.sentence.sentence_detector"], [115, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [116, "module-sparknlp.annotator.sentiment"], [117, "module-sparknlp.annotator.sentiment.sentiment_detector"], [118, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [119, "module-sparknlp.annotator.seq2seq.bart_transformer"], [120, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [121, "module-sparknlp.annotator.seq2seq"], [122, "module-sparknlp.annotator.seq2seq.marian_transformer"], [123, "module-sparknlp.annotator.seq2seq.t5_transformer"], [124, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [125, "module-sparknlp.annotator.similarity"], [126, "module-sparknlp.annotator.spell_check.context_spell_checker"], [127, "module-sparknlp.annotator.spell_check"], [128, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [129, "module-sparknlp.annotator.spell_check.symmetric_delete"], [130, "module-sparknlp.annotator.stemmer"], [131, "module-sparknlp.annotator.stop_words_cleaner"], [132, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [133, "module-sparknlp.annotator.token.chunk_tokenizer"], [134, "module-sparknlp.annotator.token"], [135, "module-sparknlp.annotator.token.recursive_tokenizer"], [136, "module-sparknlp.annotator.token.regex_tokenizer"], [137, "module-sparknlp.annotator.token.tokenizer"], [138, "module-sparknlp.annotator.ws"], [139, "module-sparknlp.annotator.ws.word_segmenter"], [140, "module-sparknlp.base.audio_assembler"], [141, "module-sparknlp.base.doc2_chunk"], [142, "module-sparknlp.base.document_assembler"], [143, "module-sparknlp.base.embeddings_finisher"], [144, "module-sparknlp.base.finisher"], [145, "module-sparknlp.base.graph_finisher"], [146, "module-sparknlp.base.has_recursive_fit"], [147, "module-sparknlp.base.has_recursive_transform"], [148, "module-sparknlp.base.image_assembler"], [149, "module-sparknlp.base"], [150, "module-sparknlp.base.light_pipeline"], [151, "module-sparknlp.base.multi_document_assembler"], [152, "module-sparknlp.base.recursive_pipeline"], [153, "module-sparknlp.base.table_assembler"], [154, "module-sparknlp.base.token2_chunk"], [155, "module-sparknlp.base.token_assembler"], [156, "module-sparknlp.common.annotator_approach"], [157, "module-sparknlp.common.annotator_model"], [158, "module-sparknlp.common.annotator_properties"], [159, "module-sparknlp.common.annotator_type"], [160, "module-sparknlp.common.coverage_result"], [161, "module-sparknlp.common"], [162, "module-sparknlp.common.match_strategy"], [163, "module-sparknlp.common.properties"], [164, "module-sparknlp.common.read_as"], [165, "module-sparknlp.common.recursive_annotator_approach"], [166, "module-sparknlp.common.storage"], [167, "module-sparknlp.common.utils"], [168, "module-sparknlp.functions"], [169, "module-sparknlp"], [170, "module-sparknlp.internal.annotator_java_ml"], [171, "module-sparknlp.internal.annotator_transformer"], [172, "module-sparknlp.internal.extended_java_wrapper"], [173, "module-sparknlp.internal"], [174, "module-sparknlp.internal.params_getters_setters"], [175, "module-sparknlp.internal.recursive"], [176, "module-sparknlp.logging.comet"], [177, "module-sparknlp.logging"], [178, "module-sparknlp.pretrained"], [179, "module-sparknlp.pretrained.pretrained_pipeline"], [180, "module-sparknlp.pretrained.resource_downloader"], [181, "module-sparknlp.pretrained.utils"], [182, "module-sparknlp.training.conll"], [183, "module-sparknlp.training.conllu"], [184, "module-sparknlp.training"], [185, "module-sparknlp.training.pos"], [186, "module-sparknlp.training.pub_tator"], [187, "module-sparknlp.training.spacy_to_annotation"], [188, "module-sparknlp.training.tfgraphs"], [189, "module-sparknlp.upload_to_hub"], [190, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[49, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[49, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[50, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "setdorescale() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setDoRescale"]], "setrescalefactor() (swinforimageclassification method)": [[51, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[51, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[52, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[52, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[52, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[52, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[52, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[52, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[53, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[53, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[53, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[54, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[54, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[54, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[54, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[54, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[55, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[56, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[56, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[56, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[56, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[57, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[57, "module-sparknlp.annotator.document_normalizer"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[58, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[58, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[58, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[58, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[58, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[59, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[59, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[59, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[59, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[59, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[60, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[60, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[60, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[60, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[60, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[60, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[61, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[61, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[61, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[61, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[61, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[62, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[62, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[62, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[62, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[63, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[63, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[63, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[63, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[63, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[64, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[64, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[64, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[64, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[64, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[65, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[65, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[66, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[66, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[66, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[66, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[66, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[67, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[67, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[67, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[67, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[67, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[67, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[67, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[68, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[69, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[69, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[69, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[69, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[69, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[69, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[70, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[70, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[70, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[70, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[70, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[71, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[71, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[71, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[71, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[71, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[72, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[72, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[73, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[73, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[73, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[73, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[73, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[74, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[74, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[74, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[75, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[75, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[75, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[75, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[75, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[75, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[76, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[76, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[77, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[77, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[78, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[78, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[78, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[78, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[78, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[79, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[79, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[80, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[80, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[80, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[80, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[80, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[81, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[81, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[81, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[81, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[81, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[81, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[81, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[82, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[83, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[83, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[84, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[85, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[86, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[86, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[87, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[88, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[88, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[88, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[88, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[88, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[88, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[88, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[89, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[89, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[89, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[89, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[89, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[89, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[89, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[90, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[90, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[91, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[91, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[92, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[93, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[93, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[94, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[94, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[94, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[94, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[94, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[94, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[94, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[95, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[95, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[96, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[96, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[96, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[96, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[96, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[97, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[98, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[98, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[99, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[99, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[99, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[99, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[99, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[100, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[100, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[101, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[101, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[102, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[102, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[102, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[102, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[102, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[103, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[103, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[103, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[103, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[103, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[103, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[103, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[104, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[104, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[104, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[104, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[104, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[104, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[104, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[104, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[105, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[106, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[106, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[107, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[107, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[107, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[107, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[108, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[108, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[109, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[109, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[110, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[111, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[112, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[112, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[112, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[112, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[112, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[112, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[112, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[113, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[114, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[114, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[115, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[115, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[116, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[117, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[117, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[117, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[117, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[118, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[118, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[118, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[118, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[118, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[118, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[119, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[119, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[120, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[120, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[121, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setignoretokenids() (mariantransformer method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[122, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "sparknlp.annotator.seq2seq.marian_transformer": [[122, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "settask() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[123, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[123, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[124, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[124, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[125, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[126, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[126, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[127, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[128, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[128, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[129, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[129, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[130, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[130, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[131, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[131, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[131, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[131, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[131, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[131, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[131, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[132, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[132, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[133, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[133, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[133, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[134, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[135, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[135, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[135, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[135, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[135, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[135, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[135, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[136, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[136, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[137, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[137, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[137, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[137, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[137, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[137, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[137, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.ws": [[138, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[139, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[139, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[140, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[140, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[140, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[140, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[140, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[141, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[141, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[142, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[142, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[142, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[142, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[142, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[142, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[142, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[142, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[143, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[143, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[144, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[144, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[144, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[145, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[145, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[145, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[145, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[145, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[145, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[146, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[146, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[147, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[147, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[148, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[148, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[148, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[148, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[148, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[149, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[150, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[150, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[150, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[150, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[150, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[150, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[150, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[150, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[151, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[151, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[152, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[152, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[152, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[153, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[153, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[153, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[153, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[153, "module-sparknlp.base.table_assembler"]], "token2chunk (class in sparknlp.base.token2_chunk)": [[154, "sparknlp.base.token2_chunk.Token2Chunk"]], "sparknlp.base.token2_chunk": [[154, "module-sparknlp.base.token2_chunk"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[155, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[155, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[155, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[156, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[156, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[157, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[157, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[158, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[158, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[159, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[160, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[161, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[162, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[162, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[163, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[163, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[163, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[163, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[163, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[164, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[164, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[165, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[165, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[166, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[167, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[167, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[168, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[168, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[168, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[168, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[168, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[168, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[168, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[168, "module-sparknlp.functions"]], "sparknlp": [[169, "module-sparknlp"]], "start() (in module sparknlp)": [[169, "sparknlp.start"]], "version() (in module sparknlp)": [[169, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[170, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[170, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[170, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[170, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[171, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[171, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[172, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[172, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[172, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[173, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[174, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[174, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[174, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[174, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[175, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[175, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[175, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[175, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[176, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[176, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[176, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[177, "module-sparknlp.logging"]], "sparknlp.pretrained": [[178, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[179, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[179, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[179, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[179, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[179, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[179, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[180, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[180, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[181, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[182, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[182, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[182, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[183, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[183, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[183, "module-sparknlp.training.conllu"]], "sparknlp.training": [[184, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[185, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[185, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[185, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[186, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[186, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[186, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[187, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[187, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[188, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[189, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[190, "module-sparknlp.util"]]}})