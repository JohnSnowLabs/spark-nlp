Search.setIndex({"docnames": ["_templates/_autoapi/base/base", "_templates/_autoapi/index", "_templates/_autoapi/python/attribute", "_templates/_autoapi/python/class", "_templates/_autoapi/python/data", "_templates/_autoapi/python/exception", "_templates/_autoapi/python/function", "_templates/_autoapi/python/method", "_templates/_autoapi/python/module", "_templates/_autoapi/python/package", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camambert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/token2_chunk/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/chunk2_doc/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_templates/_autoapi/base/base.rst", "_templates/_autoapi/index.rst", "_templates/_autoapi/python/attribute.rst", "_templates/_autoapi/python/class.rst", "_templates/_autoapi/python/data.rst", "_templates/_autoapi/python/exception.rst", "_templates/_autoapi/python/function.rst", "_templates/_autoapi/python/method.rst", "_templates/_autoapi/python/module.rst", "_templates/_autoapi/python/package.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camambert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/chunk2_doc/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp/training/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["&lt;no title&gt;", "API Reference", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camambert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "thi": [1, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 77, 78, 79, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 115, 116, 117, 119, 122, 123, 125, 128, 130, 131, 132, 133, 135, 136, 139, 145, 146, 150, 151, 152, 155, 158, 166, 167, 168, 169, 170, 171, 172, 173, 184, 189, 190, 193, 194, 195, 197, 198, 199], "page": [1, 11, 48, 101, 155, 189, 197, 199], "list": [1, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 48, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 69, 71, 74, 76, 79, 86, 87, 89, 90, 91, 95, 96, 99, 101, 103, 104, 105, 110, 114, 117, 123, 124, 130, 131, 144, 151, 152, 155, 170, 171, 189, 194], "an": [1, 12, 14, 21, 32, 44, 45, 48, 54, 57, 59, 68, 69, 74, 76, 78, 79, 81, 83, 84, 88, 89, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 112, 117, 119, 121, 122, 123, 124, 125, 130, 131, 133, 136, 139, 143, 144, 146, 150, 151, 152, 166, 167, 170, 171, 172, 181, 182, 184, 185, 189, 191, 193, 194, 195, 197, 198], "overview": [1, 189, 197], "all": [1, 8, 10, 12, 13, 16, 19, 23, 26, 30, 34, 37, 39, 48, 49, 50, 51, 62, 65, 68, 72, 76, 79, 89, 91, 101, 104, 105, 110, 115, 123, 125, 152, 158, 169, 172, 173, 189, 194, 199], "spark": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 138, 140, 144, 145, 147, 148, 149, 152, 155, 158, 173, 181, 182, 184, 185, 189, 191, 192, 193, 194, 196, 197, 198, 200], "nlp": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 117, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 138, 145, 149, 152, 155, 158, 173, 181, 182, 184, 185, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200], "modul": [1, 8, 9, 11, 28, 46, 58, 70, 72, 73, 75, 80, 85, 92, 94, 97, 102, 106, 113, 118, 129, 138, 149, 154, 169, 183], "class": [1, 3, 5, 8, 72, 138, 142, 149, 156, 183, 189, 190, 198, 200], "function": [1, 6, 8, 11, 57, 65, 104, 123, 169, 189, 197], "method": [1, 3, 7, 49, 55, 56, 64, 68, 74, 158, 170, 173, 189], "extend": [2, 5, 9, 14, 21, 32, 44, 45, 47, 48, 49, 50, 51, 53, 55, 57, 60, 62, 63, 65, 66, 68, 74, 76, 77, 79, 81, 82, 83, 84, 88, 89, 91, 93, 95, 96, 98, 99, 100, 103, 104, 105, 107, 109, 110, 114, 117, 119, 120, 121, 122, 123, 124, 131, 133, 155], "python": [2, 5, 9, 11, 76, 167, 168, 169, 172], "data": [2, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 128, 130, 131, 132, 133, 144, 152, 155, 170, 171, 172, 181, 182, 183, 184, 185, 191, 193, 194, 198, 199, 200], "rst": [2, 5, 8, 9], "obj": [3, 4, 6, 7, 8, 182], "displai": [3, 4, 6, 7, 8, 89, 101, 152, 190], "py": [3, 4, 6, 7, 52, 134, 135, 141, 147, 151], "type": [3, 4, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 133, 144, 146, 155, 170, 171, 172, 184, 193, 194, 197], "short_nam": [3, 6, 7, 8], "arg": [3, 6, 7, 132, 148, 170, 171, 172], "endif": [3, 4, 6, 7, 8], "return_annot": [3, 6, 7], "overload": [3, 6, 7], "length": [3, 7, 8, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 64, 66, 67, 68, 84, 91, 95, 96, 101, 103, 104, 105, 115, 117, 170, 171], "endfor": [3, 6, 7, 8], "base": [3, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 134, 135, 136, 138, 141, 145, 147, 151, 152, 158, 168, 170, 172, 173, 190, 194, 195, 198], "show": [3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 144, 181, 182, 184, 185, 190, 193, 194, 195, 199], "inherit": [3, 52, 135, 151], "autoapi_opt": [3, 8], "link_obj": 3, "loop": [3, 167], "last": [3, 12, 79, 81, 112, 198], "diagram": 3, "object": [3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 88, 89, 93, 96, 99, 101, 103, 104, 105, 107, 108, 109, 110, 119, 140, 147, 148, 152, 167, 193, 194], "autoapi": [3, 8], "full_nam": 3, "part": [3, 14, 74, 77, 92, 93, 109, 119, 121, 172, 184, 200], "privat": [3, 60, 61, 146], "member": [3, 93, 155], "docstr": [3, 4, 6, 7, 8], "indent": [3, 4, 6, 7, 8], "set": [3, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 114, 115, 117, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 135, 136, 139, 143, 145, 150, 151, 152, 172, 181, 190, 194, 197, 198], "visible_class": [3, 8], "selectattr": [3, 8], "els": [3, 4, 6, 7, 8, 98], "rejectattr": [3, 8], "klass": [3, 8], "render": [3, 8], "visible_attribut": [3, 8], "attribut": [3, 8, 152], "visible_method": 3, "name": [4, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 83, 85, 86, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 117, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 136, 144, 150, 152, 155, 158, 168, 170, 172, 173, 181, 184, 190, 194], "valu": [4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 69, 71, 74, 76, 77, 79, 82, 83, 84, 86, 88, 89, 90, 91, 93, 95, 96, 99, 100, 101, 103, 104, 105, 107, 110, 111, 115, 117, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 136, 139, 140, 150, 152, 170, 171, 190, 200], "i": [4, 6, 7, 8, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 143, 144, 145, 151, 152, 167, 168, 169, 170, 171, 172, 181, 184, 185, 190, 191, 193, 194, 195, 197, 198, 199, 200], "none": [4, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 82, 83, 88, 89, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 135, 151, 152, 155, 166, 168, 170, 171, 172, 195], "annot": [4, 11, 13, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 143, 144, 145, 146, 147, 149, 151, 152, 155, 157, 158, 173, 184, 190, 191, 196, 197, 198, 199, 200], "string": [4, 12, 21, 32, 42, 45, 48, 69, 84, 90, 91, 96, 99, 104, 108, 110, 114, 121, 122, 124, 128, 130, 131, 172, 198], "splitlin": 4, "count": [4, 105], "multilin": 4, "width": [4, 13, 128], "8": [4, 10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 45, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 66, 67, 68, 79, 84, 89, 90, 101, 105, 116, 172, 181], "truncat": [4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 65, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 131, 133, 144, 184, 193, 194, 195], "100": [4, 21, 32, 44, 56, 64, 66, 74, 96], "sphinx_vers": [6, 7], "properti": [6, 7, 49, 126, 127, 136, 138, 145, 170, 171], "method_typ": 7, "orphan": 8, "nest": [8, 171], "pars": [8, 14, 45, 46, 47, 69, 77, 79, 81, 105, 107, 108, 130, 155, 184], "block": [8, 168, 170], "subpackag": 8, "visible_subpackag": 8, "toctre": 8, "titlesonli": 8, "maxdepth": 8, "index": [8, 12, 74, 78, 115, 145, 181], "endblock": 8, "submodul": 8, "visible_submodul": 8, "content": [8, 193, 199], "visible_children": 8, "children": 8, "elif": 8, "equalto": 8, "packag": [8, 10, 49, 54, 152, 191, 192], "import": [8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 128, 130, 131, 132, 133, 144, 152, 155, 158, 173, 181, 182, 184, 185, 190, 193, 194, 197, 198, 199, 200], "titl": [8, 185, 200], "visible_funct": 8, "summari": [8, 101, 104], "scope": [8, 100, 170, 171, 172], "id": [8, 32, 48, 66, 69, 101, 103, 104, 120, 121, 122, 124, 131, 133, 152, 172], "obj_item": 8, "can": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 82, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 103, 104, 105, 107, 108, 110, 116, 119, 122, 123, 131, 132, 143, 152, 155, 171, 181, 182, 184, 190, 192, 194, 195, 197, 198, 199, 200], "quick": [10, 190, 195], "refer": [10, 11, 42, 44, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68, 74, 82, 95, 96, 100, 101, 103, 104, 105, 107, 108, 121, 122, 131, 194, 196, 197], "how": [10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 47, 49, 50, 53, 54, 55, 57, 59, 60, 62, 66, 68, 69, 71, 76, 77, 78, 82, 83, 87, 88, 89, 91, 95, 98, 107, 108, 115, 117, 119, 122, 125, 131, 140, 143, 145, 181, 182, 190, 194, 199], "up": [10, 11, 21, 32, 56, 59, 62, 64, 74, 101, 104, 145, 190, 194, 197, 198], "your": [10, 11, 21, 32, 45, 55, 56, 60, 62, 64, 77, 78, 82, 83, 88, 89, 91, 93, 98, 99, 100, 105, 107, 112, 114, 119, 123, 166, 192, 194, 197, 198, 200], "environ": [10, 191], "pypi": 10, "pip": 10, "anaconda": 10, "c": [10, 56, 64, 74, 103, 168, 172], "johnsnowlab": [10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 117, 119, 145], "load": [10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 74, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 128, 155, 194, 197], "shell": 10, "com": [10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 117, 119, 145, 169, 172], "nlp_2": [10, 145], "12": [10, 49, 66, 67, 68, 74, 79, 81, 87, 93, 105, 116, 130, 144, 145, 155, 158, 173, 184, 193], "pyspark": [10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 121, 122, 123, 128, 130, 131, 133, 144, 145, 148, 151, 152, 155, 181, 182, 184, 185, 194, 195], "submit": [10, 152, 172, 190], "extern": [10, 74, 77, 82, 83, 89, 111, 132, 143, 181, 182, 184, 185], "jar": [10, 145], "after": [10, 45, 47, 56, 60, 61, 64, 79, 81, 87, 114, 133, 152, 172, 193, 194], "compil": 10, "build": [10, 54, 55, 60, 61, 71, 74, 78, 101, 152, 158, 168, 172, 173, 190], "sbt": 10, "assembli": 10, "built": [10, 21, 32, 131, 172], "top": [10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 74, 101, 104, 131], "apach": [10, 131, 145], "x": [10, 32, 144, 168, 169, 172, 181, 200], "For": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 117, 119, 120, 121, 122, 123, 124, 131, 133, 152, 155, 167, 172, 185, 190, 191, 193, 194, 195, 196, 197, 198], "you": [10, 45, 47, 53, 55, 60, 62, 71, 79, 123, 125, 130, 152, 158, 173, 184, 190, 192, 194, 195, 198, 199, 200], "need": [10, 14, 45, 47, 55, 60, 65, 69, 71, 74, 79, 82, 88, 89, 91, 93, 96, 100, 101, 105, 107, 108, 115, 117, 128, 130, 152, 166, 171, 172, 181, 182, 184, 190, 192, 194, 195, 198, 200], "java": [10, 52, 76, 134, 135, 141, 147, 148, 151], "ar": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 47, 49, 50, 54, 55, 57, 59, 60, 63, 65, 66, 67, 68, 69, 71, 74, 76, 77, 79, 82, 84, 87, 89, 90, 91, 93, 95, 96, 100, 101, 103, 104, 105, 109, 111, 119, 120, 123, 130, 132, 140, 144, 152, 167, 168, 169, 171, 172, 185, 190, 191, 192, 193, 194, 195, 198, 199, 200], "6": [10, 21, 50, 51, 54, 57, 74, 78, 83, 84, 90, 93, 99, 107, 116, 158, 172, 173, 182, 194], "7": [10, 50, 51, 54, 79, 81, 93, 99, 101, 120, 124, 184, 193], "It": [10, 21, 32, 48, 50, 51, 54, 55, 56, 59, 60, 61, 64, 66, 67, 69, 74, 84, 99, 100, 103, 105, 107, 108, 114, 124, 130, 170, 172, 193, 198], "recommend": [10, 57, 68, 98, 100, 101, 103, 104], "have": [10, 21, 32, 49, 55, 60, 61, 65, 74, 84, 88, 89, 90, 93, 95, 96, 99, 101, 108, 116, 133, 147, 171, 172, 194, 195, 198], "basic": [10, 74, 95, 170, 172, 193], "knowledg": [10, 55, 74, 125], "framework": [10, 103, 104], "work": [10, 55, 59, 76, 104, 112, 193, 195, 199], "befor": [10, 48, 52, 65, 79, 81, 104, 107, 115, 135, 151, 172, 190], "pleas": [10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 50, 51, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 76, 77, 78, 79, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 119, 122, 131, 132, 191, 192, 196, 199], "document": [10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 130, 131, 133, 152, 155, 181, 182, 184, 190, 194, 195, 197, 198, 199], "first": [10, 12, 54, 56, 57, 64, 66, 67, 74, 82, 88, 89, 90, 95, 104, 105, 110, 115, 123, 133, 171, 172, 190, 194, 195, 199], "let": [10, 55, 114, 194], "": [10, 11, 15, 18, 22, 25, 29, 33, 36, 48, 49, 52, 54, 55, 56, 59, 60, 61, 64, 66, 67, 69, 74, 82, 89, 91, 100, 101, 103, 104, 105, 107, 108, 114, 115, 117, 124, 130, 134, 135, 141, 144, 147, 151, 152, 172, 190, 193, 194, 195, 198], "make": [10, 48, 59, 66, 67, 74, 96, 100, 107, 196, 200], "sure": [10, 100], "version": [10, 48, 55, 111, 136, 139, 145, 150, 151, 155, 158, 194], "oracl": 10, "openjdk": 10, "0_292": 10, "creat": [10, 12, 13, 32, 50, 51, 56, 60, 64, 65, 71, 93, 112, 119, 130, 132, 144, 158, 170, 171, 173, 181, 182, 184, 185, 194, 195, 198, 200], "new": [10, 12, 13, 42, 49, 50, 51, 54, 57, 59, 65, 68, 90, 99, 101, 104, 105, 111, 120, 124, 136, 139, 150, 151, 172, 193, 194], "manag": [10, 74, 191], "depend": [10, 12, 42, 62, 68, 69, 71, 72, 74, 76, 89, 103, 105, 145, 171, 172], "Then": [10, 21, 32, 88, 89, 133, 152, 194], "we": [10, 21, 32, 44, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68, 74, 88, 89, 91, 96, 101, 103, 104, 105, 107, 117, 130, 144, 170, 172, 190, 193, 194, 195, 198, 199, 200], "sparknlp": [10, 190, 193, 194, 195, 196, 198, 199, 200], "n": [10, 67, 74, 84, 87, 88, 89, 95, 96, 101, 104, 114, 130, 144, 155, 172], "y": [10, 32, 172], "activ": [10, 16, 19, 26, 30, 34, 37, 39, 74, 166, 172], "jupyt": [10, 152, 190], "now": [10, 96, 130, 195], "should": [10, 12, 13, 14, 21, 32, 52, 56, 64, 66, 74, 76, 83, 84, 88, 89, 95, 96, 99, 103, 105, 115, 130, 135, 136, 147, 151, 155, 170, 172, 181, 182], "readi": [10, 21, 155, 194], "notebook": [10, 152, 190], "run": [10, 55, 74, 152, 166, 170, 171, 172, 191, 199], "also": [10, 44, 48, 49, 57, 59, 65, 66, 67, 69, 71, 74, 79, 82, 87, 88, 96, 100, 110, 130, 136, 139, 150, 172, 190, 194, 195, 196, 197], "python3": 10, "sourc": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 155, 158, 166, 167, 168, 169, 170, 171, 172, 173, 181, 182, 184, 185, 191], "bin": 10, "A": [10, 42, 49, 60, 61, 65, 69, 74, 77, 78, 82, 83, 84, 91, 98, 99, 101, 103, 104, 107, 108, 115, 117, 152, 167, 170, 171, 172, 184, 192, 194, 200], "retriev": [10, 65, 77, 107, 108, 109, 152, 155, 190, 194, 195], "If": [10, 16, 19, 21, 23, 26, 30, 34, 37, 39, 62, 65, 69, 76, 79, 81, 87, 88, 89, 91, 95, 96, 101, 104, 105, 111, 145, 151, 152, 158, 170, 171, 172, 173, 190, 192, 194], "manual": [10, 193], "sparksess": [10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 65, 66, 67, 68, 78, 101, 103, 104, 145, 181, 182, 184, 185], "becaus": [10, 52, 98, 135, 151, 171], "other": [10, 32, 62, 63, 71, 74, 91, 98, 101, 104, 112, 114, 120, 123, 124, 131, 194], "configur": [10, 62, 117, 145, 158, 173], "includ": [10, 48, 50, 51, 56, 57, 64, 66, 67, 68, 71, 74, 79, 87, 88, 89, 101, 104, 105, 124, 152, 169, 185, 191, 193, 194, 195, 200], "them": [10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 49, 50, 54, 55, 59, 60, 66, 68, 69, 71, 74, 79, 82, 96, 105, 110, 119, 132, 133, 194, 195], "builder": [10, 111, 145], "appnam": [10, 145], "master": [10, 145], "local": [10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 74, 101, 103, 104, 110, 130, 145, 155, 198], "config": [10, 145, 191], "driver": [10, 145], "memori": [10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 57, 65, 145, 170, 171, 172], "16g": [10, 145], "maxresults": [10, 145], "kryoseri": [10, 145], "buffer": [10, 51, 65, 145], "max": [10, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 49, 50, 51, 52, 54, 55, 59, 60, 61, 66, 67, 68, 74, 108, 145], "2000m": [10, 145], "getorcr": [10, 145], "main": [11, 69, 117, 193, 197, 200], "github": [11, 44, 49, 50, 51, 54, 60, 68, 100, 101, 103, 104, 155, 169, 172], "issu": 11, "workshop": [11, 14, 21, 32, 44, 45, 47, 48, 49, 50, 51, 53, 55, 57, 60, 62, 63, 65, 66, 68, 74, 76, 77, 79, 81, 82, 83, 84, 88, 89, 91, 93, 95, 96, 98, 99, 100, 103, 104, 105, 107, 109, 110, 114, 117, 119, 120, 121, 122, 123, 124, 131, 133, 152, 172, 190, 197], "model": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114, 117, 119, 135, 145, 151, 152, 155, 158, 171, 172, 173, 190, 191, 193, 197, 199, 200], "hub": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 76, 77, 88, 89, 93, 96, 99, 101, 103, 104, 105, 107, 108, 110, 119], "welcom": 11, "contain": [11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 170, 171, 172, 181, 182, 184, 185, 188, 190, 193, 194], "inform": [11, 45, 47, 65, 66, 74, 79, 87, 105, 122, 131, 171, 172, 185, 190, 191, 192, 193, 194, 200], "us": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 93, 95, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 115, 116, 117, 119, 120, 121, 122, 123, 124, 130, 131, 132, 133, 144, 145, 152, 155, 166, 167, 168, 170, 171, 172, 181, 182, 184, 185, 191, 192, 193, 194, 195, 197], "librari": [11, 44, 76, 121, 122, 123, 131, 133, 199], "exampl": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 152, 155, 158, 167, 172, 173, 181, 182, 184, 185, 190, 193, 194, 195, 197, 198, 199, 200], "get": [11, 21, 32, 74, 86, 93, 105, 111, 117, 119, 130, 136, 139, 150, 190, 194, 199, 200], "start": [11, 15, 18, 22, 25, 29, 33, 36, 59, 71, 74, 88, 89, 96, 121, 145, 152, 166, 170, 190, 193, 195, 198, 199], "cheat": 11, "sheet": [11, 48], "requir": [11, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 47, 49, 51, 54, 57, 63, 66, 67, 74, 89, 91, 100, 105, 116, 119, 121, 123, 133, 170, 171, 172, 193, 194, 195], "instal": [11, 152, 192], "session": [11, 145, 181, 182, 184, 185], "from": [11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 144, 145, 148, 151, 152, 155, 158, 166, 168, 170, 171, 172, 173, 181, 182, 184, 185, 190, 193, 194, 195, 198, 199, 200], "user": [11, 87, 88, 117, 132, 145, 152, 190], "guid": [11, 191], "own": [11, 21, 32, 45, 56, 64, 77, 78, 82, 83, 88, 89, 91, 93, 98, 99, 100, 105, 107, 112, 114, 119, 172, 197, 198, 200], "pipelin": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 128, 130, 131, 132, 133, 145, 151, 152, 154, 155, 157, 191, 193, 194, 197], "pretrain": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 120, 123, 124, 130, 144, 145, 152, 190, 193, 197], "dataset": [11, 21, 32, 45, 47, 56, 59, 60, 61, 64, 65, 74, 76, 88, 89, 96, 99, 101, 105, 119, 151, 155, 181, 182, 184, 185, 197], "train": [11, 16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 44, 45, 47, 49, 50, 51, 54, 55, 56, 57, 60, 61, 63, 64, 66, 67, 68, 74, 76, 77, 78, 82, 83, 86, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 112, 114, 119, 121, 130, 145, 152, 155, 190, 194, 195, 197, 198], "light": [11, 55, 68, 74, 130, 197, 199], "helper": [11, 93, 119, 125, 144, 170, 171, 184, 185, 197, 200], "third": [11, 95, 110, 153], "parti": [11, 153], "project": [11, 74, 103, 152, 166, 172, 191], "log": [11, 21, 32, 89, 96, 99, 101, 145], "api": [11, 190, 194, 197], "format": [12, 13, 44, 45, 47, 69, 71, 77, 78, 79, 81, 82, 83, 88, 89, 91, 98, 104, 107, 108, 117, 122, 124, 125, 128, 131, 171, 181, 182, 184, 185, 191, 200], "annotator_typ": [12, 13], "begin": [12, 42, 87, 101, 114, 117, 121, 122, 131, 144, 170, 171, 172, 193], "end": [12, 15, 18, 22, 25, 29, 33, 36, 42, 89, 96, 114, 117, 122, 131, 144, 152, 171, 181, 190, 193, 195], "result": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 133, 144, 145, 152, 155, 172, 181, 182, 190, 191, 193, 194, 195, 198, 199], "metadata": [12, 13, 42, 74, 83, 88, 89, 93, 122, 124, 128, 130, 131, 144, 152, 193, 195], "embed": [12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 71, 72, 88, 89, 90, 122, 123, 124, 130, 131, 139, 144, 145, 151, 155, 158, 166, 173, 193], "repres": [12, 13, 45, 47, 49, 54, 68, 69, 71, 78, 83, 84, 117, 152, 155, 167, 172, 194], "output": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 133, 136, 144, 145, 152, 166, 170, 171, 172, 184, 190, 193, 194, 195], "detail": [12, 13, 66, 67, 74, 101, 104, 172], "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 133, 136, 139, 143, 144, 145, 150, 151, 152, 155, 158, 171, 173, 181, 182, 184, 185], "str": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 114, 115, 117, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 136, 143, 144, 145, 150, 152, 155, 158, 173, 181, 182, 184, 185], "The": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 115, 117, 119, 122, 124, 130, 131, 144, 145, 152, 155, 158, 168, 169, 170, 171, 172, 173, 181, 182, 184, 185, 190, 193, 194, 195, 197, 198, 200], "possibl": [12, 13, 53, 55, 66, 67, 69, 95, 105, 108, 122, 131, 140, 152, 190], "token": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 74, 77, 78, 83, 84, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 119, 120, 121, 123, 130, 132, 133, 145, 155, 158, 173, 181, 185, 194, 198, 199], "wordpiec": 12, "word_embed": [12, 49, 50, 53, 54, 55, 57, 58, 59, 60, 62, 64, 66, 68, 72, 88, 89], "sentence_embed": [12, 21, 32, 51, 56, 58, 61, 63, 67, 72, 99, 152, 190, 194], "categori": [12, 16, 19, 21, 23, 26, 30, 32, 34, 37, 39, 44, 99, 152, 190, 194], "date": [12, 79, 81], "entiti": [12, 17, 20, 24, 27, 31, 35, 38, 40, 42, 69, 70, 71, 78, 83, 85, 86, 87, 88, 89, 90, 112, 116, 120, 124, 130, 155], "sentiment": [12, 21, 32, 57, 68, 72, 104, 145, 194, 195], "po": [12, 14, 16, 19, 23, 26, 30, 34, 37, 39, 45, 47, 71, 72, 88, 89, 114, 119, 130, 144, 145, 155, 181, 183, 193, 197, 198, 199], "chunk": [12, 14, 15, 18, 22, 25, 29, 33, 36, 53, 56, 64, 69, 74, 78, 82, 83, 84, 87, 112, 116, 120, 121, 124, 144, 152, 185, 190, 200], "named_ent": [12, 17, 20, 24, 27, 31, 35, 38, 40, 71, 87, 88, 89, 90, 130, 155], "negex": 12, "labeled_depend": [12, 47], "languag": [12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 121, 131, 133, 194], "keyword": [12, 73, 74, 98, 172], "dummi": [12, 48], "int": [12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 65, 66, 67, 68, 71, 74, 76, 79, 84, 86, 88, 89, 91, 93, 95, 96, 99, 100, 101, 103, 104, 105, 108, 111, 115, 117, 119, 139, 145, 152, 172, 181], "charact": [12, 48, 57, 59, 76, 84, 91, 95, 96, 105, 107, 108, 115, 117, 124], "under": [12, 55, 68, 74, 145], "dict": [12, 13, 45, 47, 69, 77, 78, 82, 83, 88, 89, 91, 98, 105, 107, 108, 117, 130, 143, 151, 152, 155, 158, 173], "associ": [12, 13, 32, 63, 69, 82, 87, 152], "vector": [12, 32, 50, 51, 53, 54, 56, 57, 63, 64, 65, 123, 124, 131, 170, 171, 172, 193], "where": [12, 32, 54, 57, 69, 74, 77, 78, 82, 83, 84, 93, 96, 98, 101, 104, 107, 108, 119, 121, 158, 171, 172, 173, 184], "applic": [12, 44, 74, 152, 153, 190, 192], "copi": [12, 13], "differ": [12, 13, 45, 47, 57, 60, 61, 66, 68, 74, 79, 95, 96, 105, 117, 130, 152, 158, 168, 172, 173, 198], "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 74, 76, 77, 78, 83, 84, 86, 88, 89, 93, 95, 96, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 114, 117, 119, 121, 130, 143, 144, 145, 146, 151, 155, 158, 170, 171, 172, 173, 181, 182, 184, 185], "newli": [12, 13], "static": [12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 158, 172, 173, 194], "datatyp": [12, 144], "structtyp": 12, "schema": [12, 87, 152, 190], "look": [12, 89, 107, 193], "like": [12, 15, 18, 21, 22, 25, 29, 33, 36, 42, 48, 49, 53, 55, 59, 62, 68, 71, 74, 87, 96, 100, 101, 105, 117, 119, 152, 190, 192, 193], "struct": [12, 122, 128, 131], "containsnul": [12, 32, 122, 128, 131], "true": [12, 16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 44, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 76, 78, 79, 81, 83, 89, 91, 95, 96, 99, 105, 107, 115, 117, 121, 122, 123, 124, 125, 128, 131, 152, 158, 167, 171, 172, 173, 181, 182, 185, 190, 194, 195], "annotatortyp": [12, 53, 84, 121, 122, 128, 131, 193], "nullabl": [12, 32, 122, 128, 131], "fals": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 130, 131, 133, 144, 145, 152, 155, 167, 170, 171, 172, 181, 182, 184, 190, 193, 194, 195, 200], "integ": [12, 122, 128, 131], "map": [12, 14, 32, 65, 69, 93, 105, 122, 128, 131, 136, 139, 144, 150, 151, 172, 193], "kei": [12, 45, 47, 60, 61, 66, 67, 77, 122, 128, 130, 131, 152, 155, 190], "valuecontainsnul": [12, 122, 128, 131], "arrai": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 62, 63, 66, 67, 68, 76, 77, 84, 89, 93, 95, 96, 99, 101, 103, 104, 105, 112, 114, 119, 121, 122, 123, 124, 125, 128, 130, 131, 144, 195, 198], "element": [12, 32, 84, 122, 128, 131, 170, 171], "float": [12, 21, 32, 76, 88, 89, 96, 99, 101, 104, 105, 119, 122, 123, 131], "sql": [12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 65, 66, 67, 68, 78, 101, 103, 104, 130, 144, 151, 155, 181, 182, 184, 185], "arraytyp": [12, 121, 144], "fromrow": 12, "row": [12, 65, 95, 96, 100, 122, 131, 144, 181], "column": [12, 21, 32, 48, 65, 77, 86, 88, 89, 93, 99, 100, 111, 117, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 136, 144, 155, 172, 181, 184, 194], "torow": 12, "transform": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 133, 144, 147, 151, 152, 155, 190, 193, 194, 195, 198, 199, 200], "annotationimag": [13, 130], "origin": [13, 49, 56, 59, 60, 64, 96, 128, 169, 172], "height": [13, 128], "nchannel": [13, 128], "mode": [13, 107, 122, 128, 131, 152], "imag": [13, 44, 128, 130], "uri": 13, "pixel": 13, "number": [13, 21, 32, 45, 47, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 84, 86, 88, 89, 93, 95, 96, 99, 101, 104, 105, 111, 119, 170, 171, 172, 181, 182], "color": 13, "channel": [13, 105], "opencv": 13, "byte": [13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 76, 89, 99, 101, 103, 104, 105, 152], "match": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 64, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 91, 93, 95, 101, 117, 119, 121, 170, 171, 193], "pattern": [14, 48, 69, 79, 91, 107, 108, 115, 117, 172], "speech": [14, 92, 93, 119, 184, 200], "tag": [14, 21, 32, 48, 86, 87, 88, 89, 92, 93, 99, 119, 144, 152, 181, 184, 185, 200], "order": [14, 68, 69, 74, 107, 108, 130, 133, 144, 170, 172, 194, 195, 198, 200], "meaning": [14, 109], "phrase": [14, 56, 64, 78, 83], "extract": [14, 15, 18, 22, 25, 29, 33, 36, 45, 53, 65, 69, 70, 71, 73, 74, 78, 79, 81, 83, 87, 88, 89, 90, 95, 96, 98, 105, 108, 112, 116, 120, 123, 124, 125, 130, 145, 152, 155, 190], "onto": [14, 144, 195], "sentenc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 93, 100, 103, 105, 110, 112, 115, 116, 119, 120, 122, 124, 130, 131, 133, 145, 155, 158, 173, 181, 182, 184, 185, 194, 198, 199], "which": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 66, 68, 71, 74, 79, 81, 89, 91, 95, 96, 98, 101, 103, 104, 107, 115, 119, 123, 130, 144, 167, 171, 172, 181, 182, 194, 195], "regular": [14, 82, 88, 95, 172], "express": [14, 42, 79, 82, 95, 99], "wrap": [14, 52, 134, 135, 141, 147, 151, 172], "angl": 14, "bracket": 14, "easili": [14, 57, 93, 123, 190], "distinguish": 14, "text": [14, 16, 17, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 131, 133, 140, 143, 144, 152, 181, 182, 184, 185, 190, 193, 194, 195, 199, 200], "itself": [14, 74, 104, 132, 195], "form": [14, 21, 32, 65, 69, 77, 78, 79, 82, 83, 96, 98, 99, 107, 108, 119, 123, 152, 171, 181, 182, 194], "peter": [14, 59, 77, 91, 93, 96, 107, 109, 181], "piper": [14, 77, 93, 109], "employe": [14, 77, 93, 109], "pick": [14, 77, 93, 109], "peck": [14, 77, 93, 109], "pickl": [14, 77, 93, 109], "pepper": [14, 77, 93, 109], "nnp": [14, 93, 130, 144, 181, 182, 184, 185, 193, 198, 199, 200], "nn": [14, 93, 167, 181, 182, 184, 185, 200], "vbp": [14, 93, 130, 182, 193, 198, 199], "vbg": [14, 93], "IN": [14, 93, 130, 144, 182, 184, 185, 193, 198, 199], "jj": [14, 93, 130, 144, 181, 184, 193, 198, 199, 200], "To": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 54, 55, 59, 60, 66, 68, 69, 74, 79, 93, 95, 101, 104, 119, 125, 130, 132, 152, 172, 190, 198], "regexpars": 14, "e": [14, 16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40, 47, 48, 57, 59, 69, 71, 88, 89, 101, 103, 104, 105, 110, 152, 172, 190], "g": [14, 16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40, 47, 48, 57, 71, 88, 89, 101, 103, 104, 105, 110, 152, 172, 190], "setinputcol": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 136, 152, 158, 173, 190, 194, 195], "setoutputcol": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 136, 152, 158, 173, 190, 194, 195], "setregexpars": 14, "when": [14, 44, 48, 49, 71, 79, 81, 84, 89, 101, 105, 107, 110, 114, 120, 130, 172, 181, 194, 195, 198], "defin": [14, 87, 88, 89, 110, 114, 120, 124, 144, 152, 155, 170, 190, 194, 198], "enclos": 14, "treat": 14, "group": [14, 117, 172], "so": [14, 21, 74, 87, 96, 99, 132, 152, 171, 172, 190], "here": [14, 77, 144, 172, 194], "specif": [14, 45, 47, 48, 50, 51, 55, 63, 71, 74, 89, 101, 111, 130, 132, 152, 158, 173, 198], "mean": [14, 32, 66, 74, 76, 79, 81, 101, 103, 104, 115, 123, 130, 172, 194, 195, 198], "more": [14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 48, 55, 57, 62, 66, 67, 71, 74, 84, 87, 96, 101, 104, 107, 115, 117, 120, 121, 122, 123, 124, 131, 133, 152, 155, 166, 167, 170, 171, 185, 190, 191, 192, 194, 197, 200], "noun": [14, 182], "success": [14, 101], "see": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 117, 119, 120, 121, 122, 123, 124, 125, 131, 133, 152, 155, 172, 185, 190, 191, 192, 197, 199, 200], "input": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 133, 136, 144, 151, 155, 166, 167, 168, 170, 171, 172, 181, 182, 184, 185, 194, 195, 198, 200], "grammar": 14, "parser": [14, 45, 47, 71], "perceptronmodel": [14, 45, 47, 71, 88, 93, 181], "Of": [14, 49, 119], "ml": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 121, 122, 123, 128, 130, 131, 132, 133, 152, 190, 194, 198], "documentassembl": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 121, 122, 123, 131, 132, 133, 152, 181, 190, 194], "sentencedetector": [14, 21, 42, 45, 47, 51, 53, 61, 63, 67, 71, 74, 77, 82, 84, 88, 89, 90, 93, 95, 96, 110, 112, 132, 133, 181, 194, 195], "postag": 14, "setstag": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 121, 123, 133, 194, 195], "createdatafram": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 131, 133, 144, 152, 190, 193, 194, 195, 199], "todf": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 128, 131, 133, 144, 193, 194, 195, 199], "fit": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 121, 123, 130, 132, 133, 151, 152, 171, 190, 194, 195, 198], "selectexpr": [14, 21, 42, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 77, 78, 79, 81, 82, 83, 84, 87, 90, 91, 93, 95, 96, 98, 103, 109, 110, 112, 115, 116, 117, 120, 121, 123, 124, 144, 181, 182, 184, 193, 194, 199], "explod": [14, 21, 42, 45, 47, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 78, 81, 82, 83, 84, 87, 90, 93, 95, 96, 103, 116, 120, 123, 124, 144, 181, 184, 193, 194, 199], "11": [14, 66, 67, 79, 81, 84, 93], "13": [14, 42, 66, 67, 71, 93, 120, 124], "21": [14, 79, 81, 90, 93], "35": [14, 93], "39": [14, 90, 93, 184], "52": [14, 90, 93, 184], "58": [14, 93], "albertforquestionansw": 15, "classnam": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 117, 119, 134, 135, 141, 147], "classifi": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 74, 99, 123, 194], "dl": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 76, 89, 99, 107, 108], "java_model": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 117, 119, 127, 135, 151], "albert": [15, 16, 17, 49], "span": [15, 18, 22, 25, 29, 33, 36, 104], "classif": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 49, 63, 100, 104, 194], "head": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 49, 68, 87, 88, 89, 130, 144, 155], "question": [15, 18, 22, 25, 29, 33, 36, 45, 47, 50, 51, 57, 60, 61, 68, 93, 101, 104, 130], "answer": [15, 18, 22, 25, 29, 33, 36, 45, 47, 50, 51, 57, 68, 101, 104, 130], "task": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 49, 50, 51, 54, 55, 59, 63, 66, 67, 68, 74, 99, 101, 103, 104, 132, 172], "squad": [15, 18, 22, 25, 29, 33, 36, 49, 50, 51, 54, 60, 61], "linear": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 101, 172], "layer": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 57, 68, 171, 172], "hidden": [15, 17, 18, 20, 22, 24, 25, 27, 29, 31, 33, 35, 36, 38, 40, 49, 57, 68, 111, 172], "state": [15, 17, 18, 20, 21, 22, 24, 25, 27, 29, 31, 32, 33, 35, 36, 38, 40, 44, 49, 50, 51, 57, 59, 60, 61, 68, 74, 89, 99, 101, 104, 131, 166, 170, 171, 172, 191, 194], "comput": [15, 18, 22, 25, 29, 33, 36, 44, 49, 54, 55, 63, 101, 103, 108, 130, 168, 171, 172, 198], "logit": [15, 16, 18, 19, 22, 25, 26, 29, 30, 33, 34, 36, 37, 39], "companion": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 88, 89, 93, 96, 99, 101, 103, 104, 105, 107, 108, 110, 119, 148], "spanclassifi": [15, 18, 22, 25, 29, 33, 36], "document_quest": [15, 18, 22, 25, 29, 33, 36], "document_context": [15, 18, 22, 25, 29, 33, 36], "default": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 114, 115, 117, 119, 121, 122, 123, 124, 125, 130, 131, 143, 144, 145, 152, 155, 170, 171, 172, 181, 182, 184, 185, 194], "albert_base_qa_squad2": 15, "provid": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 76, 77, 78, 79, 81, 82, 83, 88, 89, 91, 93, 96, 98, 99, 101, 103, 104, 105, 107, 108, 119, 130, 136, 139, 144, 146, 150, 155, 170, 171, 172, 195], "avail": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 72, 74, 76, 77, 79, 82, 88, 89, 93, 96, 99, 101, 103, 104, 105, 107, 108, 110, 119, 147, 155, 158, 169, 173, 190, 197], "compat": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 49, 50, 54, 55, 59, 60, 66, 68, 89, 123, 167, 170], "batchsiz": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 55, 57, 59, 60, 61, 66, 67, 68, 89, 99, 103, 105], "batch": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 55, 57, 59, 60, 61, 66, 67, 68, 89, 99, 103, 105, 166, 171, 172], "size": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 64, 65, 66, 67, 68, 71, 74, 89, 99, 101, 103, 104, 105, 107, 170, 171, 172, 193, 198, 199], "larg": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 49, 54, 55, 57, 66, 67, 68, 74, 76, 78, 83, 89, 101, 172], "allow": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 57, 63, 88, 89, 91, 95, 96, 115, 117, 132, 158, 171, 172, 173], "faster": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 55, 57, 107, 108, 170], "process": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 64, 66, 67, 68, 71, 74, 76, 87, 88, 89, 96, 99, 101, 104, 120, 121, 122, 123, 124, 128, 131, 132, 133, 152, 172, 190, 193, 194, 195, 196], "casesensit": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 55, 57, 59, 60, 61, 66, 67, 68, 78, 83, 107, 110], "whether": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 69, 71, 78, 79, 81, 83, 84, 88, 89, 91, 95, 96, 99, 101, 104, 105, 107, 110, 115, 117, 121, 123, 124, 125, 130, 133, 136, 145, 155, 172, 181, 185, 195], "ignor": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 55, 57, 59, 60, 61, 66, 67, 68, 78, 84, 87, 101, 103, 104, 107, 110, 130], "case": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 47, 48, 49, 50, 51, 54, 55, 57, 59, 60, 61, 66, 67, 68, 69, 76, 78, 83, 99, 105, 107, 110, 117, 121, 166, 170, 172, 181, 182, 194], "configprotobyt": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 49, 50, 51, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 76, 89, 99, 101, 103, 104, 105], "configproto": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 76, 89, 99, 101, 103, 104, 105], "tensorflow": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 74, 76, 89, 99, 101, 103, 104, 105, 158, 169, 171, 173], "serial": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 69, 76, 89, 99, 101, 103, 104, 105, 145], "maxsentencelength": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 49, 50, 51, 54, 55, 56, 59, 60, 61, 64, 66, 67, 68], "128": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 55, 60, 61, 66, 67, 68, 152, 172, 190], "multidocumentassembl": [15, 18, 22, 25, 29, 33, 36, 131], "context": [15, 18, 22, 25, 29, 33, 36, 50, 51, 56, 57, 64, 68, 100, 105, 117], "setcasesensit": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 53, 55, 59, 60, 66, 78, 83, 88, 107, 110, 123, 133], "what": [15, 18, 22, 25, 29, 33, 36, 45, 47, 74, 76, 99, 103, 105, 114, 182, 191], "my": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 48, 82, 84, 95, 99, 101, 110, 112, 115, 194], "clara": [15, 18, 22, 25, 29, 33, 36], "live": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 101, 152, 190], "berkelei": [15, 18, 22, 25, 29, 33, 36], "select": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 53, 55, 65, 71, 74, 76, 88, 89, 99, 100, 101, 104, 105, 107, 108, 114, 119, 122, 124, 125, 128, 131, 133, 144, 152, 190, 195], "setconfigprotobyt": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 76, 89, 99, 101, 103, 104, 105], "b": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 76, 78, 83, 87, 88, 89, 90, 95, 99, 101, 103, 104, 105, 130, 144, 155, 172, 181, 185, 200], "setmaxsentencelength": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 64, 66, 67, 68], "loadsavedmodel": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 101, 103, 104], "folder": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 89, 96, 99, 101, 103, 104, 108, 111, 181], "spark_sess": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 101, 103, 104], "save": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 89, 96, 99, 101, 103, 104, 145, 152, 158, 173, 190, 194], "current": [15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 65, 66, 67, 68, 74, 78, 79, 81, 96, 101, 103, 104, 111, 130, 136, 145, 172, 193, 194, 195], "restor": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119], "lang": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 155], "en": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 68, 71, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 155, 182, 200], "remote_loc": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 155], "download": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 76, 77, 78, 83, 88, 89, 90, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 145, 155, 193, 194, 197, 198], "option": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 74, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 122, 126, 127, 130, 131, 143, 144, 145, 151, 152, 155, 171, 172, 181, 182, 184, 185, 194], "remot": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 155], "address": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119], "resourc": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 76, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 117, 119, 132, 140, 143, 154, 181, 182, 184, 185, 194, 200], "Will": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 95, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119], "repositori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 155, 191], "otherwis": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 83, 88, 89, 93, 96, 99, 100, 101, 103, 104, 105, 107, 108, 110, 117, 119, 121, 152, 172], "concern": [16, 44, 49], "albertforsequenceclassif": [16, 23], "sequenc": [16, 19, 23, 26, 30, 34, 37, 39, 44, 59, 101, 102, 103, 104, 105, 110, 166, 167, 170, 171], "regress": [16, 19, 23, 26, 30, 34, 37, 39, 104], "pool": [16, 19, 23, 26, 30, 34, 37, 39, 53, 57, 62], "multi": [16, 19, 21, 23, 26, 30, 32, 34, 37, 39, 49, 63, 66, 67, 74, 76, 99, 103], "sequenceclassifi": [16, 19, 23, 26, 30, 34, 37, 39], "label": [16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 44, 45, 47, 69, 76, 86, 87, 88, 89, 98, 99, 100, 104, 105, 111, 152, 158, 173, 181, 190, 194], "albert_base_sequence_classifier_imdb": 16, "coalescesent": [16, 19, 23, 26, 30, 34, 37, 39, 76], "instead": [16, 19, 23, 26, 30, 34, 37, 39, 51, 74, 76, 79, 81, 104, 123, 124, 130, 166, 168, 198], "per": [16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 66, 67, 76, 79, 84, 86, 87, 88, 89, 99, 130, 144, 155, 171, 172, 181], "inputcol": [16, 19, 21, 23, 26, 30, 32, 34, 37, 39, 62, 76, 99, 122, 123, 124, 125, 128, 131], "averag": [16, 19, 23, 26, 30, 34, 37, 39, 53, 62, 66, 67, 76, 89, 93], "probabl": [16, 19, 23, 26, 30, 34, 37, 39, 74, 101, 104, 107], "calcul": [16, 19, 26, 30, 34, 37, 39, 65, 84, 89, 98, 171, 172], "via": [16, 19, 26, 30, 34, 37, 39, 63, 128, 145, 172], "softmax": [16, 19, 26, 30, 34, 37, 39, 54, 56, 64, 105, 166], "sigmoid": [16, 19, 26, 30, 34, 37, 39, 168], "john": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40, 42, 51, 61, 67, 69, 71, 90, 91, 96, 125], "lenon": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40], "wa": [16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40, 48, 54, 55, 59, 60, 61, 65, 66, 67, 74, 99, 100, 101, 105, 155, 172, 194, 195], "born": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40, 101], "london": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40], "pari": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40], "sarah": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40], "neg": [16, 19, 23, 26, 30, 34, 37, 39, 98, 99, 100, 152, 190], "getclass": [16, 17, 19, 20, 23, 24, 26, 27, 30, 31, 34, 35, 37, 38, 39, 40, 44], "setcoalescesent": [16, 19, 23, 26, 30, 34, 37, 39, 76], "due": [16, 19, 23, 26, 30, 34, 37, 39, 49, 59], "limit": [16, 19, 23, 26, 30, 34, 37, 39, 44, 49, 59, 65, 68, 74, 104, 107], "almost": [16, 19, 23, 26, 30, 34, 37, 39], "bert": [16, 18, 19, 20, 23, 26, 27, 30, 34, 37, 39, 49, 50, 51, 54, 55, 59, 60, 61, 66, 67, 68, 89, 90, 104], "512": [16, 19, 23, 26, 30, 34, 37, 39, 57], "help": [16, 19, 23, 26, 30, 34, 37, 39, 45, 47, 49, 103, 117, 152, 190, 195, 199], "feed": [16, 19, 23, 26, 30, 34, 37, 39, 166], "entir": [16, 19, 23, 26, 30, 34, 37, 39, 103, 167, 170], "bool": [16, 19, 21, 23, 26, 30, 32, 34, 37, 39, 48, 51, 53, 63, 69, 71, 76, 78, 79, 83, 84, 88, 89, 91, 95, 96, 99, 101, 104, 105, 107, 110, 115, 117, 121, 123, 124, 125, 130, 136, 145, 152, 155, 181], "one": [16, 19, 23, 26, 30, 32, 34, 37, 39, 42, 45, 47, 48, 50, 51, 62, 66, 67, 68, 74, 76, 79, 87, 96, 107, 112, 133, 171, 172, 190, 194], "albertfortokenclassif": [17, 49], "recognit": [17, 20, 24, 27, 31, 35, 38, 40, 44, 85, 88, 89, 172], "ner": [17, 20, 24, 27, 31, 35, 38, 40, 66, 67, 71, 72, 112, 130, 144, 145, 152, 155, 158, 173, 190], "token_classifi": [17, 31, 35, 38, 40], "albert_base_token_classifier_conll03": 17, "albertembed": [17, 49], "level": [17, 21, 32, 50, 51, 59, 60, 61, 63, 65, 67, 69, 86, 88, 89, 99, 105, 145, 181], "tokenclassifi": [17, 20, 24, 27, 31, 35, 38, 40], "o": [17, 20, 24, 27, 31, 35, 38, 40, 87, 88, 89, 90, 130, 144, 155, 172, 181, 185, 200], "loc": [17, 20, 24, 27, 31, 35, 38, 40, 71, 87, 88, 89, 120, 124, 130, 144, 155, 181], "bertforquestionansw": 18, "bert_base_cased_qa_squad2": 18, "bertforsequenceclassif": 19, "bert_base_sequence_classifier_imdb": 19, "bertfortokenclassif": 20, "bert_base_token_classifier_conll03": 20, "classifierdl": [21, 194], "classifierdlapproach": [21, 32, 194], "gener": [21, 32, 49, 53, 55, 59, 62, 68, 71, 74, 88, 89, 96, 101, 104, 105, 107, 108, 124, 125, 152, 158, 173, 190, 193, 194, 195], "art": [21, 32, 44, 49, 50, 51, 57, 59, 60, 61, 68, 74, 89, 101, 104, 131], "univers": [21, 45, 47, 63, 103], "encod": [21, 48, 50, 51, 54, 59, 63, 103, 152], "deep": [21, 50, 51, 57, 74, 88, 96, 105, 172], "learn": [21, 32, 49, 55, 56, 57, 60, 61, 63, 64, 66, 67, 68, 74, 88, 89, 96, 99, 101, 104, 105, 152, 172, 192], "dnn": 21, "insid": [21, 32, 87, 93, 117, 167, 181], "support": [21, 32, 49, 59, 74, 89, 91, 96, 110, 145, 191], "instanti": [21, 32, 45, 47, 56, 64, 65, 69, 77, 78, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 105, 107, 108, 112, 114, 119, 181, 182], "classifierdlmodel": [21, 32, 194], "usag": [21, 32, 45, 47, 48, 49, 50, 51, 53, 55, 57, 60, 63, 65, 66, 68, 69, 74, 76, 77, 79, 81, 82, 83, 88, 89, 91, 93, 95, 96, 98, 99, 100, 103, 104, 105, 107, 109, 110, 114, 117, 119], "lr": [21, 32, 89, 99], "rate": [21, 32, 56, 60, 61, 64, 65, 89, 99, 105], "005": [21, 89, 99], "64": [21, 32, 49, 89, 99, 158, 173, 194], "dropout": [21, 89, 99, 172], "coeffici": [21, 88, 89, 99], "5": [21, 32, 42, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 74, 76, 79, 81, 84, 87, 89, 93, 99, 101, 119, 123, 130, 144, 152, 155, 172, 182, 184, 185, 190, 193, 194, 200], "maxepoch": [21, 32, 88, 89, 99], "maximum": [21, 32, 42, 56, 64, 71, 74, 86, 88, 89, 91, 95, 96, 99, 101, 103, 104, 105, 107, 115, 117], "epoch": [21, 32, 86, 88, 89, 96, 99, 105, 152], "30": [21, 74, 79, 81, 87, 99, 103, 130, 144, 155, 193], "validationsplit": [21, 32, 89, 96, 99], "choos": [21, 32, 53, 62, 89, 96, 99, 107], "proport": [21, 32, 89, 96, 99], "valid": [21, 32, 79, 89, 96, 99, 105, 190], "against": [21, 32, 69, 74, 78, 83, 89, 96, 99, 132], "each": [21, 32, 54, 56, 62, 64, 65, 69, 71, 74, 77, 78, 79, 82, 83, 84, 86, 88, 89, 91, 93, 95, 96, 98, 99, 105, 107, 108, 115, 117, 122, 131, 144, 151, 170, 171, 172, 184, 195], "between": [21, 32, 45, 47, 60, 61, 63, 66, 67, 68, 71, 89, 95, 96, 99, 105, 171, 172], "off": [21, 32, 63, 66, 67, 89, 96, 99, 171], "enableoutputlog": [21, 32, 89, 99], "stdout": [21, 32, 89, 99], "addit": [21, 32, 45, 47, 50, 51, 69, 88, 89, 95, 99, 101, 117, 152, 172, 193, 194], "outputlogspath": [21, 32, 89, 96, 99], "path": [21, 32, 45, 47, 56, 64, 65, 69, 71, 77, 78, 82, 83, 88, 89, 91, 96, 98, 99, 101, 105, 107, 108, 111, 117, 128, 130, 143, 152, 155, 158, 173, 181, 182, 184, 185, 190], "labelcolumn": [21, 32, 88, 89, 99], "verbos": [21, 32, 86, 88, 89, 99], "dure": [21, 32, 55, 86, 88, 89, 95, 99, 105, 145, 152, 190], "randomse": [21, 32, 88, 89, 99], "random": [21, 32, 56, 64, 86, 88, 89, 99, 123], "seed": [21, 32, 56, 64, 86, 88, 89, 99], "shuffl": [21, 32, 86, 99], "multiclassifierdlapproach": [21, 32, 152, 190], "sentimentdlapproach": [21, 32, 99], "analysi": [21, 32, 57, 68, 97, 98, 99, 104, 120, 137, 172, 195], "note": [21, 32, 49, 55, 57, 60, 62, 65, 66, 68, 74, 89, 99, 101, 103, 104, 130, 145, 166, 199], "accept": [21, 32, 99, 171], "singl": [21, 32, 65, 71, 74, 99, 112, 114, 117, 170, 171, 172, 181], "item": [21, 65, 99, 152, 190], "either": [21, 44, 47, 53, 62, 69, 74, 76, 82, 98, 99, 100, 104, 121, 122, 130, 131, 155, 171, 195], "doubl": [21, 99], "universalsentenceencod": [21, 32, 63, 99, 152, 190, 194], "sentenceembed": [21, 32, 62, 65, 99, 123], "In": [21, 32, 44, 54, 55, 59, 65, 68, 69, 74, 76, 77, 78, 82, 83, 95, 96, 98, 99, 101, 104, 107, 108, 119, 152, 158, 167, 172, 184, 190, 194, 195, 199, 200], "csv": [21, 69, 99, 194], "ha": [21, 32, 44, 48, 49, 54, 55, 57, 60, 61, 65, 74, 77, 82, 89, 96, 98, 104, 107, 108, 119, 121, 128, 130, 152, 170, 171, 172, 184, 190, 194, 195], "movi": [21, 99, 100, 194], "best": [21, 49, 60, 61, 74, 76, 89, 99, 172, 194], "wach": [21, 194], "ever": [21, 48, 99, 194], "opinion": [21, 99, 194], "win": [21, 99, 194], "award": [21, 99, 194], "terribl": [21, 99, 194], "act": [21, 99, 172, 194], "bad": [21, 98, 99, 152, 190, 194], "realli": [21, 99, 100, 194], "trane": 21, "done": [21, 60, 61, 88, 89, 195], "smallcorpu": [21, 99, 194], "read": [21, 44, 45, 47, 56, 64, 74, 77, 78, 79, 81, 82, 83, 88, 89, 91, 96, 98, 99, 101, 105, 107, 108, 117, 119, 122, 128, 131, 140, 143, 146, 152, 172, 181, 182, 184, 185, 190, 194, 200], "header": [21, 99, 194], "src": [21, 44, 45, 47, 65, 77, 78, 82, 83, 88, 89, 93, 99, 107, 108, 112, 119, 181, 182, 184, 185, 194, 200], "test": [21, 44, 45, 47, 50, 51, 63, 65, 77, 78, 82, 83, 88, 89, 93, 99, 101, 107, 108, 112, 119, 181, 182, 184, 185, 194, 200], "useembed": [21, 32, 63, 99, 194], "docclassifi": [21, 32, 99, 194], "setlabelcolumn": [21, 32, 86, 88, 89, 99, 111, 152, 158, 173, 190, 194], "setbatchs": [21, 32, 57, 89, 99, 105, 152, 158, 173, 190, 194], "setmaxepoch": [21, 32, 86, 88, 89, 99, 152, 158, 173, 190, 194], "20": [21, 68, 87, 101, 130, 144, 155, 172, 194], "setlr": [21, 32, 89, 99, 152, 190, 194], "5e": [21, 99, 194], "setdropout": [21, 89, 99, 194], "pipelinemodel": [21, 32, 45, 47, 48, 56, 64, 88, 89, 99, 100, 105, 107, 108, 119, 130, 132, 152, 194, 197], "setverbos": [21, 32, 86, 89, 99, 158, 173], "setrandomse": [21, 32, 86, 89, 99, 158, 173], "v": [21, 32, 54, 65, 74, 76, 78, 89, 99, 108, 144, 172], "setvalidationsplit": [21, 32, 89, 96, 99, 158, 173], "setenableoutputlog": [21, 32, 89, 99, 152, 158, 173, 190], "setoutputlogspath": [21, 32, 89, 96, 99, 152, 158, 173, 190], "p": [21, 48, 56, 64, 76, 89, 99, 114, 172], "classifierdl_use_trec6": 21, "trec": 21, "multiclassifierdlmodel": [21, 32], "sentimentdlmodel": [21, 32, 99], "sarcasmdl": [21, 194], "classifierdl_use_sarcasm": [21, 194], "sarcasm": [21, 194], "m": [21, 79, 81, 194], "could": [21, 55, 74, 105, 193, 194, 195], "put": [21, 144, 158, 167, 173, 194], "word": [21, 44, 45, 47, 49, 53, 54, 56, 57, 60, 62, 63, 64, 65, 68, 69, 71, 74, 77, 84, 87, 90, 91, 93, 98, 101, 103, 104, 105, 107, 108, 109, 110, 114, 117, 118, 119, 130, 144, 155, 184, 185, 193, 194], "much": [21, 49, 60, 61, 91, 119, 145, 167, 170, 194], "love": [21, 51, 61, 67, 96, 100, 194], "wake": [21, 194], "am": [21, 79, 81, 101, 112, 194], "mondai": [21, 194], "would": [21, 42, 53, 62, 79, 96, 145, 171, 194], "arrays_zip": [21, 45, 47, 74, 194], "out": [21, 74, 77, 91, 101, 103, 104, 109, 110, 194], "normal": [21, 48, 72, 78, 96, 100, 110, 123, 132, 133, 145, 172, 194, 195], "debertaforquestionansw": 22, "deberta": [22, 23, 24, 54], "deberta_v3_xsmall_qa_squad2": 22, "debertaforsequenceclassif": 23, "v2": [23, 24, 50, 51, 54], "v3": [23, 24], "deberta_v3_xsmall_sequence_classifier_imdb": 23, "deberta_base_sequence_classifier_imdb": 23, "debertafortokenclassif": 24, "deberta_v3_xsmall_token_classifier_conll03": 24, "distilbertforquestionansw": 25, "distilbert": [25, 26, 55], "distilbert_base_cased_qa_squad2": 25, "distilbertforsequenceclassif": 26, "distilbert_base_sequence_classifier_imdb": 26, "distilbertfortokenclassif": 27, "distilbert_base_token_classifier_conll03": 27, "albert_for_sequence_classif": [28, 72], "albert_for_token_classif": [28, 72], "bert_for_sequence_classif": [28, 72], "bert_for_token_classif": [28, 72], "deberta_for_sequence_classif": [28, 72], "deberta_for_token_classif": [28, 72], "distil_bert_for_sequence_classif": [28, 72], "distil_bert_for_token_classif": [28, 72], "longformer_for_sequence_classif": [28, 72], "longformer_for_token_classif": [28, 72], "multi_classifier_dl": [28, 72], "roberta_for_sequence_classif": [28, 72], "roberta_for_token_classif": [28, 72], "xlm_roberta_for_sequence_classif": [28, 72], "xlm_roberta_for_token_classif": [28, 72], "xlnet_for_sequence_classif": [28, 72], "xlnet_for_token_classif": [28, 72], "longformerforquestionansw": 29, "longform": [29, 30, 31, 59], "longformer_base_base_qa_squad2": 29, "longformerforsequenceclassif": 30, "longformer_base_sequence_classifier_imdb": 30, "4096": [30, 49, 59], "longformerfortokenclassif": 31, "xlnet_base_token_classifier_conll03": [31, 40], "longformer_base_token_classifier_conll03": 31, "multiclassifierdl": 32, "bidirect": [32, 50, 51, 57, 68, 171, 172], "gru": [32, 168, 172], "convolut": [32, 44, 172], "machin": [32, 56, 64, 74, 88, 101, 103, 104, 152, 172, 192], "strongli": 32, "relat": [32, 45, 47, 71, 199], "problem": [32, 49, 57, 104, 105], "variant": [32, 59, 63], "multipl": [32, 44, 69, 74, 79, 95, 117, 144, 152, 172, 181], "mai": [32, 121, 166, 170, 172, 193, 194, 195, 198, 199], "assign": [32, 69, 90, 98], "instanc": [32, 136, 139, 145, 146, 150, 171], "multiclass": 32, "categor": 32, "precis": [32, 45, 47], "than": [32, 55, 56, 64, 66, 67, 68, 74, 76, 84, 88, 99, 101, 107, 108, 170, 194], "two": [32, 45, 47, 49, 54, 63, 65, 66, 67, 71, 116, 172, 181, 194], "constraint": 32, "mani": [32, 54, 60, 61, 74, 101, 103, 104, 119, 166], "formal": 32, "find": [32, 45, 47, 60, 61, 63, 69, 71, 77, 79, 101], "binari": [32, 128, 140, 152], "bertsentenceembed": [32, 51, 61, 67, 99], "001": [32, 88, 89, 172], "10": [32, 42, 45, 74, 79, 81, 90, 107, 152, 167, 193], "44": [32, 56, 64, 93], "shuffleperepoch": 32, "threshold": [32, 56, 64, 74, 76, 88, 99, 105, 119], "minimum": [32, 56, 64, 71, 74, 76, 86, 88, 89, 91, 95, 96, 99, 101, 104, 107, 108, 115, 117, 181], "ed58abb40640f983": 32, "pn": 32, "newsyou": 32, "toxic": 32, "a1237f726b5f5d89": 32, "dude": 32, "place": [32, 44], "obscen": 32, "insult": 32, "24b0d6c8733c2abe": 32, "thank": [32, 68, 74], "8c4478fb239bcfc0": 32, "gee": 32, "minut": 32, "traindataset": [32, 152, 190], "printschema": [32, 122, 128, 131], "root": [32, 42, 45, 47, 71, 122, 128, 131, 182], "setcleanupmod": [32, 122, 131], "shrink": [32, 122, 131], "1e": [32, 152, 190], "setthreshold": [32, 74, 76, 99, 152, 190], "multiclassifi": [32, 152, 190], "multiclassifierdl_use_tox": 32, "comment": [32, 74], "jigsaw": 32, "challeng": [32, 55, 57, 60, 61, 74], "pretti": [32, 74], "good": [32, 55, 63, 100], "stuff": 32, "wtf": 32, "kind": [32, 74, 79, 81], "crap": 32, "robertaforquestionansw": 33, "roberta": [33, 34, 35, 36, 37, 38, 54, 59, 60, 61, 66, 67], "roberta_base_qa_squad2": 33, "robertaforsequenceclassif": 34, "roberta_base_sequence_classifier_imdb": 34, "robertafortokenclassif": 35, "roberta_base_token_classifier_conll03": 35, "xlmrobertaforquestionansw": 36, "xlm": [36, 37, 38, 66, 67], "xlm_roberta_base_qa_squad2": 36, "xlmrobertaforsequenceclassif": 37, "xlm_roberta_base_sequence_classifier_imdb": 37, "xlmrobertafortokenclassif": 38, "xlm_roberta_base_token_classifier_conll03": 38, "xlnetforsequenceclassif": 39, "xlnet": [39, 40, 68], "xlnet_base_sequence_classifier_imdb": 39, "xlnetfortokenclassif": 40, "spanbert_coref": 41, "spanbertcorefmodel": 42, "corefer": 42, "resolut": 42, "spanbert": 42, "identifi": [42, 65, 74, 78, 82, 115, 117, 152, 195], "same": [42, 49, 60, 65, 66, 69, 71, 104, 132, 152, 171, 172, 195], "given": [42, 69, 74, 101, 104, 105, 107, 108, 110, 151, 152, 166, 170, 172], "told": [42, 81], "mari": [42, 51, 61, 67, 96], "he": [42, 54, 81, 114], "borrow": 42, "book": [42, 48, 101, 105, 182], "her": 42, "link": [42, 155], "fine": [42, 50, 51, 55, 104], "tune": [42, 50, 51, 55, 104], "ontonot": 42, "corefresolut": 42, "spanbert_base_coref": 42, "maxsegmentlength": 42, "segment": [42, 55, 60, 118, 119], "textgenr": 42, "genr": 42, "One": [42, 74, 114, 116], "follow": [42, 48, 57, 59, 65, 74, 79, 81, 82, 87, 91, 95, 116, 167, 168, 190, 192, 195], "bc": 42, "broadcast": 42, "convers": 42, "bn": 42, "nw": 42, "wire": 42, "pt": 42, "pivot": 42, "old": [42, 184], "testament": 42, "tc": 42, "telephon": 42, "wb": 42, "web": [42, 48, 101, 152, 190], "AS": 42, "setmaxsegmentlength": 42, "settextgenr": 42, "code": [42, 54, 56, 59, 60, 61, 64, 66, 67, 74, 76, 104, 169, 172, 191, 199], "vit_for_image_classif": 43, "vitforimageclassif": 44, "vision": 44, "vit": 44, "altern": [44, 74, 98, 105, 107, 108, 130, 170], "neural": [44, 50, 51, 54, 89, 96, 103, 171, 172], "network": [44, 50, 51, 57, 89, 96, 167, 170, 171, 172], "usual": [44, 133, 167], "imageclassifi": 44, "image_assembl": [44, 129, 145], "image_classifier_vit_base_patch16_224": 44, "huggingfac": 44, "http": [44, 49, 50, 51, 54, 56, 57, 63, 64, 68, 100, 101, 104, 168, 169, 170, 171, 172, 191], "discuss": 44, "5669": 44, "vitimageclassificationtestspec": 44, "paper": [44, 49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68, 74, 96, 100, 101, 103, 104, 172, 185, 200], "abstract": [44, 49, 50, 51, 54, 55, 57, 59, 60, 61, 63, 66, 67, 68, 74, 101, 103, 104, 111, 167, 170, 185, 200], "while": [44, 49, 55, 65, 74, 101, 152, 171, 190, 195], "architectur": [44, 49, 50, 51, 54, 60, 76, 89, 96, 104, 172], "becom": [44, 49, 55, 74], "de": [44, 74, 76, 103], "facto": [44, 74], "standard": [44, 48, 59, 79, 81, 107, 108, 117], "natur": [44, 49, 50, 51, 54, 55, 56, 63, 64, 68, 76, 99, 101, 104, 121, 131, 133], "its": [44, 54, 55, 59, 68, 74, 93, 98, 103, 110, 152, 172, 184], "remain": [44, 48, 49, 55, 74], "attent": [44, 54, 59, 172], "appli": [44, 48, 69, 71, 90, 95, 104, 105, 107, 120, 124, 144, 172, 181], "conjunct": 44, "replac": [44, 48, 54, 59, 76, 77, 96, 107, 108, 172, 194], "certain": [44, 105], "compon": [44, 128, 136, 139, 150, 198], "keep": [44, 74, 91, 101, 104], "overal": [44, 65, 68], "structur": [44, 133, 193], "relianc": 44, "cnn": [44, 76, 89, 96, 172], "necessari": [44, 55, 190, 197], "pure": [44, 103], "directli": [44, 130, 152, 166, 190], "patch": 44, "perform": [44, 48, 49, 54, 55, 57, 60, 61, 63, 65, 66, 67, 68, 89, 100, 101, 107, 171, 172], "veri": [44, 57, 66, 67, 68, 101, 103, 104, 130, 171, 193, 195, 198, 199], "well": [44, 45, 47, 63, 66, 67, 74, 172], "pre": [44, 50, 51, 54, 55, 57, 63, 104, 120, 121, 122, 124, 131, 133, 182, 194], "amount": [44, 63, 74, 83, 101, 119, 130, 198], "transfer": [44, 55, 63, 66, 67, 101, 104], "mid": 44, "small": [44, 48, 49, 55, 56, 64, 77, 93, 130, 184, 198], "benchmark": [44, 49, 54, 55, 57, 66, 67, 104], "imagenet": 44, "cifar": 44, "vtab": 44, "etc": [44, 53, 123, 133, 190], "attain": 44, "excel": [44, 68], "compar": [44, 49, 54, 55, 57, 68, 74, 96, 104, 105, 152, 190], "substanti": [44, 50, 51], "fewer": [44, 49], "worth": 44, "16x16": 44, "scale": [44, 49, 55, 59, 66, 67, 101, 104, 170, 172], "imagedf": 44, "datafram": [44, 65, 93, 119, 130, 140, 144, 151, 152, 155, 181, 182, 184, 185, 190, 194, 198, 200], "dropinvalid": 44, "imageassembl": [44, 128], "pipelinedf": 44, "dependencypars": [45, 47, 71], "dependencyparserapproach": [45, 182, 200], "unlabel": [45, 50, 51, 101, 104], "grammat": [45, 47], "dependencyparsermodel": [45, 47, 71], "about": [45, 47, 60, 61, 65, 74, 95, 108, 130, 132, 193, 195, 198, 199], "relationship": [45, 47, 63, 71], "tell": [45, 47, 74, 144], "subject": [45, 47, 99], "verb": [45, 47, 182], "modifi": [45, 47, 60, 61, 96, 169], "describ": [45, 47, 71, 74, 103, 171, 172], "wai": [45, 47, 69, 71, 132, 155], "onli": [45, 47, 48, 57, 63, 68, 79, 91, 95, 96, 101, 104, 114, 132, 168, 169, 172, 181], "chosen": [45, 47, 89], "particular": [45, 47, 74], "treebank": 45, "penn": 45, "setdependencytreebank": 45, "conll": [45, 47, 88, 89, 145, 182, 183, 197], "u": [45, 47, 54, 55, 74, 81, 87, 88, 89, 130, 144, 155, 168, 172, 182, 192, 195, 200], "setconllu": [45, 47], "apart": [45, 47, 120, 124], "dependencytreebank": 45, "file": [45, 47, 48, 63, 65, 69, 77, 78, 82, 83, 88, 89, 91, 96, 98, 105, 107, 108, 111, 117, 140, 145, 152, 158, 169, 173, 181, 182, 184, 185, 190, 200], "conllu": [45, 47, 77, 145, 183, 197], "numberofiter": [45, 47], "iter": [45, 47, 49, 56, 64, 93, 119, 152, 171, 190], "converg": [45, 47, 93, 119], "better": [45, 47, 49, 54, 68, 74, 88, 93, 95, 96, 100, 119], "accuraci": [45, 47, 50, 51, 56, 63, 64, 66, 67, 88, 89, 93, 107, 119, 190], "typeddependencyparserapproach": [45, 47], "postagg": [45, 47, 71, 88, 93], "dependency_treebank": 45, "emptydataset": [45, 47], "reli": [45, 47, 68, 74], "tree": [45, 71], "bank": 45, "setnumberofiter": [45, 47], "read_a": [45, 47, 69, 77, 78, 82, 83, 88, 89, 91, 98, 107, 108, 117, 138, 143, 145, 181, 182], "reada": [45, 47, 65, 69, 77, 78, 82, 83, 88, 89, 91, 98, 107, 108, 112, 117, 140, 143, 181, 182], "dep": 45, "dependency_conllu": [45, 71], "perceptron": [45, 72, 92], "featur": [45, 56, 64, 74, 84, 88, 152, 172, 197], "typeddependencyparsermdoel": 45, "union": [45, 47], "worker": [45, 47], "turner": [45, 47], "newal": [45, 47], "sai": [45, 47, 74, 117], "thei": [45, 47, 89, 91, 101, 132, 147, 182, 194], "disappoint": [45, 47], "talk": [45, 47], "stricken": [45, 47], "parent": [45, 47], "firm": [45, 47], "feder": [45, 47], "mogul": [45, 47], "col": [45, 47, 69, 78, 87, 90, 120, 124, 144, 193], "dependency_pars": [46, 72], "typed_dependency_pars": [46, 72], "typeddependencypars": [47, 71], "Its": 47, "conll2009": 47, "typeddependencyparsermodel": [47, 71], "beforehand": 47, "2009": 47, "setconll2009": 47, "dependency_typ": [47, 71], "train_smal": 47, "txt": [47, 56, 64, 65, 77, 78, 82, 83, 93, 96, 98, 105, 107, 108, 112, 117, 184, 185, 200], "descript": [47, 62, 74, 79, 107, 114, 140, 158, 173], "typdep": 47, "dependency_typed_conllu": [47, 71], "amod": 47, "flat": [47, 71, 125], "nsubj": [47, 71, 125, 182], "parataxi": 47, "documentnorm": 48, "raw": [48, 101, 114, 117, 193, 195], "scrape": 48, "xml": 48, "remov": [48, 60, 61, 91, 100, 115, 123, 124, 125], "dirti": [48, 91], "regex": [48, 69, 79, 82, 91, 105, 107, 108, 115, 117], "want": [48, 69, 158, 173, 195], "polici": 48, "lower": [48, 49, 74, 105, 121], "action": 48, "clean": [48, 91, 104, 133, 195], "lowercas": [48, 91, 115, 121], "convert": [48, 53, 62, 65, 79, 81, 84, 87, 91, 104, 115, 116, 120, 121, 124, 125, 152, 190, 197], "pretty_al": 48, "utf": 48, "cleanuppattern": [48, 91], "normalizeddocu": 48, "setact": 48, "setpattern": [48, 115], "setreplac": 48, "setpolici": 48, "setlowercas": [48, 91, 121, 133], "div": 48, "theworldsgreatest": 48, "right": [48, 50, 51], "hide": 48, "wide": [48, 50, 51, 54, 55, 66, 67], "toptext": 48, "style": [48, 76, 104], "font": 48, "famili": 48, "sego": 48, "ui": 48, "arial": 48, "san": [48, 74], "serif": 48, "THE": 48, "world": [48, 112, 152, 190], "largest": [48, 74, 101], "develop": [48, 74, 103, 149], "site": [48, 74], "h1": 48, "300": 48, "160": 48, "lorem": [48, 78, 83], "ipsum": [48, 78, 83], "simpli": [48, 195], "print": 48, "typeset": 48, "industri": 48, "been": [48, 101, 116, 133], "sinc": [48, 74, 101, 194, 195, 199], "1500": 48, "unknown": [48, 76], "printer": 48, "took": 48, "gallei": 48, "scrambl": 48, "specimen": 48, "surviv": 48, "five": [48, 90], "centuri": 48, "leap": 48, "electron": 48, "essenti": [48, 101], "unchang": 48, "popularis": 48, "1960": 48, "releas": [48, 49, 54, 60, 61, 66, 67, 104, 145], "letraset": 48, "passag": 48, "recent": [48, 50, 51, 54, 60, 61, 74], "desktop": 48, "publish": [48, 60, 61], "softwar": 48, "aldu": 48, "pagemak": 48, "setencod": 48, "lite": 49, "self": [49, 59, 103, 170, 172], "supervis": [49, 57, 63, 74, 101], "represent": [49, 50, 51, 55, 56, 57, 64, 65, 66, 67, 68, 87, 104, 131, 143], "googl": [49, 50, 51, 54, 56, 57, 60, 61, 63, 64, 74, 104, 172, 182], "research": [49, 50, 51, 54, 56, 64, 103, 104, 172], "toyota": 49, "technolog": 49, "institut": 49, "chicago": 49, "These": [49, 60, 61, 68, 74, 88, 101, 155, 192], "offici": [49, 74, 87, 88, 89, 130, 144, 155, 191], "tf": [49, 63, 158, 167, 169, 170, 171, 173], "wrapper": [49, 148, 166, 168, 172], "port": 49, "albert_base_uncas": [49, 52], "albert_bas": 49, "768": [49, 50, 51, 54, 55, 59, 60, 61, 66, 67, 68], "emb": 49, "dim": [49, 172], "12m": 49, "albert_large_uncas": 49, "albert_larg": 49, "1024": [49, 57, 59, 68], "24": [49, 68, 78, 83, 87, 105, 130, 144, 155, 193], "16": [49, 68, 90, 184, 193], "18m": 49, "albert_xlarge_uncas": 49, "albert_xlarg": 49, "2048": 49, "32": [49, 57, 99, 171, 172, 193, 199], "60m": 49, "albert_xxlarge_uncas": 49, "albert_xxlarg": 49, "235m": 49, "sentencepiec": [49, 54, 63], "everi": [49, 50, 51, 54, 55, 59, 60, 61, 66, 67, 68, 89, 100, 103, 105, 122, 131, 132, 158, 167, 173, 195], "dimens": [49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 139, 167, 170, 172], "repeat": 49, "footprint": 49, "howev": [49, 62, 68, 74, 91, 171, 193], "cost": [49, 105, 107], "similar": [49, 63, 74, 76, 170, 172], "through": [49, 71, 74, 125, 172, 195], "FOR": 49, "OF": 49, "tfhub": [49, 57, 63], "dev": [49, 57, 63], "q": 49, "increas": [49, 65, 74, 101, 107], "often": [49, 60, 61, 68], "improv": [49, 50, 51, 54, 57, 60, 61, 66, 67, 88, 89, 101, 172, 199], "downstream": [49, 54, 57, 59, 68, 101, 104], "some": [49, 51, 66, 74, 89, 96, 101, 132, 152, 193, 194, 198, 199], "point": [49, 50, 51, 95, 96, 122, 131, 181], "further": [49, 74, 88, 89, 120, 133], "harder": 49, "gpu": [49, 101, 103, 104, 145, 171], "tpu": 49, "longer": [49, 56, 59, 64, 76, 171, 199], "time": [49, 56, 64, 66, 67, 74, 79, 89, 99, 100, 105, 119, 145, 166, 167, 168, 171, 172, 193, 194, 198, 199], "present": [49, 57, 59, 60, 61, 63, 66, 67, 71, 96, 103], "reduct": [49, 107], "techniqu": [49, 54, 101, 104], "consumpt": [49, 63, 65], "speed": [49, 88, 103], "devlin": [49, 60, 61], "et": [49, 60, 61, 76, 172], "al": [49, 60, 61, 172], "2019": [49, 54, 60, 61, 66, 67], "comprehens": [49, 101], "empir": [49, 50, 51, 66, 67, 68], "evid": 49, "our": [49, 55, 56, 57, 59, 60, 61, 63, 64, 66, 67, 74, 96, 101, 104, 144, 155, 199], "propos": [49, 54, 55, 60, 61, 66, 67, 68], "lead": [49, 66, 67, 167], "loss": [49, 55, 89, 104, 172, 190], "focus": [49, 74], "inter": 49, "coher": [49, 101], "consist": [49, 54, 59, 93, 100, 119, 170, 172, 184], "As": [49, 50, 51, 55, 74, 171, 172], "establish": 49, "glue": [49, 50, 51, 55, 60, 61, 66, 67], "race": [49, 54, 60, 61], "embeddingsfinish": [49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 123], "finished_embed": [49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "setoutputasvector": [49, 50, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 123], "setcleanannot": [49, 54, 55, 57, 59, 60, 62, 63, 65, 66, 68, 123, 124, 125], "80": [49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 82, 123, 133], "1342473030090332": [49, 54], "3855540752410889": [49, 54], "9818322062492371": [49, 54], "784737348556518": [49, 54], "847029983997345": [49, 54], "047153353691101": [49, 54], "1520637571811676": [49, 54], "6245765686035156": [49, 54], "009860038757324219": [49, 54], "13450059294700623": [49, 54], "707749128341675": [49, 54], "2916892766952": [49, 54], "04192575812339783": [49, 54], "5764210224151611": [49, 54], "3196685314178467": [49, 54], "527840495109": [49, 54], "15583214163780212": [49, 54], "1614152491092682": [49, 54], "28423872590065": [49, 54], "135491415858268": [49, 54], "bertembed": [50, 53, 62, 89, 123], "dens": [50, 51], "small_bert_l2_768": 50, "understand": [50, 51, 55, 66, 68, 74, 104, 119, 193], "introduc": [50, 51, 55, 57, 59, 104], "call": [50, 51, 55, 69, 74, 101, 151, 166, 168, 170, 172, 181, 194, 200], "stand": [50, 51], "unlik": [50, 51, 66, 74, 114, 167, 170], "design": [50, 51, 60, 61, 78, 103, 152, 172, 190], "jointli": [50, 51], "condit": [50, 51, 101, 104], "both": [50, 51, 57, 63, 71, 170, 171, 172, 194, 195], "left": [50, 51], "just": [50, 51, 55, 60, 84, 89, 169], "rang": [50, 51, 54, 55, 66, 67], "infer": [50, 51, 55, 68, 171, 172], "without": [50, 51, 66, 67, 74, 101, 119, 172], "modif": [50, 51], "conceptu": [50, 51], "simpl": [50, 51, 101, 172, 195], "power": [50, 51, 104], "obtain": [50, 51, 63], "eleven": [50, 51], "push": [50, 51], "score": [50, 51, 66, 67, 74, 76, 88, 89, 98, 99, 100, 101], "absolut": [50, 51], "multinli": [50, 51], "86": [50, 51, 54], "v1": [50, 51, 167], "f1": [50, 51, 66, 67, 89, 101], "93": [50, 51], "83": [50, 51, 54, 158, 173, 184, 185, 200], "small_bert_l2_128": 50, "3497989177703857": 50, "480538547039032": 50, "3238905668258667": 50, "612930893898010": 50, "1357314586639404": 50, "32984697818756104": 50, "6032363176345825": 50, "6791689395904": 50, "8244884014129639": 50, "27088963985443115": 50, "059438943862915": 50, "9817547798156": 50, "1648050546646118": 50, "4725411534309387": 50, "5938255786895752": 50, "5780693292617": 50, "9125322699546814": 50, "4563939869403839": 50, "3975459933280945": 50, "81611204147338": 50, "sentence_bert_embed": 51, "sent_small_bert_l2_768": 51, "islong": 51, "long": [51, 59, 68, 170, 172], "sent_small_bert_l2_128": 51, "appl": [51, 61, 67], "orang": [51, 61, 67], "8951074481010437": [51, 61, 67], "13753940165042877": [51, 61, 67], "3108254075050354": [51, 61, 67], "65693199634552": [51, 61, 67], "6180210709571838": [51, 61, 67], "12179657071828842": [51, 61, 67], "191165953874588": [51, 61, 67], "4497021436691": [51, 61, 67], "822715163230896": [51, 61, 67], "7568016648292542": [51, 61, 67], "1165061742067337": [51, 61, 67], "59048593044281": [51, 61, 67], "setislong": 51, "camembertembed": 52, "scala": [52, 76, 134, 135, 141, 147, 151], "implement": [52, 56, 64, 66, 96, 105, 126, 127, 134, 135, 141, 147, 151, 166, 167, 168, 170, 172], "subclass": [52, 135, 147, 151, 167, 170], "param": [52, 88, 135, 136, 139, 150, 151, 158, 173], "mix": [52, 57, 135, 151], "ins": [52, 135, 151], "uid": [52, 135, 151], "camembert_bas": 52, "fr": [52, 76], "chunkembed": [53, 123], "util": [53, 88, 95, 96, 108, 132, 137, 138, 140, 142, 145, 146, 150, 154], "wordembed": [53, 62, 65, 89, 123, 145], "chunker": [53, 72, 145], "ngramgener": [53, 84], "nerconvert": [53, 87, 88, 89, 152, 190], "poolingstrategi": [53, 62], "aggreg": [53, 62], "sum": [53, 57, 62, 172], "skipoov": 53, "discard": 53, "oov": 53, "ngram": [53, 84, 101, 104], "setn": [53, 84], "wordembeddingsmodel": [53, 62, 65, 71, 88, 89, 90, 123], "setpoolingstrategi": [53, 62], "55661": 53, "42829502": 53, "86661": 53, "409785": 53, "06316501": 53, "120775": 53, "0732005": 53, "40674996": 53, "22938299": 53, "50597": 53, "288195": 53, "555655": 53, "465145": 53, "140118": 53, "17417": 53, "095253006": 53, "0530925": 53, "218465": 53, "714395": 53, "79860497": 53, "0129999": 53, "139705": 53, "177955": 53, "1887775": 53, "45545": 53, "20030999": 53, "461557": 53, "07891501": 53, "strategi": [53, 62, 82, 95, 105], "setskipoov": 53, "debertaembed": 54, "decod": [54, 59, 101, 103, 104], "enhanc": [54, 100], "disentangl": 54, "pengcheng": 54, "xiaodong": 54, "liu": [54, 60, 61], "jianfeng": 54, "gao": 54, "weizhu": 54, "chen": [54, 60, 61, 172], "2018": [54, 60, 61, 172], "facebook": [54, 66, 67], "mask": [54, 66, 67, 68, 115], "half": [54, 74], "deberta_v3_bas": 54, "microsoft": [54, 103], "www": 54, "blog": 54, "surpass": 54, "human": [54, 74], "superglu": 54, "progress": [54, 96, 115], "significantli": [54, 57, 60, 61, 66, 67, 74], "novel": [54, 68, 74], "mechan": [54, 59], "posit": [54, 55, 66, 67, 68, 74, 98, 99, 100, 115, 133, 152, 190], "respect": [54, 65, 88, 89, 172, 184], "weight": [54, 57, 74, 88, 105, 170, 172], "among": 54, "matric": [54, 170, 172], "rel": [54, 66, 79, 81, 88, 105, 193], "second": [54, 57, 82, 95, 110, 115, 172, 194], "predict": [54, 89, 101, 104, 152, 172, 190], "effici": [54, 56, 63, 64, 103, 166, 167, 170, 171, 193], "achiev": [54, 59, 60, 61, 66, 67, 68, 89, 101, 103, 104, 130, 172, 198], "mnli": 54, "9": [54, 66, 67, 84, 193, 198, 199], "90": 54, "91": 54, "88": 54, "made": [54, 63, 190], "publicli": [54, 66, 67], "distilbertembed": 55, "fast": [55, 100, 103, 130, 172, 198], "cheap": 55, "distil": 55, "40": [55, 90, 103], "less": [55, 76, 84, 88, 99, 107, 167, 171], "uncas": 55, "60": [55, 95], "preserv": [55, 115, 133], "over": [55, 66, 67, 68, 107, 117, 144, 152, 167, 190], "95": 55, "measur": [55, 60, 61, 152], "distilbert_base_cas": 55, "doesn": [55, 60, 172], "t": [55, 60, 77, 91, 96, 98, 117, 120, 124, 171, 172], "token_type_id": [55, 60], "don": [55, 60, 91], "indic": [55, 60, 115], "belong": [55, 60], "separ": [55, 60, 82, 84, 95, 96, 107, 117, 119, 124, 144, 181, 192], "sep_token": [55, 60], "sep": 55, "position_id": 55, "ad": [55, 57, 105, 166], "though": [55, 74], "know": [55, 103, 132], "smaller": [55, 56, 64, 171], "cheaper": 55, "lighter": 55, "preval": 55, "oper": [55, 59, 105, 114, 166, 167, 171, 172, 193], "edg": [55, 71], "constrain": 55, "budget": 55, "purpos": [55, 96], "larger": [55, 60, 61, 101, 103, 104], "counterpart": 55, "most": [55, 59, 74, 89, 101, 103, 104, 171], "prior": [55, 59, 105], "investig": [55, 63], "leverag": [55, 152, 190], "phase": [55, 172], "reduc": [55, 107, 108, 133, 170, 172], "retain": 55, "97": [55, 79, 81, 119], "capabl": [55, 68, 101], "being": [55, 89, 103, 104, 172], "induct": 55, "bias": [55, 168, 170, 172], "tripl": [55, 71], "combin": [55, 59, 65, 74, 104, 105, 107, 171, 172], "cosin": 55, "distanc": [55, 105, 107, 108], "demonstr": [55, 59, 74, 101, 103], "devic": 55, "proof": 55, "concept": [55, 195], "experi": [55, 68, 152, 191], "studi": [55, 60, 61, 104], "1127224713563919": 55, "1982710212469101": 55, "5360898375511169": 55, "272536993026733": 55, "35534414649009705": 55, "13215228915214539": 55, "40981462597846985": 55, "14036104083061": 55, "328085333108902": 55, "06269335001707077": 55, "017595693469047546": 55, "024373905733": 55, "15617232024669647": 55, "2967822253704071": 55, "22324979305267334": 55, "04568954557180": 55, "45411425828933716": 55, "01173491682857275": 55, "190129816532135": 55, "1178255230188369": 55, "doc2vecapproach": 56, "word2vec": [56, 58, 72], "corpu": [56, 57, 64, 74, 77, 93, 104, 105, 184, 200], "algorithm": [56, 64, 74, 88, 100, 105, 107, 108], "construct": [56, 64, 117, 155, 167, 172, 197], "vocabulari": [56, 64, 101, 104, 105], "skip": [56, 64, 71, 105], "gram": [56, 64, 74, 84, 101, 104], "hierarch": [56, 64], "variabl": [56, 64, 168, 170, 172], "doc2vecmodel": 56, "vectors": [56, 64], "windows": [56, 64, 74], "window": [56, 59, 64, 74, 89, 105], "numpartit": [56, 64], "partit": [56, 64, 181], "mincount": [56, 64, 105], "must": [56, 64, 77, 78, 82, 83, 98, 100, 107, 108, 121, 144, 145, 152, 167, 170, 171, 172, 181], "appear": [56, 64, 105], "ani": [56, 63, 64, 69, 74, 89, 101, 104, 123, 124, 171, 191, 194, 195, 200], "divid": [56, 64], "1000": [56, 64, 71, 88, 172], "stepsiz": [56, 64], "step": [56, 64, 152, 168, 172, 190, 194], "optim": [56, 60, 61, 64, 89, 96], "025": [56, 64], "maxit": [56, 64], "estim": [56, 64, 111, 126, 134, 141, 151, 194], "space": [56, 64, 65, 84, 133, 171, 172], "distribut": [56, 64, 169], "composition": [56, 64], "sherlockholm": [56, 64, 105, 200], "setvectors": [56, 64], "setwindows": [56, 64, 74], "setsteps": [56, 64], "initi": [56, 64, 105, 115, 132, 145, 166, 168, 170, 171, 172, 181, 182, 184, 185, 190], "setnumpartit": [56, 64], "setmaxit": [56, 64], "numiter": [56, 64], "equal": [56, 64, 172], "setse": [56, 64], "setmincount": [56, 64, 105], "doc2vec_gigaword_300": 56, "06222493574023247": [56, 64], "011579325422644615": [56, 64], "009919632226228714": [56, 64], "109361454844": [56, 64], "doc2vec_wiki": 56, "elmoembed": 57, "elmo": 57, "billion": [57, 101], "computation": [57, 60, 61, 68, 101, 103, 104], "expens": [57, 60, 61, 68, 98, 101, 103, 104, 107], "lookup": [57, 65, 68, 78, 107, 108], "acceler": [57, 68, 101, 103, 104, 145, 172], "setpoolinglay": 57, "word_emb": 57, "shape": [57, 170, 171, 172], "batch_siz": [57, 170, 171, 172], "max_length": 57, "lstm_outputs1": 57, "lstm": [57, 89, 170, 172], "lstm_outputs2": 57, "trainabl": [57, 172], "tensor": [57, 170, 171, 172], "poolinglay": 57, "contextu": [57, 105], "complex": [57, 63, 74, 107, 108, 167], "characterist": 57, "syntax": 57, "semant": [57, 63, 119], "vari": 57, "across": [57, 101], "linguist": 57, "polysemi": 57, "intern": [57, 117, 136, 139, 145, 172], "bilm": 57, "exist": [57, 105, 123, 125, 152, 172], "six": [57, 107, 108], "textual": 57, "entail": 57, "expos": 57, "crucial": 57, "semi": 57, "signal": [57, 172], "662458181381226e": 57, "2541114091873169": 57, "6275503039360046": 57, "5787073969841": 57, "19154725968837738": 57, "22998669743537903": 57, "2894386649131775": 57, "21524395048618": 57, "10400570929050446": 57, "12288510054349899": 57, "07056470215320587": 57, "246389418840": 57, "49932169914245605": 57, "12706467509269714": 57, "30969417095184326": 57, "2643227577209": 57, "8871506452560425": 57, "20039963722229004": 57, "0601330995559692": 57, "0348707810044": 57, "albert_embed": [58, 72], "bert_embed": [58, 72], "bert_sentence_embed": [58, 72], "camambert_embed": [58, 72], "chunk_embed": [58, 72], "deberta_embed": [58, 72], "distil_bert_embed": [58, 72], "doc2vec": [58, 72], "elmo_embed": [58, 72], "longformer_embed": [58, 72], "roberta_embed": [58, 72], "roberta_sentence_embed": [58, 72], "universal_sentence_encod": [58, 72], "xlm_roberta_embed": [58, 72], "xlm_roberta_sentence_embed": [58, 72], "xlnet_embed": [58, 72], "longformerembed": 59, "iz": 59, "beltagi": 59, "matthew": 59, "arman": 59, "cohan": 59, "checkpoint": 59, "mlm": 59, "096": 59, "longformer_base_4096": 59, "unabl": 59, "quadrat": 59, "linearli": 59, "easi": 59, "thousand": 59, "drop": [59, 110], "motiv": 59, "global": 59, "evalu": [59, 66, 67, 89, 136, 152], "text8": 59, "enwik8": 59, "contrast": [59, 78, 104], "finetun": [59, 68], "varieti": [59, 66, 67, 199], "outperform": [59, 63, 66, 67, 68, 74, 101], "wikihop": 59, "triviaqa": 59, "final": [59, 60, 61, 66, 67, 76, 89, 99, 105, 170, 171, 194], "led": [59, 60, 61, 74], "effect": [59, 95, 104, 167], "arxiv": [59, 168, 170, 171, 172], "summar": [59, 74, 101, 103, 104], "found": [59, 65, 74, 107, 114, 121, 197], "18792399764060974": [59, 60], "14591649174690247": [59, 60], "20547787845134735": [59, 60], "1468472778797": [59, 60], "22845706343650818": [59, 60], "18073144555091858": [59, 60], "09725798666477203": [59, 60], "0417917296290": [59, 60], "07037967443466187": [59, 60], "14801117777824402": [59, 60], "03603338822722435": [59, 60], "17893412709": [59, 60], "08734266459941864": [59, 60], "2486150562763214": [59, 60], "009067727252840996": [59, 60], "24408400058": [59, 60], "22409197688102722": [59, 60], "4312366545200348": [59, 60], "1401449590921402": [59, 60], "356410235166549": [59, 60], "robertaembed": [60, 66], "robustli": [60, 61], "approach": [60, 61, 68, 74, 86, 88, 89, 96, 98, 101, 104, 105, 107, 108, 134, 197], "yinhan": [60, 61], "myle": [60, 61, 66, 67], "ott": [60, 61, 66, 67], "naman": [60, 61, 66, 67], "goyal": [60, 61, 66, 67], "jingfei": [60, 61], "du": [60, 61, 76], "mandar": [60, 61], "joshi": [60, 61], "danqi": [60, 61], "omer": [60, 61], "levi": [60, 61], "mike": [60, 61], "lewi": [60, 61], "luke": [60, 61, 66, 67], "zettlemoy": [60, 61, 66, 67], "veselin": [60, 61, 66, 67], "stoyanov": [60, 61, 66, 67], "hyperparamet": [60, 61], "next": [60, 61, 74, 79, 81, 101, 104, 171], "mini": [60, 61], "roberta_bas": 60, "bpe": 60, "gpt": [60, 101], "scheme": [60, 168], "signific": [60, 61, 66, 67, 74, 77], "gain": [60, 61, 66, 67, 172], "care": [60, 61, 117], "comparison": [60, 61, 63, 110], "choic": [60, 61], "impact": [60, 61], "replic": [60, 61], "carefulli": [60, 61], "undertrain": [60, 61], "exce": [60, 61], "highlight": [60, 61], "previous": [60, 61, 74], "overlook": [60, 61], "rais": [60, 61, 74, 84, 89, 152, 170, 171, 172], "report": [60, 61, 63, 152, 190], "robertasentenceembed": 61, "sent_roberta_bas": 61, "embeddingssent": 62, "22093398869037628": 62, "25130119919776917": 62, "41810303926467896": 62, "380883991718": 62, "high": [63, 66, 67, 103], "dimension": [63, 172], "cluster": [63, 145], "tfhub_us": 63, "loadsp": 63, "op": [63, 168, 169, 170], "lingual": [63, 66, 67, 74, 76, 103], "target": [63, 103, 117, 121, 130, 155], "accur": [63, 100, 107], "divers": [63, 101, 104, 191], "trade": [63, 66, 67, 171], "baselin": [63, 101, 172], "do": [63, 74, 87, 110, 117, 120, 130, 166, 171, 190, 194, 198], "tend": 63, "With": [63, 68, 74], "observ": 63, "surprisingli": 63, "minim": [63, 103, 171], "encourag": 63, "weat": 63, "detect": [63, 75, 76, 94, 95, 96], "bia": [63, 170, 172], "freeli": 63, "04616805538535118": 63, "022307956591248512": 63, "044395286589860916": 63, "0016493503": 63, "setloadsp": 63, "word2vecapproach": 64, "word2vecmodel": 64, "word2vec_gigaword_300": 64, "word2vec_wiki": 64, "custom": [65, 88, 89, 95, 96, 117, 152], "dictionari": [65, 74, 77, 82, 88, 91, 98, 107, 108, 152], "setstoragepath": [65, 78], "line": [65, 69, 78, 83, 96, 98, 155, 184], "delimit": [65, 69, 71, 77, 82, 84, 88, 91, 98, 115, 181, 184], "39658191506190343": 65, "630968081620067": 65, "5393722253731201": 65, "8428180123359783": 65, "were": [65, 89, 152, 190], "7535235923631415": 65, "9699218875629833": 65, "10397182122983872": 65, "11833962569383116": 65, "stress": 65, "0492683418305907": 65, "9415954572751959": 65, "47624463167525755": 65, "16790967216778263": 65, "induc": 65, "1535748762292387": 65, "33498936903209897": 65, "9235178224122094": 65, "1158772920395934": 65, "zero": [65, 101, 170, 171], "statist": [65, 74, 89], "withcoveragecolumn": 65, "overallcoverag": 65, "writebuffers": 65, "dump": 65, "disk": [65, 194, 195], "storag": [65, 69, 78, 138, 145], "write": [65, 107, 108, 195], "10000": 65, "readcaches": 65, "cach": 65, "higher": [65, 74, 100, 101, 104], "random_embeddings_dim4": 65, "abov": [65, 71, 170, 184], "setstorageref": 65, "glove_4d": 65, "setdimens": [65, 139], "patient": 65, "diagnos": 65, "diabet": 65, "9439099431037903": 65, "4707513153553009": 65, "806300163269043": 65, "16176554560661316": 65, "7966810464859009": 65, "5551124811172485": 65, "8861005902290344": 65, "28284206986427307": 65, "025029370561242104": 65, "35177749395370483": 65, "052506182342767715": 65, "1887107789516449": 65, "08617766946554184": 65, "8399239182472229": 65, "5395117998123169": 65, "7864698767662048": 65, "6599600911140442": 65, "16109347343444824": 65, "6041093468666077": 65, "8913561105728149": 65, "5955275893211365": 65, "01899011991918087": 65, "4397728443145752": 65, "8911281824111938": 65, "9840458631515503": 65, "7599489092826843": 65, "9417727589607239": 65, "8624503016471863": 65, "setwritebuffers": 65, "setreadcaches": 65, "glove_100d": [65, 89], "There": [65, 69, 71, 114, 172, 192, 194, 195, 200], "conveni": 65, "coverag": [65, 137], "add": [65, 79, 81, 95, 101, 104, 105, 117, 170, 172, 194], "stat": 65, "field": [65, 69, 83, 172], "whole": [65, 155, 166], "consid": [65, 71, 74, 105, 107, 108, 110, 114], "570580005645752": 65, "44183000922203064": 65, "7010200023651123": 65, "417129993438720": 65, "542639970779419": 65, "4147599935531616": 65, "0321999788284302": 65, "4024400115013122": 65, "2708599865436554": 65, "04400600120425224": 65, "020260000601410866": 65, "17395000159": 65, "6191999912261963": 65, "14650000631809235": 65, "08592499792575836": 65, "2629800140857": 65, "3397899866104126": 65, "20940999686717987": 65, "46347999572753906": 65, "6479200124740": 65, "embeddings_col": 65, "coverageresult": 65, "coverateresult": 65, "wordsoverallcoverag": 65, "resultdf": 65, "percentag": [65, 105, 119], "output_col": 65, "wordscoverag": 65, "cov_embed": 65, "loadstorag": [65, 78], "storage_ref": [65, 78], "xlmrobertaembed": 66, "unsupervis": [66, 67, 68, 74, 101], "cross": [66, 67, 90], "alexi": [66, 67], "conneau": [66, 67], "kartikai": [66, 67], "khandelw": [66, 67], "vishrav": [66, 67], "chaudhari": [66, 67], "guillaum": [66, 67], "wenzek": [66, 67], "francisco": [66, 67, 74], "guzman": 66, "edouard": [66, 67], "grave": [66, 67, 172], "5tb": [66, 67], "filter": [66, 67, 74, 87, 88, 101, 103, 104, 110, 144], "commoncrawl": [66, 67], "xlm_roberta_bas": 66, "xx": [66, 67, 76, 103], "multilingu": [66, 67], "doe": [66, 74, 87, 130, 132, 171, 172, 195, 198, 199], "abl": [66, 104, 152, 193], "determin": [66, 172], "correct": [66, 105, 107, 108, 119], "hundr": [66, 67], "terabyt": [66, 67], "dub": [66, 67], "r": [66, 67, 74, 168, 172], "mbert": [66, 67], "xnli": [66, 67], "mlqa": [66, 67], "particularli": [66, 67], "low": [66, 67, 105], "swahili": [66, 67], "urdu": [66, 67], "previou": [66, 67, 101, 172, 194], "factor": [66, 67, 68, 104, 105, 172], "capac": [66, 67, 101, 172], "dilut": [66, 67], "sacrif": [66, 67], "ri": [66, 67], "competit": [66, 67, 74], "strong": [66, 67], "monolingu": [66, 67], "05969233065843582": 66, "030789051204919815": 66, "04443822056055069": 66, "09564960747": 66, "038839809596538544": 66, "011712731793522835": 66, "019954433664679527": 66, "0667808502": 66, "03952755779027939": 66, "03455188870429993": 66, "019103847444057465": 66, "04311436787": 66, "09579929709434509": 66, "02494969218969345": 66, "014753809198737144": 66, "10259044915": 66, "004710011184215546": 66, "022148698568344116": 66, "011723337695002556": 66, "013356896": 66, "xlmrobertasentenceembed": 67, "guzm\u00e3": 67, "sent_xlm_roberta_bas": 67, "xlnetembed": 68, "autoregress": 68, "permut": 68, "addition": [68, 89, 93, 122, 131, 155], "emploi": 68, "xl": 68, "backbon": 68, "exhibit": 68, "involv": [68, 96], "sota": 68, "variou": [68, 188], "rank": [68, 105], "xlnet_large_cas": 68, "xlnet_base_cas": 68, "full": [68, 194], "zihangdai": 68, "denois": 68, "autoencod": 68, "corrupt": 68, "neglect": 68, "suffer": 68, "discrep": 68, "pro": 68, "con": 68, "enabl": [68, 69, 89, 107, 145, 169, 172], "maxim": [68, 105], "expect": [68, 117, 144, 170], "likelihood": 68, "overcom": 68, "formul": 68, "furthermor": 68, "integr": [68, 74, 103, 152, 172, 190, 192], "idea": [68, 172], "margin": 68, "6287205219268799": 68, "4865287244319916": 68, "186111718416214": 68, "234187275171279": 68, "1967450380325317": 68, "2746637463569641": 68, "9481253027915955": 68, "3431355059146881": 68, "0777631998062134": 68, "092679977416992": 68, "5331977605819702": 68, "11190271377563": 68, "8349916934967041": 68, "45627787709236145": 68, "7890847325325012": 68, "028069257736": 68, "134845569729805": 68, "11672890186309814": 68, "4945235550403595": 68, "66587203741073": 68, "entityrul": 69, "entityrulerapproach": 69, "exact": [69, 78, 83], "definit": [69, 181], "json": [69, 152], "jsonl": 69, "setpatternsresourc": 69, "might": [69, 89, 119, 199], "setenablepatternregex": 69, "rule": [69, 82, 98, 114, 117], "person": [69, 182], "w": [69, 72, 82, 88, 91, 114, 117, 145, 172], "locat": [69, 95, 120, 145, 155, 194], "winterfel": 69, "j": [69, 172], "jon": 69, "snow": [69, 90, 105], "stark": 69, "eddard": 69, "patternsresourc": 69, "enablepatternregex": 69, "usestorag": 69, "rocksdb": 69, "common": [69, 99, 112, 121, 145, 158, 173, 197], "lord": 69, "29": [69, 90, 184], "38": 69, "interpret": [69, 99], "setusestorag": 69, "setsentencematch": 69, "entityrulermodel": 69, "entity_rul": [70, 72], "graphextract": [71, 125], "graph": [71, 89, 103, 111, 125, 158, 173], "take": [71, 83, 107, 110, 117, 132, 136, 139, 150, 171, 181, 193, 194, 198, 199], "nerdlmodel": [71, 87, 88, 89, 90, 152, 190], "store": [71, 136, 139, 150, 155, 172, 191], "node": [71, 172], "those": [71, 90, 171, 194, 195], "relev": [71, 74], "alreadi": [71, 74, 88, 89, 90, 116, 117, 130, 155, 172, 198], "taken": 71, "implicitli": 71, "setmergeent": 71, "automat": [71, 74, 103, 107, 193, 194], "setdependencyparsermodel": 71, "settypeddependencyparsermodel": 71, "setrelationshiptyp": 71, "prefer": [71, 125], "public": [71, 194], "relationshiptyp": 71, "pair": [71, 152, 170, 172], "entitytyp": 71, "explodeent": 71, "roottoken": 71, "travers": 71, "along": 71, "maxsentences": 71, "minsentences": 71, "below": [71, 199], "mergeent": 71, "merg": [71, 78, 83], "neighbor": 71, "includeedg": 71, "symbol": [71, 105, 119], "posmodel": 71, "coordin": [71, 95], "remoteloc": 71, "graphfinish": [71, 125], "rdf": [71, 125], "nertagg": [71, 88, 89, 90, 158, 173], "morn": [71, 125], "flight": [71, 125], "denver": [71, 125], "18": [71, 79, 81, 84, 87, 90, 130, 144, 155, 193], "path1": 71, "setentitytyp": 71, "setexplodeent": 71, "setroottoken": 71, "setmaxsentences": 71, "setminsentences": 71, "setmergeentitiesiobformat": 71, "iob": [71, 87, 88, 89], "iob2": [71, 87], "setincludeedg": 71, "setdelimit": [71, 84], "setposmodel": 71, "classifier_dl": [72, 145], "er": [72, 145], "keyword_extract": [72, 145], "yake_keyword_extract": [72, 73], "ld_dl": [72, 145], "language_detector_dl": [72, 75], "matcher": [72, 145], "big_text_match": [72, 80], "date_match": [72, 80], "multi_date_match": [72, 80], "regex_match": [72, 80], "text_match": [72, 80], "ner_approach": [72, 85], "ner_convert": [72, 85], "ner_crf": [72, 85], "ner_dl": [72, 85, 158, 173], "ner_overwrit": [72, 85], "sentence_detector": [72, 94], "sentence_detector_dl": [72, 94, 103], "sentiment_detector": [72, 97], "sentiment_dl": [72, 97], "vivekn_senti": [72, 97], "seq2seq": [72, 145], "gpt2_transform": [72, 102], "marian_transform": [72, 102], "t5_transform": [72, 102], "spell_check": [72, 145], "context_spell_check": [72, 106], "norvig_sweet": [72, 106], "symmetric_delet": [72, 106], "chunk_token": [72, 113], "recursive_token": [72, 113], "regex_token": [72, 113], "token2_chunk": [72, 113], "word_segment": [72, 118], "document_norm": [72, 145], "graph_extract": [72, 145], "lemmat": [72, 98, 110, 132, 133, 145], "n_gram_gener": [72, 145], "stemmer": [72, 110, 145], "stop_words_clean": [72, 145], "yakekeywordextract": 74, "yake": 74, "independ": [74, 107, 108, 114, 172], "domain": [74, 101], "individu": [74, 105], "organ": [74, 103], "grow": 74, "autom": 74, "adequ": 74, "manner": 74, "emerg": [74, 104], "tool": 74, "system": [74, 101, 172], "nor": 74, "thesauri": 74, "neither": 74, "corpora": [74, 78], "upon": 74, "thu": 74, "written": [74, 103], "benefici": 74, "plethora": 74, "situat": [74, 96], "access": 74, "restrict": 74, "therefor": [74, 169, 172, 198], "sent": 74, "boundari": [74, 95, 96, 100, 117], "detector": [74, 79, 98], "section": [74, 122, 131, 190, 192, 198], "tweakabl": 74, "greater": 74, "upper": 74, "bound": [74, 95, 96, 100], "minngram": 74, "maxngram": 74, "co": 74, "occurr": 74, "nkeyword": 74, "stopword": [74, 90, 110], "english": [74, 99, 107, 110, 119], "stop": [74, 88, 110], "campo": 74, "mangaravit": 74, "pasquali": 74, "jatowt": 74, "jorg": 74, "nune": 74, "2020": [74, 79, 81, 96], "scienc": [74, 191], "journal": 74, "elsevi": 74, "vol": 74, "509": 74, "pp": 74, "257": 74, "289": 74, "collect": [74, 152, 190], "turn": [74, 133, 172, 194], "come": 74, "term": [74, 170, 172], "fly": 74, "demand": 74, "abil": [74, 101], "within": [74, 93, 100, 101, 117, 121], "resort": 74, "alwai": [74, 104], "solut": 74, "articl": [74, 105], "rest": [74, 87], "merit": 74, "ten": 74, "experiment": 74, "carri": 74, "twenti": 74, "setcontextchar": [74, 117], "setminngram": 74, "setnkeyword": 74, "acquir": 74, "kaggl": 74, "platform": [74, 152, 192], "host": 74, "transact": 74, "somewhat": 74, "vagu": 74, "cloud": 74, "confer": 74, "week": [74, 79, 81, 112], "announc": [74, 90], "earli": 74, "tomorrow": [74, 79, 81], "reach": [74, 101], "phone": 74, "founder": 74, "ceo": 74, "anthoni": 74, "goldbloom": 74, "declin": 74, "deni": 74, "acquisit": 74, "happen": 74, "rumor": 74, "million": [74, 90, 101], "scientist": 74, "ben": 74, "hamner": 74, "2010": 74, "servic": [74, 103], "got": 74, "even": [74, 104], "few": [74, 117, 184, 200], "competitor": 74, "drivendata": 74, "topcod": 74, "hackerrank": 74, "stai": 74, "ahead": 74, "nich": 74, "home": [74, 145], "bui": [74, 182], "commun": 74, "mindshar": 74, "too": [74, 98, 193], "plenti": 74, "bit": [74, 96, 171, 199], "histori": [74, 96, 105], "earlier": 74, "month": [74, 79, 81, 184, 200], "team": [74, 103, 152, 190], "000": [74, 101], "around": 74, "youtub": 74, "video": [74, 99], "That": [74, 114, 152, 190, 195], "had": 74, "technologi": 74, "did": 74, "interest": 74, "kernel": [74, 168], "On": [74, 101, 103], "analyz": [74, 100], "share": [74, 171, 172, 195], "compani": [74, 103], "script": 74, "centric": 74, "job": [74, 121], "board": [74, 93, 184], "unclear": 74, "accord": [74, 105, 181], "crunchbas": 74, "pitchbook": 74, "75": 74, "launch": 74, "investor": 74, "ventur": 74, "sv": 74, "angel": 74, "levchin": 74, "naravik": 74, "chie": 74, "economist": 74, "hal": 74, "varian": 74, "khosla": 74, "yuri": 74, "milner": 74, "resulttupl": 74, "ascend": 74, "orderbi": 74, "32051516486864573": 74, "37786450577630676": 74, "39922830978423146": 74, "40224744669493756": 74, "41584827825302534": 74, "setmaxngram": 74, "setstopword": [74, 90, 110], "getstopword": 74, "loaddefaultstopword": [74, 110], "danish": [74, 110], "dutch": [74, 110], "finnish": [74, 110], "french": [74, 103, 110], "german": [74, 110, 181, 200], "hungarian": [74, 110], "italian": [74, 105, 110], "norwegian": [74, 110], "portugues": [74, 110], "russian": [74, 110], "spanish": [74, 110], "swedish": [74, 110], "turkish": [74, 110], "languagedetectordl": 76, "ld": 76, "identif": 76, "rnn": [76, 159, 166, 167, 169, 170, 172], "wikipedia": [76, 101], "tatoeba": 76, "140": 76, "wiki": 76, "languagedetector": 76, "ld_wiki_tatoeba_cnn_21": 76, "otheriws": [76, 99], "neutral": [76, 99], "thresholdlabel": [76, 99], "open": [76, 117, 121, 122, 123, 131, 133, 191], "advanc": [76, 121, 133], "program": 76, "est": [76, 103], "un": 76, "biblioth\u00e8qu": 76, "traitement": 76, "pour": 76, "le": [76, 103, 172], "avanc\u00e9": 76, "langag": 76, "naturel": 76, "programm": 76, "ist": 76, "ein": 76, "textverarbeitungsbibliothek": 76, "f\u00fcr": 76, "fortgeschritten": 76, "nat\u00fcrlich": 76, "sprachverarbeitung": 76, "die": 76, "programmiersprachen": 76, "und": 76, "setthresholdlabel": [76, 99], "lemma": [77, 98, 130, 155, 182, 195, 198, 199], "predefin": [77, 78, 82, 83, 98], "setdictionari": [77, 98, 107, 108], "lemmatizermodel": 77, "lemmas_smal": [77, 98], "setformcol": 77, "correspend": 77, "formcol": [77, 182], "setlemmacol": 77, "fromlemma": 77, "key_delimit": 77, "value_delimit": 77, "lemma_antbnc": 77, "bigtextmatch": [78, 83], "textmatch": [78, 83, 112], "externalresourc": [78, 83, 143], "mergeoverlap": [78, 83], "overlap": [78, 83], "tokenizermodel": [78, 117], "trie": 78, "dolor": [78, 83], "magna": [78, 83], "aliqua": [78, 83], "sit": [78, 83], "laborum": [78, 83], "hello": [78, 83, 112], "entityextractor": [78, 83, 112], "extractor": [78, 83, 112], "53": [78, 83], "59": [78, 79, 81, 83], "setent": [78, 83, 86, 112], "setmergeoverlap": [78, 83], "settoken": 78, "tokenizer_model": 78, "bigtextmatchermodel": 78, "btm": 78, "textmatchermodel": [78, 83], "searchtri": 78, "datematch": 79, "datematcherutil": 79, "setinputformat": 79, "setoutputformat": [79, 81], "desir": [79, 81], "yyyi": [79, 81], "mm": [79, 81], "dd": [79, 81], "Not": [79, 89, 132], "setreadmonthfirst": 79, "juli": 79, "5th": 79, "2015": [79, 172], "07": 79, "05": 79, "setdefaultdaywhenmiss": 79, "dai": [79, 81, 105], "miss": [79, 81, 121], "setanchordateyear": [79, 81], "anchor": [79, 81], "year": [79, 81, 101, 112, 184], "2021": [79, 81], "setanchordatemonth": [79, 81], "januari": [79, 81], "setanchordatedai": [79, 81], "multidatematch": [79, 81], "1978": [79, 81], "01": [79, 81], "28": [79, 81, 87, 130, 144, 155, 193], "1984": [79, 81], "04": [79, 81], "02": [79, 81], "1980": [79, 81], "79": [79, 81], "31st": [79, 81], "april": [79, 81], "2008": [79, 81], "fri": [79, 81], "nov": [79, 81, 184], "1997": [79, 81], "jan": [79, 81], "sun": [79, 81], "1st": [79, 81], "thursdai": [79, 81], "wednesdai": [79, 81], "todai": [79, 81], "yesterdai": [79, 81], "0600h": [79, 81], "06": [79, 81], "00": [79, 81], "hour": [79, 81], "6pm": [79, 81], "23": [79, 81, 82, 90, 93, 184, 185, 200], "1988": [79, 81], "31": [79, 81, 82, 90, 93, 184], "dateformat": [79, 81], "readmonthfirst": [79, 81], "defaultdaywhenmiss": [79, 81], "anchordateyear": [79, 81], "anchordatemonth": [79, 81], "anchordatedai": [79, 81], "15": [79, 169], "saw": 81, "him": 81, "me": 81, "visit": 81, "57": [81, 90], "65": [81, 90], "regexmatch": 82, "setexternalrul": 82, "match_first": 82, "match_al": 82, "match_complet": 82, "externalrul": 82, "ceremoni": 82, "setstrategi": 82, "71": 82, "regexmatchermodel": 82, "regardless": 83, "entityvalu": 83, "buildfromtoken": 83, "27": [83, 93, 95, 184], "48": 83, "setentityvalu": 83, "setbuildfromtoken": 83, "null": 84, "empti": [84, 121, 171], "enablecumul": 84, "actual": [84, 120, 124, 133, 171], "join": [84, 93, 184], "19": [84, 184], "setenablecumul": 84, "except": [84, 89, 117, 158, 173], "nerapproach": 86, "recogn": [86, 87, 88, 89, 90], "setminepoch": [86, 88], "verbosevalu": 86, "getlabelcolumn": [86, 111], "friendli": [87, 103], "whitelist": [87, 114], "setwhitelist": [87, 114], "outsid": 87, "prefix": [87, 114, 117, 152, 190], "continu": [87, 101, 125, 172, 190], "org": [87, 88, 89, 90, 130, 144, 145, 155, 168, 170, 171, 172, 181, 191, 200], "14": [87, 93, 116, 130, 144, 155, 184], "ekeu": [87, 88, 89, 130, 144, 155], "26": [87, 130, 144, 155], "36": [87, 93, 130, 144, 155, 184], "baghdad": [87, 88, 89, 130, 144, 155], "37": [87, 130, 144, 155], "nercrf": 88, "nercrfapproach": [88, 89], "nercrfmodel": [88, 89], "crf": [88, 89], "2003": [88, 89, 181, 200], "exclud": [88, 89], "setexternalfeatur": 88, "minepoch": [88, 89], "l2": 88, "c0": 88, "decai": [88, 89], "gradient": 88, "2250000": 88, "lossep": 88, "ep": 88, "minw": 88, "includeconfid": [88, 89], "confid": [88, 89], "externalfeatur": 88, "nerdlapproach": [88, 89, 173, 181, 200], "trainingdata": [88, 89, 96, 107, 108, 181], "readdataset": [88, 89, 93, 119, 181, 182, 184, 185, 200], "conll2003": [88, 89, 181, 200], "eng": [88, 89, 181, 200], "setl2": 88, "l2valu": 88, "setc0": 88, "c0valu": 88, "setlossep": 88, "setminw": 88, "setincludeconfid": [88, 89, 158, 173], "prerequisit": [88, 89, 90, 194], "nerdl": 89, "char": [89, 91, 96], "bilstm": 89, "50": [89, 90, 93, 101, 172], "real": [89, 145, 152, 172, 190], "rage": 89, "graphfold": 89, "usecontrib": 89, "contrib": [89, 167, 169], "cell": [89, 166, 167, 168, 170, 171, 172], "slightli": [89, 96], "evaluationlogextend": 89, "testdataset": [89, 152, 190], "includeallconfidencescor": 89, "enablememoryoptim": 89, "slow": 89, "down": [89, 194, 195], "usebestmodel": 89, "bestmodelmetr": 89, "check": [89, 95, 105, 106, 107, 108, 130, 133, 155], "micro": 89, "macro": 89, "metric": [89, 108, 152], "setgraphfold": [89, 111, 158, 173], "setusecontrib": 89, "setpo": 89, "setevaluationlogextend": [89, 158, 173], "settestdataset": 89, "parquet": 89, "setincludeallconfidencescor": 89, "setenablememoryoptim": [89, 158, 173], "setusebestmodel": 89, "monitor": [89, 152, 190], "setbestmodelmetr": 89, "nermodel": 89, "neroverwrit": 90, "overwrit": [90, 152], "specifi": [90, 96, 170, 172, 181, 182], "setnewresult": 90, "overwritten": 90, "newresult": 90, "lab": 90, "42": [90, 93], "45": [90, 93, 184], "47": [90, 184], "55": 90, "66": 90, "ner_overwritten": 90, "cardin": 90, "stem": [91, 109, 130, 155, 198, 199], "henc": [91, 172], "pl": 91, "slangdictionari": 91, "slang": 91, "minlength": [91, 95, 96, 115, 117], "maxlength": [91, 95, 96, 115, 117], "setcleanuppattern": 91, "d": [91, 117, 170, 172, 192], "punctuat": [91, 95], "alphanumer": 91, "alphabet": 91, "letter": [91, 101, 105, 184, 200], "za": 91, "z": [91, 117], "brother": 91, "dont": [91, 100], "setslangdictionari": 91, "setminlength": [91, 95, 96, 115, 117], "setmaxlength": [91, 95, 96, 115, 117], "normalizermodel": 91, "perceptronapproach": [93, 184, 200], "datasetpath": 93, "pierr": [93, 184], "vinken": [93, 184], "34": [93, 184], "md": [93, 184], "vb": [93, 181, 184, 200], "41": [93, 95, 184], "43": [93, 95, 184], "dt": [93, 184, 185, 200], "49": [93, 184], "poscol": [93, 119, 181], "niter": [93, 119], "anc": [93, 184, 200], "trainingperceptrondf": 93, "trainedpo": 93, "setposcolumn": [93, 119], "cd": [93, 181, 184], "setiter": 93, "getniter": [93, 119], "pos_anc": 93, "25": [93, 95, 184], "33": 93, "sentencedetectorparam": 95, "ii": 95, "abbrevi": 95, "period": 95, "geo": 95, "1026": 95, "253": 95, "553": 95, "ellipsi": 95, "quotat": 95, "mark": [95, 96, 119, 172], "exclam": 95, "breaker": 95, "explicit": [95, 101], "pragmaticcontentformatt": 95, "custombound": [95, 96], "setcustombound": [95, 96], "usecustomboundsonli": [95, 96], "explodesent": [95, 96, 181, 182], "useabbrevi": 95, "explicitli": [95, 96, 110, 144, 194], "customboundsstrategi": 95, "prepend": [95, 121], "break": 95, "append": [95, 105, 194], "parallel": [95, 96, 130, 171, 181, 198], "splitlength": [95, 96], "forcibli": [95, 96], "split": [95, 96, 112, 114, 115, 119, 166, 172], "99999": [95, 96, 117], "detectlist": 95, "nhow": 95, "setcustomboundsstrategi": 95, "setuseabbrevi": 95, "setdetectlist": 95, "setusecustomboundsonli": [95, 96], "setexplodesent": [95, 96], "setsplitlength": [95, 96], "sentencedetectordl": 96, "sentencedetectordlapproach": 96, "futur": [96, 104], "setmodel": 96, "sentencedetectordlmodel": [96, 103], "modelarchitectur": 96, "impossiblepenultim": 96, "imposs": [96, 119], "penultim": 96, "epochsnumb": 96, "eo": 96, "stefan": 96, "schweter": 96, "sajawel": 96, "ahm": 96, "littl": [96, 199], "cover": [96, 104, 119], "broken": 96, "moder": 96, "lack": 96, "easier": [96, 124, 196, 200], "hi": 96, "polit": 96, "successor": 96, "great": 96, "respons": 96, "heritag": 96, "bequeath": 96, "nelson": 96, "mandela": 96, "setepochsnumb": 96, "model_architectur": 96, "validation_split": 96, "epochs_numb": 96, "output_logs_path": 96, "setimpossiblepenultim": 96, "impossible_penultim": 96, "sentencedl": 96, "sentencesdl": 96, "helen": 96, "total": [96, 119], "four": [96, 116], "peopl": 96, "sentimentdetector": 98, "By": [98, 104, 110, 115, 123, 145, 152, 190], "viveknsentimentapproach": [98, 100], "cool": 98, "superb": 98, "uninspir": 98, "sentimentscor": 98, "staff": 98, "restaur": 98, "nice": [98, 152, 190], "avoid": [98, 171, 172], "entri": [98, 122, 131], "sttr": 98, "sentimentdetectormodel": 98, "sda": [98, 100], "pragmat": 98, "sentimentdl": 99, "affect": [99, 117, 172], "view": 99, "product": [99, 172], "review": [99, 148], "tweet": 99, "watch": [99, 100], "sentimentdl_use_imdb": 99, "imdb": 99, "sentimentdl_use_twitt": 99, "wow": 99, "awesom": 99, "bruh": 99, "damn": 99, "wast": [99, 100], "viveknsenti": 100, "analys": 100, "inspir": [100, 107, 108, 148], "vivek": 100, "narayanan": 100, "give": 100, "transit": [100, 105], "sentimentcol": 100, "prunecorpu": 100, "unfrequ": 100, "scenario": 100, "naiv": 100, "bay": 100, "vivekn": 100, "setsentimentcol": 100, "train_senti": 100, "result_senti": 100, "finish": [100, 123, 125, 129, 132, 145], "final_senti": 100, "cast": 100, "horribl": 100, "never": [100, 194], "go": [100, 194], "again": [100, 114], "anyon": 100, "protagonist": 100, "music": 100, "setprunecorpu": 100, "frequenc": [100, 105, 107, 108, 119, 172], "viveknsentimentmodel": 100, "sentiment_vivekn": 100, "gpt2transform": 101, "gpt2": 101, "openai": 101, "caus": [101, 117], "goal": 101, "occur": [101, 104], "direct": [101, 171, 172], "10x": 101, "broad": 101, "synthet": 101, "sampl": [101, 104], "unpreced": 101, "qualiti": 101, "prime": 101, "lengthi": 101, "translat": [101, 103, 104], "far": [101, 120, 124], "suggest": 101, "benefit": 101, "suffici": 101, "minoutputlength": [101, 104], "maxoutputlength": [101, 103, 104], "dosampl": [101, 104], "greedi": [101, 104], "temperatur": [101, 104], "topk": [101, 104], "highest": [101, 104, 107], "k": [101, 104, 123, 172], "topp": [101, 104], "cumul": [101, 104], "kept": [101, 104], "repetitionpenalti": [101, 104], "repetit": [101, 104], "penalti": [101, 104, 171], "norepeatngrams": [101, 104], "onc": [101, 104, 167], "ignoretokenid": [101, 104], "especi": [101, 103, 104], "multitask": 101, "learner": 101, "typic": [101, 171], "taskspecif": 101, "webpag": [101, 191], "webtext": 101, "plu": 101, "coqa": 101, "exceed": 101, "127": 101, "shot": 101, "fashion": 101, "5b": 101, "still": [101, 152], "underfit": 101, "reflect": 101, "paragraph": 101, "promis": 101, "toward": 101, "setmaxoutputlength": [101, 103, 104], "leonardo": 101, "man": 101, "1776": 101, "came": 101, "unit": [101, 111, 170, 172], "kingdom": 101, "settask": [101, 104], "setignoretokenid": [101, 103, 104], "setminoutputlength": [101, 104], "setdosampl": [101, 104], "settemperatur": [101, 104], "settopk": [101, 104], "settopp": [101, 104], "setrepetitionpenalti": [101, 104], "ctrl": [101, 104], "control": [101, 103, 104, 105, 172], "setnorepeatngrams": [101, 104], "mariantransform": 103, "marian": 103, "free": [103, 172], "mainli": 103, "academ": 103, "notabl": 103, "edinburgh": 103, "past": 103, "adam": 103, "mickiewicz": 103, "pozna\u0144": 103, "commerci": 103, "contributor": 103, "mariannmt": 103, "engin": [103, 112], "behind": 103, "deploi": [103, 191], "opus_mt_en_fr": 103, "langid": 103, "maxinputlength": 103, "differenti": 103, "dynam": [103, 171, 172], "toolkit": 103, "setmaxinputlength": 103, "capit": [103, 105], "franc": 103, "quell": 103, "la": 103, "capital": 103, "devrait": 103, "savoir": 103, "fran\u00e7ai": 103, "setlangid": 103, "t5transform": 104, "t5": 104, "reconsid": 104, "unifi": 104, "hyper": 104, "t5_small": 104, "explor": 104, "rich": 104, "rise": 104, "methodologi": 104, "practic": 104, "landscap": 104, "systemat": 104, "dozen": 104, "insight": 104, "coloss": 104, "crawl": 104, "facilit": 104, "200": [104, 158, 172, 173], "contextspellcheck": 105, "contextspellcheckerapproach": [105, 107, 108], "noisi": 105, "spell": [105, 106, 107, 108, 130, 133, 197, 198, 199], "candid": [105, 107, 108, 117], "contextspellcheckermodel": [105, 107, 108], "potenti": 105, "error": [105, 172], "three": [105, 116], "thing": [105, 120, 124], "surround": 105, "edit": [105, 107, 108], "subword": 105, "checker": [105, 107, 108, 197], "languagemodelclass": 105, "lm": 105, "wordmaxdist": 105, "maxcandid": 105, "casestrategi": 105, "try": [105, 120], "uppercas": 105, "errorthreshold": 105, "perplex": 105, "nlm": 105, "initialr": 105, "finalr": 105, "validationfract": 105, "datapoint": 105, "min": 105, "vocab": 105, "compoundcount": 105, "compound": 105, "classcount": 105, "special": [105, 146, 195], "tradeoff": 105, "weighteddistpath": 105, "levenshtein": [105, 107, 108], "maxwindowlen": 105, "rememb": 105, "norvigsweetingapproach": [105, 107, 108, 200], "symmetricdeleteapproach": [105, 107, 108, 200], "depth": [105, 171, 172, 197], "explan": [105, 197], "awar": 105, "sherlock": 105, "holm": 105, "spellcheck": [105, 107, 108], "setwordmaxdist": 105, "setepoch": 105, "setlanguagemodelclass": 105, "1650": 105, "addvocabclass": 105, "_name_": 105, "extra": [105, 107, 194], "dist": 105, "setmaxcandid": 105, "setcasestrategi": 105, "seterrorthreshold": 105, "setinitialr": 105, "setfinalr": 105, "setvalidationfract": 105, "fraction": 105, "setcompoundcount": 105, "setclasscount": 105, "settradeoff": 105, "alpha": 105, "setweighteddistpath": 105, "setmaxwindowlen": 105, "userdist": 105, "addregexclass": 105, "spellcheck_dl": 105, "gamma": 105, "influenc": 105, "decis": 105, "correctsymbol": 105, "comparelowcas": 105, "norvigsweetingmodel": [105, 107, 108], "symmetricdeletemodel": [105, 107, 108], "doc": [105, 185, 200], "cold": 105, "dreari": 105, "countri": 105, "white": 105, "smow": 105, "setweight": 105, "setgamma": 105, "getwordclass": 105, "updateregexclass": 105, "updat": [105, 172], "updatevocabclass": 105, "setcorrectsymbol": 105, "setcomparelowcas": 105, "norvigsweet": 107, "norvig": 107, "bayesian": 107, "tokenpattern": 107, "sensit": [107, 110, 117], "doublevari": 107, "search": [107, 172], "shortcircuit": 107, "frequencyprior": 107, "ham": 107, "intersect": [107, 172], "prioriti": [107, 117], "wordsizeignor": 107, "dupslimit": 107, "duplic": 107, "reductlimit": 107, "attempt": 107, "vowelswaplimit": 107, "vowel": 107, "swap": [107, 171], "corrector": 107, "gummi": [107, 108], "gummic": [107, 108], "gummier": [107, 108], "gummiest": [107, 108], "gummifer": [107, 108], "basi": [107, 108], "token_pattern": [107, 108], "setdoublevari": 107, "setshortcircuit": 107, "setfrequencyprior": 107, "symmetr": [107, 108], "delet": [107, 108, 194], "damerau": [107, 108], "magnitud": [107, 108], "transpos": [107, 108, 171], "insert": [107, 108, 194], "spellcheck_norvig": 107, "symspel": [107, 108], "somtim": 107, "wrrite": [107, 108], "wordz": [107, 108], "erong": [107, 108], "sometim": [107, 108, 194], "wrong": [107, 108], "symmetricdelet": 108, "deriv": 108, "teach": 108, "maxeditdist": 108, "frequencythreshold": [108, 119], "deletesthreshold": 108, "patttern": 108, "setmaxeditdist": 108, "setfrequencythreshold": [108, 119], "setdeletesthreshold": 108, "spellcheck_sd": 108, "spmetim": 108, "hard": 109, "employ": 109, "stopwordsclean": [110, 123, 133], "mllib": [110, 191], "stopwordsremov": 110, "cleantoken": [110, 123, 133], "stopwords_en": 110, "jvm": 110, "forth": 110, "setlocal": 110, "tfnerdlgraphbuildermodel": 111, "tfnerdlgraphbuild": 111, "sethiddenunitsnumb": 111, "assertiondlapproach": 111, "medicalnerapproach": [111, 158, 173], "gethiddenunitsnumb": 111, "getinputcol": [111, 136], "srt": 111, "getgraphfold": 111, "setgraphfil": 111, "greaph": 111, "auto": [111, 158, 173], "getgraphfil": 111, "chunktoken": 112, "flatten": 112, "michael": 112, "artist": 112, "benezar": 112, "robert": 112, "farendel": 112, "graduat": 112, "luca": 112, "chunktokenizermodel": 112, "recursivetoken": 114, "recurs": [114, 132, 141, 145, 149], "hand": 114, "suffix": [114, 117, 194], "infix": [114, 117], "middl": 114, "she": 114, "who": [114, 194], "qam": 114, "setprefix": 114, "setsuffix": 114, "setinfix": 114, "recursivetokenizermodel": 114, "regextoken": [115, 195], "whitespac": [115, 119, 121], "tolowercas": 115, "positionalmask": 115, "guarante": 115, "increment": 115, "trimwhitespac": 115, "flag": [115, 172], "preserveposit": [115, 133], "eventu": 115, "settolowercas": 115, "nthi": 115, "setpositionalmask": 115, "settrimwhitespac": 115, "setpreserveposit": [115, 133], "token2chunk": 116, "17": [116, 184], "tokenizedsent": 117, "non": [117, 119, 158, 172, 173], "rulefactori": 117, "targetpattern": 117, "grab": 117, "prefixpattern": 117, "suffixpattern": 117, "infixpattern": 117, "sub": [117, 172], "won": 117, "exceptionspath": 117, "casesensitiveexcept": 117, "contextchar": 117, "splitpattern": 117, "splitchar": 117, "didn": 117, "jane": 117, "boyfriend": 117, "getinfixpattern": 117, "getsuffixpattern": 117, "getprefixpattern": 117, "getcontextchar": 117, "getsplitchar": 117, "settargetpattern": 117, "setprefixpattern": 117, "setsuffixpattern": 117, "setinfixpattern": 117, "addinfixpattern": 117, "setexcept": 117, "getexcept": 117, "setexceptionspath": 117, "addexcept": 117, "setcasesensitiveexcept": 117, "getcasesensitiveexcept": 117, "addcontextchar": 117, "setsplitpattern": 117, "setsplitchar": 117, "addsplitchar": 117, "piec": 117, "token_rul": 117, "wordsegment": 119, "wordsegmenterapproach": 119, "concaten": [119, 166, 171], "korean": 119, "japanes": 119, "chines": 119, "correspond": [119, 152, 171], "wordsegmentermodel": 119, "tip": 119, "frame": 119, "least": 119, "frequent": 119, "ambiguitythreshold": 119, "chinese_train": 119, "utf8": 119, "\u5341": 119, "ll": 119, "\u56db": 119, "rr": 119, "\u4e0d": 119, "\u662f": 119, "setniter": 119, "trainingdataset": 119, "setambiguitythreshold": 119, "getfrequencythreshold": 119, "getambiguitythreshold": 119, "plit": 119, "words_seg": 119, "wordseg_pku": 119, "zh": 119, "\u7136\u800c": 119, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 119, "\u9019\u6a23": 119, "\u7684": 119, "\u8655\u7406": 119, "\u4e5f": 119, "\u884d\u751f": 119, "\u4e86": 119, "\u4e00\u4e9b": 119, "\u554f\u984c": 119, "chunk2doc": [120, 121], "back": [120, 171], "re": [120, 194], "doc2chunk": [120, 121], "pretrainedpipelin": [120, 124, 130, 144, 155, 193, 198, 199], "york": [120, 124], "jersei": [120, 124], "aren": [120, 124], "amongst": [120, 124], "explain_document_dl": [120, 124, 130, 144, 155], "chunktodoc": 120, "chunkconvert": 120, "explainresult": [120, 124], "22": [120, 124, 181, 193], "chunkcol": 121, "stringtyp": 121, "setisarrai": 121, "startcol": 121, "startcolbytokenindex": 121, "isarrai": 121, "failonmiss": 121, "fail": 121, "chunkassembl": 121, "setchunkcol": 121, "setstartcol": 121, "setstartcolbytokenindex": 121, "setfailonmiss": 121, "prepar": [122, 128, 131], "disabl": [122, 131], "outputcol": [122, 123, 124, 125, 128, 131], "idcol": [122, 131], "metadatacol": [122, 131], "cleanupmod": [122, 131], "cleanup": [122, 131], "inplac": [122, 131], "inplace_ful": [122, 131], "shrink_ful": [122, 131], "each_ful": [122, 131], "delete_ful": [122, 131], "51": [122, 131, 184], "setidcol": [122, 131], "setmetadatacol": [122, 131], "usabl": 123, "lda": 123, "forest": 123, "featurecol": 123, "cleanannot": [123, 124, 125], "outputasvector": 123, "gloveembed": 123, "finished_sentence_embed": 123, "resultwiths": 123, "1619900017976761": 123, "045552998781204224": 123, "03229299932718277": 123, "685609996318": 123, "42416998744010925": 123, "1378999948501587": 123, "5717899799346924": 123, "5078899860382": 123, "08621499687433243": 123, "15772999823093414": 123, "06067200005054474": 123, "395359992980": 123, "4970499873161316": 123, "7164199948310852": 123, "40119001269340515": 123, "05761000141501": 123, "08170200139284134": 123, "7159299850463867": 123, "20677000284194946": 123, "0295659992843": 123, "valuesplitsymbol": 124, "annotationsplitsymbol": 124, "includemetadata": 124, "outputasarrai": [124, 125], "parseembeddingsvector": 124, "setvaluesplitsymbol": 124, "setannotationsplitsymbol": 124, "setincludemetadata": [124, 195], "setoutputasarrai": [124, 125], "setparseembeddingsvector": 124, "finishedresult": 125, "hasrecursivefit": [126, 127], "java_obj": [126, 148, 151], "py4j": [126, 127, 151], "java_gatewai": [126, 127, 151], "javaobject": [126, 127, 151], "recursivepipelin": [126, 127, 132, 136], "hasrecursivetransform": 127, "tmp": [128, 145, 190], "chunk2_doc": [129, 145], "doc2_chunk": [129, 145], "document_assembl": [129, 145], "embeddings_finish": [129, 145], "graph_finish": [129, 145], "has_recursive_fit": [129, 145], "has_recursive_transform": [129, 145], "light_pipelin": [129, 145], "recursive_pipelin": [129, 145], "token_assembl": [129, 145], "lightpipelin": [130, 155, 198], "parse_embed": [130, 155], "equival": [130, 145, 198], "execut": [130, 172, 194, 198], "hold": [130, 198], "principl": [130, 198], "everyth": [130, 198, 199], "deal": [130, 198], "fullannot": [130, 155], "happi": [130, 193, 195, 198, 199], "prp": [130, 182, 184, 193, 198, 199, 200], "rb": [130, 158, 173, 184, 193, 198, 199, 200], "optional_target": 130, "explain_document_pipelin": [130, 144, 155, 193, 198, 199], "dict_kei": [130, 155], "fullannotateimag": 130, "path_to_imag": 130, "stage": [130, 132, 152, 190, 194, 195, 198], "setignoreunsupport": 130, "unsupport": 130, "annotatormodel": [130, 135], "getignoreunsupport": 130, "calculationscol": 131, "text2": 131, "document1": 131, "document2": 131, "kwarg": [132, 172], "decid": 132, "advantag": 132, "behav": 132, "exactli": 132, "intent": 132, "recursivepipelinemodel": 132, "pipeline_model": [132, 152, 190], "intend": 132, "tokenassembl": 133, "reconstruct": 133, "cleantext": 133, "opensourc": 133, "annotatorapproach": [134, 141, 152], "annotatorproperti": 136, "attach": [136, 139, 150, 152], "getoutputcol": 136, "setlazyannot": 136, "lazili": 136, "getlazyannot": 136, "annotator_approach": [138, 145], "annotator_model": [138, 145], "annotator_properti": [138, 145], "coverage_result": [138, 145], "recursive_annotator_approach": [138, 145], "hasembeddingsproperti": 139, "getdimens": 139, "constant": 140, "recursiveannotatorapproach": 141, "handl": [142, 183], "fo": 143, "assist": 144, "map_annot": 144, "f": [144, 152, 190], "output_typ": 144, "udf": 144, "userdefinedfunct": 144, "def": 144, "nnp_token": 144, "lambda": 144, "alia": 144, "epeu": 144, "map_annotations_arrai": 144, "map_annotations_strict": 144, "map_annotations_col": 144, "output_column": 144, "annotatyon_typ": 144, "chunks_df": 144, "pos_chunk": 144, "vbz": [144, 181, 200], "filter_by_annotations_col": 144, "filter_po": 144, "explode_annotations_col": 144, "annotator_java_ml": [145, 149], "annotator_transform": [145, 149], "extended_java_wrapp": [145, 149], "params_getters_sett": [145, 149], "comet": [145, 153, 192], "pretrained_pipelin": [145, 154], "resource_download": [145, 154], "pub_tat": [145, 183], "annotation_imag": 145, "m1": 145, "aarch64": 145, "cache_fold": 145, "log_fold": 145, "cluster_tmp_dir": 145, "real_time_output": 145, "output_level": 145, "correctli": 145, "maco": 145, "linux": 145, "alloc": 145, "directori": [145, 190], "cache_pretrain": 145, "temporarili": 145, "unpack": 145, "hadoop": 145, "dir": 145, "s3": 145, "hdf": 145, "dbf": 145, "annotator_log": 145, "annotatorjavamlread": 146, "mixin": 146, "javamlread": 146, "classmethod": 146, "mlreader": 146, "clazz": 146, "rl": 146, "javaparam": 146, "annotatortransform": 147, "ensur": 147, "_java_obj": 147, "extens": 148, "javawrapp": 148, "extendedjavawrapp": 148, "new_java_arrai": 148, "pylist": 148, "java_class": 148, "todo": 148, "chang": [148, 169, 172], "paramsgetterssett": 150, "getparamvalu": 150, "paramnam": 150, "setparamvalu": 150, "recursiveestim": 151, "tupl": [151, 170, 171, 172], "overrid": 151, "recursivetransform": 151, "cometlogg": [152, 190], "workspac": 152, "project_nam": [152, 190], "comet_mod": [152, 190], "experiment_id": 152, "experiment_kwarg": 152, "logger": [152, 190], "meta": [152, 192], "ai": [152, 190], "practition": [152, 190], "reliabl": [152, 190], "streamlin": [152, 190], "lifecycl": [152, 190, 192], "track": [152, 190, 191], "explain": [152, 190, 197, 199], "reproduc": [152, 190, 191], "outputlogpath": [152, 190], "offlin": 152, "onlin": [152, 172, 190], "reus": [152, 166, 168, 170, 172], "importerror": 152, "output_log_path": [152, 190], "embd": [152, 190], "setshuffleperepoch": [152, 190], "logdir": [152, 190], "interfac": [152, 190, 198], "tab": [152, 190], "chart": [152, 190], "comet_ml": [152, 190], "log_pipeline_paramet": [152, 190], "log_visu": [152, 190], "html": [152, 190], "viz": [152, 190], "upload": 152, "visual": 152, "colum": [152, 190], "ner_chunk": [152, 190], "sparknlp_displai": [152, 190], "nervisu": [152, 190], "idx": [152, 190], "enumer": [152, 190], "label_col": [152, 190], "document_col": [152, 190], "return_html": [152, 190], "log_metr": [152, 190], "sklearn": [152, 190], "preprocess": [152, 190], "multilabelbinar": [152, 190], "classification_report": [152, 190], "preds_df": [152, 190], "topanda": [152, 190], "mlb": [152, 190], "y_true": [152, 190], "fit_transform": [152, 190], "y_pred": [152, 190], "output_dict": [152, 190], "log_paramet": 152, "log_completed_run": 152, "log_file_path": 152, "complet": [152, 191], "log_asset": 152, "asset_path": 152, "asset": 152, "audio": 152, "log_asset_data": 152, "interv": 152, "refresh": 152, "outstand": 152, "disk_loc": 155, "fulli": 155, "light_model": 155, "gather": 155, "langaug": 155, "resourcedownload": 156, "wrongtfvers": [158, 173], "exit": [158, 173], "tensorflowaddonsneed": 158, "tfgraphbuild": [158, 173], "build_param": [158, 173], "generic_classifi": [158, 173], "assertion_dl": [158, 173], "relation_extract": [158, 173], "healthcar": [158, 173], "tfgraph": [158, 173], "tf_graph": [158, 173], "get_model": [158, 173], "nertfgraphbuild": [158, 173], "feat_siz": [158, 173], "n_class": [158, 173], "embeddings_dim": [158, 173], "nchar": [158, 173], "ntag": [158, 173], "model_loc": [158, 173], "medical_ner_graph": [158, 173], "model_filenam": [158, 173], "ner_log": [158, 173], "tfgraphbuilderfactori": [158, 173], "factori": [158, 173], "model_nam": [158, 173], "filenam": [158, 173], "ner_graph": [158, 173], "print_model_param": [158, 173], "sparknlp_jsl": 158, "tf2contrib": 159, "core_rnn_cel": [159, 169], "fused_rnn_cel": [159, 169], "gru_op": [159, 169], "lstm_op": [159, 169], "rnn_cell": [159, 167, 169], "core": 166, "embeddingwrapp": 166, "inputprojectionwrapp": 166, "outputprojectionwrapp": 166, "embedding_class": 166, "embedding_s": 166, "num_proj": [166, 172], "input_s": [166, 170, 171, 172], "output_s": [166, 170], "fuse": 167, "fusedrnncel": [167, 170], "expand": 167, "recurr": [167, 170, 171, 172], "rnncell": [167, 171, 172], "flexibl": 167, "__call__": 167, "signatur": 167, "fusedrnncelladaptor": 167, "use_dynamic_rnn": 167, "adaptor": 167, "timereversedfusedrnn": 167, "revers": 167, "basicrnncel": 167, "fw_lstm": 167, "bw_lstm": 167, "fw_out": 167, "fw_state": 167, "bw_out": 167, "bw_state": 167, "grublockcel": 168, "num_unit": [168, 170, 172], "cell_siz": 168, "gru_cel": 168, "deprec": 168, "grublockcellv2": 168, "ab": [168, 170, 171, 172], "1406": [168, 172], "1078": [168, 172], "forward": [168, 171], "propag": [168, 172], "mathemat": 168, "equat": [168, 172], "b_ru": 168, "constant_initi": 168, "b_c": 168, "x_h_prev": 168, "h_prev": 168, "r_bar": 168, "u_bar": 168, "w_ru": 168, "h_prevr": 168, "circ": [168, 172], "x_h_prevr": 168, "c_bar": 168, "w_c": [168, 172], "tanh": [168, 172], "h": [168, 172], "temporari": 168, "impl": 168, "input_shap": [168, 172], "blob": 169, "r1": 169, "lstmblockcel": 170, "forget_bia": [170, 172], "cell_clip": [170, 172], "use_peephol": [170, 172], "dtype": [170, 171, 172], "lstm_cell": 170, "1409": 170, "2329": 170, "forget": [170, 172], "gate": [170, 172], "rnn_cell_impl": [170, 172], "lstmcell": [170, 172], "monolith": 170, "short": [170, 172], "lstmblockwrapp": 170, "housekeep": 170, "_call_cel": 170, "initial_st": 170, "sequence_length": [170, 171], "time_len": 170, "initial_cell_st": 170, "initial_output": 170, "_num_unit": 170, "heterogen": 170, "int32": [170, 171], "int64": [170, 171], "cell_stat": 170, "valueerror": [170, 171, 172], "mismatch": 170, "lstmblockfusedcel": 170, "lstm_fused_cel": 170, "extrem": 170, "stack_bidirectional_rnn": 171, "cells_fw": 171, "cells_bw": 171, "initial_states_fw": 171, "initial_states_bw": 171, "stack": [171, 172], "sever": [171, 200], "backward": 171, "bidirectional_rnn": 171, "intermedi": 171, "1303": 171, "5778": 171, "appropri": 171, "cell_fw": 171, "state_s": [171, 172], "variablescop": 171, "subgraph": 171, "output_state_fw": 171, "output_state_bw": 171, "output_states_fw": 171, "output_states_bw": 171, "typeerror": 171, "cell_bw": 171, "stack_bidirectional_dynamic_rnn": 171, "parallel_iter": 171, "time_major": 171, "swap_memori": 171, "max_tim": 171, "tempor": 171, "major": 171, "emit": 171, "transpar": 171, "produc": [171, 172, 194], "prop": 171, "cpu": 171, "layers_output": 171, "coupledinputforgetgatelstmcel": 172, "proj_clip": 172, "num_unit_shard": 172, "num_proj_shard": 172, "state_is_tupl": 172, "math_op": 172, "layer_norm": 172, "norm_gain": 172, "norm_shift": 172, "peephol": 172, "pdf": 172, "semanticscholar": 172, "1154": 172, "0131eae85b2e11d53df7f1360eeb6476e7f4": 172, "felix": 172, "ger": 172, "jurgen": 172, "schmidhub": 172, "fred": 172, "cummin": 172, "iet": 172, "850": 172, "855": 172, "1999": 172, "pub": 172, "archiv": 172, "43905": 172, "hasim": 172, "sak": 172, "andrew": 172, "senior": 172, "francois": 172, "beaufai": 172, "acoust": 172, "interspeech": 172, "2014": 172, "coupl": 172, "1503": 172, "04069": 172, "greff": 172, "odyssei": 172, "peep": 172, "hole": 172, "connect": 172, "1607": 172, "06450": 172, "jimmi": 172, "lei": 172, "ba": 172, "jami": 172, "ryan": 172, "kiro": 172, "geoffrei": 172, "hinton": 172, "nonlinear": 172, "2d": 172, "c_state": 172, "m_state": 172, "output_dim": 172, "cannot": 172, "timefreqlstmcel": 172, "feature_s": 172, "frequency_skip": 172, "tara": 172, "sainath": 172, "bo": 172, "li": 172, "lvcsr": 172, "2016": 172, "clip": 172, "gridlstmcel": 172, "share_time_frequency_weight": 172, "num_frequency_block": 172, "start_freqindex_list": 172, "end_freqindex_list": 172, "couple_input_forget_g": 172, "grid": 172, "nal": 172, "kalchbrenn": 172, "ivo": 172, "danihelka": 172, "alex": 172, "proc": 172, "iclr": 172, "1507": 172, "01526": 172, "shared_weight": 172, "_state_is_tupl": 172, "bidirectionalgridlstmcel": 172, "backward_slice_offset": 172, "gridlstm": 172, "attentioncellwrapp": 172, "attn_length": 172, "attn_siz": 172, "attn_vec_s": 172, "1601": 172, "06733": 172, "lstma": 172, "highwaywrapp": 172, "couple_carry_transform_g": 172, "carry_bias_init": 172, "highwai": 172, "srivastava": 172, "preprint": 172, "1505": 172, "00387": 172, "layernormbasiclstmcel": 172, "dropout_keep_prob": 172, "dropout_prob_se": 172, "1603": 172, "05118": 172, "stanislau": 172, "semeniuta": 172, "aliaksei": 172, "severyn": 172, "erhardt": 172, "barth": 172, "nascel": 172, "use_bia": 172, "na": 172, "1611": 172, "01578": 172, "barret": 172, "zoph": 172, "quoc": 172, "reinforc": 172, "2017": 172, "ugrnncel": 172, "ugrnn": 172, "compromis": 172, "vanilla": 172, "instantan": 172, "feedforward": 172, "09913": 172, "jasmin": 172, "collin": 172, "jascha": 172, "sohl": 172, "dickstein": 172, "david": 172, "sussillo": 172, "num": 172, "new_output": 172, "ident": 172, "new_stat": 172, "intersectionrnncel": 172, "num_in_proj": 172, "y_activ": 172, "nn_op": 172, "relu": 172, "flow": 172, "subsequ": 172, "deepli": 172, "new_i": 172, "compiledwrapp": 172, "compile_st": 172, "xla": 172, "jit": 172, "phasedlstmcel": 172, "leak": 172, "ratio_on": 172, "trainable_ratio_on": 172, "period_init_min": 172, "period_init_max": 172, "1610": 172, "09513v1": 172, "float32": 172, "float64": 172, "features_s": 172, "lstmstatetupl": 172, "timestep": 172, "convlstmcel": 172, "conv_ndim": 172, "output_channel": 172, "kernel_shap": 172, "skip_connect": 172, "conv_lstm_cel": 172, "1506": 172, "04214v1": 172, "conv1dlstmcel": 172, "conv_1d_lstm_cel": 172, "1d": 172, "conv2dlstmcel": 172, "conv_2d_lstm_cel": 172, "conv3dlstmcel": 172, "conv_3d_lstm_cel": 172, "3d": 172, "glstmcell": 172, "number_of_group": 172, "1703": 172, "10722": 172, "kuchaiev": 172, "ginsburg": 172, "trick": 172, "brief": 172, "evenli": 172, "fed": 172, "receiv": [172, 184, 200], "num_input": 172, "known": 172, "divis": 172, "innermost": 172, "incompat": 172, "layernormlstmcel": 172, "srucel": 172, "sru": 172, "cf": 172, "1709": 172, "02755": 172, "variat": 172, "character": 172, "simplifi": 172, "consecut": 172, "tradition": 172, "multipli": 172, "matrix": 172, "w_hh": 172, "ensu": 172, "flavor": 172, "h_": 172, "pointwis": 172, "boolean": 172, "mistak": 172, "argument": 172, "weightnormlstmcel": 172, "norm": 172, "adapt": 172, "1602": 172, "07868": 172, "tim": 172, "saliman": 172, "diederik": 172, "kingma": 172, "reparameter": 172, "indrnncel": 172, "indrnn": 172, "1803": 172, "04831": 172, "indygrucel": 172, "kernel_initi": 172, "bias_initi": 172, "grucel": 172, "yet": 172, "u_r": 172, "u_z": 172, "diagon": 172, "hadamard": 172, "r_j": 172, "sigmaleft": 172, "mathbf": 172, "w_rmathbf": 172, "_j": 172, "u_rcirc": 172, "_jright": 172, "z_j": 172, "w_zmathbf": 172, "u_zcirc": 172, "tild": 172, "phileft": 172, "denot": 172, "indygru": 172, "oppos": 172, "nunit": 172, "indylstmcel": 172, "indylstm": 172, "basiclstmcel": 172, "u_f": 172, "u_i": 172, "u_o": 172, "u_c": 172, "f_t": 172, "sigma_gleft": 172, "w_f": 172, "x_t": 172, "b_fright": 172, "i_t": 172, "w_i": 172, "b_iright": 172, "o_t": 172, "w_o": 172, "b_oright": 172, "c_t": 172, "c_": 172, "sigma_cleft": 172, "b_cright": 172, "1903": 172, "08023": 172, "ntmcell": 172, "memory_s": 172, "memory_vector_dim": 172, "read_head_num": 172, "write_head_num": 172, "shift_rang": 172, "clip_valu": 172, "ture": 172, "1807": 172, "08518": 172, "collier": 172, "joeran": 172, "beel": 172, "snowkylin": 172, "ntm": 172, "cours": 172, "1410": 172, "5401": 172, "wayn": 172, "minimalrnncel": 172, "glorot_uniform": 172, "ones": 172, "minimalrnn": 172, "1806": 172, "05394v2": 172, "minmin": 172, "jeffrei": 172, "pennington": 172, "samuel": 172, "schoenholz": 172, "isometri": 172, "theori": 172, "icml": 172, "cfncell": 172, "chao": 172, "openreview": 172, "net": 172, "s1dizvclg": 172, "thoma": 172, "laurent": 172, "jame": 172, "von": 172, "brecht": 172, "cfn": 172, "goe": 172, "contract": 172, "decoupl": 172, "tf_graph_1x": 173, "documentcol": [181, 182], "sentencecol": [181, 182], "tokencol": 181, "conlllabelindex": 181, "conllposindex": 181, "textcol": [181, 182], "labelcol": 181, "docstart": [181, 200], "eu": [181, 200], "np": [181, 200], "reject": [181, 200], "vp": [181, 200], "misc": [181, 200], "TO": [181, 200], "boycott": [181, 200], "british": [181, 200], "lamb": [181, 200], "blackburn": 181, "brussel": 181, "1996": 181, "08": 181, "storage_level": 181, "storagelevel": 181, "disk_onli": 181, "lift": 181, "persist": 181, "uposcol": 182, "upo": 182, "xposcol": 182, "xpo": 182, "lemmacol": 182, "sent_id": 182, "sell": 182, "pron": 182, "nom": 182, "plur": 182, "_": 182, "tens": 182, "conj": 182, "cc": 182, "spaceaft": 182, "No": [182, 193], "punct": 182, "conllufil": [182, 200], "conlldataset": [182, 200], "morph": 182, "Into": 182, "googleo": 182, "sconj": 182, "propn": 182, "adp": 182, "wp": 182, "vbd": [182, 184, 200], "tagger": [184, 200], "ago": [184, 200], "posdf": 184, "61": 184, "56": 184, "67": [184, 185, 200], "nonexecut": 184, "69": 184, "76": 184, "director": 184, "78": 184, "81": 184, "84": 184, "outputposcol": 184, "outputdocumentcol": 184, "outputtextcol": 184, "pubtat": [185, 197], "medic": [185, 200], "medment": [185, 200], "25763772": [185, 200], "dctn4": [185, 200], "t116": [185, 200], "t123": [185, 200], "c4308010": [185, 200], "63": [185, 200], "chronic": [185, 200], "pseudomona": [185, 200], "aeruginosa": [185, 200], "infect": [185, 200], "t047": [185, 200], "c0854135": [185, 200], "82": [185, 200], "cystic": [185, 200], "fibrosi": [185, 200], "c0010674": [185, 200], "120": [185, 200], "pa": [185, 200], "124": [185, 200], "139": [185, 200], "pubtatorfil": 185, "corpus_pubtator_sampl": 185, "pubtatordataset": 185, "doc_id": 185, "finished_token": [185, 195], "finished_po": 185, "finished_n": 185, "finished_token_metadata": 185, "finished_pos_metadata": 185, "finished_label_metadata": 185, "mo": 185, "ispaddedtoken": 185, "pad": 185, "workflow": 190, "dedic": 190, "account": 190, "inspect": 190, "init": 190, "sparknlp_experi": 190, "offline_directori": 190, "later": 190, "nativ": 191, "record": 191, "queri": 191, "serv": 191, "registri": 191, "discov": 191, "central": 191, "send": 192, "messag": 192, "mlflow": 192, "clearli": 193, "explain_document_ml": [193, 198, 199], "approx": [193, 198, 199], "mb": [193, 198, 199], "ok": [193, 198, 199], "spearhead": 194, "declar": 194, "accordingli": 194, "extra_loc": 194, "bring": 194, "offer": [194, 196, 199], "column_nam": 194, "preced": 194, "interchang": 195, "anoth": 195, "road": 195, "proce": 195, "At": 195, "sens": 199, "constantli": 199, "server": 199, "plain": 200, "train_po": 200, "training_conl": 200, "train_corpu": 200, "withcolumnrenam": 200, "trainingpubtatordf": 200, "corpus_pubt": 200}, "objects": {"": [[145, 0, 0, "-", "sparknlp"]], "sparknlp": [[12, 0, 0, "-", "annotation"], [13, 0, 0, "-", "annotation_image"], [72, 0, 0, "-", "annotator"], [129, 0, 0, "-", "base"], [138, 0, 0, "-", "common"], [144, 0, 0, "-", "functions"], [149, 0, 0, "-", "internal"], [153, 0, 0, "-", "logging"], [154, 0, 0, "-", "pretrained"], [145, 3, 1, "", "start"], [183, 0, 0, "-", "training"], [187, 0, 0, "-", "upload_to_hub"], [188, 0, 0, "-", "util"], [145, 3, 1, "", "version"]], "sparknlp.annotation": [[12, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[12, 2, 1, "", "arrayType"], [12, 2, 1, "", "copy"], [12, 2, 1, "", "dataType"], [12, 2, 1, "", "fromRow"], [12, 2, 1, "", "toRow"]], "sparknlp.annotation_image": [[13, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[13, 2, 1, "", "copy"]], "sparknlp.annotator": [[14, 0, 0, "-", "chunker"], [28, 0, 0, "-", "classifier_dl"], [41, 0, 0, "-", "coref"], [43, 0, 0, "-", "cv"], [46, 0, 0, "-", "dependency"], [48, 0, 0, "-", "document_normalizer"], [58, 0, 0, "-", "embeddings"], [70, 0, 0, "-", "er"], [71, 0, 0, "-", "graph_extraction"], [73, 0, 0, "-", "keyword_extraction"], [75, 0, 0, "-", "ld_dl"], [77, 0, 0, "-", "lemmatizer"], [80, 0, 0, "-", "matcher"], [84, 0, 0, "-", "n_gram_generator"], [85, 0, 0, "-", "ner"], [91, 0, 0, "-", "normalizer"], [92, 0, 0, "-", "pos"], [94, 0, 0, "-", "sentence"], [97, 0, 0, "-", "sentiment"], [102, 0, 0, "-", "seq2seq"], [106, 0, 0, "-", "spell_check"], [109, 0, 0, "-", "stemmer"], [110, 0, 0, "-", "stop_words_cleaner"], [111, 0, 0, "-", "tf_ner_dl_graph_builder"], [113, 0, 0, "-", "token"], [118, 0, 0, "-", "ws"]], "sparknlp.annotator.chunker": [[14, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[14, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[15, 0, 0, "-", "albert_for_question_answering"], [16, 0, 0, "-", "albert_for_sequence_classification"], [17, 0, 0, "-", "albert_for_token_classification"], [18, 0, 0, "-", "bert_for_question_answering"], [19, 0, 0, "-", "bert_for_sequence_classification"], [20, 0, 0, "-", "bert_for_token_classification"], [21, 0, 0, "-", "classifier_dl"], [22, 0, 0, "-", "deberta_for_question_answering"], [23, 0, 0, "-", "deberta_for_sequence_classification"], [24, 0, 0, "-", "deberta_for_token_classification"], [25, 0, 0, "-", "distil_bert_for_question_answering"], [26, 0, 0, "-", "distil_bert_for_sequence_classification"], [27, 0, 0, "-", "distil_bert_for_token_classification"], [29, 0, 0, "-", "longformer_for_question_answering"], [30, 0, 0, "-", "longformer_for_sequence_classification"], [31, 0, 0, "-", "longformer_for_token_classification"], [32, 0, 0, "-", "multi_classifier_dl"], [33, 0, 0, "-", "roberta_for_question_answering"], [34, 0, 0, "-", "roberta_for_sequence_classification"], [35, 0, 0, "-", "roberta_for_token_classification"], [36, 0, 0, "-", "xlm_roberta_for_question_answering"], [37, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [38, 0, 0, "-", "xlm_roberta_for_token_classification"], [39, 0, 0, "-", "xlnet_for_sequence_classification"], [40, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[15, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"], [15, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[16, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"], [16, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[17, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"], [17, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[18, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setConfigProtoBytes"], [18, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[19, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setCoalesceSentences"], [19, 2, 1, "", "setConfigProtoBytes"], [19, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[20, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"], [20, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[21, 1, 1, "", "ClassifierDLApproach"], [21, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[21, 2, 1, "", "setBatchSize"], [21, 2, 1, "", "setConfigProtoBytes"], [21, 2, 1, "", "setDropout"], [21, 2, 1, "", "setEnableOutputLogs"], [21, 2, 1, "", "setLabelColumn"], [21, 2, 1, "", "setLr"], [21, 2, 1, "", "setMaxEpochs"], [21, 2, 1, "", "setOutputLogsPath"], [21, 2, 1, "", "setRandomSeed"], [21, 2, 1, "", "setValidationSplit"], [21, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[22, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"], [22, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[23, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setCoalesceSentences"], [23, 2, 1, "", "setConfigProtoBytes"], [23, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[24, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"], [24, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[25, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"], [25, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[26, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setCoalesceSentences"], [26, 2, 1, "", "setConfigProtoBytes"], [26, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[27, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setConfigProtoBytes"], [27, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[29, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"], [29, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[30, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"], [30, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[31, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"], [31, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[32, 1, 1, "", "MultiClassifierDLApproach"], [32, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[32, 2, 1, "", "setBatchSize"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setEnableOutputLogs"], [32, 2, 1, "", "setLabelColumn"], [32, 2, 1, "", "setLr"], [32, 2, 1, "", "setMaxEpochs"], [32, 2, 1, "", "setOutputLogsPath"], [32, 2, 1, "", "setRandomSeed"], [32, 2, 1, "", "setThreshold"], [32, 2, 1, "", "setValidationSplit"], [32, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"], [32, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[33, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"], [33, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[34, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[34, 2, 1, "", "getClasses"], [34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setCoalesceSentences"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[35, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[35, 2, 1, "", "getClasses"], [35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"], [35, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[36, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setConfigProtoBytes"], [36, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[37, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setCoalesceSentences"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[38, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[39, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[40, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"], [40, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.coref": [[42, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[42, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setConfigProtoBytes"], [42, 2, 1, "", "setMaxSegmentLength"], [42, 2, 1, "", "setMaxSentenceLength"], [42, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[44, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.vit_for_image_classification": [[44, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.dependency": [[45, 0, 0, "-", "dependency_parser"], [47, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[45, 1, 1, "", "DependencyParserApproach"], [45, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[45, 2, 1, "", "setConllU"], [45, 2, 1, "", "setDependencyTreeBank"], [45, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[45, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[47, 1, 1, "", "TypedDependencyParserApproach"], [47, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[47, 2, 1, "", "setConll2009"], [47, 2, 1, "", "setConllU"], [47, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[47, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_normalizer": [[48, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[48, 2, 1, "", "setAction"], [48, 2, 1, "", "setEncoding"], [48, 2, 1, "", "setLowercase"], [48, 2, 1, "", "setPatterns"], [48, 2, 1, "", "setPolicy"], [48, 2, 1, "", "setReplacement"]], "sparknlp.annotator.embeddings": [[49, 0, 0, "-", "albert_embeddings"], [50, 0, 0, "-", "bert_embeddings"], [51, 0, 0, "-", "bert_sentence_embeddings"], [52, 0, 0, "-", "camambert_embeddings"], [53, 0, 0, "-", "chunk_embeddings"], [54, 0, 0, "-", "deberta_embeddings"], [55, 0, 0, "-", "distil_bert_embeddings"], [56, 0, 0, "-", "doc2vec"], [57, 0, 0, "-", "elmo_embeddings"], [59, 0, 0, "-", "longformer_embeddings"], [60, 0, 0, "-", "roberta_embeddings"], [61, 0, 0, "-", "roberta_sentence_embeddings"], [62, 0, 0, "-", "sentence_embeddings"], [63, 0, 0, "-", "universal_sentence_encoder"], [64, 0, 0, "-", "word2vec"], [65, 0, 0, "-", "word_embeddings"], [66, 0, 0, "-", "xlm_roberta_embeddings"], [67, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [68, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[49, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_embeddings": [[50, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"], [50, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[51, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setIsLong"], [51, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.camambert_embeddings": [[52, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camambert_embeddings.CamemBertEmbeddings": [[52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"], [52, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[53, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[53, 2, 1, "", "setPoolingStrategy"], [53, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[54, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[54, 2, 1, "", "loadSavedModel"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setConfigProtoBytes"], [54, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[55, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"], [55, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.doc2vec": [[56, 1, 1, "", "Doc2VecApproach"], [56, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[56, 2, 1, "", "setMaxIter"], [56, 2, 1, "", "setMaxSentenceLength"], [56, 2, 1, "", "setMinCount"], [56, 2, 1, "", "setNumPartitions"], [56, 2, 1, "", "setSeed"], [56, 2, 1, "", "setStepSize"], [56, 2, 1, "", "setVectorSize"], [56, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[57, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setBatchSize"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[59, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"], [59, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[60, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"], [60, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[61, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setConfigProtoBytes"], [61, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[62, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[62, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[63, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[64, 1, 1, "", "Word2VecApproach"], [64, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[64, 2, 1, "", "setMaxIter"], [64, 2, 1, "", "setMaxSentenceLength"], [64, 2, 1, "", "setMinCount"], [64, 2, 1, "", "setNumPartitions"], [64, 2, 1, "", "setSeed"], [64, 2, 1, "", "setStepSize"], [64, 2, 1, "", "setVectorSize"], [64, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[65, 1, 1, "", "WordEmbeddings"], [65, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[65, 2, 1, "", "setReadCacheSize"], [65, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[65, 2, 1, "", "loadStorage"], [65, 2, 1, "", "overallCoverage"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setReadCacheSize"], [65, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[66, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"], [66, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[67, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"], [67, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[68, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.er": [[69, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[69, 1, 1, "", "EntityRulerApproach"], [69, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[69, 2, 1, "", "setEnablePatternRegex"], [69, 2, 1, "", "setPatternsResource"], [69, 2, 1, "", "setSentenceMatch"], [69, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[71, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[71, 2, 1, "", "setDelimiter"], [71, 2, 1, "", "setDependencyParserModel"], [71, 2, 1, "", "setEntityTypes"], [71, 2, 1, "", "setExplodeEntities"], [71, 2, 1, "", "setIncludeEdges"], [71, 2, 1, "", "setMaxSentenceSize"], [71, 2, 1, "", "setMergeEntities"], [71, 2, 1, "", "setMergeEntitiesIOBFormat"], [71, 2, 1, "", "setMinSentenceSize"], [71, 2, 1, "", "setPosModel"], [71, 2, 1, "", "setRelationshipTypes"], [71, 2, 1, "", "setRootTokens"], [71, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[74, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[74, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[74, 2, 1, "", "getStopWords"], [74, 2, 1, "", "loadDefaultStopWords"], [74, 2, 1, "", "setMaxNGrams"], [74, 2, 1, "", "setMinNGrams"], [74, 2, 1, "", "setNKeywords"], [74, 2, 1, "", "setStopWords"], [74, 2, 1, "", "setThreshold"], [74, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[76, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[76, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setCoalesceSentences"], [76, 2, 1, "", "setConfigProtoBytes"], [76, 2, 1, "", "setThreshold"], [76, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[77, 1, 1, "", "Lemmatizer"], [77, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[77, 2, 1, "", "setDictionary"], [77, 2, 1, "", "setFormCol"], [77, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[77, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[78, 0, 0, "-", "big_text_matcher"], [79, 0, 0, "-", "date_matcher"], [81, 0, 0, "-", "multi_date_matcher"], [82, 0, 0, "-", "regex_matcher"], [83, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[78, 1, 1, "", "BigTextMatcher"], [78, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[78, 2, 1, "", "setCaseSensitive"], [78, 2, 1, "", "setEntities"], [78, 2, 1, "", "setMergeOverlapping"], [78, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[78, 2, 1, "", "loadStorage"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setCaseSensitive"], [78, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[79, 1, 1, "", "DateMatcher"], [79, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[79, 2, 1, "", "setAnchorDateDay"], [79, 2, 1, "", "setAnchorDateMonth"], [79, 2, 1, "", "setAnchorDateYear"], [79, 2, 1, "", "setDefaultDayWhenMissing"], [79, 2, 1, "", "setInputFormats"], [79, 2, 1, "", "setOutputFormat"], [79, 2, 1, "", "setReadMonthFirst"]], "sparknlp.annotator.matcher.multi_date_matcher": [[81, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[82, 1, 1, "", "RegexMatcher"], [82, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[82, 2, 1, "", "setExternalRules"], [82, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[83, 1, 1, "", "TextMatcher"], [83, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[83, 2, 1, "", "setBuildFromTokens"], [83, 2, 1, "", "setCaseSensitive"], [83, 2, 1, "", "setEntities"], [83, 2, 1, "", "setEntityValue"], [83, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setBuildFromTokens"], [83, 2, 1, "", "setEntityValue"], [83, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[84, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[84, 2, 1, "", "setDelimiter"], [84, 2, 1, "", "setEnableCumulative"], [84, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[86, 0, 0, "-", "ner_approach"], [87, 0, 0, "-", "ner_converter"], [88, 0, 0, "-", "ner_crf"], [89, 0, 0, "-", "ner_dl"], [90, 0, 0, "-", "ner_overwriter"]], "sparknlp.annotator.ner.ner_approach": [[86, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[86, 2, 1, "", "getLabelColumn"], [86, 2, 1, "", "setEntities"], [86, 2, 1, "", "setLabelColumn"], [86, 2, 1, "", "setMaxEpochs"], [86, 2, 1, "", "setMinEpochs"], [86, 2, 1, "", "setRandomSeed"], [86, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_converter": [[87, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[87, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[88, 1, 1, "", "NerCrfApproach"], [88, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[88, 2, 1, "", "setC0"], [88, 2, 1, "", "setExternalFeatures"], [88, 2, 1, "", "setIncludeConfidence"], [88, 2, 1, "", "setL2"], [88, 2, 1, "", "setLossEps"], [88, 2, 1, "", "setMinW"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[89, 1, 1, "", "NerDLApproach"], [89, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[89, 2, 1, "", "setBatchSize"], [89, 2, 1, "", "setBestModelMetric"], [89, 2, 1, "", "setConfigProtoBytes"], [89, 2, 1, "", "setDropout"], [89, 2, 1, "", "setEnableMemoryOptimizer"], [89, 2, 1, "", "setEnableOutputLogs"], [89, 2, 1, "", "setEvaluationLogExtended"], [89, 2, 1, "", "setGraphFolder"], [89, 2, 1, "", "setIncludeAllConfidenceScores"], [89, 2, 1, "", "setIncludeConfidence"], [89, 2, 1, "", "setLr"], [89, 2, 1, "", "setOutputLogsPath"], [89, 2, 1, "", "setPo"], [89, 2, 1, "", "setTestDataset"], [89, 2, 1, "", "setUseBestModel"], [89, 2, 1, "", "setUseContrib"], [89, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setConfigProtoBytes"], [89, 2, 1, "", "setIncludeAllConfidenceScores"], [89, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[90, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[90, 2, 1, "", "setNewResult"], [90, 2, 1, "", "setStopWords"]], "sparknlp.annotator.normalizer": [[91, 1, 1, "", "Normalizer"], [91, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[91, 2, 1, "", "setCleanupPatterns"], [91, 2, 1, "", "setLowercase"], [91, 2, 1, "", "setMaxLength"], [91, 2, 1, "", "setMinLength"], [91, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.pos": [[93, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[93, 1, 1, "", "PerceptronApproach"], [93, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[93, 2, 1, "", "getNIterations"], [93, 2, 1, "", "setIterations"], [93, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[93, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[95, 0, 0, "-", "sentence_detector"], [96, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[95, 1, 1, "", "SentenceDetector"], [95, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[95, 2, 1, "", "setCustomBounds"], [95, 2, 1, "", "setCustomBoundsStrategy"], [95, 2, 1, "", "setDetectLists"], [95, 2, 1, "", "setExplodeSentences"], [95, 2, 1, "", "setMaxLength"], [95, 2, 1, "", "setMinLength"], [95, 2, 1, "", "setSplitLength"], [95, 2, 1, "", "setUseAbbreviations"], [95, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[96, 1, 1, "", "SentenceDetectorDLApproach"], [96, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[96, 2, 1, "", "setEpochsNumber"], [96, 2, 1, "", "setExplodeSentences"], [96, 2, 1, "", "setImpossiblePenultimates"], [96, 2, 1, "", "setModel"], [96, 2, 1, "", "setOutputLogsPath"], [96, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setCustomBounds"], [96, 2, 1, "", "setExplodeSentences"], [96, 2, 1, "", "setImpossiblePenultimates"], [96, 2, 1, "", "setMaxLength"], [96, 2, 1, "", "setMinLength"], [96, 2, 1, "", "setModel"], [96, 2, 1, "", "setSplitLength"], [96, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[98, 0, 0, "-", "sentiment_detector"], [99, 0, 0, "-", "sentiment_dl"], [100, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[98, 1, 1, "", "SentimentDetector"], [98, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[98, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_dl": [[99, 1, 1, "", "SentimentDLApproach"], [99, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.sentiment.sentiment_dl.SentimentDLApproach": [[99, 2, 1, "", "setBatchSize"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setDropout"], [99, 2, 1, "", "setEnableOutputLogs"], [99, 2, 1, "", "setLabelColumn"], [99, 2, 1, "", "setLr"], [99, 2, 1, "", "setMaxEpochs"], [99, 2, 1, "", "setOutputLogsPath"], [99, 2, 1, "", "setRandomSeed"], [99, 2, 1, "", "setThreshold"], [99, 2, 1, "", "setThresholdLabel"], [99, 2, 1, "", "setValidationSplit"], [99, 2, 1, "", "setVerbose"]], "sparknlp.annotator.sentiment.sentiment_dl.SentimentDLModel": [[99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setThreshold"], [99, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[100, 1, 1, "", "ViveknSentimentApproach"], [100, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[100, 2, 1, "", "setPruneCorpus"], [100, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[100, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[101, 0, 0, "-", "gpt2_transformer"], [103, 0, 0, "-", "marian_transformer"], [104, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[101, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[101, 2, 1, "", "loadSavedModel"], [101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setConfigProtoBytes"], [101, 2, 1, "", "setDoSample"], [101, 2, 1, "", "setIgnoreTokenIds"], [101, 2, 1, "", "setMaxOutputLength"], [101, 2, 1, "", "setMinOutputLength"], [101, 2, 1, "", "setNoRepeatNgramSize"], [101, 2, 1, "", "setRepetitionPenalty"], [101, 2, 1, "", "setTask"], [101, 2, 1, "", "setTemperature"], [101, 2, 1, "", "setTopK"], [101, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[103, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[103, 2, 1, "", "loadSavedModel"], [103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setConfigProtoBytes"], [103, 2, 1, "", "setIgnoreTokenIds"], [103, 2, 1, "", "setLangId"], [103, 2, 1, "", "setMaxInputLength"], [103, 2, 1, "", "setMaxOutputLength"]], "sparknlp.annotator.seq2seq.t5_transformer": [[104, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[104, 2, 1, "", "loadSavedModel"], [104, 2, 1, "", "pretrained"], [104, 2, 1, "", "setConfigProtoBytes"], [104, 2, 1, "", "setDoSample"], [104, 2, 1, "", "setIgnoreTokenIds"], [104, 2, 1, "", "setMaxOutputLength"], [104, 2, 1, "", "setMinOutputLength"], [104, 2, 1, "", "setNoRepeatNgramSize"], [104, 2, 1, "", "setRepetitionPenalty"], [104, 2, 1, "", "setTask"], [104, 2, 1, "", "setTemperature"], [104, 2, 1, "", "setTopK"], [104, 2, 1, "", "setTopP"]], "sparknlp.annotator.spell_check": [[105, 0, 0, "-", "context_spell_checker"], [107, 0, 0, "-", "norvig_sweeting"], [108, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[105, 1, 1, "", "ContextSpellCheckerApproach"], [105, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[105, 2, 1, "", "addRegexClass"], [105, 2, 1, "", "addVocabClass"], [105, 2, 1, "", "setBatchSize"], [105, 2, 1, "", "setCaseStrategy"], [105, 2, 1, "", "setClassCount"], [105, 2, 1, "", "setCompoundCount"], [105, 2, 1, "", "setConfigProtoBytes"], [105, 2, 1, "", "setEpochs"], [105, 2, 1, "", "setErrorThreshold"], [105, 2, 1, "", "setFinalRate"], [105, 2, 1, "", "setInitialRate"], [105, 2, 1, "", "setLanguageModelClasses"], [105, 2, 1, "", "setMaxCandidates"], [105, 2, 1, "", "setMaxWindowLen"], [105, 2, 1, "", "setMinCount"], [105, 2, 1, "", "setTradeoff"], [105, 2, 1, "", "setValidationFraction"], [105, 2, 1, "id0", "setWeightedDistPath"], [105, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[105, 2, 1, "", "getWordClasses"], [105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setCaseStrategy"], [105, 2, 1, "", "setCompareLowcase"], [105, 2, 1, "", "setConfigProtoBytes"], [105, 2, 1, "", "setCorrectSymbols"], [105, 2, 1, "", "setErrorThreshold"], [105, 2, 1, "", "setGamma"], [105, 2, 1, "", "setMaxCandidates"], [105, 2, 1, "", "setMaxWindowLen"], [105, 2, 1, "", "setTradeoff"], [105, 2, 1, "", "setWeights"], [105, 2, 1, "", "setWordMaxDistance"], [105, 2, 1, "", "updateRegexClass"], [105, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[107, 1, 1, "", "NorvigSweetingApproach"], [107, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[107, 2, 1, "", "setCaseSensitive"], [107, 2, 1, "", "setDictionary"], [107, 2, 1, "", "setDoubleVariants"], [107, 2, 1, "", "setFrequencyPriority"], [107, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[107, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[108, 1, 1, "", "SymmetricDeleteApproach"], [108, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[108, 2, 1, "", "setDeletesThreshold"], [108, 2, 1, "", "setDictionary"], [108, 2, 1, "", "setFrequencyThreshold"], [108, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[108, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[109, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[110, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[110, 2, 1, "", "loadDefaultStopWords"], [110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setCaseSensitive"], [110, 2, 1, "", "setLocale"], [110, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[111, 1, 1, "", "TFNerDLGraphBuilder"], [111, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[111, 2, 1, "", "getGraphFile"], [111, 2, 1, "", "getGraphFolder"], [111, 2, 1, "", "getHiddenUnitsNumber"], [111, 2, 1, "", "getInputCols"], [111, 2, 1, "", "getLabelColumn"], [111, 2, 1, "", "setGraphFile"], [111, 2, 1, "", "setGraphFolder"], [111, 2, 1, "", "setHiddenUnitsNumber"], [111, 2, 1, "", "setInputCols"], [111, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[112, 0, 0, "-", "chunk_tokenizer"], [114, 0, 0, "-", "recursive_tokenizer"], [115, 0, 0, "-", "regex_tokenizer"], [116, 0, 0, "-", "token2_chunk"], [117, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[112, 1, 1, "", "ChunkTokenizer"], [112, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[114, 1, 1, "", "RecursiveTokenizer"], [114, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[114, 2, 1, "", "setInfixes"], [114, 2, 1, "", "setPrefixes"], [114, 2, 1, "", "setSuffixes"], [114, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[115, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[115, 2, 1, "", "setMaxLength"], [115, 2, 1, "", "setMinLength"], [115, 2, 1, "", "setPattern"], [115, 2, 1, "", "setPositionalMask"], [115, 2, 1, "", "setPreservePosition"], [115, 2, 1, "", "setToLowercase"], [115, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.token2_chunk": [[116, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token.tokenizer": [[117, 1, 1, "", "Tokenizer"], [117, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[117, 2, 1, "", "addContextChars"], [117, 2, 1, "", "addException"], [117, 2, 1, "", "addInfixPattern"], [117, 2, 1, "", "addSplitChars"], [117, 2, 1, "", "getCaseSensitiveExceptions"], [117, 2, 1, "", "getContextChars"], [117, 2, 1, "", "getExceptions"], [117, 2, 1, "", "getInfixPatterns"], [117, 2, 1, "", "getPrefixPattern"], [117, 2, 1, "", "getSplitChars"], [117, 2, 1, "", "getSuffixPattern"], [117, 2, 1, "", "setCaseSensitiveExceptions"], [117, 2, 1, "", "setContextChars"], [117, 2, 1, "", "setExceptions"], [117, 2, 1, "", "setExceptionsPath"], [117, 2, 1, "", "setInfixPatterns"], [117, 2, 1, "", "setMaxLength"], [117, 2, 1, "", "setMinLength"], [117, 2, 1, "", "setPrefixPattern"], [117, 2, 1, "", "setSplitChars"], [117, 2, 1, "", "setSplitPattern"], [117, 2, 1, "", "setSuffixPattern"], [117, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[117, 2, 1, "", "addSplitChars"], [117, 2, 1, "", "pretrained"], [117, 2, 1, "", "setSplitChars"], [117, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.ws": [[119, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[119, 1, 1, "", "WordSegmenterApproach"], [119, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[119, 2, 1, "", "getAmbiguityThreshold"], [119, 2, 1, "", "getFrequencyThreshold"], [119, 2, 1, "", "getNIterations"], [119, 2, 1, "", "setAmbiguityThreshold"], [119, 2, 1, "", "setFrequencyThreshold"], [119, 2, 1, "", "setNIterations"], [119, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[119, 2, 1, "", "pretrained"]], "sparknlp.base": [[120, 0, 0, "-", "chunk2_doc"], [121, 0, 0, "-", "doc2_chunk"], [122, 0, 0, "-", "document_assembler"], [123, 0, 0, "-", "embeddings_finisher"], [124, 0, 0, "-", "finisher"], [125, 0, 0, "-", "graph_finisher"], [126, 0, 0, "-", "has_recursive_fit"], [127, 0, 0, "-", "has_recursive_transform"], [128, 0, 0, "-", "image_assembler"], [130, 0, 0, "-", "light_pipeline"], [131, 0, 0, "-", "multi_document_assembler"], [132, 0, 0, "-", "recursive_pipeline"], [133, 0, 0, "-", "token_assembler"]], "sparknlp.base.chunk2_doc": [[120, 1, 1, "", "Chunk2Doc"]], "sparknlp.base.doc2_chunk": [[121, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[121, 2, 1, "", "setChunkCol"], [121, 2, 1, "", "setFailOnMissing"], [121, 2, 1, "", "setIsArray"], [121, 2, 1, "", "setLowerCase"], [121, 2, 1, "", "setStartCol"], [121, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[122, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[122, 2, 1, "", "setCleanupMode"], [122, 2, 1, "", "setIdCol"], [122, 2, 1, "", "setInputCol"], [122, 2, 1, "", "setMetadataCol"], [122, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[123, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[123, 2, 1, "", "setCleanAnnotations"], [123, 2, 1, "", "setInputCols"], [123, 2, 1, "", "setOutputAsVector"], [123, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[124, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[124, 2, 1, "", "setAnnotationSplitSymbol"], [124, 2, 1, "", "setCleanAnnotations"], [124, 2, 1, "", "setIncludeMetadata"], [124, 2, 1, "", "setInputCols"], [124, 2, 1, "", "setOutputAsArray"], [124, 2, 1, "", "setOutputCols"], [124, 2, 1, "", "setParseEmbeddingsVectors"], [124, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[125, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[125, 2, 1, "", "setCleanAnnotations"], [125, 2, 1, "", "setInputCol"], [125, 2, 1, "", "setOutputAsArray"], [125, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[126, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[127, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[128, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[128, 2, 1, "", "setInputCol"], [128, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[130, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[130, 2, 1, "", "annotate"], [130, 2, 1, "", "fullAnnotate"], [130, 2, 1, "", "fullAnnotateImage"], [130, 2, 1, "", "getIgnoreUnsupported"], [130, 2, 1, "", "setIgnoreUnsupported"], [130, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[131, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[131, 2, 1, "", "setCleanupMode"], [131, 2, 1, "", "setIdCol"], [131, 2, 1, "", "setInputCols"], [131, 2, 1, "", "setMetadataCol"], [131, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[132, 1, 1, "", "RecursivePipeline"], [132, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.token_assembler": [[133, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[133, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[134, 0, 0, "-", "annotator_approach"], [135, 0, 0, "-", "annotator_model"], [136, 0, 0, "-", "annotator_properties"], [137, 0, 0, "-", "coverage_result"], [139, 0, 0, "-", "properties"], [140, 0, 0, "-", "read_as"], [141, 0, 0, "-", "recursive_annotator_approach"], [142, 0, 0, "-", "storage"], [143, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[134, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[135, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[136, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[136, 2, 1, "", "getInputCols"], [136, 2, 1, "", "getLazyAnnotator"], [136, 2, 1, "", "getOutputCol"], [136, 2, 1, "", "setInputCols"], [136, 2, 1, "", "setLazyAnnotator"], [136, 2, 1, "", "setOutputCol"]], "sparknlp.common.properties": [[139, 1, 1, "", "HasEmbeddingsProperties"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[139, 2, 1, "", "getDimension"], [139, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[140, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[141, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[143, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[144, 3, 1, "", "explode_annotations_col"], [144, 3, 1, "", "filter_by_annotations_col"], [144, 3, 1, "", "map_annotations"], [144, 3, 1, "", "map_annotations_array"], [144, 3, 1, "", "map_annotations_col"], [144, 3, 1, "", "map_annotations_cols"], [144, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[146, 0, 0, "-", "annotator_java_ml"], [147, 0, 0, "-", "annotator_transformer"], [148, 0, 0, "-", "extended_java_wrapper"], [150, 0, 0, "-", "params_getters_setters"], [151, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[146, 1, 1, "", "AnnotatorJavaMLReadable"], [146, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[146, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[147, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[148, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[148, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[150, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[150, 2, 1, "", "getParamValue"], [150, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[151, 1, 1, "", "RecursiveEstimator"], [151, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[151, 2, 1, "", "fit"]], "sparknlp.logging": [[152, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[152, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[152, 2, 1, "", "end"], [152, 2, 1, "", "log_asset"], [152, 2, 1, "", "log_asset_data"], [152, 2, 1, "", "log_completed_run"], [152, 2, 1, "", "log_metrics"], [152, 2, 1, "", "log_parameters"], [152, 2, 1, "", "log_pipeline_parameters"], [152, 2, 1, "", "log_visualization"], [152, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[155, 0, 0, "-", "pretrained_pipeline"], [156, 0, 0, "-", "resource_downloader"], [157, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[155, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[155, 2, 1, "", "annotate"], [155, 2, 1, "", "fullAnnotate"], [155, 2, 1, "", "transform"]], "sparknlp.training": [[159, 0, 0, "-", "_tf_graph_builders"], [174, 0, 0, "-", "_tf_graph_builders_1x"], [181, 0, 0, "-", "conll"], [182, 0, 0, "-", "conllu"], [184, 0, 0, "-", "pos"], [185, 0, 0, "-", "pub_tator"], [186, 0, 0, "-", "tfgraphs"]], "sparknlp.training._tf_graph_builders": [[158, 0, 0, "-", "graph_builders"], [162, 0, 0, "-", "ner_dl"], [169, 0, 0, "-", "tf2contrib"]], "sparknlp.training._tf_graph_builders.graph_builders": [[158, 1, 1, "", "NerTFGraphBuilder"], [158, 1, 1, "", "TFGraphBuilder"], [158, 1, 1, "", "TFGraphBuilderFactory"], [158, 4, 1, "", "TensorflowAddonsNeeded"], [158, 4, 1, "", "WrongTFVersion"]], "sparknlp.training._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[158, 2, 1, "", "build"], [158, 2, 1, "", "get_models"], [158, 2, 1, "", "print_model_params"]], "sparknlp.training._tf_graph_builders.ner_dl": [[160, 0, 0, "-", "create_graph"], [161, 0, 0, "-", "dataset_encoder"], [163, 0, 0, "-", "ner_model"], [164, 0, 0, "-", "ner_model_saver"], [165, 0, 0, "-", "sentence_grouper"]], "sparknlp.training._tf_graph_builders.tf2contrib": [[166, 0, 0, "-", "core_rnn_cell"], [167, 0, 0, "-", "fused_rnn_cell"], [168, 0, 0, "-", "gru_ops"], [170, 0, 0, "-", "lstm_ops"], [171, 0, 0, "-", "rnn"], [172, 0, 0, "-", "rnn_cell"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell": [[166, 1, 1, "", "EmbeddingWrapper"], [166, 1, 1, "", "InputProjectionWrapper"], [166, 1, 1, "", "OutputProjectionWrapper"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[166, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[166, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[166, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.fused_rnn_cell": [[167, 1, 1, "", "FusedRNNCell"], [167, 1, 1, "", "FusedRNNCellAdaptor"], [167, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops": [[168, 1, 1, "", "GRUBlockCell"], [168, 1, 1, "", "GRUBlockCellV2"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[168, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[168, 2, 1, "", "build"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops": [[170, 1, 1, "", "LSTMBlockCell"], [170, 1, 1, "", "LSTMBlockFusedCell"], [170, 1, 1, "", "LSTMBlockWrapper"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[170, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[170, 2, 1, "", "num_units"]], "sparknlp.training._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[170, 2, 1, "", "call"], [170, 2, 1, "", "num_units"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn": [[171, 3, 1, "", "stack_bidirectional_dynamic_rnn"], [171, 3, 1, "", "stack_bidirectional_rnn"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell": [[172, 1, 1, "", "AttentionCellWrapper"], [172, 1, 1, "", "BidirectionalGridLSTMCell"], [172, 1, 1, "", "CFNCell"], [172, 1, 1, "", "CompiledWrapper"], [172, 1, 1, "", "Conv1DLSTMCell"], [172, 1, 1, "", "Conv2DLSTMCell"], [172, 1, 1, "", "Conv3DLSTMCell"], [172, 1, 1, "", "ConvLSTMCell"], [172, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [172, 1, 1, "", "GLSTMCell"], [172, 1, 1, "", "GridLSTMCell"], [172, 1, 1, "", "HighwayWrapper"], [172, 1, 1, "", "IndRNNCell"], [172, 1, 1, "", "IndyGRUCell"], [172, 1, 1, "", "IndyLSTMCell"], [172, 1, 1, "", "IntersectionRNNCell"], [172, 1, 1, "", "LayerNormBasicLSTMCell"], [172, 1, 1, "", "LayerNormLSTMCell"], [172, 1, 1, "", "MinimalRNNCell"], [172, 1, 1, "", "NASCell"], [172, 1, 1, "", "NTMCell"], [172, 1, 1, "", "PhasedLSTMCell"], [172, 1, 1, "", "SRUCell"], [172, 1, 1, "", "TimeFreqLSTMCell"], [172, 1, 1, "", "UGRNNCell"], [172, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[172, 2, 1, "", "call"]], "sparknlp.training._tf_graph_builders_1x": [[173, 0, 0, "-", "graph_builders"], [177, 0, 0, "-", "ner_dl"]], "sparknlp.training._tf_graph_builders_1x.graph_builders": [[173, 1, 1, "", "NerTFGraphBuilder"], [173, 1, 1, "", "TFGraphBuilder"], [173, 1, 1, "", "TFGraphBuilderFactory"], [173, 4, 1, "", "WrongTFVersion"]], "sparknlp.training._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[173, 2, 1, "", "build"], [173, 2, 1, "", "get_models"], [173, 2, 1, "", "print_model_params"]], "sparknlp.training._tf_graph_builders_1x.ner_dl": [[175, 0, 0, "-", "create_graph"], [176, 0, 0, "-", "dataset_encoder"], [178, 0, 0, "-", "ner_model"], [179, 0, 0, "-", "ner_model_saver"], [180, 0, 0, "-", "sentence_grouper"]], "sparknlp.training.conll": [[181, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[181, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[182, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[182, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[184, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[184, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[185, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[185, 2, 1, "", "readDataset"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"api": [1, 189], "refer": [1, 189], "get": [10, 195], "start": 10, "spark": [10, 11, 190, 195, 199], "nlp": [10, 11, 190, 199], "cheat": 10, "sheet": 10, "requir": 10, "instal": [10, 190], "us": [10, 190, 199], "conda": 10, "virtualenv": 10, "session": 10, "from": 10, "python": 10, "document": 11, "content": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 155, 158, 166, 167, 168, 170, 171, 172, 173, 181, 182, 184, 185], "sparknlp": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "annot": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 193, 194, 195], "modul": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 152, 155, 158, 166, 167, 168, 170, 171, 172, 173, 181, 182, 184, 185, 189], "class": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 146, 147, 148, 150, 151, 152, 155, 158, 166, 167, 168, 170, 172, 173, 181, 182, 184, 185], "annotation_imag": 13, "chunker": 14, "classifier_dl": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "albert_for_question_answ": 15, "albert_for_sequence_classif": 16, "albert_for_token_classif": 17, "bert_for_question_answ": 18, "bert_for_sequence_classif": 19, "bert_for_token_classif": 20, "deberta_for_question_answ": 22, "deberta_for_sequence_classif": 23, "deberta_for_token_classif": 24, "distil_bert_for_question_answ": 25, "distil_bert_for_sequence_classif": 26, "distil_bert_for_token_classif": 27, "submodul": [28, 41, 43, 46, 58, 70, 72, 73, 75, 80, 85, 92, 94, 97, 102, 106, 113, 118, 129, 138, 145, 149, 153, 154, 169, 183], "longformer_for_question_answ": 29, "longformer_for_sequence_classif": 30, "longformer_for_token_classif": 31, "multi_classifier_dl": 32, "roberta_for_question_answ": 33, "roberta_for_sequence_classif": 34, "roberta_for_token_classif": 35, "xlm_roberta_for_question_answ": 36, "xlm_roberta_for_sequence_classif": 37, "xlm_roberta_for_token_classif": 38, "xlnet_for_sequence_classif": 39, "xlnet_for_token_classif": 40, "coref": [41, 42], "spanbert_coref": 42, "cv": [43, 44], "vit_for_image_classif": 44, "depend": [45, 46, 47], "dependency_pars": 45, "typed_dependency_pars": 47, "document_norm": 48, "embed": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "albert_embed": 49, "bert_embed": 50, "bert_sentence_embed": 51, "camambert_embed": 52, "chunk_embed": 53, "deberta_embed": 54, "distil_bert_embed": 55, "doc2vec": 56, "elmo_embed": 57, "longformer_embed": 59, "roberta_embed": 60, "roberta_sentence_embed": 61, "sentence_embed": 62, "universal_sentence_encod": 63, "word2vec": 64, "word_embed": 65, "xlm_roberta_embed": 66, "xlm_roberta_sentence_embed": 67, "xlnet_embed": 68, "er": [69, 70], "entity_rul": 69, "graph_extract": 71, "subpackag": [72, 145, 159], "keyword_extract": [73, 74], "yake_keyword_extract": 74, "ld_dl": [75, 76], "language_detector_dl": 76, "lemmat": 77, "matcher": [78, 79, 80, 81, 82, 83], "big_text_match": 78, "date_match": 79, "multi_date_match": 81, "regex_match": 82, "text_match": 83, "n_gram_gener": 84, "ner": [85, 86, 87, 88, 89, 90], "ner_approach": 86, "ner_convert": 87, "ner_crf": 88, "ner_dl": [89, 160, 161, 162, 163, 164, 165, 175, 176, 177, 178, 179, 180], "ner_overwrit": 90, "normal": 91, "po": [92, 93, 184, 200], "perceptron": 93, "sentenc": [94, 95, 96, 195], "sentence_detector": 95, "sentence_detector_dl": 96, "sentiment": [97, 98, 99, 100], "sentiment_detector": 98, "sentiment_dl": 99, "vivekn_senti": 100, "seq2seq": [101, 102, 103, 104], "gpt2_transform": 101, "marian_transform": 103, "t5_transform": 104, "spell_check": [105, 106, 107, 108], "context_spell_check": 105, "norvig_sweet": 107, "symmetric_delet": 108, "stemmer": 109, "stop_words_clean": 110, "tf_ner_dl_graph_build": 111, "token": [112, 113, 114, 115, 116, 117, 195], "chunk_token": 112, "recursive_token": 114, "regex_token": 115, "token2_chunk": 116, "w": [118, 119], "word_segment": 119, "base": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "chunk2_doc": 120, "doc2_chunk": 121, "document_assembl": 122, "embeddings_finish": 123, "finish": [124, 195], "graph_finish": 125, "has_recursive_fit": 126, "has_recursive_transform": 127, "image_assembl": 128, "light_pipelin": 130, "multi_document_assembl": 131, "recursive_pipelin": 132, "token_assembl": 133, "common": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 194], "annotator_approach": 134, "annotator_model": 135, "annotator_properti": 136, "coverage_result": 137, "properti": 139, "read_a": 140, "recursive_annotator_approach": 141, "storag": 142, "util": [143, 157, 188], "function": [143, 144, 145, 171, 194, 196], "packag": 145, "intern": [146, 147, 148, 149, 150, 151], "annotator_java_ml": 146, "annotator_transform": 147, "extended_java_wrapp": 148, "params_getters_sett": 150, "recurs": 151, "log": [152, 153, 190, 192], "comet": [152, 190], "pretrain": [154, 155, 156, 157, 194, 198, 199], "pretrained_pipelin": 155, "resource_download": 156, "train": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 200], "_tf_graph_build": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172], "graph_build": [158, 173], "create_graph": [160, 175], "dataset_encod": [161, 176], "ner_model": [163, 178], "ner_model_sav": [164, 179], "sentence_group": [165, 180], "tf2contrib": [166, 167, 168, 169, 170, 171, 172], "core_rnn_cel": 166, "fused_rnn_cel": 167, "gru_op": 168, "lstm_op": 170, "rnn": 171, "rnn_cell": 172, "_tf_graph_builders_1x": [173, 174, 175, 176, 177, 178, 179, 180], "conll": [181, 200], "conllu": [182, 200], "pub_tat": 185, "tfgraph": 186, "upload_to_hub": 187, "A": 190, "meta": 190, "machin": [190, 191], "learn": [190, 191], "platform": [190, 191], "pipelin": [190, 195, 198, 199], "paramet": 190, "evalu": 190, "metric": 190, "visual": 190, "run": 190, "an": 190, "offlin": 190, "experi": 190, "mlflow": 191, "lifecycl": 191, "third": 192, "parti": 192, "project": 192, "approach": 194, "model": 194, "note": 194, "avail": [194, 199], "set": 195, "up": 195, "your": 195, "own": 195, "type": 195, "necessari": 195, "import": 195, "construct": 195, "documentassembl": 195, "data": 195, "detect": 195, "out": 195, "put": 195, "all": 195, "togeth": 195, "ml": [195, 199], "helper": 196, "user": 197, "guid": 197, "light": 198, "convert": 198, "pipelinemodel": 198, "download": 199, "As": 199, "lightpipelin": 199, "load": 200, "dataset": 200, "spell": 200, "checker": 200, "pubtat": 200}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 56}})