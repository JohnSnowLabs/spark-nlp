Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 100, 101, 102, 105, 106, 107, 110, 111, 112, 113, 115, 117, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 151, 152, 153, 155, 156, 158, 159, 161, 164, 166, 167, 168, 169, 170, 172, 173, 177, 178, 184, 185, 189, 190, 191, 194, 195, 200, 202, 206, 207, 210, 211, 212, 214, 215, 216], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 105, 110, 111, 112, 113, 114, 117, 118, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 153, 155, 158, 159, 167, 168, 169, 178, 182, 191, 194, 195, 197, 198, 200, 207, 209, 211, 212, 214, 215, 216, 217], "quick": [0, 207, 212], "refer": [0, 1, 5, 8, 52, 54, 56, 58, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 97, 114, 117, 118, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 155, 157, 158, 167, 178, 211, 213, 214], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 60, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 76, 77, 80, 82, 84, 85, 89, 91, 92, 94, 99, 100, 101, 105, 106, 110, 111, 112, 115, 117, 120, 125, 128, 134, 143, 144, 151, 152, 155, 158, 161, 167, 177, 179, 182, 184, 197, 198, 202, 207, 211, 216], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 172, 173, 178, 182, 184, 189, 190, 191, 195, 197, 207, 211, 214, 215], "up": [0, 1, 5, 8, 22, 38, 57, 66, 70, 75, 76, 80, 81, 84, 85, 87, 97, 117, 130, 131, 133, 134, 135, 136, 137, 138, 178, 184, 207, 211, 214, 215], "your": [0, 1, 22, 38, 43, 60, 65, 74, 75, 82, 84, 87, 100, 101, 105, 106, 110, 111, 112, 115, 117, 118, 123, 128, 129, 141, 143, 148, 150, 155, 159, 209, 211, 214, 215, 217], "environ": [0, 66, 208], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 71, 75, 87, 97, 134, 135, 155], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 152, 155, 159, 160, 169, 184], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 97, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 164, 194, 195, 202, 211, 214], "shell": 0, "packag": [0, 67, 73, 191, 208, 209], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 152, 155, 169, 184], "nlp_2": [0, 184], "12": [0, 67, 89, 90, 91, 97, 102, 104, 110, 123, 141, 153, 166, 183, 184, 194, 200, 202, 210], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 164, 166, 167, 169, 170, 183, 184, 187, 190, 191, 194, 197, 198, 200, 201, 211, 212], "submit": [0, 191, 207], "extern": [0, 97, 100, 105, 106, 112, 141, 147, 168, 182, 197, 198, 200, 201], "jar": [0, 184], "after": [0, 59, 60, 62, 75, 82, 83, 87, 102, 104, 110, 117, 136, 150, 170, 191, 210, 211], "compil": 0, "build": [0, 73, 74, 82, 83, 94, 97, 101, 131, 133, 134, 137, 191, 207], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 182, 183, 184, 190, 191, 195, 197, 200, 201, 202, 207, 208, 210, 211, 212, 214, 215, 216, 217], "built": [0, 22, 38, 167], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 46, 47, 49, 50, 54, 56, 57, 67, 97, 117, 130, 131, 133, 134, 135, 136, 137, 138, 139, 167, 178], "apach": [0, 167, 184], "x": [0, 38, 183, 197, 217], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 114, 115, 117, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 152, 155, 158, 159, 160, 167, 170, 178, 191, 194, 195, 201, 207, 208, 210, 211, 212, 213, 214, 215], "you": [0, 14, 18, 30, 42, 48, 60, 62, 63, 65, 66, 70, 72, 74, 76, 82, 84, 94, 102, 113, 117, 135, 137, 159, 161, 166, 184, 191, 195, 200, 202, 207, 209, 211, 212, 215, 216, 217], "need": [0, 5, 7, 8, 10, 60, 62, 66, 70, 74, 76, 82, 88, 92, 94, 97, 102, 105, 111, 112, 115, 120, 123, 126, 129, 131, 134, 137, 141, 143, 144, 151, 152, 156, 164, 166, 191, 195, 197, 198, 200, 207, 209, 211, 212, 215, 217], "java": [0, 99, 139, 171, 172, 180, 186, 187, 190, 195], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 54, 60, 62, 64, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 90, 91, 102, 107, 112, 113, 117, 118, 120, 131, 141, 153, 155, 197, 202], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 60, 62, 63, 66, 67, 68, 71, 73, 74, 77, 79, 80, 82, 85, 86, 88, 89, 90, 91, 92, 94, 97, 99, 100, 102, 105, 107, 110, 112, 113, 114, 115, 117, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 145, 147, 155, 159, 166, 168, 169, 177, 178, 179, 183, 184, 191, 195, 201, 202, 207, 208, 209, 210, 211, 212, 215, 216, 217], "note": [0, 5, 7, 8, 14, 18, 22, 30, 38, 42, 43, 48, 57, 65, 67, 70, 74, 76, 77, 81, 82, 84, 88, 89, 91, 97, 112, 117, 130, 131, 133, 135, 136, 137, 138, 166, 184, 216], "sinc": [0, 64, 66, 81, 97, 131, 133, 184, 211, 212, 216], "version": [0, 8, 64, 70, 74, 76, 81, 119, 120, 147, 173, 178, 184, 189, 190, 194, 195, 211, 216], "6": [0, 22, 43, 56, 68, 69, 73, 77, 97, 101, 106, 107, 113, 118, 123, 130, 143, 153, 184, 198, 202, 211], "deprec": [0, 184], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 38, 40, 42, 43, 46, 48, 49, 54, 56, 57, 58, 66, 84, 88, 92, 99, 102, 104, 110, 111, 112, 115, 120, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 147, 178, 184, 190, 191, 195, 207, 209, 211], "consid": [0, 63, 88, 94, 97, 117, 135, 141, 143, 144, 146, 150, 184, 195], "stick": [0, 184], "lower": [0, 64, 67, 97, 117, 139, 141, 157, 184], "7": [0, 9, 43, 56, 68, 69, 73, 102, 104, 118, 123, 131, 133, 136, 137, 160, 200, 202, 210], "we": [0, 5, 7, 8, 22, 38, 54, 56, 58, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 97, 111, 112, 115, 117, 126, 130, 131, 133, 134, 135, 137, 138, 141, 143, 152, 166, 183, 207, 210, 211, 212, 215, 216, 217], "recommend": [0, 57, 77, 91, 117, 128, 129, 130, 131, 133, 135, 136, 137, 138], "It": [0, 8, 12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 38, 40, 42, 43, 44, 46, 48, 49, 53, 54, 56, 57, 63, 64, 66, 68, 69, 71, 73, 74, 75, 80, 82, 83, 87, 89, 90, 92, 97, 107, 129, 130, 135, 137, 139, 141, 143, 144, 150, 160, 166, 195, 210, 215], "have": [0, 5, 14, 18, 22, 30, 38, 42, 43, 48, 65, 66, 67, 71, 74, 79, 82, 83, 88, 97, 105, 107, 110, 111, 112, 113, 117, 123, 125, 126, 131, 133, 137, 144, 153, 170, 186, 211, 212, 215], "basic": [0, 56, 97, 125, 210], "knowledg": [0, 74, 97, 137, 161], "framework": [0, 7, 66, 130, 135, 138], "work": [0, 8, 54, 74, 79, 80, 85, 99, 117, 130, 133, 134, 135, 137, 138, 148, 210, 212, 216], "befor": [0, 64, 66, 88, 102, 104, 130, 138, 139, 143, 151, 155, 172, 190, 207], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 105, 106, 111, 112, 115, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 148, 150, 155, 158, 167, 168, 195, 208, 209, 213, 216], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 166, 167, 169, 170, 191, 194, 197, 198, 200, 202, 207, 211, 212, 214, 215, 216], "first": [0, 2, 73, 75, 76, 77, 79, 87, 89, 90, 97, 105, 111, 112, 113, 125, 130, 135, 136, 138, 141, 146, 151, 159, 170, 177, 207, 211, 212, 216], "let": [0, 74, 117, 150, 211], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 27, 30, 32, 35, 39, 42, 45, 48, 54, 56, 57, 58, 64, 66, 67, 70, 71, 73, 74, 75, 76, 80, 82, 83, 87, 89, 90, 92, 97, 105, 112, 115, 117, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 150, 151, 152, 155, 156, 160, 166, 171, 172, 178, 180, 183, 186, 190, 191, 207, 210, 211, 212, 215], "make": [0, 53, 54, 56, 64, 71, 80, 81, 89, 90, 97, 117, 118, 126, 129, 130, 136, 143, 213, 217], "sure": [0, 129], "oracl": 0, "openjdk": 0, "0_292": 0, "creat": [0, 2, 3, 4, 22, 38, 43, 65, 66, 68, 69, 75, 82, 87, 88, 94, 112, 117, 118, 120, 123, 134, 148, 155, 166, 168, 183, 197, 198, 200, 201, 211, 212, 215, 217], "new": [0, 2, 3, 4, 9, 43, 52, 56, 59, 67, 68, 69, 73, 77, 79, 80, 88, 91, 113, 114, 117, 119, 120, 130, 131, 137, 138, 141, 147, 160, 173, 178, 189, 190, 210, 211], "manag": [0, 97, 195, 208], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 44, 46, 48, 49, 56, 57, 63, 64, 67, 68, 69, 71, 84, 85, 88, 91, 92, 95, 99, 102, 112, 115, 117, 130, 131, 133, 134, 135, 136, 137, 138, 141, 146, 151, 155, 159, 161, 177, 178, 191, 195, 206, 211, 216], "depend": [0, 2, 52, 71, 81, 84, 91, 92, 94, 95, 97, 99, 112, 135, 141, 155, 184], "Then": [0, 22, 38, 111, 112, 134, 170, 191, 211], "sparknlp": [0, 207, 210, 211, 212, 213, 215, 216, 217], "n": [0, 90, 97, 107, 110, 111, 112, 117, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 150, 166, 169, 178, 183, 194], "y": [0, 38, 65], "activ": [0, 12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 97], "jupyt": [0, 139, 191, 207], "now": [0, 71, 126, 166, 212], "should": [0, 2, 3, 4, 10, 22, 38, 43, 54, 56, 57, 58, 63, 66, 70, 75, 76, 87, 89, 97, 99, 106, 107, 111, 112, 117, 120, 125, 126, 135, 139, 141, 151, 166, 172, 173, 186, 190, 194, 197, 198], "readi": [0, 22, 194, 211], "notebook": [0, 139, 191, 207], "run": [0, 66, 74, 97, 139, 191, 195, 208, 216], "also": [0, 22, 38, 43, 53, 54, 56, 57, 58, 64, 67, 77, 80, 88, 89, 90, 92, 94, 97, 102, 105, 110, 111, 112, 119, 120, 126, 129, 130, 146, 166, 169, 173, 178, 189, 207, 211, 212, 213, 214, 216], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 194, 195, 197, 198, 200, 201, 202, 208], "bin": 0, "A": [0, 5, 7, 43, 52, 54, 66, 67, 82, 83, 88, 92, 97, 100, 101, 105, 106, 107, 114, 115, 117, 118, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 143, 144, 151, 152, 178, 191, 200, 209, 211, 217], "retriev": [0, 70, 76, 79, 88, 100, 139, 143, 144, 145, 191, 194, 207, 211, 212], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 164, 166, 167, 168, 169, 170, 183, 191, 194, 197, 198, 200, 201, 202, 207, 210, 211, 214, 215, 216, 217], "manual": [0, 210], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 101, 130, 131, 133, 134, 135, 136, 137, 138, 184, 197, 198, 200, 201], "becaus": [0, 117, 128, 139, 172, 190], "other": [0, 5, 9, 38, 54, 57, 65, 71, 84, 85, 86, 94, 97, 115, 128, 130, 131, 134, 138, 141, 148, 150, 159, 160, 211], "configur": [0, 54, 66, 84, 152, 184], "includ": [0, 56, 64, 66, 68, 69, 75, 77, 85, 87, 89, 90, 91, 94, 97, 102, 110, 111, 112, 117, 130, 131, 133, 138, 139, 141, 160, 191, 201, 208, 210, 211, 212, 217], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 67, 68, 71, 73, 74, 80, 82, 89, 91, 92, 94, 97, 102, 105, 126, 135, 141, 146, 155, 168, 170, 211, 212], "builder": [0, 147, 184], "appnam": [0, 184], "master": [0, 184], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 97, 130, 131, 133, 134, 135, 136, 137, 138, 146, 166, 184, 194, 215], "config": [0, 184, 208], "driver": [0, 184], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 67, 77, 88, 184], "16g": [0, 184], "serial": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 99, 112, 119, 130, 131, 133, 134, 135, 136, 137, 138, 141, 184], "org": [0, 110, 111, 112, 113, 130, 155, 166, 183, 184, 194, 197, 208, 217], "kryoseri": [0, 184], "buffer": [0, 69, 88, 184], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 90, 91, 97, 144, 184], "2000m": [0, 184], "maxresults": [0, 184], "0": [0, 5, 7, 8, 9, 10, 22, 38, 43, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 144, 147, 152, 153, 155, 158, 159, 160, 166, 167, 169, 170, 173, 178, 183, 184, 187, 189, 190, 191, 194, 195, 198, 200, 201, 202, 207, 210, 211, 216, 217], "getorcr": [0, 184], "main": [1, 92, 139, 152, 210, 214, 217], "page": [1, 64, 131, 194, 206, 214, 216], "github": [1, 73, 79, 82, 85, 135, 194], "issu": [1, 85, 155], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 169, 170, 183, 191, 194, 195, 197, 198, 200, 201, 202, 207, 210, 211, 212, 214, 215, 216, 217], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 101, 105, 106, 110, 111, 112, 114, 115, 117, 118, 120, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 148, 150, 152, 155, 172, 178, 184, 190, 191, 194, 195, 207, 208, 210, 214, 216, 217], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 100, 111, 112, 123, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 155, 195], "welcom": [1, 5, 7, 8], "python": [1, 99, 184], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 205, 207, 210, 211], "inform": [1, 60, 62, 79, 81, 88, 89, 97, 102, 110, 130, 141, 158, 167, 201, 207, 208, 209, 210, 211, 217], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 114, 117, 118, 120, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 151, 152, 153, 155, 157, 158, 159, 160, 166, 167, 168, 169, 170, 177, 178, 183, 184, 191, 194, 195, 197, 198, 200, 201, 208, 209, 210, 211, 212, 214], "librari": [1, 53, 54, 56, 57, 58, 99, 157, 158, 159, 167, 170, 216], "get": [1, 8, 22, 38, 97, 109, 123, 139, 141, 147, 152, 155, 156, 158, 159, 160, 164, 166, 167, 173, 178, 189, 207, 211, 216, 217], "start": [1, 5, 11, 15, 19, 23, 27, 32, 35, 39, 45, 80, 94, 97, 111, 112, 126, 157, 184, 191, 207, 210, 212, 215, 216], "cheat": 1, "sheet": [1, 64], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 58, 59, 60, 62, 66, 67, 69, 70, 73, 76, 77, 86, 89, 90, 97, 112, 115, 129, 141, 153, 155, 157, 159, 170, 210, 211, 212], "instal": [1, 191, 209], "session": [1, 184, 197, 198, 200, 201], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 169, 170, 172, 178, 183, 184, 187, 190, 191, 194, 195, 197, 198, 200, 201, 202, 207, 210, 211, 212, 215, 216, 217], "user": [1, 110, 111, 117, 118, 136, 152, 168, 184, 191, 207], "guid": [1, 208], "annot": [1, 3, 4, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 182, 183, 184, 185, 186, 188, 190, 191, 194, 195, 196, 200, 202, 207, 208, 213, 214, 215, 216, 217], "own": [1, 22, 38, 43, 60, 66, 75, 87, 100, 101, 105, 106, 111, 112, 115, 123, 128, 129, 141, 143, 148, 150, 155, 214, 215, 217], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 164, 166, 167, 168, 169, 170, 184, 190, 191, 193, 194, 195, 196, 208, 210, 211, 214], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 152, 155, 159, 160, 166, 183, 184, 191, 207, 210, 214], "dataset": [1, 22, 38, 43, 60, 62, 71, 75, 76, 79, 80, 81, 82, 83, 85, 87, 88, 97, 99, 111, 112, 120, 126, 131, 134, 141, 155, 190, 194, 197, 198, 200, 201, 214], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 53, 54, 56, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 81, 82, 83, 86, 87, 89, 90, 91, 97, 99, 100, 101, 105, 106, 109, 111, 112, 115, 119, 120, 123, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 148, 150, 155, 157, 166, 184, 191, 194, 207, 211, 212, 214, 215], "light": [1, 5, 74, 91, 97, 166, 214, 216], "helper": [1, 123, 155, 161, 183, 200, 201, 202, 214, 217], "function": [1, 77, 85, 88, 130, 138, 159, 195, 206, 214], "third": [1, 125, 146, 192, 197], "parti": [1, 192], "project": [1, 97, 135, 139, 191, 208], "log": [1, 22, 38, 43, 112, 117, 120, 126, 131, 184], "api": [1, 117, 118, 207, 211, 214], "modul": [1, 31, 61, 78, 93, 95, 96, 98, 103, 108, 116, 121, 122, 124, 127, 132, 142, 149, 154, 165, 176, 188, 193, 199], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 164, 166, 167, 168, 169, 170, 183, 191, 194, 197, 198, 199, 200, 201, 208, 210, 211, 215, 216, 217], "format": [2, 3, 4, 8, 53, 54, 56, 57, 58, 60, 62, 92, 94, 100, 101, 102, 104, 105, 106, 111, 112, 115, 120, 128, 130, 138, 143, 144, 152, 155, 156, 158, 160, 161, 164, 167, 169, 197, 198, 200, 201, 202, 208, 217], "annotatortyp": [2, 3, 4, 72, 107, 157, 158, 164, 167, 210], "begin": [2, 52, 110, 131, 150, 152, 157, 158, 167, 183, 210], "end": [2, 11, 15, 19, 23, 27, 32, 35, 39, 45, 52, 112, 117, 118, 126, 130, 138, 150, 152, 155, 158, 167, 183, 191, 197, 207, 210, 212], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 183, 184, 191, 194, 197, 198, 202, 207, 208, 210, 211, 212, 215, 216], "metadata": [2, 3, 4, 44, 52, 59, 97, 106, 111, 112, 114, 123, 158, 160, 164, 166, 167, 183, 191, 195, 210, 212], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 94, 95, 111, 112, 113, 118, 139, 158, 159, 160, 166, 167, 178, 183, 184, 190, 194, 210], "repres": [2, 3, 4, 60, 62, 67, 73, 79, 85, 91, 92, 94, 101, 106, 107, 117, 118, 136, 152, 191, 194, 211], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 173, 178, 183, 184, 191, 200, 207, 210, 211, 212], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 176, 179, 183, 184, 186, 187, 188, 191, 194, 195, 197, 198, 200, 201, 202, 206, 208, 209, 210, 211, 213, 214, 215, 217], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 99, 100, 101, 105, 106, 111, 112, 113, 114, 115, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 152, 155, 157, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 176, 184, 188, 191, 194, 195, 197, 198, 200, 201, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217], "detail": [2, 3, 4, 8, 57, 89, 90, 97, 114, 130, 131, 133, 134, 135, 136, 137, 138, 178], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 173, 178, 182, 183, 184, 189, 190, 191, 194, 195, 197, 198, 200, 201], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 173, 178, 182, 183, 184, 189, 191, 194, 195, 197, 198, 200, 201], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 151, 152, 155, 158, 160, 166, 167, 169, 178, 183, 184, 191, 194, 195, 197, 198, 200, 201, 202, 207, 210, 211, 212, 214, 215, 217], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 183, 185, 194, 200, 210, 211, 214], "possibl": [2, 3, 4, 72, 74, 89, 90, 92, 125, 141, 144, 158, 167, 177, 179, 191, 207], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 69, 72, 77, 79, 85, 86, 89, 92, 94, 97, 99, 100, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 146, 147, 151, 152, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 173, 177, 178, 179, 189, 191, 207, 217], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 57, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 120, 123, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 153, 155, 157, 159, 166, 168, 170, 178, 184, 194, 197, 201, 202, 211, 215, 216], "wordpiec": 2, "word_embed": [2, 67, 68, 71, 72, 73, 74, 77, 78, 80, 82, 84, 87, 89, 91, 95, 111, 112, 120], "sentence_embed": [2, 22, 38, 43, 69, 70, 75, 76, 78, 79, 81, 83, 85, 86, 90, 95, 118, 139, 191, 207, 211], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 38, 40, 42, 43, 46, 48, 49, 53, 54, 56, 58, 191, 207, 211], "date": [2, 59, 102, 104, 105], "entiti": [2, 9, 13, 17, 21, 25, 29, 34, 37, 41, 47, 50, 52, 56, 59, 71, 92, 93, 94, 101, 106, 108, 109, 110, 111, 112, 113, 114, 148, 153, 160, 166, 194], "sentiment": [2, 22, 38, 43, 77, 91, 95, 138, 184, 211, 212], "po": [2, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 40, 42, 46, 48, 49, 60, 62, 94, 95, 111, 112, 150, 155, 166, 183, 184, 194, 197, 199, 210, 214, 215, 216], "chunk": [2, 9, 10, 11, 15, 19, 23, 27, 32, 35, 39, 44, 45, 59, 63, 65, 72, 75, 87, 92, 97, 101, 105, 106, 107, 110, 148, 153, 157, 160, 183, 191, 201, 207, 217], "named_ent": [2, 13, 17, 21, 25, 29, 34, 37, 41, 47, 50, 94, 110, 111, 112, 113, 114, 120, 166, 194], "negex": 2, "labeled_depend": [2, 62], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 157, 167, 170, 178, 195, 211], "keyword": [2, 96, 97, 128], "dummi": [2, 64], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 60, 62, 63, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 94, 97, 99, 102, 107, 109, 111, 112, 115, 117, 119, 120, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 144, 147, 151, 152, 155, 178, 184, 191, 197], "index": [2, 85, 97, 101, 151, 184, 197], "charact": [2, 64, 77, 80, 92, 99, 105, 107, 115, 125, 126, 141, 143, 144, 151, 152, 155, 160], "under": [2, 74, 81, 91, 97, 184], "last": [2, 85, 102, 104, 148, 202, 215], "string": [2, 8, 22, 38, 43, 52, 60, 64, 92, 105, 107, 113, 115, 126, 138, 144, 146, 150, 157, 158, 160, 164, 166, 167, 215], "dict": [2, 3, 4, 60, 62, 92, 100, 101, 105, 106, 111, 113, 114, 115, 117, 120, 128, 141, 143, 144, 152, 166, 182, 184, 190, 191, 194], "associ": [2, 3, 4, 38, 86, 92, 105, 110, 117, 191], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 63, 64, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 86, 89, 90, 91, 92, 94, 97, 99, 102, 105, 109, 110, 112, 113, 114, 115, 117, 119, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 146, 147, 150, 152, 159, 160, 166, 167, 173, 183, 190, 191, 194, 195, 202, 206, 211], "vector": [2, 38, 68, 69, 70, 72, 73, 75, 76, 77, 86, 87, 88, 139, 159, 160, 210], "where": [2, 38, 73, 77, 92, 97, 100, 101, 105, 106, 107, 117, 123, 126, 128, 130, 131, 138, 139, 143, 144, 155, 157, 200], "applic": [2, 58, 85, 97, 130, 133, 136, 137, 177, 191, 192, 207, 209], "copi": [2, 3, 4, 195], "differ": [2, 3, 4, 54, 56, 60, 62, 77, 79, 82, 83, 89, 91, 97, 102, 125, 126, 141, 152, 155, 166, 191, 215], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 99, 100, 101, 106, 107, 109, 111, 112, 114, 117, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 150, 152, 155, 157, 166, 178, 182, 183, 184, 185, 190, 194, 195, 197, 198, 200, 201], "newli": [2, 3, 4, 85], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 195, 211], "datatyp": [2, 183], "structtyp": 2, "schema": [2, 110, 191, 207], "look": [2, 66, 112, 137, 143, 210], "like": [2, 5, 11, 15, 19, 22, 23, 27, 32, 35, 39, 45, 52, 57, 64, 67, 70, 72, 74, 80, 84, 91, 94, 97, 105, 110, 117, 126, 129, 131, 134, 141, 152, 155, 191, 207, 209, 210], "struct": [2, 158, 164, 167], "containsnul": [2, 38, 156, 158, 164, 167], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 101, 102, 104, 106, 110, 112, 115, 125, 126, 134, 139, 141, 143, 151, 152, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 191, 195, 197, 198, 201, 202, 207, 211, 212], "nullabl": [2, 38, 156, 158, 164, 167], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 166, 167, 169, 170, 183, 184, 191, 194, 197, 198, 200, 202, 207, 210, 211, 212, 217], "integ": [2, 54, 56, 57, 58, 85, 158, 164, 167], "map": [2, 10, 38, 70, 88, 92, 117, 119, 120, 123, 141, 158, 164, 167, 173, 178, 183, 189, 190, 210], "kei": [2, 5, 54, 60, 62, 82, 83, 89, 90, 100, 114, 158, 164, 166, 167, 191, 194, 207], "valuecontainsnul": [2, 158, 164, 167], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 99, 100, 107, 112, 119, 123, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 148, 150, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 183, 212, 215], "element": [2, 38, 107, 117, 156, 158, 164, 167], "float": [2, 3, 5, 7, 8, 22, 38, 43, 54, 57, 59, 99, 111, 112, 114, 117, 119, 120, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 155, 156, 158, 159, 166, 167, 178], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 101, 130, 131, 133, 134, 135, 136, 137, 138, 166, 183, 190, 194, 197, 198, 200, 201], "arraytyp": [2, 157, 183], "fromrow": 2, "row": [2, 44, 63, 65, 88, 125, 126, 129, 158, 167, 169, 183, 197], "column": [2, 9, 22, 38, 43, 64, 88, 100, 109, 111, 112, 119, 120, 123, 129, 139, 147, 152, 155, 156, 157, 158, 159, 160, 161, 164, 167, 170, 173, 183, 194, 197, 200, 211], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 169, 170, 178, 183, 186, 190, 191, 194, 207, 210, 211, 212, 215, 216, 217], "an": [2, 5, 7, 8, 10, 22, 38, 43, 44, 53, 54, 56, 57, 58, 60, 63, 64, 66, 71, 73, 77, 79, 80, 81, 85, 91, 92, 97, 99, 101, 102, 104, 105, 106, 107, 111, 112, 114, 117, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 141, 143, 144, 148, 152, 155, 157, 158, 159, 160, 161, 166, 167, 170, 173, 178, 182, 183, 185, 189, 190, 191, 197, 198, 200, 201, 206, 208, 210, 211, 212, 214, 215], "annotationaudio": 3, "audio": [3, 156, 191], "alreadi": [3, 94, 97, 111, 112, 113, 152, 153, 166, 194, 215], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 58, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91, 94, 97, 99, 110, 111, 112, 120, 126, 130, 131, 136, 138, 139, 155, 156, 157, 158, 159, 160, 164, 167, 168, 170, 191, 207, 210, 211, 212, 213], "file": [3, 5, 7, 22, 38, 43, 60, 62, 64, 86, 88, 92, 100, 101, 105, 106, 111, 112, 115, 120, 126, 128, 141, 143, 144, 147, 152, 156, 169, 179, 184, 191, 197, 198, 200, 201, 207, 217], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 99, 112, 119, 130, 131, 133, 134, 135, 136, 137, 138, 141, 191], "annotationimag": [4, 166, 194], "origin": [4, 53, 54, 56, 57, 58, 67, 75, 80, 82, 87, 110, 126, 130, 164], "height": [4, 54, 56, 57, 58, 164], "width": [4, 54, 56, 57, 58, 164], "nchannel": [4, 164], "mode": [4, 22, 38, 43, 112, 120, 143, 158, 164, 167, 191], "imag": [4, 53, 54, 56, 57, 58, 164, 166, 194], "uri": [4, 195], "pixel": [4, 56], "number": [4, 8, 14, 18, 22, 26, 30, 38, 42, 43, 48, 57, 60, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 107, 109, 111, 112, 117, 119, 123, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 147, 155, 178, 197, 198], "color": 4, "channel": [4, 54, 56, 57, 58, 141], "opencv": 4, "concern": [5, 7, 8, 12, 53, 54, 56, 57, 58, 59, 67], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 152, 155, 169, 171, 172, 180, 186], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 148, 150, 152, 155, 163, 169, 172, 190], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 167, 169, 172, 184, 190, 191, 194, 195, 212], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 46, 47, 49, 50, 52, 63, 67, 91, 110, 111, 112, 166, 183, 194, 211], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 49, 50, 53, 54, 56, 58, 67, 70, 76, 79, 86, 129, 130, 138, 211], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 26, 28, 29, 30, 33, 34, 37, 40, 41, 42, 43, 46, 47, 48, 49, 50, 53, 54, 56, 63, 64, 65, 71, 73, 74, 80, 82, 83, 88, 89, 90, 97, 117, 118, 129, 130, 131, 133, 134, 136, 137, 141, 194, 211, 212], "propos": [5, 7, 54, 56, 67, 71, 73, 74, 81, 82, 83, 85, 89, 90, 91], "self": [5, 7, 56, 67, 80, 135, 178], "supervis": [5, 7, 8, 67, 76, 77, 86, 97, 130, 131, 134], "speech": [5, 7, 8, 10, 71, 122, 123, 155, 200, 217], "represent": [5, 7, 56, 67, 68, 69, 74, 75, 76, 77, 87, 88, 89, 90, 91, 110, 138, 169, 182], "learn": [5, 7, 22, 38, 43, 59, 67, 74, 75, 77, 82, 83, 86, 87, 89, 90, 91, 97, 111, 112, 119, 126, 130, 131, 133, 137, 138, 141, 191, 209], "mask": [5, 56, 73, 81, 89, 90, 91, 130, 151], "predict": [5, 8, 53, 56, 73, 81, 112, 131, 138, 191, 207], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 34, 35, 37, 39, 41, 45, 47, 50, 67, 77, 91, 147], "unit": [5, 131, 133, 147], "wei": [5, 56], "ning": 5, "hsu": 5, "benjamin": [5, 71], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 30, 42, 44, 48, 63, 65, 71, 81, 94, 106, 119, 120, 143, 146, 152, 168, 173, 178, 189, 197, 210, 211, 215, 216], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 52, 53, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 167, 169, 170, 177, 178, 179, 182, 183, 191, 197, 198, 200, 201, 207, 210, 211, 212, 216, 217], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 102, 104, 105, 106, 111, 112, 115, 119, 120, 123, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 155, 166, 173, 178, 183, 185, 189, 194, 212], "pre": [5, 7, 8, 22, 38, 43, 53, 58, 68, 69, 73, 74, 76, 77, 81, 86, 112, 120, 130, 138, 158, 160, 167, 170, 198, 211], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 97, 101, 102, 104, 126, 130, 131, 133, 134, 135, 136, 137, 138, 147, 166, 169, 173, 184, 210, 211, 212], "support": [5, 7, 8, 22, 38, 65, 67, 70, 76, 80, 81, 97, 112, 115, 126, 134, 135, 146, 169, 184, 208], "appl": [5, 7, 69, 83, 90, 184], "silicon": [5, 7, 184], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 67, 80, 85, 130], "instruct": [5, 7, 79], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 111, 112, 114, 123, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 155, 187], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 111, 112, 114, 117, 123, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 155, 177, 179, 186, 187, 191, 210, 211], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 173, 191, 207, 211, 212], "audio_assembl": [5, 7, 8, 165, 184], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 173, 191, 207, 211, 212], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 150, 151, 152, 155, 157, 158, 159, 160, 161, 166, 167, 169, 182, 183, 184, 191, 194, 195, 197, 198, 200, 201, 211], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 106, 108, 109, 111, 112, 114, 119, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 148, 152, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 173, 183, 189, 191, 194, 195, 197, 200, 207, 211], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 95, 97, 99, 100, 102, 105, 111, 112, 123, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 155, 186, 194, 195, 207, 214], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 152, 155, 158, 159, 160, 161, 167, 170, 178, 191, 194, 195, 201, 207, 208, 209, 214, 216, 217], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 67, 68, 71, 73, 74, 80, 82, 85, 89, 91, 97, 102, 105, 123, 125, 130, 131, 138, 155, 161, 166, 168, 191, 207, 215], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 79, 80, 82, 84, 85, 86, 87, 89, 91, 94, 97, 102, 104, 105, 112, 114, 115, 117, 118, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 143, 151, 155, 159, 166, 183, 195, 197, 198, 211, 212], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 67, 68, 71, 73, 74, 80, 82, 89, 91, 112, 159, 195], "5669": [5, 7, 8, 53, 54, 56, 57, 58, 71], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 64, 71, 74, 76, 77, 79, 84, 89, 90, 94, 97, 102, 107, 110, 114, 117, 126, 130, 131, 133, 134, 135, 136, 137, 138, 143, 151, 152, 158, 159, 160, 167, 170, 178, 191, 194, 201, 207, 208, 209, 211, 214, 217], "extend": [5, 7, 8, 10, 22, 38, 43, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 74, 77, 82, 84, 86, 88, 89, 91, 97, 99, 100, 102, 104, 105, 106, 107, 111, 112, 114, 115, 120, 123, 125, 126, 128, 129, 130, 135, 138, 139, 141, 143, 145, 146, 150, 152, 155, 158, 159, 160, 167, 170, 194], "hubertforctctestspec": 5, "paper": [5, 8, 54, 56, 57, 58, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 97, 126, 129, 130, 131, 133, 134, 135, 137, 138, 155, 201, 217], "abstract": [5, 8, 54, 56, 58, 67, 68, 69, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 97, 130, 131, 133, 134, 135, 137, 138, 147, 201, 217], "approach": [5, 8, 54, 56, 82, 83, 85, 91, 97, 109, 111, 112, 114, 126, 128, 130, 131, 133, 136, 137, 138, 141, 143, 144, 171, 214], "challeng": [5, 38, 56, 74, 77, 79, 82, 83, 85, 97, 136, 137], "three": [5, 141, 153], "uniqu": [5, 117, 118, 130], "problem": [5, 38, 67, 77, 81, 85, 130, 138, 141, 155], "multipl": [5, 8, 38, 58, 71, 92, 97, 102, 125, 130, 152, 183, 191, 197], "sound": [5, 63], "each": [5, 7, 14, 18, 22, 26, 30, 38, 42, 43, 48, 54, 56, 57, 58, 63, 70, 73, 75, 76, 81, 84, 87, 88, 92, 94, 97, 100, 101, 102, 105, 106, 107, 109, 111, 112, 114, 115, 117, 118, 120, 123, 125, 126, 128, 130, 139, 141, 143, 144, 151, 152, 155, 158, 167, 177, 183, 190, 200, 212], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 173, 183, 190, 194, 197, 198, 200, 201, 211, 212, 215, 217], "utter": 5, "lexicon": 5, "dure": [5, 22, 38, 43, 53, 74, 79, 111, 112, 120, 125, 139, 141, 184, 191, 207], "phase": [5, 74, 130], "variabl": [5, 75, 87], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 57, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91, 107, 115, 117, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 151, 152, 178], "explicit": [5, 66, 125, 131], "segment": [5, 52, 54, 56, 74, 82, 154, 155], "deal": [5, 166, 215], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 28, 29, 33, 36, 40, 44, 46, 49, 57, 67, 68, 69, 73, 74, 80, 81, 82, 83, 89, 90, 91, 112, 113, 114, 130, 138], "util": [5, 72, 111, 114, 125, 126, 136, 144, 168, 175, 176, 179, 181, 184, 185, 189, 193], "offlin": [5, 191], "cluster": [5, 70, 76, 79, 86, 184], "step": [5, 22, 38, 43, 75, 87, 112, 120, 191, 207, 211], "align": 5, "target": [5, 86, 130, 134, 135, 152, 157, 166, 194], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 53, 54, 56, 58, 60, 62, 76, 85, 92, 99, 109, 110, 111, 112, 114, 119, 120, 128, 129, 138, 141, 147, 155, 191, 197, 207, 211], "loss": [5, 67, 74, 79, 112, 138, 207], "ingredi": 5, "our": [5, 67, 71, 74, 75, 76, 77, 79, 80, 82, 83, 86, 87, 89, 90, 97, 126, 130, 131, 133, 134, 137, 138, 183, 194, 216], "appli": [5, 9, 22, 38, 43, 54, 58, 63, 64, 92, 94, 112, 113, 120, 125, 138, 141, 143, 160, 183, 197], "over": [5, 63, 74, 81, 89, 90, 91, 130, 133, 136, 143, 152, 183, 191, 207], "region": 5, "onli": [5, 8, 54, 56, 57, 58, 60, 62, 63, 64, 70, 76, 77, 81, 86, 91, 102, 105, 115, 117, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 150, 155, 168, 177, 178, 197], "forc": 5, "combin": [5, 14, 18, 26, 30, 42, 48, 57, 74, 80, 88, 97, 130, 134, 138, 141, 143, 155], "acoust": 5, "continu": [5, 110, 131, 139, 161, 207], "reli": [5, 60, 62, 91, 97], "primarili": [5, 85], "consist": [5, 67, 73, 80, 105, 123, 129, 137, 155, 169, 200], "unsupervis": [5, 89, 90, 91, 97, 130, 131], "rather": [5, 54, 66], "than": [5, 38, 43, 54, 66, 74, 75, 79, 87, 89, 90, 91, 97, 99, 107, 111, 117, 131, 133, 134, 135, 137, 143, 144, 211], "intrins": [5, 54], "qualiti": [5, 56, 85, 131, 134], "assign": [5, 38, 92, 113, 128], "simpl": [5, 68, 69, 92, 131, 212], "k": [5, 8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 159, 178], "mean": [5, 8, 10, 14, 18, 26, 30, 38, 42, 48, 54, 56, 57, 58, 85, 89, 97, 99, 102, 104, 117, 130, 131, 133, 134, 135, 136, 137, 138, 139, 151, 159, 166, 178, 211, 212, 215], "teacher": 5, "100": [5, 22, 38, 44, 58, 75, 87, 89, 97, 117, 126, 134, 169], "two": [5, 38, 56, 60, 62, 67, 73, 75, 86, 87, 88, 89, 90, 94, 153, 197, 211], "iter": [5, 60, 62, 67, 75, 87, 123, 155, 191, 207], "either": [5, 8, 22, 43, 58, 62, 71, 72, 84, 92, 97, 99, 105, 128, 129, 138, 155, 157, 166, 167, 169, 194, 212], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 54, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91, 92, 101, 102, 103, 104, 105, 106, 115, 123, 125, 130, 131, 152, 155, 157, 177, 210], "improv": [5, 67, 68, 69, 71, 73, 77, 79, 82, 83, 85, 89, 90, 111, 112, 131, 133, 137, 138, 139, 216], "upon": [5, 65, 97], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 27, 29, 32, 34, 35, 37, 38, 39, 41, 43, 45, 47, 50, 54, 56, 58, 67, 68, 69, 71, 76, 77, 79, 80, 81, 82, 83, 85, 91, 97, 112, 130, 131, 133, 137, 138, 167, 208, 211], "art": [5, 22, 38, 54, 56, 58, 67, 68, 69, 71, 76, 77, 79, 80, 81, 82, 83, 85, 91, 97, 112, 130, 131, 137, 138, 167], "wav2vec": [5, 7], "perform": [5, 54, 56, 58, 64, 67, 71, 73, 74, 76, 77, 79, 82, 83, 86, 88, 89, 90, 91, 112, 129, 130, 131, 133, 134, 136, 137, 138, 139, 143], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 74, 125], "000h": 5, "benchmark": [5, 8, 58, 67, 73, 74, 76, 77, 89, 90, 130, 133, 136, 137, 138], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 52, 68, 69, 74, 76, 81, 114, 130, 133, 137, 138, 202], "tune": [5, 8, 52, 68, 69, 74, 76, 81, 114, 130, 133, 137, 138], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 183, 195, 197, 198, 200, 201, 202, 207, 210, 211, 212, 216], "19": [5, 59, 70, 76, 107, 200, 202], "13": [5, 9, 10, 52, 89, 90, 94, 123, 137, 160, 202], "rel": [5, 71, 73, 89, 102, 104, 111, 141, 210], "wer": 5, "reduct": [5, 67, 143], "dev": [5, 56, 67, 77, 86], "test": [5, 22, 38, 43, 53, 54, 56, 57, 58, 60, 62, 66, 68, 69, 86, 88, 100, 101, 105, 106, 111, 112, 120, 123, 131, 133, 137, 143, 144, 148, 155, 197, 198, 200, 201, 202, 211, 217], "evalu": [5, 22, 38, 43, 71, 76, 79, 80, 85, 89, 90, 120, 130, 133, 134, 137, 173, 191], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 89, 90, 91, 112, 130, 135, 141], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 94, 97, 112, 119, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 178, 210, 215, 216], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 57, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 89, 90, 91, 112, 119, 130, 135, 141], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 171, 172, 173, 176, 180, 184, 186, 190, 191, 207, 211, 212, 215], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 164, 166, 167, 168, 169, 170, 191, 207, 211, 215], "audioassembl": [5, 7, 8, 156], "audio_cont": [5, 7, 8, 156], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 159, 169, 170, 211, 212], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 167, 169, 170, 183, 191, 207, 210, 211, 212, 216], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 164, 167, 169, 170, 183, 210, 211, 212, 216], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 157, 159, 166, 168, 169, 170, 190, 191, 207, 211, 212, 215], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 72, 74, 88, 94, 97, 99, 111, 112, 114, 117, 118, 129, 130, 131, 133, 134, 137, 138, 139, 141, 143, 144, 150, 155, 156, 158, 160, 161, 164, 167, 169, 170, 183, 191, 207, 212], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 88, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 160, 161, 167, 169, 170, 183, 200, 210, 211, 212], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 64], "apostl": [5, 7, 8], "OF": [5, 7, 67], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 197, 217], "hi": [5, 7, 8, 65, 114, 126, 134], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 86, 89, 90, 91, 99, 112, 119, 130, 131, 133, 134, 135, 136, 137, 138, 141], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 86, 89, 90, 91, 99, 101, 106, 110, 111, 112, 113, 114, 119, 125, 130, 131, 133, 134, 135, 136, 137, 138, 141, 155, 166, 183, 194, 197, 201, 217], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 99, 112, 119, 130, 131, 133, 134, 135, 136, 137, 138, 141], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 97, 99, 112, 119, 130, 131, 133, 134, 135, 136, 137, 138, 141], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 130, 131, 133, 134, 135, 136, 137, 138], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 112, 120, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 144, 147, 195, 197], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 130, 131, 133, 134, 135, 136, 137, 138], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 112, 120, 126, 130, 131, 133, 134, 135, 136, 137, 138, 184, 191, 207, 211], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 194, 195, 211, 216], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 94, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 194, 195, 198, 211, 216, 217], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 194, 195], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 99, 100, 101, 106, 111, 112, 113, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 184, 194, 195, 210, 211, 214, 215], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 63, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 101, 105, 106, 111, 112, 114, 115, 120, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 156, 158, 162, 163, 166, 167, 182, 183, 184, 190, 191, 194, 195, 197, 198, 200, 201, 211], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 194, 195], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 105, 106, 111, 112, 114, 115, 120, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 148, 152, 155, 168, 179, 182, 193, 195, 197, 198, 200, 201, 202, 211, 217], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 194, 208], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 62, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 106, 111, 112, 114, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 146, 152, 155, 157, 178, 191], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 148], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 66, 94, 97, 114, 135, 143, 210, 211], "recognit": [8, 13, 17, 21, 25, 29, 34, 37, 41, 47, 50, 54, 58, 71, 108, 111, 112, 114], "asr": 8, "system": [8, 97, 130, 131, 134], "680": 8, "000": [8, 44, 97, 131, 155, 169], "hour": [8, 65, 102, 104], "multilingu": [8, 89, 90, 134, 155], "multitask": [8, 79, 131], "collect": [8, 85, 97, 133, 137, 191, 207], "web": [8, 52, 64, 71, 131, 191, 207], "well": [8, 58, 60, 62, 63, 76, 86, 89, 90, 97, 117, 130, 169], "translat": [8, 130, 131, 134, 135, 138, 155], "those": [8, 71, 94, 113, 211, 212], "english": [8, 43, 71, 97, 134, 136, 143, 146, 155, 195], "moment": 8, "greedi": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "search": [8, 57, 70, 102, 130, 134, 139, 143, 178], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 54, 56, 58, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 85, 86, 89, 90, 91, 97, 114, 130, 131, 135, 136, 138, 168, 178], "setlanguag": 8, "settask": [8, 130, 131, 138, 178], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 79], "via": [8, 12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 86, 164, 184], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58, 63, 65, 67, 73, 74, 76, 77, 81, 85, 89, 90, 91, 97, 99, 101, 106, 112, 130, 131, 133, 134, 137], "scale": [8, 54, 56, 57, 58, 67, 74, 76, 80, 81, 89, 90, 130, 131, 133, 134, 137, 138], "weak": [8, 76], "studi": [8, 74, 82, 83, 130, 138], "capabl": [8, 53, 56, 74, 91, 131, 136], "simpli": [8, 64, 79, 212], "amount": [8, 58, 86, 97, 106, 131, 155, 166, 215], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 26, 28, 30, 33, 40, 42, 46, 48, 49, 54, 56, 57, 58, 63, 64, 66, 67, 76, 94, 102, 104, 107, 112, 117, 130, 131, 134, 137, 138, 141, 143, 146, 150, 155, 166, 197, 211, 212, 215], "gener": [8, 22, 38, 54, 56, 57, 67, 70, 72, 74, 76, 79, 80, 84, 85, 91, 94, 97, 111, 112, 114, 117, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 160, 161, 178, 191, 207, 210, 211, 212], "standard": [8, 54, 56, 57, 58, 64, 80, 102, 104, 130, 143, 144, 152], "often": [8, 67, 82, 83, 91], "competit": [8, 89, 90, 97, 134], "prior": [8, 54, 74, 79, 80, 117, 141], "fulli": [8, 194], "zero": [8, 53, 76, 88, 114, 131], "shot": [8, 53, 76, 114, 131], "transfer": [8, 58, 74, 76, 86, 89, 90, 130, 131, 138], "without": [8, 53, 68, 69, 76, 79, 89, 90, 97, 131, 136, 155], "ani": [8, 14, 18, 26, 30, 42, 48, 53, 66, 70, 75, 76, 79, 86, 87, 92, 97, 112, 131, 134, 138, 141, 159, 160, 195, 208, 211, 212, 217], "compar": [8, 56, 58, 67, 73, 74, 77, 79, 81, 91, 97, 126, 130, 133, 138, 141, 191, 207], "human": [8, 73, 97, 133, 137], "accuraci": [8, 54, 56, 60, 62, 68, 69, 75, 86, 87, 89, 90, 111, 112, 123, 136, 143, 155, 207], "releas": [8, 64, 67, 71, 73, 82, 83, 89, 90, 130, 133, 137, 138, 184], "infer": [8, 14, 18, 26, 30, 42, 48, 53, 68, 69, 71, 74, 91, 133, 136], "code": [8, 52, 53, 66, 73, 75, 79, 80, 82, 83, 87, 89, 90, 97, 99, 130, 136, 138, 208, 216], "serv": [8, 56, 208], "foundat": [8, 133], "further": [8, 9, 67, 79, 97, 111, 112, 117, 170], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 33, 34, 36, 37, 40, 41, 46, 47, 49, 50, 54, 62, 64, 76, 77, 79, 80, 81, 92, 94, 111, 112, 130, 131, 134, 135, 138, 139, 141, 146, 169, 178, 191, 207], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 33, 34, 36, 37, 40, 41, 46, 47, 49, 50, 54, 62, 64, 76, 77, 79, 81, 94, 111, 112, 130, 131, 135, 138, 141, 146, 169, 178, 191, 207], "check": [8, 70, 76, 112, 125, 141, 142, 143, 144, 166, 170, 194, 211, 216], "descript": [8, 62, 79, 84, 97, 102, 133, 137, 143, 150, 177, 179], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 94, 101, 102, 104, 106, 107, 110, 111, 112, 115, 117, 120, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 146, 151, 152, 155, 157, 159, 160, 161, 166, 169, 170, 173, 178, 184, 194, 197, 201, 212], "minoutputlength": [8, 57, 130, 131, 133, 134, 136, 137, 138], "minimum": [8, 38, 43, 57, 75, 87, 94, 97, 99, 109, 111, 112, 115, 125, 126, 130, 131, 133, 134, 136, 137, 138, 143, 144, 151, 152, 178, 197], "sequenc": [8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 54, 56, 57, 58, 80, 85, 117, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 178], "maxoutputlength": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138], "maximum": [8, 22, 38, 43, 52, 57, 66, 75, 87, 94, 97, 109, 111, 112, 115, 117, 119, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 151, 152, 178], "dosampl": [8, 57, 130, 131, 133, 134, 136, 137, 138], "sampl": [8, 57, 117, 130, 131, 133, 134, 135, 136, 137, 138, 178], "decod": [8, 57, 73, 80, 130, 131, 133, 134, 135, 136, 137, 138, 178], "temperatur": [8, 57, 117, 130, 131, 133, 134, 136, 137, 138], "next": [8, 36, 57, 82, 83, 97, 102, 104, 130, 131, 133, 134, 135, 136, 137, 138, 178], "probabl": [8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 57, 97, 117, 130, 131, 133, 134, 135, 136, 137, 138, 139, 143, 178], "topk": [8, 57, 130, 131, 133, 134, 136, 137, 138], "highest": [8, 57, 117, 130, 131, 133, 134, 135, 136, 137, 138, 143, 178], "vocabulari": [8, 57, 75, 87, 130, 131, 133, 134, 135, 136, 137, 138, 141, 178], "keep": [8, 57, 58, 63, 97, 115, 130, 131, 133, 134, 135, 136, 137, 138, 178], "filter": [8, 54, 56, 57, 58, 89, 90, 97, 110, 111, 130, 131, 133, 134, 135, 136, 137, 138, 146, 178, 183, 195], "topp": [8, 57, 117, 130, 131, 133, 134, 135, 136, 137, 138, 178], "most": [8, 57, 63, 65, 71, 74, 80, 81, 97, 112, 117, 130, 131, 133, 134, 135, 136, 137, 138, 178], "add": [8, 57, 88, 102, 104, 125, 130, 131, 133, 134, 135, 136, 137, 138, 141, 152, 178, 211], "top_p": [8, 57, 117], "higher": [8, 57, 88, 97, 117, 129, 130, 131, 133, 134, 135, 136, 137, 138, 178], "kept": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "repetitionpenalti": [8, 57, 130, 131, 133, 134, 136, 137, 138], "repetit": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "penalti": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "norepeatngrams": [8, 57, 130, 131, 133, 134, 136, 137, 138], "ngram": [8, 57, 72, 107, 130, 131, 133, 134, 135, 136, 137, 138, 178], "occur": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "onc": [8, 57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "beamsiz": [8, 57, 130], "beam": [8, 57, 130, 134, 178], "mr": [8, 134], "middl": [8, 150, 155], "getlanguag": 8, "langaug": [8, 194], "getismultilingu": 8, "do": [8, 9, 65, 86, 97, 110, 146, 152, 166, 207, 211, 215], "xx": [8, 18, 48, 89, 90, 99, 134, 135], "chunk2doc": [9, 157], "convert": [9, 57, 59, 64, 72, 81, 84, 88, 102, 104, 107, 110, 115, 117, 130, 138, 151, 153, 155, 157, 160, 161, 191, 207, 214], "back": [9, 65, 117, 130], "try": [9, 141, 197], "re": [9, 70, 76, 211], "analysi": [9, 22, 38, 43, 77, 79, 91, 127, 128, 138, 175, 212], "doc2chunk": [9, 157], "pretrainedpipelin": [9, 160, 166, 183, 194, 210, 215, 216], "locat": [9, 92, 125, 184, 194, 211], "extract": [9, 10, 11, 15, 19, 23, 27, 32, 35, 39, 45, 54, 56, 57, 58, 60, 63, 65, 72, 88, 92, 93, 94, 96, 97, 101, 102, 104, 106, 110, 111, 112, 113, 125, 126, 128, 139, 141, 144, 148, 153, 159, 160, 161, 166, 184, 191, 194, 207], "york": [9, 114, 160], "jersei": [9, 160], "aren": [9, 160], "t": [9, 14, 18, 26, 30, 42, 48, 65, 74, 82, 100, 115, 126, 128, 137, 152, 160], "far": [9, 117, 131, 160], "apart": [9, 60, 62, 160], "actual": [9, 107, 160, 170], "id": [9, 38, 64, 89, 92, 117, 118, 130, 131, 133, 134, 135, 136, 137, 138, 141, 157, 158, 160, 167, 170, 191, 197], "defin": [9, 10, 110, 111, 112, 141, 146, 150, 160, 183, 191, 194, 207, 211, 215], "amongst": [9, 160], "thing": [9, 141, 160], "explain_document_dl": [9, 160, 166, 183, 194], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 160], "selectexpr": [9, 10, 22, 44, 52, 53, 54, 56, 57, 58, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 100, 101, 102, 104, 105, 106, 107, 110, 113, 114, 115, 123, 125, 126, 128, 135, 145, 146, 148, 151, 152, 153, 157, 159, 160, 183, 197, 198, 200, 210, 211, 216], "explod": [9, 10, 22, 44, 52, 60, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 101, 104, 105, 106, 107, 110, 113, 114, 123, 125, 126, 135, 153, 159, 160, 183, 197, 200, 210, 211, 216], "col": [9, 60, 62, 92, 101, 110, 113, 160, 183, 210], "loc": [9, 13, 17, 21, 25, 29, 34, 37, 41, 47, 50, 94, 110, 111, 112, 160, 166, 183, 194, 197], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 118, 123, 129, 130, 135, 138, 139, 141, 146, 148, 151, 153, 155, 158, 160, 166, 167, 169, 170, 184, 194, 197, 198, 200, 201, 202, 211, 215, 216], "22": [9, 160, 197, 210], "pattern": [10, 63, 64, 92, 102, 105, 115, 143, 144, 151, 152, 155], "part": [10, 66, 71, 97, 100, 122, 123, 133, 145, 155, 157, 200, 217], "tag": [10, 22, 38, 43, 64, 71, 109, 110, 111, 112, 113, 122, 123, 155, 183, 191, 197, 200, 201, 217], "order": [10, 63, 66, 79, 91, 92, 97, 102, 130, 133, 137, 143, 144, 166, 170, 183, 211, 212, 215, 217], "meaning": [10, 145], "phrase": [10, 71, 75, 87, 101, 106], "onto": [10, 183, 212], "pars": [10, 60, 61, 62, 71, 92, 100, 102, 104, 141, 143, 144, 166, 169, 194, 197, 200], "regular": [10, 63, 105, 111, 125], "express": [10, 43, 52, 63, 102, 105, 125], "wrap": [10, 139, 171, 172, 180, 186, 190], "angl": [10, 85], "bracket": 10, "easili": [10, 77, 123, 159, 207], "distinguish": 10, "itself": [10, 66, 97, 138, 155, 168, 212], "form": [10, 22, 38, 43, 88, 92, 100, 101, 102, 105, 106, 126, 128, 143, 144, 155, 159, 191, 197, 198, 211], "peter": [10, 80, 100, 115, 123, 126, 143, 145, 197], "piper": [10, 100, 123, 145], "employe": [10, 100, 123, 145], "pick": [10, 100, 123, 145], "peck": [10, 100, 123, 145], "pickl": [10, 100, 123, 145], "pepper": [10, 100, 123, 145], "nnp": [10, 123, 166, 183, 197, 198, 200, 201, 210, 215, 216, 217], "nn": [10, 123, 197, 198, 200, 201, 217], "vbp": [10, 123, 166, 198, 210, 215, 216], "vbg": [10, 123], "IN": [10, 123, 166, 183, 198, 200, 201, 210, 215, 216], "jj": [10, 123, 166, 183, 197, 200, 210, 215, 216, 217], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 141, 155], "group": [10, 133, 136, 152], "so": [10, 14, 18, 22, 30, 42, 43, 48, 65, 66, 97, 110, 117, 126, 134, 168, 191, 207], "here": [10, 100, 183, 211], "specif": [10, 44, 60, 62, 64, 68, 69, 74, 85, 86, 94, 97, 112, 130, 131, 134, 147, 166, 168, 191, 215], "noun": [10, 198], "success": [10, 71, 81, 131], "grammar": 10, "parser": [10, 60, 62, 94], "perceptronmodel": [10, 60, 62, 94, 111, 123, 197], "Of": [10, 67, 155], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 59, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 159, 167, 168, 169, 170, 191, 197, 207, 211], "sentencedetector": [10, 22, 44, 52, 60, 62, 69, 72, 83, 86, 90, 94, 97, 100, 105, 107, 111, 112, 113, 114, 123, 125, 126, 146, 148, 168, 170, 197, 211, 212], "postag": 10, "11": [10, 59, 89, 90, 102, 104, 107, 123, 202], "21": [10, 102, 104, 113, 123, 202], "35": [10, 123, 202], "39": [10, 113, 118, 123, 200, 202], "52": [10, 113, 123, 200], "58": [10, 56, 123], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 97, 159, 211], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 99, 112, 114, 143, 144], "albert": [11, 12, 13, 67], "span": [11, 15, 19, 23, 27, 32, 35, 39, 45, 130, 138], "question": [11, 15, 19, 23, 27, 32, 35, 39, 44, 45, 60, 62, 68, 69, 77, 82, 83, 91, 114, 123, 130, 131, 136, 138, 166], "answer": [11, 15, 19, 23, 27, 32, 35, 39, 44, 45, 60, 62, 63, 68, 69, 77, 91, 114, 130, 131, 136, 138, 166], "squad": [11, 15, 19, 23, 27, 32, 35, 39, 45, 67, 68, 69, 73, 81, 82, 83, 130], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 46, 47, 49, 50, 56, 131], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 46, 47, 49, 50, 67, 68, 69, 73, 77, 91], "comput": [11, 15, 19, 23, 27, 32, 35, 39, 45, 54, 56, 58, 67, 73, 74, 79, 86, 131, 135, 136, 144, 155, 166, 215], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 28, 30, 32, 33, 35, 36, 39, 40, 42, 45, 46, 48, 49, 117], "spanclassifi": [11, 15, 19, 23, 27, 32, 35, 39, 45], "document_quest": [11, 15, 19, 23, 27, 32, 35, 39, 44, 45], "document_context": [11, 15, 19, 23, 27, 32, 35, 39, 45], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 56, 57, 77, 86, 111, 112, 115, 125, 126, 130, 151, 152, 168, 177], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 74, 77, 143, 144], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 89, 90, 91, 101, 106, 143, 146], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 89, 90, 91, 101, 107, 110, 130, 131, 133, 134, 135, 136, 137, 138, 143, 146, 166], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 99, 101, 106, 133, 137, 141, 143, 146, 152, 157, 197, 198, 211], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 99, 112, 130, 131, 133, 134, 135, 136, 137, 138, 141], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 67, 68, 69, 71, 73, 74, 79, 82, 83, 89, 90, 91, 191, 207], "multidocumentassembl": [11, 15, 19, 23, 27, 32, 35, 39, 44, 45, 167], "context": [11, 15, 19, 23, 27, 32, 35, 39, 45, 68, 69, 75, 77, 87, 91, 117, 129, 133, 141, 152], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 72, 74, 80, 82, 89, 101, 106, 111, 143, 146, 159, 170], "what": [11, 15, 19, 23, 27, 32, 35, 39, 43, 45, 54, 60, 62, 97, 99, 114, 117, 135, 141, 150, 198, 208], "my": [11, 13, 15, 17, 19, 22, 23, 25, 27, 29, 32, 34, 35, 36, 37, 39, 41, 43, 45, 47, 50, 63, 64, 65, 105, 107, 114, 117, 125, 131, 133, 134, 137, 146, 148, 151, 211], "clara": [11, 15, 19, 23, 27, 32, 35, 39, 45, 114], "live": [11, 13, 15, 17, 19, 23, 25, 27, 29, 32, 34, 35, 37, 39, 41, 45, 47, 50, 114, 131, 133, 191, 207], "berkelei": [11, 15, 19, 23, 27, 32, 35, 39, 45, 137], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 28, 33, 36, 40, 46, 49, 130, 138], "pool": [12, 16, 20, 24, 28, 33, 36, 40, 46, 49, 72, 77, 84, 85], "multi": [12, 16, 20, 22, 24, 28, 33, 36, 38, 40, 43, 46, 49, 67, 86, 89, 90, 97, 99, 135], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 99], "instead": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 69, 97, 99, 102, 104, 138, 159, 160, 166, 215], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 70, 76, 89, 90, 99, 102, 107, 109, 110, 111, 112, 117, 155, 166, 183, 194, 197], "inputcol": [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 38, 40, 42, 43, 46, 48, 49, 84, 99, 156, 158, 159, 160, 161, 164, 167], "averag": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 44, 46, 48, 49, 70, 72, 76, 79, 84, 89, 90, 99, 112, 123, 139], "calcul": [12, 14, 16, 18, 20, 22, 26, 28, 30, 33, 36, 38, 40, 42, 43, 46, 48, 49, 88, 107, 112, 120, 128, 139], "softmax": [12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 73, 75, 87, 141], "sigmoid": [12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49], "love": [12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 69, 83, 90, 126, 129, 211], "movi": [12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 40, 42, 43, 46, 48, 49, 129, 211], "child": [12, 14, 16, 18, 24, 26, 28, 30, 33, 40, 42, 46, 48, 49], "pretti": [12, 14, 16, 18, 24, 26, 28, 30, 33, 38, 40, 42, 46, 48, 49, 97], "bore": [12, 14, 16, 18, 24, 26, 28, 30, 33, 40, 42, 46, 48, 49], "neg": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 40, 42, 43, 46, 48, 49, 128, 129, 139, 191, 207], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 40, 41, 42, 46, 47, 48, 49, 50, 54, 56, 58, 114], "setcoalescesent": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 99], "limit": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 54, 56, 58, 65, 67, 71, 80, 81, 85, 88, 91, 97, 138, 143], "almost": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49], "512": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 44, 46, 48, 49, 65, 70, 76, 77, 81, 85, 135], "help": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 60, 62, 63, 67, 117, 118, 133, 135, 137, 152, 191, 207, 212, 216], "feed": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49], "entir": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 54, 85, 135], "bool": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 40, 42, 46, 48, 49, 63, 64, 65, 68, 69, 72, 76, 82, 86, 89, 92, 94, 99, 101, 102, 106, 107, 110, 111, 112, 115, 120, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 146, 151, 152, 155, 157, 159, 160, 161, 166, 169, 173, 178, 184, 191, 194, 195, 197], "one": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 38, 40, 42, 46, 48, 49, 52, 54, 56, 57, 58, 60, 62, 64, 68, 69, 81, 84, 89, 90, 91, 97, 99, 102, 105, 110, 117, 126, 143, 148, 170, 207, 211], "albertfortokenclassif": [13, 67], "ner": [13, 17, 21, 25, 29, 34, 37, 41, 47, 50, 89, 90, 94, 95, 148, 166, 183, 184, 191, 194, 207], "token_classifi": [13, 21, 34, 37, 41, 47, 50], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 67], "level": [13, 22, 38, 43, 68, 69, 80, 82, 83, 86, 88, 90, 92, 111, 112, 120, 141, 184, 197], "tokenclassifi": [13, 17, 21, 25, 29, 34, 37, 41, 47, 50], "john": [13, 17, 25, 29, 34, 37, 41, 47, 50, 52, 69, 83, 90, 92, 94, 113, 115, 126, 161, 202], "lenon": [13, 17, 25, 29, 34, 37, 41, 47, 50], "born": [13, 17, 25, 29, 34, 37, 41, 47, 50, 131, 133], "london": [13, 17, 25, 29, 34, 37, 41, 47, 50], "pari": [13, 17, 25, 29, 34, 37, 41, 47, 50, 114], "sarah": [13, 17, 25, 29, 34, 37, 41, 47, 50], "o": [13, 17, 21, 25, 29, 34, 37, 41, 47, 50, 110, 111, 112, 113, 166, 183, 194, 197, 201, 217], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 26, 30, 42, 48], "nli": [14, 18, 26, 30, 42, 48], "natur": [14, 18, 26, 30, 42, 43, 48, 58, 67, 68, 69, 71, 73, 74, 75, 81, 86, 87, 91, 99, 130, 131, 136, 138, 157, 167, 170], "equival": [14, 18, 26, 30, 42, 48, 166, 184, 215], "bartforsequenceclassif": 14, "don": [14, 18, 26, 30, 42, 48, 74, 82, 115], "hardcod": [14, 18, 26, 30, 42, 48], "potenti": [14, 18, 26, 30, 42, 48, 56, 134, 141], "thei": [14, 18, 26, 30, 42, 44, 48, 60, 62, 63, 112, 115, 117, 131, 168, 186, 198, 211], "chosen": [14, 18, 26, 30, 42, 48, 60, 62, 112, 117], "runtim": [14, 18, 26, 30, 42, 48], "usual": [14, 18, 26, 30, 42, 48, 58, 170, 195], "slower": [14, 18, 26, 30, 42, 48], "much": [14, 18, 22, 26, 30, 42, 44, 48, 67, 70, 76, 82, 83, 115, 133, 134, 155, 184, 211], "flexibl": [14, 18, 26, 30, 42, 48, 53, 56], "loop": [14, 18, 30, 42, 48], "through": [14, 18, 30, 42, 48, 67, 81, 94, 97, 134, 137, 161, 212], "longer": [14, 18, 30, 42, 48, 67, 75, 80, 87, 99, 133, 135, 136, 216], "pass": [14, 18, 26, 30, 42, 48, 66, 117], "pose": [14, 18, 26, 30, 42, 48], "premis": [14, 18, 26, 30, 42, 48], "hypothesi": [14, 18, 26, 30, 42, 48], "pair": [14, 18, 26, 30, 42, 48, 53, 76, 94, 134, 191], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 26, 41, 42, 48, 75, 87], "bart": [14, 130], "bertforquestionansw": [15, 44], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_zero_shot_classifier_mnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 71], "camembert_base_qa_fquad": 19, "fr": [19, 20, 71, 99, 134], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 92], "ai": [20, 117, 118, 130, 191, 207], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 71, 99, 135], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 211], "classifierdlapproach": [22, 38, 211], "univers": [22, 60, 62, 85, 86, 135, 137], "encod": [22, 57, 64, 68, 69, 73, 79, 80, 86, 114, 130, 134, 135, 191], "deep": [22, 68, 69, 77, 97, 111, 126, 141], "dnn": 22, "insid": [22, 38, 110, 123, 152, 197], "instanti": [22, 38, 43, 60, 62, 66, 75, 87, 88, 92, 100, 101, 105, 106, 111, 112, 115, 123, 126, 128, 129, 139, 141, 143, 144, 148, 150, 155, 197, 198], "classifierdlmodel": [22, 38, 211], "monitor": [22, 38, 43, 112, 117, 118, 191, 207], "metric": [22, 38, 43, 112, 144, 191], "done": [22, 38, 43, 82, 83, 111, 112, 212], "settestdataset": [22, 38, 43, 112, 120], "method": [22, 38, 43, 66, 67, 74, 75, 79, 81, 87, 91, 97, 112, 139, 195, 206], "expect": [22, 38, 43, 70, 76, 91, 112, 152, 183], "path": [22, 38, 43, 60, 62, 75, 87, 88, 92, 94, 100, 101, 105, 106, 111, 112, 114, 115, 120, 126, 128, 131, 141, 143, 144, 147, 152, 164, 166, 182, 191, 194, 197, 198, 200, 201, 207], "parquet": [22, 38, 43, 112, 120, 156], "datafram": [22, 38, 43, 75, 87, 88, 112, 120, 123, 139, 155, 166, 179, 183, 190, 191, 194, 197, 198, 200, 201, 207, 211, 215, 217], "ha": [22, 38, 43, 44, 53, 54, 56, 57, 58, 63, 64, 65, 67, 73, 74, 77, 82, 83, 85, 88, 97, 100, 105, 112, 120, 126, 128, 130, 134, 138, 143, 144, 155, 156, 157, 164, 166, 191, 195, 200, 207, 211, 212], "same": [22, 38, 43, 52, 67, 81, 82, 88, 89, 92, 94, 112, 117, 120, 137, 138, 139, 168, 191, 212], "follow": [22, 38, 43, 52, 59, 64, 77, 80, 88, 97, 102, 104, 105, 110, 112, 115, 125, 153, 169, 207, 209, 212], "universalsentenceencod": [22, 38, 43, 86, 191, 207, 211], "preprocessingpipelin": [22, 38, 43, 112, 120], "randomsplit": [22, 38, 43, 112, 120], "write": [22, 38, 43, 88, 112, 120, 143, 144, 212], "overwrit": [22, 38, 43, 112, 113, 120, 191], "test_data": [22, 38, 43, 112, 120], "setlabelcolumn": [22, 38, 43, 109, 111, 112, 119, 147, 191, 207, 211], "usag": [22, 38, 43, 52, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 74, 77, 82, 86, 88, 89, 91, 92, 97, 99, 100, 102, 104, 105, 106, 111, 112, 115, 123, 125, 126, 128, 129, 130, 135, 138, 139, 141, 143, 145, 146, 150, 152, 155], "64": [22, 38, 43, 67, 112, 119, 211], "dropout": [22, 43, 112], "coeffici": [22, 43, 111, 112], "enableoutputlog": [22, 38, 43, 112], "stdout": [22, 38, 43, 112, 120], "addit": [22, 38, 43, 60, 62, 66, 68, 69, 92, 111, 112, 117, 120, 125, 131, 152, 191, 210, 211], "evaluationlogextend": [22, 38, 43, 112], "valid": [22, 38, 43, 102, 112, 120, 126, 141, 207], "displai": [22, 38, 43, 120, 131, 191, 207], "time": [22, 38, 43, 67, 75, 87, 89, 90, 97, 102, 120, 129, 141, 155, 184, 210, 211, 215, 216], "labelcolumn": [22, 38, 43, 111, 112], "lr": [22, 38, 43, 112, 155], "rate": [22, 38, 43, 59, 75, 82, 83, 87, 88, 112, 119, 139, 141], "005": [22, 43, 112, 119], "maxepoch": [22, 38, 43, 111, 112], "epoch": [22, 38, 43, 109, 111, 112, 119, 120, 126, 141, 191], "30": [22, 43, 97, 102, 104, 110, 119, 135, 166, 183, 194, 202, 210], "outputlogspath": [22, 38, 43, 112, 126], "randomse": [22, 38, 43, 111, 112], "random": [22, 38, 43, 75, 87, 109, 111, 112, 117, 119, 135, 139, 159], "seed": [22, 38, 43, 75, 87, 109, 111, 112, 119, 135], "shuffl": [22, 38, 109, 119, 130], "testdataset": [22, 38, 43, 112, 191, 207], "statist": [22, 38, 43, 88, 97, 112, 120], "validationsplit": [22, 38, 43, 112, 126], "choos": [22, 38, 43, 72, 84, 112, 117, 126, 143], "proport": [22, 38, 43, 112, 120, 126], "against": [22, 38, 43, 92, 97, 101, 106, 112, 120, 126, 137, 168], "between": [22, 38, 43, 56, 60, 62, 63, 65, 81, 82, 83, 86, 89, 90, 91, 94, 112, 117, 120, 125, 126, 134, 136, 141], "off": [22, 38, 43, 86, 89, 90, 112, 120, 126], "verbos": [22, 38, 43, 111, 112, 120], "multiclassifierdlapproach": [22, 38, 191, 207], "sentimentdlapproach": [22, 38, 43], "accept": [22, 38, 43, 117], "singl": [22, 38, 43, 66, 76, 79, 88, 94, 97, 130, 134, 148, 150, 152, 197], "item": [22, 43, 88, 117, 191, 197, 207], "doubl": [22, 43, 156, 169], "sentenceembed": [22, 38, 43, 84, 88, 159], "In": [22, 38, 43, 54, 58, 65, 71, 73, 74, 80, 81, 88, 91, 92, 97, 99, 100, 101, 105, 106, 125, 126, 128, 130, 131, 133, 134, 136, 137, 138, 143, 144, 155, 191, 200, 207, 211, 212, 216, 217], "csv": [22, 43, 92, 120, 169, 211], "best": [22, 43, 67, 71, 76, 79, 82, 83, 97, 99, 112, 117, 130, 134, 211], "wach": [22, 211], "ever": [22, 43, 64, 211], "opinion": [22, 43, 211], "win": [22, 43, 211], "award": [22, 43, 211], "terribl": [22, 43, 211], "act": [22, 43, 211], "bad": [22, 43, 128, 191, 207, 211], "realli": [22, 43, 117, 129, 211], "trane": 22, "smallcorpu": [22, 43, 211], "read": [22, 43, 53, 54, 56, 57, 58, 60, 62, 75, 87, 97, 100, 101, 102, 104, 105, 106, 111, 114, 115, 120, 126, 128, 131, 141, 143, 144, 152, 155, 156, 158, 164, 167, 179, 182, 184, 185, 191, 195, 197, 198, 200, 201, 207, 211, 217], "header": [22, 43, 44, 169, 211], "src": [22, 43, 53, 54, 56, 57, 58, 60, 62, 88, 100, 101, 105, 106, 111, 112, 123, 143, 144, 148, 155, 197, 198, 200, 201, 202, 211, 217], "useembed": [22, 38, 43, 86, 211], "docclassifi": [22, 38, 43, 211], "setbatchs": [22, 38, 43, 77, 112, 119, 141, 191, 207, 211], "setmaxepoch": [22, 38, 43, 109, 111, 112, 119, 191, 207, 211], "20": [22, 36, 44, 54, 63, 91, 110, 130, 131, 133, 134, 136, 137, 166, 169, 183, 194, 211], "setlr": [22, 38, 43, 112, 119, 191, 207, 211], "5e": [22, 43, 211], "setdropout": [22, 43, 112, 211], "pipelinemodel": [22, 36, 38, 43, 60, 62, 64, 75, 87, 111, 112, 129, 141, 143, 144, 155, 166, 168, 191, 195, 211, 214], "v": [22, 38, 43, 59, 73, 81, 88, 97, 99, 101, 112, 119, 120, 144, 183], "classifierdl_use_trec6": [22, 211], "trec": 22, "multiclassifierdlmodel": [22, 38], "sentimentdlmodel": [22, 38, 43], "sarcasmdl": [22, 211], "classifierdl_use_sarcasm": [22, 211], "sarcasm": [22, 211], "m": [22, 65, 102, 104, 134, 202, 211], "could": [22, 74, 97, 105, 120, 141, 210, 211, 212], "put": [22, 183, 211], "word": [22, 56, 58, 60, 62, 67, 72, 73, 75, 77, 82, 84, 86, 87, 88, 91, 92, 94, 97, 100, 107, 110, 113, 114, 115, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 150, 152, 154, 155, 166, 183, 194, 200, 201, 210, 211], "wake": [22, 211], "am": [22, 63, 102, 104, 131, 133, 134, 137, 148, 211], "mondai": [22, 211], "would": [22, 52, 63, 72, 84, 102, 126, 184, 211], "arrays_zip": [22, 60, 62, 97, 211], "out": [22, 70, 76, 97, 100, 115, 130, 131, 133, 134, 135, 136, 137, 138, 145, 146, 211], "normal": [22, 54, 56, 57, 58, 64, 95, 101, 126, 129, 146, 159, 168, 170, 184, 211, 212], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 26, 73], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": [24, 26], "v2": [24, 25, 68, 69, 73], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "debertaforzeroshotclassif": 26, "deberta_base_zero_shot_classifier_mnli_anli_v3": 26, "distilbertforquestionansw": 27, "distilbert": [27, 28, 30, 74], "distilbert_base_cased_qa_squad2": 27, "distilbertforsequenceclassif": [28, 30], "distilbert_base_sequence_classifier_imdb": 28, "distilbertfortokenclassif": 29, "distilbert_base_token_classifier_conll03": 29, "distilbertforzeroshotclassif": 30, "distilbert_base_zero_shot_classifier_uncased_mnli": 30, "albert_for_sequence_classif": [31, 95], "albert_for_token_classif": [31, 95], "bart_for_zero_shot_classif": [31, 95], "bert_for_sequence_classif": [31, 95], "bert_for_token_classif": [31, 95], "bert_for_zero_shot_classif": [31, 95], "camembert_for_sequence_classif": [31, 95], "camembert_for_token_classif": [31, 95], "deberta_for_sequence_classif": [31, 95], "deberta_for_token_classif": [31, 95], "deberta_for_zero_shot_classif": [31, 95], "distil_bert_for_sequence_classif": [31, 95], "distil_bert_for_token_classif": [31, 95], "distil_bert_for_zero_shot_classif": [31, 95], "longformer_for_sequence_classif": [31, 95], "longformer_for_token_classif": [31, 95], "mpnet_for_sequence_classif": [31, 95], "mpnet_for_token_classif": [31, 95], "multi_classifier_dl": [31, 95], "roberta_for_sequence_classif": [31, 95], "roberta_for_token_classif": [31, 95], "roberta_for_zero_shot_classif": [31, 95], "sentiment_dl": [31, 95], "xlm_roberta_for_sequence_classif": [31, 95], "xlm_roberta_for_token_classif": [31, 95], "xlm_roberta_for_zero_shot_classif": [31, 95], "xlnet_for_sequence_classif": [31, 95], "xlnet_for_token_classif": [31, 95], "longformerforquestionansw": 32, "longform": [32, 33, 34, 80], "longformer_base_base_qa_squad2": 32, "longformerforsequenceclassif": 33, "longformer_base_sequence_classifier_imdb": 33, "4096": [33, 67, 80], "longformerfortokenclassif": 34, "xlnet_base_token_classifier_conll03": [34, 50], "longformer_base_token_classifier_conll03": 34, "mpnetforquestionansw": 35, "mpnet": [35, 36, 81], "mpnet_base_question_answering_squad2": 35, "mpnetforsequenceclassif": 36, "mpnet_sequence_classifier_ukr_messag": 36, "drive": 36, "car": 36, "bu": 36, "arriv": 36, "minut": [36, 38], "pineappl": 36, "pizza": 36, "worst": 36, "transport": 36, "movement": 36, "food": [36, 117, 118], "mpnet_base_sequence_classifier_imdb": 36, "mpnetfortokenclassif": 37, "xlm": [37, 45, 46, 47, 89, 90], "roberta": [37, 39, 40, 41, 42, 45, 46, 47, 57, 71, 73, 80, 81, 82, 83, 89, 90, 114, 130], "mpnet_base_token_classifi": [37, 47], "xlmrobertafortokenclassif": [37, 47], "multiclassifierdl": 38, "bidirect": [38, 68, 69, 77, 91, 130], "gru": 38, "convolut": [38, 54, 58], "machin": [38, 54, 63, 65, 75, 87, 97, 111, 130, 131, 134, 135, 138, 191, 209], "strongli": 38, "relat": [38, 60, 62, 94, 216], "variant": [38, 59, 80, 86], "mai": [38, 65, 66, 117, 133, 134, 137, 157, 210, 211, 212, 215, 216], "instanc": [38, 66, 114, 119, 120, 173, 178, 184, 185, 189], "multiclass": 38, "categor": [38, 195], "precis": [38, 60, 62, 65], "constraint": 38, "mani": [38, 66, 73, 82, 83, 97, 117, 130, 131, 133, 134, 135, 138, 155], "formal": 38, "find": [38, 60, 62, 82, 83, 85, 86, 92, 94, 100, 102, 130, 131], "binari": [38, 164, 179, 191], "bertsentenceembed": [38, 43, 69, 83, 90], "multiclassifi": [38, 191, 207], "001": [38, 59, 111, 112], "10": [38, 52, 60, 97, 102, 104, 113, 117, 134, 139, 143, 191, 202, 210], "44": [38, 75, 87, 123], "shuffleperepoch": 38, "threshold": [38, 43, 75, 87, 97, 99, 111, 114, 141, 155], "ed58abb40640f983": 38, "pn": 38, "newsyou": 38, "toxic": [38, 137], "a1237f726b5f5d89": 38, "dude": 38, "place": [38, 58, 66], "obscen": 38, "insult": 38, "24b0d6c8733c2abe": 38, "thank": [38, 91, 97, 202], "8c4478fb239bcfc0": 38, "gee": 38, "traindataset": [38, 191, 207], "printschema": [38, 156, 158, 164, 167], "root": [38, 52, 60, 62, 94, 156, 158, 164, 167, 198], "setcleanupmod": [38, 158, 167], "shrink": [38, 158, 167], "1e": [38, 191, 207], "setthreshold": [38, 43, 97, 99, 191, 207], "setvalidationsplit": [38, 120, 126], "setverbos": [38, 111, 112, 120], "multiclassifierdl_use_tox": 38, "comment": [38, 97], "jigsaw": 38, "good": [38, 71, 74, 86, 129], "stuff": 38, "wtf": 38, "kind": [38, 97, 102, 104], "crap": 38, "robertaforquestionansw": [39, 114], "roberta_base_qa_squad2": [39, 114], "robertaforsequenceclassif": [40, 42], "roberta_base_sequence_classifier_imdb": 40, "robertafortokenclassif": 41, "roberta_base_token_classifier_conll03": 41, "robertaforzeroshotclassif": 42, "roberta_base_zero_shot_classifier_nli": 42, "sentimentdl": 43, "affect": [43, 152], "subject": [43, 60, 62], "view": 43, "common": [43, 85, 92, 118, 137, 148, 157, 184, 214], "product": 43, "review": [43, 117, 187], "tweet": 43, "interpret": [43, 63, 92], "posit": [43, 73, 74, 81, 89, 90, 91, 97, 110, 117, 128, 129, 139, 151, 155, 170, 191, 207], "final": [43, 63, 80, 82, 83, 89, 90, 99, 112, 134, 141, 211], "otheriws": [43, 99], "neutral": [43, 99], "thresholdlabel": [43, 99], "score": [43, 68, 69, 89, 90, 97, 99, 111, 112, 114, 128, 129, 131], "less": [43, 74, 99, 102, 107, 111, 135, 137, 143], "watch": [43, 129], "32": [43, 67, 77, 202, 210, 216], "setthresholdlabel": [43, 99], "p": [43, 64, 75, 87, 99, 112, 120, 134, 150], "sentimentdl_use_imdb": 43, "imdb": 43, "sentimentdl_use_twitt": 43, "wow": 43, "video": [43, 97], "awesom": 43, "bruh": 43, "damn": 43, "wast": [43, 129], "tapasforquestionansw": 44, "implement": [44, 66, 75, 87, 89, 114, 126, 139, 141, 162, 163, 171, 172, 180, 186, 190], "tapa": 44, "design": [44, 54, 56, 59, 68, 69, 82, 83, 85, 101, 130, 135, 191, 207], "about": [44, 60, 62, 82, 83, 88, 97, 114, 117, 125, 144, 166, 168, 210, 212, 215, 216], "tabular": [44, 169], "tabl": [44, 139, 169], "tri": 44, "share": [44, 97, 212], "its": [44, 58, 73, 74, 80, 91, 97, 123, 128, 130, 135, 136, 137, 146, 191, 200], "table_qa_tapas_base_finetuned_wtq": 44, "document_assembl": [44, 114, 139, 165, 169, 184], "table_json": 44, "document_t": [44, 169], "sentence_detector": [44, 95, 114, 124], "table_assembl": [44, 165, 184], "tableassembl": [44, 169], "stage": [44, 139, 166, 168, 191, 207, 211, 212, 215], "json_data": 44, "monei": [44, 169], "ag": [44, 70, 76, 169], "donald": [44, 169], "trump": [44, 169], "75": [44, 97, 169], "elon": [44, 169], "musk": [44, 169], "55": [44, 113, 169, 202], "AS": [44, 52, 114], "who": [44, 63, 65, 150, 211], "earn": 44, "count": [44, 117, 141], "old": [44, 52, 200], "xlmrobertaforquestionansw": 45, "xlm_roberta_base_qa_squad2": 45, "xlmrobertaforsequenceclassif": [46, 48], "xlm_roberta_base_sequence_classifier_imdb": 46, "xlmrobertaforzeroshotclassif": 48, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 48, "xlmroberta": 48, "xlnetforsequenceclassif": 49, "xlnet": [49, 50, 81, 91], "xlnet_base_sequence_classifier_imdb": 49, "xlnetfortokenclassif": 50, "spanbert_coref": 51, "spanbertcorefmodel": 52, "corefer": 52, "resolut": [52, 56], "spanbert": 52, "identifi": [52, 88, 97, 101, 105, 117, 118, 151, 152, 191, 212], "given": [52, 54, 56, 57, 58, 63, 65, 79, 92, 97, 114, 130, 131, 138, 141, 143, 144, 146, 177, 190, 191], "told": [52, 104], "mari": [52, 69, 83, 90, 126], "he": [52, 63, 65, 73, 104, 134, 150, 202], "borrow": 52, "book": [52, 64, 131, 141, 198], "her": [52, 114], "link": [52, 194], "ontonot": 52, "corefresolut": 52, "spanbert_base_coref": 52, "maxsegmentlength": 52, "textgenr": 52, "genr": 52, "One": [52, 79, 97, 150, 153], "bc": 52, "broadcast": 52, "convers": 52, "bn": [52, 134], "nw": 52, "wire": 52, "pt": [52, 134], "pivot": [52, 85], "testament": 52, "tc": 52, "telephon": 52, "wb": 52, "setmaxsegmentlength": 52, "settextgenr": 52, "clipforzeroshotclassif": 53, "clip": 53, "contrast": [53, 76, 79, 80, 101, 138], "neural": [53, 58, 68, 69, 73, 112, 126, 130, 135], "network": [53, 58, 68, 69, 77, 112, 126], "abil": [53, 85, 97, 130, 131, 136], "hard": [53, 145], "veri": [53, 57, 58, 63, 71, 77, 89, 90, 91, 130, 131, 133, 135, 136, 137, 138, 166, 210, 212, 215, 216], "similar": [53, 67, 79, 85, 86, 97, 99], "gpt": [53, 82, 117, 130, 131], "imageclassifi": [53, 54, 56, 57, 58], "image_assembl": [53, 54, 56, 57, 58, 165, 184], "zero_shot_classifier_clip_vit_base_patch32": 53, "huggingfac": [53, 54, 56, 57, 58, 71, 137], "clipforzeroshotclassificationtestspec": 53, "candidatelabel": 53, "imagedf": [53, 54, 56, 57, 58], "dropinvalid": [53, 54, 56, 57, 58], "imageassembl": [53, 54, 56, 57, 58, 164], "photo": 53, "bird": [53, 57], "cat": [53, 54, 56, 57, 58], "dog": [53, 57], "hen": [53, 54, 56, 57, 58], "hippo": [53, 54, 56, 58], "room": [53, 57], "tractor": [53, 54, 56, 57, 58], "ostrich": [53, 54, 56, 57, 58], "ox": [53, 54, 56, 57, 58], "setcandidatelabel": 53, "pipelinedf": [53, 54, 56, 57, 58], "revers": [53, 54, 56, 57, 58], "split": [53, 54, 56, 57, 58, 63, 65, 125, 126, 135, 148, 150, 151, 155], "image_nam": [53, 54, 56, 57, 58], "palac": [53, 54, 56, 57, 58], "jpeg": [53, 54, 56, 57, 58], "egyptian_cat": [53, 54, 56, 57, 58], "hippopotamu": [53, 54, 56, 57, 58], "junco": [53, 54, 56, 57, 58], "bluetick": [53, 54, 56, 57, 58], "jpg": [53, 54, 56, 57, 58], "chihuahua": [53, 54, 56, 57, 58], "getcandidatelabel": 53, "image_classifier_vit_base_patch16_224": [53, 58], "convnextforimageclassif": 54, "convnet": 54, "convnext": 54, "2020": [54, 97, 102, 104, 126], "zhuang": 54, "liu": [54, 56, 73, 82, 83], "hanzi": 54, "mao": 54, "chao": 54, "yuan": 54, "wu": 54, "christoph": 54, "feichtenhof": 54, "trevor": 54, "darrel": 54, "sain": 54, "xie": 54, "pure": [54, 58, 135], "inspir": [54, 129, 143, 144, 187], "vision": [54, 56, 57, 58], "claim": 54, "outperform": [54, 76, 80, 81, 85, 86, 89, 90, 91, 97, 131, 133, 137], "convnextforimageclassificationtestspec": 54, "roar": 54, "visual": [54, 56, 191], "began": 54, "introduct": 54, "vit": [54, 57, 58], "quickli": [54, 117], "supersed": 54, "vanilla": 54, "hand": [54, 150], "face": [54, 85], "difficulti": 54, "detect": [54, 56, 86, 98, 99, 117, 118, 124, 125, 126], "semant": [54, 56, 70, 77, 79, 85, 86, 139, 155], "hierarch": [54, 56, 75, 87], "swin": [54, 56], "reintroduc": 54, "sever": [54, 217], "practic": [54, 71, 130, 136, 138], "viabl": 54, "backbon": [54, 56, 91], "demonstr": [54, 56, 74, 80, 85, 97, 131, 134, 135], "remark": 54, "wide": [54, 64, 68, 69, 73, 74, 76, 89, 90, 130, 133], "varieti": [54, 80, 81, 89, 90, 216], "howev": [54, 67, 81, 84, 85, 91, 97, 115, 133, 134, 195, 210], "effect": [54, 56, 57, 58, 80, 85, 117, 125, 130, 134, 136, 138], "hybrid": 54, "still": [54, 131, 191], "credit": 54, "superior": 54, "inher": 54, "induct": [54, 74], "bias": [54, 74, 137], "reexamin": 54, "space": [54, 75, 85, 87, 88, 107, 139, 170], "achiev": [54, 73, 76, 79, 80, 81, 82, 83, 89, 90, 91, 112, 130, 131, 133, 135, 138, 166, 215], "gradual": 54, "modern": 54, "resnet": 54, "toward": [54, 131], "discov": [54, 208], "compon": [54, 58, 85, 119, 120, 156, 164, 173, 178, 189, 215], "contribut": [54, 133, 137], "along": [54, 94], "wai": [54, 60, 62, 92, 94, 137, 168, 194], "outcom": 54, "explor": [54, 85, 130, 134, 137, 138], "famili": [54, 64, 76, 133], "dub": [54, 89, 90], "construct": [54, 66, 75, 87, 152, 194, 214], "compet": 54, "favor": 54, "term": [54, 97], "scalabl": 54, "87": [54, 56], "imagenet": [54, 56, 58], "coco": [54, 56], "ade20k": [54, 56], "while": [54, 56, 58, 67, 74, 79, 88, 97, 117, 120, 131, 134, 191, 207, 212], "maintain": 54, "simplic": [54, 130], "effici": [54, 56, 73, 75, 86, 87, 135, 136, 210], "dores": [54, 56, 57, 58], "resiz": [54, 56, 57, 58], "certain": [54, 56, 57, 58, 141], "donorm": [54, 56, 57, 58], "deviat": [54, 56, 57, 58], "featureextractortyp": [54, 56, 57, 58], "architectur": [54, 56, 57, 58, 67, 68, 69, 73, 82, 99, 112, 126, 130, 138], "featur": [54, 56, 57, 58, 60, 75, 85, 87, 97, 107, 111, 120, 136, 139, 191, 214], "imagemean": [54, 56, 57, 58], "imagestd": [54, 56, 57, 58], "resampl": [54, 56, 57, 58], "pil": [54, 56, 57, 58], "nearest": [54, 56, 57, 58, 139], "bilinear": [54, 56, 57, 58], "bicub": [54, 56, 57, 58], "do_res": [54, 56, 57, 58], "tupl": [54, 56, 57, 58, 190], "dorescal": [54, 56, 57], "rescal": [54, 56, 57], "rescalefactor": [54, 56, 57], "factor": [54, 56, 57, 89, 90, 91, 130, 138, 141], "croppct": 54, "percentag": [54, 88, 141, 155], "crop": 54, "tabbi": [54, 56], "river": [54, 56, 58], "hors": [54, 56, 58], "amphibiu": [54, 56, 58], "snowbird": [54, 56, 58], "struthio": [54, 56, 58], "camelu": [54, 56, 58], "thresher": 54, "thrasher": 54, "thresh": 54, "setdorescal": 54, "boolean": 54, "setrescalefactor": 54, "255": 54, "setcroppct": 54, "determin": [54, 66, 89], "smaller": [54, 65, 74, 75, 87], "224": 54, "256": 54, "specifi": [54, 66, 113, 114, 117, 126, 197, 198], "edg": [54, 74, 94], "afterward": 54, "image_classifier_convnext_tiny_224_loc": 54, "clip_for_zero_shot_classif": 55, "convnext_for_image_classif": 55, "swin_for_image_classif": 55, "vision_encoder_decoder_for_image_capt": 55, "vit_for_image_classif": 55, "swinforimageclassif": 56, "swinimageclassif": 56, "shift": 56, "window": [56, 57, 75, 80, 87, 97, 112, 136, 141], "ze": 56, "yutong": 56, "lin": 56, "yue": 56, "cao": 56, "han": 56, "hu": [56, 134], "yixuan": 56, "zheng": 56, "zhang": 56, "stephen": 56, "bain": 56, "guo": 56, "whose": [56, 66], "scheme": [56, 82, 130], "bring": [56, 134, 211], "greater": [56, 97, 117], "attent": [56, 58, 73, 80, 117, 133, 136], "non": [56, 134, 137, 152, 155], "overlap": [56, 63, 65, 101, 106], "cross": [56, 89, 90, 113], "connect": 56, "image_classifier_swin_base_patch4_window7_224": 56, "swinforimageclassificationtest": 56, "present": [56, 67, 76, 77, 80, 82, 83, 86, 89, 90, 94, 117, 120, 126, 130, 135, 139], "call": [56, 66, 68, 69, 74, 76, 85, 97, 117, 131, 133, 137, 190, 195, 197, 211, 217], "purpos": [56, 74, 76, 126], "adapt": 56, "aris": 56, "domain": [56, 79, 85, 97, 131], "variat": 56, "high": [56, 85, 86, 89, 90, 130, 134, 135], "variou": [56, 85, 91, 136, 137, 205], "complex": [56, 77, 85, 86, 97, 136, 143, 144], "respect": [56, 66, 73, 88, 111, 112, 200], "These": [56, 67, 82, 83, 85, 91, 97, 111, 131, 194, 209], "broad": [56, 63, 131], "rang": [56, 68, 69, 73, 74, 76, 79, 89, 90, 130, 133, 137], "1k": 56, "dens": [56, 68, 69, 70, 134, 139], "box": [56, 134], "ap": 56, "51": [56, 158, 167, 200], "53": [56, 101, 106], "miou": 56, "val": 56, "Its": [56, 62, 114, 130], "surpass": [56, 73, 136], "previou": [56, 79, 81, 89, 90, 131, 211], "margin": [56, 81, 91], "prove": 56, "benefici": [56, 97], "mlp": 56, "visionencoderdecoderforimagecapt": 57, "visionencoderdecod": 57, "caption": 57, "auto": [57, 130, 147], "beit": 57, "deit": 57, "gpt2": [57, 131], "image_captioning_vit_gpt2": 57, "visionencoderdecodertestspec": 57, "nreturnsequ": 57, "computation": [57, 77, 82, 83, 91, 130, 131, 133, 135, 136, 137, 138], "expens": [57, 77, 82, 83, 91, 128, 130, 131, 133, 135, 136, 137, 138, 143], "especi": [57, 130, 131, 133, 135, 136, 137, 138], "larger": [57, 71, 74, 82, 83, 130, 131, 133, 135, 136, 137, 138, 139], "acceler": [57, 77, 91, 130, 131, 133, 135, 136, 137, 138, 184], "gpu": [57, 67, 130, 131, 133, 135, 136, 137, 138, 184], "imagecapt": 57, "setbeams": [57, 130, 134, 178], "setdosampl": [57, 130, 131, 133, 134, 135, 136, 137, 138, 178], "fill": [57, 130], "furnitur": 57, "lai": 57, "couch": 57, "anoth": [57, 212], "brown": 57, "bear": 57, "bodi": 57, "water": 57, "flock": 57, "chicken": 57, "stand": [57, 68, 69, 136], "lush": 57, "green": 57, "field": [57, 75, 87, 88, 92, 106, 137], "small": [57, 58, 64, 67, 71, 74, 75, 87, 100, 123, 137, 166, 200, 215], "wet": 57, "ground": 57, "wooden": 57, "floor": 57, "wear": 57, "blue": 57, "sweater": 57, "man": [57, 131, 133], "cow": 57, "vitforimageclassif": 58, "altern": [58, 97, 117, 128, 141, 143, 144, 166, 169, 211, 216], "vitimageclassificationtestspec": 58, "becom": [58, 67, 74, 97], "de": [58, 71, 97, 99, 134, 135], "facto": [58, 97], "remain": [58, 64, 67, 74, 97], "conjunct": 58, "replac": [58, 64, 73, 80, 99, 100, 113, 126, 130, 143, 144, 177, 211], "overal": [58, 88, 91], "structur": [58, 114, 170, 210], "relianc": [58, 85], "cnn": [58, 99, 112, 126], "necessari": [58, 66, 74, 207, 214], "directli": [58, 134, 166, 191, 195, 207], "patch": 58, "mid": 58, "cifar": 58, "vtab": 58, "etc": [58, 72, 76, 79, 81, 159, 170, 207], "attain": 58, "excel": [58, 91, 136], "substanti": [58, 68, 69], "fewer": [58, 67, 79, 139], "worth": 58, "16x16": 58, "egyptian": 58, "date2chunk": 59, "datematch": [59, 102], "multidatematch": [59, 102, 104], "entitynam": 59, "date_chunk": 59, "omicron": 59, "covid": 59, "world": [59, 63, 64, 65, 85, 136, 137, 148, 191, 202, 207], "health": 59, "organ": [59, 97, 135], "nov": [59, 102, 104, 200], "26": [59, 110, 166, 183, 194, 202], "2021": [59, 102, 104], "118": [59, 169], "121": 59, "01": [59, 102, 104, 105], "setentitynam": 59, "dependencypars": [60, 62, 94], "dependencyparserapproach": [60, 198, 217], "unlabel": [60, 68, 69, 130, 131, 138], "grammat": [60, 62], "dependencyparsermodel": [60, 62, 94], "relationship": [60, 62, 86, 94], "tell": [60, 62, 97, 183], "verb": [60, 62, 198], "modifi": [60, 62, 82, 83, 110, 117, 126], "describ": [60, 62, 94, 97, 135], "particular": [60, 62, 97, 195, 211], "treebank": 60, "penn": 60, "setdependencytreebank": 60, "conll": [60, 62, 111, 112, 184, 198, 199, 214], "u": [60, 62, 73, 74, 97, 104, 110, 111, 112, 166, 183, 194, 198, 209, 212, 217], "setconllu": [60, 62], "dependencytreebank": 60, "conllu": [60, 62, 100, 184, 199, 214], "numberofiter": [60, 62], "converg": [60, 62, 123, 155], "better": [60, 62, 67, 73, 81, 91, 97, 111, 123, 125, 126, 129, 130, 133, 155], "typeddependencyparserapproach": [60, 62], "postagg": [60, 62, 94, 111, 123], "dependency_treebank": 60, "emptydataset": [60, 62], "tree": [60, 94], "bank": 60, "setnumberofiter": [60, 62], "read_a": [60, 62, 92, 100, 101, 105, 106, 111, 115, 120, 128, 143, 144, 152, 176, 182, 184, 197, 198], "reada": [60, 62, 88, 92, 100, 101, 105, 106, 111, 115, 120, 128, 143, 144, 148, 152, 179, 182, 197, 198], "dep": 60, "dependency_conllu": [60, 94], "perceptron": [60, 95, 122], "typeddependencyparsermdoel": 60, "union": [60, 62], "worker": [60, 62], "turner": [60, 62], "newal": [60, 62], "sai": [60, 62, 97, 152], "disappoint": [60, 62], "talk": [60, 62, 117], "stricken": [60, 62], "parent": [60, 62], "firm": [60, 62], "feder": [60, 62], "mogul": [60, 62], "dependency_pars": [61, 95, 195, 216], "typed_dependency_pars": [61, 95], "typeddependencypars": [62, 94], "conll2009": 62, "typeddependencyparsermodel": [62, 94], "beforehand": 62, "2009": 62, "setconll2009": 62, "dependency_typ": [62, 94], "train_smal": 62, "txt": [62, 75, 87, 88, 100, 101, 105, 106, 123, 126, 128, 141, 143, 144, 148, 152, 200, 201, 217], "typdep": 62, "dependency_typed_conllu": [62, 94], "amod": 62, "flat": [62, 94, 161], "nsubj": [62, 94, 161, 198], "parataxi": 62, "documentnorm": [63, 64, 65], "documentcharactertextsplitt": 63, "roughli": 63, "separ": [63, 65, 74, 82, 105, 107, 125, 126, 143, 152, 155, 160, 183, 197, 209], "subtext": 63, "perfect": [63, 65], "reason": [63, 65, 117, 137], "observ": [63, 65, 86], "seen": [63, 65, 130], "addition": [63, 65, 91, 112, 123, 136, 158, 167, 194], "custom": [63, 88, 111, 112, 125, 126, 152, 184, 191], "setsplitpattern": [63, 152], "regex": [63, 64, 92, 102, 105, 115, 141, 143, 144, 151, 152, 155], "setpatternsareregex": 63, "setkeepsepar": 63, "trim": [63, 65], "whitespac": [63, 65, 151, 155, 157], "settrimwhitespac": [63, 65, 151], "individu": [63, 65, 66, 97, 141], "setexplodesplit": [63, 65], "documentcharactertextsplittertest": 63, "chunksiz": 63, "chunkoverlap": 63, "splitpattern": [63, 152], "decreas": [63, 117, 139], "prioriti": [63, 143, 152], "patternsareregex": 63, "keepsepar": 63, "explodesplit": [63, 65], "trimwhitespac": [63, 65, 151], "brioni": 63, "lodg": 63, "serpentin": 63, "aven": 63, "19798": 63, "39395": 63, "19597": 63, "did": [63, 97, 136], "woman": 63, "think": 63, "39371": 63, "59242": 63, "19871": 63, "But": [63, 65, 70, 76], "said": [63, 65], "million": [63, 97, 113, 131], "red": 63, "men": 63, "59166": 63, "77833": 63, "18667": 63, "friend": 63, "enthusiast": 63, "musician": 63, "being": [63, 74, 112, 117, 120, 130, 133, 135, 138, 139], "himself": 63, "capab": 63, "77835": 63, "97769": 63, "19934": 63, "And": 63, "yet": [63, 195], "convinc": 63, "come": [63, 97, 110, 117, 133], "li": 63, "97771": 63, "117248": 63, "19477": 63, "she": [63, 150], "had": [63, 97, 117], "slate": 63, "colour": 63, "brim": 63, "straw": 63, "hat": 63, "feather": 63, "117250": 63, "137242": 63, "19992": 63, "That": [63, 97, 150, 191, 207, 212], "littl": [63, 126, 216], "paradox": 63, "profoundli": 63, "singulari": 63, "137244": 63, "157171": 63, "19927": 63, "setchunks": 63, "setchunkoverlap": 63, "raw": [64, 131, 150, 152, 155, 210, 212], "scrape": 64, "xml": 64, "remov": [64, 82, 83, 115, 129, 151, 159, 160, 161], "dirti": [64, 115], "want": [64, 65, 92, 113, 195, 212], "polici": 64, "__": [64, 130, 159, 160], "action": 64, "clean": [64, 115, 130, 138, 170, 212], "lowercas": [64, 115, 151, 155, 157], "pretty_al": 64, "utf": 64, "cleanuppattern": [64, 115], "normalizeddocu": 64, "setact": 64, "setpattern": [64, 151, 155], "setreplac": 64, "setpolici": 64, "setlowercas": [64, 115, 157, 170], "div": 64, "theworldsgreatest": 64, "right": [64, 68, 69, 130, 155], "hide": 64, "toptext": 64, "style": [64, 99, 138], "font": 64, "sego": 64, "ui": 64, "arial": 64, "san": [64, 97], "serif": 64, "largest": [64, 97, 131], "develop": [64, 97, 133, 135, 137, 188], "site": [64, 97], "h1": 64, "300": 64, "160": 64, "lorem": [64, 101, 106], "ipsum": [64, 101, 106], "print": [64, 66, 184, 195], "typeset": 64, "industri": 64, "been": [64, 71, 131, 133, 137, 153, 170, 195], "1500": [64, 134], "unknown": [64, 65, 99], "printer": 64, "took": 64, "gallei": 64, "scrambl": 64, "specimen": 64, "surviv": 64, "five": [64, 113], "centuri": [64, 136, 155], "leap": 64, "electron": 64, "essenti": [64, 131], "unchang": 64, "popularis": 64, "1960": 64, "letraset": 64, "passag": [64, 70, 76], "recent": [64, 68, 69, 73, 82, 83, 97, 117, 130], "desktop": 64, "publish": [64, 82, 83], "softwar": 64, "aldu": 64, "pagemak": 64, "setencod": 64, "documenttokensplitt": 65, "measur": [65, 74, 82, 83, 130, 191], "futur": [65, 126, 130, 138], "techniqu": [65, 67, 73, 130, 131, 138, 139], "documenttokensplittertest": 65, "numtoken": 65, "tokenoverlap": 65, "immens": 65, "faculti": 65, "extraordinari": 65, "power": [65, 68, 69, 130, 138], "2950": 65, "5707": 65, "2757": 65, "chang": [65, 66, 79, 187], "cloth": 65, "imagin": 65, "deduc": 65, "As": [65, 67, 68, 69, 70, 74, 76, 97, 117], "5659": 65, "8483": 65, "2824": 65, "quarter": 65, "receiv": [65, 200, 217], "Be": 65, "chamber": 65, "8427": 65, "11241": 65, "2814": 65, "piti": 65, "miss": [65, 102, 104, 157], "client": 65, "never": [65, 129, 211], "mind": 65, "him": [65, 104], "11188": 65, "13970": 65, "2782": 65, "person": [65, 92, 198], "emploi": [65, 91], "me": [65, 104], "wish": 65, "agent": 65, "conf": 65, "13918": 65, "16898": 65, "2980": 65, "letter": [65, 115, 131, 133, 141, 200, 217], "secret": 65, "marriag": 65, "16836": 65, "19744": 65, "2908": 65, "seven": 65, "hundr": [65, 89, 90], "holm": [65, 141], "scribbl": 65, "receipt": 65, "shee": 65, "19683": 65, "22551": 65, "2868": 65, "setnumtoken": 65, "settokenoverlap": 65, "documenttokensplittertestspec": 66, "methodnam": 66, "runtest": 66, "By": [66, 85, 128, 130, 138, 146, 151, 159, 184, 191, 207], "fixtur": 66, "testcas": 66, "subclass": [66, 139, 172, 186, 190], "constructor": 66, "argument": [66, 195], "execut": [66, 139, 166, 211, 215], "author": 66, "deconstruct": 66, "overrid": [66, 190], "setup": 66, "teardown": 66, "__init__": 66, "must": [66, 75, 87, 100, 101, 105, 106, 117, 120, 128, 129, 143, 144, 157, 183, 184, 191, 197], "alwai": [66, 97, 117, 137, 138], "signatur": 66, "attribut": [66, 191], "failureexcept": 66, "except": [66, 71, 107, 112, 152], "rais": [66, 82, 83, 97, 107, 112, 191], "assert": 66, "fail": [66, 157], "deem": 66, "error": [66, 141], "longmessag": 66, "long": [66, 69, 80, 85, 91, 136], "messag": [66, 209], "repr": 66, "failur": 66, "maxdiff": 66, "diff": 66, "difflib": 66, "hook": 66, "exercis": 66, "lite": 67, "googl": [67, 68, 69, 73, 75, 77, 82, 83, 86, 87, 97, 138, 198], "research": [67, 68, 69, 73, 75, 87, 135, 137, 138], "toyota": 67, "technolog": 67, "institut": 67, "chicago": 67, "offici": [67, 97, 110, 111, 112, 166, 183, 194, 208], "tf": [67, 86], "wrapper": [67, 187], "port": 67, "properti": [67, 162, 163, 173, 176, 184], "albert_base_uncas": 67, "albert_bas": 67, "768": [67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 90, 91], "emb": 67, "dim": 67, "12m": 67, "albert_large_uncas": 67, "albert_larg": 67, "1024": [67, 77, 80, 91], "24": [67, 91, 101, 106, 110, 141, 166, 183, 194, 210], "16": [67, 91, 113, 200, 210], "18m": 67, "albert_xlarge_uncas": 67, "albert_xlarg": 67, "2048": 67, "60m": 67, "albert_xxlarge_uncas": 67, "albert_xxlarg": 67, "235m": 67, "sentencepiec": [67, 73, 86], "everi": [67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 82, 83, 85, 89, 90, 91, 112, 129, 135, 141, 158, 167, 168, 212], "dimens": [67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 178], "repeat": [67, 117], "footprint": 67, "cost": [67, 136, 141, 143], "FOR": 67, "http": [67, 71, 73, 75, 77, 79, 86, 87, 117, 118, 130, 137, 155, 208], "tfhub": [67, 77, 86], "q": 67, "increas": [67, 70, 76, 88, 97, 117, 130, 131, 134, 139, 143], "downstream": [67, 71, 73, 77, 79, 80, 91, 130, 131, 138], "some": [67, 69, 89, 97, 112, 126, 131, 168, 191, 202, 210, 211, 215, 216], "point": [67, 68, 69, 125, 126, 158, 167, 197], "harder": 67, "tpu": 67, "consumpt": [67, 86, 88], "speed": [67, 111, 135, 136], "devlin": [67, 82, 83], "et": [67, 82, 83, 99, 134], "al": [67, 82, 83], "2019": [67, 71, 73, 82, 83, 89, 90, 130], "comprehens": [67, 85, 130, 131, 136], "empir": [67, 68, 69, 89, 90, 91], "evid": 67, "lead": [67, 71, 85, 89, 90], "focus": [67, 97, 117], "inter": 67, "coher": [67, 131], "establish": 67, "glue": [67, 68, 69, 74, 81, 82, 83, 89, 90, 130], "race": [67, 73, 82, 83], "embeddingsfinish": [67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 159], "finished_embed": [67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "setoutputasvector": [67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 159], "setcleanannot": [67, 73, 74, 77, 80, 82, 84, 86, 88, 89, 91, 159, 160, 161], "80": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105, 159, 170], "1342473030090332": [67, 73], "3855540752410889": [67, 73], "9818322062492371": [67, 73], "784737348556518": [67, 73], "847029983997345": [67, 73], "047153353691101": [67, 73], "1520637571811676": [67, 73], "6245765686035156": [67, 73], "009860038757324219": [67, 73], "13450059294700623": [67, 73], "707749128341675": [67, 73], "2916892766952": [67, 73], "04192575812339783": [67, 73], "5764210224151611": [67, 73], "3196685314178467": [67, 73], "527840495109": [67, 73], "15583214163780212": [67, 73], "1614152491092682": [67, 73], "28423872590065": [67, 73], "135491415858268": [67, 73], "bertembed": [68, 72, 79, 84, 112, 159], "small_bert_l2_768": 68, "understand": [68, 69, 74, 81, 89, 91, 97, 130, 137, 138, 155, 210], "introduc": [68, 69, 74, 77, 79, 80, 81, 85, 130, 133, 136, 138], "unlik": [68, 69, 79, 89, 97, 150], "jointli": [68, 69], "condit": [68, 69, 130, 131, 133, 134, 135, 136, 137, 138, 178], "both": [68, 69, 76, 77, 86, 94, 117, 130, 211, 212], "left": [68, 69, 130, 155], "just": [68, 69, 74, 82, 107, 112], "modif": [68, 69], "conceptu": [68, 69], "obtain": [68, 69, 71, 76, 86], "eleven": [68, 69], "push": [68, 69], "absolut": [68, 69], "multinli": [68, 69], "86": [68, 69, 73], "v1": [68, 69], "f1": [68, 69, 89, 90, 112, 131], "93": [68, 69], "83": [68, 69, 73, 200, 201, 217], "small_bert_l2_128": 68, "3497989177703857": [68, 79], "480538547039032": [68, 79], "3238905668258667": [68, 79], "612930893898010": [68, 79], "1357314586639404": 68, "32984697818756104": 68, "6032363176345825": 68, "6791689395904": 68, "8244884014129639": 68, "27088963985443115": 68, "059438943862915": 68, "9817547798156": 68, "1648050546646118": 68, "4725411534309387": 68, "5938255786895752": 68, "5780693292617": 68, "9125322699546814": 68, "4563939869403839": 68, "3975459933280945": 68, "81611204147338": 68, "use_openvino": [68, 69, 76, 82, 89, 133, 134, 136, 137], "openvino": [68, 69, 76, 82, 89], "backend": [68, 69, 76, 82, 89], "sentence_bert_embed": 69, "sent_small_bert_l2_768": 69, "islong": 69, "sent_small_bert_l2_128": 69, "orang": [69, 83, 90], "8951074481010437": [69, 83, 90], "13753940165042877": [69, 83, 90], "3108254075050354": [69, 83, 90], "65693199634552": [69, 83, 90], "6180210709571838": [69, 83, 90], "12179657071828842": [69, 83, 90], "191165953874588": [69, 83, 90], "4497021436691": [69, 83, 90], "822715163230896": [69, 83, 90], "7568016648292542": [69, 83, 90], "1165061742067337": [69, 83, 90], "59048593044281": [69, 83, 90], "setislong": 69, "bgeembed": 70, "bge": 70, "baai": 70, "low": [70, 89, 90, 141], "dimension": [70, 86], "bge_bas": 70, "queri": [70, 76, 133, 136, 139, 208], "protein": [70, 76], "femal": [70, 76], "eat": [70, 76], "guidelin": [70, 76], "cdc": [70, 76], "women": [70, 76], "70": [70, 76, 79, 133, 137], "46": [70, 76, 202], "gram": [70, 75, 76, 87, 97, 107, 130, 131, 133, 134, 135, 136, 137, 138, 178], "dai": [70, 76, 102, 104, 141], "chart": [70, 76, 191, 207], "ll": [70, 76, 155], "marathon": [70, 76], "below": [70, 76, 94, 216], "0190285e": [70, 76], "005974853": [70, 76], "072875895": [70, 76], "007944068": [70, 76], "026059335": [70, 76], "0080": [70, 76], "050514214": [70, 76], "010061974": [70, 76], "04340176": [70, 76], "020937217": [70, 76], "05170225": [70, 76], "01157857": [70, 76], "camembertembed": 71, "tasti": 71, "french": [71, 97, 134, 135, 146], "loui": 71, "martin": 71, "muller": 71, "pedro": 71, "javier": 71, "ortiz": 71, "su\u00e1rez": 71, "yoann": 71, "dupont": 71, "laurent": 71, "romari": 71, "\u00e9ric": 71, "villemont": 71, "la": [71, 117, 135], "clergeri": 71, "djam\u00e9": 71, "seddah": 71, "beno\u00eet": 71, "sagot": 71, "facebook": [71, 73, 89, 90, 130], "138gb": 71, "camembert_bas": 71, "camembertembeddingstestspec": 71, "co": [71, 97, 137], "ubiquit": 71, "despit": [71, 130], "concaten": [71, 155], "investig": [71, 74, 86], "feasibl": 71, "monolingu": [71, 89, 90], "crawl": [71, 130, 138], "prefer": [71, 94, 161], "wikipedia": [71, 99, 131], "surprisingli": [71, 86], "4gb": 71, "130": 71, "gb": 71, "reach": [71, 97, 131, 155], "four": [71, 126, 153, 155], "un": [71, 99], "08442357927560806": 71, "12863239645957947": 71, "03835778683423996": 71, "200479581952": 71, "048462312668561935": 71, "12637358903884888": 71, "27429091930389404": 71, "07516729831": 71, "02690504491329193": 71, "12104076147079468": 71, "012526623904705048": 71, "031543646007": 71, "05877285450696945": 71, "08773420006036758": 71, "06381352990865707": 71, "122621834278": 71, "chunkembed": [72, 159], "wordembed": [72, 84, 88, 112, 159, 184], "chunker": [72, 95, 184], "ngramgener": [72, 107], "nerconvert": [72, 110, 111, 112, 191, 207], "poolingstrategi": [72, 84], "aggreg": [72, 84], "sum": [72, 77, 84], "skipoov": 72, "discard": [72, 114], "oov": 72, "setn": [72, 107], "wordembeddingsmodel": [72, 84, 88, 94, 111, 112, 113, 159], "setpoolingstrategi": [72, 84, 85], "55661": 72, "42829502": 72, "86661": 72, "409785": 72, "06316501": 72, "120775": 72, "0732005": 72, "40674996": 72, "22938299": 72, "50597": 72, "288195": 72, "555655": 72, "465145": 72, "140118": 72, "17417": 72, "095253006": 72, "0530925": 72, "218465": 72, "714395": 72, "79860497": 72, "0129999": 72, "139705": 72, "177955": 72, "1887775": 72, "45545": 72, "20030999": 72, "461557": 72, "07891501": 72, "strategi": [72, 84, 85, 102, 105, 125, 141, 177], "setskipoov": 72, "debertaembed": 73, "enhanc": [73, 129, 130, 136, 137], "disentangl": 73, "pengcheng": 73, "xiaodong": 73, "jianfeng": 73, "gao": 73, "weizhu": 73, "chen": [73, 82, 83], "2018": [73, 82, 83], "half": [73, 97], "deberta_v3_bas": 73, "microsoft": [73, 76, 81, 135, 137], "www": 73, "blog": 73, "superglu": 73, "progress": [73, 126, 151], "significantli": [73, 77, 82, 83, 89, 90, 97], "novel": [73, 81, 85, 91, 97, 130], "mechan": [73, 80], "weight": [73, 77, 97, 111, 113, 141], "among": [73, 81, 137], "matric": 73, "second": [73, 77, 105, 125, 146, 151, 211], "mnli": 73, "9": [73, 89, 90, 107, 118, 134, 210, 215, 216], "90": 73, "91": 73, "88": 73, "made": [73, 86, 207], "publicli": [73, 89, 90], "distilbertembed": 74, "fast": [74, 129, 133, 135, 166, 215], "cheap": 74, "distil": 74, "40": [74, 76, 113, 133, 135], "uncas": 74, "preserv": [74, 110, 151, 170], "95": 74, "distilbert_base_cas": 74, "doesn": [74, 82], "token_type_id": [74, 82], "indic": [74, 82, 151, 155], "belong": [74, 82], "sep_token": [74, 82], "sep": 74, "position_id": 74, "ad": [74, 77, 117, 141], "though": [74, 97], "know": [74, 135, 168], "cheaper": 74, "lighter": 74, "preval": 74, "oper": [74, 80, 141, 150, 210], "constrain": 74, "budget": 74, "counterpart": 74, "leverag": [74, 81, 191, 207], "reduc": [74, 81, 136, 137, 143, 144, 170], "retain": 74, "97": [74, 102, 104, 155], "tripl": [74, 94], "cosin": [74, 85], "distanc": [74, 139, 141, 143, 144], "devic": 74, "proof": 74, "concept": [74, 212], "experi": [74, 85, 91, 117, 130, 136, 191, 208], "1127224713563919": 74, "1982710212469101": 74, "5360898375511169": 74, "272536993026733": 74, "35534414649009705": 74, "13215228915214539": 74, "40981462597846985": 74, "14036104083061": 74, "328085333108902": 74, "06269335001707077": 74, "017595693469047546": 74, "024373905733": 74, "15617232024669647": 74, "2967822253704071": 74, "22324979305267334": 74, "04568954557180": 74, "45411425828933716": 74, "01173491682857275": 74, "190129816532135": 74, "1178255230188369": 74, "doc2vecapproach": 75, "word2vec": [75, 78, 95], "corpu": [75, 77, 87, 97, 100, 123, 130, 138, 141, 200, 217], "algorithm": [75, 87, 97, 111, 129, 141, 143, 144], "skip": [75, 87, 94, 141], "doc2vecmodel": 75, "vectors": [75, 87], "windows": [75, 87, 97], "numpartit": [75, 87], "partit": [75, 87, 197], "mincount": [75, 87, 141], "appear": [75, 87, 117, 141], "divid": [75, 87], "1000": [75, 87, 94, 111], "stepsiz": [75, 87], "optim": [75, 82, 83, 85, 87, 112, 114, 126, 133, 137], "025": [75, 87], "maxit": [75, 87], "estim": [75, 87, 147, 162, 171, 180, 190, 211], "distribut": [75, 87], "composition": [75, 87], "sherlockholm": [75, 87, 141, 217], "setvectors": [75, 87], "setwindows": [75, 87, 97], "setsteps": [75, 87], "initi": [75, 87, 141, 151, 168, 184, 197, 198, 200, 201, 207], "setnumpartit": [75, 87], "setmaxit": [75, 87], "numiter": [75, 87], "equal": [75, 87], "setse": [75, 87], "setmincount": [75, 87, 141], "doc2vec_gigaword_300": 75, "06222493574023247": [75, 87], "011579325422644615": [75, 87], "009919632226228714": [75, 87], "109361454844": [75, 87], "doc2vec_wiki": 75, "getvector": [75, 87], "e5embed": [76, 81, 139], "e5": 76, "weakli": 76, "tailor": [76, 79], "e5_smal": 76, "unilm": 76, "manner": [76, 97], "signal": [76, 77], "curat": 76, "ccpair": 76, "readili": 76, "strong": [76, 89, 90, 137], "conduct": [76, 85], "extens": [76, 85, 136, 187], "56": [76, 200], "beir": 76, "mteb": 76, "bm25": 76, "baselin": [76, 86, 131], "beat": 76, "exist": [76, 77, 85, 117, 134, 141, 159, 161, 191], "elmoembed": 77, "elmo": 77, "billion": [77, 131, 133, 136, 137], "lookup": [77, 88, 91, 101, 143, 144], "setpoolinglay": 77, "word_emb": 77, "shape": 77, "batch_siz": 77, "max_length": 77, "lstm_outputs1": 77, "lstm": [77, 112], "lstm_outputs2": 77, "trainabl": 77, "tensor": 77, "poolinglay": 77, "contextu": [77, 130, 141], "characterist": 77, "syntax": 77, "vari": [77, 117], "across": [77, 131, 133, 136], "linguist": [77, 155], "polysemi": 77, "intern": [77, 119, 120, 138, 141, 152, 155, 169, 173, 178, 184], "bilm": 77, "six": [77, 143, 144], "textual": [77, 79, 85, 136], "entail": 77, "expos": 77, "crucial": [77, 85], "mix": [77, 139, 172, 190], "semi": 77, "662458181381226e": 77, "2541114091873169": 77, "6275503039360046": 77, "5787073969841": 77, "19154725968837738": 77, "22998669743537903": 77, "2894386649131775": 77, "21524395048618": 77, "10400570929050446": 77, "12288510054349899": 77, "07056470215320587": 77, "246389418840": 77, "49932169914245605": 77, "12706467509269714": 77, "30969417095184326": 77, "2643227577209": 77, "8871506452560425": 77, "20039963722229004": 77, "0601330995559692": 77, "0348707810044": 77, "albert_embed": [78, 95], "bert_embed": [78, 95], "bert_sentence_embed": [78, 95], "bge_embed": [78, 95], "camembert_embed": [78, 95], "chunk_embed": [78, 95], "deberta_embed": [78, 95], "distil_bert_embed": [78, 95], "doc2vec": [78, 95], "e5_embed": [78, 95], "elmo_embed": [78, 95], "instructor_embed": [78, 95], "longformer_embed": [78, 95], "mpnet_embed": [78, 95], "roberta_embed": [78, 95], "roberta_sentence_embed": [78, 95], "uae_embed": [78, 95], "universal_sentence_encod": [78, 95], "xlm_roberta_embed": [78, 95], "xlm_roberta_sentence_embed": [78, 95], "xlnet_embed": [78, 95], "instructorembed": 79, "instructor": 79, "finetun": [79, 80, 91], "scienc": [79, 97, 208], "financ": 79, "sota": [79, 85, 91], "divers": [79, 86, 130, 131, 138, 208], "setinstruct": 79, "medicin": 79, "instructor_bas": 79, "summar": [79, 80, 97, 130, 131, 135, 138, 178], "embedd": 79, "hkunlp": 79, "togeth": 79, "explain": [79, 191, 207, 214, 216], "special": [79, 141, 155, 185, 212], "330": 79, "mixtur": 79, "66": [79, 113], "unseen": 79, "magnitud": [79, 143, 144], "suggest": [79, 131], "mitig": [79, 85], "url": 79, "io": 79, "dynam": [79, 135], "scalar": 79, "degre": 79, "freedom": 79, "horava": 79, "lifshitz": 79, "graviti": 79, "longformerembed": 80, "iz": 80, "beltagi": 80, "matthew": 80, "arman": 80, "cohan": 80, "checkpoint": 80, "mlm": [80, 81], "096": 80, "longformer_base_4096": 80, "unabl": 80, "quadrat": 80, "linearli": 80, "easi": 80, "thousand": [80, 134], "drop": [80, 146], "motiv": 80, "global": 80, "text8": 80, "enwik8": 80, "wikihop": 80, "triviaqa": 80, "led": [80, 82, 83, 97], "arxiv": [80, 130], "found": [80, 88, 97, 143, 150, 157, 197, 214], "18792399764060974": [80, 82], "14591649174690247": [80, 82], "20547787845134735": [80, 82], "1468472778797": [80, 82], "22845706343650818": [80, 82], "18073144555091858": [80, 82], "09725798666477203": [80, 82], "0417917296290": [80, 82], "07037967443466187": [80, 82], "14801117777824402": [80, 82], "03603338822722435": [80, 82], "17893412709": [80, 82], "08734266459941864": [80, 82], "2486150562763214": [80, 82], "009067727252840996": [80, 82], "24408400058": [80, 82], "22409197688102722": [80, 82], "4312366545200348": [80, 82], "1401449590921402": [80, 82], "356410235166549": [80, 82], "mpnetembed": 81, "adopt": [81, 136], "permut": [81, 91], "inherit": [81, 139, 172, 190], "advantag": [81, 168], "all_mpnet_base_v2": 81, "neglect": [81, 91], "plm": 81, "doe": [81, 89, 97, 110, 134, 135, 166, 168, 195, 212, 215, 216], "full": [81, 91, 211], "thu": [81, 97], "suffer": [81, 91], "discrep": [81, 91], "avoid": [81, 128], "auxiliari": 81, "160gb": 81, "corpora": [81, 97, 101], "down": [81, 112, 211, 212], "stream": [81, 117], "experiment": [81, 97], "022502584": 81, "078291744": 81, "023030775": 81, "0051000593": 81, "080340415": 81, "039": 81, "041702367": 81, "0010974605": 81, "015534201": 81, "07092203": 81, "0017729357": 81, "04661": 81, "robertaembed": [82, 89], "robustli": [82, 83, 114], "yinhan": [82, 83], "myle": [82, 83, 89, 90], "ott": [82, 83, 89, 90], "naman": [82, 83, 89, 90], "goyal": [82, 83, 89, 90], "jingfei": [82, 83], "du": [82, 83, 99], "mandar": [82, 83], "joshi": [82, 83], "danqi": [82, 83], "omer": [82, 83], "levi": [82, 83], "mike": [82, 83], "lewi": [82, 83], "luke": [82, 83, 89, 90], "zettlemoy": [82, 83, 89, 90], "veselin": [82, 83, 89, 90], "stoyanov": [82, 83, 89, 90], "hyperparamet": [82, 83], "mini": [82, 83], "roberta_bas": 82, "bpe": 82, "signific": [82, 83, 89, 90, 97, 100, 133], "gain": [82, 83, 89, 90, 130, 134], "care": [82, 83, 152], "comparison": [82, 83, 86, 146], "privat": [82, 83, 185], "choic": [82, 83, 105, 136], "impact": [82, 83], "replic": [82, 83, 130], "carefulli": [82, 83, 117], "undertrain": [82, 83], "exce": [82, 83, 117], "highlight": [82, 83], "previous": [82, 83, 97], "overlook": [82, 83], "report": [82, 83, 86, 130, 191, 207], "robertasentenceembed": 83, "sent_roberta_bas": 83, "embeddingssent": 84, "22093398869037628": 84, "25130119919776917": 84, "41810303926467896": 84, "380883991718": 84, "uaeembed": 85, "uae": 85, "llm": [85, 133, 137], "satur": 85, "uae_large_v1": 85, "st": 85, "vanish": 85, "gradient": [85, 111], "zone": 85, "core": 85, "idea": [85, 91], "advers": 85, "imped": 85, "hinder": 85, "short": 85, "furthermor": [85, 91], "examin": 85, "scenario": [85, 129], "were": [85, 88, 112, 191, 207], "hello": [85, 101, 106, 148, 202], "moon": 85, "50387806": 85, "5861606": 85, "35129607": 85, "76046336": 85, "32446072": 85, "117674336": 85, "6660665": 85, "961762": 85, "24854276": 85, "1018044": 85, "6569202": 85, "027635604": 85, "1915": 85, "cl": 85, "cls_avg": 85, "avg": 85, "uae_smal": 85, "tfhub_us": 86, "loadsp": 86, "op": 86, "lingual": [86, 89, 90, 97, 99, 135], "accur": [86, 129, 130, 143], "trade": [86, 89, 90], "tend": 86, "With": [86, 91, 97], "minim": [86, 114, 135], "encourag": 86, "weat": 86, "bia": [86, 117], "freeli": 86, "04616805538535118": 86, "022307956591248512": 86, "044395286589860916": 86, "0016493503": 86, "setloadsp": 86, "word2vecapproach": 87, "word2vecmodel": 87, "word2vec_gigaword_300": 87, "word2vec_wiki": 87, "dictionari": [88, 97, 100, 105, 111, 113, 114, 115, 128, 143, 144, 191], "setstoragepath": [88, 101], "line": [88, 92, 101, 106, 117, 126, 128, 141, 194, 197, 200], "delimit": [88, 92, 94, 100, 105, 107, 111, 115, 128, 151, 169, 197, 200], "39658191506190343": 88, "630968081620067": 88, "5393722253731201": 88, "8428180123359783": 88, "7535235923631415": 88, "9699218875629833": 88, "10397182122983872": 88, "11833962569383116": 88, "stress": 88, "0492683418305907": 88, "9415954572751959": 88, "47624463167525755": 88, "16790967216778263": 88, "induc": 88, "1535748762292387": 88, "33498936903209897": 88, "9235178224122094": 88, "1158772920395934": 88, "withcoveragecolumn": 88, "overallcoverag": 88, "writebuffers": 88, "dump": 88, "disk": [88, 211, 212], "storag": [88, 92, 101, 176, 184], "10000": 88, "readcaches": 88, "cach": [88, 130, 138, 139, 195], "random_embeddings_dim4": 88, "abov": [88, 94, 200], "setstorageref": 88, "glove_4d": 88, "setdimens": [88, 178], "patient": 88, "diagnos": 88, "diabet": 88, "9439099431037903": 88, "4707513153553009": 88, "806300163269043": 88, "16176554560661316": 88, "7966810464859009": 88, "5551124811172485": 88, "8861005902290344": 88, "28284206986427307": 88, "025029370561242104": 88, "35177749395370483": 88, "052506182342767715": 88, "1887107789516449": 88, "08617766946554184": 88, "8399239182472229": 88, "5395117998123169": 88, "7864698767662048": 88, "6599600911140442": 88, "16109347343444824": 88, "6041093468666077": 88, "8913561105728149": 88, "5955275893211365": 88, "01899011991918087": 88, "4397728443145752": 88, "8911281824111938": 88, "9840458631515503": 88, "7599489092826843": 88, "9417727589607239": 88, "8624503016471863": 88, "setwritebuffers": 88, "setreadcaches": 88, "glove_100d": [88, 112], "There": [88, 92, 94, 150, 209, 211, 212, 217], "conveni": 88, "coverag": [88, 175], "stat": 88, "whole": [88, 194], "570580005645752": 88, "44183000922203064": 88, "7010200023651123": 88, "417129993438720": 88, "542639970779419": 88, "4147599935531616": 88, "0321999788284302": 88, "4024400115013122": 88, "2708599865436554": 88, "04400600120425224": 88, "020260000601410866": 88, "17395000159": 88, "6191999912261963": 88, "14650000631809235": 88, "08592499792575836": 88, "2629800140857": 88, "3397899866104126": 88, "20940999686717987": 88, "46347999572753906": 88, "6479200124740": 88, "embeddings_col": 88, "coverageresult": 88, "coverateresult": 88, "wordsoverallcoverag": 88, "resultdf": 88, "output_col": 88, "wordscoverag": 88, "cov_embed": 88, "loadstorag": [88, 101], "storage_ref": [88, 101], "xlmrobertaembed": 89, "alexi": [89, 90], "conneau": [89, 90], "kartikai": [89, 90], "khandelw": [89, 90], "vishrav": [89, 90], "chaudhari": [89, 90], "guillaum": [89, 90], "wenzek": [89, 90], "francisco": [89, 90, 97], "guzman": 89, "edouard": [89, 90], "grave": [89, 90], "5tb": [89, 90], "commoncrawl": [89, 90], "xlm_roberta_bas": 89, "abl": [89, 134, 138, 191, 210], "correct": [89, 141, 143, 144, 155], "terabyt": [89, 90], "r": [89, 90, 97], "mbert": [89, 90], "xnli": [89, 90], "mlqa": [89, 90], "particularli": [89, 90, 130], "swahili": [89, 90, 134], "urdu": [89, 90, 134], "capac": [89, 90, 131, 134], "dilut": [89, 90], "sacrif": [89, 90], "ri": [89, 90], "05969233065843582": 89, "030789051204919815": 89, "04443822056055069": 89, "09564960747": 89, "038839809596538544": 89, "011712731793522835": 89, "019954433664679527": 89, "0667808502": 89, "03952755779027939": 89, "03455188870429993": 89, "019103847444057465": 89, "04311436787": 89, "09579929709434509": 89, "02494969218969345": 89, "014753809198737144": 89, "10259044915": 89, "004710011184215546": 89, "022148698568344116": 89, "011723337695002556": 89, "013356896": 89, "xlmrobertasentenceembed": 90, "guzm\u00e3": 90, "sent_xlm_roberta_bas": 90, "xlnetembed": 91, "autoregress": 91, "xl": 91, "exhibit": 91, "involv": [91, 126], "rank": [91, 139, 141], "xlnet_large_cas": 91, "xlnet_base_cas": 91, "zihangdai": 91, "denois": [91, 130], "autoencod": [91, 130], "corrupt": [91, 130], "pro": 91, "con": 91, "enabl": [91, 112, 133, 137, 139, 143, 184], "maxim": [91, 141], "likelihood": [91, 117], "overcom": 91, "formul": 91, "integr": [91, 97, 116, 135, 191, 207, 209], "6287205219268799": 91, "4865287244319916": 91, "186111718416214": 91, "234187275171279": 91, "1967450380325317": 91, "2746637463569641": 91, "9481253027915955": 91, "3431355059146881": 91, "0777631998062134": 91, "092679977416992": 91, "5331977605819702": 91, "11190271377563": 91, "8349916934967041": 91, "45627787709236145": 91, "7890847325325012": 91, "028069257736": 91, "134845569729805": 91, "11672890186309814": 91, "4945235550403595": 91, "66587203741073": 91, "entityrul": 92, "entityrulerapproach": 92, "exact": [92, 101, 106, 117], "definit": [92, 114, 197], "json": [92, 117, 169, 191, 202], "jsonl": 92, "setpatternsresourc": 92, "might": [92, 112, 155, 216], "rule": [92, 102, 105, 128, 150, 152, 177], "w": [92, 95, 105, 111, 115, 150, 152, 184], "winterfel": 92, "jon": 92, "snow": [92, 113, 141], "stark": 92, "eddard": 92, "patternsresourc": 92, "usestorag": 92, "rocksdb": 92, "lord": 92, "29": [92, 113, 155, 200, 202], "38": [92, 202], "setusestorag": 92, "setsentencematch": 92, "setalphabetresourc": 92, "alphabet": [92, 115], "plain": [92, 217], "entityrulermodel": 92, "entity_rul": [93, 95], "graphextract": [94, 161], "graph": [94, 112, 135, 141, 147, 161], "nerdlmodel": [94, 110, 111, 112, 113, 191, 195, 207], "store": [94, 119, 120, 169, 173, 178, 189, 194, 202, 208], "node": 94, "relev": [94, 97, 117], "taken": 94, "implicitli": 94, "setmergeent": 94, "setdependencyparsermodel": 94, "settypeddependencyparsermodel": 94, "setrelationshiptyp": 94, "public": [94, 195, 211], "relationshiptyp": 94, "entitytyp": 94, "explodeent": 94, "roottoken": 94, "travers": 94, "maxsentences": 94, "minsentences": 94, "mergeent": 94, "merg": [94, 101, 106], "neighbor": [94, 139], "includeedg": 94, "symbol": [94, 141, 155], "posmodel": 94, "coordin": [94, 125], "remoteloc": 94, "graphfinish": [94, 161], "rdf": [94, 161], "nertagg": [94, 111, 112, 113], "morn": [94, 161], "flight": [94, 161], "denver": [94, 161], "18": [94, 102, 104, 107, 110, 113, 166, 183, 194, 210], "path1": 94, "setentitytyp": 94, "setexplodeent": 94, "setroottoken": 94, "setmaxsentences": 94, "setminsentences": 94, "setmergeentitiesiobformat": 94, "iob": [94, 110, 111, 112], "iob2": [94, 110], "setincludeedg": 94, "setdelimit": [94, 105, 107], "setposmodel": 94, "class": [95, 176, 181, 188, 199, 206, 207, 215, 217], "classifier_dl": [95, 184], "er": [95, 184], "keyword_extract": [95, 184], "yake_keyword_extract": [95, 96], "ld_dl": [95, 184], "language_detector_dl": [95, 98], "matcher": [95, 184], "big_text_match": [95, 103], "date_match": [95, 103], "multi_date_match": [95, 103], "regex_match": [95, 103], "text_match": [95, 103], "ner_approach": [95, 108], "ner_convert": [95, 108], "ner_crf": [95, 108], "ner_dl": [95, 108], "ner_overwrit": [95, 108], "openai": [95, 131, 184], "openai_complet": [95, 116], "openai_embed": [95, 116], "param": [95, 111, 139, 172, 173, 178, 184, 189, 190], "sentence_detector_dl": [95, 124, 135], "sentiment_detector": [95, 127], "vivekn_senti": [95, 127], "seq2seq": [95, 184], "bart_transform": [95, 132], "gpt2_transform": [95, 132], "llama2_transform": [95, 132], "m2m100_transform": [95, 132], "marian_transform": [95, 132], "mistral_transform": [95, 132], "phi2_transform": [95, 132], "t5_transform": [95, 132], "spell_check": [95, 184], "context_spell_check": [95, 142], "norvig_sweet": [95, 142], "symmetric_delet": [95, 142], "chunk_token": [95, 149], "recursive_token": [95, 149], "regex_token": [95, 149], "word_segment": [95, 154], "chunk2_doc": [95, 184], "date2_chunk": [95, 184], "document_character_text_splitt": [95, 184], "document_norm": [95, 184], "document_token_splitt": [95, 184], "graph_extract": [95, 184], "lemmat": [95, 128, 146, 168, 170, 184], "n_gram_gener": [95, 184], "stemmer": [95, 146, 184], "stop_words_clean": [95, 184], "token2_chunk": [95, 184], "yakekeywordextract": 97, "yake": 97, "independ": [97, 143, 144, 150], "grow": 97, "autom": 97, "adequ": 97, "emerg": [97, 130, 138], "tool": [97, 117, 130], "nor": 97, "thesauri": 97, "neither": 97, "written": [97, 135], "plethora": 97, "situat": [97, 126], "access": 97, "restrict": [97, 137], "therefor": [97, 215], "sent": 97, "boundari": [97, 125, 126, 129, 152, 155], "detector": [97, 102, 128], "section": [97, 158, 167, 207, 209, 215], "tweakabl": 97, "upper": 97, "bound": [97, 125, 126, 129], "minngram": 97, "maxngram": 97, "occurr": [97, 177], "nkeyword": 97, "stopword": [97, 113, 146], "stop": [97, 111, 117, 138, 146], "campo": 97, "mangaravit": 97, "pasquali": 97, "jatowt": 97, "jorg": 97, "nune": 97, "journal": [97, 155], "elsevi": 97, "vol": 97, "509": 97, "pp": [97, 155], "257": 97, "289": 97, "turn": [97, 170, 211], "fly": 97, "demand": 97, "within": [97, 123, 129, 130, 131, 152, 157], "resort": 97, "solut": [97, 136], "articl": [97, 141], "rest": [97, 110], "merit": 97, "ten": 97, "carri": 97, "twenti": 97, "setcontextchar": [97, 152], "setminngram": 97, "setnkeyword": 97, "acquir": 97, "kaggl": 97, "platform": [97, 117, 118, 191, 209], "host": 97, "transact": 97, "somewhat": 97, "vagu": 97, "cloud": 97, "confer": 97, "week": [97, 102, 104, 148], "announc": [97, 113], "earli": 97, "tomorrow": [97, 102, 104], "phone": 97, "founder": 97, "ceo": 97, "anthoni": 97, "goldbloom": 97, "declin": 97, "deni": 97, "acquisit": 97, "happen": 97, "rumor": 97, "scientist": 97, "ben": 97, "hamner": 97, "2010": 97, "servic": [97, 117, 135], "got": 97, "even": [97, 138], "few": [97, 152, 200, 217], "competitor": 97, "drivendata": 97, "topcod": 97, "hackerrank": 97, "stai": 97, "ahead": 97, "nich": 97, "home": [97, 184], "bui": [97, 198], "commun": [97, 133, 137], "mindshar": 97, "too": [97, 128, 210], "plenti": 97, "bit": [97, 126, 216], "histori": [97, 126, 141], "earlier": 97, "month": [97, 102, 104, 200, 217], "team": [97, 135, 191, 207], "around": 97, "youtub": 97, "technologi": 97, "interest": [97, 137], "kernel": 97, "On": [97, 131, 135], "analyz": [97, 129], "compani": [97, 135], "script": [97, 134], "centric": [97, 134], "job": [97, 157], "board": [97, 123, 200], "unclear": 97, "accord": [97, 133, 141, 197], "crunchbas": 97, "pitchbook": 97, "launch": 97, "investor": 97, "ventur": 97, "sv": [97, 134], "angel": 97, "levchin": 97, "naravik": 97, "chie": 97, "economist": 97, "hal": 97, "varian": 97, "khosla": 97, "yuri": 97, "milner": 97, "resulttupl": 97, "ascend": 97, "orderbi": 97, "32051516486864573": 97, "37786450577630676": 97, "39922830978423146": 97, "40224744669493756": 97, "41584827825302534": 97, "setmaxngram": 97, "setstopword": [97, 113, 146], "getstopword": 97, "loaddefaultstopword": [97, 146], "danish": [97, 134, 146], "dutch": [97, 134, 146], "finnish": [97, 134, 146], "german": [97, 134, 146, 197, 217], "hungarian": [97, 134, 146], "italian": [97, 117, 134, 141, 146], "norwegian": [97, 134, 146], "portugues": [97, 134, 146], "russian": [97, 134, 146], "spanish": [97, 134, 146], "swedish": [97, 134, 146], "turkish": [97, 134, 146], "languagedetectordl": 99, "ld": 99, "identif": 99, "rnn": 99, "tatoeba": 99, "140": 99, "wiki": 99, "languagedetector": 99, "ld_wiki_tatoeba_cnn_21": 99, "open": [99, 133, 134, 137, 152, 157, 158, 159, 167, 170, 208], "advanc": [99, 136, 157, 170], "scala": [99, 139, 171, 172, 180, 186, 190], "program": 99, "biblioth\u00e8qu": 99, "traitement": 99, "pour": 99, "le": [99, 135], "avanc\u00e9": 99, "langag": 99, "naturel": 99, "programm": 99, "ist": 99, "ein": 99, "textverarbeitungsbibliothek": 99, "f\u00fcr": 99, "fortgeschritten": 99, "nat\u00fcrlich": 99, "sprachverarbeitung": 99, "die": 99, "programmiersprachen": 99, "und": 99, "lemma": [100, 128, 166, 194, 198, 212, 215, 216], "predefin": [100, 101, 105, 106, 128], "setdictionari": [100, 128, 143, 144], "lemmatizermodel": 100, "lemmas_smal": [100, 128], "setformcol": 100, "correspend": 100, "formcol": [100, 198], "setlemmacol": 100, "fromlemma": 100, "key_delimit": 100, "value_delimit": 100, "lemma_antbnc": 100, "bigtextmatch": [101, 106], "textmatch": [101, 106, 148], "externalresourc": [101, 106, 182], "mergeoverlap": [101, 106], "tokenizermodel": [101, 152], "trie": 101, "dolor": [101, 106], "magna": [101, 106], "aliqua": [101, 106], "sit": [101, 106], "laborum": [101, 106], "entityextractor": [101, 106, 148], "extractor": [101, 106, 148], "59": [101, 102, 104, 106], "setent": [101, 106, 109, 148], "setmergeoverlap": [101, 106], "settoken": 101, "tokenizer_model": 101, "bigtextmatchermodel": 101, "btm": 101, "textmatchermodel": [101, 106], "searchtri": 101, "datematcherutil": 102, "setinputformat": [102, 169], "setoutputformat": [102, 104], "desir": [102, 104], "yyyi": [102, 104], "mm": [102, 104, 155], "dd": [102, 104, 105], "Not": [102, 112, 168], "setreadmonthfirst": 102, "juli": 102, "5th": 102, "2015": 102, "07": 102, "05": 102, "setdefaultdaywhenmiss": 102, "setanchordateyear": [102, 104], "anchor": [102, 104], "year": [102, 104, 131, 133, 148, 200], "setanchordatemonth": [102, 104], "januari": [102, 104], "setanchordatedai": [102, 104], "setrelaxedfactorystrategi": 102, "matchstrategi": [102, 177], "match_first": [102, 105, 177], "relax": 102, "exhaust": 102, "1978": [102, 104], "28": [102, 104, 110, 166, 183, 194, 202, 210], "1984": [102, 104], "04": [102, 104], "02": [102, 104], "1980": [102, 104], "79": [102, 104], "31st": [102, 104], "april": [102, 104], "2008": [102, 104], "fri": [102, 104], "1997": [102, 104], "jan": [102, 104], "sun": [102, 104], "1st": [102, 104], "thursdai": [102, 104], "wednesdai": [102, 104], "todai": [102, 104, 202], "yesterdai": [102, 104], "0600h": [102, 104], "06": [102, 104], "00": [102, 104], "6pm": [102, 104], "23": [102, 104, 105, 113, 123, 200, 201, 202, 217], "1988": [102, 104], "31": [102, 104, 105, 113, 123, 200], "dateformat": [102, 104], "readmonthfirst": [102, 104], "defaultdaywhenmiss": [102, 104], "anchordateyear": [102, 104], "anchordatemonth": [102, 104], "anchordatedai": [102, 104], "15": [102, 202], "saw": 104, "visit": [104, 117], "57": [104, 113], "65": [104, 113], "regexmatch": 105, "d": [105, 115, 152, 209], "1970": 105, "setrul": 105, "setexternalrul": 105, "match_al": [105, 177], "match_complet": [105, 177], "externalrul": 105, "ceremoni": 105, "setstrategi": 105, "71": 105, "short_dat": 105, "regexmatchermodel": 105, "regardless": 106, "entityvalu": 106, "buildfromtoken": 106, "27": [106, 123, 125, 200], "48": [106, 155, 202], "setentityvalu": 106, "setbuildfromtoken": 106, "null": 107, "empti": [107, 139, 157], "enablecumul": 107, "join": [107, 123, 169, 200], "setenablecumul": 107, "nerapproach": 109, "recogn": [109, 110, 111, 112, 113, 114, 141], "setminepoch": [109, 111], "setrandomse": [109, 112, 119, 135], "getlabelcolumn": [109, 147], "friendli": [110, 117, 135], "whitelist": [110, 150], "setwhitelist": [110, 150], "outsid": 110, "prefix": [110, 150, 152, 191, 207], "preserveposit": [110, 151, 170], "14": [110, 123, 153, 166, 183, 194, 200], "ekeu": [110, 111, 112, 166, 183, 194], "36": [110, 123, 166, 183, 194, 200, 202], "baghdad": [110, 111, 112, 166, 183, 194], "37": [110, 166, 183, 194], "setpreserveposit": [110, 151, 170], "setnerhasnoschema": 110, "nercrf": 111, "nercrfapproach": [111, 112], "nercrfmodel": [111, 112], "crf": [111, 112], "2003": [111, 112, 155, 197, 217], "exclud": [111, 112], "setexternalfeatur": 111, "minepoch": [111, 112], "l2": 111, "c0": 111, "decai": [111, 112], "2250000": 111, "lossep": 111, "ep": 111, "minw": 111, "includeconfid": [111, 112], "confid": [111, 112, 114], "externalfeatur": 111, "nerdlapproach": [111, 112, 197, 217], "trainingdata": [111, 112, 126, 143, 144, 197], "readdataset": [111, 112, 123, 155, 197, 198, 200, 201, 202, 217], "conll2003": [111, 112, 197, 217], "eng": [111, 112, 197, 217], "setl2": 111, "l2valu": 111, "setc0": 111, "c0valu": 111, "setlossep": 111, "setminw": 111, "setincludeconfid": [111, 112], "verbosevalu": 111, "prerequisit": [111, 112, 113, 211], "nerdl": 112, "char": [112, 115, 126], "bilstm": 112, "tagger": [112, 200, 217], "50": [112, 113, 123, 130, 131, 133, 134, 136, 137, 202], "real": [112, 136, 137, 184, 191, 207], "rage": 112, "graphfold": [112, 141], "usecontrib": 112, "contrib": 112, "cell": [112, 169], "slightli": [112, 126], "includeallconfidencescor": 112, "enablememoryoptim": 112, "slow": 112, "usebestmodel": 112, "bestmodelmetr": 112, "micro": 112, "macro": 112, "setgraphfold": [112, 141, 147], "setusecontrib": 112, "setpo": 112, "setincludeallconfidencescor": 112, "setenablememoryoptim": 112, "setusebestmodel": 112, "setbestmodelmetr": 112, "nermodel": 112, "neroverwrit": 113, "setnewresult": 113, "nerword": 113, "overwritten": 113, "newnerent": 113, "lab": 113, "42": [113, 123], "45": [113, 123, 200, 202], "47": [113, 200, 202], "ner_overwritten": 113, "setnerword": 113, "setnewnerent": 113, "cardin": 113, "setreplaceent": 113, "rw": 113, "zeroshotnermodel": 114, "zeroshotn": 114, "zer_shot_n": 114, "entitydefinit": 114, "citi": 114, "town": 114, "predictionthreshold": 114, "01f": 114, "ignoreent": 114, "zero_shot_n": 114, "setentitydefinit": 114, "hellen": 114, "5328949": 114, "9360068": 114, "83294415": 114, "45366877": 114, "setpredictionthreshold": 114, "zero_shot_ner_roberta": 114, "shortcut": 114, "stem": [115, 145, 166, 194, 215, 216], "henc": 115, "pl": [115, 134], "slangdictionari": 115, "slang": 115, "minlength": [115, 125, 126, 151, 152], "maxlength": [115, 125, 126, 151, 152], "setcleanuppattern": 115, "punctuat": [115, 125], "alphanumer": 115, "za": 115, "z": [115, 152], "brother": 115, "dont": [115, 129], "setslangdictionari": 115, "setminlength": [115, 125, 126, 151, 152], "setmaxlength": [115, 125, 126, 151, 152], "normalizermodel": 115, "openaicomplet": 117, "request": [117, 118], "complet": [117, 191, 208, 211], "executor": [117, 118], "doc": [117, 118, 141, 201, 217], "suffix": [117, 150, 152, 211], "insert": [117, 143, 144, 211], "maxtoken": 117, "nucleu": 117, "mass": 117, "numberofcomplet": 117, "prompt": 117, "logprob": 117, "echo": 117, "presencepenalti": 117, "penal": 117, "topic": 117, "frequencypenalti": 117, "frequenc": [117, 129, 141, 143, 144, 155], "verbatim": 117, "bestof": 117, "best_of": 117, "server": [117, 216], "side": [117, 155], "logitbia": 117, "abus": [117, 118], "pleasur": 117, "dine": 117, "fiorita": 117, "truli": 117, "delight": 117, "menu": 117, "boast": 117, "wonder": 117, "classic": 117, "dish": 117, "exquisit": 117, "prepar": [117, 156, 158, 164, 167], "staff": [117, 128], "227": 117, "barbecu": 117, "joe": 117, "dinner": 117, "amaz": 117, "pull": 117, "pork": 117, "smoke": 117, "turkei": 117, "brisket": 117, "rib": 117, "sandwich": 117, "opt": 117, "172": 117, "overallr": 117, "reviewbodi": 117, "enjoi": 117, "meal": 117, "restaur": [117, 128], "flavour": 117, "beautifulli": 117, "setmodel": [117, 118, 126], "setsuffix": [117, 150], "setmaxtoken": 117, "plu": [117, 131], "max_token": 117, "cannot": 117, "settemperatur": [117, 130, 131, 133, 134, 135, 136, 137, 138, 178], "determinist": 117, "alter": 117, "settopp": [117, 130, 131, 133, 134, 135, 136, 137, 138, 178], "compris": 117, "setnumberofcomplet": 117, "consum": 117, "quota": 117, "ensur": [117, 136, 186], "setlogprob": 117, "respons": [117, 126, 133, 137], "setecho": 117, "setstop": 117, "setpresencepenalti": 117, "setfrequencypenalti": 117, "setbestof": 117, "control": [117, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 178], "candid": [117, 141, 143, 144, 152], "setlogitbia": 117, "mathemat": 117, "ban": 117, "exclus": 117, "50256": 117, "prevent": 117, "endoftext": 117, "setus": [117, 118], "openaiembed": 118, "ada": 118, "002": 118, "empty_df": 118, "sample_text": 118, "delici": 118, "waiter": 118, "sample_df": 118, "002297497": 118, "009297881": 118, "015739758": 118, "0076794787": 118, "004737794": 118, "01487661": 118, "009856389": 118, "03823238": 118, "0069305706": 118, "028610818": 118, "025208998": 118, "018138802": 118, "0036271256": 118, "025539026": 118, "204275e": 118, "016374426": 118, "02828079": 118, "0054073683": 118, "009710415": 118, "016399812": 118, "015397037": 118, "00427766": 118, "006987691": 118, "0072859847": 118, "003874646": 118, "018544989": 118, "008752067": 118, "022657635": 118, "011493831": 118, "023901584": 118, "015638212": 118, "0035192322": 118, "034932107": 118, "0041919798": 118, "02612292": 118, "021515233": 118, "005715182": 118, "011754045": 118, "008453773": 118, "004080913": 118, "019179657": 118, "014419649": 118, "00893612": 118, "0063911034": 118, "045670684": 118, "017884934": 118, "005610462": 118, "219344e": 118, "02211182": 118, "0039539794": 118, "021007499": 118, "017631067": 118, "011696924": 118, "02260686": 118, "016336346": 118, "017174106": 118, "008466466": 118, "0015922225": 118, "025094759": 118, "024967825": 118, "007806412": 118, "005794516": 118, "022187982": 118, "0029162979": 118, "0060959826": 118, "025564414": 118, "008104706": 118, "0010178483": 118, "9823447e": 118, "0046425937": 118, "02074094": 118, "013467647": 118, "004626727": 118, "016006319": 118, "0166156": 118, "008948814": 118, "007616012": 118, "013619968": 118, "0069749975": 118, "0052677416": 118, "009881775": 118, "04592455": 118, "0030464048": 118, "024003131": 118, "02301305": 118, "006981344": 118, "023571556": 118, "009938896": 118, "006537077": 118, "033332746": 118, "002690991": 118, "019928563": 118, "0017596161": 118, "001090835": 118, "022683023": 118, "005007528": 118, "01540973": 118, "031530287": 118, "0054676617": 118, "015980931": 118, "0051471544": 118, "019890483": 118, "009386734": 118, "0062133963": 118, "031174876": 118, "009405775": 118, "015270104": 118, "028864685": 118, "021020193": 118, "018303815": 118, "0029210579": 118, "012693353": 118, "005102728": 118, "049580235": 118, "04300508": 118, "1293065e": 118, "0215787": 118, "016894853": 118, "0065434235": 118, "041431103": 118, "662815e": 118, "03351045": 118, "0128901": 118, "010510096": 118, "807209e": 118, "01835459": 118, "2869726e": 118, "01309954": 118, "011982525": 118, "005813556": 118, "0070194243": 118, "008637827": 118, "018456135": 118, "5521466e": 118, "019141577": 118, "021896034": 118, "02975322": 118, "0043220865": 118, "0015160623": 118, "0052074483": 118, "0149527695": 118, "0213883": 118, "018836936": 118, "01105591": 118, "0074636918": 118, "022632249": 118, "0036810723": 118, "006286383": 118, "025678653": 118, "027773056": 118, "03668379": 118, "00445854": 118, "013911915": 118, "008015852": 118, "0056739287": 118, "010281616": 118, "0057659554": 118, "00872668": 118, "010649723": 118, "0787844e": 118, "032164957": 118, "023838118": 118, "002641804": 118, "030387888": 118, "029626286": 118, "016602905": 118, "0021784967": 118, "0010519617": 118, "0116524985": 118, "018519603": 118, "007552545": 118, "007419265": 118, "0011090817": 118, "0044331537": 118, "009989669": 118, "007533505": 118, "0061943564": 118, "0057088356": 118, "028230017": 118, "0042554466": 118, "029321646": 118, "024790118": 118, "015676292": 118, "018202268": 118, "0075017717": 118, "00865052": 118, "0063942764": 118, "0020118963": 118, "036963046": 118, "002335577": 118, "020804405": 118, "6888937": 118, "019598536": 118, "0034748053": 118, "0067401705": 118, "02835695": 118, "023393849": 118, "0071527045": 118, "010586256": 118, "0096088685": 118, "009488282": 118, "021337526": 118, "6766098e": 118, "019801632": 118, "0022705235": 118, "009558095": 118, "0020753632": 118, "708839e": 118, "0066449703": 118, "04130417": 118, "011220924": 118, "013391487": 118, "027722282": 118, "011366897": 118, "4434706e": 118, "015460504": 118, "549375e": 118, "01449581": 118, "008529933": 118, "018875016": 118, "017745307": 118, "009437508": 118, "024587024": 118, "013010687": 118, "008993241": 118, "005093208": 118, "024218917": 118, "024066597": 118, "0037857925": 118, "031047942": 118, "015003543": 118, "023266915": 118, "03021018": 118, "0069115306": 118, "010154682": 118, "011430364": 118, "030311726": 118, "01764376": 118, "0020975766": 118, "006746517": 118, "009748495": 118, "01665368": 118, "003658859": 118, "02789999": 118, "0040682196": 118, "0031289116": 118, "029905539": 118, "016882159": 118, "0021689767": 118, "023228835": 118, "011773085": 118, "014292715": 118, "019827018": 118, "029575512": 118, "0015803224": 118, "018405361": 118, "002776671": 118, "019370057": 118, "027569963": 118, "008460119": 118, "012445833": 118, "0028322043": 118, "0052804346": 118, "006422837": 118, "009335961": 118, "02354617": 118, "0010345082": 118, "018900402": 118, "0029908712": 118, "0068544107": 118, "010148335": 118, "007939693": 118, "0072796377": 118, "020537846": 118, "010928977": 118, "029880153": 118, "0038492593": 118, "002795711": 118, "01892579": 118, "029956313": 118, "024612412": 118, "00446806": 118, "026452947": 118, "017605681": 118, "041177236": 118, "02018243": 118, "014648129": 118, "021553313": 118, "0015017823": 118, "0034874987": 118, "034170505": 118, "036125284": 118, "02805231": 118, "018430749": 118, "003404992": 118, "009329614": 118, "020766325": 118, "012560072": 118, "01707256": 118, "011538258": 118, "007711212": 118, "01332802": 118, "007412918": 118, "022492621": 118, "0059055826": 118, "025754813": 118, "01904003": 118, "013353407": 118, "0026005507": 118, "022530701": 118, "007895266": 118, "842112e": 118, "028103083": 118, "013962688": 118, "019979337": 118, "02115982": 118, "0029305778": 118, "01340418": 118, "01609517": 118, "011880978": 118, "016793307": 118, "0048837676": 118, "013036073": 118, "025767507": 118, "030337114": 118, "022454541": 118, "018824242": 118, "0019785764": 118, "006146756": 118, "0021055099": 118, "0014525956": 118, "011157458": 118, "005293128": 118, "011468444": 118, "021591393": 118, "0051535014": 118, "005597769": 118, "1935701e": 118, "012731433": 118, "0034208586": 118, "024688572": 118, "0018103895": 118, "001299482": 118, "005461315": 118, "024878971": 118, "030565593": 118, "016717145": 118, "013226474": 118, "008764761": 118, "007355798": 118, "0070638508": 118, "005734222": 118, "012084072": 118, "023749264": 118, "028813912": 118, "015892077": 118, "0033573918": 118, "0052201413": 118, "01672984": 118, "0014105488": 118, "02184526": 118, "019560456": 118, "0063752364": 118, "008777454": 118, "00418246": 118, "013861141": 118, "012877407": 118, "009500975": 118, "005804036": 118, "0013859555": 118, "025335932": 118, "01779608": 118, "01537165": 118, "0019722297": 118, "011081297": 118, "0073875315": 118, "0015795291": 118, "015968239": 118, "013454954": 118, "0026592575": 118, "0020944031": 118, "014140395": 118, "0023339903": 118, "0064989966": 118, "0030828982": 118, "0046870206": 118, "013239168": 118, "017491441": 118, "011106684": 118, "029702445": 118, "003696939": 118, "013784981": 118, "017250266": 118, "0037762725": 118, "021413686": 118, "017047172": 118, "019268509": 118, "006898837": 118, "013924608": 118, "009266147": 118, "0023577902": 118, "020905953": 118, "005264568": 118, "0014875022": 118, "0064513967": 118, "003044818": 118, "0073431046": 118, "0012431552": 118, "0021166166": 118, "0019404964": 118, "018646536": 118, "6913787e": 118, "01518125": 118, "0013581888": 118, "016755225": 118, "5418405e": 118, "0076921717": 118, "016780613": 118, "56008e": 118, "010948017": 118, "956349e": 118, "006108676": 118, "011290737": 118, "027443029": 118, "008910734": 118, "012858367": 118, "016844079": 118, "017592987": 118, "01476237": 118, "0039793663": 118, "008066626": 118, "0018421229": 118, "03422128": 118, "016526746": 118, "022200674": 118, "0010051549": 118, "004474407": 118, "6767073e": 118, "007749292": 118, "026249854": 118, "006670357": 118, "014775063": 118, "02589444": 118, "0023530303": 118, "0066068904": 118, "0067147836": 118, "0012542619": 118, "018671922": 118, "0022498968": 118, "0048552076": 118, "0031463648": 118, "0217691": 118, "011849245": 118, "0026735375": 118, "011024177": 118, "01733912": 118, "0073621445": 118, "012407753": 118, "0032939252": 118, "0072288644": 118, "014457729": 118, "0011781019": 118, "009615215": 118, "0141150085": 118, "025376e": 118, "04615303": 118, "031631835": 118, "005131288": 118, "006594197": 118, "025386706": 118, "028204631": 118, "023482703": 118, "013086847": 118, "022314915": 118, "2082416e": 118, "023457317": 118, "006013476": 118, "0125029525": 118, "0021404168": 118, "023977743": 118, "0033542186": 118, "029423192": 118, "0019960299": 118, "0076477453": 118, "080113e": 118, "030413274": 118, "008790147": 118, "013493034": 118, "078089505": 118, "004842514": 118, "015232024": 118, "00825068": 118, "036785338": 118, "335175e": 118, "03891782": 118, "004680674": 118, "005451795": 118, "012134845": 118, "02490436": 118, "007101931": 118, "026351402": 118, "0043093935": 118, "0059595294": 118, "024561638": 118, "019331977": 118, "02385081": 118, "008206253": 118, "015942851": 118, "027138388": 118, "01521933": 118, "0043728603": 118, "025500946": 118, "026173694": 118, "0011558884": 118, "023381157": 118, "0016207825": 118, "001237602": 118, "0049916613": 118, "0024085636": 118, "015587438": 118, "0048203007": 118, "35144e": 118, "012255432": 118, "0048742476": 118, "0062546497": 118, "04051718": 118, "0051090745": 118, "016932933": 118, "0016660026": 118, "02774767": 118, "050976507": 118, "03043866": 118, "0028655245": 118, "0023292303": 118, "0104275895": 118, "004360167": 118, "011144764": 118, "024282385": 118, "013988075": 118, "016234798": 118, "014698903": 118, "037673872": 118, "0054644886": 118, "020461684": 118, "012598153": 118, "012363326": 118, "002833791": 118, "0029274046": 118, "01243314": 118, "0037413659": 118, "012820287": 118, "0070511578": 118, "017364508": 118, "0025545373": 118, "0034843255": 118, "009773882": 118, "0010368882": 118, "009894469": 118, "330013e": 118, "008237986": 118, "0013804021": 118, "0035890455": 118, "029194713": 118, "022721102": 118, "026605267": 118, "011151111": 118, "0054200618": 118, "0043919003": 118, "0022181633": 118, "0025402573": 118, "015562051": 118, "021984888": 118, "025145533": 118, "008422039": 118, "0032590183": 118, "008130092": 118, "0019309763": 118, "009278841": 118, "981743e": 118, "04363975": 118, "008510893": 118, "011360551": 118, "025069373": 118, "004252273": 118, "011132071": 118, "020474378": 118, "014889303": 118, "01896387": 118, "0075461986": 118, "012096765": 118, "030489434": 118, "012166579": 118, "032393437": 118, "0035763523": 118, "009018627": 118, "007438305": 118, "0064196633": 118, "025056679": 118, "012230045": 118, "821482e": 118, "0124839125": 118, "0014454556": 118, "012744127": 118, "007159051": 118, "010402203": 118, "010053135": 118, "0042808335": 118, "0025307373": 118, "004128513": 118, "010890896": 118, "025716733": 118, "024155451": 118, "04023793": 118, "015257411": 118, "0129154865": 118, "013264554": 118, "028636204": 118, "023520783": 118, "004890114": 118, "008022199": 118, "016184025": 118, "051535014": 118, "011792125": 118, "009291534": 118, "031707995": 118, "039476328": 118, "004699714": 118, "014216555": 118, "01480045": 118, "0065053436": 118, "0044997935": 118, "021705633": 118, "0904366e": 118, "019585844": 118, "0036842457": 118, "455769e": 118, "006727477": 118, "0108718565": 118, "0046076872": 118, "0303625": 118, "02967706": 118, "026554495": 118, "014825836": 118, "009786575": 118, "009285187": 118, "020931339": 118, "003630299": 118, "004693367": 118, "009589829": 118, "013886528": 118, "017694535": 118, "027493803": 118, "004982141": 118, "0071717445": 118, "03297733": 118, "007571585": 118, "006276863": 118, "016069785": 118, "0464047e": 118, "0025450173": 118, "015358957": 118, "018494215": 118, "7068556e": 118, "027646123": 118, "0011114617": 118, "013429567": 118, "007920653": 118, "0050011813": 118, "013543808": 118, "014381569": 118, "0047346205": 118, "018798856": 118, "019674698": 118, "012629886": 118, "029803993": 118, "009862735": 118, "0033732585": 118, "013048767": 118, "009456548": 118, "03815622": 118, "286778e": 118, "0040301397": 118, "014254635": 118, "0038809928": 118, "016666373": 118, "6997105e": 118, "017351814": 118, "015549357": 118, "02952474": 118, "00431574": 118, "009818309": 118, "470635e": 118, "011404978": 118, "025082065": 118, "021908727": 118, "018951176": 118, "022936888": 118, "013658048": 118, "004671154": 118, "0296009": 118, "0127949": 118, "018341895": 118, "6842424e": 118, "01292818": 118, "0036429923": 118, "030083247": 118, "00215311": 118, "024206225": 118, "02619908": 118, "009837349": 118, "010256229": 118, "008168173": 118, "0100340955": 118, "013150314": 118, "02188334": 118, "010935323": 118, "008371267": 118, "00857436": 118, "0036144322": 118, "009697721": 118, "007863532": 118, "018100722": 118, "019446217": 118, "023495397": 118, "0037032857": 118, "009380388": 118, "027265321": 118, "007140011": 118, "015193944": 118, "004556914": 118, "013632661": 118, "0056358487": 118, "01040855": 118, "0050519546": 118, "008155479": 118, "9020106e": 118, "032571144": 118, "0048076073": 118, "0060293428": 118, "016031705": 118, "021781793": 118, "0015866691": 118, "0016088824": 118, "024752038": 118, "0019547765": 118, "012369673": 118, "015320877": 118, "012706046": 118, "009082094": 118, "010249883": 118, "019128883": 118, "02543748": 118, "0084982": 118, "0032970984": 118, "012991647": 118, "022479929": 118, "02316537": 118, "0012312552": 118, "0042840065": 118, "018227655": 118, "005731049": 118, "02604676": 118, "006689397": 118, "006305423": 118, "018075334": 118, "019484296": 118, "01783416": 118, "0012130085": 118, "015866691": 118, "020626698": 118, "039882515": 118, "008682254": 118, "0022546567": 118, "009323268": 118, "035871416": 118, "014330796": 118, "0145465825": 118, "023216143": 118, "011531911": 118, "020372832": 118, "00641649": 118, "013531114": 118, "016437892": 118, "013124927": 118, "019814324": 118, "0015136823": 118, "016247492": 118, "004753661": 118, "013823061": 118, "007907959": 118, "027113002": 118, "009932549": 118, "009659641": 118, "0044807536": 118, "009850042": 118, "014191168": 118, "042954307": 118, "024701266": 118, "01059895": 118, "0047885673": 118, "021629473": 118, "006651317": 118, "031098714": 118, "0058262493": 118, "0051249415": 118, "0065180366": 118, "0519563e": 118, "009792922": 118, "0423958": 118, "010992444": 118, "008739374": 118, "002449817": 118, "012045992": 118, "014089622": 118, "0018310162": 118, "014406956": 118, "033180423": 118, "0052709146": 118, "0016802826": 118, "012750473": 118, "018329201": 118, "005750089": 118, "048234742": 118, "01771992": 118, "009240761": 118, "789961e": 118, "017669147": 118, "01730104": 118, "0026529108": 118, "022543395": 118, "017288346": 118, "007971426": 118, "019065415": 118, "007857186": 118, "0481933e": 118, "016488666": 118, "709636e": 118, "009348654": 118, "0049281945": 118, "0059436625": 118, "020956725": 118, "003538272": 118, "0038905127": 118, "0016485492": 118, "0044141137": 118, "01271874": 118, "01483853": 118, "01245218": 118, "0023657237": 118, "0037794458": 118, "5497736e": 118, "00882188": 118, "015815917": 118, "016767919": 118, "005185235": 118, "018049948": 118, "007685825": 118, "21934114": 118, "012007912": 118, "005039261": 118, "037445392": 118, "4307736e": 118, "031403355": 118, "0018468829": 118, "0024656837": 118, "01722488": 118, "013213781": 118, "011512871": 118, "0015811158": 118, "0035287521": 118, "0062419563": 118, "0048456877": 118, "025120145": 118, "023800036": 118, "0269697e": 118, "03554139": 118, "01071319": 118, "2110125e": 118, "017313734": 118, "03777542": 118, "0019944431": 118, "04402055": 118, "02442201": 118, "018976564": 118, "005873849": 118, "006924224": 118, "003865126": 118, "0057437425": 118, "0038206992": 118, "013163007": 118, "01646328": 118, "02446009": 118, "018748082": 118, "027239935": 118, "0032479118": 118, "03653147": 118, "015206637": 118, "018773468": 118, "00643553": 118, "010141989": 118, "009183641": 118, "02025859": 118, "019852404": 118, "006054729": 118, "010630683": 118, "009481935": 118, "059881e": 118, "03005786": 118, "014851223": 118, "014280022": 118, "003274885": 118, "0014168955": 118, "025005905": 118, "9089613e": 118, "022302222": 118, "008999587": 118, "010097562": 118, "024942439": 118, "012807593": 118, "019547764": 118, "034957495": 118, "026833748": 118, "7683392e": 118, "0068417173": 118, "011182844": 118, "016907547": 118, "03013402": 118, "0041062995": 118, "014571969": 118, "02070286": 118, "011335164": 118, "012725086": 118, "8341785e": 118, "0013653288": 118, "017859548": 118, "0056802756": 118, "006556117": 118, "0033002717": 118, "011398631": 118, "010954363": 118, "055139925": 118, "009424815": 118, "004959928": 118, "028788524": 118, "0031241516": 118, "0027465243": 118, "036810722": 118, "0031828582": 118, "005543822": 118, "0026053106": 118, "6973375e": 118, "017935708": 118, "0015406557": 118, "0023911104": 118, "016945627": 118, "0035636588": 118, "02396505": 118, "01911619": 118, "0029448578": 118, "033408906": 118, "020550538": 118, "01294722": 118, "011500178": 118, "011988872": 118, "025424786": 118, "011887325": 118, "038587794": 118, "003395472": 118, "007946039": 118, "019966645": 118, "033713546": 118, "018189576": 118, "026859134": 118, "012223699": 118, "024802811": 118, "099946e": 118, "0010448216": 118, "005020221": 118, "012356979": 118, "007590625": 118, "03089562": 118, "014521196": 118, "017212186": 118, "024917051": 118, "020169739": 118, "044680603": 118, "005658062": 118, "013835755": 118, "3776127e": 118, "0028496578": 118, "006467263": 118, "053007443": 118, "011614418": 118, "0056453687": 118, "16145945": 118, "0091963345": 118, "024548944": 118, "016425198": 118, "015701678": 118, "862344e": 118, "023190755": 118, "0074509983": 118, "018088028": 118, "010205456": 118, "010383163": 118, "033028103": 118, "0023324036": 118, "019052723": 118, "016590212": 118, "4408938e": 118, "02324153": 118, "019623924": 118, "0383847": 118, "002686231": 118, "0010852817": 118, "0076223584": 118, "002762391": 118, "030540207": 118, "0037667525": 118, "011005137": 118, "0017850028": 118, "005984916": 118, "0029353378": 118, "02555172": 118, "00855532": 118, "010287963": 118, "2544602e": 118, "0065624635": 118, "017808774": 118, "03528752": 118, "013188394": 118, "027925376": 118, "0014248289": 118, "009342308": 118, "0017247093": 118, "023596942": 118, "004709234": 118, "037369233": 118, "016082479": 118, "0011963486": 118, "00222451": 118, "014165782": 118, "0014414889": 118, "0058865426": 118, "2633766e": 118, "012274472": 118, "011328817": 118, "0020372833": 118, "0013026553": 118, "00635937": 118, "00651169": 118, "0024672705": 118, "0026640175": 118, "0033669118": 118, "0074763848": 118, "311968e": 118, "023444623": 118, "017656455": 118, "0065243836": 118, "021832567": 118, "02320345": 118, "015092397": 118, "034119733": 118, "025983294": 118, "021324834": 118, "015663598": 118, "00417294": 118, "014965463": 118, "014203862": 118, "0074319583": 118, "007381185": 118, "0035446188": 118, "009310574": 118, "02562788": 118, "01101783": 118, "009050361": 118, "010484709": 118, "005835769": 118, "0036620323": 118, "0055565154": 118, "028712364": 118, "033586614": 118, "027087616": 118, "019509684": 118, "005166195": 118, "020042805": 118, "019903177": 118, "010738577": 118, "038816273": 118, "014990849": 118, "025412092": 118, "030464048": 118, "009158255": 118, "046609994": 118, "9095457e": 118, "0016675893": 118, "012921833": 118, "2828116e": 118, "0033288319": 118, "10784273": 118, "022898808": 118, "020563232": 118, "020487072": 118, "0063117696": 118, "005299475": 118, "013442261": 118, "0112590045": 118, "015282797": 118, "013581888": 118, "023723876": 118, "00847916": 118, "025221692": 118, "028686978": 118, "8655227e": 118, "005169368": 118, "0765446e": 118, "011436711": 118, "004963101": 118, "0067592105": 118, "007527158": 118, "029854767": 118, "0072098244": 118, "011246311": 118, "009945242": 118, "017326428": 118, "004052353": 118, "011684231": 118, "311375e": 118, "026986068": 118, "012801247": 118, "0023815904": 118, "047600072": 118, "006886144": 118, "004464887": 118, "9809546e": 118, "018684616": 118, "022924196": 118, "0070575043": 118, "0037730993": 118, "025830973": 118, "029651672": 118, "0046140337": 118, "041710358": 118, "0058960626": 118, "0018706829": 118, "0065878504": 118, "0067338236": 118, "0011431951": 118, "020233205": 118, "008218946": 118, "015930157": 118, "0024022171": 118, "0051439814": 118, "0120777255": 118, "00895516": 118, "010116602": 118, "038638566": 118, "0056231553": 118, "840722e": 118, "009754842": 118, "0074256114": 118, "0011773085": 118, "7314436e": 118, "02014435": 118, "010186416": 118, "0067211306": 118, "015828611": 118, "0043665133": 118, "0112526575": 118, "031073328": 118, "018126108": 118, "014432343": 118, "0021118566": 118, "017389894": 118, "023635022": 118, "0062736897": 118, "040187154": 118, "006905184": 118, "0068163304": 118, "0087838005": 118, "010072175": 118, "00832684": 118, "01061799": 118, "01268066": 118, "0137088215": 118, "007926999": 118, "01711064": 118, "00885996": 118, "015422424": 118, "0052011013": 118, "022327607": 118, "0092280675": 118, "022251448": 118, "0045251804": 118, "5886433e": 118, "020360138": 118, "021870647": 118, "013251861": 118, "027595349": 118, "01094167": 118, "011550951": 118, "0033034452": 118, "026072146": 118, "030032473": 118, "00411582": 118, "012185619": 118, "0096215615": 118, "002618004": 118, "006575157": 118, "03675995": 118, "010986097": 118, "023673104": 118, "011900018": 118, "016044399": 118, "0040206197": 118, "018722696": 118, "0038873393": 118, "011163804": 118, "01919235": 118, "015790531": 118, "0013692954": 118, "011836552": 118, "005096381": 118, "031200262": 118, "0358968": 118, "009126521": 118, "013696128": 118, "014711596": 118, "018608455": 118, "03922246": 118, "0179484": 118, "0069178776": 118, "010909937": 118, "013569194": 118, "019839711": 118, "024447398": 118, "01086551": 118, "010294309": 118, "024726652": 118, "016679065": 118, "0013145554": 118, "004617207": 118, "004690194": 118, "013315327": 118, "0112653505": 118, "0016009491": 118, "003998406": 118, "025272466": 118, "0030051514": 118, "007869879": 118, "031251036": 118, "005375635": 118, "0046203807": 118, "0030099114": 118, "0071273176": 118, "012020606": 118, "016285572": 118, "033865865": 118, "04290353": 118, "009107481": 118, "007400225": 118, "018253041": 118, "016704453": 118, "003957153": 118, "022644943": 118, "0074446513": 118, "012122152": 118, "0013796088": 118, "019014644": 118, "026909908": 118, "003035298": 118, "012153885": 118, "020499766": 118, "006010303": 118, "004026966": 118, "3466855e": 118, "001078935": 118, "0051725414": 118, "0014906756": 118, "009526362": 118, "016310958": 118, "010357776": 118, "0145338895": 118, "015993625": 118, "025259772": 118, "036937658": 118, "0044014202": 118, "008713987": 118, "003931766": 118, "0053597684": 118, "02797615": 118, "020093577": 118, "004550567": 118, "024434704": 118, "0029956312": 118, "6632223e": 118, "51248e": 118, "028915457": 118, "023470009": 118, "008675907": 118, "014013462": 118, "0031527115": 118, "0018865496": 118, "0033986452": 118, "040974144": 118, "002589444": 118, "0018516429": 118, "049504075": 118, "00884092": 118, "004541047": 118, "014076929": 118, "015473197": 118, "0027211376": 118, "031327195": 118, "041126464": 118, "018595763": 118, "0104593225": 118, "01938275": 118, "0027592175": 118, "classifierencod": 119, "attach": [119, 120, 173, 178, 189, 191], "evaluationdlparam": 120, "setevaluationlogextend": 120, "setenableoutputlog": [120, 191, 207], "setoutputlogspath": [120, 126, 191, 207], "assum": 120, "perceptronapproach": [123, 200, 217], "member": [123, 194], "datasetpath": 123, "pierr": [123, 200], "vinken": [123, 200], "34": [123, 200, 202], "md": [123, 200], "vb": [123, 197, 200, 217], "41": [123, 125, 200, 202], "43": [123, 125, 200, 202], "dt": [123, 200, 201, 217], "49": [123, 200], "poscol": [123, 155, 197], "niter": [123, 155], "anc": [123, 200, 217], "trainingperceptrondf": 123, "trainedpo": 123, "setposcolumn": [123, 155], "cd": [123, 197, 200], "setiter": 123, "getniter": [123, 155], "pos_anc": 123, "25": [123, 125, 200, 202], "33": [123, 202], "sentencedetectorparam": 125, "ii": 125, "abbrevi": 125, "period": 125, "geo": 125, "1026": 125, "253": 125, "553": 125, "ellipsi": 125, "quotat": 125, "mark": [125, 126, 155], "exclam": 125, "breaker": 125, "pragmaticcontentformatt": 125, "custombound": [125, 126], "setcustombound": [125, 126], "usecustomboundsonli": [125, 126], "explodesent": [125, 126, 197, 198], "useabbrevi": 125, "explicitli": [125, 126, 146, 183, 211], "customboundsstrategi": 125, "prepend": [125, 157], "break": 125, "append": [125, 141, 211], "parallel": [125, 126, 166, 197, 215], "splitlength": [125, 126], "forcibli": [125, 126], "99999": [125, 126, 152], "detectlist": 125, "nhow": 125, "setcustomboundsstrategi": 125, "setuseabbrevi": 125, "setdetectlist": 125, "setusecustomboundsonli": [125, 126], "setexplodesent": [125, 126], "setsplitlength": [125, 126], "sentencedetectordl": [126, 135], "sentencedetectordlapproach": 126, "sentencedetectordlmodel": [126, 135], "modelarchitectur": 126, "impossiblepenultim": 126, "imposs": [126, 155], "penultim": 126, "epochsnumb": 126, "eo": 126, "stefan": 126, "schweter": 126, "sajawel": 126, "ahm": 126, "cover": [126, 130, 134, 138, 155], "broken": 126, "moder": 126, "lack": 126, "easier": [126, 160, 213, 217], "polit": 126, "successor": 126, "great": 126, "heritag": 126, "bequeath": 126, "nelson": 126, "mandela": 126, "setepochsnumb": 126, "model_architectur": 126, "validation_split": 126, "epochs_numb": 126, "output_logs_path": 126, "setimpossiblepenultim": 126, "impossible_penultim": 126, "sentencedl": 126, "sentencesdl": 126, "helen": 126, "total": [126, 155], "peopl": 126, "sentimentdetector": 128, "els": 128, "viveknsentimentapproach": [128, 129], "cool": 128, "superb": 128, "uninspir": 128, "sentimentscor": 128, "nice": [128, 191, 207], "entri": [128, 158, 167, 195], "sttr": 128, "sentimentdetectormodel": 128, "sda": [128, 129], "pragmat": 128, "viveknsenti": 129, "analys": 129, "vivek": 129, "narayanan": 129, "give": 129, "transit": [129, 141], "sentimentcol": 129, "prunecorpu": 129, "unfrequ": 129, "scope": 129, "naiv": 129, "bay": 129, "vivekn": 129, "setsentimentcol": 129, "train_senti": 129, "result_senti": 129, "finish": [129, 139, 159, 161, 165, 168, 184], "final_senti": 129, "cast": [129, 156], "horribl": 129, "go": [129, 211], "again": [129, 150], "anyon": 129, "protagonist": 129, "music": 129, "setprunecorpu": 129, "viveknsentimentmodel": 129, "sentiment_vivekn": 129, "barttransform": 130, "handl": [130, 136, 181, 199], "captur": [130, 139], "past": [130, 135, 195], "incorpor": 130, "versatil": [130, 136], "valuabl": 130, "summari": [130, 131, 133, 134, 136, 137, 138], "distilbart_xsum_12_6": 130, "barttestspec": 130, "cumul": [130, 131, 133, 134, 135, 136, 137, 138, 178], "ignoretokenid": [130, 131, 133, 134, 136, 137, 138], "usecach": 130, "ab": 130, "1910": 130, "13461": 130, "pytorch": [130, 134], "fairseq": [130, 134], "arbitrari": 130, "nois": 130, "reconstruct": [130, 170], "tranform": 130, "randomli": 130, "dialogu": [130, 133, 137], "roug": 130, "bleu": [130, 134], "ablat": 130, "influenc": [130, 141], "setmaxoutputlength": [130, 131, 133, 134, 135, 136, 137, 138, 178], "200": [130, 138], "rich": [130, 138], "rise": [130, 138], "methodologi": [130, 138], "landscap": [130, 138], "unifi": [130, 138], "systemat": [130, 138], "dozen": [130, 138], "insight": [130, 138], "coloss": [130, 138], "facilit": [130, 138], "setignoretokenid": [130, 131, 133, 134, 135, 136, 137, 138], "setminoutputlength": [130, 131, 133, 134, 136, 137, 138, 178], "settopk": [130, 131, 133, 134, 135, 136, 137, 138, 178], "setrepetitionpenalti": [130, 131, 133, 134, 135, 136, 137, 138, 178], "ctrl": [130, 131, 133, 134, 135, 136, 137, 138, 178], "setnorepeatngrams": [130, 131, 133, 134, 135, 136, 137, 138, 178], "setcach": 130, "use_cach": 130, "gpt2transform": 131, "caus": [131, 152], "goal": [131, 155], "direct": [131, 134], "10x": 131, "synthet": [131, 137], "unpreced": 131, "prime": 131, "lengthi": 131, "benefit": 131, "suffici": 131, "learner": 131, "typic": 131, "taskspecif": 131, "webpag": [131, 208], "webtext": 131, "coqa": 131, "exceed": 131, "127": 131, "fashion": [131, 139], "5b": 131, "underfit": 131, "reflect": [131, 134], "paragraph": [131, 141], "promis": 131, "leonardo": [131, 133, 136, 137], "1776": [131, 133], "came": [131, 133], "kingdom": [131, 133], "llama2transform": 133, "llama": [133, 136, 137], "chat": [133, 137], "7b": [133, 136, 137], "70b": 133, "13b": [133, 136], "4k": 133, "excit": 133, "reinforc": [133, 137], "feedback": [133, 137], "rlhf": 133, "safeti": [133, 137], "chatgpt": 133, "llama2": 133, "llam2": [133, 137], "facebookresearch": 133, "suitabl": [133, 137], "substitut": [133, 137], "close": [133, 137], "llama_2_7b_chat_hf_int4": 133, "m2m100transform": 134, "m2m100": 134, "seq": 134, "900": 134, "m2m100_418m": 134, "srclang": 134, "tgtlang": 134, "afrikaan": 134, "af": 134, "amhar": 134, "arab": 134, "asturian": 134, "ast": 134, "azerbaijani": 134, "az": 134, "bashkir": 134, "ba": 134, "belarusian": 134, "bulgarian": 134, "bg": 134, "bengali": 134, "breton": 134, "br": 134, "bosnian": 134, "catalan": 134, "valencian": 134, "ca": 134, "cebuano": 134, "ceb": 134, "czech": 134, "welsh": 134, "cy": 134, "da": [134, 136], "greeek": 134, "el": 134, "estonian": 134, "persian": 134, "fa": 134, "fulah": 134, "ff": 134, "fi": 134, "western": 134, "frisian": 134, "fy": 134, "irish": 134, "ga": 134, "gaelic": 134, "scottish": 134, "gd": 134, "galician": 134, "gl": 134, "gujarati": 134, "gu": 134, "hausa": 134, "hebrew": 134, "hindi": 134, "croatian": 134, "hr": 134, "haitian": 134, "creol": 134, "ht": 134, "armenian": 134, "hy": 134, "indonesian": 134, "igbo": 134, "ig": 134, "iloko": 134, "ilo": 134, "iceland": 134, "japanes": [134, 155], "ja": 134, "javanes": 134, "jv": 134, "georgian": 134, "ka": 134, "kazakh": 134, "kk": 134, "central": [134, 208], "khmer": 134, "km": 134, "kannada": 134, "kn": 134, "korean": [134, 155], "ko": 134, "luxembourgish": 134, "letzeburgesch": 134, "lb": 134, "ganda": 134, "lg": 134, "lingala": 134, "ln": 134, "lao": 134, "lo": 134, "lithuanian": 134, "lt": 134, "latvian": 134, "lv": 134, "malagasi": 134, "mg": 134, "macedonian": 134, "mk": 134, "malayalam": 134, "mongolian": 134, "mn": 134, "marathi": 134, "malai": 134, "burmes": 134, "nepali": 134, "ne": 134, "flemish": 134, "nl": 134, "northern": 134, "sotho": 134, "occitan": 134, "post": 134, "oc": 134, "oriya": 134, "panjabi": 134, "punjabi": 134, "pa": [134, 201, 217], "polish": 134, "pushto": 134, "pashto": 134, "romanian": 134, "moldavian": 134, "moldovan": 134, "ro": 134, "ru": 134, "sindhi": 134, "sd": 134, "sinhala": 134, "sinhales": 134, "si": 134, "slovak": 134, "sk": 134, "slovenian": 134, "sl": 134, "somali": 134, "albanian": 134, "sq": 134, "serbian": 134, "sr": 134, "swati": 134, "ss": 134, "sundanes": 134, "su": 134, "sw": 134, "tamil": 134, "ta": 134, "thai": 134, "th": 134, "tagalog": 134, "tl": 134, "tswana": 134, "tn": 134, "tr": 134, "ukrainian": 134, "uk": 134, "ur": 134, "uzbek": 134, "uz": 134, "vietnames": 134, "vi": 134, "wolof": 134, "wo": 134, "xhosa": 134, "xh": 134, "yiddish": 134, "yi": 134, "yoruba": 134, "yo": 134, "chines": [134, 155], "zh": [134, 155], "zulu": 134, "zu": 134, "beyond": 134, "massiv": 134, "worldwid": 134, "mine": 134, "spars": 134, "focu": 134, "wmt": 134, "reproduc": [134, 191, 207, 208], "m2m": 134, "setsrclang": 134, "settgtlang": 134, "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": 134, "life": 134, "chocol": 134, "mariantransform": 135, "marian": 135, "free": 135, "mainli": 135, "academ": 135, "notabl": [135, 136], "edinburgh": 135, "adam": 135, "mickiewicz": 135, "pozna\u0144": 135, "commerci": 135, "contributor": 135, "mariannmt": 135, "engin": [135, 148], "behind": [135, 137], "deploi": [135, 208], "opus_mt_en_fr": 135, "langid": 135, "maxinputlength": 135, "differenti": 135, "toolkit": 135, "setmaxinputlength": 135, "capit": [135, 141], "franc": 135, "quell": 135, "capital": 135, "devrait": 135, "savoir": 135, "fran\u00e7ai": 135, "setlangid": 135, "mistraltransform": 136, "mistral": 136, "34b": 136, "aspect": 136, "strike": 136, "balanc": 136, "rival": 136, "codellama": 136, "latter": 136, "gqa": 136, "quicker": 136, "compromis": 136, "streamlin": [136, 191, 207], "smoother": 136, "slide": 136, "swa": 136, "expand": 136, "offer": [136, 211, 213, 216], "reliabl": [136, 191, 207], "mistral_7b": 136, "vinci": 136, "invent": 136, "microscop": 136, "No": [136, 198, 210], "late": 136, "16th": 136, "phi2transform": 137, "phi": 137, "textbook": 137, "augment": 137, "websit": 137, "educ": 137, "assess": 137, "sens": [137, 216], "logic": 137, "showcas": 137, "nearli": 137, "hasn": 137, "intent": [137, 168], "craft": 137, "vital": 137, "societ": 137, "phi2": 137, "student": 137, "california": 137, "artifici": 137, "intellig": 137, "passion": 137, "skill": 137, "t5transform": 138, "t5": 138, "reconsid": 138, "hyper": 138, "t5_small": 138, "setstopateo": 138, "encount": 138, "setmaxnewtoken": 138, "setusecach": 138, "documentsimilarityrank": 139, "documentsimilarityrankerapproach": 139, "lsh": 139, "lib": 139, "approxim": 139, "aim": 139, "ranker": 139, "documentsimilarityrankermodel": 139, "doc_similarity_rank": 139, "enablecach": 139, "rdd": 139, "similaritymethod": 139, "neighbour": 139, "brp": 139, "bucket": 139, "euclidean": 139, "numberofneighbour": 139, "bucketlength": 139, "hash": 139, "numhasht": 139, "visibledist": 139, "identityrank": 139, "ident": 139, "debug": 139, "setsimilaritymethod": 139, "setnumberofneighbour": 139, "setbucketlength": 139, "setnumhasht": 139, "setvisibledist": 139, "setidentityrank": 139, "document_similarity_ranker_finish": 139, "documentsimilarityrankerfinish": 139, "finished_doc_similarity_rankings_id": 139, "finished_doc_similarity_rankings_neighbor": 139, "setextractnearestneighbor": 139, "docsimrankerpipelin": 139, "1510101612": 139, "1634839239": 139, "12448559591306324": 139, "612640902": 139, "1274183715": 139, "1220122862046063": 139, "1320876223": 139, "1293373212": 139, "17848855164122393": 139, "1548374770": 139, "1719102856": 139, "23297156732534166": 139, "visibl": 139, "inclus": 139, "asretriev": 139, "rag": 139, "py": [139, 171, 172, 180, 186, 190], "ins": [139, 172, 190], "uid": [139, 172, 190], "extractnearestneighbor": 139, "getinputcol": [139, 147, 159, 160, 173], "getoutputcol": [139, 156, 158, 159, 160, 164, 167, 173], "document_similarity_rank": 140, "contextspellcheck": 141, "contextspellcheckerapproach": [141, 143, 144], "noisi": 141, "spell": [141, 142, 143, 144, 166, 170, 214, 215, 216], "contextspellcheckermodel": [141, 143, 144], "surround": [141, 169], "edit": [141, 143, 144], "subword": 141, "checker": [141, 143, 144, 214], "languagemodelclass": 141, "lm": 141, "wordmaxdist": 141, "maxcandid": 141, "casestrategi": 141, "uppercas": 141, "errorthreshold": 141, "perplex": 141, "nlm": 141, "initialr": 141, "finalr": 141, "validationfract": 141, "datapoint": 141, "min": 141, "vocab": 141, "compoundcount": 141, "compound": 141, "classcount": 141, "tradeoff": 141, "weighteddistpath": 141, "levenshtein": [141, 143, 144], "maxwindowlen": 141, "rememb": 141, "maxsentlen": 141, "norvigsweetingapproach": [141, 143, 144, 217], "symmetricdeleteapproach": [141, 143, 144, 217], "depth": [141, 214], "explan": [141, 214], "awar": 141, "sherlock": 141, "spellcheck": [141, 143, 144], "setwordmaxdist": 141, "setepoch": 141, "setlanguagemodelclass": 141, "1650": 141, "addvocabclass": 141, "_name_": 141, "extra": [141, 143, 211], "dist": 141, "setmaxcandid": 141, "setcasestrategi": 141, "seterrorthreshold": 141, "setinitialr": 141, "setfinalr": 141, "setvalidationfract": 141, "fraction": 141, "setcompoundcount": 141, "setclasscount": 141, "settradeoff": 141, "alpha": 141, "setweighteddistpath": 141, "setmaxwindowlen": 141, "setmaxsentlen": 141, "sentlen": 141, "userdist": 141, "addregexclass": 141, "spellcheck_dl": 141, "gamma": 141, "decis": 141, "correctsymbol": 141, "comparelowcas": 141, "vocabfreq": 141, "idsvocab": 141, "vocabid": 141, "usenewlin": 141, "newlin": 141, "norvigsweetingmodel": [141, 143, 144], "symmetricdeletemodel": [141, 143, 144], "cold": 141, "dreari": 141, "countri": 141, "white": 141, "smow": 141, "setweight": 141, "setgamma": 141, "setvocabfreq": 141, "setidsvocab": 141, "setvocabid": 141, "setclass": 141, "getwordclass": 141, "updateregexclass": 141, "updat": 141, "updatevocabclass": 141, "setcorrectsymbol": 141, "setcomparelowcas": 141, "norvigsweet": 143, "norvig": 143, "bayesian": 143, "tokenpattern": 143, "sensit": [143, 146, 152], "doublevari": 143, "shortcircuit": 143, "frequencyprior": 143, "ham": 143, "intersect": 143, "wordsizeignor": 143, "dupslimit": 143, "duplic": 143, "reductlimit": 143, "attempt": 143, "vowelswaplimit": 143, "vowel": 143, "swap": 143, "corrector": 143, "gummi": [143, 144], "gummic": [143, 144], "gummier": [143, 144], "gummiest": [143, 144], "gummifer": [143, 144], "basi": [143, 144], "token_pattern": [143, 144], "setdoublevari": 143, "setshortcircuit": 143, "setfrequencyprior": 143, "symmetr": [143, 144], "delet": [143, 144, 211], "damerau": [143, 144], "transpos": [143, 144], "spellcheck_norvig": 143, "symspel": [143, 144], "somtim": 143, "wrrite": [143, 144], "wordz": [143, 144], "erong": [143, 144], "sometim": [143, 144, 211], "wrong": [143, 144], "symmetricdelet": 144, "deriv": 144, "teach": 144, "maxeditdist": 144, "frequencythreshold": [144, 155], "deletesthreshold": 144, "patttern": 144, "setmaxeditdist": 144, "setfrequencythreshold": [144, 155], "setdeletesthreshold": 144, "spellcheck_sd": 144, "spmetim": 144, "employ": 145, "stopwordsclean": [146, 159, 170], "mllib": [146, 208], "stopwordsremov": 146, "cleantoken": [146, 159, 170], "stopwords_en": 146, "jvm": [146, 184], "forth": 146, "setlocal": 146, "tfnerdlgraphbuildermodel": 147, "tfnerdlgraphbuild": 147, "sethiddenunitsnumb": 147, "assertiondlapproach": 147, "medicalnerapproach": 147, "gethiddenunitsnumb": 147, "srt": 147, "getgraphfold": 147, "setgraphfil": 147, "greaph": 147, "getgraphfil": 147, "chunktoken": 148, "flatten": 148, "artist": 148, "benezar": 148, "robert": 148, "farendel": 148, "graduat": 148, "luca": 148, "chunktokenizermodel": 148, "recursivetoken": 150, "recurs": [150, 168, 180, 184, 188], "infix": [150, 152], "qam": 150, "setprefix": 150, "setinfix": 150, "recursivetokenizermodel": 150, "regextoken": [151, 155, 212], "tolowercas": [151, 155], "positionalmask": 151, "guarante": 151, "increment": 151, "flag": 151, "eventu": 151, "settolowercas": [151, 155], "nthi": 151, "setpositionalmask": 151, "tokenizedsent": 152, "rulefactori": [152, 177], "targetpattern": 152, "grab": 152, "prefixpattern": 152, "suffixpattern": 152, "infixpattern": 152, "sub": 152, "won": 152, "exceptionspath": 152, "casesensitiveexcept": 152, "contextchar": 152, "splitchar": 152, "didn": 152, "jane": 152, "boyfriend": 152, "getinfixpattern": 152, "getsuffixpattern": 152, "getprefixpattern": 152, "getcontextchar": 152, "getsplitchar": 152, "settargetpattern": 152, "setprefixpattern": 152, "setsuffixpattern": 152, "setinfixpattern": 152, "addinfixpattern": 152, "setexcept": 152, "getexcept": 152, "setexceptionspath": 152, "addexcept": 152, "setcasesensitiveexcept": 152, "getcasesensitiveexcept": 152, "addcontextchar": 152, "setsplitchar": 152, "addsplitchar": 152, "piec": 152, "token_rul": 152, "token2chunk": 153, "17": [153, 200, 202], "wordsegment": 155, "wordsegmenterapproach": 155, "correspond": [155, 191], "rr": 155, "likewis": 155, "themselv": 155, "\u4e0a\u6d77": 155, "\u8ba1\u5212": 155, "\u5230": 155, "\u672c": 155, "\u4e16\u7eaa": 155, "\u672b": 155, "\u5b9e\u73b0": 155, "\u4eba\u5747": 155, "\u56fd\u5185": 155, "\u751f\u4ea7": 155, "\u603b\u503c": 155, "\u4e94\u5343": 155, "\u7f8e\u5143": 155, "\u4e0a": 155, "\u6d77": 155, "\u8ba1": 155, "\u5212": 155, "\u4e16": 155, "\u7eaa": 155, "\u5b9e": 155, "\u73b0": 155, "\u4eba": 155, "\u5747": 155, "\u56fd": 155, "\u5185": 155, "\u751f": 155, "\u4ea7": 155, "\u603b": 155, "ll\u503c": 155, "\u4e94": 155, "\u5343": 155, "\u7f8e": 155, "\u5143": 155, "shanghai": 155, "plan": 155, "dollar": 155, "capita": 155, "gdp": 155, "wordsegmentermodel": 155, "tip": 155, "frame": 155, "least": 155, "frequent": 155, "ambiguitythreshold": 155, "enableregextoken": 155, "xue": 155, "nianwen": 155, "volum": 155, "februari": 155, "aclweb": 155, "aclanthologi": 155, "o03": 155, "4002": 155, "chinese_train": 155, "utf8": 155, "\u5341": 155, "\u56db": 155, "\u4e0d": 155, "\u662f": 155, "setniter": 155, "trainingdataset": 155, "setambiguitythreshold": 155, "getfrequencythreshold": 155, "getambiguitythreshold": 155, "setenableregextoken": 155, "plit": 155, "words_seg": 155, "wordseg_pku": 155, "\u7136\u800c": 155, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 155, "\u9019\u6a23": 155, "\u7684": 155, "\u8655\u7406": 155, "\u4e5f": 155, "\u884d\u751f": 155, "\u4e86": 155, "\u4e00\u4e9b": 155, "\u554f\u984c": 155, "outputcol": [156, 158, 159, 160, 161, 164, 167], "inferschema": 156, "tmp": [156, 164, 184, 207], "librispeech_asr_dummy_clean_audio_array_parquet": 156, "float_arrai": 156, "chunkcol": 157, "stringtyp": 157, "setisarrai": 157, "startcol": 157, "startcolbytokenindex": 157, "isarrai": 157, "failonmiss": 157, "chunkassembl": 157, "setchunkcol": 157, "setstartcol": 157, "setstartcolbytokenindex": 157, "setfailonmiss": 157, "disabl": [158, 167], "idcol": [158, 167], "metadatacol": [158, 167], "cleanupmod": [158, 167], "cleanup": [158, 167], "inplac": [158, 167], "inplace_ful": [158, 167], "shrink_ful": [158, 167], "each_ful": [158, 167], "delete_ful": [158, 167], "setidcol": [158, 167], "setmetadatacol": [158, 167], "usabl": 159, "lda": 159, "forest": 159, "featurecol": 159, "cleanannot": [159, 160, 161], "outputasvector": 159, "gloveembed": 159, "finished_sentence_embed": 159, "resultwiths": 159, "1619900017976761": 159, "045552998781204224": 159, "03229299932718277": 159, "685609996318": 159, "42416998744010925": 159, "1378999948501587": 159, "5717899799346924": 159, "5078899860382": 159, "08621499687433243": 159, "15772999823093414": 159, "06067200005054474": 159, "395359992980": 159, "4970499873161316": 159, "7164199948310852": 159, "40119001269340515": 159, "05761000141501": 159, "08170200139284134": 159, "7159299850463867": 159, "20677000284194946": 159, "0295659992843": 159, "valuesplitsymbol": 160, "annotationsplitsymbol": 160, "includemetadata": 160, "outputasarrai": [160, 161], "parseembeddingsvector": 160, "setvaluesplitsymbol": 160, "setannotationsplitsymbol": 160, "setincludemetadata": [160, 212], "setoutputasarrai": [160, 161], "setparseembeddingsvector": 160, "finishedresult": 161, "hasrecursivefit": [162, 163], "java_obj": [162, 187, 190], "py4j": [162, 163, 190], "java_gatewai": [162, 163, 190], "javaobject": [162, 163, 190], "recursivepipelin": [162, 163, 168, 173], "hasrecursivetransform": 163, "doc2_chunk": [165, 184], "embeddings_finish": [165, 184], "graph_finish": [165, 184], "has_recursive_fit": [165, 184], "has_recursive_transform": [165, 184], "light_pipelin": [165, 184], "recursive_pipelin": [165, 184], "token_assembl": [165, 184], "lightpipelin": [166, 194, 215], "parse_embed": [166, 194], "hold": [166, 215], "principl": [166, 215], "everyth": [166, 215, 216], "fullannot": [166, 194], "happi": [166, 210, 212, 215, 216], "prp": [166, 198, 200, 210, 215, 216, 217], "rb": [166, 200, 210, 215, 216, 217], "optional_target": [166, 194], "explain_document_pipelin": [166, 183, 194, 210, 215, 216], "dict_kei": [166, 194], "fullannotateimag": [166, 194], "path_to_imag": [166, 194], "setignoreunsupport": 166, "unsupport": 166, "annotatormodel": [166, 172, 195], "getignoreunsupport": 166, "text2": 167, "document1": 167, "document2": 167, "arg": [168, 187], "kwarg": 168, "decid": 168, "behav": 168, "exactli": 168, "recursivepipelinemodel": 168, "pipeline_model": [168, 191, 207], "intend": 168, "tab": [169, 191, 207], "escap": 169, "quot": 169, "inputformat": 169, "csvdelimit": 169, "defailt": 169, "comma": 169, "escapecsvdelimit": 169, "table_csv": 169, "csv_data": 169, "input_format": 169, "setcsvdelimit": 169, "setescapecsvdelimit": 169, "tokenassembl": 170, "cleantext": 170, "opensourc": 170, "annotatorapproach": [171, 180, 191], "annotatorproperti": 173, "setlazyannot": 173, "lazili": 173, "getlazyannot": 173, "annotator_approach": [176, 184], "annotator_model": [176, 184], "annotator_properti": [176, 184], "coverage_result": [176, 184], "match_strategi": [176, 184], "recursive_annotator_approach": [176, 184], "regard": 177, "constant": [177, 179], "hasembeddingsproperti": 178, "getdimens": 178, "setnreturnsequ": 178, "recursiveannotatorapproach": 180, "fo": 182, "assist": 183, "map_annot": 183, "f": [183, 191, 207], "output_typ": 183, "udf": 183, "userdefinedfunct": 183, "def": 183, "nnp_token": 183, "lambda": 183, "alia": 183, "epeu": 183, "map_annotations_arrai": 183, "map_annotations_strict": 183, "map_annotations_col": 183, "output_column": 183, "annotatyon_typ": 183, "chunks_df": 183, "pos_chunk": 183, "vbz": [183, 197, 217], "filter_by_annotations_col": 183, "filter_po": 183, "explode_annotations_col": 183, "annotator_java_ml": [184, 188], "annotator_transform": [184, 188], "extended_java_wrapp": [184, 188], "params_getters_sett": [184, 188], "comet": [184, 192, 209], "pretrained_pipelin": [184, 193], "resource_download": [184, 193], "pub_tat": [184, 199], "annotation_audio": 184, "annotation_imag": 184, "apple_silicon": 184, "aarch64": 184, "cache_fold": 184, "log_fold": 184, "cluster_tmp_dir": 184, "real_time_output": 184, "output_level": 184, "correctli": 184, "maco": 184, "linux": 184, "alloc": 184, "directori": [184, 195, 207], "cache_pretrain": 184, "temporarili": 184, "unpack": 184, "hadoop": 184, "dir": 184, "s3": [184, 195], "hdf": 184, "dbf": 184, "annotator_log": 184, "annotatorjavamlread": 185, "mixin": 185, "javamlread": 185, "classmethod": 185, "mlreader": 185, "clazz": 185, "rl": 185, "javaparam": 185, "annotatortransform": 186, "_java_obj": 186, "javawrapp": 187, "extendedjavawrapp": 187, "new_java_arrai": 187, "pylist": 187, "java_class": 187, "todo": 187, "paramsgetterssett": 189, "getparamvalu": 189, "paramnam": 189, "setparamvalu": 189, "recursiveestim": 190, "recursivetransform": 190, "cometlogg": [191, 207], "workspac": 191, "project_nam": [191, 207], "comet_mod": [191, 207], "experiment_id": 191, "experiment_kwarg": 191, "logger": [191, 207], "meta": [191, 209], "practition": [191, 207], "lifecycl": [191, 207, 209], "track": [191, 207, 208], "outputlogpath": [191, 207], "onlin": [191, 207], "reus": 191, "importerror": 191, "output_log_path": [191, 207], "embd": [191, 207], "setshuffleperepoch": [191, 207], "logdir": [191, 207], "interfac": [191, 207, 215], "comet_ml": [191, 207], "log_pipeline_paramet": [191, 207], "log_visu": [191, 207], "html": [191, 207], "viz": [191, 207], "upload": 191, "colum": [191, 207], "ner_chunk": [191, 207], "sparknlp_displai": [191, 207], "nervisu": [191, 207], "idx": [191, 207], "enumer": [191, 207], "label_col": [191, 207], "document_col": [191, 207], "return_html": [191, 207], "log_metr": [191, 207], "sklearn": [191, 207], "preprocess": [191, 207], "multilabelbinar": [191, 207], "classification_report": [191, 207], "preds_df": [191, 207], "topanda": [191, 207], "mlb": [191, 207], "y_true": [191, 207], "fit_transform": [191, 207], "y_pred": [191, 207], "output_dict": [191, 207], "log_paramet": 191, "log_completed_run": 191, "log_file_path": 191, "log_asset": 191, "asset_path": 191, "asset": 191, "log_asset_data": 191, "interv": 191, "refresh": 191, "outstand": 191, "disk_loc": 194, "light_model": 194, "gather": 194, "resourcedownload": [195, 211, 216], "showpublicmodel": [195, 211], "onto_100": 195, "onto_300": 195, "ner_dl_bert": 195, "similarli": 195, "showpublicpipelin": [195, 216], "check_spel": [195, 216], "match_datetim": [195, 216], "downloadmodel": 195, "reader": 195, "j_dwn": 195, "pythonresourcedownload": 195, "obj": [195, 198], "downloadmodeldirectli": 195, "unzip": 195, "downloadpipelin": 195, "clearcach": 195, "clear": 195, "filer": 195, "showuncategorizedresourc": 195, "showavailableannot": 195, "documentcol": [197, 198], "sentencecol": [197, 198], "tokencol": 197, "conlllabelindex": 197, "conllposindex": 197, "conlldocidcol": 197, "doc_id": [197, 201], "textcol": [197, 198], "labelcol": 197, "includedocid": 197, "docstart": [197, 217], "eu": [197, 217], "np": [197, 217], "reject": [197, 217], "vp": [197, 217], "misc": [197, 217], "boycott": [197, 217], "british": [197, 217], "lamb": [197, 217], "blackburn": 197, "brussel": 197, "1996": 197, "08": 197, "storage_level": 197, "storagelevel": 197, "disk_onli": 197, "lift": 197, "persist": 197, "uposcol": 198, "upo": 198, "xposcol": 198, "xpo": 198, "lemmacol": 198, "sent_id": 198, "sell": 198, "pron": 198, "nom": 198, "plur": 198, "_": 198, "tens": 198, "conj": 198, "cc": 198, "spaceaft": 198, "punct": 198, "conllufil": [198, 217], "conlldataset": [198, 217], "morph": 198, "Into": 198, "googleo": 198, "sconj": 198, "propn": 198, "adp": 198, "wp": 198, "vbd": [198, 200, 217], "ago": [200, 217], "posdf": 200, "61": 200, "67": [200, 201, 217], "nonexecut": 200, "69": 200, "76": 200, "director": 200, "78": 200, "81": 200, "84": 200, "outputposcol": 200, "outputdocumentcol": 200, "outputtextcol": 200, "pubtat": [201, 214], "medic": [201, 217], "titl": [201, 217], "medment": [201, 217], "25763772": [201, 217], "dctn4": [201, 217], "t116": [201, 217], "t123": [201, 217], "c4308010": [201, 217], "63": [201, 217], "chronic": [201, 217], "pseudomona": [201, 217], "aeruginosa": [201, 217], "infect": [201, 217], "t047": [201, 217], "c0854135": [201, 217], "82": [201, 217], "cystic": [201, 217], "fibrosi": [201, 217], "c0010674": [201, 217], "120": [201, 217], "124": [201, 217], "139": [201, 217], "pubtatorfil": 201, "corpus_pubtator_sampl": 201, "pubtatordataset": 201, "finished_token": [201, 212], "finished_po": 201, "finished_n": 201, "finished_token_metadata": 201, "finished_pos_metadata": 201, "finished_label_metadata": 201, "mo": 201, "ispaddedtoken": 201, "pad": 201, "spacytoannot": 202, "token_spac": 202, "sentence_end": 202, "spaci": 202, "multi_doc_token": 202, "went": 202, "night": 202, "bought": 202, "bread": 202, "54": 202, "overview": [206, 214], "workflow": 207, "dedic": 207, "account": 207, "inspect": 207, "init": 207, "sparknlp_experi": 207, "offline_directori": 207, "later": 207, "nativ": 208, "record": 208, "registri": 208, "send": 209, "mlflow": 209, "content": [210, 216], "clearli": 210, "explain_document_ml": [210, 215, 216], "approx": [210, 215, 216], "mb": [210, 215, 216], "ok": [210, 215, 216], "spearhead": 211, "produc": 211, "declar": 211, "accordingli": 211, "extra_loc": 211, "classifierdl_use_trec50": 211, "classifierdl_use_spam": 211, "column_nam": 211, "preced": 211, "interchang": 212, "road": 212, "proce": 212, "At": 212, "constantli": 216, "train_po": 217, "training_conl": 217, "train_corpu": 217, "withcolumnrenam": 217, "trainingpubtatordf": 217, "corpus_pubt": 217}, "objects": {"": [[184, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [95, 0, 0, "-", "annotator"], [165, 0, 0, "-", "base"], [176, 0, 0, "-", "common"], [183, 0, 0, "-", "functions"], [188, 0, 0, "-", "internal"], [192, 0, 0, "-", "logging"], [193, 0, 0, "-", "pretrained"], [184, 3, 1, "", "start"], [199, 0, 0, "-", "training"], [204, 0, 0, "-", "upload_to_hub"], [205, 0, 0, "-", "util"], [184, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [31, 0, 0, "-", "classifier_dl"], [51, 0, 0, "-", "coref"], [55, 0, 0, "-", "cv"], [59, 0, 0, "-", "date2_chunk"], [61, 0, 0, "-", "dependency"], [63, 0, 0, "-", "document_character_text_splitter"], [64, 0, 0, "-", "document_normalizer"], [65, 0, 0, "-", "document_token_splitter"], [66, 0, 0, "-", "document_token_splitter_test"], [78, 0, 0, "-", "embeddings"], [93, 0, 0, "-", "er"], [94, 0, 0, "-", "graph_extraction"], [96, 0, 0, "-", "keyword_extraction"], [98, 0, 0, "-", "ld_dl"], [100, 0, 0, "-", "lemmatizer"], [103, 0, 0, "-", "matcher"], [107, 0, 0, "-", "n_gram_generator"], [108, 0, 0, "-", "ner"], [115, 0, 0, "-", "normalizer"], [116, 0, 0, "-", "openai"], [121, 0, 0, "-", "param"], [122, 0, 0, "-", "pos"], [124, 0, 0, "-", "sentence"], [127, 0, 0, "-", "sentiment"], [132, 0, 0, "-", "seq2seq"], [140, 0, 0, "-", "similarity"], [142, 0, 0, "-", "spell_check"], [145, 0, 0, "-", "stemmer"], [146, 0, 0, "-", "stop_words_cleaner"], [147, 0, 0, "-", "tf_ner_dl_graph_builder"], [149, 0, 0, "-", "token"], [153, 0, 0, "-", "token2_chunk"], [154, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "deberta_for_zero_shot_classification"], [27, 0, 0, "-", "distil_bert_for_question_answering"], [28, 0, 0, "-", "distil_bert_for_sequence_classification"], [29, 0, 0, "-", "distil_bert_for_token_classification"], [30, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [32, 0, 0, "-", "longformer_for_question_answering"], [33, 0, 0, "-", "longformer_for_sequence_classification"], [34, 0, 0, "-", "longformer_for_token_classification"], [35, 0, 0, "-", "mpnet_for_question_answering"], [36, 0, 0, "-", "mpnet_for_sequence_classification"], [37, 0, 0, "-", "mpnet_for_token_classification"], [38, 0, 0, "-", "multi_classifier_dl"], [39, 0, 0, "-", "roberta_for_question_answering"], [40, 0, 0, "-", "roberta_for_sequence_classification"], [41, 0, 0, "-", "roberta_for_token_classification"], [42, 0, 0, "-", "roberta_for_zero_shot_classification"], [43, 0, 0, "-", "sentiment_dl"], [44, 0, 0, "-", "tapas_for_question_answering"], [45, 0, 0, "-", "xlm_roberta_for_question_answering"], [46, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [47, 0, 0, "-", "xlm_roberta_for_token_classification"], [48, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [49, 0, 0, "-", "xlnet_for_sequence_classification"], [50, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setCoalesceSentences"], [26, 2, 1, "", "setConfigProtoBytes"], [26, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setCoalesceSentences"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[34, 2, 1, "", "getClasses"], [34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[37, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[38, 1, 1, "", "MultiClassifierDLApproach"], [38, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[38, 2, 1, "", "setThreshold"], [38, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[39, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[40, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setCoalesceSentences"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[41, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[41, 2, 1, "", "getClasses"], [41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[42, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"], [42, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[43, 1, 1, "", "SentimentDLApproach"], [43, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setThreshold"], [43, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setThreshold"], [43, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[44, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[45, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[46, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setCoalesceSentences"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[47, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[47, 2, 1, "", "getClasses"], [47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[48, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[48, 2, 1, "", "getClasses"], [48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setCoalesceSentences"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[49, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setCoalesceSentences"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[50, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[52, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[52, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"], [52, 2, 1, "", "setMaxSegmentLength"], [52, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[53, 0, 0, "-", "clip_for_zero_shot_classification"], [54, 0, 0, "-", "convnext_for_image_classification"], [56, 0, 0, "-", "swin_for_image_classification"], [57, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [58, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[53, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[53, 2, 1, "", "getCandidateLabels"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[54, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[54, 2, 1, "", "getClasses"], [54, 2, 1, "", "loadSavedModel"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setConfigProtoBytes"], [54, 2, 1, "", "setCropPct"], [54, 2, 1, "", "setDoRescale"], [54, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[56, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[56, 2, 1, "", "getClasses"], [56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[57, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[58, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[58, 2, 1, "", "getClasses"], [58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[59, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[59, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[60, 0, 0, "-", "dependency_parser"], [62, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[60, 1, 1, "", "DependencyParserApproach"], [60, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[60, 2, 1, "", "setConllU"], [60, 2, 1, "", "setDependencyTreeBank"], [60, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[60, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[62, 1, 1, "", "TypedDependencyParserApproach"], [62, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[62, 2, 1, "", "setConll2009"], [62, 2, 1, "", "setConllU"], [62, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[62, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[63, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[63, 2, 1, "", "setChunkOverlap"], [63, 2, 1, "", "setChunkSize"], [63, 2, 1, "", "setExplodeSplits"], [63, 2, 1, "", "setKeepSeparators"], [63, 2, 1, "", "setPatternsAreRegex"], [63, 2, 1, "", "setSplitPatterns"], [63, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[64, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[64, 2, 1, "", "setAction"], [64, 2, 1, "", "setEncoding"], [64, 2, 1, "", "setLowercase"], [64, 2, 1, "", "setPatterns"], [64, 2, 1, "", "setPolicy"], [64, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[65, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[65, 2, 1, "", "setExplodeSplits"], [65, 2, 1, "", "setNumTokens"], [65, 2, 1, "", "setTokenOverlap"], [65, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[66, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[66, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[67, 0, 0, "-", "albert_embeddings"], [68, 0, 0, "-", "bert_embeddings"], [69, 0, 0, "-", "bert_sentence_embeddings"], [70, 0, 0, "-", "bge_embeddings"], [71, 0, 0, "-", "camembert_embeddings"], [72, 0, 0, "-", "chunk_embeddings"], [73, 0, 0, "-", "deberta_embeddings"], [74, 0, 0, "-", "distil_bert_embeddings"], [75, 0, 0, "-", "doc2vec"], [76, 0, 0, "-", "e5_embeddings"], [77, 0, 0, "-", "elmo_embeddings"], [79, 0, 0, "-", "instructor_embeddings"], [80, 0, 0, "-", "longformer_embeddings"], [81, 0, 0, "-", "mpnet_embeddings"], [82, 0, 0, "-", "roberta_embeddings"], [83, 0, 0, "-", "roberta_sentence_embeddings"], [84, 0, 0, "-", "sentence_embeddings"], [85, 0, 0, "-", "uae_embeddings"], [86, 0, 0, "-", "universal_sentence_encoder"], [87, 0, 0, "-", "word2vec"], [88, 0, 0, "-", "word_embeddings"], [89, 0, 0, "-", "xlm_roberta_embeddings"], [90, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [91, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[67, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[68, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[69, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"], [69, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[70, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[71, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[72, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[72, 2, 1, "", "setPoolingStrategy"], [72, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[73, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[74, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[75, 1, 1, "", "Doc2VecApproach"], [75, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[75, 2, 1, "", "setMaxIter"], [75, 2, 1, "", "setMaxSentenceLength"], [75, 2, 1, "", "setMinCount"], [75, 2, 1, "", "setNumPartitions"], [75, 2, 1, "", "setSeed"], [75, 2, 1, "", "setStepSize"], [75, 2, 1, "", "setVectorSize"], [75, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[75, 2, 1, "", "getVectors"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[76, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[77, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[77, 2, 1, "", "loadSavedModel"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setBatchSize"], [77, 2, 1, "", "setConfigProtoBytes"], [77, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[79, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"], [79, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[80, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[81, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[82, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[83, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[83, 2, 1, "", "loadSavedModel"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[84, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[84, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[85, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[86, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[86, 2, 1, "", "loadSavedModel"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setConfigProtoBytes"], [86, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[87, 1, 1, "", "Word2VecApproach"], [87, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[87, 2, 1, "", "setMaxIter"], [87, 2, 1, "", "setMaxSentenceLength"], [87, 2, 1, "", "setMinCount"], [87, 2, 1, "", "setNumPartitions"], [87, 2, 1, "", "setSeed"], [87, 2, 1, "", "setStepSize"], [87, 2, 1, "", "setVectorSize"], [87, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[87, 2, 1, "", "getVectors"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[88, 1, 1, "", "WordEmbeddings"], [88, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[88, 2, 1, "", "setReadCacheSize"], [88, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[88, 2, 1, "", "loadStorage"], [88, 2, 1, "", "overallCoverage"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setReadCacheSize"], [88, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[89, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[89, 2, 1, "", "loadSavedModel"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[90, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[90, 2, 1, "", "loadSavedModel"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[91, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[91, 2, 1, "", "loadSavedModel"], [91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[92, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[92, 1, 1, "", "EntityRulerApproach"], [92, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[92, 2, 1, "", "setAlphabetResource"], [92, 2, 1, "", "setPatternsResource"], [92, 2, 1, "", "setSentenceMatch"], [92, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[94, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[94, 2, 1, "", "setDelimiter"], [94, 2, 1, "", "setDependencyParserModel"], [94, 2, 1, "", "setEntityTypes"], [94, 2, 1, "", "setExplodeEntities"], [94, 2, 1, "", "setIncludeEdges"], [94, 2, 1, "", "setMaxSentenceSize"], [94, 2, 1, "", "setMergeEntities"], [94, 2, 1, "", "setMergeEntitiesIOBFormat"], [94, 2, 1, "", "setMinSentenceSize"], [94, 2, 1, "", "setPosModel"], [94, 2, 1, "", "setRelationshipTypes"], [94, 2, 1, "", "setRootTokens"], [94, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[97, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[97, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[97, 2, 1, "", "getStopWords"], [97, 2, 1, "", "loadDefaultStopWords"], [97, 2, 1, "", "setMaxNGrams"], [97, 2, 1, "", "setMinNGrams"], [97, 2, 1, "", "setNKeywords"], [97, 2, 1, "", "setStopWords"], [97, 2, 1, "", "setThreshold"], [97, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[99, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[99, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setCoalesceSentences"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setThreshold"], [99, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[100, 1, 1, "", "Lemmatizer"], [100, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[100, 2, 1, "", "setDictionary"], [100, 2, 1, "", "setFormCol"], [100, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[100, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[101, 0, 0, "-", "big_text_matcher"], [102, 0, 0, "-", "date_matcher"], [104, 0, 0, "-", "multi_date_matcher"], [105, 0, 0, "-", "regex_matcher"], [106, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[101, 1, 1, "", "BigTextMatcher"], [101, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[101, 2, 1, "", "setCaseSensitive"], [101, 2, 1, "", "setEntities"], [101, 2, 1, "", "setMergeOverlapping"], [101, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[101, 2, 1, "", "loadStorage"], [101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setCaseSensitive"], [101, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[102, 1, 1, "", "DateMatcher"], [102, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[102, 2, 1, "", "setAnchorDateDay"], [102, 2, 1, "", "setAnchorDateMonth"], [102, 2, 1, "", "setAnchorDateYear"], [102, 2, 1, "", "setDefaultDayWhenMissing"], [102, 2, 1, "", "setInputFormats"], [102, 2, 1, "", "setOutputFormat"], [102, 2, 1, "", "setReadMonthFirst"], [102, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[104, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[105, 1, 1, "", "RegexMatcher"], [105, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[105, 2, 1, "", "setDelimiter"], [105, 2, 1, "", "setExternalRules"], [105, 2, 1, "", "setRules"], [105, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[106, 1, 1, "", "TextMatcher"], [106, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[106, 2, 1, "", "setBuildFromTokens"], [106, 2, 1, "", "setCaseSensitive"], [106, 2, 1, "", "setEntities"], [106, 2, 1, "", "setEntityValue"], [106, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setBuildFromTokens"], [106, 2, 1, "", "setEntityValue"], [106, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[107, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[107, 2, 1, "", "setDelimiter"], [107, 2, 1, "", "setEnableCumulative"], [107, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[109, 0, 0, "-", "ner_approach"], [110, 0, 0, "-", "ner_converter"], [111, 0, 0, "-", "ner_crf"], [112, 0, 0, "-", "ner_dl"], [113, 0, 0, "-", "ner_overwriter"], [114, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[109, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[109, 2, 1, "", "getLabelColumn"], [109, 2, 1, "", "setEntities"], [109, 2, 1, "", "setLabelColumn"], [109, 2, 1, "", "setMaxEpochs"], [109, 2, 1, "", "setMinEpochs"], [109, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[110, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[110, 2, 1, "", "setNerHasNoSchema"], [110, 2, 1, "", "setPreservePosition"], [110, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[111, 1, 1, "", "NerCrfApproach"], [111, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[111, 2, 1, "", "setC0"], [111, 2, 1, "", "setExternalFeatures"], [111, 2, 1, "", "setIncludeConfidence"], [111, 2, 1, "", "setL2"], [111, 2, 1, "", "setLossEps"], [111, 2, 1, "", "setMinW"], [111, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[111, 2, 1, "", "pretrained"], [111, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[112, 1, 1, "", "NerDLApproach"], [112, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[112, 2, 1, "", "setBatchSize"], [112, 2, 1, "", "setBestModelMetric"], [112, 2, 1, "", "setConfigProtoBytes"], [112, 2, 1, "", "setDropout"], [112, 2, 1, "", "setEnableMemoryOptimizer"], [112, 2, 1, "", "setGraphFolder"], [112, 2, 1, "", "setIncludeAllConfidenceScores"], [112, 2, 1, "", "setIncludeConfidence"], [112, 2, 1, "", "setLr"], [112, 2, 1, "", "setPo"], [112, 2, 1, "", "setUseBestModel"], [112, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[112, 2, 1, "", "pretrained"], [112, 2, 1, "", "setConfigProtoBytes"], [112, 2, 1, "", "setIncludeAllConfidenceScores"], [112, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[113, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[113, 2, 1, "", "setNerWords"], [113, 2, 1, "", "setNewNerEntity"], [113, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[114, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[114, 2, 1, "", "getClasses"], [114, 2, 1, "", "load"], [114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setEntityDefinitions"], [114, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[115, 1, 1, "", "Normalizer"], [115, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[115, 2, 1, "", "setCleanupPatterns"], [115, 2, 1, "", "setLowercase"], [115, 2, 1, "", "setMaxLength"], [115, 2, 1, "", "setMinLength"], [115, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[117, 0, 0, "-", "openai_completion"], [118, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[117, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[117, 2, 1, "", "setBestOf"], [117, 2, 1, "", "setEcho"], [117, 2, 1, "", "setFrequencyPenalty"], [117, 2, 1, "", "setLogitBias"], [117, 2, 1, "", "setLogprobs"], [117, 2, 1, "", "setMaxTokens"], [117, 2, 1, "", "setModel"], [117, 2, 1, "", "setNumberOfCompletions"], [117, 2, 1, "", "setPresencePenalty"], [117, 2, 1, "", "setStop"], [117, 2, 1, "", "setSuffix"], [117, 2, 1, "", "setTemperature"], [117, 2, 1, "", "setTopP"], [117, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[118, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[118, 2, 1, "", "setModel"], [118, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[119, 0, 0, "-", "classifier_encoder"], [120, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[119, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[119, 2, 1, "", "setBatchSize"], [119, 2, 1, "", "setConfigProtoBytes"], [119, 2, 1, "", "setLabelColumn"], [119, 2, 1, "", "setLr"], [119, 2, 1, "", "setMaxEpochs"], [119, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[120, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[120, 2, 1, "", "setEnableOutputLogs"], [120, 2, 1, "", "setEvaluationLogExtended"], [120, 2, 1, "", "setOutputLogsPath"], [120, 2, 1, "", "setTestDataset"], [120, 2, 1, "", "setValidationSplit"], [120, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[123, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[123, 1, 1, "", "PerceptronApproach"], [123, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[123, 2, 1, "", "getNIterations"], [123, 2, 1, "", "setIterations"], [123, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[123, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[125, 0, 0, "-", "sentence_detector"], [126, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[125, 1, 1, "", "SentenceDetector"], [125, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[125, 2, 1, "", "setCustomBounds"], [125, 2, 1, "", "setCustomBoundsStrategy"], [125, 2, 1, "", "setDetectLists"], [125, 2, 1, "", "setExplodeSentences"], [125, 2, 1, "", "setMaxLength"], [125, 2, 1, "", "setMinLength"], [125, 2, 1, "", "setSplitLength"], [125, 2, 1, "", "setUseAbbreviations"], [125, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[126, 1, 1, "", "SentenceDetectorDLApproach"], [126, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[126, 2, 1, "", "setEpochsNumber"], [126, 2, 1, "", "setExplodeSentences"], [126, 2, 1, "", "setImpossiblePenultimates"], [126, 2, 1, "", "setModel"], [126, 2, 1, "", "setOutputLogsPath"], [126, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[126, 2, 1, "", "pretrained"], [126, 2, 1, "", "setCustomBounds"], [126, 2, 1, "", "setExplodeSentences"], [126, 2, 1, "", "setImpossiblePenultimates"], [126, 2, 1, "", "setMaxLength"], [126, 2, 1, "", "setMinLength"], [126, 2, 1, "", "setModel"], [126, 2, 1, "", "setSplitLength"], [126, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[128, 0, 0, "-", "sentiment_detector"], [129, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[128, 1, 1, "", "SentimentDetector"], [128, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[128, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[129, 1, 1, "", "ViveknSentimentApproach"], [129, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[129, 2, 1, "", "setPruneCorpus"], [129, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[129, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[130, 0, 0, "-", "bart_transformer"], [131, 0, 0, "-", "gpt2_transformer"], [133, 0, 0, "-", "llama2_transformer"], [134, 0, 0, "-", "m2m100_transformer"], [135, 0, 0, "-", "marian_transformer"], [136, 0, 0, "-", "mistral_transformer"], [137, 0, 0, "-", "phi2_transformer"], [138, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[130, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[130, 2, 1, "", "loadSavedModel"], [130, 2, 1, "", "pretrained"], [130, 2, 1, "", "setBeamSize"], [130, 2, 1, "", "setCache"], [130, 2, 1, "", "setConfigProtoBytes"], [130, 2, 1, "", "setDoSample"], [130, 2, 1, "", "setIgnoreTokenIds"], [130, 2, 1, "", "setMaxOutputLength"], [130, 2, 1, "", "setMinOutputLength"], [130, 2, 1, "", "setNoRepeatNgramSize"], [130, 2, 1, "", "setRepetitionPenalty"], [130, 2, 1, "", "setTask"], [130, 2, 1, "", "setTemperature"], [130, 2, 1, "", "setTopK"], [130, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[131, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[131, 2, 1, "", "loadSavedModel"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setConfigProtoBytes"], [131, 2, 1, "", "setDoSample"], [131, 2, 1, "", "setIgnoreTokenIds"], [131, 2, 1, "", "setMaxOutputLength"], [131, 2, 1, "", "setMinOutputLength"], [131, 2, 1, "", "setNoRepeatNgramSize"], [131, 2, 1, "", "setRepetitionPenalty"], [131, 2, 1, "", "setTask"], [131, 2, 1, "", "setTemperature"], [131, 2, 1, "", "setTopK"], [131, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[133, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[133, 2, 1, "", "loadSavedModel"], [133, 2, 1, "", "pretrained"], [133, 2, 1, "", "setConfigProtoBytes"], [133, 2, 1, "", "setDoSample"], [133, 2, 1, "", "setIgnoreTokenIds"], [133, 2, 1, "", "setMaxOutputLength"], [133, 2, 1, "", "setMinOutputLength"], [133, 2, 1, "", "setNoRepeatNgramSize"], [133, 2, 1, "", "setRepetitionPenalty"], [133, 2, 1, "", "setTemperature"], [133, 2, 1, "", "setTopK"], [133, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[134, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[134, 2, 1, "", "loadSavedModel"], [134, 2, 1, "", "pretrained"], [134, 2, 1, "", "setBeamSize"], [134, 2, 1, "", "setConfigProtoBytes"], [134, 2, 1, "", "setDoSample"], [134, 2, 1, "", "setIgnoreTokenIds"], [134, 2, 1, "", "setMaxOutputLength"], [134, 2, 1, "", "setMinOutputLength"], [134, 2, 1, "", "setNoRepeatNgramSize"], [134, 2, 1, "", "setRepetitionPenalty"], [134, 2, 1, "", "setSrcLang"], [134, 2, 1, "", "setTemperature"], [134, 2, 1, "", "setTgtLang"], [134, 2, 1, "", "setTopK"], [134, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[135, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[135, 2, 1, "", "loadSavedModel"], [135, 2, 1, "", "pretrained"], [135, 2, 1, "", "setConfigProtoBytes"], [135, 2, 1, "", "setDoSample"], [135, 2, 1, "", "setIgnoreTokenIds"], [135, 2, 1, "", "setLangId"], [135, 2, 1, "", "setMaxInputLength"], [135, 2, 1, "", "setMaxOutputLength"], [135, 2, 1, "", "setNoRepeatNgramSize"], [135, 2, 1, "", "setRandomSeed"], [135, 2, 1, "", "setRepetitionPenalty"], [135, 2, 1, "", "setTemperature"], [135, 2, 1, "", "setTopK"], [135, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[136, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[136, 2, 1, "", "loadSavedModel"], [136, 2, 1, "", "pretrained"], [136, 2, 1, "", "setConfigProtoBytes"], [136, 2, 1, "", "setDoSample"], [136, 2, 1, "", "setIgnoreTokenIds"], [136, 2, 1, "", "setMaxOutputLength"], [136, 2, 1, "", "setMinOutputLength"], [136, 2, 1, "", "setNoRepeatNgramSize"], [136, 2, 1, "", "setRepetitionPenalty"], [136, 2, 1, "", "setTemperature"], [136, 2, 1, "", "setTopK"], [136, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[137, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[137, 2, 1, "", "loadSavedModel"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setConfigProtoBytes"], [137, 2, 1, "", "setDoSample"], [137, 2, 1, "", "setIgnoreTokenIds"], [137, 2, 1, "", "setMaxOutputLength"], [137, 2, 1, "", "setMinOutputLength"], [137, 2, 1, "", "setNoRepeatNgramSize"], [137, 2, 1, "", "setRepetitionPenalty"], [137, 2, 1, "", "setTemperature"], [137, 2, 1, "", "setTopK"], [137, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[138, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[138, 2, 1, "", "loadSavedModel"], [138, 2, 1, "", "pretrained"], [138, 2, 1, "", "setConfigProtoBytes"], [138, 2, 1, "", "setDoSample"], [138, 2, 1, "", "setIgnoreTokenIds"], [138, 2, 1, "", "setMaxNewTokens"], [138, 2, 1, "", "setMaxOutputLength"], [138, 2, 1, "", "setMinOutputLength"], [138, 2, 1, "", "setNoRepeatNgramSize"], [138, 2, 1, "", "setRepetitionPenalty"], [138, 2, 1, "", "setStopAtEos"], [138, 2, 1, "", "setTask"], [138, 2, 1, "", "setTemperature"], [138, 2, 1, "", "setTopK"], [138, 2, 1, "", "setTopP"], [138, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[139, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[139, 1, 1, "", "DocumentSimilarityRankerApproach"], [139, 1, 1, "", "DocumentSimilarityRankerFinisher"], [139, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[139, 2, 1, "", "asRetriever"], [139, 2, 1, "", "setBucketLength"], [139, 2, 1, "", "setIdentityRanking"], [139, 2, 1, "", "setNumHashTables"], [139, 2, 1, "", "setNumberOfNeighbours"], [139, 2, 1, "", "setSimilarityMethod"], [139, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[139, 2, 1, "", "getInputCols"], [139, 2, 1, "", "getOutputCols"], [139, 2, 1, "", "setExtractNearestNeighbor"], [139, 2, 1, "", "setInputCols"], [139, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[141, 0, 0, "-", "context_spell_checker"], [143, 0, 0, "-", "norvig_sweeting"], [144, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[141, 1, 1, "", "ContextSpellCheckerApproach"], [141, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[141, 2, 1, "", "addRegexClass"], [141, 2, 1, "", "addVocabClass"], [141, 2, 1, "", "setBatchSize"], [141, 2, 1, "", "setCaseStrategy"], [141, 2, 1, "", "setClassCount"], [141, 2, 1, "", "setCompoundCount"], [141, 2, 1, "", "setConfigProtoBytes"], [141, 2, 1, "", "setEpochs"], [141, 2, 1, "", "setErrorThreshold"], [141, 2, 1, "", "setFinalRate"], [141, 2, 1, "", "setGraphFolder"], [141, 2, 1, "", "setInitialRate"], [141, 2, 1, "", "setLanguageModelClasses"], [141, 2, 1, "", "setMaxCandidates"], [141, 2, 1, "", "setMaxSentLen"], [141, 2, 1, "", "setMaxWindowLen"], [141, 2, 1, "", "setMinCount"], [141, 2, 1, "", "setTradeoff"], [141, 2, 1, "", "setValidationFraction"], [141, 2, 1, "", "setWeightedDistPath"], [141, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[141, 2, 1, "", "getWordClasses"], [141, 2, 1, "", "pretrained"], [141, 2, 1, "", "setCaseStrategy"], [141, 2, 1, "", "setClasses"], [141, 2, 1, "", "setCompareLowcase"], [141, 2, 1, "", "setConfigProtoBytes"], [141, 2, 1, "", "setCorrectSymbols"], [141, 2, 1, "", "setErrorThreshold"], [141, 2, 1, "", "setGamma"], [141, 2, 1, "", "setIdsVocab"], [141, 2, 1, "", "setMaxCandidates"], [141, 2, 1, "", "setMaxWindowLen"], [141, 2, 1, "", "setTradeoff"], [141, 2, 1, "", "setVocabFreq"], [141, 2, 1, "", "setVocabIds"], [141, 2, 1, "", "setWeights"], [141, 2, 1, "", "setWordMaxDistance"], [141, 2, 1, "", "updateRegexClass"], [141, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[143, 1, 1, "", "NorvigSweetingApproach"], [143, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[143, 2, 1, "", "setCaseSensitive"], [143, 2, 1, "", "setDictionary"], [143, 2, 1, "", "setDoubleVariants"], [143, 2, 1, "", "setFrequencyPriority"], [143, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[143, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[144, 1, 1, "", "SymmetricDeleteApproach"], [144, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[144, 2, 1, "", "setDeletesThreshold"], [144, 2, 1, "", "setDictionary"], [144, 2, 1, "", "setFrequencyThreshold"], [144, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[144, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[145, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[146, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[146, 2, 1, "", "loadDefaultStopWords"], [146, 2, 1, "", "pretrained"], [146, 2, 1, "", "setCaseSensitive"], [146, 2, 1, "", "setLocale"], [146, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[147, 1, 1, "", "TFNerDLGraphBuilder"], [147, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[147, 2, 1, "", "getGraphFile"], [147, 2, 1, "", "getGraphFolder"], [147, 2, 1, "", "getHiddenUnitsNumber"], [147, 2, 1, "", "getInputCols"], [147, 2, 1, "", "getLabelColumn"], [147, 2, 1, "", "setGraphFile"], [147, 2, 1, "", "setGraphFolder"], [147, 2, 1, "", "setHiddenUnitsNumber"], [147, 2, 1, "", "setInputCols"], [147, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[148, 0, 0, "-", "chunk_tokenizer"], [150, 0, 0, "-", "recursive_tokenizer"], [151, 0, 0, "-", "regex_tokenizer"], [152, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[148, 1, 1, "", "ChunkTokenizer"], [148, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[150, 1, 1, "", "RecursiveTokenizer"], [150, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[150, 2, 1, "", "setInfixes"], [150, 2, 1, "", "setPrefixes"], [150, 2, 1, "", "setSuffixes"], [150, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[151, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[151, 2, 1, "", "setMaxLength"], [151, 2, 1, "", "setMinLength"], [151, 2, 1, "", "setPattern"], [151, 2, 1, "", "setPositionalMask"], [151, 2, 1, "", "setPreservePosition"], [151, 2, 1, "", "setToLowercase"], [151, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[152, 1, 1, "", "Tokenizer"], [152, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[152, 2, 1, "", "addContextChars"], [152, 2, 1, "", "addException"], [152, 2, 1, "", "addInfixPattern"], [152, 2, 1, "", "addSplitChars"], [152, 2, 1, "", "getCaseSensitiveExceptions"], [152, 2, 1, "", "getContextChars"], [152, 2, 1, "", "getExceptions"], [152, 2, 1, "", "getInfixPatterns"], [152, 2, 1, "", "getPrefixPattern"], [152, 2, 1, "", "getSplitChars"], [152, 2, 1, "", "getSuffixPattern"], [152, 2, 1, "", "setCaseSensitiveExceptions"], [152, 2, 1, "", "setContextChars"], [152, 2, 1, "", "setExceptions"], [152, 2, 1, "", "setExceptionsPath"], [152, 2, 1, "", "setInfixPatterns"], [152, 2, 1, "", "setMaxLength"], [152, 2, 1, "", "setMinLength"], [152, 2, 1, "", "setPrefixPattern"], [152, 2, 1, "", "setSplitChars"], [152, 2, 1, "", "setSplitPattern"], [152, 2, 1, "", "setSuffixPattern"], [152, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[152, 2, 1, "", "addSplitChars"], [152, 2, 1, "", "pretrained"], [152, 2, 1, "", "setSplitChars"], [152, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[153, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[155, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[155, 1, 1, "", "WordSegmenterApproach"], [155, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[155, 2, 1, "", "getAmbiguityThreshold"], [155, 2, 1, "", "getFrequencyThreshold"], [155, 2, 1, "", "getNIterations"], [155, 2, 1, "", "setAmbiguityThreshold"], [155, 2, 1, "", "setEnableRegexTokenizer"], [155, 2, 1, "", "setFrequencyThreshold"], [155, 2, 1, "", "setNIterations"], [155, 2, 1, "", "setPattern"], [155, 2, 1, "", "setPosColumn"], [155, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[155, 2, 1, "", "pretrained"], [155, 2, 1, "", "setEnableRegexTokenizer"], [155, 2, 1, "", "setPattern"], [155, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[156, 0, 0, "-", "audio_assembler"], [157, 0, 0, "-", "doc2_chunk"], [158, 0, 0, "-", "document_assembler"], [159, 0, 0, "-", "embeddings_finisher"], [160, 0, 0, "-", "finisher"], [161, 0, 0, "-", "graph_finisher"], [162, 0, 0, "-", "has_recursive_fit"], [163, 0, 0, "-", "has_recursive_transform"], [164, 0, 0, "-", "image_assembler"], [166, 0, 0, "-", "light_pipeline"], [167, 0, 0, "-", "multi_document_assembler"], [168, 0, 0, "-", "recursive_pipeline"], [169, 0, 0, "-", "table_assembler"], [170, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[156, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[156, 2, 1, "", "getOutputCol"], [156, 2, 1, "", "setInputCol"], [156, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[157, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[157, 2, 1, "", "setChunkCol"], [157, 2, 1, "", "setFailOnMissing"], [157, 2, 1, "", "setIsArray"], [157, 2, 1, "", "setLowerCase"], [157, 2, 1, "", "setStartCol"], [157, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[158, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[158, 2, 1, "", "getOutputCol"], [158, 2, 1, "", "setCleanupMode"], [158, 2, 1, "", "setIdCol"], [158, 2, 1, "", "setInputCol"], [158, 2, 1, "", "setMetadataCol"], [158, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[159, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[159, 2, 1, "", "getInputCols"], [159, 2, 1, "", "getOutputCols"], [159, 2, 1, "", "setCleanAnnotations"], [159, 2, 1, "", "setInputCols"], [159, 2, 1, "", "setOutputAsVector"], [159, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[160, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[160, 2, 1, "", "getInputCols"], [160, 2, 1, "", "getOutputCols"], [160, 2, 1, "", "setAnnotationSplitSymbol"], [160, 2, 1, "", "setCleanAnnotations"], [160, 2, 1, "", "setIncludeMetadata"], [160, 2, 1, "", "setInputCols"], [160, 2, 1, "", "setOutputAsArray"], [160, 2, 1, "", "setOutputCols"], [160, 2, 1, "", "setParseEmbeddingsVectors"], [160, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[161, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[161, 2, 1, "", "setCleanAnnotations"], [161, 2, 1, "", "setInputCol"], [161, 2, 1, "", "setOutputAsArray"], [161, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[162, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[163, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[164, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[164, 2, 1, "", "getOutputCol"], [164, 2, 1, "", "setInputCol"], [164, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[166, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[166, 2, 1, "", "annotate"], [166, 2, 1, "", "fullAnnotate"], [166, 2, 1, "", "fullAnnotateImage"], [166, 2, 1, "", "getIgnoreUnsupported"], [166, 2, 1, "", "setIgnoreUnsupported"], [166, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[167, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[167, 2, 1, "", "getOutputCols"], [167, 2, 1, "", "setCleanupMode"], [167, 2, 1, "", "setIdCol"], [167, 2, 1, "", "setInputCols"], [167, 2, 1, "", "setMetadataCol"], [167, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[168, 1, 1, "", "RecursivePipeline"], [168, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[169, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[169, 2, 1, "", "setCsvDelimiter"], [169, 2, 1, "", "setEscapeCsvDelimiter"], [169, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[170, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[170, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[171, 0, 0, "-", "annotator_approach"], [172, 0, 0, "-", "annotator_model"], [173, 0, 0, "-", "annotator_properties"], [174, 0, 0, "-", "annotator_type"], [175, 0, 0, "-", "coverage_result"], [177, 0, 0, "-", "match_strategy"], [178, 0, 0, "-", "properties"], [179, 0, 0, "-", "read_as"], [180, 0, 0, "-", "recursive_annotator_approach"], [181, 0, 0, "-", "storage"], [182, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[171, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[172, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[173, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[173, 2, 1, "", "getInputCols"], [173, 2, 1, "", "getLazyAnnotator"], [173, 2, 1, "", "getOutputCol"], [173, 2, 1, "", "setInputCols"], [173, 2, 1, "", "setLazyAnnotator"], [173, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[177, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[178, 1, 1, "", "HasEmbeddingsProperties"], [178, 3, 1, "", "setBeamSize"], [178, 3, 1, "", "setDoSample"], [178, 3, 1, "", "setMaxOutputLength"], [178, 3, 1, "", "setMinOutputLength"], [178, 3, 1, "", "setNReturnSequences"], [178, 3, 1, "", "setNoRepeatNgramSize"], [178, 3, 1, "", "setRepetitionPenalty"], [178, 3, 1, "", "setTask"], [178, 3, 1, "", "setTemperature"], [178, 3, 1, "", "setTopK"], [178, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[178, 2, 1, "", "getDimension"], [178, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[179, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[180, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[182, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[183, 3, 1, "", "explode_annotations_col"], [183, 3, 1, "", "filter_by_annotations_col"], [183, 3, 1, "", "map_annotations"], [183, 3, 1, "", "map_annotations_array"], [183, 3, 1, "", "map_annotations_col"], [183, 3, 1, "", "map_annotations_cols"], [183, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[185, 0, 0, "-", "annotator_java_ml"], [186, 0, 0, "-", "annotator_transformer"], [187, 0, 0, "-", "extended_java_wrapper"], [189, 0, 0, "-", "params_getters_setters"], [190, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[185, 1, 1, "", "AnnotatorJavaMLReadable"], [185, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[185, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[186, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[187, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[187, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[189, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[189, 2, 1, "", "getParamValue"], [189, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[190, 1, 1, "", "RecursiveEstimator"], [190, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[190, 2, 1, "", "fit"]], "sparknlp.logging": [[191, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[191, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[191, 2, 1, "", "end"], [191, 2, 1, "", "log_asset"], [191, 2, 1, "", "log_asset_data"], [191, 2, 1, "", "log_completed_run"], [191, 2, 1, "", "log_metrics"], [191, 2, 1, "", "log_parameters"], [191, 2, 1, "", "log_pipeline_parameters"], [191, 2, 1, "", "log_visualization"], [191, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[194, 0, 0, "-", "pretrained_pipeline"], [195, 0, 0, "-", "resource_downloader"], [196, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[194, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[194, 2, 1, "", "annotate"], [194, 2, 1, "", "fullAnnotate"], [194, 2, 1, "", "fullAnnotateImage"], [194, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[195, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[195, 2, 1, "", "clearCache"], [195, 2, 1, "", "downloadModel"], [195, 2, 1, "", "downloadModelDirectly"], [195, 2, 1, "", "downloadPipeline"], [195, 2, 1, "", "showAvailableAnnotators"], [195, 2, 1, "", "showPublicModels"], [195, 2, 1, "", "showPublicPipelines"], [195, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[197, 0, 0, "-", "conll"], [198, 0, 0, "-", "conllu"], [200, 0, 0, "-", "pos"], [201, 0, 0, "-", "pub_tator"], [202, 0, 0, "-", "spacy_to_annotation"], [203, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[197, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[197, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[198, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[198, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[200, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[200, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[201, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[201, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[202, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 212], "start": 0, "spark": [0, 1, 207, 212, 216], "nlp": [0, 1, 207, 216], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 207], "us": [0, 207, 216], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 194, 195, 197, 198, 200, 201, 202], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 210, 211, 212], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 191, 194, 195, 197, 198, 200, 201, 202, 206], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 185, 186, 187, 189, 190, 191, 194, 195, 197, 198, 200, 201, 202], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 31, 51, 55, 61, 78, 93, 95, 96, 98, 103, 108, 116, 122, 124, 127, 132, 140, 142, 149, 154, 165, 176, 184, 188, 192, 193, 199], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "deberta_for_zero_shot_classif": 26, "exampl": 26, "return": 26, "distil_bert_for_question_answ": 27, "distil_bert_for_sequence_classif": 28, "distil_bert_for_token_classif": 29, "distil_bert_for_zero_shot_classif": 30, "longformer_for_question_answ": 32, "longformer_for_sequence_classif": 33, "longformer_for_token_classif": 34, "mpnet_for_question_answ": 35, "mpnet_for_sequence_classif": 36, "mpnet_for_token_classif": 37, "multi_classifier_dl": 38, "roberta_for_question_answ": 39, "roberta_for_sequence_classif": 40, "roberta_for_token_classif": 41, "roberta_for_zero_shot_classif": 42, "sentiment_dl": 43, "tapas_for_question_answ": 44, "xlm_roberta_for_question_answ": 45, "xlm_roberta_for_sequence_classif": 46, "xlm_roberta_for_token_classif": 47, "xlm_roberta_for_zero_shot_classif": 48, "xlnet_for_sequence_classif": 49, "xlnet_for_token_classif": 50, "coref": [51, 52], "spanbert_coref": 52, "cv": [53, 54, 55, 56, 57, 58], "clip_for_zero_shot_classif": 53, "convnext_for_image_classif": 54, "swin_for_image_classif": 56, "vision_encoder_decoder_for_image_capt": 57, "vit_for_image_classif": 58, "date2_chunk": 59, "depend": [60, 61, 62], "dependency_pars": 60, "typed_dependency_pars": 62, "document_character_text_splitt": 63, "document_norm": 64, "document_token_splitt": 65, "document_token_splitter_test": 66, "embed": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "albert_embed": 67, "bert_embed": 68, "bert_sentence_embed": 69, "bge_embed": 70, "camembert_embed": 71, "chunk_embed": 72, "deberta_embed": 73, "distil_bert_embed": 74, "doc2vec": 75, "e5_embed": 76, "elmo_embed": 77, "instructor_embed": 79, "longformer_embed": 80, "mpnet_embed": 81, "roberta_embed": 82, "roberta_sentence_embed": 83, "sentence_embed": 84, "uae_embed": 85, "universal_sentence_encod": 86, "word2vec": 87, "word_embed": 88, "xlm_roberta_embed": 89, "xlm_roberta_sentence_embed": 90, "xlnet_embed": 91, "er": [92, 93], "entity_rul": 92, "graph_extract": 94, "subpackag": [95, 184], "keyword_extract": [96, 97], "yake_keyword_extract": 97, "ld_dl": [98, 99], "language_detector_dl": 99, "lemmat": 100, "matcher": [101, 102, 103, 104, 105, 106], "big_text_match": 101, "date_match": 102, "multi_date_match": 104, "regex_match": 105, "text_match": 106, "n_gram_gener": 107, "ner": [108, 109, 110, 111, 112, 113, 114], "ner_approach": 109, "ner_convert": 110, "ner_crf": 111, "ner_dl": 112, "ner_overwrit": 113, "zero_shot_ner_model": 114, "normal": 115, "openai": [116, 117, 118], "openai_complet": 117, "openai_embed": 118, "param": [119, 120, 121], "classifier_encod": 119, "evaluation_dl_param": 120, "po": [122, 123, 200, 217], "perceptron": 123, "sentenc": [124, 125, 126, 212], "sentence_detector": 125, "sentence_detector_dl": 126, "sentiment": [127, 128, 129], "sentiment_detector": 128, "vivekn_senti": 129, "seq2seq": [130, 131, 132, 133, 134, 135, 136, 137, 138], "bart_transform": 130, "gpt2_transform": 131, "llama2_transform": 133, "m2m100_transform": 134, "marian_transform": 135, "mistral_transform": 136, "phi2_transform": 137, "t5_transform": 138, "similar": [139, 140], "document_similarity_rank": 139, "spell_check": [141, 142, 143, 144], "context_spell_check": 141, "norvig_sweet": 143, "symmetric_delet": 144, "stemmer": 145, "stop_words_clean": 146, "tf_ner_dl_graph_build": 147, "token": [148, 149, 150, 151, 152, 212], "chunk_token": 148, "recursive_token": 150, "regex_token": 151, "token2_chunk": 153, "w": [154, 155], "word_segment": 155, "base": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "audio_assembl": 156, "doc2_chunk": 157, "document_assembl": 158, "embeddings_finish": 159, "finish": [160, 212], "graph_finish": 161, "has_recursive_fit": 162, "has_recursive_transform": 163, "image_assembl": 164, "light_pipelin": 166, "multi_document_assembl": 167, "recursive_pipelin": 168, "table_assembl": 169, "token_assembl": 170, "common": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 211], "annotator_approach": 171, "annotator_model": 172, "annotator_properti": 173, "annotator_typ": 174, "coverage_result": 175, "match_strategi": 177, "properti": 178, "function": [178, 182, 183, 184, 211, 213], "read_a": 179, "recursive_annotator_approach": 180, "storag": 181, "util": [182, 196, 205], "packag": 184, "intern": [185, 186, 187, 188, 189, 190], "annotator_java_ml": 185, "annotator_transform": 186, "extended_java_wrapp": 187, "params_getters_sett": 189, "recurs": 190, "log": [191, 192, 207, 209], "comet": [191, 207], "pretrain": [193, 194, 195, 196, 211, 215, 216], "pretrained_pipelin": 194, "resource_download": 195, "train": [197, 198, 199, 200, 201, 202, 203, 217], "conll": [197, 217], "conllu": [198, 217], "pub_tat": 201, "spacy_to_annot": 202, "tfgraph": 203, "upload_to_hub": 204, "api": 206, "refer": 206, "A": 207, "meta": 207, "machin": [207, 208], "learn": [207, 208], "platform": [207, 208], "pipelin": [207, 212, 215, 216], "paramet": 207, "evalu": 207, "metric": 207, "visual": 207, "run": 207, "an": 207, "offlin": 207, "experi": 207, "mlflow": 208, "lifecycl": 208, "third": 209, "parti": 209, "project": 209, "approach": 211, "model": 211, "note": 211, "avail": [211, 216], "set": 212, "up": 212, "your": 212, "own": 212, "type": 212, "necessari": 212, "import": 212, "construct": 212, "documentassembl": 212, "data": 212, "detect": 212, "out": 212, "put": 212, "all": 212, "togeth": 212, "ml": [212, 216], "helper": 213, "user": 214, "guid": 214, "light": 215, "convert": 215, "pipelinemodel": 215, "download": 216, "As": 216, "lightpipelin": 216, "load": 217, "dataset": 217, "spell": 217, "checker": 217, "pubtat": 217}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [207, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [94, "module-contents"], [97, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [94, "classes"], [97, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [194, "classes"], [195, "classes"], [197, "classes"], [198, "classes"], [200, "classes"], [201, "classes"], [202, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [31, "submodules"], [51, "submodules"], [55, "submodules"], [61, "submodules"], [78, "submodules"], [93, "submodules"], [95, "submodules"], [96, "submodules"], [98, "submodules"], [103, "submodules"], [108, "submodules"], [116, "submodules"], [122, "submodules"], [124, "submodules"], [127, "submodules"], [132, "submodules"], [140, "submodules"], [142, "submodules"], [149, "submodules"], [154, "submodules"], [165, "submodules"], [176, "submodules"], [184, "submodules"], [188, "submodules"], [192, "submodules"], [193, "submodules"], [199, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Examples": [[26, "examples"]], "Returns": [[26, "returns"], [26, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[31, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[38, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[43, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[44, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[51, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[52, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[53, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[54, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[55, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[56, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[57, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[58, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[59, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[60, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[61, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[62, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[63, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[64, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[65, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[66, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[67, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[68, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[69, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[70, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[71, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[72, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[73, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[74, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[75, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[76, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[77, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[78, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[79, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[80, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[81, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[82, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[83, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[84, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[85, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[86, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[87, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[88, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[89, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[90, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[91, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[92, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[93, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[94, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[95, "module-sparknlp.annotator"]], "Subpackages": [[95, "subpackages"], [184, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[96, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[97, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[98, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[99, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[100, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[101, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[102, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[103, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[104, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[105, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[106, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[107, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[108, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[109, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[110, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[111, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[112, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[113, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[114, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[115, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[116, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[117, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[118, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[119, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[120, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[121, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[122, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[123, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[124, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[125, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[126, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[127, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[128, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[129, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[130, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[131, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[132, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[133, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[134, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[135, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[136, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[137, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[138, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[139, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[140, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[141, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[142, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[143, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[144, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[145, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[146, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[147, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[148, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[149, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[150, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[151, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[152, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[153, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[154, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[155, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[156, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[157, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[158, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[159, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[160, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[161, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[162, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[163, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[164, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[165, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[166, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[167, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[168, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[169, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[170, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[171, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[172, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[173, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[174, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[175, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[176, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[177, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[178, "module-sparknlp.common.properties"]], "Functions": [[178, "functions"], [182, "functions"], [183, "functions"], [184, "functions"]], "sparknlp.common.read_as": [[179, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[180, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[181, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[182, "module-sparknlp.common.utils"]], "sparknlp.functions": [[183, "module-sparknlp.functions"]], "sparknlp": [[184, "module-sparknlp"]], "Package Contents": [[184, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[185, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[186, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[187, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[188, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[189, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[190, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[191, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[192, "module-sparknlp.logging"]], "sparknlp.pretrained": [[193, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[194, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[195, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[196, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[197, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[198, "module-sparknlp.training.conllu"]], "sparknlp.training": [[199, "module-sparknlp.training"]], "sparknlp.training.pos": [[200, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[201, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[202, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[203, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[204, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[205, "module-sparknlp.util"]], "API Reference": [[206, "api-reference"]], "Modules": [[206, "modules"]], "Comet - A meta machine learning platform": [[207, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[207, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[207, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[207, "logging-evaluation-metrics"]], "Logging Visualizations": [[207, "logging-visualizations"]], "Running An Offline Experiment": [[207, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[208, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[209, "third-party-projects"]], "Logging": [[209, "logging"]], "Annotation": [[210, "annotation"]], "Annotators": [[211, "annotators"]], "Annotator Approaches": [[211, "annotator-approaches"]], "Annotator Models": [[211, "annotator-models"]], "Note": [[211, "note"]], "Pretrained Models": [[211, "pretrained-models"]], "Common Functions": [[211, "common-functions"]], "Available Annotators": [[211, "available-annotators"]], "Setting up your own pipeline": [[212, "setting-up-your-own-pipeline"]], "Annotator types": [[212, "annotator-types"]], "Necessary imports": [[212, "necessary-imports"]], "Constructing the Pipeline": [[212, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[212, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[212, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[212, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[212, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[213, "helper-functions"]], "User Guide": [[214, "user-guide"]], "Light Pipelines": [[215, "light-pipelines"]], "Converting PipelineModels": [[215, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[215, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[216, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[216, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[216, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[216, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[216, "available-pipelines"]], "Loading datasets for training": [[217, "loading-datasets-for-training"]], "POS Dataset": [[217, "pos-dataset"]], "CoNLL Dataset": [[217, "conll-dataset"]], "CoNLLU Dataset": [[217, "conllu-dataset"]], "Spell Checkers Dataset": [[217, "spell-checkers-dataset"]], "PubTator Dataset": [[217, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [31, "module-sparknlp.annotator.classifier_dl"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [39, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [40, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [41, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [42, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [43, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [44, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [49, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [50, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [51, "module-sparknlp.annotator.coref"], [52, "module-sparknlp.annotator.coref.spanbert_coref"], [53, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [54, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [55, "module-sparknlp.annotator.cv"], [56, "module-sparknlp.annotator.cv.swin_for_image_classification"], [57, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [58, "module-sparknlp.annotator.cv.vit_for_image_classification"], [59, "module-sparknlp.annotator.date2_chunk"], [60, "module-sparknlp.annotator.dependency.dependency_parser"], [61, "module-sparknlp.annotator.dependency"], [62, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [63, "module-sparknlp.annotator.document_character_text_splitter"], [64, "module-sparknlp.annotator.document_normalizer"], [65, "module-sparknlp.annotator.document_token_splitter"], [66, "module-sparknlp.annotator.document_token_splitter_test"], [67, "module-sparknlp.annotator.embeddings.albert_embeddings"], [68, "module-sparknlp.annotator.embeddings.bert_embeddings"], [69, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [70, "module-sparknlp.annotator.embeddings.bge_embeddings"], [71, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [72, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [73, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [74, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [75, "module-sparknlp.annotator.embeddings.doc2vec"], [76, "module-sparknlp.annotator.embeddings.e5_embeddings"], [77, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [78, "module-sparknlp.annotator.embeddings"], [79, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [80, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [81, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [82, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [83, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [84, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [85, "module-sparknlp.annotator.embeddings.uae_embeddings"], [86, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [87, "module-sparknlp.annotator.embeddings.word2vec"], [88, "module-sparknlp.annotator.embeddings.word_embeddings"], [89, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [90, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [91, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [92, "module-sparknlp.annotator.er.entity_ruler"], [93, "module-sparknlp.annotator.er"], [94, "module-sparknlp.annotator.graph_extraction"], [95, "module-sparknlp.annotator"], [96, "module-sparknlp.annotator.keyword_extraction"], [97, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [98, "module-sparknlp.annotator.ld_dl"], [99, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [100, "module-sparknlp.annotator.lemmatizer"], [101, "module-sparknlp.annotator.matcher.big_text_matcher"], [102, "module-sparknlp.annotator.matcher.date_matcher"], [103, "module-sparknlp.annotator.matcher"], [104, "module-sparknlp.annotator.matcher.multi_date_matcher"], [105, "module-sparknlp.annotator.matcher.regex_matcher"], [106, "module-sparknlp.annotator.matcher.text_matcher"], [107, "module-sparknlp.annotator.n_gram_generator"], [108, "module-sparknlp.annotator.ner"], [109, "module-sparknlp.annotator.ner.ner_approach"], [110, "module-sparknlp.annotator.ner.ner_converter"], [111, "module-sparknlp.annotator.ner.ner_crf"], [112, "module-sparknlp.annotator.ner.ner_dl"], [113, "module-sparknlp.annotator.ner.ner_overwriter"], [114, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [115, "module-sparknlp.annotator.normalizer"], [116, "module-sparknlp.annotator.openai"], [117, "module-sparknlp.annotator.openai.openai_completion"], [118, "module-sparknlp.annotator.openai.openai_embeddings"], [119, "module-sparknlp.annotator.param.classifier_encoder"], [120, "module-sparknlp.annotator.param.evaluation_dl_params"], [121, "module-sparknlp.annotator.param"], [122, "module-sparknlp.annotator.pos"], [123, "module-sparknlp.annotator.pos.perceptron"], [124, "module-sparknlp.annotator.sentence"], [125, "module-sparknlp.annotator.sentence.sentence_detector"], [126, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [127, "module-sparknlp.annotator.sentiment"], [128, "module-sparknlp.annotator.sentiment.sentiment_detector"], [129, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [130, "module-sparknlp.annotator.seq2seq.bart_transformer"], [131, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [132, "module-sparknlp.annotator.seq2seq"], [133, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [134, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [135, "module-sparknlp.annotator.seq2seq.marian_transformer"], [136, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [137, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [138, "module-sparknlp.annotator.seq2seq.t5_transformer"], [139, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [140, "module-sparknlp.annotator.similarity"], [141, "module-sparknlp.annotator.spell_check.context_spell_checker"], [142, "module-sparknlp.annotator.spell_check"], [143, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [144, "module-sparknlp.annotator.spell_check.symmetric_delete"], [145, "module-sparknlp.annotator.stemmer"], [146, "module-sparknlp.annotator.stop_words_cleaner"], [147, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [148, "module-sparknlp.annotator.token.chunk_tokenizer"], [149, "module-sparknlp.annotator.token"], [150, "module-sparknlp.annotator.token.recursive_tokenizer"], [151, "module-sparknlp.annotator.token.regex_tokenizer"], [152, "module-sparknlp.annotator.token.tokenizer"], [153, "module-sparknlp.annotator.token2_chunk"], [154, "module-sparknlp.annotator.ws"], [155, "module-sparknlp.annotator.ws.word_segmenter"], [156, "module-sparknlp.base.audio_assembler"], [157, "module-sparknlp.base.doc2_chunk"], [158, "module-sparknlp.base.document_assembler"], [159, "module-sparknlp.base.embeddings_finisher"], [160, "module-sparknlp.base.finisher"], [161, "module-sparknlp.base.graph_finisher"], [162, "module-sparknlp.base.has_recursive_fit"], [163, "module-sparknlp.base.has_recursive_transform"], [164, "module-sparknlp.base.image_assembler"], [165, "module-sparknlp.base"], [166, "module-sparknlp.base.light_pipeline"], [167, "module-sparknlp.base.multi_document_assembler"], [168, "module-sparknlp.base.recursive_pipeline"], [169, "module-sparknlp.base.table_assembler"], [170, "module-sparknlp.base.token_assembler"], [171, "module-sparknlp.common.annotator_approach"], [172, "module-sparknlp.common.annotator_model"], [173, "module-sparknlp.common.annotator_properties"], [174, "module-sparknlp.common.annotator_type"], [175, "module-sparknlp.common.coverage_result"], [176, "module-sparknlp.common"], [177, "module-sparknlp.common.match_strategy"], [178, "module-sparknlp.common.properties"], [179, "module-sparknlp.common.read_as"], [180, "module-sparknlp.common.recursive_annotator_approach"], [181, "module-sparknlp.common.storage"], [182, "module-sparknlp.common.utils"], [183, "module-sparknlp.functions"], [184, "module-sparknlp"], [185, "module-sparknlp.internal.annotator_java_ml"], [186, "module-sparknlp.internal.annotator_transformer"], [187, "module-sparknlp.internal.extended_java_wrapper"], [188, "module-sparknlp.internal"], [189, "module-sparknlp.internal.params_getters_setters"], [190, "module-sparknlp.internal.recursive"], [191, "module-sparknlp.logging.comet"], [192, "module-sparknlp.logging"], [193, "module-sparknlp.pretrained"], [194, "module-sparknlp.pretrained.pretrained_pipeline"], [195, "module-sparknlp.pretrained.resource_downloader"], [196, "module-sparknlp.pretrained.utils"], [197, "module-sparknlp.training.conll"], [198, "module-sparknlp.training.conllu"], [199, "module-sparknlp.training"], [200, "module-sparknlp.training.pos"], [201, "module-sparknlp.training.pub_tator"], [202, "module-sparknlp.training.spacy_to_annotation"], [203, "module-sparknlp.training.tfgraphs"], [204, "module-sparknlp.upload_to_hub"], [205, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "getclasses() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (debertaforzeroshotclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[31, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "pretrained() (mpnetforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "getclasses() (mpnetforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "pretrained() (mpnetforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "getclasses() (mpnetfortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "pretrained() (mpnetfortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[38, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[38, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[43, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[43, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[44, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[44, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[44, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[44, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[50, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[51, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[52, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[52, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[52, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[52, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[52, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[52, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[52, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[53, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[53, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[53, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[53, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[53, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[54, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[54, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[55, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[56, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[56, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[56, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[56, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[56, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[56, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[57, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[57, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[57, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[57, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[57, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[58, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[58, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[58, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[58, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[58, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[58, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[59, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[59, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[59, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[60, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[60, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[60, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[60, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[60, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[60, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[60, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[61, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[62, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[62, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[62, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[62, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[62, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[62, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[62, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[63, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[63, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[64, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[64, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[65, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[65, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[65, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[65, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[65, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[65, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[66, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[66, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[66, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[67, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[67, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[67, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[67, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[67, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[68, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[68, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[68, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[68, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[68, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[69, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[69, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[69, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[69, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[69, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[69, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[70, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[70, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[70, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[70, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[70, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[71, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[71, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[71, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[71, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[71, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[72, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[72, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[72, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[72, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[73, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[73, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[73, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[73, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[73, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[74, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[74, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[74, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[74, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[74, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[75, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[75, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[76, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[76, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[76, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[76, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[76, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[77, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[77, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[77, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[77, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[77, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[77, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[77, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[78, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[79, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[79, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[79, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[79, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[79, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[79, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[80, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[80, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[80, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[80, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[80, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[81, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[81, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[81, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[81, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[81, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[82, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[82, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[82, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[82, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[82, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[83, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[83, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[83, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[83, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[83, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[84, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[84, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[84, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[85, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "loadsavedmodel() (uaeembeddings static method)": [[85, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "pretrained() (uaeembeddings static method)": [[85, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[85, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[85, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[86, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[86, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[86, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[86, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[86, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[86, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[87, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[87, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[88, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[88, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[89, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[90, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[90, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[90, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[90, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[90, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[91, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[91, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[91, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[91, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[91, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[92, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[92, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[92, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[92, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[92, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[92, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[92, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[93, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[94, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[94, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[95, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[96, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[97, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[97, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[98, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[99, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[99, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[99, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[99, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[99, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[99, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[99, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[100, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[100, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[100, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[100, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[100, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[100, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[100, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[101, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[101, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[102, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[102, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[103, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[104, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[104, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[105, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[105, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[105, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[105, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[105, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[105, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[105, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[106, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[106, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[107, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[107, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[107, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[107, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[107, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[108, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[109, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[109, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[110, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[110, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[110, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[110, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[110, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[111, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[111, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[112, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[112, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[113, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[113, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[113, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[113, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[113, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[114, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[114, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[114, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[114, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[114, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[114, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[114, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[115, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[115, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[115, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[115, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[115, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[115, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[115, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[115, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[116, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[117, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[117, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[118, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[118, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[118, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[118, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[119, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[119, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[120, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[120, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[121, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[122, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[123, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[123, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[123, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[123, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[123, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[123, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[123, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[124, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[125, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[125, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[126, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[126, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[127, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[128, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[128, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[128, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[128, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[129, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[129, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[129, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[129, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[129, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[129, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[130, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[130, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[131, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[131, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[132, "module-sparknlp.annotator.seq2seq"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "loadsavedmodel() (llama2transformer static method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "pretrained() (llama2transformer static method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "setconfigprotobytes() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[133, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[133, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "loadsavedmodel() (m2m100transformer static method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "pretrained() (m2m100transformer static method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "setbeamsize() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[134, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[134, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[135, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[135, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "loadsavedmodel() (mistraltransformer static method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "pretrained() (mistraltransformer static method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "setconfigprotobytes() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[136, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[136, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "loadsavedmodel() (phi2transformer static method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "pretrained() (phi2transformer static method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "setconfigprotobytes() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[137, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[137, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[138, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[138, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "asretriever() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[139, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[139, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[140, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[141, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[141, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[142, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[143, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[143, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[144, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[144, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[145, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[145, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[146, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[146, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[146, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[146, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[146, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[146, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[146, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[147, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[147, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[148, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[148, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[148, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[149, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[150, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[150, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[150, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[150, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[150, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[150, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[150, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[151, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[151, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[152, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[152, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[152, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[152, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[152, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[152, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[152, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[153, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[153, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[154, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[155, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[155, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[156, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[156, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[156, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[156, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[156, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[157, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[157, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[158, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[158, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[158, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[158, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[158, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[158, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[158, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[158, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[159, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[159, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[160, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[160, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[160, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[161, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[161, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[161, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[161, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[161, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[161, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[162, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[162, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[163, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[163, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[164, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[164, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[164, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[164, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[164, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[165, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[166, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[166, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[166, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[166, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[166, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[166, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[166, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[166, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[167, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[167, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[168, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[168, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[168, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[169, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[169, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[169, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[169, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[169, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[170, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[170, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[170, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[171, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[171, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[172, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[172, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[173, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[173, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[174, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[175, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[176, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[177, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[177, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[178, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[178, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[178, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[178, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[178, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[179, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[179, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[180, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[180, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[181, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[182, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[182, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[183, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[183, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[183, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[183, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[183, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[183, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[183, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[183, "module-sparknlp.functions"]], "sparknlp": [[184, "module-sparknlp"]], "start() (in module sparknlp)": [[184, "sparknlp.start"]], "version() (in module sparknlp)": [[184, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[185, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[185, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[185, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[185, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[186, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[186, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[187, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[187, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[187, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[188, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[189, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[189, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[189, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[189, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[190, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[190, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[190, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[190, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[191, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[191, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[191, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[192, "module-sparknlp.logging"]], "sparknlp.pretrained": [[193, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[194, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[194, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[194, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[194, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[194, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[194, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[195, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[195, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[196, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[197, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[197, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[197, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[198, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[198, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[198, "module-sparknlp.training.conllu"]], "sparknlp.training": [[199, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[200, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[200, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[200, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[201, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[201, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[201, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[202, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[202, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[203, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[204, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[205, "module-sparknlp.util"]]}})