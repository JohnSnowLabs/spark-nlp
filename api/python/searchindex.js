Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 99, 100, 101, 104, 105, 106, 109, 110, 111, 112, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 148, 149, 150, 152, 153, 155, 156, 158, 161, 163, 164, 165, 166, 167, 169, 170, 174, 175, 181, 182, 186, 187, 188, 191, 192, 197, 199, 203, 204, 207, 208, 209, 211, 212, 213], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 104, 109, 110, 111, 112, 113, 116, 117, 122, 124, 125, 127, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 150, 152, 155, 156, 164, 165, 166, 175, 179, 188, 191, 192, 194, 195, 197, 204, 206, 208, 209, 211, 212, 213, 214], "quick": [0, 204, 209], "refer": [0, 1, 5, 8, 51, 53, 55, 57, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 96, 113, 116, 124, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 152, 154, 155, 164, 175, 208, 210, 211], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 59, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 75, 76, 79, 81, 83, 84, 88, 90, 91, 93, 98, 99, 100, 104, 105, 109, 110, 111, 114, 116, 119, 124, 127, 133, 140, 141, 148, 149, 152, 155, 158, 164, 174, 176, 179, 181, 194, 195, 199, 204, 208, 213], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 169, 170, 175, 179, 181, 186, 187, 188, 192, 194, 204, 208, 211, 212], "up": [0, 1, 5, 8, 22, 37, 56, 65, 74, 79, 83, 84, 86, 96, 116, 129, 130, 132, 133, 134, 135, 175, 181, 204, 208, 211, 212], "your": [0, 1, 22, 37, 42, 59, 64, 73, 74, 81, 83, 86, 99, 100, 104, 105, 109, 110, 111, 114, 116, 117, 122, 127, 128, 138, 140, 145, 147, 152, 156, 206, 208, 211, 212, 214], "environ": [0, 65, 205], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 70, 74, 86, 96, 133, 134, 152], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 104, 105, 110, 111, 113, 114, 116, 117, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 149, 152, 156, 157, 166, 181], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 96, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 161, 191, 192, 199, 208, 211], "shell": 0, "packag": [0, 66, 72, 188, 205, 206], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 104, 105, 110, 111, 113, 114, 116, 117, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 149, 152, 166, 181], "nlp_2": [0, 181], "12": [0, 66, 88, 89, 90, 96, 101, 103, 109, 122, 138, 150, 163, 180, 181, 191, 197, 199, 207], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 166, 167, 180, 181, 184, 187, 188, 191, 194, 195, 197, 198, 208, 209], "submit": [0, 188, 204], "extern": [0, 96, 99, 104, 105, 111, 138, 144, 165, 179, 194, 195, 197, 198], "jar": [0, 181], "after": [0, 58, 59, 61, 74, 81, 82, 86, 101, 103, 109, 116, 147, 167, 188, 207, 208], "compil": 0, "build": [0, 72, 73, 81, 82, 93, 96, 100, 130, 132, 133, 188, 204], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 179, 180, 181, 187, 188, 192, 194, 197, 198, 199, 204, 205, 207, 208, 209, 211, 212, 213, 214], "built": [0, 22, 37, 164], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 53, 55, 56, 66, 96, 116, 129, 130, 132, 133, 134, 135, 136, 164, 175], "apach": [0, 164, 181], "x": [0, 37, 180, 194, 214], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 149, 152, 155, 156, 157, 164, 167, 175, 188, 191, 192, 198, 204, 205, 207, 208, 209, 210, 211, 212], "you": [0, 14, 18, 30, 41, 47, 59, 61, 62, 64, 65, 69, 71, 73, 75, 81, 83, 93, 101, 112, 116, 134, 156, 158, 163, 181, 188, 192, 197, 199, 204, 206, 208, 209, 212, 213, 214], "need": [0, 5, 7, 8, 10, 59, 61, 65, 69, 73, 75, 81, 87, 91, 93, 96, 101, 104, 110, 111, 114, 119, 122, 125, 128, 130, 133, 138, 140, 141, 148, 149, 153, 161, 163, 188, 192, 194, 195, 197, 204, 206, 208, 209, 212, 214], "java": [0, 98, 117, 136, 168, 169, 177, 183, 184, 187, 192], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 61, 63, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 84, 88, 89, 90, 101, 106, 111, 112, 116, 119, 130, 138, 150, 152, 194, 199], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 59, 61, 62, 65, 66, 67, 70, 72, 73, 76, 78, 79, 81, 84, 85, 87, 88, 89, 90, 91, 93, 96, 98, 99, 101, 104, 106, 109, 111, 112, 113, 114, 116, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 138, 142, 144, 152, 156, 163, 165, 166, 174, 175, 176, 180, 181, 188, 192, 198, 199, 204, 205, 206, 207, 208, 209, 212, 213, 214], "note": [0, 5, 7, 8, 14, 18, 22, 30, 37, 41, 42, 47, 56, 64, 66, 73, 76, 81, 83, 87, 88, 90, 96, 111, 116, 129, 130, 132, 134, 135, 163, 181, 213], "sinc": [0, 63, 65, 80, 96, 130, 132, 181, 208, 209, 213], "version": [0, 8, 63, 73, 118, 119, 144, 170, 175, 181, 186, 187, 191, 192, 208, 213], "6": [0, 22, 42, 55, 67, 68, 72, 76, 96, 100, 105, 106, 112, 122, 129, 140, 150, 181, 195, 199, 208], "deprec": [0, 181], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 53, 55, 56, 57, 65, 83, 87, 91, 98, 101, 103, 109, 110, 111, 114, 119, 124, 125, 129, 130, 132, 133, 134, 135, 138, 144, 175, 181, 187, 188, 192, 204, 206, 208], "consid": [0, 62, 87, 93, 96, 116, 134, 138, 140, 141, 143, 147, 181, 192], "stick": [0, 181], "lower": [0, 63, 66, 96, 116, 136, 138, 154, 181], "7": [0, 9, 42, 55, 67, 68, 72, 101, 103, 122, 130, 132, 157, 197, 199, 207], "we": [0, 5, 7, 8, 22, 37, 53, 55, 57, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 96, 110, 111, 114, 116, 125, 129, 130, 132, 133, 134, 135, 138, 140, 149, 163, 180, 204, 207, 208, 209, 212, 213, 214], "recommend": [0, 56, 76, 90, 116, 127, 128, 129, 130, 132, 134, 135], "4": [0, 5, 8, 67, 68, 69, 72, 75, 76, 78, 79, 87, 104, 110, 112, 116, 122, 129, 130, 133, 144, 150, 195, 199], "It": [0, 8, 12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 37, 39, 41, 42, 43, 45, 47, 48, 52, 53, 55, 56, 62, 63, 65, 67, 68, 70, 72, 73, 74, 79, 81, 82, 86, 88, 89, 91, 96, 106, 128, 129, 134, 136, 138, 140, 141, 147, 157, 163, 192, 207, 212], "have": [0, 5, 14, 18, 22, 30, 37, 41, 42, 47, 64, 65, 66, 70, 73, 78, 81, 82, 87, 96, 104, 106, 109, 110, 111, 112, 116, 122, 124, 125, 130, 132, 141, 150, 167, 183, 208, 209, 212], "basic": [0, 55, 96, 124, 207], "knowledg": [0, 73, 96, 158], "framework": [0, 7, 65, 129, 134, 135], "work": [0, 8, 53, 73, 78, 79, 84, 98, 116, 129, 132, 133, 134, 135, 145, 207, 209, 213], "befor": [0, 63, 65, 87, 101, 103, 117, 129, 135, 136, 140, 148, 152, 169, 187, 204], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 98, 99, 100, 101, 104, 105, 110, 111, 114, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 145, 147, 152, 155, 164, 165, 192, 205, 206, 210, 213], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 56, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 163, 164, 166, 167, 188, 191, 194, 195, 197, 199, 204, 208, 209, 211, 212, 213], "first": [0, 2, 72, 74, 75, 76, 78, 86, 88, 89, 96, 104, 110, 111, 112, 124, 129, 134, 135, 138, 143, 148, 156, 167, 174, 204, 208, 209, 213], "let": [0, 73, 116, 147, 208], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 27, 30, 32, 35, 38, 41, 44, 47, 53, 55, 56, 57, 63, 65, 66, 69, 70, 72, 73, 74, 75, 79, 81, 82, 86, 88, 89, 91, 96, 104, 111, 114, 116, 117, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 147, 148, 149, 152, 153, 157, 163, 168, 169, 175, 177, 180, 183, 187, 188, 204, 207, 208, 209, 212], "make": [0, 52, 53, 55, 63, 70, 79, 80, 88, 89, 96, 116, 125, 128, 129, 140, 210, 214], "sure": [0, 128], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 51, 53, 55, 56, 58, 59, 61, 64, 66, 67, 68, 72, 74, 76, 78, 82, 86, 87, 88, 89, 90, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 116, 118, 119, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 144, 148, 152, 156, 157, 170, 175, 181, 186, 187, 188, 191, 192, 194, 195, 198, 199, 204, 207, 208, 212, 213], "0_292": 0, "creat": [0, 2, 3, 4, 22, 37, 42, 64, 65, 67, 68, 74, 81, 86, 87, 93, 111, 116, 119, 122, 133, 145, 152, 163, 165, 180, 194, 195, 197, 198, 208, 209, 212, 214], "new": [0, 2, 3, 4, 9, 42, 51, 55, 58, 66, 67, 68, 72, 76, 78, 79, 87, 90, 112, 113, 116, 118, 119, 129, 130, 135, 138, 144, 157, 170, 175, 186, 187, 207, 208], "manag": [0, 96, 192, 205], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 43, 45, 47, 48, 55, 56, 62, 63, 66, 67, 68, 70, 83, 84, 87, 90, 91, 94, 98, 101, 111, 114, 116, 129, 130, 132, 133, 134, 135, 138, 143, 148, 152, 156, 158, 174, 175, 188, 192, 203, 208, 213], "depend": [0, 2, 51, 70, 80, 83, 90, 91, 93, 94, 96, 98, 111, 134, 138, 152, 181], "Then": [0, 22, 37, 110, 111, 133, 167, 188, 208], "sparknlp": [0, 204, 207, 208, 209, 210, 212, 213, 214], "n": [0, 89, 96, 106, 109, 110, 111, 116, 124, 125, 129, 130, 132, 133, 134, 135, 147, 163, 166, 175, 180, 191], "y": [0, 37, 64], "activ": [0, 12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 96], "jupyt": [0, 136, 188, 204], "now": [0, 70, 125, 163, 209], "should": [0, 2, 3, 4, 10, 22, 37, 42, 53, 55, 56, 57, 62, 65, 69, 74, 75, 86, 88, 96, 98, 105, 106, 110, 111, 116, 117, 119, 124, 125, 134, 136, 138, 148, 163, 169, 170, 183, 187, 191, 194, 195], "readi": [0, 22, 191, 208], "notebook": [0, 136, 188, 204], "run": [0, 65, 73, 96, 136, 188, 192, 205, 213], "also": [0, 22, 37, 42, 52, 53, 55, 56, 57, 63, 66, 76, 79, 87, 88, 89, 91, 93, 96, 101, 104, 109, 110, 111, 118, 119, 125, 128, 129, 143, 163, 166, 170, 175, 186, 204, 208, 209, 210, 211, 213], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 194, 195, 197, 198, 199, 205], "bin": 0, "A": [0, 5, 7, 42, 51, 53, 65, 66, 81, 82, 87, 91, 96, 99, 100, 104, 105, 106, 113, 114, 116, 117, 127, 129, 130, 132, 133, 134, 135, 136, 140, 141, 148, 149, 175, 188, 197, 206, 208, 214], "retriev": [0, 69, 75, 78, 87, 99, 136, 140, 141, 142, 188, 191, 204, 208, 209], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 166, 167, 180, 188, 191, 194, 195, 197, 198, 199, 204, 207, 208, 211, 212, 213, 214], "manual": [0, 207], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 100, 129, 130, 132, 133, 134, 135, 181, 194, 195, 197, 198], "becaus": [0, 116, 117, 127, 136, 169, 187], "other": [0, 5, 9, 37, 53, 56, 64, 70, 83, 84, 85, 93, 96, 114, 127, 129, 130, 133, 135, 138, 145, 147, 156, 157, 208], "configur": [0, 53, 65, 83, 149, 181], "includ": [0, 55, 63, 65, 67, 68, 74, 76, 84, 86, 88, 89, 90, 93, 96, 101, 109, 110, 111, 116, 129, 130, 132, 135, 136, 138, 157, 188, 198, 205, 207, 208, 209, 214], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 66, 67, 70, 72, 73, 79, 81, 88, 90, 91, 93, 96, 101, 104, 125, 134, 138, 143, 152, 165, 167, 208, 209], "builder": [0, 144, 181], "appnam": [0, 181], "master": [0, 181], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 96, 129, 130, 132, 133, 134, 135, 143, 163, 181, 191, 212], "config": [0, 181, 205], "driver": [0, 181], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 66, 76, 87, 181], "16g": [0, 181], "serial": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 91, 98, 111, 118, 129, 130, 132, 133, 134, 135, 138, 181], "org": [0, 109, 110, 111, 112, 129, 152, 163, 180, 181, 191, 194, 205, 214], "kryoseri": [0, 181], "buffer": [0, 68, 87, 181], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 84, 88, 89, 90, 96, 141, 181], "2000m": [0, 181], "maxresults": [0, 181], "0": [0, 5, 7, 8, 9, 10, 22, 37, 42, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 98, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 118, 119, 122, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 138, 141, 144, 149, 150, 152, 155, 156, 157, 163, 164, 166, 167, 170, 175, 180, 181, 184, 186, 187, 188, 191, 192, 195, 197, 198, 199, 204, 207, 208, 213, 214], "getorcr": [0, 181], "main": [1, 91, 136, 149, 207, 211, 214], "page": [1, 63, 130, 191, 203, 211, 213], "github": [1, 72, 78, 81, 84, 134, 191], "issu": [1, 84, 152], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 165, 166, 167, 180, 188, 191, 192, 194, 195, 197, 198, 199, 204, 207, 208, 209, 211, 212, 213, 214], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 104, 105, 109, 110, 111, 113, 114, 116, 117, 119, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 145, 147, 149, 152, 169, 175, 181, 187, 188, 191, 192, 204, 205, 207, 211, 213, 214], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 98, 99, 110, 111, 122, 125, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 152, 192], "welcom": [1, 5, 7, 8], "python": [1, 98, 181], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 116, 117, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 202, 204, 207, 208], "inform": [1, 59, 61, 78, 80, 87, 88, 96, 101, 109, 129, 138, 155, 164, 198, 204, 205, 206, 207, 208, 214], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 116, 117, 119, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 148, 149, 150, 152, 154, 155, 156, 157, 163, 164, 165, 166, 167, 174, 175, 180, 181, 188, 191, 192, 194, 195, 197, 198, 205, 206, 207, 208, 209, 211], "librari": [1, 52, 53, 55, 56, 57, 98, 154, 155, 156, 164, 167, 213], "get": [1, 8, 22, 37, 96, 108, 122, 136, 138, 144, 149, 152, 153, 155, 156, 157, 161, 163, 164, 170, 175, 186, 204, 208, 213, 214], "start": [1, 5, 11, 15, 19, 23, 27, 32, 35, 38, 44, 79, 93, 96, 110, 111, 125, 154, 181, 188, 204, 207, 209, 212, 213], "cheat": 1, "sheet": [1, 63], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 61, 65, 66, 68, 69, 72, 75, 76, 85, 88, 89, 96, 111, 114, 128, 138, 150, 152, 154, 156, 167, 207, 208, 209], "instal": [1, 188, 206], "session": [1, 181, 194, 195, 197, 198], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 117, 118, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 165, 166, 167, 169, 175, 180, 181, 184, 187, 188, 191, 192, 194, 195, 197, 198, 199, 204, 207, 208, 209, 212, 213, 214], "user": [1, 109, 110, 116, 117, 149, 165, 181, 188, 204], "guid": [1, 205], "annot": [1, 3, 4, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 175, 179, 180, 181, 182, 183, 185, 187, 188, 191, 192, 193, 197, 199, 204, 205, 210, 211, 212, 213, 214], "own": [1, 22, 37, 42, 59, 65, 74, 86, 99, 100, 104, 105, 110, 111, 114, 122, 127, 128, 138, 140, 145, 147, 152, 211, 212, 214], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 166, 167, 181, 187, 188, 190, 191, 192, 193, 205, 207, 208, 211], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 98, 99, 100, 101, 104, 105, 110, 111, 112, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 149, 152, 156, 157, 163, 180, 181, 188, 204, 207, 211], "dataset": [1, 22, 37, 42, 59, 61, 70, 74, 75, 78, 79, 80, 81, 82, 84, 86, 87, 96, 98, 110, 111, 119, 125, 130, 133, 138, 152, 187, 191, 194, 195, 197, 198, 211], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 85, 86, 88, 89, 90, 96, 98, 99, 100, 104, 105, 108, 110, 111, 114, 118, 119, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 145, 147, 152, 154, 163, 181, 188, 191, 204, 208, 209, 211, 212], "light": [1, 5, 73, 90, 96, 163, 211, 213], "helper": [1, 122, 152, 158, 180, 197, 198, 199, 211, 214], "function": [1, 76, 84, 87, 129, 135, 156, 192, 203, 211], "third": [1, 124, 143, 189, 194], "parti": [1, 189], "project": [1, 96, 134, 136, 188, 205], "log": [1, 22, 37, 42, 111, 116, 119, 125, 130, 181], "api": [1, 116, 204, 208, 211], "modul": [1, 31, 60, 77, 92, 94, 95, 97, 102, 107, 115, 120, 121, 123, 126, 131, 139, 146, 151, 162, 173, 185, 190, 196], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 166, 167, 180, 188, 191, 194, 195, 196, 197, 198, 205, 207, 208, 212, 213, 214], "format": [2, 3, 4, 8, 52, 53, 55, 56, 57, 59, 61, 91, 93, 99, 100, 101, 103, 104, 105, 110, 111, 114, 119, 127, 129, 135, 140, 141, 149, 152, 153, 155, 157, 158, 161, 164, 166, 194, 195, 197, 198, 199, 205, 214], "annotatortyp": [2, 3, 4, 71, 106, 154, 155, 161, 164, 207], "begin": [2, 51, 109, 130, 147, 149, 154, 155, 164, 180, 207], "end": [2, 11, 15, 19, 23, 27, 32, 35, 38, 44, 51, 111, 116, 117, 125, 129, 135, 147, 149, 152, 155, 164, 180, 188, 194, 204, 207, 209], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 180, 181, 188, 191, 194, 195, 199, 204, 205, 207, 208, 209, 212, 213], "metadata": [2, 3, 4, 43, 51, 58, 96, 105, 110, 111, 113, 122, 155, 157, 161, 163, 164, 180, 188, 192, 207, 209], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 93, 94, 110, 111, 112, 136, 155, 156, 157, 163, 164, 175, 180, 181, 187, 191, 207], "repres": [2, 3, 4, 59, 61, 66, 72, 78, 84, 90, 91, 93, 100, 105, 106, 116, 117, 149, 188, 191, 208], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 170, 175, 180, 181, 188, 197, 204, 207, 208, 209], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 173, 176, 180, 181, 183, 184, 185, 188, 191, 192, 194, 195, 197, 198, 199, 203, 205, 206, 207, 208, 210, 211, 212, 214], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 98, 99, 100, 104, 105, 110, 111, 112, 113, 114, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 149, 152, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 167, 173, 181, 185, 188, 191, 192, 194, 195, 197, 198, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214], "detail": [2, 3, 4, 8, 56, 88, 89, 96, 113, 129, 130, 132, 133, 134, 135, 175], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 170, 175, 179, 180, 181, 186, 187, 188, 191, 192, 194, 195, 197, 198], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 170, 175, 179, 180, 181, 186, 188, 191, 192, 194, 195, 197, 198], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 148, 149, 152, 155, 157, 163, 164, 166, 175, 180, 181, 188, 191, 192, 194, 195, 197, 198, 199, 204, 207, 208, 209, 211, 212, 214], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 180, 182, 191, 197, 207, 208, 211], "possibl": [2, 3, 4, 71, 73, 88, 89, 91, 124, 138, 141, 155, 164, 174, 176, 188, 204], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 68, 71, 76, 78, 84, 85, 88, 91, 93, 96, 98, 99, 101, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 143, 144, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 170, 174, 175, 176, 186, 188, 204, 214], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 56, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 99, 100, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 119, 122, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 150, 152, 154, 156, 163, 165, 167, 175, 181, 191, 194, 198, 199, 208, 212, 213], "wordpiec": 2, "word_embed": [2, 66, 67, 70, 71, 72, 73, 76, 77, 79, 81, 83, 86, 88, 90, 94, 110, 111, 119], "sentence_embed": [2, 22, 37, 42, 68, 69, 74, 75, 77, 78, 80, 82, 84, 85, 89, 94, 136, 188, 204, 208], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 52, 53, 55, 57, 188, 204, 208], "date": [2, 58, 101, 103, 104], "entiti": [2, 9, 13, 17, 21, 25, 29, 34, 40, 46, 49, 51, 55, 58, 70, 91, 92, 93, 100, 105, 107, 108, 109, 110, 111, 112, 113, 145, 150, 157, 163, 191], "sentiment": [2, 22, 37, 42, 76, 90, 94, 135, 181, 208, 209], "po": [2, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48, 59, 61, 93, 94, 110, 111, 147, 152, 163, 180, 181, 191, 194, 196, 207, 211, 212, 213], "chunk": [2, 9, 10, 11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 58, 62, 64, 71, 74, 86, 91, 96, 100, 104, 105, 106, 109, 145, 150, 154, 157, 180, 188, 198, 204, 214], "named_ent": [2, 13, 17, 21, 25, 29, 34, 40, 46, 49, 93, 109, 110, 111, 112, 113, 119, 163, 191], "negex": 2, "labeled_depend": [2, 61], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 154, 164, 167, 175, 192, 208], "keyword": [2, 95, 96, 127], "dummi": [2, 63], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 93, 96, 98, 101, 106, 108, 110, 111, 114, 116, 118, 119, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 141, 144, 148, 149, 152, 175, 181, 188, 194], "index": [2, 84, 96, 100, 148, 181, 194], "charact": [2, 63, 76, 79, 91, 98, 104, 106, 114, 124, 125, 138, 140, 141, 148, 149, 152, 157], "under": [2, 73, 80, 90, 96, 181], "last": [2, 84, 101, 103, 145, 199, 212], "string": [2, 8, 22, 37, 42, 51, 59, 63, 91, 104, 106, 112, 114, 125, 135, 141, 143, 147, 154, 155, 157, 161, 163, 164, 212], "dict": [2, 3, 4, 59, 61, 91, 99, 100, 104, 105, 110, 112, 113, 114, 116, 119, 127, 138, 140, 141, 149, 163, 179, 181, 187, 188, 191], "associ": [2, 3, 4, 37, 85, 91, 104, 109, 116, 188], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 62, 63, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 93, 96, 98, 101, 104, 108, 109, 111, 112, 113, 114, 116, 118, 124, 125, 129, 130, 132, 133, 134, 135, 136, 138, 143, 144, 147, 149, 156, 157, 163, 164, 170, 180, 187, 188, 191, 192, 199, 203, 208], "vector": [2, 37, 67, 68, 69, 71, 72, 74, 75, 76, 85, 86, 87, 136, 156, 157, 207], "where": [2, 37, 72, 76, 91, 96, 99, 100, 104, 105, 106, 116, 122, 125, 127, 129, 130, 135, 136, 140, 141, 152, 154, 197], "applic": [2, 57, 84, 96, 129, 132, 174, 188, 189, 204, 206], "copi": [2, 3, 4, 192], "differ": [2, 3, 4, 53, 55, 59, 61, 76, 78, 81, 82, 88, 90, 96, 101, 124, 125, 138, 149, 152, 163, 188, 212], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 98, 99, 100, 105, 106, 108, 110, 111, 113, 116, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 147, 149, 152, 154, 163, 175, 179, 180, 181, 182, 187, 191, 192, 194, 195, 197, 198], "newli": [2, 3, 4, 84], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 192, 208], "datatyp": [2, 180], "structtyp": 2, "schema": [2, 109, 188, 204], "look": [2, 65, 111, 140, 207], "like": [2, 5, 11, 15, 19, 22, 23, 27, 32, 35, 38, 44, 51, 56, 63, 66, 69, 71, 73, 79, 83, 90, 93, 96, 104, 109, 116, 125, 128, 130, 133, 138, 149, 152, 188, 204, 206, 207], "struct": [2, 155, 161, 164], "containsnul": [2, 37, 153, 155, 161, 164], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 100, 101, 103, 105, 109, 111, 114, 124, 125, 133, 136, 138, 140, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 188, 192, 194, 195, 198, 199, 204, 208, 209], "nullabl": [2, 37, 153, 155, 161, 164], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 163, 164, 166, 167, 180, 181, 188, 191, 194, 195, 197, 199, 204, 207, 208, 209, 214], "integ": [2, 53, 55, 56, 57, 84, 155, 161, 164], "map": [2, 10, 37, 69, 87, 91, 116, 118, 119, 122, 138, 155, 161, 164, 170, 175, 180, 186, 187, 207], "kei": [2, 5, 53, 59, 61, 81, 82, 88, 89, 99, 113, 155, 161, 163, 164, 188, 191, 204], "valuecontainsnul": [2, 155, 161, 164], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 98, 99, 106, 111, 118, 122, 124, 125, 129, 130, 132, 133, 134, 135, 138, 145, 147, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 180, 209, 212], "element": [2, 37, 106, 116, 153, 155, 161, 164], "float": [2, 3, 5, 7, 8, 22, 37, 42, 53, 56, 58, 98, 110, 111, 113, 116, 118, 119, 125, 129, 130, 132, 133, 134, 135, 136, 138, 152, 153, 155, 156, 163, 164, 175], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 100, 129, 130, 132, 133, 134, 135, 163, 180, 187, 191, 194, 195, 197, 198], "arraytyp": [2, 154, 180], "fromrow": 2, "row": [2, 43, 62, 64, 87, 124, 125, 128, 155, 164, 166, 180, 194], "column": [2, 9, 22, 37, 42, 63, 87, 99, 108, 110, 111, 118, 119, 122, 128, 136, 144, 149, 152, 153, 154, 155, 156, 157, 158, 161, 164, 167, 170, 180, 191, 194, 197, 208], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 167, 175, 180, 183, 187, 188, 191, 204, 207, 208, 209, 212, 213, 214], "an": [2, 5, 7, 8, 10, 22, 37, 42, 43, 52, 53, 55, 56, 57, 59, 62, 63, 65, 70, 72, 76, 78, 79, 80, 84, 90, 91, 96, 98, 100, 101, 103, 104, 105, 106, 110, 111, 113, 116, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 138, 140, 141, 145, 149, 152, 154, 155, 156, 157, 158, 163, 164, 167, 170, 175, 179, 180, 182, 186, 187, 188, 194, 195, 197, 198, 203, 205, 207, 208, 209, 211, 212], "annotationaudio": 3, "audio": [3, 153, 188], "alreadi": [3, 93, 96, 110, 111, 112, 149, 150, 163, 191, 212], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 57, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 93, 96, 98, 109, 110, 111, 119, 125, 129, 130, 135, 136, 152, 153, 154, 155, 156, 157, 161, 164, 165, 167, 188, 204, 207, 208, 209, 210], "file": [3, 5, 7, 22, 37, 42, 59, 61, 63, 85, 87, 91, 99, 100, 104, 105, 110, 111, 114, 119, 125, 127, 138, 140, 141, 144, 149, 153, 166, 176, 181, 188, 194, 195, 197, 198, 204, 214], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 98, 111, 118, 129, 130, 132, 133, 134, 135, 138, 188], "annotationimag": [4, 163, 191], "origin": [4, 52, 53, 55, 56, 57, 66, 74, 79, 81, 86, 109, 125, 129, 161], "height": [4, 53, 55, 56, 57, 161], "width": [4, 53, 55, 56, 57, 161], "nchannel": [4, 161], "mode": [4, 22, 37, 42, 111, 119, 140, 155, 161, 164, 188], "imag": [4, 52, 53, 55, 56, 57, 161, 163, 191], "uri": [4, 192], "pixel": [4, 55], "number": [4, 8, 14, 18, 22, 26, 30, 37, 41, 42, 47, 56, 59, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 106, 108, 110, 111, 116, 118, 122, 124, 125, 129, 130, 132, 133, 134, 135, 136, 138, 144, 152, 175, 194, 195], "color": 4, "channel": [4, 53, 55, 56, 57, 138], "opencv": 4, "concern": [5, 7, 8, 12, 52, 53, 55, 56, 57, 58, 66], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 104, 105, 110, 111, 113, 114, 116, 117, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 149, 152, 166, 168, 169, 177, 183], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 104, 105, 110, 111, 113, 114, 116, 117, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 145, 147, 149, 152, 160, 166, 169, 187], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 104, 105, 110, 111, 113, 114, 116, 117, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 166, 169, 181, 187, 188, 191, 192, 209], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 51, 62, 66, 90, 109, 110, 111, 163, 180, 191, 208], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 48, 49, 52, 53, 55, 57, 66, 69, 75, 78, 85, 128, 129, 135, 208], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 26, 28, 29, 30, 33, 34, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 62, 63, 64, 70, 72, 73, 79, 81, 82, 87, 88, 89, 96, 116, 128, 129, 130, 132, 133, 138, 191, 208, 209], "propos": [5, 7, 53, 55, 66, 70, 72, 73, 80, 81, 82, 84, 88, 89, 90], "self": [5, 7, 55, 66, 79, 134, 175], "supervis": [5, 7, 8, 66, 75, 76, 85, 96, 129, 130, 133], "speech": [5, 7, 8, 10, 70, 121, 122, 152, 197, 214], "represent": [5, 7, 55, 66, 67, 68, 73, 74, 75, 76, 86, 87, 88, 89, 90, 109, 135, 166, 179], "learn": [5, 7, 22, 37, 42, 58, 66, 73, 74, 76, 81, 82, 85, 86, 88, 89, 90, 96, 110, 111, 118, 125, 129, 130, 132, 135, 138, 188, 206], "mask": [5, 55, 72, 80, 88, 89, 90, 129, 148], "predict": [5, 8, 52, 55, 72, 80, 111, 130, 135, 188, 204], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 34, 35, 38, 40, 44, 46, 49, 66, 76, 90, 144], "unit": [5, 130, 132, 144], "wei": [5, 55], "ning": 5, "hsu": 5, "benjamin": [5, 70], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 30, 41, 43, 47, 62, 64, 70, 80, 93, 105, 118, 119, 140, 143, 149, 165, 170, 175, 186, 194, 207, 208, 212, 213], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 116, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 164, 166, 167, 174, 175, 176, 179, 180, 188, 194, 195, 197, 198, 204, 207, 208, 209, 213, 214], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 100, 101, 103, 104, 105, 110, 111, 114, 118, 119, 122, 125, 127, 129, 130, 132, 133, 134, 135, 138, 140, 141, 152, 163, 170, 175, 180, 182, 186, 191, 209], "pre": [5, 7, 8, 22, 37, 42, 52, 57, 67, 68, 72, 73, 75, 76, 80, 85, 111, 119, 129, 135, 155, 157, 164, 167, 195, 208], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 64, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 96, 100, 101, 103, 125, 129, 130, 132, 133, 134, 135, 144, 163, 166, 170, 181, 207, 208, 209], "support": [5, 7, 8, 22, 37, 64, 66, 79, 96, 111, 114, 125, 133, 134, 143, 166, 181, 205], "appl": [5, 7, 68, 82, 89, 181], "silicon": [5, 7, 181], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 66, 79, 84, 129], "instruct": [5, 7, 78], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 110, 111, 113, 122, 125, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 152, 184], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 110, 111, 113, 116, 122, 125, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 152, 174, 176, 183, 184, 188, 207, 208], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 170, 188, 204, 208, 209], "audio_assembl": [5, 7, 8, 162, 181], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 170, 188, 204, 208, 209], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 147, 148, 149, 152, 154, 155, 156, 157, 158, 163, 164, 166, 179, 180, 181, 188, 191, 192, 194, 195, 197, 198, 208], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 105, 107, 108, 110, 111, 113, 118, 122, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 170, 180, 186, 188, 191, 192, 194, 197, 204, 208], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 94, 96, 98, 99, 101, 104, 110, 111, 122, 125, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 152, 183, 191, 192, 204, 211], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 114, 116, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 149, 152, 155, 156, 157, 158, 164, 167, 175, 188, 191, 192, 198, 204, 205, 206, 211, 213, 214], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 66, 67, 70, 72, 73, 79, 81, 84, 88, 90, 96, 101, 104, 122, 124, 129, 130, 135, 152, 158, 163, 165, 188, 204, 212], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 81, 83, 84, 85, 86, 88, 90, 93, 96, 101, 103, 104, 111, 113, 114, 116, 117, 124, 125, 127, 129, 130, 132, 133, 134, 135, 140, 148, 152, 156, 163, 180, 192, 194, 195, 208, 209], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 66, 67, 70, 72, 73, 79, 81, 88, 90, 111, 156, 192], "5669": [5, 7, 8, 52, 53, 55, 56, 57, 70], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 63, 70, 73, 75, 76, 78, 83, 88, 89, 93, 96, 101, 106, 109, 113, 116, 125, 129, 130, 132, 133, 134, 135, 140, 148, 149, 155, 156, 157, 164, 167, 175, 188, 191, 198, 204, 205, 206, 208, 211, 214], "extend": [5, 7, 8, 10, 22, 37, 42, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 76, 81, 83, 85, 87, 88, 90, 96, 98, 99, 101, 103, 104, 105, 106, 110, 111, 113, 114, 119, 122, 124, 125, 127, 128, 129, 134, 135, 136, 138, 140, 142, 143, 147, 149, 152, 155, 156, 157, 164, 167, 191], "hubertforctctestspec": 5, "paper": [5, 8, 53, 55, 56, 57, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 96, 125, 128, 129, 130, 132, 133, 134, 135, 152, 198, 214], "abstract": [5, 8, 53, 55, 57, 66, 67, 68, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 96, 129, 130, 132, 133, 134, 135, 144, 198, 214], "approach": [5, 8, 53, 55, 81, 82, 84, 90, 96, 108, 110, 111, 113, 125, 127, 129, 130, 132, 135, 138, 140, 141, 168, 211], "challeng": [5, 37, 55, 73, 76, 78, 81, 82, 84, 96], "three": [5, 138, 150], "uniqu": [5, 116, 117, 129], "problem": [5, 37, 66, 76, 80, 84, 129, 135, 138, 152], "multipl": [5, 8, 37, 57, 70, 91, 96, 101, 124, 129, 149, 180, 188, 194], "sound": [5, 62], "each": [5, 7, 14, 18, 22, 26, 30, 37, 41, 42, 47, 53, 55, 56, 57, 62, 69, 72, 74, 75, 80, 83, 86, 87, 91, 93, 96, 99, 100, 101, 104, 105, 106, 108, 110, 111, 113, 114, 116, 119, 122, 124, 125, 127, 129, 136, 138, 140, 141, 148, 149, 152, 155, 164, 174, 180, 187, 197, 209], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 166, 167, 170, 180, 187, 191, 194, 195, 197, 198, 208, 209, 212, 214], "utter": 5, "lexicon": 5, "dure": [5, 22, 37, 42, 52, 73, 78, 110, 111, 119, 124, 136, 138, 181, 188, 204], "phase": [5, 73, 129], "variabl": [5, 74, 86], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 56, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 106, 114, 116, 124, 125, 129, 130, 132, 133, 134, 135, 136, 138, 148, 149, 175], "explicit": [5, 65, 124, 130], "segment": [5, 51, 53, 55, 73, 81, 151, 152], "deal": [5, 163, 212], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 28, 29, 33, 36, 39, 43, 45, 48, 56, 66, 67, 68, 72, 73, 79, 80, 81, 82, 88, 89, 90, 111, 112, 113, 129, 135], "util": [5, 71, 110, 113, 124, 125, 141, 165, 172, 173, 176, 178, 181, 182, 186, 190], "offlin": [5, 188], "cluster": [5, 69, 75, 78, 85, 181], "step": [5, 22, 37, 42, 74, 86, 111, 119, 188, 204, 208], "align": 5, "target": [5, 85, 129, 133, 134, 149, 154, 163, 191], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 55, 57, 59, 61, 75, 84, 91, 98, 108, 109, 110, 111, 113, 118, 119, 127, 128, 135, 138, 144, 152, 188, 194, 204, 208], "loss": [5, 66, 73, 78, 111, 135, 204], "ingredi": 5, "our": [5, 66, 70, 73, 74, 75, 76, 78, 79, 81, 82, 85, 86, 88, 89, 96, 125, 129, 130, 132, 133, 135, 180, 191, 213], "appli": [5, 9, 22, 37, 42, 53, 57, 62, 63, 91, 93, 111, 112, 119, 124, 135, 138, 140, 157, 180, 194], "over": [5, 62, 73, 80, 88, 89, 90, 129, 132, 140, 149, 180, 188, 204], "region": 5, "onli": [5, 8, 53, 55, 56, 57, 59, 61, 62, 63, 76, 85, 90, 101, 104, 114, 116, 124, 125, 129, 130, 132, 133, 134, 135, 147, 152, 165, 174, 175, 194], "forc": 5, "combin": [5, 14, 18, 26, 30, 41, 47, 56, 73, 79, 87, 96, 129, 133, 135, 138, 140, 152], "acoust": 5, "continu": [5, 109, 130, 136, 158, 204], "reli": [5, 59, 61, 90, 96], "primarili": [5, 84], "consist": [5, 66, 72, 79, 104, 122, 128, 152, 166, 197], "unsupervis": [5, 88, 89, 90, 96, 129, 130], "rather": [5, 53, 65], "than": [5, 37, 42, 53, 65, 73, 74, 78, 86, 88, 89, 90, 96, 98, 106, 110, 116, 130, 132, 133, 134, 140, 141, 208], "intrins": [5, 53], "qualiti": [5, 55, 84, 130, 133], "assign": [5, 37, 91, 112, 127], "simpl": [5, 67, 68, 91, 130, 209], "k": [5, 8, 56, 129, 130, 132, 133, 134, 135, 156, 175], "mean": [5, 8, 10, 14, 18, 26, 30, 37, 41, 47, 53, 55, 56, 57, 84, 88, 96, 98, 101, 103, 116, 129, 130, 132, 133, 134, 135, 136, 148, 156, 163, 175, 208, 209, 212], "teacher": 5, "100": [5, 22, 37, 43, 57, 74, 86, 88, 96, 116, 125, 133, 166], "two": [5, 37, 55, 59, 61, 66, 72, 74, 85, 86, 87, 88, 89, 93, 150, 194, 208], "iter": [5, 59, 61, 66, 74, 86, 122, 152, 188, 204], "either": [5, 8, 22, 42, 57, 61, 70, 71, 83, 91, 96, 98, 104, 127, 128, 135, 152, 154, 163, 164, 166, 191, 209], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 100, 101, 102, 103, 104, 105, 114, 122, 124, 129, 130, 149, 152, 154, 174, 207], "improv": [5, 66, 67, 68, 70, 72, 76, 78, 81, 82, 84, 88, 89, 110, 111, 130, 132, 135, 136, 213], "upon": [5, 64, 96], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 27, 29, 32, 34, 35, 37, 38, 40, 42, 44, 46, 49, 53, 55, 57, 66, 67, 68, 70, 75, 76, 78, 79, 80, 81, 82, 84, 90, 96, 111, 129, 130, 132, 135, 164, 205, 208], "art": [5, 22, 37, 53, 55, 57, 66, 67, 68, 70, 75, 76, 78, 79, 80, 81, 82, 84, 90, 96, 111, 129, 130, 135, 164], "wav2vec": [5, 7], "perform": [5, 53, 55, 57, 63, 66, 70, 72, 73, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 111, 128, 129, 130, 132, 133, 135, 136, 140], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 73, 124], "000h": 5, "benchmark": [5, 8, 57, 66, 72, 73, 75, 76, 88, 89, 129, 132, 135], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 51, 67, 68, 73, 75, 80, 113, 129, 132, 135, 199], "tune": [5, 8, 51, 67, 68, 73, 75, 80, 113, 129, 132, 135], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 180, 192, 194, 195, 197, 198, 199, 204, 207, 208, 209, 213], "19": [5, 58, 69, 75, 106, 197, 199], "13": [5, 9, 10, 51, 88, 89, 93, 122, 157, 199], "rel": [5, 70, 72, 88, 101, 103, 110, 138, 207], "wer": 5, "reduct": [5, 66, 140], "dev": [5, 55, 66, 76, 85], "test": [5, 22, 37, 42, 52, 53, 55, 56, 57, 59, 61, 65, 67, 68, 85, 87, 99, 100, 104, 105, 110, 111, 119, 122, 130, 132, 140, 141, 145, 152, 194, 195, 197, 198, 199, 208, 214], "evalu": [5, 22, 37, 42, 70, 75, 78, 79, 84, 88, 89, 119, 129, 132, 133, 170, 188], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 88, 89, 90, 111, 129, 134, 138], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 93, 96, 111, 118, 129, 130, 132, 133, 134, 135, 136, 138, 140, 175, 207, 212, 213], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 56, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 88, 89, 90, 111, 118, 129, 134, 138], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 168, 169, 170, 173, 177, 181, 183, 187, 188, 204, 208, 209, 212], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 116, 117, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 166, 167, 188, 204, 208, 212], "audioassembl": [5, 7, 8, 153], "audio_cont": [5, 7, 8, 153], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 156, 166, 167, 208, 209], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 155, 156, 157, 164, 166, 167, 180, 188, 204, 207, 208, 209, 213], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 155, 156, 157, 161, 164, 166, 167, 180, 207, 208, 209, 213], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 154, 156, 163, 165, 166, 167, 187, 188, 204, 208, 209, 212], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 71, 73, 87, 93, 96, 98, 110, 111, 113, 116, 128, 129, 130, 132, 133, 135, 136, 138, 140, 141, 147, 152, 153, 155, 157, 158, 161, 164, 166, 167, 180, 188, 204, 209], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 87, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 155, 157, 158, 164, 166, 167, 180, 197, 207, 208, 209], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 63], "apostl": [5, 7, 8], "OF": [5, 7, 66], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 194, 214], "hi": [5, 7, 8, 64, 113, 125, 133], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 85, 88, 89, 90, 98, 111, 118, 129, 130, 132, 133, 134, 135, 138], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 85, 88, 89, 90, 98, 100, 105, 109, 110, 111, 112, 113, 118, 124, 129, 130, 132, 133, 134, 135, 138, 152, 163, 180, 191, 194, 198, 214], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 98, 111, 118, 129, 130, 132, 133, 134, 135, 138], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 96, 98, 111, 118, 129, 130, 132, 133, 134, 135, 138], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 129, 130, 132, 133, 134, 135], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 111, 119, 125, 129, 130, 132, 133, 134, 135, 138, 141, 144, 192, 194], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 129, 130, 132, 133, 134, 135], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 111, 119, 125, 129, 130, 132, 133, 134, 135, 181, 188, 204, 208], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 191, 192, 208, 213], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 90, 93, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 191, 192, 195, 208, 213, 214], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 191, 192], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 98, 99, 100, 105, 110, 111, 112, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 181, 191, 192, 207, 208, 211, 212], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 96, 98, 99, 100, 104, 105, 110, 111, 113, 114, 119, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 153, 155, 159, 160, 163, 164, 179, 180, 181, 187, 188, 191, 192, 194, 195, 197, 198, 208], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 191, 192], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 100, 104, 105, 110, 111, 113, 114, 119, 122, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 145, 149, 152, 165, 176, 179, 190, 192, 194, 195, 197, 198, 199, 208, 214], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 124, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 191, 205], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 98, 99, 100, 105, 110, 111, 113, 122, 125, 128, 129, 130, 132, 133, 134, 135, 138, 140, 141, 143, 149, 152, 154, 175, 188], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 145], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 65, 93, 96, 113, 134, 140, 207, 208], "recognit": [8, 13, 17, 21, 25, 29, 34, 40, 46, 49, 53, 57, 70, 107, 110, 111, 113], "asr": 8, "system": [8, 96, 129, 130, 133], "680": 8, "000": [8, 43, 96, 130, 152, 166], "hour": [8, 64, 101, 103], "multilingu": [8, 88, 89, 133, 152], "multitask": [8, 78, 130], "collect": [8, 84, 96, 132, 188, 204], "web": [8, 51, 63, 70, 130, 188, 204], "well": [8, 57, 59, 61, 62, 75, 85, 88, 89, 96, 116, 129, 166], "translat": [8, 129, 130, 133, 134, 135, 152], "those": [8, 70, 93, 112, 208, 209], "english": [8, 42, 70, 96, 133, 140, 143, 152, 192], "moment": 8, "greedi": [8, 56, 129, 130, 132, 133, 134, 135, 175], "search": [8, 56, 69, 101, 129, 133, 136, 140, 175], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 55, 57, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 84, 85, 88, 89, 90, 96, 113, 129, 130, 134, 135, 165, 175], "setlanguag": 8, "settask": [8, 129, 130, 135, 175], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 78], "via": [8, 12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 85, 161, 181], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 62, 64, 66, 72, 73, 75, 76, 80, 84, 88, 89, 90, 96, 98, 100, 105, 111, 129, 130, 132, 133], "scale": [8, 53, 55, 56, 57, 66, 73, 75, 79, 80, 88, 89, 129, 130, 132, 133, 135], "weak": [8, 75], "studi": [8, 73, 81, 82, 129, 135], "capabl": [8, 52, 55, 73, 90, 130], "simpli": [8, 63, 78, 209], "amount": [8, 57, 85, 96, 105, 130, 152, 163, 212], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48, 53, 55, 56, 57, 62, 63, 65, 66, 75, 93, 101, 103, 106, 111, 116, 129, 130, 133, 135, 138, 140, 143, 147, 152, 163, 194, 208, 209, 212], "gener": [8, 22, 37, 53, 55, 56, 66, 69, 71, 73, 75, 78, 79, 83, 84, 90, 93, 96, 110, 111, 113, 116, 125, 129, 130, 132, 133, 134, 135, 138, 140, 141, 157, 158, 175, 188, 204, 207, 208, 209], "standard": [8, 53, 55, 56, 57, 63, 79, 101, 103, 129, 140, 141, 149], "often": [8, 66, 81, 82, 90], "competit": [8, 88, 89, 96, 133], "prior": [8, 53, 73, 78, 79, 116, 138], "fulli": [8, 191], "zero": [8, 52, 75, 87, 113, 130], "shot": [8, 52, 75, 113, 130], "transfer": [8, 57, 73, 75, 85, 88, 89, 129, 130, 135], "without": [8, 52, 67, 68, 75, 78, 88, 89, 96, 130, 152], "ani": [8, 14, 18, 26, 30, 41, 47, 52, 65, 69, 74, 75, 78, 85, 86, 91, 96, 111, 130, 133, 135, 138, 156, 157, 192, 205, 208, 209, 214], "compar": [8, 55, 57, 66, 72, 73, 76, 78, 80, 90, 96, 125, 129, 132, 135, 138, 188, 204], "human": [8, 72, 96, 132], "accuraci": [8, 53, 55, 59, 61, 67, 68, 74, 85, 86, 88, 89, 110, 111, 122, 140, 152, 204], "releas": [8, 63, 66, 70, 72, 81, 82, 88, 89, 129, 132, 135, 181], "infer": [8, 14, 18, 26, 30, 41, 47, 52, 67, 68, 70, 73, 90, 132], "code": [8, 51, 52, 65, 72, 74, 78, 79, 81, 82, 86, 88, 89, 96, 98, 129, 135, 205, 213], "serv": [8, 55, 205], "foundat": [8, 132], "further": [8, 9, 66, 78, 96, 110, 111, 116, 167], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 33, 34, 36, 39, 40, 45, 46, 48, 49, 53, 61, 63, 75, 76, 78, 79, 80, 91, 93, 110, 111, 129, 130, 133, 134, 135, 136, 138, 143, 166, 175, 188, 204], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 33, 34, 36, 39, 40, 45, 46, 48, 49, 53, 61, 63, 75, 76, 78, 80, 93, 110, 111, 129, 130, 134, 135, 138, 143, 166, 175, 188, 204], "check": [8, 69, 75, 111, 124, 138, 139, 140, 141, 163, 167, 191, 208, 213], "descript": [8, 61, 78, 83, 96, 101, 132, 140, 147, 174, 176], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 91, 93, 100, 101, 103, 105, 106, 109, 110, 111, 114, 116, 119, 124, 125, 129, 130, 132, 133, 134, 135, 136, 138, 140, 143, 148, 149, 152, 154, 156, 157, 158, 163, 166, 167, 170, 175, 181, 191, 194, 198, 209], "minoutputlength": [8, 56, 129, 130, 132, 133, 135], "minimum": [8, 37, 42, 56, 74, 86, 93, 96, 98, 108, 110, 111, 114, 124, 125, 129, 130, 132, 133, 135, 140, 141, 148, 149, 175, 194], "sequenc": [8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 53, 55, 56, 57, 79, 84, 116, 129, 130, 131, 132, 133, 134, 135, 138, 143, 175], "maxoutputlength": [8, 56, 129, 130, 132, 133, 134, 135], "maximum": [8, 22, 37, 42, 51, 56, 65, 74, 86, 93, 96, 108, 110, 111, 114, 116, 118, 124, 125, 129, 130, 132, 133, 134, 135, 138, 140, 148, 149, 175], "dosampl": [8, 56, 129, 130, 132, 133, 135], "sampl": [8, 56, 116, 129, 130, 132, 133, 134, 135, 175], "decod": [8, 56, 72, 79, 129, 130, 132, 133, 134, 135, 175], "temperatur": [8, 56, 116, 129, 130, 132, 133, 135], "next": [8, 36, 56, 81, 82, 96, 101, 103, 129, 130, 132, 133, 134, 135, 175], "probabl": [8, 12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 56, 96, 116, 129, 130, 132, 133, 134, 135, 136, 140, 175], "topk": [8, 56, 129, 130, 132, 133, 135], "highest": [8, 56, 116, 129, 130, 132, 133, 134, 135, 140, 175], "vocabulari": [8, 56, 74, 86, 129, 130, 132, 133, 134, 135, 138, 175], "keep": [8, 56, 57, 62, 96, 114, 129, 130, 132, 133, 134, 135, 175], "filter": [8, 53, 55, 56, 57, 88, 89, 96, 109, 110, 129, 130, 132, 133, 134, 135, 143, 175, 180, 192], "topp": [8, 56, 116, 129, 130, 132, 133, 134, 135, 175], "most": [8, 56, 62, 64, 70, 73, 79, 80, 96, 111, 116, 129, 130, 132, 133, 134, 135, 175], "add": [8, 56, 87, 101, 103, 124, 129, 130, 132, 133, 134, 135, 138, 149, 175, 208], "top_p": [8, 56, 116], "higher": [8, 56, 87, 96, 116, 128, 129, 130, 132, 133, 134, 135, 175], "kept": [8, 56, 129, 130, 132, 133, 134, 135, 175], "repetitionpenalti": [8, 56, 129, 130, 132, 133, 135], "repetit": [8, 56, 129, 130, 132, 133, 134, 135, 175], "penalti": [8, 56, 129, 130, 132, 133, 134, 135, 175], "norepeatngrams": [8, 56, 129, 130, 132, 133, 135], "ngram": [8, 56, 71, 106, 129, 130, 132, 133, 134, 135, 175], "occur": [8, 56, 129, 130, 132, 133, 134, 135, 175], "onc": [8, 56, 129, 130, 132, 133, 134, 135, 175], "beamsiz": [8, 56, 129], "beam": [8, 56, 129, 133, 175], "mr": [8, 133], "middl": [8, 147, 152], "getlanguag": 8, "langaug": [8, 191], "getismultilingu": 8, "do": [8, 9, 64, 85, 96, 109, 143, 149, 163, 204, 208, 212], "xx": [8, 18, 47, 88, 89, 98, 133, 134], "chunk2doc": [9, 154], "convert": [9, 56, 58, 63, 71, 80, 83, 87, 101, 103, 106, 109, 114, 116, 129, 135, 148, 150, 152, 154, 157, 158, 188, 204, 211], "back": [9, 64, 116, 129], "try": [9, 138, 194], "re": [9, 69, 75, 208], "analysi": [9, 22, 37, 42, 76, 78, 90, 126, 127, 135, 172, 209], "doc2chunk": [9, 154], "pretrainedpipelin": [9, 157, 163, 180, 191, 207, 212, 213], "locat": [9, 91, 124, 181, 191, 208], "extract": [9, 10, 11, 15, 19, 23, 27, 32, 35, 38, 44, 53, 55, 56, 57, 59, 62, 64, 71, 87, 91, 92, 93, 95, 96, 100, 101, 103, 105, 109, 110, 111, 112, 124, 125, 127, 136, 138, 141, 145, 150, 156, 157, 158, 163, 181, 188, 191, 204], "york": [9, 113, 157], "jersei": [9, 157], "aren": [9, 157], "t": [9, 14, 18, 26, 30, 41, 47, 64, 73, 81, 99, 114, 125, 127, 149, 157], "far": [9, 116, 130, 157], "apart": [9, 59, 61, 157], "actual": [9, 106, 157, 167], "id": [9, 37, 63, 88, 91, 116, 117, 129, 130, 132, 133, 134, 135, 138, 154, 155, 157, 164, 167, 188, 194], "defin": [9, 10, 109, 110, 111, 138, 143, 147, 157, 180, 188, 191, 204, 208, 212], "amongst": [9, 157], "thing": [9, 138, 157], "explain_document_dl": [9, 157, 163, 180, 191], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 157], "selectexpr": [9, 10, 22, 43, 51, 52, 53, 55, 56, 57, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 99, 100, 101, 103, 104, 105, 106, 109, 112, 113, 114, 122, 124, 125, 127, 134, 142, 143, 145, 148, 149, 150, 154, 156, 157, 180, 194, 195, 197, 207, 208, 213], "explod": [9, 10, 22, 43, 51, 59, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 100, 103, 104, 105, 106, 109, 112, 113, 122, 124, 125, 134, 150, 156, 157, 180, 194, 197, 207, 208, 213], "col": [9, 59, 61, 91, 100, 109, 112, 157, 180, 207], "loc": [9, 13, 17, 21, 25, 29, 34, 40, 46, 49, 93, 109, 110, 111, 157, 163, 180, 191, 194], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 122, 128, 129, 134, 135, 136, 138, 143, 145, 148, 150, 152, 155, 157, 163, 164, 166, 167, 181, 191, 194, 195, 197, 198, 199, 208, 212, 213], "22": [9, 157, 194, 207], "pattern": [10, 62, 63, 91, 101, 104, 114, 140, 141, 148, 149, 152], "part": [10, 65, 70, 96, 99, 121, 122, 132, 142, 152, 154, 197, 214], "tag": [10, 22, 37, 42, 63, 70, 108, 109, 110, 111, 112, 121, 122, 152, 180, 188, 194, 197, 198, 214], "order": [10, 62, 65, 78, 90, 91, 96, 101, 129, 132, 140, 141, 163, 167, 180, 208, 209, 212, 214], "meaning": [10, 142], "phrase": [10, 70, 74, 86, 100, 105], "onto": [10, 180, 209], "pars": [10, 59, 60, 61, 70, 91, 99, 101, 103, 138, 140, 141, 163, 166, 191, 194, 197], "regular": [10, 62, 104, 110, 124], "express": [10, 42, 51, 62, 101, 104, 124], "wrap": [10, 117, 136, 168, 169, 177, 183, 187], "angl": [10, 84], "bracket": 10, "easili": [10, 76, 122, 156, 204], "distinguish": 10, "itself": [10, 65, 96, 135, 152, 165, 209], "form": [10, 22, 37, 42, 87, 91, 99, 100, 101, 104, 105, 125, 127, 140, 141, 152, 156, 188, 194, 195, 208], "peter": [10, 79, 99, 114, 122, 125, 140, 142, 194], "piper": [10, 99, 122, 142], "employe": [10, 99, 122, 142], "pick": [10, 99, 122, 142], "peck": [10, 99, 122, 142], "pickl": [10, 99, 122, 142], "pepper": [10, 99, 122, 142], "nnp": [10, 122, 163, 180, 194, 195, 197, 198, 207, 212, 213, 214], "nn": [10, 122, 194, 195, 197, 198, 214], "vbp": [10, 122, 163, 195, 207, 212, 213], "vbg": [10, 122], "IN": [10, 122, 163, 180, 195, 197, 198, 207, 212, 213], "jj": [10, 122, 163, 180, 194, 197, 207, 212, 213, 214], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 138, 152], "group": [10, 132, 149], "so": [10, 14, 18, 22, 30, 41, 42, 47, 64, 65, 96, 109, 116, 125, 133, 165, 188, 204], "here": [10, 99, 180, 208], "specif": [10, 43, 59, 61, 63, 67, 68, 73, 84, 85, 93, 96, 111, 129, 130, 133, 144, 163, 165, 188, 212], "noun": [10, 195], "success": [10, 70, 80, 130], "grammar": 10, "parser": [10, 59, 61, 93], "perceptronmodel": [10, 59, 61, 93, 110, 122, 194], "Of": [10, 66, 152], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 152, 154, 155, 156, 164, 165, 166, 167, 188, 194, 204, 208], "sentencedetector": [10, 22, 43, 51, 59, 61, 68, 71, 82, 85, 89, 93, 96, 99, 104, 106, 110, 111, 112, 113, 122, 124, 125, 143, 145, 165, 167, 194, 208, 209], "postag": 10, "11": [10, 58, 88, 89, 101, 103, 106, 122, 199], "21": [10, 101, 103, 112, 122, 199], "35": [10, 122, 199], "39": [10, 112, 122, 197, 199], "52": [10, 112, 122, 197], "58": [10, 55, 122], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 96, 156, 208], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 98, 111, 113, 140, 141], "albert": [11, 12, 13, 66], "span": [11, 15, 19, 23, 27, 32, 35, 38, 44, 129, 135], "question": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 59, 61, 67, 68, 76, 81, 82, 90, 113, 122, 129, 130, 135, 163], "answer": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 59, 61, 62, 67, 68, 76, 90, 113, 129, 130, 135, 163], "squad": [11, 15, 19, 23, 27, 32, 35, 38, 44, 66, 67, 68, 72, 80, 81, 82, 129], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 55, 130], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 48, 49, 66, 67, 68, 72, 76, 90], "comput": [11, 15, 19, 23, 27, 32, 35, 38, 44, 53, 55, 57, 66, 72, 73, 78, 85, 130, 134, 141, 152, 163, 212], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 28, 30, 32, 33, 35, 36, 38, 39, 41, 44, 45, 47, 48, 116], "spanclassifi": [11, 15, 19, 23, 27, 32, 35, 38, 44], "document_quest": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44], "document_context": [11, 15, 19, 23, 27, 32, 35, 38, 44], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 56, 76, 85, 110, 111, 114, 124, 125, 129, 148, 149, 165, 174], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 73, 76, 140, 141], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 88, 89, 90, 100, 105, 140, 143], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 88, 89, 90, 100, 106, 109, 129, 130, 132, 133, 134, 135, 140, 143, 163], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 88, 89, 90, 91, 98, 100, 105, 132, 138, 140, 143, 149, 154, 194, 195, 208], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 88, 89, 90, 98, 111, 129, 130, 132, 133, 134, 135, 138], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 66, 67, 68, 70, 72, 73, 78, 81, 82, 88, 89, 90, 188, 204], "multidocumentassembl": [11, 15, 19, 23, 27, 32, 35, 38, 43, 44, 164], "context": [11, 15, 19, 23, 27, 32, 35, 38, 44, 67, 68, 74, 76, 86, 90, 116, 128, 132, 138, 149], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 71, 73, 79, 81, 88, 100, 105, 110, 140, 143, 156, 167], "what": [11, 15, 19, 23, 27, 32, 35, 38, 42, 44, 53, 59, 61, 96, 98, 113, 116, 134, 138, 147, 195, 205], "my": [11, 13, 15, 17, 19, 22, 23, 25, 27, 29, 32, 34, 35, 36, 38, 40, 42, 44, 46, 49, 62, 63, 64, 104, 106, 113, 116, 124, 130, 132, 133, 143, 145, 148, 208], "clara": [11, 15, 19, 23, 27, 32, 35, 38, 44, 113], "live": [11, 13, 15, 17, 19, 23, 25, 27, 29, 32, 34, 35, 38, 40, 44, 46, 49, 113, 130, 132, 188, 204], "berkelei": [11, 15, 19, 23, 27, 32, 35, 38, 44], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 28, 33, 36, 39, 45, 48, 129, 135], "pool": [12, 16, 20, 24, 28, 33, 36, 39, 45, 48, 71, 76, 83, 84], "multi": [12, 16, 20, 22, 24, 28, 33, 36, 37, 39, 42, 45, 48, 66, 85, 88, 89, 96, 98, 134], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 98], "instead": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 68, 96, 98, 101, 103, 135, 156, 157, 163, 212], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 69, 75, 88, 89, 98, 101, 106, 108, 109, 110, 111, 116, 152, 163, 180, 191, 194], "inputcol": [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 83, 98, 153, 155, 156, 157, 158, 161, 164], "averag": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 43, 45, 47, 48, 69, 71, 75, 78, 83, 88, 89, 98, 111, 122, 136], "calcul": [12, 14, 16, 18, 20, 22, 26, 28, 30, 33, 36, 37, 39, 41, 42, 45, 47, 48, 87, 106, 111, 119, 127, 136], "softmax": [12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 72, 74, 86, 138], "sigmoid": [12, 14, 16, 18, 20, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "love": [12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 68, 82, 89, 125, 128, 208], "movi": [12, 14, 16, 18, 22, 24, 26, 28, 30, 33, 39, 41, 42, 45, 47, 48, 128, 208], "child": [12, 14, 16, 18, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48], "pretti": [12, 14, 16, 18, 24, 26, 28, 30, 33, 37, 39, 41, 45, 47, 48, 96], "bore": [12, 14, 16, 18, 24, 26, 28, 30, 33, 39, 41, 45, 47, 48], "neg": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 39, 41, 42, 45, 47, 48, 127, 128, 136, 188, 204], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 28, 29, 30, 33, 34, 36, 39, 40, 41, 45, 46, 47, 48, 49, 53, 55, 57, 113], "setcoalescesent": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 98], "limit": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 53, 55, 57, 64, 66, 70, 79, 80, 84, 87, 90, 96, 135, 140], "almost": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "512": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 43, 45, 47, 48, 64, 69, 75, 76, 80, 84, 134], "help": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 59, 61, 62, 66, 116, 117, 132, 134, 149, 188, 204, 209, 213], "feed": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48], "entir": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 53, 84, 134], "bool": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 39, 41, 45, 47, 48, 62, 63, 64, 68, 71, 85, 91, 93, 98, 100, 101, 105, 106, 109, 110, 111, 114, 119, 124, 125, 129, 130, 132, 133, 134, 135, 136, 138, 140, 143, 148, 149, 152, 154, 156, 157, 158, 163, 166, 170, 175, 181, 188, 191, 192, 194], "one": [12, 14, 16, 18, 20, 24, 26, 28, 30, 33, 36, 37, 39, 41, 45, 47, 48, 51, 53, 55, 56, 57, 59, 61, 63, 67, 68, 80, 83, 88, 89, 90, 96, 98, 101, 104, 109, 116, 125, 140, 145, 167, 204, 208], "albertfortokenclassif": [13, 66], "ner": [13, 17, 21, 25, 29, 34, 40, 46, 49, 88, 89, 93, 94, 145, 163, 180, 181, 188, 191, 204], "token_classifi": [13, 21, 34, 40, 46, 49], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 66], "level": [13, 22, 37, 42, 67, 68, 79, 81, 82, 85, 87, 89, 91, 110, 111, 119, 138, 181, 194], "tokenclassifi": [13, 17, 21, 25, 29, 34, 40, 46, 49], "john": [13, 17, 25, 29, 34, 40, 46, 49, 51, 68, 82, 89, 91, 93, 112, 114, 125, 158, 199], "lenon": [13, 17, 25, 29, 34, 40, 46, 49], "born": [13, 17, 25, 29, 34, 40, 46, 49, 130, 132], "london": [13, 17, 25, 29, 34, 40, 46, 49], "pari": [13, 17, 25, 29, 34, 40, 46, 49, 113], "sarah": [13, 17, 25, 29, 34, 40, 46, 49], "o": [13, 17, 21, 25, 29, 34, 40, 46, 49, 109, 110, 111, 112, 163, 180, 191, 194, 198, 214], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 26, 30, 41, 47], "nli": [14, 18, 26, 30, 41, 47], "natur": [14, 18, 26, 30, 41, 42, 47, 57, 66, 67, 68, 70, 72, 73, 74, 80, 85, 86, 90, 98, 129, 130, 135, 154, 164, 167], "equival": [14, 18, 26, 30, 41, 47, 163, 181, 212], "bartforsequenceclassif": 14, "don": [14, 18, 26, 30, 41, 47, 73, 81, 114], "hardcod": [14, 18, 26, 30, 41, 47], "potenti": [14, 18, 26, 30, 41, 47, 55, 133, 138], "thei": [14, 18, 26, 30, 41, 43, 47, 59, 61, 62, 111, 114, 116, 130, 165, 183, 195, 208], "chosen": [14, 18, 26, 30, 41, 47, 59, 61, 111, 116], "runtim": [14, 18, 26, 30, 41, 47], "usual": [14, 18, 26, 30, 41, 47, 57, 167, 192], "slower": [14, 18, 26, 30, 41, 47], "much": [14, 18, 22, 26, 30, 41, 43, 47, 66, 69, 75, 81, 82, 114, 132, 133, 152, 181, 208], "flexibl": [14, 18, 26, 30, 41, 47, 52, 55], "loop": [14, 18, 30, 41, 47], "through": [14, 18, 30, 41, 47, 66, 80, 93, 96, 133, 158, 209], "longer": [14, 18, 30, 41, 47, 66, 74, 79, 86, 98, 132, 134, 213], "pass": [14, 18, 26, 30, 41, 47, 65, 116], "pose": [14, 18, 26, 30, 41, 47], "premis": [14, 18, 26, 30, 41, 47], "hypothesi": [14, 18, 26, 30, 41, 47], "pair": [14, 18, 26, 30, 41, 47, 52, 75, 93, 133, 188], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 26, 40, 41, 47, 74, 86], "bart": [14, 129], "bertforquestionansw": [15, 43], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_zero_shot_classifier_mnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 70], "camembert_base_qa_fquad": 19, "fr": [19, 20, 70, 98, 133], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 91], "ai": [20, 116, 117, 129, 188, 204], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 70, 98, 134], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 208], "classifierdlapproach": [22, 37, 208], "univers": [22, 59, 61, 84, 85, 134], "encod": [22, 56, 63, 67, 68, 72, 78, 79, 85, 113, 129, 133, 134, 188], "deep": [22, 67, 68, 76, 96, 110, 125, 138], "dnn": 22, "insid": [22, 37, 109, 122, 149, 194], "instanti": [22, 37, 42, 59, 61, 65, 74, 86, 87, 91, 99, 100, 104, 105, 110, 111, 114, 122, 125, 127, 128, 136, 138, 140, 141, 145, 147, 152, 194, 195], "classifierdlmodel": [22, 37, 208], "monitor": [22, 37, 42, 111, 116, 117, 188, 204], "metric": [22, 37, 42, 111, 141, 188], "done": [22, 37, 42, 81, 82, 110, 111, 209], "settestdataset": [22, 37, 42, 111, 119], "method": [22, 37, 42, 65, 66, 73, 74, 78, 80, 86, 90, 96, 111, 136, 192, 203], "expect": [22, 37, 42, 69, 75, 90, 111, 149, 180], "path": [22, 37, 42, 59, 61, 74, 86, 87, 91, 93, 99, 100, 104, 105, 110, 111, 113, 114, 119, 125, 127, 130, 138, 140, 141, 144, 149, 161, 163, 179, 188, 191, 194, 195, 197, 198, 204], "parquet": [22, 37, 42, 111, 119, 153], "datafram": [22, 37, 42, 74, 86, 87, 111, 119, 122, 136, 152, 163, 176, 180, 187, 188, 191, 194, 195, 197, 198, 204, 208, 212, 214], "ha": [22, 37, 42, 43, 52, 53, 55, 56, 57, 62, 63, 64, 66, 72, 73, 76, 81, 82, 84, 87, 96, 99, 104, 111, 119, 125, 127, 129, 133, 135, 140, 141, 152, 153, 154, 161, 163, 188, 192, 197, 204, 208, 209], "same": [22, 37, 42, 51, 66, 80, 81, 87, 88, 91, 93, 111, 116, 119, 135, 136, 165, 188, 209], "follow": [22, 37, 42, 51, 58, 63, 76, 79, 87, 96, 101, 103, 104, 109, 111, 114, 124, 150, 166, 204, 206, 209], "universalsentenceencod": [22, 37, 42, 85, 188, 204, 208], "preprocessingpipelin": [22, 37, 42, 111, 119], "randomsplit": [22, 37, 42, 111, 119], "write": [22, 37, 42, 87, 111, 119, 140, 141, 209], "overwrit": [22, 37, 42, 111, 112, 119, 188], "test_data": [22, 37, 42, 111, 119], "setlabelcolumn": [22, 37, 42, 108, 110, 111, 118, 144, 188, 204, 208], "usag": [22, 37, 42, 51, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 76, 81, 85, 87, 88, 90, 91, 96, 98, 99, 101, 103, 104, 105, 110, 111, 114, 122, 124, 125, 127, 128, 129, 134, 135, 136, 138, 140, 142, 143, 147, 149, 152], "64": [22, 37, 42, 66, 111, 118, 208], "dropout": [22, 42, 111], "coeffici": [22, 42, 110, 111], "enableoutputlog": [22, 37, 42, 111], "stdout": [22, 37, 42, 111, 119], "addit": [22, 37, 42, 59, 61, 65, 67, 68, 91, 110, 111, 116, 119, 124, 130, 149, 188, 207, 208], "evaluationlogextend": [22, 37, 42, 111], "valid": [22, 37, 42, 101, 111, 119, 125, 138, 204], "displai": [22, 37, 42, 119, 130, 188, 204], "time": [22, 37, 42, 66, 74, 86, 88, 89, 96, 101, 119, 128, 138, 152, 181, 207, 208, 212, 213], "labelcolumn": [22, 37, 42, 110, 111], "lr": [22, 37, 42, 111, 152], "rate": [22, 37, 42, 58, 74, 81, 82, 86, 87, 111, 118, 136, 138], "005": [22, 42, 111, 118], "maxepoch": [22, 37, 42, 110, 111], "epoch": [22, 37, 42, 108, 110, 111, 118, 119, 125, 138, 188], "30": [22, 42, 96, 101, 103, 109, 118, 134, 163, 180, 191, 199, 207], "outputlogspath": [22, 37, 42, 111, 125], "randomse": [22, 37, 42, 110, 111], "random": [22, 37, 42, 74, 86, 108, 110, 111, 116, 118, 134, 136, 156], "seed": [22, 37, 42, 74, 86, 108, 110, 111, 118, 134], "shuffl": [22, 37, 108, 118, 129], "testdataset": [22, 37, 42, 111, 188, 204], "statist": [22, 37, 42, 87, 96, 111, 119], "validationsplit": [22, 37, 42, 111, 125], "choos": [22, 37, 42, 71, 83, 111, 116, 125, 140], "proport": [22, 37, 42, 111, 119, 125], "against": [22, 37, 42, 91, 96, 100, 105, 111, 119, 125, 165], "between": [22, 37, 42, 55, 59, 61, 62, 64, 80, 81, 82, 85, 88, 89, 90, 93, 111, 116, 119, 124, 125, 133, 138], "off": [22, 37, 42, 85, 88, 89, 111, 119, 125], "verbos": [22, 37, 42, 110, 111, 119], "multiclassifierdlapproach": [22, 37, 188, 204], "sentimentdlapproach": [22, 37, 42], "accept": [22, 37, 42, 116], "singl": [22, 37, 42, 65, 75, 78, 87, 93, 96, 129, 133, 145, 147, 149, 194], "item": [22, 42, 87, 116, 188, 194, 204], "doubl": [22, 42, 153, 166], "sentenceembed": [22, 37, 42, 83, 87, 156], "In": [22, 37, 42, 53, 57, 64, 70, 72, 73, 79, 80, 87, 90, 91, 96, 98, 99, 100, 104, 105, 124, 125, 127, 129, 130, 132, 133, 135, 140, 141, 152, 188, 197, 204, 208, 209, 213, 214], "csv": [22, 42, 91, 119, 166, 208], "best": [22, 42, 66, 70, 75, 78, 81, 82, 96, 98, 111, 116, 129, 133, 208], "wach": [22, 208], "ever": [22, 42, 63, 208], "opinion": [22, 42, 208], "win": [22, 42, 208], "award": [22, 42, 208], "terribl": [22, 42, 208], "act": [22, 42, 208], "bad": [22, 42, 127, 188, 204, 208], "realli": [22, 42, 116, 128, 208], "trane": 22, "smallcorpu": [22, 42, 208], "read": [22, 42, 52, 53, 55, 56, 57, 59, 61, 74, 86, 96, 99, 100, 101, 103, 104, 105, 110, 113, 114, 119, 125, 127, 130, 138, 140, 141, 149, 152, 153, 155, 161, 164, 176, 179, 181, 182, 188, 192, 194, 195, 197, 198, 204, 208, 214], "header": [22, 42, 43, 166, 208], "src": [22, 42, 52, 53, 55, 56, 57, 59, 61, 87, 99, 100, 104, 105, 110, 111, 122, 140, 141, 145, 152, 194, 195, 197, 198, 199, 208, 214], "useembed": [22, 37, 42, 85, 208], "docclassifi": [22, 37, 42, 208], "setbatchs": [22, 37, 42, 76, 111, 118, 138, 188, 204, 208], "setmaxepoch": [22, 37, 42, 108, 110, 111, 118, 188, 204, 208], "20": [22, 36, 43, 53, 62, 90, 109, 129, 130, 132, 133, 163, 166, 180, 191, 208], "setlr": [22, 37, 42, 111, 118, 188, 204, 208], "5e": [22, 42, 208], "setdropout": [22, 42, 111, 208], "pipelinemodel": [22, 36, 37, 42, 59, 61, 63, 74, 86, 110, 111, 128, 138, 140, 141, 152, 163, 165, 188, 192, 208, 211], "v": [22, 37, 42, 58, 72, 80, 87, 96, 98, 100, 111, 118, 119, 141, 180], "classifierdl_use_trec6": [22, 208], "trec": 22, "multiclassifierdlmodel": [22, 37], "sentimentdlmodel": [22, 37, 42], "sarcasmdl": [22, 208], "classifierdl_use_sarcasm": [22, 208], "sarcasm": [22, 208], "m": [22, 64, 101, 103, 133, 199, 208], "could": [22, 73, 96, 104, 119, 138, 207, 208, 209], "put": [22, 180, 208], "word": [22, 55, 57, 59, 61, 66, 71, 72, 74, 76, 81, 83, 85, 86, 87, 90, 91, 93, 96, 99, 106, 109, 112, 113, 114, 122, 127, 129, 130, 132, 133, 134, 135, 138, 140, 141, 142, 143, 147, 149, 151, 152, 163, 180, 191, 197, 198, 207, 208], "wake": [22, 208], "am": [22, 62, 101, 103, 130, 132, 133, 145, 208], "mondai": [22, 208], "would": [22, 51, 62, 71, 83, 101, 125, 181, 208], "arrays_zip": [22, 59, 61, 96, 208], "out": [22, 69, 75, 96, 99, 114, 129, 130, 132, 133, 134, 135, 142, 143, 208], "normal": [22, 53, 55, 56, 57, 63, 94, 100, 125, 128, 143, 156, 165, 167, 181, 208, 209], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 26, 72], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": [24, 26], "v2": [24, 25, 67, 68, 72], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "debertaforzeroshotclassif": 26, "deberta_base_zero_shot_classifier_mnli_anli_v3": 26, "distilbertforquestionansw": 27, "distilbert": [27, 28, 30, 73], "distilbert_base_cased_qa_squad2": 27, "distilbertforsequenceclassif": [28, 30], "distilbert_base_sequence_classifier_imdb": 28, "distilbertfortokenclassif": 29, "distilbert_base_token_classifier_conll03": 29, "distilbertforzeroshotclassif": 30, "distilbert_base_zero_shot_classifier_uncased_mnli": 30, "albert_for_sequence_classif": [31, 94], "albert_for_token_classif": [31, 94], "bart_for_zero_shot_classif": [31, 94], "bert_for_sequence_classif": [31, 94], "bert_for_token_classif": [31, 94], "bert_for_zero_shot_classif": [31, 94], "camembert_for_sequence_classif": [31, 94], "camembert_for_token_classif": [31, 94], "deberta_for_sequence_classif": [31, 94], "deberta_for_token_classif": [31, 94], "deberta_for_zero_shot_classif": [31, 94], "distil_bert_for_sequence_classif": [31, 94], "distil_bert_for_token_classif": [31, 94], "distil_bert_for_zero_shot_classif": [31, 94], "longformer_for_sequence_classif": [31, 94], "longformer_for_token_classif": [31, 94], "mpnet_for_sequence_classif": [31, 94], "multi_classifier_dl": [31, 94], "roberta_for_sequence_classif": [31, 94], "roberta_for_token_classif": [31, 94], "roberta_for_zero_shot_classif": [31, 94], "sentiment_dl": [31, 94], "xlm_roberta_for_sequence_classif": [31, 94], "xlm_roberta_for_token_classif": [31, 94], "xlm_roberta_for_zero_shot_classif": [31, 94], "xlnet_for_sequence_classif": [31, 94], "xlnet_for_token_classif": [31, 94], "longformerforquestionansw": 32, "longform": [32, 33, 34, 79], "longformer_base_base_qa_squad2": 32, "longformerforsequenceclassif": 33, "longformer_base_sequence_classifier_imdb": 33, "4096": [33, 66, 79], "longformerfortokenclassif": 34, "xlnet_base_token_classifier_conll03": [34, 49], "longformer_base_token_classifier_conll03": 34, "mpnetforquestionansw": 35, "mpnet": [35, 36, 80], "mpnet_base_question_answering_squad2": 35, "mpnetforsequenceclassif": 36, "mpnet_sequence_classifier_ukr_messag": 36, "drive": 36, "car": 36, "bu": 36, "arriv": 36, "minut": [36, 37], "pineappl": 36, "pizza": 36, "worst": 36, "transport": 36, "movement": 36, "food": [36, 116], "mpnet_base_sequence_classifier_imdb": 36, "multiclassifierdl": 37, "bidirect": [37, 67, 68, 76, 90, 129], "gru": 37, "convolut": [37, 53, 57], "machin": [37, 53, 62, 64, 74, 86, 96, 110, 129, 130, 133, 134, 135, 188, 206], "strongli": 37, "relat": [37, 59, 61, 93, 213], "variant": [37, 58, 79, 85], "mai": [37, 64, 65, 116, 132, 133, 154, 207, 208, 209, 212, 213], "instanc": [37, 65, 113, 118, 119, 170, 175, 181, 182, 186], "multiclass": 37, "categor": [37, 192], "precis": [37, 59, 61, 64], "constraint": 37, "mani": [37, 65, 72, 81, 82, 96, 116, 129, 130, 132, 133, 134, 135, 152], "formal": 37, "find": [37, 59, 61, 81, 82, 84, 85, 91, 93, 99, 101, 129, 130], "binari": [37, 161, 176, 188], "bertsentenceembed": [37, 42, 68, 82, 89], "multiclassifi": [37, 188, 204], "001": [37, 58, 110, 111], "10": [37, 51, 59, 96, 101, 103, 112, 116, 133, 136, 140, 188, 199, 207], "44": [37, 74, 86, 122], "shuffleperepoch": 37, "threshold": [37, 42, 74, 86, 96, 98, 110, 113, 138, 152], "ed58abb40640f983": 37, "pn": 37, "newsyou": 37, "toxic": 37, "a1237f726b5f5d89": 37, "dude": 37, "place": [37, 57, 65], "obscen": 37, "insult": 37, "24b0d6c8733c2abe": 37, "thank": [37, 90, 96, 199], "8c4478fb239bcfc0": 37, "gee": 37, "traindataset": [37, 188, 204], "printschema": [37, 153, 155, 161, 164], "root": [37, 51, 59, 61, 93, 153, 155, 161, 164, 195], "setcleanupmod": [37, 155, 164], "shrink": [37, 155, 164], "1e": [37, 188, 204], "setthreshold": [37, 42, 96, 98, 188, 204], "setvalidationsplit": [37, 119, 125], "setverbos": [37, 110, 111, 119], "multiclassifierdl_use_tox": 37, "comment": [37, 96], "jigsaw": 37, "good": [37, 70, 73, 85, 128], "stuff": 37, "wtf": 37, "kind": [37, 96, 101, 103], "crap": 37, "robertaforquestionansw": [38, 113], "roberta": [38, 39, 40, 41, 44, 45, 46, 56, 70, 72, 79, 80, 81, 82, 88, 89, 113, 129], "roberta_base_qa_squad2": [38, 113], "robertaforsequenceclassif": [39, 41], "roberta_base_sequence_classifier_imdb": 39, "robertafortokenclassif": 40, "roberta_base_token_classifier_conll03": 40, "robertaforzeroshotclassif": 41, "roberta_base_zero_shot_classifier_nli": 41, "sentimentdl": 42, "affect": [42, 149], "subject": [42, 59, 61], "view": 42, "common": [42, 84, 91, 145, 154, 181, 211], "product": 42, "review": [42, 116, 184], "tweet": 42, "interpret": [42, 62, 91], "posit": [42, 72, 73, 80, 88, 89, 90, 96, 109, 116, 127, 128, 136, 148, 152, 167, 188, 204], "final": [42, 62, 79, 81, 82, 88, 89, 98, 111, 133, 138, 208], "otheriws": [42, 98], "neutral": [42, 98], "thresholdlabel": [42, 98], "score": [42, 67, 68, 88, 89, 96, 98, 110, 111, 113, 127, 128, 130], "less": [42, 73, 98, 101, 106, 110, 134, 140], "watch": [42, 128], "32": [42, 66, 76, 199, 207, 213], "setthresholdlabel": [42, 98], "p": [42, 63, 74, 86, 98, 111, 119, 133, 147], "sentimentdl_use_imdb": 42, "imdb": 42, "sentimentdl_use_twitt": 42, "wow": 42, "video": [42, 96], "awesom": 42, "bruh": 42, "damn": 42, "wast": [42, 128], "tapasforquestionansw": 43, "implement": [43, 65, 74, 86, 88, 113, 117, 125, 136, 138, 159, 160, 168, 169, 177, 183, 187], "tapa": 43, "design": [43, 53, 55, 58, 67, 68, 81, 82, 84, 100, 129, 134, 188, 204], "about": [43, 59, 61, 81, 82, 87, 96, 113, 116, 124, 141, 163, 165, 207, 209, 212, 213], "tabular": [43, 166], "tabl": [43, 136, 166], "tri": 43, "share": [43, 96, 209], "its": [43, 57, 72, 73, 79, 90, 96, 122, 127, 129, 134, 143, 188, 197], "table_qa_tapas_base_finetuned_wtq": 43, "document_assembl": [43, 113, 136, 162, 166, 181], "table_json": 43, "document_t": [43, 166], "sentence_detector": [43, 94, 113, 123], "table_assembl": [43, 162, 181], "tableassembl": [43, 166], "stage": [43, 136, 163, 165, 188, 204, 208, 209, 212], "json_data": 43, "monei": [43, 166], "ag": [43, 69, 75, 166], "donald": [43, 166], "trump": [43, 166], "75": [43, 96, 166], "elon": [43, 166], "musk": [43, 166], "55": [43, 112, 166, 199], "AS": [43, 51, 113], "who": [43, 62, 64, 147, 208], "earn": 43, "count": [43, 116, 138], "old": [43, 51, 197], "xlmrobertaforquestionansw": 44, "xlm": [44, 45, 46, 88, 89], "xlm_roberta_base_qa_squad2": 44, "xlmrobertaforsequenceclassif": [45, 47], "xlm_roberta_base_sequence_classifier_imdb": 45, "xlmrobertafortokenclassif": 46, "xlm_roberta_base_token_classifier_conll03": 46, "xlmrobertaforzeroshotclassif": 47, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 47, "xlmroberta": 47, "xlnetforsequenceclassif": 48, "xlnet": [48, 49, 80, 90], "xlnet_base_sequence_classifier_imdb": 48, "xlnetfortokenclassif": 49, "spanbert_coref": 50, "spanbertcorefmodel": 51, "corefer": 51, "resolut": [51, 55], "spanbert": 51, "identifi": [51, 87, 96, 100, 104, 116, 117, 148, 149, 188, 209], "given": [51, 53, 55, 56, 57, 62, 64, 78, 91, 96, 113, 129, 130, 135, 138, 140, 141, 143, 174, 187, 188], "told": [51, 103], "mari": [51, 68, 82, 89, 125], "he": [51, 62, 64, 72, 103, 133, 147, 199], "borrow": 51, "book": [51, 63, 130, 138, 195], "her": [51, 113], "link": [51, 191], "ontonot": 51, "corefresolut": 51, "spanbert_base_coref": 51, "maxsegmentlength": 51, "textgenr": 51, "genr": 51, "One": [51, 78, 96, 147, 150], "bc": 51, "broadcast": 51, "convers": 51, "bn": [51, 133], "nw": 51, "wire": 51, "pt": [51, 133], "pivot": [51, 84], "testament": 51, "tc": 51, "telephon": 51, "wb": 51, "setmaxsegmentlength": 51, "settextgenr": 51, "clipforzeroshotclassif": 52, "clip": 52, "contrast": [52, 75, 78, 79, 100, 135], "neural": [52, 57, 67, 68, 72, 111, 125, 129, 134], "network": [52, 57, 67, 68, 76, 111, 125], "abil": [52, 84, 96, 129, 130], "hard": [52, 142], "veri": [52, 56, 57, 62, 70, 76, 88, 89, 90, 129, 130, 132, 134, 135, 163, 207, 209, 212, 213], "similar": [52, 66, 78, 84, 85, 96, 98], "gpt": [52, 81, 116, 129, 130], "imageclassifi": [52, 53, 55, 56, 57], "image_assembl": [52, 53, 55, 56, 57, 162, 181], "zero_shot_classifier_clip_vit_base_patch32": 52, "huggingfac": [52, 53, 55, 56, 57, 70], "clipforzeroshotclassificationtestspec": 52, "candidatelabel": 52, "imagedf": [52, 53, 55, 56, 57], "dropinvalid": [52, 53, 55, 56, 57], "imageassembl": [52, 53, 55, 56, 57, 161], "photo": 52, "bird": [52, 56], "cat": [52, 53, 55, 56, 57], "dog": [52, 56], "hen": [52, 53, 55, 56, 57], "hippo": [52, 53, 55, 57], "room": [52, 56], "tractor": [52, 53, 55, 56, 57], "ostrich": [52, 53, 55, 56, 57], "ox": [52, 53, 55, 56, 57], "setcandidatelabel": 52, "pipelinedf": [52, 53, 55, 56, 57], "revers": [52, 53, 55, 56, 57], "split": [52, 53, 55, 56, 57, 62, 64, 124, 125, 134, 145, 147, 148, 152], "image_nam": [52, 53, 55, 56, 57], "palac": [52, 53, 55, 56, 57], "jpeg": [52, 53, 55, 56, 57], "egyptian_cat": [52, 53, 55, 56, 57], "hippopotamu": [52, 53, 55, 56, 57], "junco": [52, 53, 55, 56, 57], "bluetick": [52, 53, 55, 56, 57], "jpg": [52, 53, 55, 56, 57], "chihuahua": [52, 53, 55, 56, 57], "getcandidatelabel": 52, "image_classifier_vit_base_patch16_224": [52, 57], "convnextforimageclassif": 53, "convnet": 53, "convnext": 53, "2020": [53, 96, 101, 103, 125], "zhuang": 53, "liu": [53, 55, 72, 81, 82], "hanzi": 53, "mao": 53, "chao": 53, "yuan": 53, "wu": 53, "christoph": 53, "feichtenhof": 53, "trevor": 53, "darrel": 53, "sain": 53, "xie": 53, "pure": [53, 57, 134], "inspir": [53, 128, 140, 141, 184], "vision": [53, 55, 56, 57], "claim": 53, "outperform": [53, 75, 79, 80, 84, 85, 88, 89, 90, 96, 130, 132], "convnextforimageclassificationtestspec": 53, "roar": 53, "visual": [53, 55, 188], "began": 53, "introduct": 53, "vit": [53, 56, 57], "quickli": [53, 116], "supersed": 53, "vanilla": 53, "hand": [53, 147], "face": [53, 84], "difficulti": 53, "detect": [53, 55, 85, 97, 98, 116, 117, 123, 124, 125], "semant": [53, 55, 69, 76, 78, 84, 85, 136, 152], "hierarch": [53, 55, 74, 86], "swin": [53, 55], "reintroduc": 53, "sever": [53, 214], "practic": [53, 70, 129, 135], "viabl": 53, "backbon": [53, 55, 90], "demonstr": [53, 55, 73, 79, 84, 96, 130, 133, 134], "remark": 53, "wide": [53, 63, 67, 68, 72, 73, 75, 88, 89, 129, 132], "varieti": [53, 79, 80, 88, 89, 213], "howev": [53, 66, 80, 83, 84, 90, 96, 114, 132, 133, 192, 207], "effect": [53, 55, 56, 57, 79, 84, 116, 124, 129, 133, 135], "hybrid": 53, "still": [53, 130, 188], "credit": 53, "superior": 53, "inher": 53, "induct": [53, 73], "bias": [53, 73], "reexamin": 53, "space": [53, 74, 84, 86, 87, 106, 136, 167], "achiev": [53, 72, 75, 78, 79, 80, 81, 82, 88, 89, 90, 111, 129, 130, 132, 134, 135, 163, 212], "gradual": 53, "modern": 53, "resnet": 53, "toward": [53, 130], "discov": [53, 205], "compon": [53, 57, 84, 118, 119, 153, 161, 170, 175, 186, 212], "contribut": [53, 132], "along": [53, 93], "wai": [53, 59, 61, 91, 93, 165, 191], "outcom": 53, "explor": [53, 84, 129, 133, 135], "famili": [53, 63, 75, 132], "dub": [53, 88, 89], "construct": [53, 65, 74, 86, 149, 191, 211], "compet": 53, "favor": 53, "term": [53, 96], "scalabl": 53, "87": [53, 55], "imagenet": [53, 55, 57], "coco": [53, 55], "ade20k": [53, 55], "while": [53, 55, 57, 66, 73, 78, 87, 96, 116, 119, 130, 133, 188, 204, 209], "maintain": 53, "simplic": [53, 129], "effici": [53, 55, 72, 74, 85, 86, 134, 207], "dores": [53, 55, 56, 57], "resiz": [53, 55, 56, 57], "certain": [53, 55, 56, 57, 138], "donorm": [53, 55, 56, 57], "deviat": [53, 55, 56, 57], "featureextractortyp": [53, 55, 56, 57], "architectur": [53, 55, 56, 57, 66, 67, 68, 72, 81, 98, 111, 125, 129, 135], "featur": [53, 55, 56, 57, 59, 74, 84, 86, 96, 106, 110, 119, 136, 188, 211], "imagemean": [53, 55, 56, 57], "imagestd": [53, 55, 56, 57], "resampl": [53, 55, 56, 57], "pil": [53, 55, 56, 57], "nearest": [53, 55, 56, 57, 136], "bilinear": [53, 55, 56, 57], "bicub": [53, 55, 56, 57], "do_res": [53, 55, 56, 57], "tupl": [53, 55, 56, 57, 187], "dorescal": [53, 55, 56], "rescal": [53, 55, 56], "rescalefactor": [53, 55, 56], "factor": [53, 55, 56, 88, 89, 90, 129, 135, 138], "croppct": 53, "percentag": [53, 87, 138, 152], "crop": 53, "tabbi": [53, 55], "river": [53, 55, 57], "hors": [53, 55, 57], "amphibiu": [53, 55, 57], "snowbird": [53, 55, 57], "struthio": [53, 55, 57], "camelu": [53, 55, 57], "thresher": 53, "thrasher": 53, "thresh": 53, "setdorescal": 53, "boolean": 53, "setrescalefactor": 53, "255": 53, "setcroppct": 53, "determin": [53, 65, 88], "smaller": [53, 64, 73, 74, 86], "224": 53, "256": 53, "specifi": [53, 65, 112, 113, 116, 125, 194, 195], "edg": [53, 73, 93], "afterward": 53, "image_classifier_convnext_tiny_224_loc": 53, "clip_for_zero_shot_classif": 54, "convnext_for_image_classif": 54, "swin_for_image_classif": 54, "vision_encoder_decoder_for_image_capt": 54, "vit_for_image_classif": 54, "swinforimageclassif": 55, "swinimageclassif": 55, "shift": 55, "window": [55, 56, 74, 79, 86, 96, 111, 138], "ze": 55, "yutong": 55, "lin": 55, "yue": 55, "cao": 55, "han": 55, "hu": [55, 133], "yixuan": 55, "zheng": 55, "zhang": 55, "stephen": 55, "bain": 55, "guo": 55, "whose": [55, 65], "scheme": [55, 81, 129], "bring": [55, 133, 208], "greater": [55, 96, 116], "attent": [55, 57, 72, 79, 116, 132], "non": [55, 133, 149, 152], "overlap": [55, 62, 64, 100, 105], "cross": [55, 88, 89, 112], "connect": 55, "image_classifier_swin_base_patch4_window7_224": 55, "swinforimageclassificationtest": 55, "present": [55, 66, 75, 76, 79, 81, 82, 85, 88, 89, 93, 116, 119, 125, 129, 134, 136], "call": [55, 65, 67, 68, 73, 75, 84, 96, 116, 130, 132, 187, 192, 194, 208, 214], "purpos": [55, 73, 75, 125], "adapt": 55, "aris": 55, "domain": [55, 78, 84, 96, 130], "variat": 55, "high": [55, 84, 85, 88, 89, 129, 133, 134], "variou": [55, 84, 90, 202], "complex": [55, 76, 84, 85, 96, 140, 141], "respect": [55, 65, 72, 87, 110, 111, 197], "These": [55, 66, 81, 82, 84, 90, 96, 110, 130, 191, 206], "broad": [55, 62, 130], "rang": [55, 67, 68, 72, 73, 75, 78, 88, 89, 129, 132], "1k": 55, "dens": [55, 67, 68, 69, 133, 136], "box": [55, 133], "ap": 55, "51": [55, 155, 164, 197], "53": [55, 100, 105], "miou": 55, "val": 55, "Its": [55, 61, 113, 129], "surpass": [55, 72], "previou": [55, 78, 80, 88, 89, 130, 208], "margin": [55, 80, 90], "prove": 55, "benefici": [55, 96], "mlp": 55, "visionencoderdecoderforimagecapt": 56, "visionencoderdecod": 56, "caption": 56, "auto": [56, 129, 144], "beit": 56, "deit": 56, "gpt2": [56, 130], "image_captioning_vit_gpt2": 56, "visionencoderdecodertestspec": 56, "nreturnsequ": 56, "computation": [56, 76, 81, 82, 90, 129, 130, 132, 134, 135], "expens": [56, 76, 81, 82, 90, 127, 129, 130, 132, 134, 135, 140], "especi": [56, 129, 130, 132, 134, 135], "larger": [56, 70, 73, 81, 82, 129, 130, 132, 134, 135, 136], "acceler": [56, 76, 90, 129, 130, 132, 134, 135, 181], "gpu": [56, 66, 129, 130, 132, 134, 135, 181], "imagecapt": 56, "setbeams": [56, 129, 133, 175], "setdosampl": [56, 129, 130, 132, 133, 134, 135, 175], "fill": [56, 129], "furnitur": 56, "lai": 56, "couch": 56, "anoth": [56, 209], "brown": 56, "bear": 56, "bodi": 56, "water": 56, "flock": 56, "chicken": 56, "stand": [56, 67, 68], "lush": 56, "green": 56, "field": [56, 74, 86, 87, 91, 105], "small": [56, 57, 63, 66, 70, 73, 74, 86, 99, 122, 163, 197, 212], "wet": 56, "ground": 56, "wooden": 56, "floor": 56, "wear": 56, "blue": 56, "sweater": 56, "man": [56, 130, 132], "cow": 56, "vitforimageclassif": 57, "altern": [57, 96, 116, 127, 138, 140, 141, 163, 166, 208, 213], "vitimageclassificationtestspec": 57, "becom": [57, 66, 73, 96], "de": [57, 70, 96, 98, 133, 134], "facto": [57, 96], "remain": [57, 63, 66, 73, 96], "conjunct": 57, "replac": [57, 63, 72, 79, 98, 99, 112, 125, 129, 140, 141, 174, 208], "overal": [57, 87, 90], "structur": [57, 113, 167, 207], "relianc": [57, 84], "cnn": [57, 98, 111, 125], "necessari": [57, 65, 73, 204, 211], "directli": [57, 133, 163, 188, 192, 204], "patch": 57, "mid": 57, "cifar": 57, "vtab": 57, "etc": [57, 71, 75, 78, 80, 156, 167, 204], "attain": 57, "excel": [57, 90], "substanti": [57, 67, 68], "fewer": [57, 66, 78, 136], "worth": 57, "16x16": 57, "egyptian": 57, "date2chunk": 58, "datematch": [58, 101], "multidatematch": [58, 101, 103], "entitynam": 58, "date_chunk": 58, "omicron": 58, "covid": 58, "world": [58, 62, 63, 64, 84, 145, 188, 199, 204], "health": 58, "organ": [58, 96, 134], "nov": [58, 101, 103, 197], "26": [58, 109, 163, 180, 191, 199], "2021": [58, 101, 103], "118": [58, 166], "121": 58, "01": [58, 101, 103, 104], "setentitynam": 58, "dependencypars": [59, 61, 93], "dependencyparserapproach": [59, 195, 214], "unlabel": [59, 67, 68, 129, 130, 135], "grammat": [59, 61], "dependencyparsermodel": [59, 61, 93], "relationship": [59, 61, 85, 93], "tell": [59, 61, 96, 180], "verb": [59, 61, 195], "modifi": [59, 61, 81, 82, 109, 116, 125], "describ": [59, 61, 93, 96, 134], "particular": [59, 61, 96, 192, 208], "treebank": 59, "penn": 59, "setdependencytreebank": 59, "conll": [59, 61, 110, 111, 181, 195, 196, 211], "u": [59, 61, 72, 73, 96, 103, 109, 110, 111, 163, 180, 191, 195, 206, 209, 214], "setconllu": [59, 61], "dependencytreebank": 59, "conllu": [59, 61, 99, 181, 196, 211], "numberofiter": [59, 61], "converg": [59, 61, 122, 152], "better": [59, 61, 66, 72, 80, 90, 96, 110, 122, 124, 125, 128, 129, 132, 152], "typeddependencyparserapproach": [59, 61], "postagg": [59, 61, 93, 110, 122], "dependency_treebank": 59, "emptydataset": [59, 61], "tree": [59, 93], "bank": 59, "setnumberofiter": [59, 61], "read_a": [59, 61, 91, 99, 100, 104, 105, 110, 114, 119, 127, 140, 141, 149, 173, 179, 181, 194, 195], "reada": [59, 61, 87, 91, 99, 100, 104, 105, 110, 114, 119, 127, 140, 141, 145, 149, 176, 179, 194, 195], "dep": 59, "dependency_conllu": [59, 93], "perceptron": [59, 94, 121], "typeddependencyparsermdoel": 59, "union": [59, 61], "worker": [59, 61], "turner": [59, 61], "newal": [59, 61], "sai": [59, 61, 96, 149], "disappoint": [59, 61], "talk": [59, 61, 116], "stricken": [59, 61], "parent": [59, 61], "firm": [59, 61], "feder": [59, 61], "mogul": [59, 61], "dependency_pars": [60, 94, 192, 213], "typed_dependency_pars": [60, 94], "typeddependencypars": [61, 93], "conll2009": 61, "typeddependencyparsermodel": [61, 93], "beforehand": 61, "2009": 61, "setconll2009": 61, "dependency_typ": [61, 93], "train_smal": 61, "txt": [61, 74, 86, 87, 99, 100, 104, 105, 122, 125, 127, 138, 140, 141, 145, 149, 197, 198, 214], "typdep": 61, "dependency_typed_conllu": [61, 93], "amod": 61, "flat": [61, 93, 158], "nsubj": [61, 93, 158, 195], "parataxi": 61, "documentnorm": [62, 63, 64], "documentcharactertextsplitt": 62, "roughli": 62, "separ": [62, 64, 73, 81, 104, 106, 124, 125, 140, 149, 152, 157, 180, 194, 206], "subtext": 62, "perfect": [62, 64], "reason": [62, 64, 116], "observ": [62, 64, 85], "seen": [62, 64, 129], "addition": [62, 64, 90, 111, 122, 155, 164, 191], "custom": [62, 87, 110, 111, 124, 125, 149, 181, 188], "setsplitpattern": [62, 149], "regex": [62, 63, 91, 101, 104, 114, 138, 140, 141, 148, 149, 152], "setpatternsareregex": 62, "setkeepsepar": 62, "trim": [62, 64], "whitespac": [62, 64, 148, 152, 154], "settrimwhitespac": [62, 64, 148], "individu": [62, 64, 65, 96, 138], "setexplodesplit": [62, 64], "documentcharactertextsplittertest": 62, "chunksiz": 62, "chunkoverlap": 62, "splitpattern": [62, 149], "decreas": [62, 116, 136], "prioriti": [62, 140, 149], "patternsareregex": 62, "keepsepar": 62, "explodesplit": [62, 64], "trimwhitespac": [62, 64, 148], "brioni": 62, "lodg": 62, "serpentin": 62, "aven": 62, "19798": 62, "39395": 62, "19597": 62, "did": [62, 96], "woman": 62, "think": 62, "39371": 62, "59242": 62, "19871": 62, "But": [62, 64, 69, 75], "said": [62, 64], "million": [62, 96, 112, 130], "red": 62, "men": 62, "59166": 62, "77833": 62, "18667": 62, "friend": 62, "enthusiast": 62, "musician": 62, "being": [62, 73, 111, 116, 119, 129, 132, 134, 135, 136], "himself": 62, "capab": 62, "77835": 62, "97769": 62, "19934": 62, "And": 62, "yet": [62, 192], "convinc": 62, "come": [62, 96, 109, 116, 132], "li": 62, "97771": 62, "117248": 62, "19477": 62, "she": [62, 147], "had": [62, 96, 116], "slate": 62, "colour": 62, "brim": 62, "straw": 62, "hat": 62, "feather": 62, "117250": 62, "137242": 62, "19992": 62, "That": [62, 96, 147, 188, 204, 209], "littl": [62, 125, 213], "paradox": 62, "profoundli": 62, "singulari": 62, "137244": 62, "157171": 62, "19927": 62, "setchunks": 62, "setchunkoverlap": 62, "raw": [63, 130, 147, 149, 152, 207, 209], "scrape": 63, "xml": 63, "remov": [63, 81, 82, 114, 128, 148, 156, 157, 158], "dirti": [63, 114], "want": [63, 64, 91, 112, 192, 209], "polici": 63, "__": [63, 129, 156, 157], "action": 63, "clean": [63, 114, 129, 135, 167, 209], "lowercas": [63, 114, 148, 152, 154], "pretty_al": 63, "utf": 63, "cleanuppattern": [63, 114], "normalizeddocu": 63, "setact": 63, "setpattern": [63, 148, 152], "setreplac": 63, "setpolici": 63, "setlowercas": [63, 114, 154, 167], "div": 63, "theworldsgreatest": 63, "right": [63, 67, 68, 129, 152], "hide": 63, "toptext": 63, "style": [63, 98, 135], "font": 63, "sego": 63, "ui": 63, "arial": 63, "san": [63, 96], "serif": 63, "largest": [63, 96, 130], "develop": [63, 96, 132, 134, 185], "site": [63, 96], "h1": 63, "300": 63, "160": 63, "lorem": [63, 100, 105], "ipsum": [63, 100, 105], "print": [63, 65, 181, 192], "typeset": 63, "industri": 63, "been": [63, 70, 130, 132, 150, 167, 192], "1500": [63, 133], "unknown": [63, 64, 98], "printer": 63, "took": 63, "gallei": 63, "scrambl": 63, "specimen": 63, "surviv": 63, "five": [63, 112], "centuri": [63, 152], "leap": 63, "electron": 63, "essenti": [63, 130], "unchang": 63, "popularis": 63, "1960": 63, "letraset": 63, "passag": [63, 69, 75], "recent": [63, 67, 68, 72, 81, 82, 96, 116, 129], "desktop": 63, "publish": [63, 81, 82], "softwar": 63, "aldu": 63, "pagemak": 63, "setencod": 63, "documenttokensplitt": 64, "measur": [64, 73, 81, 82, 129, 188], "futur": [64, 125, 129, 135], "techniqu": [64, 66, 72, 129, 130, 135, 136], "documenttokensplittertest": 64, "numtoken": 64, "tokenoverlap": 64, "immens": 64, "faculti": 64, "extraordinari": 64, "power": [64, 67, 68, 129, 135], "2950": 64, "5707": 64, "2757": 64, "chang": [64, 65, 78, 184], "cloth": 64, "imagin": 64, "deduc": 64, "As": [64, 66, 67, 68, 69, 73, 75, 96, 116], "5659": 64, "8483": 64, "2824": 64, "quarter": 64, "receiv": [64, 197, 214], "Be": 64, "chamber": 64, "8427": 64, "11241": 64, "2814": 64, "piti": 64, "miss": [64, 101, 103, 154], "client": 64, "never": [64, 128, 208], "mind": 64, "him": [64, 103], "11188": 64, "13970": 64, "2782": 64, "person": [64, 91, 195], "emploi": [64, 90], "me": [64, 103], "wish": 64, "agent": 64, "conf": 64, "13918": 64, "16898": 64, "2980": 64, "letter": [64, 114, 130, 132, 138, 197, 214], "secret": 64, "marriag": 64, "16836": 64, "19744": 64, "2908": 64, "seven": 64, "hundr": [64, 88, 89], "holm": [64, 138], "scribbl": 64, "receipt": 64, "shee": 64, "19683": 64, "22551": 64, "2868": 64, "setnumtoken": 64, "settokenoverlap": 64, "documenttokensplittertestspec": 65, "methodnam": 65, "runtest": 65, "By": [65, 84, 127, 129, 135, 143, 148, 156, 181, 188, 204], "fixtur": 65, "testcas": 65, "subclass": [65, 117, 136, 169, 183, 187], "constructor": 65, "argument": [65, 192], "execut": [65, 136, 163, 208, 212], "author": 65, "deconstruct": 65, "overrid": [65, 187], "setup": 65, "teardown": 65, "__init__": 65, "must": [65, 74, 86, 99, 100, 104, 105, 116, 119, 127, 128, 140, 141, 154, 180, 181, 188, 194], "alwai": [65, 96, 116, 135], "signatur": 65, "attribut": [65, 188], "failureexcept": 65, "except": [65, 70, 106, 111, 149], "rais": [65, 81, 82, 96, 106, 111, 188], "assert": 65, "fail": [65, 154], "deem": 65, "error": [65, 138], "longmessag": 65, "long": [65, 68, 79, 84, 90], "messag": [65, 206], "repr": 65, "failur": 65, "maxdiff": 65, "diff": 65, "difflib": 65, "hook": 65, "exercis": 65, "lite": 66, "googl": [66, 67, 68, 72, 74, 76, 81, 82, 85, 86, 96, 135, 195], "research": [66, 67, 68, 72, 74, 86, 134, 135], "toyota": 66, "technolog": 66, "institut": 66, "chicago": 66, "offici": [66, 96, 109, 110, 111, 163, 180, 191, 205], "tf": [66, 85], "wrapper": [66, 184], "port": 66, "properti": [66, 159, 160, 170, 173, 181], "albert_base_uncas": 66, "albert_bas": 66, "768": [66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 84, 88, 89, 90], "emb": 66, "dim": 66, "12m": 66, "albert_large_uncas": 66, "albert_larg": 66, "1024": [66, 76, 79, 90], "24": [66, 90, 100, 105, 109, 138, 163, 180, 191, 207], "16": [66, 90, 112, 197, 207], "18m": 66, "albert_xlarge_uncas": 66, "albert_xlarg": 66, "2048": 66, "60m": 66, "albert_xxlarge_uncas": 66, "albert_xxlarg": 66, "235m": 66, "sentencepiec": [66, 72, 85], "everi": [66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 84, 88, 89, 90, 111, 128, 134, 138, 155, 164, 165, 209], "dimens": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 175], "repeat": [66, 116], "footprint": 66, "cost": [66, 138, 140], "FOR": 66, "http": [66, 70, 72, 74, 76, 78, 85, 86, 116, 129, 152, 205], "tfhub": [66, 76, 85], "q": 66, "increas": [66, 69, 75, 87, 96, 116, 129, 130, 133, 136, 140], "downstream": [66, 70, 72, 76, 78, 79, 90, 129, 130, 135], "some": [66, 68, 88, 96, 111, 125, 130, 165, 188, 199, 207, 208, 212, 213], "point": [66, 67, 68, 124, 125, 155, 164, 194], "harder": 66, "tpu": 66, "consumpt": [66, 85, 87], "speed": [66, 110, 134], "devlin": [66, 81, 82], "et": [66, 81, 82, 98, 133], "al": [66, 81, 82], "2019": [66, 70, 72, 81, 82, 88, 89, 129], "comprehens": [66, 84, 129, 130], "empir": [66, 67, 68, 88, 89, 90], "evid": 66, "lead": [66, 70, 84, 88, 89], "focus": [66, 96, 116], "inter": 66, "coher": [66, 130], "establish": 66, "glue": [66, 67, 68, 73, 80, 81, 82, 88, 89, 129], "race": [66, 72, 81, 82], "embeddingsfinish": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 156], "finished_embed": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "setoutputasvector": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 156], "setcleanannot": [66, 72, 73, 76, 79, 81, 83, 85, 87, 88, 90, 156, 157, 158], "80": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 104, 156, 167], "1342473030090332": [66, 72], "3855540752410889": [66, 72], "9818322062492371": [66, 72], "784737348556518": [66, 72], "847029983997345": [66, 72], "047153353691101": [66, 72], "1520637571811676": [66, 72], "6245765686035156": [66, 72], "009860038757324219": [66, 72], "13450059294700623": [66, 72], "707749128341675": [66, 72], "2916892766952": [66, 72], "04192575812339783": [66, 72], "5764210224151611": [66, 72], "3196685314178467": [66, 72], "527840495109": [66, 72], "15583214163780212": [66, 72], "1614152491092682": [66, 72], "28423872590065": [66, 72], "135491415858268": [66, 72], "bertembed": [67, 71, 78, 83, 111, 156], "small_bert_l2_768": 67, "understand": [67, 68, 73, 80, 88, 90, 96, 129, 135, 152, 207], "introduc": [67, 68, 73, 76, 78, 79, 80, 84, 129, 132, 135], "unlik": [67, 68, 78, 88, 96, 147], "jointli": [67, 68], "condit": [67, 68, 129, 130, 132, 133, 134, 135, 175], "both": [67, 68, 75, 76, 85, 93, 116, 129, 208, 209], "left": [67, 68, 129, 152], "just": [67, 68, 73, 81, 106, 111], "modif": [67, 68], "conceptu": [67, 68], "obtain": [67, 68, 70, 75, 85], "eleven": [67, 68], "push": [67, 68], "absolut": [67, 68], "multinli": [67, 68], "86": [67, 68, 72], "v1": [67, 68], "f1": [67, 68, 88, 89, 111, 130], "93": [67, 68], "83": [67, 68, 72, 197, 198, 214], "small_bert_l2_128": 67, "3497989177703857": [67, 78], "480538547039032": [67, 78], "3238905668258667": [67, 78], "612930893898010": [67, 78], "1357314586639404": 67, "32984697818756104": 67, "6032363176345825": 67, "6791689395904": 67, "8244884014129639": 67, "27088963985443115": 67, "059438943862915": 67, "9817547798156": 67, "1648050546646118": 67, "4725411534309387": 67, "5938255786895752": 67, "5780693292617": 67, "9125322699546814": 67, "4563939869403839": 67, "3975459933280945": 67, "81611204147338": 67, "sentence_bert_embed": 68, "sent_small_bert_l2_768": 68, "islong": 68, "sent_small_bert_l2_128": 68, "orang": [68, 82, 89], "8951074481010437": [68, 82, 89], "13753940165042877": [68, 82, 89], "3108254075050354": [68, 82, 89], "65693199634552": [68, 82, 89], "6180210709571838": [68, 82, 89], "12179657071828842": [68, 82, 89], "191165953874588": [68, 82, 89], "4497021436691": [68, 82, 89], "822715163230896": [68, 82, 89], "7568016648292542": [68, 82, 89], "1165061742067337": [68, 82, 89], "59048593044281": [68, 82, 89], "setislong": 68, "bgeembed": 69, "bge": 69, "baai": 69, "low": [69, 88, 89, 138], "dimension": [69, 85], "bge_bas": 69, "queri": [69, 75, 132, 136, 205], "protein": [69, 75], "femal": [69, 75], "eat": [69, 75], "guidelin": [69, 75], "cdc": [69, 75], "women": [69, 75], "70": [69, 75, 78, 132], "46": [69, 75, 199], "gram": [69, 74, 75, 86, 96, 106, 129, 130, 132, 133, 134, 135, 175], "dai": [69, 75, 101, 103, 138], "chart": [69, 75, 188, 204], "ll": [69, 75, 152], "marathon": [69, 75], "below": [69, 75, 93, 213], "0190285e": [69, 75], "005974853": [69, 75], "072875895": [69, 75], "007944068": [69, 75], "026059335": [69, 75], "0080": [69, 75], "050514214": [69, 75], "010061974": [69, 75], "04340176": [69, 75], "020937217": [69, 75], "05170225": [69, 75], "01157857": [69, 75], "camembertembed": 70, "tasti": 70, "french": [70, 96, 133, 134, 143], "loui": 70, "martin": 70, "muller": 70, "pedro": 70, "javier": 70, "ortiz": 70, "su\u00e1rez": 70, "yoann": 70, "dupont": 70, "laurent": 70, "romari": 70, "\u00e9ric": 70, "villemont": 70, "la": [70, 116, 134], "clergeri": 70, "djam\u00e9": 70, "seddah": 70, "beno\u00eet": 70, "sagot": 70, "facebook": [70, 72, 88, 89, 129], "138gb": 70, "camembert_bas": 70, "camembertembeddingstestspec": 70, "co": [70, 96], "ubiquit": 70, "despit": [70, 129], "concaten": [70, 152], "investig": [70, 73, 85], "feasibl": 70, "monolingu": [70, 88, 89], "crawl": [70, 129, 135], "prefer": [70, 93, 158], "wikipedia": [70, 98, 130], "surprisingli": [70, 85], "4gb": 70, "130": 70, "gb": 70, "reach": [70, 96, 130, 152], "four": [70, 125, 150, 152], "un": [70, 98], "08442357927560806": 70, "12863239645957947": 70, "03835778683423996": 70, "200479581952": 70, "048462312668561935": 70, "12637358903884888": 70, "27429091930389404": 70, "07516729831": 70, "02690504491329193": 70, "12104076147079468": 70, "012526623904705048": 70, "031543646007": 70, "05877285450696945": 70, "08773420006036758": 70, "06381352990865707": 70, "122621834278": 70, "chunkembed": [71, 156], "wordembed": [71, 83, 87, 111, 156, 181], "chunker": [71, 94, 181], "ngramgener": [71, 106], "nerconvert": [71, 109, 110, 111, 188, 204], "poolingstrategi": [71, 83], "aggreg": [71, 83], "sum": [71, 76, 83], "skipoov": 71, "discard": [71, 113], "oov": 71, "setn": [71, 106], "wordembeddingsmodel": [71, 83, 87, 93, 110, 111, 112, 156], "setpoolingstrategi": [71, 83, 84], "55661": 71, "42829502": 71, "86661": 71, "409785": 71, "06316501": 71, "120775": 71, "0732005": 71, "40674996": 71, "22938299": 71, "50597": 71, "288195": 71, "555655": 71, "465145": 71, "140118": 71, "17417": 71, "095253006": 71, "0530925": 71, "218465": 71, "714395": 71, "79860497": 71, "0129999": 71, "139705": 71, "177955": 71, "1887775": 71, "45545": 71, "20030999": 71, "461557": 71, "07891501": 71, "strategi": [71, 83, 84, 101, 104, 124, 138, 174], "setskipoov": 71, "debertaembed": 72, "enhanc": [72, 128, 129], "disentangl": 72, "pengcheng": 72, "xiaodong": 72, "jianfeng": 72, "gao": 72, "weizhu": 72, "chen": [72, 81, 82], "2018": [72, 81, 82], "half": [72, 96], "deberta_v3_bas": 72, "microsoft": [72, 75, 80, 134], "www": 72, "blog": 72, "superglu": 72, "progress": [72, 125, 148], "significantli": [72, 76, 81, 82, 88, 89, 96], "novel": [72, 80, 84, 90, 96, 129], "mechan": [72, 79], "weight": [72, 76, 96, 110, 112, 138], "among": [72, 80], "matric": 72, "second": [72, 76, 104, 124, 143, 148, 208], "mnli": 72, "9": [72, 88, 89, 106, 133, 207, 212, 213], "90": 72, "91": 72, "88": 72, "made": [72, 85, 204], "publicli": [72, 88, 89], "distilbertembed": 73, "fast": [73, 128, 132, 134, 163, 212], "cheap": 73, "distil": 73, "40": [73, 75, 112, 132, 134], "uncas": 73, "preserv": [73, 109, 148, 167], "95": 73, "distilbert_base_cas": 73, "doesn": [73, 81], "token_type_id": [73, 81], "indic": [73, 81, 148, 152], "belong": [73, 81], "sep_token": [73, 81], "sep": 73, "position_id": 73, "ad": [73, 76, 116, 138], "though": [73, 96], "know": [73, 134, 165], "cheaper": 73, "lighter": 73, "preval": 73, "oper": [73, 79, 138, 147, 207], "constrain": 73, "budget": 73, "counterpart": 73, "leverag": [73, 80, 188, 204], "reduc": [73, 80, 140, 141, 167], "retain": 73, "97": [73, 101, 103, 152], "tripl": [73, 93], "cosin": [73, 84], "distanc": [73, 136, 138, 140, 141], "devic": 73, "proof": 73, "concept": [73, 209], "experi": [73, 84, 90, 116, 129, 188, 205], "1127224713563919": 73, "1982710212469101": 73, "5360898375511169": 73, "272536993026733": 73, "35534414649009705": 73, "13215228915214539": 73, "40981462597846985": 73, "14036104083061": 73, "328085333108902": 73, "06269335001707077": 73, "017595693469047546": 73, "024373905733": 73, "15617232024669647": 73, "2967822253704071": 73, "22324979305267334": 73, "04568954557180": 73, "45411425828933716": 73, "01173491682857275": 73, "190129816532135": 73, "1178255230188369": 73, "doc2vecapproach": 74, "word2vec": [74, 77, 94], "corpu": [74, 76, 86, 96, 99, 122, 129, 135, 138, 197, 214], "algorithm": [74, 86, 96, 110, 128, 138, 140, 141], "skip": [74, 86, 93, 138], "doc2vecmodel": 74, "vectors": [74, 86], "windows": [74, 86, 96], "numpartit": [74, 86], "partit": [74, 86, 194], "mincount": [74, 86, 138], "appear": [74, 86, 116, 138], "divid": [74, 86], "1000": [74, 86, 93, 110], "stepsiz": [74, 86], "optim": [74, 81, 82, 84, 86, 111, 113, 125, 132], "025": [74, 86], "maxit": [74, 86], "estim": [74, 86, 144, 159, 168, 177, 187, 208], "distribut": [74, 86], "composition": [74, 86], "sherlockholm": [74, 86, 138, 214], "setvectors": [74, 86], "setwindows": [74, 86, 96], "setsteps": [74, 86], "initi": [74, 86, 138, 148, 165, 181, 194, 195, 197, 198, 204], "setnumpartit": [74, 86], "setmaxit": [74, 86], "numiter": [74, 86], "equal": [74, 86], "setse": [74, 86], "setmincount": [74, 86, 138], "doc2vec_gigaword_300": 74, "06222493574023247": [74, 86], "011579325422644615": [74, 86], "009919632226228714": [74, 86], "109361454844": [74, 86], "doc2vec_wiki": 74, "getvector": [74, 86], "e5embed": [75, 80, 136], "e5": 75, "weakli": 75, "tailor": [75, 78], "e5_smal": 75, "unilm": 75, "manner": [75, 96], "signal": [75, 76], "curat": 75, "ccpair": 75, "readili": 75, "strong": [75, 88, 89], "conduct": [75, 84], "extens": [75, 84, 184], "56": [75, 197], "beir": 75, "mteb": 75, "bm25": 75, "baselin": [75, 85, 130], "beat": 75, "exist": [75, 76, 84, 116, 133, 138, 156, 158, 188], "elmoembed": 76, "elmo": 76, "billion": [76, 130, 132], "lookup": [76, 87, 90, 100, 140, 141], "setpoolinglay": 76, "word_emb": 76, "shape": 76, "batch_siz": 76, "max_length": 76, "lstm_outputs1": 76, "lstm": [76, 111], "lstm_outputs2": 76, "trainabl": 76, "tensor": 76, "poolinglay": 76, "contextu": [76, 129, 138], "characterist": 76, "syntax": 76, "vari": [76, 116], "across": [76, 130, 132], "linguist": [76, 152], "polysemi": 76, "intern": [76, 118, 119, 135, 138, 149, 152, 166, 170, 175, 181], "bilm": 76, "six": [76, 140, 141], "textual": [76, 78, 84], "entail": 76, "expos": 76, "crucial": [76, 84], "mix": [76, 117, 136, 169, 187], "semi": 76, "662458181381226e": 76, "2541114091873169": 76, "6275503039360046": 76, "5787073969841": 76, "19154725968837738": 76, "22998669743537903": 76, "2894386649131775": 76, "21524395048618": 76, "10400570929050446": 76, "12288510054349899": 76, "07056470215320587": 76, "246389418840": 76, "49932169914245605": 76, "12706467509269714": 76, "30969417095184326": 76, "2643227577209": 76, "8871506452560425": 76, "20039963722229004": 76, "0601330995559692": 76, "0348707810044": 76, "albert_embed": [77, 94], "bert_embed": [77, 94], "bert_sentence_embed": [77, 94], "bge_embed": [77, 94], "camembert_embed": [77, 94], "chunk_embed": [77, 94], "deberta_embed": [77, 94], "distil_bert_embed": [77, 94], "doc2vec": [77, 94], "e5_embed": [77, 94], "elmo_embed": [77, 94], "instructor_embed": [77, 94], "longformer_embed": [77, 94], "mpnet_embed": [77, 94], "roberta_embed": [77, 94], "roberta_sentence_embed": [77, 94], "uae_embed": [77, 94], "universal_sentence_encod": [77, 94], "xlm_roberta_embed": [77, 94], "xlm_roberta_sentence_embed": [77, 94], "xlnet_embed": [77, 94], "instructorembed": 78, "instructor": 78, "finetun": [78, 79, 90], "scienc": [78, 96, 205], "financ": 78, "sota": [78, 84, 90], "divers": [78, 85, 129, 130, 135, 205], "setinstruct": 78, "medicin": 78, "instructor_bas": 78, "summar": [78, 79, 96, 129, 130, 134, 135, 175], "embedd": 78, "hkunlp": 78, "togeth": 78, "explain": [78, 188, 204, 211, 213], "special": [78, 138, 152, 182, 209], "330": 78, "mixtur": 78, "66": [78, 112], "unseen": 78, "magnitud": [78, 140, 141], "suggest": [78, 130], "mitig": [78, 84], "url": 78, "io": 78, "dynam": [78, 134], "scalar": 78, "degre": 78, "freedom": 78, "horava": 78, "lifshitz": 78, "graviti": 78, "longformerembed": 79, "iz": 79, "beltagi": 79, "matthew": 79, "arman": 79, "cohan": 79, "checkpoint": 79, "mlm": [79, 80], "096": 79, "longformer_base_4096": 79, "unabl": 79, "quadrat": 79, "linearli": 79, "easi": 79, "thousand": [79, 133], "drop": [79, 143], "motiv": 79, "global": 79, "text8": 79, "enwik8": 79, "wikihop": 79, "triviaqa": 79, "led": [79, 81, 82, 96], "arxiv": [79, 129], "found": [79, 87, 96, 140, 147, 154, 194, 211], "18792399764060974": [79, 81], "14591649174690247": [79, 81], "20547787845134735": [79, 81], "1468472778797": [79, 81], "22845706343650818": [79, 81], "18073144555091858": [79, 81], "09725798666477203": [79, 81], "0417917296290": [79, 81], "07037967443466187": [79, 81], "14801117777824402": [79, 81], "03603338822722435": [79, 81], "17893412709": [79, 81], "08734266459941864": [79, 81], "2486150562763214": [79, 81], "009067727252840996": [79, 81], "24408400058": [79, 81], "22409197688102722": [79, 81], "4312366545200348": [79, 81], "1401449590921402": [79, 81], "356410235166549": [79, 81], "mpnetembed": 80, "adopt": 80, "permut": [80, 90], "inherit": [80, 117, 136, 169, 187], "advantag": [80, 165], "all_mpnet_base_v2": 80, "neglect": [80, 90], "plm": 80, "doe": [80, 88, 96, 109, 133, 134, 163, 165, 192, 209, 212, 213], "full": [80, 90, 208], "thu": [80, 96], "suffer": [80, 90], "discrep": [80, 90], "avoid": [80, 127], "auxiliari": 80, "160gb": 80, "corpora": [80, 96, 100], "down": [80, 111, 208, 209], "stream": [80, 116], "experiment": [80, 96], "022502584": 80, "078291744": 80, "023030775": 80, "0051000593": 80, "080340415": 80, "039": 80, "041702367": 80, "0010974605": 80, "015534201": 80, "07092203": 80, "0017729357": 80, "04661": 80, "robertaembed": [81, 88], "robustli": [81, 82, 113], "yinhan": [81, 82], "myle": [81, 82, 88, 89], "ott": [81, 82, 88, 89], "naman": [81, 82, 88, 89], "goyal": [81, 82, 88, 89], "jingfei": [81, 82], "du": [81, 82, 98], "mandar": [81, 82], "joshi": [81, 82], "danqi": [81, 82], "omer": [81, 82], "levi": [81, 82], "mike": [81, 82], "lewi": [81, 82], "luke": [81, 82, 88, 89], "zettlemoy": [81, 82, 88, 89], "veselin": [81, 82, 88, 89], "stoyanov": [81, 82, 88, 89], "hyperparamet": [81, 82], "mini": [81, 82], "roberta_bas": 81, "bpe": 81, "signific": [81, 82, 88, 89, 96, 99, 132], "gain": [81, 82, 88, 89, 129, 133], "care": [81, 82, 149], "comparison": [81, 82, 85, 143], "privat": [81, 82, 182], "choic": [81, 82, 104], "impact": [81, 82], "replic": [81, 82, 129], "carefulli": [81, 82, 116], "undertrain": [81, 82], "exce": [81, 82, 116], "highlight": [81, 82], "previous": [81, 82, 96], "overlook": [81, 82], "report": [81, 82, 85, 129, 188, 204], "robertasentenceembed": 82, "sent_roberta_bas": 82, "embeddingssent": 83, "22093398869037628": 83, "25130119919776917": 83, "41810303926467896": 83, "380883991718": 83, "uaeembed": 84, "uae": 84, "llm": [84, 132], "satur": 84, "uae_large_v1": 84, "st": 84, "vanish": 84, "gradient": [84, 110], "zone": 84, "core": 84, "idea": [84, 90], "advers": 84, "imped": 84, "hinder": 84, "short": 84, "furthermor": [84, 90], "examin": 84, "scenario": [84, 128], "were": [84, 87, 111, 188, 204], "hello": [84, 100, 105, 145, 199], "moon": 84, "50387806": 84, "5861606": 84, "35129607": 84, "76046336": 84, "32446072": 84, "117674336": 84, "6660665": 84, "961762": 84, "24854276": 84, "1018044": 84, "6569202": 84, "027635604": 84, "1915": 84, "cl": 84, "cls_avg": 84, "avg": 84, "uae_smal": 84, "tfhub_us": 85, "loadsp": 85, "op": 85, "lingual": [85, 88, 89, 96, 98, 134], "accur": [85, 128, 129, 140], "trade": [85, 88, 89], "tend": 85, "With": [85, 90, 96], "minim": [85, 113, 134], "encourag": 85, "weat": 85, "bia": [85, 116], "freeli": 85, "04616805538535118": 85, "022307956591248512": 85, "044395286589860916": 85, "0016493503": 85, "setloadsp": 85, "word2vecapproach": 86, "word2vecmodel": 86, "word2vec_gigaword_300": 86, "word2vec_wiki": 86, "dictionari": [87, 96, 99, 104, 110, 112, 113, 114, 127, 140, 141, 188], "setstoragepath": [87, 100], "line": [87, 91, 100, 105, 116, 125, 127, 138, 191, 194, 197], "delimit": [87, 91, 93, 99, 104, 106, 110, 114, 127, 148, 166, 194, 197], "39658191506190343": 87, "630968081620067": 87, "5393722253731201": 87, "8428180123359783": 87, "7535235923631415": 87, "9699218875629833": 87, "10397182122983872": 87, "11833962569383116": 87, "stress": 87, "0492683418305907": 87, "9415954572751959": 87, "47624463167525755": 87, "16790967216778263": 87, "induc": 87, "1535748762292387": 87, "33498936903209897": 87, "9235178224122094": 87, "1158772920395934": 87, "withcoveragecolumn": 87, "overallcoverag": 87, "writebuffers": 87, "dump": 87, "disk": [87, 208, 209], "storag": [87, 91, 100, 173, 181], "10000": 87, "readcaches": 87, "cach": [87, 129, 135, 136, 192], "random_embeddings_dim4": 87, "abov": [87, 93, 197], "setstorageref": 87, "glove_4d": 87, "setdimens": [87, 175], "patient": 87, "diagnos": 87, "diabet": 87, "9439099431037903": 87, "4707513153553009": 87, "806300163269043": 87, "16176554560661316": 87, "7966810464859009": 87, "5551124811172485": 87, "8861005902290344": 87, "28284206986427307": 87, "025029370561242104": 87, "35177749395370483": 87, "052506182342767715": 87, "1887107789516449": 87, "08617766946554184": 87, "8399239182472229": 87, "5395117998123169": 87, "7864698767662048": 87, "6599600911140442": 87, "16109347343444824": 87, "6041093468666077": 87, "8913561105728149": 87, "5955275893211365": 87, "01899011991918087": 87, "4397728443145752": 87, "8911281824111938": 87, "9840458631515503": 87, "7599489092826843": 87, "9417727589607239": 87, "8624503016471863": 87, "setwritebuffers": 87, "setreadcaches": 87, "glove_100d": [87, 111], "There": [87, 91, 93, 147, 206, 208, 209, 214], "conveni": 87, "coverag": [87, 172], "stat": 87, "whole": [87, 191], "570580005645752": 87, "44183000922203064": 87, "7010200023651123": 87, "417129993438720": 87, "542639970779419": 87, "4147599935531616": 87, "0321999788284302": 87, "4024400115013122": 87, "2708599865436554": 87, "04400600120425224": 87, "020260000601410866": 87, "17395000159": 87, "6191999912261963": 87, "14650000631809235": 87, "08592499792575836": 87, "2629800140857": 87, "3397899866104126": 87, "20940999686717987": 87, "46347999572753906": 87, "6479200124740": 87, "embeddings_col": 87, "coverageresult": 87, "coverateresult": 87, "wordsoverallcoverag": 87, "resultdf": 87, "output_col": 87, "wordscoverag": 87, "cov_embed": 87, "loadstorag": [87, 100], "storage_ref": [87, 100], "xlmrobertaembed": 88, "alexi": [88, 89], "conneau": [88, 89], "kartikai": [88, 89], "khandelw": [88, 89], "vishrav": [88, 89], "chaudhari": [88, 89], "guillaum": [88, 89], "wenzek": [88, 89], "francisco": [88, 89, 96], "guzman": 88, "edouard": [88, 89], "grave": [88, 89], "5tb": [88, 89], "commoncrawl": [88, 89], "xlm_roberta_bas": 88, "abl": [88, 133, 135, 188, 207], "correct": [88, 138, 140, 141, 152], "terabyt": [88, 89], "r": [88, 89, 96], "mbert": [88, 89], "xnli": [88, 89], "mlqa": [88, 89], "particularli": [88, 89, 129], "swahili": [88, 89, 133], "urdu": [88, 89, 133], "capac": [88, 89, 130, 133], "dilut": [88, 89], "sacrif": [88, 89], "ri": [88, 89], "05969233065843582": 88, "030789051204919815": 88, "04443822056055069": 88, "09564960747": 88, "038839809596538544": 88, "011712731793522835": 88, "019954433664679527": 88, "0667808502": 88, "03952755779027939": 88, "03455188870429993": 88, "019103847444057465": 88, "04311436787": 88, "09579929709434509": 88, "02494969218969345": 88, "014753809198737144": 88, "10259044915": 88, "004710011184215546": 88, "022148698568344116": 88, "011723337695002556": 88, "013356896": 88, "xlmrobertasentenceembed": 89, "guzm\u00e3": 89, "sent_xlm_roberta_bas": 89, "xlnetembed": 90, "autoregress": 90, "xl": 90, "exhibit": 90, "involv": [90, 125], "rank": [90, 136, 138], "xlnet_large_cas": 90, "xlnet_base_cas": 90, "zihangdai": 90, "denois": [90, 129], "autoencod": [90, 129], "corrupt": [90, 129], "pro": 90, "con": 90, "enabl": [90, 111, 132, 136, 140, 181], "maxim": [90, 138], "likelihood": [90, 116], "overcom": 90, "formul": 90, "integr": [90, 96, 115, 134, 188, 204, 206], "6287205219268799": 90, "4865287244319916": 90, "186111718416214": 90, "234187275171279": 90, "1967450380325317": 90, "2746637463569641": 90, "9481253027915955": 90, "3431355059146881": 90, "0777631998062134": 90, "092679977416992": 90, "5331977605819702": 90, "11190271377563": 90, "8349916934967041": 90, "45627787709236145": 90, "7890847325325012": 90, "028069257736": 90, "134845569729805": 90, "11672890186309814": 90, "4945235550403595": 90, "66587203741073": 90, "entityrul": 91, "entityrulerapproach": 91, "exact": [91, 100, 105, 116], "definit": [91, 113, 194], "json": [91, 116, 166, 188, 199], "jsonl": 91, "setpatternsresourc": 91, "might": [91, 111, 152, 213], "rule": [91, 101, 104, 127, 147, 149, 174], "w": [91, 94, 104, 110, 114, 147, 149, 181], "winterfel": 91, "jon": 91, "snow": [91, 112, 138], "stark": 91, "eddard": 91, "patternsresourc": 91, "usestorag": 91, "rocksdb": 91, "lord": 91, "29": [91, 112, 152, 197, 199], "38": [91, 199], "setusestorag": 91, "setsentencematch": 91, "setalphabetresourc": 91, "alphabet": [91, 114], "plain": [91, 214], "entityrulermodel": 91, "entity_rul": [92, 94], "graphextract": [93, 158], "graph": [93, 111, 134, 138, 144, 158], "nerdlmodel": [93, 109, 110, 111, 112, 188, 192, 204], "store": [93, 118, 119, 166, 170, 175, 186, 191, 199, 205], "node": 93, "relev": [93, 96, 116], "taken": 93, "implicitli": 93, "setmergeent": 93, "setdependencyparsermodel": 93, "settypeddependencyparsermodel": 93, "setrelationshiptyp": 93, "public": [93, 192, 208], "relationshiptyp": 93, "entitytyp": 93, "explodeent": 93, "roottoken": 93, "travers": 93, "maxsentences": 93, "minsentences": 93, "mergeent": 93, "merg": [93, 100, 105], "neighbor": [93, 136], "includeedg": 93, "symbol": [93, 138, 152], "posmodel": 93, "coordin": [93, 124], "remoteloc": 93, "graphfinish": [93, 158], "rdf": [93, 158], "nertagg": [93, 110, 111, 112], "morn": [93, 158], "flight": [93, 158], "denver": [93, 158], "18": [93, 101, 103, 106, 109, 112, 163, 180, 191, 207], "path1": 93, "setentitytyp": 93, "setexplodeent": 93, "setroottoken": 93, "setmaxsentences": 93, "setminsentences": 93, "setmergeentitiesiobformat": 93, "iob": [93, 109, 110, 111], "iob2": [93, 109], "setincludeedg": 93, "setdelimit": [93, 104, 106], "setposmodel": 93, "class": [94, 173, 178, 185, 196, 203, 204, 212, 214], "classifier_dl": [94, 181], "er": [94, 181], "keyword_extract": [94, 181], "yake_keyword_extract": [94, 95], "ld_dl": [94, 181], "language_detector_dl": [94, 97], "matcher": [94, 181], "big_text_match": [94, 102], "date_match": [94, 102], "multi_date_match": [94, 102], "regex_match": [94, 102], "text_match": [94, 102], "ner_approach": [94, 107], "ner_convert": [94, 107], "ner_crf": [94, 107], "ner_dl": [94, 107], "ner_overwrit": [94, 107], "openai": [94, 130, 181], "openai_complet": [94, 115], "openai_embed": [94, 115], "param": [94, 110, 117, 136, 169, 170, 175, 181, 186, 187], "sentence_detector_dl": [94, 123, 134], "sentiment_detector": [94, 126], "vivekn_senti": [94, 126], "seq2seq": [94, 181], "bart_transform": [94, 131], "gpt2_transform": [94, 131], "llama2_transform": [94, 131], "m2m100_transform": [94, 131], "marian_transform": [94, 131], "t5_transform": [94, 131], "spell_check": [94, 181], "context_spell_check": [94, 139], "norvig_sweet": [94, 139], "symmetric_delet": [94, 139], "chunk_token": [94, 146], "recursive_token": [94, 146], "regex_token": [94, 146], "word_segment": [94, 151], "chunk2_doc": [94, 181], "date2_chunk": [94, 181], "document_character_text_splitt": [94, 181], "document_norm": [94, 181], "document_token_splitt": [94, 181], "graph_extract": [94, 181], "lemmat": [94, 127, 143, 165, 167, 181], "n_gram_gener": [94, 181], "stemmer": [94, 143, 181], "stop_words_clean": [94, 181], "token2_chunk": [94, 181], "yakekeywordextract": 96, "yake": 96, "independ": [96, 140, 141, 147], "grow": 96, "autom": 96, "adequ": 96, "emerg": [96, 129, 135], "tool": [96, 116, 129], "nor": 96, "thesauri": 96, "neither": 96, "written": [96, 134], "plethora": 96, "situat": [96, 125], "access": 96, "restrict": 96, "therefor": [96, 212], "sent": 96, "boundari": [96, 124, 125, 128, 149, 152], "detector": [96, 101, 127], "section": [96, 155, 164, 204, 206, 212], "tweakabl": 96, "upper": 96, "bound": [96, 124, 125, 128], "minngram": 96, "maxngram": 96, "occurr": [96, 174], "nkeyword": 96, "stopword": [96, 112, 143], "stop": [96, 110, 116, 135, 143], "campo": 96, "mangaravit": 96, "pasquali": 96, "jatowt": 96, "jorg": 96, "nune": 96, "journal": [96, 152], "elsevi": 96, "vol": 96, "509": 96, "pp": [96, 152], "257": 96, "289": 96, "turn": [96, 167, 208], "fly": 96, "demand": 96, "within": [96, 122, 128, 129, 130, 149, 154], "resort": 96, "solut": 96, "articl": [96, 138], "rest": [96, 109], "merit": 96, "ten": 96, "carri": 96, "twenti": 96, "setcontextchar": [96, 149], "setminngram": 96, "setnkeyword": 96, "acquir": 96, "kaggl": 96, "platform": [96, 116, 188, 206], "host": 96, "transact": 96, "somewhat": 96, "vagu": 96, "cloud": 96, "confer": 96, "week": [96, 101, 103, 145], "announc": [96, 112], "earli": 96, "tomorrow": [96, 101, 103], "phone": 96, "founder": 96, "ceo": 96, "anthoni": 96, "goldbloom": 96, "declin": 96, "deni": 96, "acquisit": 96, "happen": 96, "rumor": 96, "scientist": 96, "ben": 96, "hamner": 96, "2010": 96, "servic": [96, 116, 134], "got": 96, "even": [96, 135], "few": [96, 149, 197, 214], "competitor": 96, "drivendata": 96, "topcod": 96, "hackerrank": 96, "stai": 96, "ahead": 96, "nich": 96, "home": [96, 181], "bui": [96, 195], "commun": [96, 132], "mindshar": 96, "too": [96, 127, 207], "plenti": 96, "bit": [96, 125, 213], "histori": [96, 125, 138], "earlier": 96, "month": [96, 101, 103, 197, 214], "team": [96, 134, 188, 204], "around": 96, "youtub": 96, "technologi": 96, "interest": 96, "kernel": 96, "On": [96, 130, 134], "analyz": [96, 128], "compani": [96, 134], "script": [96, 133], "centric": [96, 133], "job": [96, 154], "board": [96, 122, 197], "unclear": 96, "accord": [96, 132, 138, 194], "crunchbas": 96, "pitchbook": 96, "launch": 96, "investor": 96, "ventur": 96, "sv": [96, 133], "angel": 96, "levchin": 96, "naravik": 96, "chie": 96, "economist": 96, "hal": 96, "varian": 96, "khosla": 96, "yuri": 96, "milner": 96, "resulttupl": 96, "ascend": 96, "orderbi": 96, "32051516486864573": 96, "37786450577630676": 96, "39922830978423146": 96, "40224744669493756": 96, "41584827825302534": 96, "setmaxngram": 96, "setstopword": [96, 112, 143], "getstopword": 96, "loaddefaultstopword": [96, 143], "danish": [96, 133, 143], "dutch": [96, 133, 143], "finnish": [96, 133, 143], "german": [96, 133, 143, 194, 214], "hungarian": [96, 133, 143], "italian": [96, 116, 133, 138, 143], "norwegian": [96, 133, 143], "portugues": [96, 133, 143], "russian": [96, 133, 143], "spanish": [96, 133, 143], "swedish": [96, 133, 143], "turkish": [96, 133, 143], "languagedetectordl": 98, "ld": 98, "identif": 98, "rnn": 98, "tatoeba": 98, "140": 98, "wiki": 98, "languagedetector": 98, "ld_wiki_tatoeba_cnn_21": 98, "open": [98, 132, 133, 149, 154, 155, 156, 164, 167, 205], "advanc": [98, 154, 167], "scala": [98, 117, 136, 168, 169, 177, 183, 187], "program": 98, "biblioth\u00e8qu": 98, "traitement": 98, "pour": 98, "le": [98, 134], "avanc\u00e9": 98, "langag": 98, "naturel": 98, "programm": 98, "ist": 98, "ein": 98, "textverarbeitungsbibliothek": 98, "f\u00fcr": 98, "fortgeschritten": 98, "nat\u00fcrlich": 98, "sprachverarbeitung": 98, "die": 98, "programmiersprachen": 98, "und": 98, "lemma": [99, 127, 163, 191, 195, 209, 212, 213], "predefin": [99, 100, 104, 105, 127], "setdictionari": [99, 127, 140, 141], "lemmatizermodel": 99, "lemmas_smal": [99, 127], "setformcol": 99, "correspend": 99, "formcol": [99, 195], "setlemmacol": 99, "fromlemma": 99, "key_delimit": 99, "value_delimit": 99, "lemma_antbnc": 99, "bigtextmatch": [100, 105], "textmatch": [100, 105, 145], "externalresourc": [100, 105, 179], "mergeoverlap": [100, 105], "tokenizermodel": [100, 149], "trie": 100, "dolor": [100, 105], "magna": [100, 105], "aliqua": [100, 105], "sit": [100, 105], "laborum": [100, 105], "entityextractor": [100, 105, 145], "extractor": [100, 105, 145], "59": [100, 101, 103, 105], "setent": [100, 105, 108, 145], "setmergeoverlap": [100, 105], "settoken": 100, "tokenizer_model": 100, "bigtextmatchermodel": 100, "btm": 100, "textmatchermodel": [100, 105], "searchtri": 100, "datematcherutil": 101, "setinputformat": [101, 166], "setoutputformat": [101, 103], "desir": [101, 103], "yyyi": [101, 103], "mm": [101, 103, 152], "dd": [101, 103, 104], "Not": [101, 111, 165], "setreadmonthfirst": 101, "juli": 101, "5th": 101, "2015": 101, "07": 101, "05": 101, "setdefaultdaywhenmiss": 101, "setanchordateyear": [101, 103], "anchor": [101, 103], "year": [101, 103, 130, 132, 145, 197], "setanchordatemonth": [101, 103], "januari": [101, 103], "setanchordatedai": [101, 103], "setrelaxedfactorystrategi": 101, "matchstrategi": [101, 174], "match_first": [101, 104, 174], "relax": 101, "exhaust": 101, "1978": [101, 103], "28": [101, 103, 109, 163, 180, 191, 199, 207], "1984": [101, 103], "04": [101, 103], "02": [101, 103], "1980": [101, 103], "79": [101, 103], "31st": [101, 103], "april": [101, 103], "2008": [101, 103], "fri": [101, 103], "1997": [101, 103], "jan": [101, 103], "sun": [101, 103], "1st": [101, 103], "thursdai": [101, 103], "wednesdai": [101, 103], "todai": [101, 103, 199], "yesterdai": [101, 103], "0600h": [101, 103], "06": [101, 103], "00": [101, 103], "6pm": [101, 103], "23": [101, 103, 104, 112, 122, 197, 198, 199, 214], "1988": [101, 103], "31": [101, 103, 104, 112, 122, 197], "dateformat": [101, 103], "readmonthfirst": [101, 103], "defaultdaywhenmiss": [101, 103], "anchordateyear": [101, 103], "anchordatemonth": [101, 103], "anchordatedai": [101, 103], "15": [101, 199], "saw": 103, "visit": [103, 116], "57": [103, 112], "65": [103, 112], "regexmatch": 104, "d": [104, 114, 149, 206], "1970": 104, "setrul": 104, "setexternalrul": 104, "match_al": [104, 174], "match_complet": [104, 174], "externalrul": 104, "ceremoni": 104, "setstrategi": 104, "71": 104, "short_dat": 104, "regexmatchermodel": 104, "regardless": 105, "entityvalu": 105, "buildfromtoken": 105, "27": [105, 122, 124, 197], "48": [105, 152, 199], "setentityvalu": 105, "setbuildfromtoken": 105, "null": 106, "empti": [106, 136, 154], "enablecumul": 106, "join": [106, 122, 166, 197], "setenablecumul": 106, "nerapproach": 108, "recogn": [108, 109, 110, 111, 112, 113, 138], "setminepoch": [108, 110], "setrandomse": [108, 111, 118, 134], "getlabelcolumn": [108, 144], "friendli": [109, 116, 134], "whitelist": [109, 147], "setwhitelist": [109, 147], "outsid": 109, "prefix": [109, 147, 149, 188, 204], "preserveposit": [109, 148, 167], "14": [109, 122, 150, 163, 180, 191, 197], "ekeu": [109, 110, 111, 163, 180, 191], "36": [109, 122, 163, 180, 191, 197, 199], "baghdad": [109, 110, 111, 163, 180, 191], "37": [109, 163, 180, 191], "setpreserveposit": [109, 148, 167], "setnerhasnoschema": 109, "nercrf": 110, "nercrfapproach": [110, 111], "nercrfmodel": [110, 111], "crf": [110, 111], "2003": [110, 111, 152, 194, 214], "exclud": [110, 111], "setexternalfeatur": 110, "minepoch": [110, 111], "l2": 110, "c0": 110, "decai": [110, 111], "2250000": 110, "lossep": 110, "ep": 110, "minw": 110, "includeconfid": [110, 111], "confid": [110, 111, 113], "externalfeatur": 110, "nerdlapproach": [110, 111, 194, 214], "trainingdata": [110, 111, 125, 140, 141, 194], "readdataset": [110, 111, 122, 152, 194, 195, 197, 198, 199, 214], "conll2003": [110, 111, 194, 214], "eng": [110, 111, 194, 214], "setl2": 110, "l2valu": 110, "setc0": 110, "c0valu": 110, "setlossep": 110, "setminw": 110, "setincludeconfid": [110, 111], "verbosevalu": 110, "prerequisit": [110, 111, 112, 208], "nerdl": 111, "char": [111, 114, 125], "bilstm": 111, "tagger": [111, 197, 214], "50": [111, 112, 122, 129, 130, 132, 133, 199], "real": [111, 181, 188, 204], "rage": 111, "graphfold": [111, 138], "usecontrib": 111, "contrib": 111, "cell": [111, 166], "slightli": [111, 125], "includeallconfidencescor": 111, "enablememoryoptim": 111, "slow": 111, "usebestmodel": 111, "bestmodelmetr": 111, "micro": 111, "macro": 111, "setgraphfold": [111, 138, 144], "setusecontrib": 111, "setpo": 111, "setincludeallconfidencescor": 111, "setenablememoryoptim": 111, "setusebestmodel": 111, "setbestmodelmetr": 111, "nermodel": 111, "neroverwrit": 112, "setnewresult": 112, "nerword": 112, "overwritten": 112, "newnerent": 112, "lab": 112, "42": [112, 122], "45": [112, 122, 197, 199], "47": [112, 197, 199], "ner_overwritten": 112, "setnerword": 112, "setnewnerent": 112, "cardin": 112, "setreplaceent": 112, "rw": 112, "zeroshotnermodel": 113, "zeroshotn": 113, "zer_shot_n": 113, "entitydefinit": 113, "citi": 113, "town": 113, "predictionthreshold": 113, "01f": 113, "ignoreent": 113, "zero_shot_n": 113, "setentitydefinit": 113, "hellen": 113, "5328949": 113, "9360068": 113, "83294415": 113, "45366877": 113, "setpredictionthreshold": 113, "zero_shot_ner_roberta": 113, "shortcut": 113, "stem": [114, 142, 163, 191, 212, 213], "henc": 114, "pl": [114, 133], "slangdictionari": 114, "slang": 114, "minlength": [114, 124, 125, 148, 149], "maxlength": [114, 124, 125, 148, 149], "setcleanuppattern": 114, "punctuat": [114, 124], "alphanumer": 114, "za": 114, "z": [114, 149], "brother": 114, "dont": [114, 128], "setslangdictionari": 114, "setminlength": [114, 124, 125, 148, 149], "setmaxlength": [114, 124, 125, 148, 149], "normalizermodel": 114, "openaicomplet": 116, "request": 116, "complet": [116, 188, 205, 208], "executor": 116, "doc": [116, 138, 198, 214], "suffix": [116, 147, 149, 208], "insert": [116, 140, 141, 208], "maxtoken": 116, "nucleu": 116, "mass": 116, "numberofcomplet": 116, "prompt": 116, "logprob": 116, "echo": 116, "presencepenalti": 116, "penal": 116, "topic": 116, "frequencypenalti": 116, "frequenc": [116, 128, 138, 140, 141, 152], "verbatim": 116, "bestof": 116, "best_of": 116, "server": [116, 213], "side": [116, 152], "logitbia": 116, "abus": [116, 117], "pleasur": 116, "dine": 116, "fiorita": 116, "truli": 116, "delight": 116, "menu": 116, "boast": 116, "wonder": 116, "classic": 116, "dish": 116, "exquisit": 116, "prepar": [116, 153, 155, 161, 164], "staff": [116, 127], "227": 116, "barbecu": 116, "joe": 116, "dinner": 116, "amaz": 116, "pull": 116, "pork": 116, "smoke": 116, "turkei": 116, "brisket": 116, "rib": 116, "sandwich": 116, "opt": 116, "172": 116, "overallr": 116, "reviewbodi": 116, "enjoi": 116, "meal": 116, "restaur": [116, 127], "flavour": 116, "beautifulli": 116, "setmodel": [116, 117, 125], "setsuffix": [116, 147], "setmaxtoken": 116, "plu": [116, 130], "max_token": 116, "cannot": 116, "settemperatur": [116, 129, 130, 132, 133, 134, 135, 175], "determinist": 116, "alter": 116, "settopp": [116, 129, 130, 132, 133, 134, 135, 175], "compris": 116, "setnumberofcomplet": 116, "consum": 116, "quota": 116, "ensur": [116, 183], "setlogprob": 116, "respons": [116, 125, 132], "setecho": 116, "setstop": 116, "setpresencepenalti": 116, "setfrequencypenalti": 116, "setbestof": 116, "control": [116, 129, 130, 132, 133, 134, 135, 136, 138, 175], "candid": [116, 138, 140, 141, 149], "setlogitbia": 116, "mathemat": 116, "ban": 116, "exclus": 116, "50256": 116, "prevent": 116, "endoftext": 116, "setus": [116, 117], "openaiembed": 117, "py": [117, 136, 168, 169, 177, 183, 187], "ins": [117, 136, 169, 187], "uid": [117, 136, 169, 187], "classifierencod": 118, "attach": [118, 119, 170, 175, 186, 188], "evaluationdlparam": 119, "setevaluationlogextend": 119, "setenableoutputlog": [119, 188, 204], "setoutputlogspath": [119, 125, 188, 204], "assum": 119, "perceptronapproach": [122, 197, 214], "member": [122, 191], "datasetpath": 122, "pierr": [122, 197], "vinken": [122, 197], "34": [122, 197, 199], "md": [122, 197], "vb": [122, 194, 197, 214], "41": [122, 124, 197, 199], "43": [122, 124, 197, 199], "dt": [122, 197, 198, 214], "49": [122, 197], "poscol": [122, 152, 194], "niter": [122, 152], "anc": [122, 197, 214], "trainingperceptrondf": 122, "trainedpo": 122, "setposcolumn": [122, 152], "cd": [122, 194, 197], "setiter": 122, "getniter": [122, 152], "pos_anc": 122, "25": [122, 124, 197, 199], "33": [122, 199], "sentencedetectorparam": 124, "ii": 124, "abbrevi": 124, "period": 124, "geo": 124, "1026": 124, "253": 124, "553": 124, "ellipsi": 124, "quotat": 124, "mark": [124, 125, 152], "exclam": 124, "breaker": 124, "pragmaticcontentformatt": 124, "custombound": [124, 125], "setcustombound": [124, 125], "usecustomboundsonli": [124, 125], "explodesent": [124, 125, 194, 195], "useabbrevi": 124, "explicitli": [124, 125, 143, 180, 208], "customboundsstrategi": 124, "prepend": [124, 154], "break": 124, "append": [124, 138, 208], "parallel": [124, 125, 163, 194, 212], "splitlength": [124, 125], "forcibli": [124, 125], "99999": [124, 125, 149], "detectlist": 124, "nhow": 124, "setcustomboundsstrategi": 124, "setuseabbrevi": 124, "setdetectlist": 124, "setusecustomboundsonli": [124, 125], "setexplodesent": [124, 125], "setsplitlength": [124, 125], "sentencedetectordl": [125, 134], "sentencedetectordlapproach": 125, "sentencedetectordlmodel": [125, 134], "modelarchitectur": 125, "impossiblepenultim": 125, "imposs": [125, 152], "penultim": 125, "epochsnumb": 125, "eo": 125, "stefan": 125, "schweter": 125, "sajawel": 125, "ahm": 125, "cover": [125, 129, 133, 135, 152], "broken": 125, "moder": 125, "lack": 125, "easier": [125, 157, 210, 214], "polit": 125, "successor": 125, "great": 125, "heritag": 125, "bequeath": 125, "nelson": 125, "mandela": 125, "setepochsnumb": 125, "model_architectur": 125, "validation_split": 125, "epochs_numb": 125, "output_logs_path": 125, "setimpossiblepenultim": 125, "impossible_penultim": 125, "sentencedl": 125, "sentencesdl": 125, "helen": 125, "total": [125, 152], "peopl": 125, "sentimentdetector": 127, "els": 127, "viveknsentimentapproach": [127, 128], "cool": 127, "superb": 127, "uninspir": 127, "sentimentscor": 127, "nice": [127, 188, 204], "entri": [127, 155, 164, 192], "sttr": 127, "sentimentdetectormodel": 127, "sda": [127, 128], "pragmat": 127, "viveknsenti": 128, "analys": 128, "vivek": 128, "narayanan": 128, "give": 128, "transit": [128, 138], "sentimentcol": 128, "prunecorpu": 128, "unfrequ": 128, "scope": 128, "naiv": 128, "bay": 128, "vivekn": 128, "setsentimentcol": 128, "train_senti": 128, "result_senti": 128, "finish": [128, 136, 156, 158, 162, 165, 181], "final_senti": 128, "cast": [128, 153], "horribl": 128, "go": [128, 208], "again": [128, 147], "anyon": 128, "protagonist": 128, "music": 128, "setprunecorpu": 128, "viveknsentimentmodel": 128, "sentiment_vivekn": 128, "barttransform": 129, "handl": [129, 178, 196], "captur": [129, 136], "past": [129, 134, 192], "incorpor": 129, "versatil": 129, "valuabl": 129, "summari": [129, 130, 132, 133, 135], "distilbart_xsum_12_6": 129, "barttestspec": 129, "cumul": [129, 130, 132, 133, 134, 135, 175], "ignoretokenid": [129, 130, 132, 133, 135], "usecach": 129, "ab": 129, "1910": 129, "13461": 129, "pytorch": [129, 133], "fairseq": [129, 133], "arbitrari": 129, "nois": 129, "reconstruct": [129, 167], "tranform": 129, "randomli": 129, "dialogu": [129, 132], "roug": 129, "bleu": [129, 133], "ablat": 129, "influenc": [129, 138], "setmaxoutputlength": [129, 130, 132, 133, 134, 135, 175], "200": [129, 135], "rich": [129, 135], "rise": [129, 135], "methodologi": [129, 135], "landscap": [129, 135], "unifi": [129, 135], "systemat": [129, 135], "dozen": [129, 135], "insight": [129, 135], "coloss": [129, 135], "facilit": [129, 135], "setignoretokenid": [129, 130, 132, 133, 134, 135], "setminoutputlength": [129, 130, 132, 133, 135, 175], "settopk": [129, 130, 132, 133, 134, 135, 175], "setrepetitionpenalti": [129, 130, 132, 133, 134, 135, 175], "ctrl": [129, 130, 132, 133, 134, 135, 175], "setnorepeatngrams": [129, 130, 132, 133, 134, 135, 175], "setcach": 129, "use_cach": 129, "gpt2transform": 130, "caus": [130, 149], "goal": [130, 152], "direct": [130, 133], "10x": 130, "synthet": 130, "unpreced": 130, "prime": 130, "lengthi": 130, "benefit": 130, "suffici": 130, "learner": 130, "typic": 130, "taskspecif": 130, "webpag": [130, 205], "webtext": 130, "coqa": 130, "exceed": 130, "127": 130, "fashion": [130, 136], "5b": 130, "underfit": 130, "reflect": [130, 133], "paragraph": [130, 138], "promis": 130, "leonardo": [130, 132], "1776": [130, 132], "came": [130, 132], "kingdom": [130, 132], "llama2transform": 132, "llama": 132, "chat": 132, "7b": 132, "70b": 132, "13b": 132, "4k": 132, "excit": 132, "reinforc": 132, "feedback": 132, "rlhf": 132, "safeti": 132, "chatgpt": 132, "llama2": 132, "llam2": 132, "facebookresearch": 132, "suitabl": 132, "substitut": 132, "close": 132, "llama_2_7b_chat_hf_int4": 132, "m2m100transform": 133, "m2m100": 133, "seq": 133, "900": 133, "m2m100_418m": 133, "srclang": 133, "tgtlang": 133, "afrikaan": 133, "af": 133, "amhar": 133, "arab": 133, "asturian": 133, "ast": 133, "azerbaijani": 133, "az": 133, "bashkir": 133, "ba": 133, "belarusian": 133, "bulgarian": 133, "bg": 133, "bengali": 133, "breton": 133, "br": 133, "bosnian": 133, "catalan": 133, "valencian": 133, "ca": 133, "cebuano": 133, "ceb": 133, "czech": 133, "welsh": 133, "cy": 133, "da": 133, "greeek": 133, "el": 133, "estonian": 133, "persian": 133, "fa": 133, "fulah": 133, "ff": 133, "fi": 133, "western": 133, "frisian": 133, "fy": 133, "irish": 133, "ga": 133, "gaelic": 133, "scottish": 133, "gd": 133, "galician": 133, "gl": 133, "gujarati": 133, "gu": 133, "hausa": 133, "hebrew": 133, "hindi": 133, "croatian": 133, "hr": 133, "haitian": 133, "creol": 133, "ht": 133, "armenian": 133, "hy": 133, "indonesian": 133, "igbo": 133, "ig": 133, "iloko": 133, "ilo": 133, "iceland": 133, "japanes": [133, 152], "ja": 133, "javanes": 133, "jv": 133, "georgian": 133, "ka": 133, "kazakh": 133, "kk": 133, "central": [133, 205], "khmer": 133, "km": 133, "kannada": 133, "kn": 133, "korean": [133, 152], "ko": 133, "luxembourgish": 133, "letzeburgesch": 133, "lb": 133, "ganda": 133, "lg": 133, "lingala": 133, "ln": 133, "lao": 133, "lo": 133, "lithuanian": 133, "lt": 133, "latvian": 133, "lv": 133, "malagasi": 133, "mg": 133, "macedonian": 133, "mk": 133, "malayalam": 133, "mongolian": 133, "mn": 133, "marathi": 133, "malai": 133, "burmes": 133, "nepali": 133, "ne": 133, "flemish": 133, "nl": 133, "northern": 133, "sotho": 133, "occitan": 133, "post": 133, "oc": 133, "oriya": 133, "panjabi": 133, "punjabi": 133, "pa": [133, 198, 214], "polish": 133, "pushto": 133, "pashto": 133, "romanian": 133, "moldavian": 133, "moldovan": 133, "ro": 133, "ru": 133, "sindhi": 133, "sd": 133, "sinhala": 133, "sinhales": 133, "si": 133, "slovak": 133, "sk": 133, "slovenian": 133, "sl": 133, "somali": 133, "albanian": 133, "sq": 133, "serbian": 133, "sr": 133, "swati": 133, "ss": 133, "sundanes": 133, "su": 133, "sw": 133, "tamil": 133, "ta": 133, "thai": 133, "th": 133, "tagalog": 133, "tl": 133, "tswana": 133, "tn": 133, "tr": 133, "ukrainian": 133, "uk": 133, "ur": 133, "uzbek": 133, "uz": 133, "vietnames": 133, "vi": 133, "wolof": 133, "wo": 133, "xhosa": 133, "xh": 133, "yiddish": 133, "yi": 133, "yoruba": 133, "yo": 133, "chines": [133, 152], "zh": [133, 152], "zulu": 133, "zu": 133, "beyond": 133, "massiv": 133, "worldwid": 133, "mine": 133, "spars": 133, "focu": 133, "wmt": 133, "reproduc": [133, 188, 204, 205], "m2m": 133, "setsrclang": 133, "settgtlang": 133, "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": 133, "life": 133, "chocol": 133, "mariantransform": 134, "marian": 134, "free": 134, "mainli": 134, "academ": 134, "notabl": 134, "edinburgh": 134, "adam": 134, "mickiewicz": 134, "pozna\u0144": 134, "commerci": 134, "contributor": 134, "mariannmt": 134, "engin": [134, 145], "behind": 134, "deploi": [134, 205], "opus_mt_en_fr": 134, "langid": 134, "maxinputlength": 134, "differenti": 134, "toolkit": 134, "setmaxinputlength": 134, "capit": [134, 138], "franc": 134, "quell": 134, "capital": 134, "devrait": 134, "savoir": 134, "fran\u00e7ai": 134, "setlangid": 134, "t5transform": 135, "t5": 135, "reconsid": 135, "hyper": 135, "t5_small": 135, "setstopateo": 135, "encount": 135, "setmaxnewtoken": 135, "setusecach": 135, "documentsimilarityrank": 136, "documentsimilarityrankerapproach": 136, "lsh": 136, "lib": 136, "approxim": 136, "aim": 136, "ranker": 136, "documentsimilarityrankermodel": 136, "doc_similarity_rank": 136, "enablecach": 136, "rdd": 136, "similaritymethod": 136, "neighbour": 136, "brp": 136, "bucket": 136, "euclidean": 136, "numberofneighbour": 136, "bucketlength": 136, "hash": 136, "numhasht": 136, "visibledist": 136, "identityrank": 136, "ident": 136, "debug": 136, "setsimilaritymethod": 136, "setnumberofneighbour": 136, "setbucketlength": 136, "setnumhasht": 136, "setvisibledist": 136, "setidentityrank": 136, "document_similarity_ranker_finish": 136, "documentsimilarityrankerfinish": 136, "finished_doc_similarity_rankings_id": 136, "finished_doc_similarity_rankings_neighbor": 136, "setextractnearestneighbor": 136, "docsimrankerpipelin": 136, "1510101612": 136, "1634839239": 136, "12448559591306324": 136, "612640902": 136, "1274183715": 136, "1220122862046063": 136, "1320876223": 136, "1293373212": 136, "17848855164122393": 136, "1548374770": 136, "1719102856": 136, "23297156732534166": 136, "visibl": 136, "inclus": 136, "asretriev": 136, "rag": 136, "extractnearestneighbor": 136, "getinputcol": [136, 144, 156, 157, 170], "getoutputcol": [136, 153, 155, 156, 157, 161, 164, 170], "document_similarity_rank": 137, "contextspellcheck": 138, "contextspellcheckerapproach": [138, 140, 141], "noisi": 138, "spell": [138, 139, 140, 141, 163, 167, 211, 212, 213], "contextspellcheckermodel": [138, 140, 141], "surround": [138, 166], "edit": [138, 140, 141], "subword": 138, "checker": [138, 140, 141, 211], "languagemodelclass": 138, "lm": 138, "wordmaxdist": 138, "maxcandid": 138, "casestrategi": 138, "uppercas": 138, "errorthreshold": 138, "perplex": 138, "nlm": 138, "initialr": 138, "finalr": 138, "validationfract": 138, "datapoint": 138, "min": 138, "vocab": 138, "compoundcount": 138, "compound": 138, "classcount": 138, "tradeoff": 138, "weighteddistpath": 138, "levenshtein": [138, 140, 141], "maxwindowlen": 138, "rememb": 138, "maxsentlen": 138, "norvigsweetingapproach": [138, 140, 141, 214], "symmetricdeleteapproach": [138, 140, 141, 214], "depth": [138, 211], "explan": [138, 211], "awar": 138, "sherlock": 138, "spellcheck": [138, 140, 141], "setwordmaxdist": 138, "setepoch": 138, "setlanguagemodelclass": 138, "1650": 138, "addvocabclass": 138, "_name_": 138, "extra": [138, 140, 208], "dist": 138, "setmaxcandid": 138, "setcasestrategi": 138, "seterrorthreshold": 138, "setinitialr": 138, "setfinalr": 138, "setvalidationfract": 138, "fraction": 138, "setcompoundcount": 138, "setclasscount": 138, "settradeoff": 138, "alpha": 138, "setweighteddistpath": 138, "setmaxwindowlen": 138, "setmaxsentlen": 138, "sentlen": 138, "userdist": 138, "addregexclass": 138, "spellcheck_dl": 138, "gamma": 138, "decis": 138, "correctsymbol": 138, "comparelowcas": 138, "vocabfreq": 138, "idsvocab": 138, "vocabid": 138, "usenewlin": 138, "newlin": 138, "norvigsweetingmodel": [138, 140, 141], "symmetricdeletemodel": [138, 140, 141], "cold": 138, "dreari": 138, "countri": 138, "white": 138, "smow": 138, "setweight": 138, "setgamma": 138, "setvocabfreq": 138, "setidsvocab": 138, "setvocabid": 138, "setclass": 138, "getwordclass": 138, "updateregexclass": 138, "updat": 138, "updatevocabclass": 138, "setcorrectsymbol": 138, "setcomparelowcas": 138, "norvigsweet": 140, "norvig": 140, "bayesian": 140, "tokenpattern": 140, "sensit": [140, 143, 149], "doublevari": 140, "shortcircuit": 140, "frequencyprior": 140, "ham": 140, "intersect": 140, "wordsizeignor": 140, "dupslimit": 140, "duplic": 140, "reductlimit": 140, "attempt": 140, "vowelswaplimit": 140, "vowel": 140, "swap": 140, "corrector": 140, "gummi": [140, 141], "gummic": [140, 141], "gummier": [140, 141], "gummiest": [140, 141], "gummifer": [140, 141], "basi": [140, 141], "token_pattern": [140, 141], "setdoublevari": 140, "setshortcircuit": 140, "setfrequencyprior": 140, "symmetr": [140, 141], "delet": [140, 141, 208], "damerau": [140, 141], "transpos": [140, 141], "spellcheck_norvig": 140, "symspel": [140, 141], "somtim": 140, "wrrite": [140, 141], "wordz": [140, 141], "erong": [140, 141], "sometim": [140, 141, 208], "wrong": [140, 141], "symmetricdelet": 141, "deriv": 141, "teach": 141, "maxeditdist": 141, "frequencythreshold": [141, 152], "deletesthreshold": 141, "patttern": 141, "setmaxeditdist": 141, "setfrequencythreshold": [141, 152], "setdeletesthreshold": 141, "spellcheck_sd": 141, "spmetim": 141, "employ": 142, "stopwordsclean": [143, 156, 167], "mllib": [143, 205], "stopwordsremov": 143, "cleantoken": [143, 156, 167], "stopwords_en": 143, "jvm": [143, 181], "forth": 143, "setlocal": 143, "tfnerdlgraphbuildermodel": 144, "tfnerdlgraphbuild": 144, "sethiddenunitsnumb": 144, "assertiondlapproach": 144, "medicalnerapproach": 144, "gethiddenunitsnumb": 144, "srt": 144, "getgraphfold": 144, "setgraphfil": 144, "greaph": 144, "getgraphfil": 144, "chunktoken": 145, "flatten": 145, "artist": 145, "benezar": 145, "robert": 145, "farendel": 145, "graduat": 145, "luca": 145, "chunktokenizermodel": 145, "recursivetoken": 147, "recurs": [147, 165, 177, 181, 185], "infix": [147, 149], "qam": 147, "setprefix": 147, "setinfix": 147, "recursivetokenizermodel": 147, "regextoken": [148, 152, 209], "tolowercas": [148, 152], "positionalmask": 148, "guarante": 148, "increment": 148, "flag": 148, "eventu": 148, "settolowercas": [148, 152], "nthi": 148, "setpositionalmask": 148, "tokenizedsent": 149, "rulefactori": [149, 174], "targetpattern": 149, "grab": 149, "prefixpattern": 149, "suffixpattern": 149, "infixpattern": 149, "sub": 149, "won": 149, "exceptionspath": 149, "casesensitiveexcept": 149, "contextchar": 149, "splitchar": 149, "didn": 149, "jane": 149, "boyfriend": 149, "getinfixpattern": 149, "getsuffixpattern": 149, "getprefixpattern": 149, "getcontextchar": 149, "getsplitchar": 149, "settargetpattern": 149, "setprefixpattern": 149, "setsuffixpattern": 149, "setinfixpattern": 149, "addinfixpattern": 149, "setexcept": 149, "getexcept": 149, "setexceptionspath": 149, "addexcept": 149, "setcasesensitiveexcept": 149, "getcasesensitiveexcept": 149, "addcontextchar": 149, "setsplitchar": 149, "addsplitchar": 149, "piec": 149, "token_rul": 149, "token2chunk": 150, "17": [150, 197, 199], "wordsegment": 152, "wordsegmenterapproach": 152, "correspond": [152, 188], "rr": 152, "likewis": 152, "themselv": 152, "\u4e0a\u6d77": 152, "\u8ba1\u5212": 152, "\u5230": 152, "\u672c": 152, "\u4e16\u7eaa": 152, "\u672b": 152, "\u5b9e\u73b0": 152, "\u4eba\u5747": 152, "\u56fd\u5185": 152, "\u751f\u4ea7": 152, "\u603b\u503c": 152, "\u4e94\u5343": 152, "\u7f8e\u5143": 152, "\u4e0a": 152, "\u6d77": 152, "\u8ba1": 152, "\u5212": 152, "\u4e16": 152, "\u7eaa": 152, "\u5b9e": 152, "\u73b0": 152, "\u4eba": 152, "\u5747": 152, "\u56fd": 152, "\u5185": 152, "\u751f": 152, "\u4ea7": 152, "\u603b": 152, "ll\u503c": 152, "\u4e94": 152, "\u5343": 152, "\u7f8e": 152, "\u5143": 152, "shanghai": 152, "plan": 152, "dollar": 152, "capita": 152, "gdp": 152, "wordsegmentermodel": 152, "tip": 152, "frame": 152, "least": 152, "frequent": 152, "ambiguitythreshold": 152, "enableregextoken": 152, "xue": 152, "nianwen": 152, "volum": 152, "februari": 152, "aclweb": 152, "aclanthologi": 152, "o03": 152, "4002": 152, "chinese_train": 152, "utf8": 152, "\u5341": 152, "\u56db": 152, "\u4e0d": 152, "\u662f": 152, "setniter": 152, "trainingdataset": 152, "setambiguitythreshold": 152, "getfrequencythreshold": 152, "getambiguitythreshold": 152, "setenableregextoken": 152, "plit": 152, "words_seg": 152, "wordseg_pku": 152, "\u7136\u800c": 152, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 152, "\u9019\u6a23": 152, "\u7684": 152, "\u8655\u7406": 152, "\u4e5f": 152, "\u884d\u751f": 152, "\u4e86": 152, "\u4e00\u4e9b": 152, "\u554f\u984c": 152, "outputcol": [153, 155, 156, 157, 158, 161, 164], "inferschema": 153, "tmp": [153, 161, 181, 204], "librispeech_asr_dummy_clean_audio_array_parquet": 153, "float_arrai": 153, "chunkcol": 154, "stringtyp": 154, "setisarrai": 154, "startcol": 154, "startcolbytokenindex": 154, "isarrai": 154, "failonmiss": 154, "chunkassembl": 154, "setchunkcol": 154, "setstartcol": 154, "setstartcolbytokenindex": 154, "setfailonmiss": 154, "disabl": [155, 164], "idcol": [155, 164], "metadatacol": [155, 164], "cleanupmod": [155, 164], "cleanup": [155, 164], "inplac": [155, 164], "inplace_ful": [155, 164], "shrink_ful": [155, 164], "each_ful": [155, 164], "delete_ful": [155, 164], "setidcol": [155, 164], "setmetadatacol": [155, 164], "usabl": 156, "lda": 156, "forest": 156, "featurecol": 156, "cleanannot": [156, 157, 158], "outputasvector": 156, "gloveembed": 156, "finished_sentence_embed": 156, "resultwiths": 156, "1619900017976761": 156, "045552998781204224": 156, "03229299932718277": 156, "685609996318": 156, "42416998744010925": 156, "1378999948501587": 156, "5717899799346924": 156, "5078899860382": 156, "08621499687433243": 156, "15772999823093414": 156, "06067200005054474": 156, "395359992980": 156, "4970499873161316": 156, "7164199948310852": 156, "40119001269340515": 156, "05761000141501": 156, "08170200139284134": 156, "7159299850463867": 156, "20677000284194946": 156, "0295659992843": 156, "valuesplitsymbol": 157, "annotationsplitsymbol": 157, "includemetadata": 157, "outputasarrai": [157, 158], "parseembeddingsvector": 157, "setvaluesplitsymbol": 157, "setannotationsplitsymbol": 157, "setincludemetadata": [157, 209], "setoutputasarrai": [157, 158], "setparseembeddingsvector": 157, "finishedresult": 158, "hasrecursivefit": [159, 160], "java_obj": [159, 184, 187], "py4j": [159, 160, 187], "java_gatewai": [159, 160, 187], "javaobject": [159, 160, 187], "recursivepipelin": [159, 160, 165, 170], "hasrecursivetransform": 160, "doc2_chunk": [162, 181], "embeddings_finish": [162, 181], "graph_finish": [162, 181], "has_recursive_fit": [162, 181], "has_recursive_transform": [162, 181], "light_pipelin": [162, 181], "recursive_pipelin": [162, 181], "token_assembl": [162, 181], "lightpipelin": [163, 191, 212], "parse_embed": [163, 191], "hold": [163, 212], "principl": [163, 212], "everyth": [163, 212, 213], "fullannot": [163, 191], "happi": [163, 207, 209, 212, 213], "prp": [163, 195, 197, 207, 212, 213, 214], "rb": [163, 197, 207, 212, 213, 214], "optional_target": [163, 191], "explain_document_pipelin": [163, 180, 191, 207, 212, 213], "dict_kei": [163, 191], "fullannotateimag": [163, 191], "path_to_imag": [163, 191], "setignoreunsupport": 163, "unsupport": 163, "annotatormodel": [163, 169, 192], "getignoreunsupport": 163, "text2": 164, "document1": 164, "document2": 164, "arg": [165, 184], "kwarg": 165, "decid": 165, "behav": 165, "exactli": 165, "intent": 165, "recursivepipelinemodel": 165, "pipeline_model": [165, 188, 204], "intend": 165, "tab": [166, 188, 204], "escap": 166, "quot": 166, "inputformat": 166, "csvdelimit": 166, "defailt": 166, "comma": 166, "escapecsvdelimit": 166, "table_csv": 166, "csv_data": 166, "input_format": 166, "setcsvdelimit": 166, "setescapecsvdelimit": 166, "tokenassembl": 167, "cleantext": 167, "opensourc": 167, "annotatorapproach": [168, 177, 188], "annotatorproperti": 170, "setlazyannot": 170, "lazili": 170, "getlazyannot": 170, "annotator_approach": [173, 181], "annotator_model": [173, 181], "annotator_properti": [173, 181], "coverage_result": [173, 181], "match_strategi": [173, 181], "recursive_annotator_approach": [173, 181], "regard": 174, "constant": [174, 176], "hasembeddingsproperti": 175, "getdimens": 175, "setnreturnsequ": 175, "recursiveannotatorapproach": 177, "fo": 179, "assist": 180, "map_annot": 180, "f": [180, 188, 204], "output_typ": 180, "udf": 180, "userdefinedfunct": 180, "def": 180, "nnp_token": 180, "lambda": 180, "alia": 180, "epeu": 180, "map_annotations_arrai": 180, "map_annotations_strict": 180, "map_annotations_col": 180, "output_column": 180, "annotatyon_typ": 180, "chunks_df": 180, "pos_chunk": 180, "vbz": [180, 194, 214], "filter_by_annotations_col": 180, "filter_po": 180, "explode_annotations_col": 180, "annotator_java_ml": [181, 185], "annotator_transform": [181, 185], "extended_java_wrapp": [181, 185], "params_getters_sett": [181, 185], "comet": [181, 189, 206], "pretrained_pipelin": [181, 190], "resource_download": [181, 190], "pub_tat": [181, 196], "annotation_audio": 181, "annotation_imag": 181, "apple_silicon": 181, "aarch64": 181, "cache_fold": 181, "log_fold": 181, "cluster_tmp_dir": 181, "real_time_output": 181, "output_level": 181, "correctli": 181, "maco": 181, "linux": 181, "alloc": 181, "directori": [181, 192, 204], "cache_pretrain": 181, "temporarili": 181, "unpack": 181, "hadoop": 181, "dir": 181, "s3": [181, 192], "hdf": 181, "dbf": 181, "annotator_log": 181, "annotatorjavamlread": 182, "mixin": 182, "javamlread": 182, "classmethod": 182, "mlreader": 182, "clazz": 182, "rl": 182, "javaparam": 182, "annotatortransform": 183, "_java_obj": 183, "javawrapp": 184, "extendedjavawrapp": 184, "new_java_arrai": 184, "pylist": 184, "java_class": 184, "todo": 184, "paramsgetterssett": 186, "getparamvalu": 186, "paramnam": 186, "setparamvalu": 186, "recursiveestim": 187, "recursivetransform": 187, "cometlogg": [188, 204], "workspac": 188, "project_nam": [188, 204], "comet_mod": [188, 204], "experiment_id": 188, "experiment_kwarg": 188, "logger": [188, 204], "meta": [188, 206], "practition": [188, 204], "reliabl": [188, 204], "streamlin": [188, 204], "lifecycl": [188, 204, 206], "track": [188, 204, 205], "outputlogpath": [188, 204], "onlin": [188, 204], "reus": 188, "importerror": 188, "output_log_path": [188, 204], "embd": [188, 204], "setshuffleperepoch": [188, 204], "logdir": [188, 204], "interfac": [188, 204, 212], "comet_ml": [188, 204], "log_pipeline_paramet": [188, 204], "log_visu": [188, 204], "html": [188, 204], "viz": [188, 204], "upload": 188, "colum": [188, 204], "ner_chunk": [188, 204], "sparknlp_displai": [188, 204], "nervisu": [188, 204], "idx": [188, 204], "enumer": [188, 204], "label_col": [188, 204], "document_col": [188, 204], "return_html": [188, 204], "log_metr": [188, 204], "sklearn": [188, 204], "preprocess": [188, 204], "multilabelbinar": [188, 204], "classification_report": [188, 204], "preds_df": [188, 204], "topanda": [188, 204], "mlb": [188, 204], "y_true": [188, 204], "fit_transform": [188, 204], "y_pred": [188, 204], "output_dict": [188, 204], "log_paramet": 188, "log_completed_run": 188, "log_file_path": 188, "log_asset": 188, "asset_path": 188, "asset": 188, "log_asset_data": 188, "interv": 188, "refresh": 188, "outstand": 188, "disk_loc": 191, "light_model": 191, "gather": 191, "resourcedownload": [192, 208, 213], "showpublicmodel": [192, 208], "onto_100": 192, "onto_300": 192, "ner_dl_bert": 192, "similarli": 192, "showpublicpipelin": [192, 213], "check_spel": [192, 213], "match_datetim": [192, 213], "downloadmodel": 192, "reader": 192, "j_dwn": 192, "pythonresourcedownload": 192, "obj": [192, 195], "downloadmodeldirectli": 192, "unzip": 192, "downloadpipelin": 192, "clearcach": 192, "clear": 192, "filer": 192, "showuncategorizedresourc": 192, "showavailableannot": 192, "documentcol": [194, 195], "sentencecol": [194, 195], "tokencol": 194, "conlllabelindex": 194, "conllposindex": 194, "conlldocidcol": 194, "doc_id": [194, 198], "textcol": [194, 195], "labelcol": 194, "includedocid": 194, "docstart": [194, 214], "eu": [194, 214], "np": [194, 214], "reject": [194, 214], "vp": [194, 214], "misc": [194, 214], "boycott": [194, 214], "british": [194, 214], "lamb": [194, 214], "blackburn": 194, "brussel": 194, "1996": 194, "08": 194, "storage_level": 194, "storagelevel": 194, "disk_onli": 194, "lift": 194, "persist": 194, "uposcol": 195, "upo": 195, "xposcol": 195, "xpo": 195, "lemmacol": 195, "sent_id": 195, "sell": 195, "pron": 195, "nom": 195, "plur": 195, "_": 195, "tens": 195, "conj": 195, "cc": 195, "spaceaft": 195, "No": [195, 207], "punct": 195, "conllufil": [195, 214], "conlldataset": [195, 214], "morph": 195, "Into": 195, "googleo": 195, "sconj": 195, "propn": 195, "adp": 195, "wp": 195, "vbd": [195, 197, 214], "ago": [197, 214], "posdf": 197, "61": 197, "67": [197, 198, 214], "nonexecut": 197, "69": 197, "76": 197, "director": 197, "78": 197, "81": 197, "84": 197, "outputposcol": 197, "outputdocumentcol": 197, "outputtextcol": 197, "pubtat": [198, 211], "medic": [198, 214], "titl": [198, 214], "medment": [198, 214], "25763772": [198, 214], "dctn4": [198, 214], "t116": [198, 214], "t123": [198, 214], "c4308010": [198, 214], "63": [198, 214], "chronic": [198, 214], "pseudomona": [198, 214], "aeruginosa": [198, 214], "infect": [198, 214], "t047": [198, 214], "c0854135": [198, 214], "82": [198, 214], "cystic": [198, 214], "fibrosi": [198, 214], "c0010674": [198, 214], "120": [198, 214], "124": [198, 214], "139": [198, 214], "pubtatorfil": 198, "corpus_pubtator_sampl": 198, "pubtatordataset": 198, "finished_token": [198, 209], "finished_po": 198, "finished_n": 198, "finished_token_metadata": 198, "finished_pos_metadata": 198, "finished_label_metadata": 198, "mo": 198, "ispaddedtoken": 198, "pad": 198, "spacytoannot": 199, "token_spac": 199, "sentence_end": 199, "spaci": 199, "multi_doc_token": 199, "went": 199, "night": 199, "bought": 199, "bread": 199, "54": 199, "overview": [203, 211], "workflow": 204, "dedic": 204, "account": 204, "inspect": 204, "init": 204, "sparknlp_experi": 204, "offline_directori": 204, "later": 204, "nativ": 205, "record": 205, "registri": 205, "send": 206, "mlflow": 206, "content": [207, 213], "clearli": 207, "explain_document_ml": [207, 212, 213], "approx": [207, 212, 213], "mb": [207, 212, 213], "ok": [207, 212, 213], "spearhead": 208, "produc": 208, "declar": 208, "accordingli": 208, "extra_loc": 208, "offer": [208, 210, 213], "classifierdl_use_trec50": 208, "classifierdl_use_spam": 208, "column_nam": 208, "preced": 208, "interchang": 209, "road": 209, "proce": 209, "At": 209, "sens": 213, "constantli": 213, "train_po": 214, "training_conl": 214, "train_corpu": 214, "withcolumnrenam": 214, "trainingpubtatordf": 214, "corpus_pubt": 214}, "objects": {"": [[181, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [94, 0, 0, "-", "annotator"], [162, 0, 0, "-", "base"], [173, 0, 0, "-", "common"], [180, 0, 0, "-", "functions"], [185, 0, 0, "-", "internal"], [189, 0, 0, "-", "logging"], [190, 0, 0, "-", "pretrained"], [181, 3, 1, "", "start"], [196, 0, 0, "-", "training"], [201, 0, 0, "-", "upload_to_hub"], [202, 0, 0, "-", "util"], [181, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [31, 0, 0, "-", "classifier_dl"], [50, 0, 0, "-", "coref"], [54, 0, 0, "-", "cv"], [58, 0, 0, "-", "date2_chunk"], [60, 0, 0, "-", "dependency"], [62, 0, 0, "-", "document_character_text_splitter"], [63, 0, 0, "-", "document_normalizer"], [64, 0, 0, "-", "document_token_splitter"], [65, 0, 0, "-", "document_token_splitter_test"], [77, 0, 0, "-", "embeddings"], [92, 0, 0, "-", "er"], [93, 0, 0, "-", "graph_extraction"], [95, 0, 0, "-", "keyword_extraction"], [97, 0, 0, "-", "ld_dl"], [99, 0, 0, "-", "lemmatizer"], [102, 0, 0, "-", "matcher"], [106, 0, 0, "-", "n_gram_generator"], [107, 0, 0, "-", "ner"], [114, 0, 0, "-", "normalizer"], [115, 0, 0, "-", "openai"], [120, 0, 0, "-", "param"], [121, 0, 0, "-", "pos"], [123, 0, 0, "-", "sentence"], [126, 0, 0, "-", "sentiment"], [131, 0, 0, "-", "seq2seq"], [137, 0, 0, "-", "similarity"], [139, 0, 0, "-", "spell_check"], [142, 0, 0, "-", "stemmer"], [143, 0, 0, "-", "stop_words_cleaner"], [144, 0, 0, "-", "tf_ner_dl_graph_builder"], [146, 0, 0, "-", "token"], [150, 0, 0, "-", "token2_chunk"], [151, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "deberta_for_zero_shot_classification"], [27, 0, 0, "-", "distil_bert_for_question_answering"], [28, 0, 0, "-", "distil_bert_for_sequence_classification"], [29, 0, 0, "-", "distil_bert_for_token_classification"], [30, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [32, 0, 0, "-", "longformer_for_question_answering"], [33, 0, 0, "-", "longformer_for_sequence_classification"], [34, 0, 0, "-", "longformer_for_token_classification"], [35, 0, 0, "-", "mpnet_for_question_answering"], [36, 0, 0, "-", "mpnet_for_sequence_classification"], [37, 0, 0, "-", "multi_classifier_dl"], [38, 0, 0, "-", "roberta_for_question_answering"], [39, 0, 0, "-", "roberta_for_sequence_classification"], [40, 0, 0, "-", "roberta_for_token_classification"], [41, 0, 0, "-", "roberta_for_zero_shot_classification"], [42, 0, 0, "-", "sentiment_dl"], [43, 0, 0, "-", "tapas_for_question_answering"], [44, 0, 0, "-", "xlm_roberta_for_question_answering"], [45, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [46, 0, 0, "-", "xlm_roberta_for_token_classification"], [47, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [48, 0, 0, "-", "xlnet_for_sequence_classification"], [49, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setCoalesceSentences"], [26, 2, 1, "", "setConfigProtoBytes"], [26, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setCoalesceSentences"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setCoalesceSentences"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[34, 2, 1, "", "getClasses"], [34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, 1, 1, "", "MultiClassifierDLApproach"], [37, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[37, 2, 1, "", "setThreshold"], [37, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[40, 2, 1, "", "getClasses"], [40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"], [40, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[41, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[41, 2, 1, "", "getClasses"], [41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setCoalesceSentences"], [41, 2, 1, "", "setConfigProtoBytes"], [41, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[42, 1, 1, "", "SentimentDLApproach"], [42, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[42, 2, 1, "", "setDropout"], [42, 2, 1, "", "setThreshold"], [42, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setConfigProtoBytes"], [42, 2, 1, "", "setThreshold"], [42, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[43, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[44, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[45, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[46, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[47, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[47, 2, 1, "", "getClasses"], [47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setCoalesceSentences"], [47, 2, 1, "", "setConfigProtoBytes"], [47, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[48, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[48, 2, 1, "", "getClasses"], [48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setCoalesceSentences"], [48, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[49, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[51, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[51, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setConfigProtoBytes"], [51, 2, 1, "", "setMaxSegmentLength"], [51, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[52, 0, 0, "-", "clip_for_zero_shot_classification"], [53, 0, 0, "-", "convnext_for_image_classification"], [55, 0, 0, "-", "swin_for_image_classification"], [56, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [57, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[52, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[52, 2, 1, "", "getCandidateLabels"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[53, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[53, 2, 1, "", "getClasses"], [53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"], [53, 2, 1, "", "setCropPct"], [53, 2, 1, "", "setDoRescale"], [53, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[55, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[55, 2, 1, "", "getClasses"], [55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[56, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[57, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[57, 2, 1, "", "getClasses"], [57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[58, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[58, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[59, 0, 0, "-", "dependency_parser"], [61, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[59, 1, 1, "", "DependencyParserApproach"], [59, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[59, 2, 1, "", "setConllU"], [59, 2, 1, "", "setDependencyTreeBank"], [59, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[59, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[61, 1, 1, "", "TypedDependencyParserApproach"], [61, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[61, 2, 1, "", "setConll2009"], [61, 2, 1, "", "setConllU"], [61, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[61, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[62, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[62, 2, 1, "", "setChunkOverlap"], [62, 2, 1, "", "setChunkSize"], [62, 2, 1, "", "setExplodeSplits"], [62, 2, 1, "", "setKeepSeparators"], [62, 2, 1, "", "setPatternsAreRegex"], [62, 2, 1, "", "setSplitPatterns"], [62, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[63, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[63, 2, 1, "", "setAction"], [63, 2, 1, "", "setEncoding"], [63, 2, 1, "", "setLowercase"], [63, 2, 1, "", "setPatterns"], [63, 2, 1, "", "setPolicy"], [63, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[64, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[64, 2, 1, "", "setExplodeSplits"], [64, 2, 1, "", "setNumTokens"], [64, 2, 1, "", "setTokenOverlap"], [64, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[65, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[65, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[66, 0, 0, "-", "albert_embeddings"], [67, 0, 0, "-", "bert_embeddings"], [68, 0, 0, "-", "bert_sentence_embeddings"], [69, 0, 0, "-", "bge_embeddings"], [70, 0, 0, "-", "camembert_embeddings"], [71, 0, 0, "-", "chunk_embeddings"], [72, 0, 0, "-", "deberta_embeddings"], [73, 0, 0, "-", "distil_bert_embeddings"], [74, 0, 0, "-", "doc2vec"], [75, 0, 0, "-", "e5_embeddings"], [76, 0, 0, "-", "elmo_embeddings"], [78, 0, 0, "-", "instructor_embeddings"], [79, 0, 0, "-", "longformer_embeddings"], [80, 0, 0, "-", "mpnet_embeddings"], [81, 0, 0, "-", "roberta_embeddings"], [82, 0, 0, "-", "roberta_sentence_embeddings"], [83, 0, 0, "-", "sentence_embeddings"], [84, 0, 0, "-", "uae_embeddings"], [85, 0, 0, "-", "universal_sentence_encoder"], [86, 0, 0, "-", "word2vec"], [87, 0, 0, "-", "word_embeddings"], [88, 0, 0, "-", "xlm_roberta_embeddings"], [89, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [90, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[66, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[67, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[67, 2, 1, "", "loadSavedModel"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[68, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[69, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[70, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[71, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[71, 2, 1, "", "setPoolingStrategy"], [71, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[72, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[73, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[74, 1, 1, "", "Doc2VecApproach"], [74, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[74, 2, 1, "", "setMaxIter"], [74, 2, 1, "", "setMaxSentenceLength"], [74, 2, 1, "", "setMinCount"], [74, 2, 1, "", "setNumPartitions"], [74, 2, 1, "", "setSeed"], [74, 2, 1, "", "setStepSize"], [74, 2, 1, "", "setVectorSize"], [74, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[74, 2, 1, "", "getVectors"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[75, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[76, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setBatchSize"], [76, 2, 1, "", "setConfigProtoBytes"], [76, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[78, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"], [78, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[79, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[80, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[81, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[82, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[83, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[83, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[84, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[85, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setConfigProtoBytes"], [85, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[86, 1, 1, "", "Word2VecApproach"], [86, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[86, 2, 1, "", "setMaxIter"], [86, 2, 1, "", "setMaxSentenceLength"], [86, 2, 1, "", "setMinCount"], [86, 2, 1, "", "setNumPartitions"], [86, 2, 1, "", "setSeed"], [86, 2, 1, "", "setStepSize"], [86, 2, 1, "", "setVectorSize"], [86, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[86, 2, 1, "", "getVectors"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[87, 1, 1, "", "WordEmbeddings"], [87, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[87, 2, 1, "", "setReadCacheSize"], [87, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[87, 2, 1, "", "loadStorage"], [87, 2, 1, "", "overallCoverage"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setReadCacheSize"], [87, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[88, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[88, 2, 1, "", "loadSavedModel"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[89, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[89, 2, 1, "", "loadSavedModel"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[90, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[90, 2, 1, "", "loadSavedModel"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[91, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[91, 1, 1, "", "EntityRulerApproach"], [91, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[91, 2, 1, "", "setAlphabetResource"], [91, 2, 1, "", "setPatternsResource"], [91, 2, 1, "", "setSentenceMatch"], [91, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[93, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[93, 2, 1, "", "setDelimiter"], [93, 2, 1, "", "setDependencyParserModel"], [93, 2, 1, "", "setEntityTypes"], [93, 2, 1, "", "setExplodeEntities"], [93, 2, 1, "", "setIncludeEdges"], [93, 2, 1, "", "setMaxSentenceSize"], [93, 2, 1, "", "setMergeEntities"], [93, 2, 1, "", "setMergeEntitiesIOBFormat"], [93, 2, 1, "", "setMinSentenceSize"], [93, 2, 1, "", "setPosModel"], [93, 2, 1, "", "setRelationshipTypes"], [93, 2, 1, "", "setRootTokens"], [93, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[96, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[96, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[96, 2, 1, "", "getStopWords"], [96, 2, 1, "", "loadDefaultStopWords"], [96, 2, 1, "", "setMaxNGrams"], [96, 2, 1, "", "setMinNGrams"], [96, 2, 1, "", "setNKeywords"], [96, 2, 1, "", "setStopWords"], [96, 2, 1, "", "setThreshold"], [96, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[98, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[98, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setCoalesceSentences"], [98, 2, 1, "", "setConfigProtoBytes"], [98, 2, 1, "", "setThreshold"], [98, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[99, 1, 1, "", "Lemmatizer"], [99, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[99, 2, 1, "", "setDictionary"], [99, 2, 1, "", "setFormCol"], [99, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[99, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[100, 0, 0, "-", "big_text_matcher"], [101, 0, 0, "-", "date_matcher"], [103, 0, 0, "-", "multi_date_matcher"], [104, 0, 0, "-", "regex_matcher"], [105, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[100, 1, 1, "", "BigTextMatcher"], [100, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[100, 2, 1, "", "setCaseSensitive"], [100, 2, 1, "", "setEntities"], [100, 2, 1, "", "setMergeOverlapping"], [100, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[100, 2, 1, "", "loadStorage"], [100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setCaseSensitive"], [100, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[101, 1, 1, "", "DateMatcher"], [101, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[101, 2, 1, "", "setAnchorDateDay"], [101, 2, 1, "", "setAnchorDateMonth"], [101, 2, 1, "", "setAnchorDateYear"], [101, 2, 1, "", "setDefaultDayWhenMissing"], [101, 2, 1, "", "setInputFormats"], [101, 2, 1, "", "setOutputFormat"], [101, 2, 1, "", "setReadMonthFirst"], [101, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[103, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[104, 1, 1, "", "RegexMatcher"], [104, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[104, 2, 1, "", "setDelimiter"], [104, 2, 1, "", "setExternalRules"], [104, 2, 1, "", "setRules"], [104, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[105, 1, 1, "", "TextMatcher"], [105, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[105, 2, 1, "", "setBuildFromTokens"], [105, 2, 1, "", "setCaseSensitive"], [105, 2, 1, "", "setEntities"], [105, 2, 1, "", "setEntityValue"], [105, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setBuildFromTokens"], [105, 2, 1, "", "setEntityValue"], [105, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[106, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[106, 2, 1, "", "setDelimiter"], [106, 2, 1, "", "setEnableCumulative"], [106, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[108, 0, 0, "-", "ner_approach"], [109, 0, 0, "-", "ner_converter"], [110, 0, 0, "-", "ner_crf"], [111, 0, 0, "-", "ner_dl"], [112, 0, 0, "-", "ner_overwriter"], [113, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[108, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[108, 2, 1, "", "getLabelColumn"], [108, 2, 1, "", "setEntities"], [108, 2, 1, "", "setLabelColumn"], [108, 2, 1, "", "setMaxEpochs"], [108, 2, 1, "", "setMinEpochs"], [108, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[109, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[109, 2, 1, "", "setNerHasNoSchema"], [109, 2, 1, "", "setPreservePosition"], [109, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[110, 1, 1, "", "NerCrfApproach"], [110, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[110, 2, 1, "", "setC0"], [110, 2, 1, "", "setExternalFeatures"], [110, 2, 1, "", "setIncludeConfidence"], [110, 2, 1, "", "setL2"], [110, 2, 1, "", "setLossEps"], [110, 2, 1, "", "setMinW"], [110, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[111, 1, 1, "", "NerDLApproach"], [111, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[111, 2, 1, "", "setBatchSize"], [111, 2, 1, "", "setBestModelMetric"], [111, 2, 1, "", "setConfigProtoBytes"], [111, 2, 1, "", "setDropout"], [111, 2, 1, "", "setEnableMemoryOptimizer"], [111, 2, 1, "", "setGraphFolder"], [111, 2, 1, "", "setIncludeAllConfidenceScores"], [111, 2, 1, "", "setIncludeConfidence"], [111, 2, 1, "", "setLr"], [111, 2, 1, "", "setPo"], [111, 2, 1, "", "setUseBestModel"], [111, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[111, 2, 1, "", "pretrained"], [111, 2, 1, "", "setConfigProtoBytes"], [111, 2, 1, "", "setIncludeAllConfidenceScores"], [111, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[112, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[112, 2, 1, "", "setNerWords"], [112, 2, 1, "", "setNewNerEntity"], [112, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[113, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[113, 2, 1, "", "getClasses"], [113, 2, 1, "", "load"], [113, 2, 1, "", "pretrained"], [113, 2, 1, "", "setEntityDefinitions"], [113, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[114, 1, 1, "", "Normalizer"], [114, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[114, 2, 1, "", "setCleanupPatterns"], [114, 2, 1, "", "setLowercase"], [114, 2, 1, "", "setMaxLength"], [114, 2, 1, "", "setMinLength"], [114, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[116, 0, 0, "-", "openai_completion"], [117, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[116, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[116, 2, 1, "", "setBestOf"], [116, 2, 1, "", "setEcho"], [116, 2, 1, "", "setFrequencyPenalty"], [116, 2, 1, "", "setLogitBias"], [116, 2, 1, "", "setLogprobs"], [116, 2, 1, "", "setMaxTokens"], [116, 2, 1, "", "setModel"], [116, 2, 1, "", "setNumberOfCompletions"], [116, 2, 1, "", "setPresencePenalty"], [116, 2, 1, "", "setStop"], [116, 2, 1, "", "setSuffix"], [116, 2, 1, "", "setTemperature"], [116, 2, 1, "", "setTopP"], [116, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[117, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[117, 2, 1, "", "setModel"], [117, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[118, 0, 0, "-", "classifier_encoder"], [119, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[118, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[118, 2, 1, "", "setBatchSize"], [118, 2, 1, "", "setConfigProtoBytes"], [118, 2, 1, "", "setLabelColumn"], [118, 2, 1, "", "setLr"], [118, 2, 1, "", "setMaxEpochs"], [118, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[119, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[119, 2, 1, "", "setEnableOutputLogs"], [119, 2, 1, "", "setEvaluationLogExtended"], [119, 2, 1, "", "setOutputLogsPath"], [119, 2, 1, "", "setTestDataset"], [119, 2, 1, "", "setValidationSplit"], [119, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[122, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[122, 1, 1, "", "PerceptronApproach"], [122, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[122, 2, 1, "", "getNIterations"], [122, 2, 1, "", "setIterations"], [122, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[122, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[124, 0, 0, "-", "sentence_detector"], [125, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[124, 1, 1, "", "SentenceDetector"], [124, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[124, 2, 1, "", "setCustomBounds"], [124, 2, 1, "", "setCustomBoundsStrategy"], [124, 2, 1, "", "setDetectLists"], [124, 2, 1, "", "setExplodeSentences"], [124, 2, 1, "", "setMaxLength"], [124, 2, 1, "", "setMinLength"], [124, 2, 1, "", "setSplitLength"], [124, 2, 1, "", "setUseAbbreviations"], [124, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[125, 1, 1, "", "SentenceDetectorDLApproach"], [125, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[125, 2, 1, "", "setEpochsNumber"], [125, 2, 1, "", "setExplodeSentences"], [125, 2, 1, "", "setImpossiblePenultimates"], [125, 2, 1, "", "setModel"], [125, 2, 1, "", "setOutputLogsPath"], [125, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[125, 2, 1, "", "pretrained"], [125, 2, 1, "", "setCustomBounds"], [125, 2, 1, "", "setExplodeSentences"], [125, 2, 1, "", "setImpossiblePenultimates"], [125, 2, 1, "", "setMaxLength"], [125, 2, 1, "", "setMinLength"], [125, 2, 1, "", "setModel"], [125, 2, 1, "", "setSplitLength"], [125, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[127, 0, 0, "-", "sentiment_detector"], [128, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[127, 1, 1, "", "SentimentDetector"], [127, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[127, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[128, 1, 1, "", "ViveknSentimentApproach"], [128, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[128, 2, 1, "", "setPruneCorpus"], [128, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[128, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[129, 0, 0, "-", "bart_transformer"], [130, 0, 0, "-", "gpt2_transformer"], [132, 0, 0, "-", "llama2_transformer"], [133, 0, 0, "-", "m2m100_transformer"], [134, 0, 0, "-", "marian_transformer"], [135, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[129, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[129, 2, 1, "", "loadSavedModel"], [129, 2, 1, "", "pretrained"], [129, 2, 1, "", "setBeamSize"], [129, 2, 1, "", "setCache"], [129, 2, 1, "", "setConfigProtoBytes"], [129, 2, 1, "", "setDoSample"], [129, 2, 1, "", "setIgnoreTokenIds"], [129, 2, 1, "", "setMaxOutputLength"], [129, 2, 1, "", "setMinOutputLength"], [129, 2, 1, "", "setNoRepeatNgramSize"], [129, 2, 1, "", "setRepetitionPenalty"], [129, 2, 1, "", "setTask"], [129, 2, 1, "", "setTemperature"], [129, 2, 1, "", "setTopK"], [129, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[130, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[130, 2, 1, "", "loadSavedModel"], [130, 2, 1, "", "pretrained"], [130, 2, 1, "", "setConfigProtoBytes"], [130, 2, 1, "", "setDoSample"], [130, 2, 1, "", "setIgnoreTokenIds"], [130, 2, 1, "", "setMaxOutputLength"], [130, 2, 1, "", "setMinOutputLength"], [130, 2, 1, "", "setNoRepeatNgramSize"], [130, 2, 1, "", "setRepetitionPenalty"], [130, 2, 1, "", "setTask"], [130, 2, 1, "", "setTemperature"], [130, 2, 1, "", "setTopK"], [130, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[132, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[132, 2, 1, "", "loadSavedModel"], [132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setConfigProtoBytes"], [132, 2, 1, "", "setDoSample"], [132, 2, 1, "", "setIgnoreTokenIds"], [132, 2, 1, "", "setMaxOutputLength"], [132, 2, 1, "", "setMinOutputLength"], [132, 2, 1, "", "setNoRepeatNgramSize"], [132, 2, 1, "", "setRepetitionPenalty"], [132, 2, 1, "", "setTemperature"], [132, 2, 1, "", "setTopK"], [132, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[133, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[133, 2, 1, "", "loadSavedModel"], [133, 2, 1, "", "pretrained"], [133, 2, 1, "", "setBeamSize"], [133, 2, 1, "", "setConfigProtoBytes"], [133, 2, 1, "", "setDoSample"], [133, 2, 1, "", "setIgnoreTokenIds"], [133, 2, 1, "", "setMaxOutputLength"], [133, 2, 1, "", "setMinOutputLength"], [133, 2, 1, "", "setNoRepeatNgramSize"], [133, 2, 1, "", "setRepetitionPenalty"], [133, 2, 1, "", "setSrcLang"], [133, 2, 1, "", "setTemperature"], [133, 2, 1, "", "setTgtLang"], [133, 2, 1, "", "setTopK"], [133, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[134, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[134, 2, 1, "", "loadSavedModel"], [134, 2, 1, "", "pretrained"], [134, 2, 1, "", "setConfigProtoBytes"], [134, 2, 1, "", "setDoSample"], [134, 2, 1, "", "setIgnoreTokenIds"], [134, 2, 1, "", "setLangId"], [134, 2, 1, "", "setMaxInputLength"], [134, 2, 1, "", "setMaxOutputLength"], [134, 2, 1, "", "setNoRepeatNgramSize"], [134, 2, 1, "", "setRandomSeed"], [134, 2, 1, "", "setRepetitionPenalty"], [134, 2, 1, "", "setTemperature"], [134, 2, 1, "", "setTopK"], [134, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[135, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[135, 2, 1, "", "loadSavedModel"], [135, 2, 1, "", "pretrained"], [135, 2, 1, "", "setConfigProtoBytes"], [135, 2, 1, "", "setDoSample"], [135, 2, 1, "", "setIgnoreTokenIds"], [135, 2, 1, "", "setMaxNewTokens"], [135, 2, 1, "", "setMaxOutputLength"], [135, 2, 1, "", "setMinOutputLength"], [135, 2, 1, "", "setNoRepeatNgramSize"], [135, 2, 1, "", "setRepetitionPenalty"], [135, 2, 1, "", "setStopAtEos"], [135, 2, 1, "", "setTask"], [135, 2, 1, "", "setTemperature"], [135, 2, 1, "", "setTopK"], [135, 2, 1, "", "setTopP"], [135, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[136, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[136, 1, 1, "", "DocumentSimilarityRankerApproach"], [136, 1, 1, "", "DocumentSimilarityRankerFinisher"], [136, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[136, 2, 1, "", "asRetriever"], [136, 2, 1, "", "setBucketLength"], [136, 2, 1, "", "setIdentityRanking"], [136, 2, 1, "", "setNumHashTables"], [136, 2, 1, "", "setNumberOfNeighbours"], [136, 2, 1, "", "setSimilarityMethod"], [136, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[136, 2, 1, "", "getInputCols"], [136, 2, 1, "", "getOutputCols"], [136, 2, 1, "", "setExtractNearestNeighbor"], [136, 2, 1, "", "setInputCols"], [136, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[138, 0, 0, "-", "context_spell_checker"], [140, 0, 0, "-", "norvig_sweeting"], [141, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[138, 1, 1, "", "ContextSpellCheckerApproach"], [138, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[138, 2, 1, "", "addRegexClass"], [138, 2, 1, "", "addVocabClass"], [138, 2, 1, "", "setBatchSize"], [138, 2, 1, "", "setCaseStrategy"], [138, 2, 1, "", "setClassCount"], [138, 2, 1, "", "setCompoundCount"], [138, 2, 1, "", "setConfigProtoBytes"], [138, 2, 1, "", "setEpochs"], [138, 2, 1, "", "setErrorThreshold"], [138, 2, 1, "", "setFinalRate"], [138, 2, 1, "", "setGraphFolder"], [138, 2, 1, "", "setInitialRate"], [138, 2, 1, "", "setLanguageModelClasses"], [138, 2, 1, "", "setMaxCandidates"], [138, 2, 1, "", "setMaxSentLen"], [138, 2, 1, "", "setMaxWindowLen"], [138, 2, 1, "", "setMinCount"], [138, 2, 1, "", "setTradeoff"], [138, 2, 1, "", "setValidationFraction"], [138, 2, 1, "", "setWeightedDistPath"], [138, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[138, 2, 1, "", "getWordClasses"], [138, 2, 1, "", "pretrained"], [138, 2, 1, "", "setCaseStrategy"], [138, 2, 1, "", "setClasses"], [138, 2, 1, "", "setCompareLowcase"], [138, 2, 1, "", "setConfigProtoBytes"], [138, 2, 1, "", "setCorrectSymbols"], [138, 2, 1, "", "setErrorThreshold"], [138, 2, 1, "", "setGamma"], [138, 2, 1, "", "setIdsVocab"], [138, 2, 1, "", "setMaxCandidates"], [138, 2, 1, "", "setMaxWindowLen"], [138, 2, 1, "", "setTradeoff"], [138, 2, 1, "", "setVocabFreq"], [138, 2, 1, "", "setVocabIds"], [138, 2, 1, "", "setWeights"], [138, 2, 1, "", "setWordMaxDistance"], [138, 2, 1, "", "updateRegexClass"], [138, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[140, 1, 1, "", "NorvigSweetingApproach"], [140, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[140, 2, 1, "", "setCaseSensitive"], [140, 2, 1, "", "setDictionary"], [140, 2, 1, "", "setDoubleVariants"], [140, 2, 1, "", "setFrequencyPriority"], [140, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[140, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[141, 1, 1, "", "SymmetricDeleteApproach"], [141, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[141, 2, 1, "", "setDeletesThreshold"], [141, 2, 1, "", "setDictionary"], [141, 2, 1, "", "setFrequencyThreshold"], [141, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[141, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[142, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[143, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[143, 2, 1, "", "loadDefaultStopWords"], [143, 2, 1, "", "pretrained"], [143, 2, 1, "", "setCaseSensitive"], [143, 2, 1, "", "setLocale"], [143, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[144, 1, 1, "", "TFNerDLGraphBuilder"], [144, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[144, 2, 1, "", "getGraphFile"], [144, 2, 1, "", "getGraphFolder"], [144, 2, 1, "", "getHiddenUnitsNumber"], [144, 2, 1, "", "getInputCols"], [144, 2, 1, "", "getLabelColumn"], [144, 2, 1, "", "setGraphFile"], [144, 2, 1, "", "setGraphFolder"], [144, 2, 1, "", "setHiddenUnitsNumber"], [144, 2, 1, "", "setInputCols"], [144, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[145, 0, 0, "-", "chunk_tokenizer"], [147, 0, 0, "-", "recursive_tokenizer"], [148, 0, 0, "-", "regex_tokenizer"], [149, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[145, 1, 1, "", "ChunkTokenizer"], [145, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[147, 1, 1, "", "RecursiveTokenizer"], [147, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[147, 2, 1, "", "setInfixes"], [147, 2, 1, "", "setPrefixes"], [147, 2, 1, "", "setSuffixes"], [147, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[148, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[148, 2, 1, "", "setMaxLength"], [148, 2, 1, "", "setMinLength"], [148, 2, 1, "", "setPattern"], [148, 2, 1, "", "setPositionalMask"], [148, 2, 1, "", "setPreservePosition"], [148, 2, 1, "", "setToLowercase"], [148, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[149, 1, 1, "", "Tokenizer"], [149, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[149, 2, 1, "", "addContextChars"], [149, 2, 1, "", "addException"], [149, 2, 1, "", "addInfixPattern"], [149, 2, 1, "", "addSplitChars"], [149, 2, 1, "", "getCaseSensitiveExceptions"], [149, 2, 1, "", "getContextChars"], [149, 2, 1, "", "getExceptions"], [149, 2, 1, "", "getInfixPatterns"], [149, 2, 1, "", "getPrefixPattern"], [149, 2, 1, "", "getSplitChars"], [149, 2, 1, "", "getSuffixPattern"], [149, 2, 1, "", "setCaseSensitiveExceptions"], [149, 2, 1, "", "setContextChars"], [149, 2, 1, "", "setExceptions"], [149, 2, 1, "", "setExceptionsPath"], [149, 2, 1, "", "setInfixPatterns"], [149, 2, 1, "", "setMaxLength"], [149, 2, 1, "", "setMinLength"], [149, 2, 1, "", "setPrefixPattern"], [149, 2, 1, "", "setSplitChars"], [149, 2, 1, "", "setSplitPattern"], [149, 2, 1, "", "setSuffixPattern"], [149, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[149, 2, 1, "", "addSplitChars"], [149, 2, 1, "", "pretrained"], [149, 2, 1, "", "setSplitChars"], [149, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[150, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[152, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[152, 1, 1, "", "WordSegmenterApproach"], [152, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[152, 2, 1, "", "getAmbiguityThreshold"], [152, 2, 1, "", "getFrequencyThreshold"], [152, 2, 1, "", "getNIterations"], [152, 2, 1, "", "setAmbiguityThreshold"], [152, 2, 1, "", "setEnableRegexTokenizer"], [152, 2, 1, "", "setFrequencyThreshold"], [152, 2, 1, "", "setNIterations"], [152, 2, 1, "", "setPattern"], [152, 2, 1, "", "setPosColumn"], [152, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[152, 2, 1, "", "pretrained"], [152, 2, 1, "", "setEnableRegexTokenizer"], [152, 2, 1, "", "setPattern"], [152, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[153, 0, 0, "-", "audio_assembler"], [154, 0, 0, "-", "doc2_chunk"], [155, 0, 0, "-", "document_assembler"], [156, 0, 0, "-", "embeddings_finisher"], [157, 0, 0, "-", "finisher"], [158, 0, 0, "-", "graph_finisher"], [159, 0, 0, "-", "has_recursive_fit"], [160, 0, 0, "-", "has_recursive_transform"], [161, 0, 0, "-", "image_assembler"], [163, 0, 0, "-", "light_pipeline"], [164, 0, 0, "-", "multi_document_assembler"], [165, 0, 0, "-", "recursive_pipeline"], [166, 0, 0, "-", "table_assembler"], [167, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[153, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[153, 2, 1, "", "getOutputCol"], [153, 2, 1, "", "setInputCol"], [153, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[154, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[154, 2, 1, "", "setChunkCol"], [154, 2, 1, "", "setFailOnMissing"], [154, 2, 1, "", "setIsArray"], [154, 2, 1, "", "setLowerCase"], [154, 2, 1, "", "setStartCol"], [154, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[155, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[155, 2, 1, "", "getOutputCol"], [155, 2, 1, "", "setCleanupMode"], [155, 2, 1, "", "setIdCol"], [155, 2, 1, "", "setInputCol"], [155, 2, 1, "", "setMetadataCol"], [155, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[156, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[156, 2, 1, "", "getInputCols"], [156, 2, 1, "", "getOutputCols"], [156, 2, 1, "", "setCleanAnnotations"], [156, 2, 1, "", "setInputCols"], [156, 2, 1, "", "setOutputAsVector"], [156, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[157, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[157, 2, 1, "", "getInputCols"], [157, 2, 1, "", "getOutputCols"], [157, 2, 1, "", "setAnnotationSplitSymbol"], [157, 2, 1, "", "setCleanAnnotations"], [157, 2, 1, "", "setIncludeMetadata"], [157, 2, 1, "", "setInputCols"], [157, 2, 1, "", "setOutputAsArray"], [157, 2, 1, "", "setOutputCols"], [157, 2, 1, "", "setParseEmbeddingsVectors"], [157, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[158, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[158, 2, 1, "", "setCleanAnnotations"], [158, 2, 1, "", "setInputCol"], [158, 2, 1, "", "setOutputAsArray"], [158, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[159, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[160, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[161, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[161, 2, 1, "", "getOutputCol"], [161, 2, 1, "", "setInputCol"], [161, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[163, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[163, 2, 1, "", "annotate"], [163, 2, 1, "", "fullAnnotate"], [163, 2, 1, "", "fullAnnotateImage"], [163, 2, 1, "", "getIgnoreUnsupported"], [163, 2, 1, "", "setIgnoreUnsupported"], [163, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[164, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[164, 2, 1, "", "getOutputCols"], [164, 2, 1, "", "setCleanupMode"], [164, 2, 1, "", "setIdCol"], [164, 2, 1, "", "setInputCols"], [164, 2, 1, "", "setMetadataCol"], [164, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[165, 1, 1, "", "RecursivePipeline"], [165, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[166, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[166, 2, 1, "", "setCsvDelimiter"], [166, 2, 1, "", "setEscapeCsvDelimiter"], [166, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[167, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[167, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[168, 0, 0, "-", "annotator_approach"], [169, 0, 0, "-", "annotator_model"], [170, 0, 0, "-", "annotator_properties"], [171, 0, 0, "-", "annotator_type"], [172, 0, 0, "-", "coverage_result"], [174, 0, 0, "-", "match_strategy"], [175, 0, 0, "-", "properties"], [176, 0, 0, "-", "read_as"], [177, 0, 0, "-", "recursive_annotator_approach"], [178, 0, 0, "-", "storage"], [179, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[168, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[169, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[170, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[170, 2, 1, "", "getInputCols"], [170, 2, 1, "", "getLazyAnnotator"], [170, 2, 1, "", "getOutputCol"], [170, 2, 1, "", "setInputCols"], [170, 2, 1, "", "setLazyAnnotator"], [170, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[174, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[175, 1, 1, "", "HasEmbeddingsProperties"], [175, 3, 1, "", "setBeamSize"], [175, 3, 1, "", "setDoSample"], [175, 3, 1, "", "setMaxOutputLength"], [175, 3, 1, "", "setMinOutputLength"], [175, 3, 1, "", "setNReturnSequences"], [175, 3, 1, "", "setNoRepeatNgramSize"], [175, 3, 1, "", "setRepetitionPenalty"], [175, 3, 1, "", "setTask"], [175, 3, 1, "", "setTemperature"], [175, 3, 1, "", "setTopK"], [175, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[175, 2, 1, "", "getDimension"], [175, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[176, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[177, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[179, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[180, 3, 1, "", "explode_annotations_col"], [180, 3, 1, "", "filter_by_annotations_col"], [180, 3, 1, "", "map_annotations"], [180, 3, 1, "", "map_annotations_array"], [180, 3, 1, "", "map_annotations_col"], [180, 3, 1, "", "map_annotations_cols"], [180, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[182, 0, 0, "-", "annotator_java_ml"], [183, 0, 0, "-", "annotator_transformer"], [184, 0, 0, "-", "extended_java_wrapper"], [186, 0, 0, "-", "params_getters_setters"], [187, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[182, 1, 1, "", "AnnotatorJavaMLReadable"], [182, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[182, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[183, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[184, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[184, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[186, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[186, 2, 1, "", "getParamValue"], [186, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[187, 1, 1, "", "RecursiveEstimator"], [187, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[187, 2, 1, "", "fit"]], "sparknlp.logging": [[188, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[188, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[188, 2, 1, "", "end"], [188, 2, 1, "", "log_asset"], [188, 2, 1, "", "log_asset_data"], [188, 2, 1, "", "log_completed_run"], [188, 2, 1, "", "log_metrics"], [188, 2, 1, "", "log_parameters"], [188, 2, 1, "", "log_pipeline_parameters"], [188, 2, 1, "", "log_visualization"], [188, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[191, 0, 0, "-", "pretrained_pipeline"], [192, 0, 0, "-", "resource_downloader"], [193, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[191, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[191, 2, 1, "", "annotate"], [191, 2, 1, "", "fullAnnotate"], [191, 2, 1, "", "fullAnnotateImage"], [191, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[192, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[192, 2, 1, "", "clearCache"], [192, 2, 1, "", "downloadModel"], [192, 2, 1, "", "downloadModelDirectly"], [192, 2, 1, "", "downloadPipeline"], [192, 2, 1, "", "showAvailableAnnotators"], [192, 2, 1, "", "showPublicModels"], [192, 2, 1, "", "showPublicPipelines"], [192, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[194, 0, 0, "-", "conll"], [195, 0, 0, "-", "conllu"], [197, 0, 0, "-", "pos"], [198, 0, 0, "-", "pub_tator"], [199, 0, 0, "-", "spacy_to_annotation"], [200, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[194, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[194, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[195, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[195, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[197, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[197, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[198, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[198, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[199, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 209], "start": 0, "spark": [0, 1, 204, 209, 213], "nlp": [0, 1, 204, 213], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 204], "us": [0, 204, 213], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 194, 195, 197, 198, 199], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 207, 208, 209], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 179, 180, 182, 183, 184, 186, 187, 188, 191, 192, 194, 195, 197, 198, 199, 203], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 182, 183, 184, 186, 187, 188, 191, 192, 194, 195, 197, 198, 199], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 31, 50, 54, 60, 77, 92, 94, 95, 97, 102, 107, 115, 121, 123, 126, 131, 137, 139, 146, 151, 162, 173, 181, 185, 189, 190, 196], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "deberta_for_zero_shot_classif": 26, "exampl": 26, "return": 26, "distil_bert_for_question_answ": 27, "distil_bert_for_sequence_classif": 28, "distil_bert_for_token_classif": 29, "distil_bert_for_zero_shot_classif": 30, "longformer_for_question_answ": 32, "longformer_for_sequence_classif": 33, "longformer_for_token_classif": 34, "mpnet_for_question_answ": 35, "mpnet_for_sequence_classif": 36, "multi_classifier_dl": 37, "roberta_for_question_answ": 38, "roberta_for_sequence_classif": 39, "roberta_for_token_classif": 40, "roberta_for_zero_shot_classif": 41, "sentiment_dl": 42, "tapas_for_question_answ": 43, "xlm_roberta_for_question_answ": 44, "xlm_roberta_for_sequence_classif": 45, "xlm_roberta_for_token_classif": 46, "xlm_roberta_for_zero_shot_classif": 47, "xlnet_for_sequence_classif": 48, "xlnet_for_token_classif": 49, "coref": [50, 51], "spanbert_coref": 51, "cv": [52, 53, 54, 55, 56, 57], "clip_for_zero_shot_classif": 52, "convnext_for_image_classif": 53, "swin_for_image_classif": 55, "vision_encoder_decoder_for_image_capt": 56, "vit_for_image_classif": 57, "date2_chunk": 58, "depend": [59, 60, 61], "dependency_pars": 59, "typed_dependency_pars": 61, "document_character_text_splitt": 62, "document_norm": 63, "document_token_splitt": 64, "document_token_splitter_test": 65, "embed": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "albert_embed": 66, "bert_embed": 67, "bert_sentence_embed": 68, "bge_embed": 69, "camembert_embed": 70, "chunk_embed": 71, "deberta_embed": 72, "distil_bert_embed": 73, "doc2vec": 74, "e5_embed": 75, "elmo_embed": 76, "instructor_embed": 78, "longformer_embed": 79, "mpnet_embed": 80, "roberta_embed": 81, "roberta_sentence_embed": 82, "sentence_embed": 83, "uae_embed": 84, "universal_sentence_encod": 85, "word2vec": 86, "word_embed": 87, "xlm_roberta_embed": 88, "xlm_roberta_sentence_embed": 89, "xlnet_embed": 90, "er": [91, 92], "entity_rul": 91, "graph_extract": 93, "subpackag": [94, 181], "keyword_extract": [95, 96], "yake_keyword_extract": 96, "ld_dl": [97, 98], "language_detector_dl": 98, "lemmat": 99, "matcher": [100, 101, 102, 103, 104, 105], "big_text_match": 100, "date_match": 101, "multi_date_match": 103, "regex_match": 104, "text_match": 105, "n_gram_gener": 106, "ner": [107, 108, 109, 110, 111, 112, 113], "ner_approach": 108, "ner_convert": 109, "ner_crf": 110, "ner_dl": 111, "ner_overwrit": 112, "zero_shot_ner_model": 113, "normal": 114, "openai": [115, 116, 117], "openai_complet": 116, "openai_embed": 117, "param": [118, 119, 120], "classifier_encod": 118, "evaluation_dl_param": 119, "po": [121, 122, 197, 214], "perceptron": 122, "sentenc": [123, 124, 125, 209], "sentence_detector": 124, "sentence_detector_dl": 125, "sentiment": [126, 127, 128], "sentiment_detector": 127, "vivekn_senti": 128, "seq2seq": [129, 130, 131, 132, 133, 134, 135], "bart_transform": 129, "gpt2_transform": 130, "llama2_transform": 132, "m2m100_transform": 133, "marian_transform": 134, "t5_transform": 135, "similar": [136, 137], "document_similarity_rank": 136, "spell_check": [138, 139, 140, 141], "context_spell_check": 138, "norvig_sweet": 140, "symmetric_delet": 141, "stemmer": 142, "stop_words_clean": 143, "tf_ner_dl_graph_build": 144, "token": [145, 146, 147, 148, 149, 209], "chunk_token": 145, "recursive_token": 147, "regex_token": 148, "token2_chunk": 150, "w": [151, 152], "word_segment": 152, "base": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "audio_assembl": 153, "doc2_chunk": 154, "document_assembl": 155, "embeddings_finish": 156, "finish": [157, 209], "graph_finish": 158, "has_recursive_fit": 159, "has_recursive_transform": 160, "image_assembl": 161, "light_pipelin": 163, "multi_document_assembl": 164, "recursive_pipelin": 165, "table_assembl": 166, "token_assembl": 167, "common": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 208], "annotator_approach": 168, "annotator_model": 169, "annotator_properti": 170, "annotator_typ": 171, "coverage_result": 172, "match_strategi": 174, "properti": 175, "function": [175, 179, 180, 181, 208, 210], "read_a": 176, "recursive_annotator_approach": 177, "storag": 178, "util": [179, 193, 202], "packag": 181, "intern": [182, 183, 184, 185, 186, 187], "annotator_java_ml": 182, "annotator_transform": 183, "extended_java_wrapp": 184, "params_getters_sett": 186, "recurs": 187, "log": [188, 189, 204, 206], "comet": [188, 204], "pretrain": [190, 191, 192, 193, 208, 212, 213], "pretrained_pipelin": 191, "resource_download": 192, "train": [194, 195, 196, 197, 198, 199, 200, 214], "conll": [194, 214], "conllu": [195, 214], "pub_tat": 198, "spacy_to_annot": 199, "tfgraph": 200, "upload_to_hub": 201, "api": 203, "refer": 203, "A": 204, "meta": 204, "machin": [204, 205], "learn": [204, 205], "platform": [204, 205], "pipelin": [204, 209, 212, 213], "paramet": 204, "evalu": 204, "metric": 204, "visual": 204, "run": 204, "an": 204, "offlin": 204, "experi": 204, "mlflow": 205, "lifecycl": 205, "third": 206, "parti": 206, "project": 206, "approach": 208, "model": 208, "note": 208, "avail": [208, 213], "set": 209, "up": 209, "your": 209, "own": 209, "type": 209, "necessari": 209, "import": 209, "construct": 209, "documentassembl": 209, "data": 209, "detect": 209, "out": 209, "put": 209, "all": 209, "togeth": 209, "ml": [209, 213], "helper": 210, "user": 211, "guid": 211, "light": 212, "convert": 212, "pipelinemodel": 212, "download": 213, "As": 213, "lightpipelin": 213, "load": 214, "dataset": 214, "spell": 214, "checker": 214, "pubtat": 214}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [204, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [191, "classes"], [192, "classes"], [194, "classes"], [195, "classes"], [197, "classes"], [198, "classes"], [199, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [31, "submodules"], [50, "submodules"], [54, "submodules"], [60, "submodules"], [77, "submodules"], [92, "submodules"], [94, "submodules"], [95, "submodules"], [97, "submodules"], [102, "submodules"], [107, "submodules"], [115, "submodules"], [121, "submodules"], [123, "submodules"], [126, "submodules"], [131, "submodules"], [137, "submodules"], [139, "submodules"], [146, "submodules"], [151, "submodules"], [162, "submodules"], [173, "submodules"], [181, "submodules"], [185, "submodules"], [189, "submodules"], [190, "submodules"], [196, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Examples": [[26, "examples"]], "Returns": [[26, "returns"], [26, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[31, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[42, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[43, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[50, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[51, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[52, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[53, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[54, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[55, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[56, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[57, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[58, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[59, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[60, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[61, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[62, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[63, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[64, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[65, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[66, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[67, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[69, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[70, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[71, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[73, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[74, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[75, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[76, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[77, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[78, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[79, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[80, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[81, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[82, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[83, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[84, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[85, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[86, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[87, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[88, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[89, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[90, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[91, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[92, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[93, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[94, "module-sparknlp.annotator"]], "Subpackages": [[94, "subpackages"], [181, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[95, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[96, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[97, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[98, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[99, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[100, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[101, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[102, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[103, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[104, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[105, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[106, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[107, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[108, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[109, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[110, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[111, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[112, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[113, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[114, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[115, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[116, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[117, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[118, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[119, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[120, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[121, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[122, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[123, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[124, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[125, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[126, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[127, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[128, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[129, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[130, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[131, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[132, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[133, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[134, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[135, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[136, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[137, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[138, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[139, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[140, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[141, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[142, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[143, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[144, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[145, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[146, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[147, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[148, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[149, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[150, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[151, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[152, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[153, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[154, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[155, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[156, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[157, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[158, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[159, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[160, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[161, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[162, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[163, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[164, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[165, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[166, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[167, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[168, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[169, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[170, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[171, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[172, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[173, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[174, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[175, "module-sparknlp.common.properties"]], "Functions": [[175, "functions"], [179, "functions"], [180, "functions"], [181, "functions"]], "sparknlp.common.read_as": [[176, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[177, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[178, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[179, "module-sparknlp.common.utils"]], "sparknlp.functions": [[180, "module-sparknlp.functions"]], "sparknlp": [[181, "module-sparknlp"]], "Package Contents": [[181, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[182, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[183, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[184, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[185, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[186, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[187, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[188, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[189, "module-sparknlp.logging"]], "sparknlp.pretrained": [[190, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[191, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[192, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[193, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[194, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[195, "module-sparknlp.training.conllu"]], "sparknlp.training": [[196, "module-sparknlp.training"]], "sparknlp.training.pos": [[197, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[198, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[199, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[200, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[201, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[202, "module-sparknlp.util"]], "API Reference": [[203, "api-reference"]], "Modules": [[203, "modules"]], "Comet - A meta machine learning platform": [[204, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[204, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[204, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[204, "logging-evaluation-metrics"]], "Logging Visualizations": [[204, "logging-visualizations"]], "Running An Offline Experiment": [[204, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[205, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[206, "third-party-projects"]], "Logging": [[206, "logging"]], "Annotation": [[207, "annotation"]], "Annotators": [[208, "annotators"]], "Annotator Approaches": [[208, "annotator-approaches"]], "Annotator Models": [[208, "annotator-models"]], "Note": [[208, "note"]], "Pretrained Models": [[208, "pretrained-models"]], "Common Functions": [[208, "common-functions"]], "Available Annotators": [[208, "available-annotators"]], "Setting up your own pipeline": [[209, "setting-up-your-own-pipeline"]], "Annotator types": [[209, "annotator-types"]], "Necessary imports": [[209, "necessary-imports"]], "Constructing the Pipeline": [[209, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[209, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[209, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[209, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[209, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[210, "helper-functions"]], "User Guide": [[211, "user-guide"]], "Light Pipelines": [[212, "light-pipelines"]], "Converting PipelineModels": [[212, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[212, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[213, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[213, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[213, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[213, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[213, "available-pipelines"]], "Loading datasets for training": [[214, "loading-datasets-for-training"]], "POS Dataset": [[214, "pos-dataset"]], "CoNLL Dataset": [[214, "conll-dataset"]], "CoNLLU Dataset": [[214, "conllu-dataset"]], "Spell Checkers Dataset": [[214, "spell-checkers-dataset"]], "PubTator Dataset": [[214, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [31, "module-sparknlp.annotator.classifier_dl"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [42, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [43, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [48, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [49, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [50, "module-sparknlp.annotator.coref"], [51, "module-sparknlp.annotator.coref.spanbert_coref"], [52, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [53, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [54, "module-sparknlp.annotator.cv"], [55, "module-sparknlp.annotator.cv.swin_for_image_classification"], [56, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [57, "module-sparknlp.annotator.cv.vit_for_image_classification"], [58, "module-sparknlp.annotator.date2_chunk"], [59, "module-sparknlp.annotator.dependency.dependency_parser"], [60, "module-sparknlp.annotator.dependency"], [61, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [62, "module-sparknlp.annotator.document_character_text_splitter"], [63, "module-sparknlp.annotator.document_normalizer"], [64, "module-sparknlp.annotator.document_token_splitter"], [65, "module-sparknlp.annotator.document_token_splitter_test"], [66, "module-sparknlp.annotator.embeddings.albert_embeddings"], [67, "module-sparknlp.annotator.embeddings.bert_embeddings"], [68, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [69, "module-sparknlp.annotator.embeddings.bge_embeddings"], [70, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [71, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [72, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [73, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [74, "module-sparknlp.annotator.embeddings.doc2vec"], [75, "module-sparknlp.annotator.embeddings.e5_embeddings"], [76, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [77, "module-sparknlp.annotator.embeddings"], [78, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [79, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [80, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [81, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [82, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [83, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [84, "module-sparknlp.annotator.embeddings.uae_embeddings"], [85, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [86, "module-sparknlp.annotator.embeddings.word2vec"], [87, "module-sparknlp.annotator.embeddings.word_embeddings"], [88, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [89, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [90, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [91, "module-sparknlp.annotator.er.entity_ruler"], [92, "module-sparknlp.annotator.er"], [93, "module-sparknlp.annotator.graph_extraction"], [94, "module-sparknlp.annotator"], [95, "module-sparknlp.annotator.keyword_extraction"], [96, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [97, "module-sparknlp.annotator.ld_dl"], [98, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [99, "module-sparknlp.annotator.lemmatizer"], [100, "module-sparknlp.annotator.matcher.big_text_matcher"], [101, "module-sparknlp.annotator.matcher.date_matcher"], [102, "module-sparknlp.annotator.matcher"], [103, "module-sparknlp.annotator.matcher.multi_date_matcher"], [104, "module-sparknlp.annotator.matcher.regex_matcher"], [105, "module-sparknlp.annotator.matcher.text_matcher"], [106, "module-sparknlp.annotator.n_gram_generator"], [107, "module-sparknlp.annotator.ner"], [108, "module-sparknlp.annotator.ner.ner_approach"], [109, "module-sparknlp.annotator.ner.ner_converter"], [110, "module-sparknlp.annotator.ner.ner_crf"], [111, "module-sparknlp.annotator.ner.ner_dl"], [112, "module-sparknlp.annotator.ner.ner_overwriter"], [113, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [114, "module-sparknlp.annotator.normalizer"], [115, "module-sparknlp.annotator.openai"], [116, "module-sparknlp.annotator.openai.openai_completion"], [117, "module-sparknlp.annotator.openai.openai_embeddings"], [118, "module-sparknlp.annotator.param.classifier_encoder"], [119, "module-sparknlp.annotator.param.evaluation_dl_params"], [120, "module-sparknlp.annotator.param"], [121, "module-sparknlp.annotator.pos"], [122, "module-sparknlp.annotator.pos.perceptron"], [123, "module-sparknlp.annotator.sentence"], [124, "module-sparknlp.annotator.sentence.sentence_detector"], [125, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [126, "module-sparknlp.annotator.sentiment"], [127, "module-sparknlp.annotator.sentiment.sentiment_detector"], [128, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [129, "module-sparknlp.annotator.seq2seq.bart_transformer"], [130, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [131, "module-sparknlp.annotator.seq2seq"], [132, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [133, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [134, "module-sparknlp.annotator.seq2seq.marian_transformer"], [135, "module-sparknlp.annotator.seq2seq.t5_transformer"], [136, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [137, "module-sparknlp.annotator.similarity"], [138, "module-sparknlp.annotator.spell_check.context_spell_checker"], [139, "module-sparknlp.annotator.spell_check"], [140, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [141, "module-sparknlp.annotator.spell_check.symmetric_delete"], [142, "module-sparknlp.annotator.stemmer"], [143, "module-sparknlp.annotator.stop_words_cleaner"], [144, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [145, "module-sparknlp.annotator.token.chunk_tokenizer"], [146, "module-sparknlp.annotator.token"], [147, "module-sparknlp.annotator.token.recursive_tokenizer"], [148, "module-sparknlp.annotator.token.regex_tokenizer"], [149, "module-sparknlp.annotator.token.tokenizer"], [150, "module-sparknlp.annotator.token2_chunk"], [151, "module-sparknlp.annotator.ws"], [152, "module-sparknlp.annotator.ws.word_segmenter"], [153, "module-sparknlp.base.audio_assembler"], [154, "module-sparknlp.base.doc2_chunk"], [155, "module-sparknlp.base.document_assembler"], [156, "module-sparknlp.base.embeddings_finisher"], [157, "module-sparknlp.base.finisher"], [158, "module-sparknlp.base.graph_finisher"], [159, "module-sparknlp.base.has_recursive_fit"], [160, "module-sparknlp.base.has_recursive_transform"], [161, "module-sparknlp.base.image_assembler"], [162, "module-sparknlp.base"], [163, "module-sparknlp.base.light_pipeline"], [164, "module-sparknlp.base.multi_document_assembler"], [165, "module-sparknlp.base.recursive_pipeline"], [166, "module-sparknlp.base.table_assembler"], [167, "module-sparknlp.base.token_assembler"], [168, "module-sparknlp.common.annotator_approach"], [169, "module-sparknlp.common.annotator_model"], [170, "module-sparknlp.common.annotator_properties"], [171, "module-sparknlp.common.annotator_type"], [172, "module-sparknlp.common.coverage_result"], [173, "module-sparknlp.common"], [174, "module-sparknlp.common.match_strategy"], [175, "module-sparknlp.common.properties"], [176, "module-sparknlp.common.read_as"], [177, "module-sparknlp.common.recursive_annotator_approach"], [178, "module-sparknlp.common.storage"], [179, "module-sparknlp.common.utils"], [180, "module-sparknlp.functions"], [181, "module-sparknlp"], [182, "module-sparknlp.internal.annotator_java_ml"], [183, "module-sparknlp.internal.annotator_transformer"], [184, "module-sparknlp.internal.extended_java_wrapper"], [185, "module-sparknlp.internal"], [186, "module-sparknlp.internal.params_getters_setters"], [187, "module-sparknlp.internal.recursive"], [188, "module-sparknlp.logging.comet"], [189, "module-sparknlp.logging"], [190, "module-sparknlp.pretrained"], [191, "module-sparknlp.pretrained.pretrained_pipeline"], [192, "module-sparknlp.pretrained.resource_downloader"], [193, "module-sparknlp.pretrained.utils"], [194, "module-sparknlp.training.conll"], [195, "module-sparknlp.training.conllu"], [196, "module-sparknlp.training"], [197, "module-sparknlp.training.pos"], [198, "module-sparknlp.training.pub_tator"], [199, "module-sparknlp.training.spacy_to_annotation"], [200, "module-sparknlp.training.tfgraphs"], [201, "module-sparknlp.upload_to_hub"], [202, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "getclasses() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (debertaforzeroshotclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (debertaforzeroshotclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[31, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "pretrained() (mpnetforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "getclasses() (mpnetforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "pretrained() (mpnetforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[37, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[37, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[42, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[42, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[43, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[43, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[43, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[43, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[50, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[51, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[51, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[52, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[52, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[53, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[53, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[54, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[55, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[55, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[56, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[56, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[57, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[57, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[58, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[58, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[58, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[59, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[59, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[60, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[61, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[61, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[62, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[62, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[63, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[63, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[64, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[64, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[65, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[65, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[65, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[66, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[66, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[67, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[67, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[68, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[68, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[69, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[69, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[70, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[70, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[71, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[71, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[71, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[71, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[72, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[72, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[73, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[73, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[74, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[74, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[75, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[75, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[76, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[76, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[77, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[78, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[78, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[79, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[79, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[80, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[80, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[81, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[81, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[82, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[82, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[83, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[83, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[83, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[84, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "loadsavedmodel() (uaeembeddings static method)": [[84, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "pretrained() (uaeembeddings static method)": [[84, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[84, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[84, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[85, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[85, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[85, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[85, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[85, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[85, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[86, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[86, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[87, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[87, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[88, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[88, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[89, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[89, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[90, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[90, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[90, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[90, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[90, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[91, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[91, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[91, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[91, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[91, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[91, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[91, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[92, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[93, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[93, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[94, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[95, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[96, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[96, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[97, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[98, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[98, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[98, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[98, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[98, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[98, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[98, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[99, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[99, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[99, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[99, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[99, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[99, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[99, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[100, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[100, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[101, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[101, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[102, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[103, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[103, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[104, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[104, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[104, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[104, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[104, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[104, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[104, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[105, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[105, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[106, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[106, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[106, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[106, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[106, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[107, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[108, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[108, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[109, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[109, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[109, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[109, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[109, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[110, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[110, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[111, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[111, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[112, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[112, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[112, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[112, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[112, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[113, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[113, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[113, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[113, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[113, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[113, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[113, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[114, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[114, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[114, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[114, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[114, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[114, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[114, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[114, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[115, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[116, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[116, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[117, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[117, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[117, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[117, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[118, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[118, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[119, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[119, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[120, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[121, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[122, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[122, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[122, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[122, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[122, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[122, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[122, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[123, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[124, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[124, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[125, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[125, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[126, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[127, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[127, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[127, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[127, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[128, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[128, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[128, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[128, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[128, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[128, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[129, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[129, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[130, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[130, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[131, "module-sparknlp.annotator.seq2seq"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "loadsavedmodel() (llama2transformer static method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "pretrained() (llama2transformer static method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "setconfigprotobytes() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[132, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[132, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "loadsavedmodel() (m2m100transformer static method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "pretrained() (m2m100transformer static method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "setbeamsize() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[133, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[133, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[134, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[134, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[135, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[135, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "asretriever() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[136, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[136, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[137, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[138, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[138, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[139, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[140, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[140, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[141, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[141, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[142, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[142, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[143, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[143, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[143, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[143, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[143, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[143, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[143, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[144, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[144, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[145, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[145, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[145, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[146, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[147, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[147, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[147, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[147, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[147, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[147, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[147, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[148, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[148, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[149, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[149, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[149, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[149, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[149, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[149, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[149, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[150, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[150, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[151, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[152, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[152, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[153, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[153, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[153, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[153, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[153, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[154, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[154, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[155, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[155, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[155, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[155, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[155, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[155, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[155, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[155, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[156, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[156, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[157, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[157, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[157, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[158, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[158, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[158, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[158, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[158, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[158, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[159, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[159, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[160, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[160, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[161, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[161, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[161, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[161, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[161, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[162, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[163, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[163, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[163, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[163, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[163, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[163, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[163, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[163, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[164, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[164, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[165, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[165, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[165, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[166, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[166, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[166, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[166, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[166, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[167, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[167, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[167, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[168, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[168, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[169, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[169, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[170, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[170, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[171, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[172, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[173, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[174, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[174, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[175, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[175, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[175, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[175, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[175, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[176, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[176, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[177, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[177, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[178, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[179, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[179, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[180, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[180, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[180, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[180, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[180, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[180, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[180, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[180, "module-sparknlp.functions"]], "sparknlp": [[181, "module-sparknlp"]], "start() (in module sparknlp)": [[181, "sparknlp.start"]], "version() (in module sparknlp)": [[181, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[182, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[182, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[182, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[182, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[183, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[183, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[184, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[184, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[184, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[185, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[186, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[186, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[186, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[186, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[187, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[187, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[187, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[187, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[188, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[188, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[188, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[189, "module-sparknlp.logging"]], "sparknlp.pretrained": [[190, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[191, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[191, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[191, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[191, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[191, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[191, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[192, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[192, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[193, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[194, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[194, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[194, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[195, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[195, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[195, "module-sparknlp.training.conllu"]], "sparknlp.training": [[196, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[197, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[197, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[197, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[198, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[198, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[198, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[199, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[199, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[200, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[201, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[202, "module-sparknlp.util"]]}})